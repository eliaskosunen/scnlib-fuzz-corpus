_ZNK7simdutf14implementation25required_instruction_setsEv:
 1445|      2|  virtual uint32_t required_instruction_sets() const { return _required_instruction_sets; }
_ZN7simdutf14implementationC2ENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_j:
 2455|      7|  {
 2456|      7|  }
_ZN7simdutf8internal29available_implementation_listC2Ev:
 2485|      1|  simdutf_really_inline available_implementation_list() {}
_ZN7simdutf14implementationD2Ev:
 2457|      5|  virtual ~implementation()=default;
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEaSEPS3_:
 2551|      1|  atomic_ptr& operator=(T *_ptr) { ptr = _ptr; return *this; }
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEcvPS3_Ev:
 2548|      1|  operator T*() { return ptr.load(); }
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEC2EPS3_:
 2531|      1|  atomic_ptr(T *_ptr) : ptr{_ptr} {}
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEptEv:
 2550|  1.02M|  T* operator->() { return ptr.load(); }

simdutf.cpp:_ZN7simdutf8internalL30detect_supported_architecturesEv:
  170|      1|static inline uint32_t detect_supported_architectures() {
  171|      1|  uint32_t eax;
  172|      1|  uint32_t ebx = 0;
  173|      1|  uint32_t ecx = 0;
  174|      1|  uint32_t edx = 0;
  175|      1|  uint32_t host_isa = 0x0;
  176|       |
  177|       |  // EBX for EAX=0x1
  178|      1|  eax = 0x1;
  179|      1|  cpuid(&eax, &ebx, &ecx, &edx);
  180|       |
  181|      1|  if (ecx & cpuid_bit::sse42) {
  ------------------
  |  Branch (181:7): [True: 1, False: 0]
  ------------------
  182|      1|    host_isa |= instruction_set::SSE42;
  183|      1|  }
  184|       |
  185|      1|  if (ecx & cpuid_bit::pclmulqdq) {
  ------------------
  |  Branch (185:7): [True: 1, False: 0]
  ------------------
  186|      1|    host_isa |= instruction_set::PCLMULQDQ;
  187|      1|  }
  188|       |
  189|      1|  if ((ecx & cpuid_bit::osxsave) != cpuid_bit::osxsave) {
  ------------------
  |  Branch (189:7): [True: 0, False: 1]
  ------------------
  190|      0|    return host_isa;
  191|      0|  }
  192|       |
  193|       |  // xgetbv for checking if the OS saves registers
  194|      1|  uint64_t xcr0 = xgetbv();
  195|       |
  196|      1|  if ((xcr0 & cpuid_bit::xcr0_bit::avx256_saved) == 0) {
  ------------------
  |  Branch (196:7): [True: 0, False: 1]
  ------------------
  197|      0|    return host_isa;
  198|      0|  }
  199|       |  // ECX for EAX=0x7
  200|      1|  eax = 0x7;
  201|      1|  ecx = 0x0; // Sub-leaf = 0
  202|      1|  cpuid(&eax, &ebx, &ecx, &edx);
  203|      1|  if (ebx & cpuid_bit::ebx::avx2) {
  ------------------
  |  Branch (203:7): [True: 1, False: 0]
  ------------------
  204|      1|    host_isa |= instruction_set::AVX2;
  205|      1|  }
  206|      1|  if (ebx & cpuid_bit::ebx::bmi1) {
  ------------------
  |  Branch (206:7): [True: 1, False: 0]
  ------------------
  207|      1|    host_isa |= instruction_set::BMI1;
  208|      1|  }
  209|      1|  if (ebx & cpuid_bit::ebx::bmi2) {
  ------------------
  |  Branch (209:7): [True: 1, False: 0]
  ------------------
  210|      1|    host_isa |= instruction_set::BMI2;
  211|      1|  }
  212|      1|  if (!((xcr0 & cpuid_bit::xcr0_bit::avx512_saved) == cpuid_bit::xcr0_bit::avx512_saved)) {
  ------------------
  |  Branch (212:7): [True: 1, False: 0]
  ------------------
  213|      1|    return host_isa;
  214|      1|  }
  215|      0|  if (ebx & cpuid_bit::ebx::avx512f) {
  ------------------
  |  Branch (215:7): [True: 0, False: 0]
  ------------------
  216|      0|    host_isa |= instruction_set::AVX512F;
  217|      0|  }
  218|      0|  if (ebx & cpuid_bit::ebx::avx512bw) {
  ------------------
  |  Branch (218:7): [True: 0, False: 0]
  ------------------
  219|      0|    host_isa |= instruction_set::AVX512BW;
  220|      0|  }
  221|      0|  if (ebx & cpuid_bit::ebx::avx512cd) {
  ------------------
  |  Branch (221:7): [True: 0, False: 0]
  ------------------
  222|      0|    host_isa |= instruction_set::AVX512CD;
  223|      0|  }
  224|      0|  if (ebx & cpuid_bit::ebx::avx512dq) {
  ------------------
  |  Branch (224:7): [True: 0, False: 0]
  ------------------
  225|      0|    host_isa |= instruction_set::AVX512DQ;
  226|      0|  }
  227|      0|  if (ebx & cpuid_bit::ebx::avx512vl) {
  ------------------
  |  Branch (227:7): [True: 0, False: 0]
  ------------------
  228|      0|    host_isa |= instruction_set::AVX512VL;
  229|      0|  }
  230|      0|  if (ecx & cpuid_bit::ecx::avx512vbmi2) {
  ------------------
  |  Branch (230:7): [True: 0, False: 0]
  ------------------
  231|      0|    host_isa |= instruction_set::AVX512VBMI2;
  232|      0|  }
  233|      0|  if (ecx & cpuid_bit::ecx::avx512vpopcnt) {
  ------------------
  |  Branch (233:7): [True: 0, False: 0]
  ------------------
  234|      0|    host_isa |= instruction_set::AVX512VPOPCNTDQ;
  235|      0|  }
  236|      0|  return host_isa;
  237|      1|}
simdutf.cpp:_ZN7simdutf8internalL5cpuidEPjS1_S1_S1_:
  139|      2|                         uint32_t *edx) {
  140|       |#if defined(_MSC_VER)
  141|       |  int cpu_info[4];
  142|       |  __cpuidex(cpu_info, *eax, *ecx);
  143|       |  *eax = cpu_info[0];
  144|       |  *ebx = cpu_info[1];
  145|       |  *ecx = cpu_info[2];
  146|       |  *edx = cpu_info[3];
  147|       |#elif defined(HAVE_GCC_GET_CPUID) && defined(USE_GCC_GET_CPUID)
  148|       |  uint32_t level = *eax;
  149|       |  __get_cpuid(level, eax, ebx, ecx, edx);
  150|       |#else
  151|      2|  uint32_t a = *eax, b, c = *ecx, d;
  152|      2|  asm volatile("cpuid\n\t" : "+a"(a), "=b"(b), "+c"(c), "=d"(d));
  153|      2|  *eax = a;
  154|      2|  *ebx = b;
  155|      2|  *ecx = c;
  156|      2|  *edx = d;
  157|      2|#endif
  158|      2|}
simdutf.cpp:_ZN7simdutf8internalL6xgetbvEv:
  160|      1|static inline uint64_t xgetbv() {
  161|       | #if defined(_MSC_VER)
  162|       |   return _xgetbv(0);
  163|       | #else
  164|      1|   uint32_t xcr0_lo, xcr0_hi;
  165|      1|   asm volatile("xgetbv\n\t" : "=a" (xcr0_lo), "=d" (xcr0_hi) : "c" (0));
  166|      1|   return xcr0_lo | ((uint64_t)xcr0_hi << 32);
  167|      1| #endif
  168|      1| }

_ZN7simdutf6resultC2ENS_10error_codeEm:
    5|  58.7k|  simdutf_really_inline result::result(error_code _err, size_t _pos) : error{_err}, count{_pos} {}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EEC2EPKhm:
   62|   265k|simdutf_really_inline buf_block_reader<STEP_SIZE>::buf_block_reader(const uint8_t *_buf, size_t _len) : buf{_buf}, len{_len}, lenminusstep{len < STEP_SIZE ? 0 : len - STEP_SIZE}, idx{0} {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE14has_full_blockEv:
   68|   298k|simdutf_really_inline bool buf_block_reader<STEP_SIZE>::has_full_block() const {
   69|   298k|  return idx < lenminusstep;
   70|   298k|}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE10full_blockEv:
   73|  32.7k|simdutf_really_inline const uint8_t *buf_block_reader<STEP_SIZE>::full_block() const {
   74|  32.7k|  return &buf[idx];
   75|  32.7k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE7advanceEv:
   86|   298k|simdutf_really_inline void buf_block_reader<STEP_SIZE>::advance() {
   87|   298k|  idx += STEP_SIZE;
   88|   298k|}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE13get_remainderEPh:
   78|   265k|simdutf_really_inline size_t buf_block_reader<STEP_SIZE>::get_remainder(uint8_t *dst) const {
   79|   265k|  if(len == idx) { return 0; } // memcpy(dst, null, 0) will trigger an error with some sanitizers
  ------------------
  |  Branch (79:6): [True: 0, False: 265k]
  ------------------
   80|   265k|  std::memset(dst, 0x20, STEP_SIZE); // std::memset STEP_SIZE because it's more efficient to write out 8 or 16 bytes at once.
   81|   265k|  std::memcpy(dst, buf + idx, len - idx);
   82|   265k|  return len - idx;
   83|   265k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14utf817count_code_pointsEPKcm:
   10|   203k|simdutf_really_inline size_t count_code_points(const char* in, size_t size) {
   11|   203k|    size_t pos = 0;
   12|   203k|    size_t count = 0;
   13|   214k|    for(;pos + 64 <= size; pos += 64) {
  ------------------
  |  Branch (13:10): [True: 10.5k, False: 203k]
  ------------------
   14|  10.5k|      simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
   15|  10.5k|      uint64_t utf8_continuation_mask = input.gt(-65);
   16|  10.5k|      count += count_ones(utf8_continuation_mask);
   17|  10.5k|    }
   18|   203k|    return count + scalar::utf8::count_code_points(in + pos, size - pos);
   19|   203k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoderC2Ev:
  115|   520k|    validating_transcoder() : error(uint8_t(0)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder7convertEPKcmPDi:
  129|   484k|    simdutf_really_inline size_t convert(const char* in, size_t size, char32_t* utf32_output) {
  130|   484k|      size_t pos = 0;
  131|   484k|      char32_t* start{utf32_output};
  132|       |      // In the worst case, we have the haswell kernel which can cause an overflow of
  133|       |      // 8 bytes when calling convert_masked_utf8_to_utf32. If you skip the last 16 bytes,
  134|       |      // and if the data is valid, then it is entirely safe because 16 UTF-8 bytes generate
  135|       |      // much more than 8 bytes. However, you cannot generally assume that you have valid
  136|       |      // UTF-8 input, so we are going to go back from the end counting 4 leading bytes,
  137|       |      // to give us a good margin.
  138|   484k|      size_t leading_byte = 0;
  139|   484k|      size_t margin = size;
  140|  1.07M|      for(; margin > 0 && leading_byte < 4; margin--) {
  ------------------
  |  Branch (140:13): [True: 595k, False: 484k]
  |  Branch (140:27): [True: 595k, False: 0]
  ------------------
  141|   595k|        leading_byte += (int8_t(in[margin-1]) > -65);
  142|   595k|      }
  143|       |      // If the input is long enough, then we have that margin-1 is the fourth last leading byte.
  144|   484k|      const size_t safety_margin = size - margin + 1; // to avoid overruns!
  145|   484k|      while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (145:13): [True: 0, False: 484k]
  ------------------
  146|      0|        simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
  147|      0|        if(input.is_ascii()) {
  ------------------
  |  Branch (147:12): [True: 0, False: 0]
  ------------------
  148|      0|          input.store_ascii_as_utf32(utf32_output);
  149|      0|          utf32_output += 64;
  150|      0|          pos += 64;
  151|      0|        } else {
  152|       |          // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  153|      0|          static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  154|      0|              "We support either two or four chunks per 64-byte block.");
  155|      0|          auto zero = simd8<uint8_t>{uint8_t(0)};
  156|      0|          if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (156:14): [Folded - Ignored]
  ------------------
  157|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  158|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  159|      0|          } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (159:21): [Folded - Ignored]
  ------------------
  160|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  161|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  162|      0|            this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  163|      0|            this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  164|      0|          }
  165|      0|          uint64_t utf8_continuation_mask = input.lt(-65 + 1);
  166|      0|          uint64_t utf8_leading_mask = ~utf8_continuation_mask;
  167|      0|          uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
  168|       |          // We process in blocks of up to 12 bytes except possibly
  169|       |          // for fast paths which may process up to 16 bytes. For the
  170|       |          // slow path to work, we should have at least 12 input bytes left.
  171|      0|          size_t max_starting_point = (pos + 64) - 12;
  172|       |          // Next loop is going to run at least five times.
  173|      0|          while(pos < max_starting_point) {
  ------------------
  |  Branch (173:17): [True: 0, False: 0]
  ------------------
  174|       |            // Performance note: our ability to compute 'consumed' and
  175|       |            // then shift and recompute is critical. If there is a
  176|       |            // latency of, say, 4 cycles on getting 'consumed', then
  177|       |            // the inner loop might have a total latency of about 6 cycles.
  178|       |            // Yet we process between 6 to 12 inputs bytes, thus we get
  179|       |            // a speed limit between 1 cycle/byte and 0.5 cycle/byte
  180|       |            // for this section of the code. Hence, there is a limit
  181|       |            // to how much we can further increase this latency before
  182|       |            // it seriously harms performance.
  183|      0|            size_t consumed = convert_masked_utf8_to_utf32(in + pos,
  184|      0|                            utf8_end_of_code_point_mask, utf32_output);
  185|      0|            pos += consumed;
  186|      0|            utf8_end_of_code_point_mask >>= consumed;
  187|      0|          }
  188|       |          // At this point there may remain between 0 and 12 bytes in the
  189|       |          // 64-byte block. These bytes will be processed again. So we have an
  190|       |          // 80% efficiency (in the worst case). In practice we expect an
  191|       |          // 85% to 90% efficiency.
  192|      0|        }
  193|      0|      }
  194|   484k|      if(errors()) { return 0; }
  ------------------
  |  Branch (194:10): [True: 0, False: 484k]
  ------------------
  195|   484k|      if(pos < size) {
  ------------------
  |  Branch (195:10): [True: 484k, False: 0]
  ------------------
  196|   484k|        size_t howmany  = scalar::utf8_to_utf32::convert(in + pos, size - pos, utf32_output);
  197|   484k|        if(howmany == 0) { return 0; }
  ------------------
  |  Branch (197:12): [True: 36.3k, False: 447k]
  ------------------
  198|   447k|        utf32_output += howmany;
  199|   447k|      }
  200|   447k|      return utf32_output - start;
  201|   484k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder16check_utf8_bytesENS1_4simd5simd8IhEES6_:
  119|    984|    simdutf_really_inline void check_utf8_bytes(const simd8<uint8_t> input, const simd8<uint8_t> prev_input) {
  120|       |      // Flip prev1...prev3 so we can easily determine if they are 2+, 3+ or 4+ lead bytes
  121|       |      // (2, 3, 4-byte leads become large positive numbers instead of small negative numbers)
  122|    984|      simd8<uint8_t> prev1 = input.prev<1>(prev_input);
  123|    984|      simd8<uint8_t> sc = check_special_cases(input, prev1);
  124|    984|      this->error |= check_multibyte_lengths(input, prev_input, sc);
  125|    984|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3219check_special_casesENS1_4simd5simd8IhEES5_:
   11|    984|  simdutf_really_inline simd8<uint8_t> check_special_cases(const simd8<uint8_t> input, const simd8<uint8_t> prev1) {
   12|       |// Bit 0 = Too Short (lead byte/ASCII followed by lead byte/ASCII)
   13|       |// Bit 1 = Too Long (ASCII followed by continuation)
   14|       |// Bit 2 = Overlong 3-byte
   15|       |// Bit 4 = Surrogate
   16|       |// Bit 5 = Overlong 2-byte
   17|       |// Bit 7 = Two Continuations
   18|    984|    constexpr const uint8_t TOO_SHORT   = 1<<0; // 11______ 0_______
   19|       |                                                // 11______ 11______
   20|    984|    constexpr const uint8_t TOO_LONG    = 1<<1; // 0_______ 10______
   21|    984|    constexpr const uint8_t OVERLONG_3  = 1<<2; // 11100000 100_____
   22|    984|    constexpr const uint8_t SURROGATE   = 1<<4; // 11101101 101_____
   23|    984|    constexpr const uint8_t OVERLONG_2  = 1<<5; // 1100000_ 10______
   24|    984|    constexpr const uint8_t TWO_CONTS   = 1<<7; // 10______ 10______
   25|    984|    constexpr const uint8_t TOO_LARGE   = 1<<3; // 11110100 1001____
   26|       |                                                // 11110100 101_____
   27|       |                                                // 11110101 1001____
   28|       |                                                // 11110101 101_____
   29|       |                                                // 1111011_ 1001____
   30|       |                                                // 1111011_ 101_____
   31|       |                                                // 11111___ 1001____
   32|       |                                                // 11111___ 101_____
   33|    984|    constexpr const uint8_t TOO_LARGE_1000 = 1<<6;
   34|       |                                                // 11110101 1000____
   35|       |                                                // 1111011_ 1000____
   36|       |                                                // 11111___ 1000____
   37|    984|    constexpr const uint8_t OVERLONG_4  = 1<<6; // 11110000 1000____
   38|       |
   39|    984|    const simd8<uint8_t> byte_1_high = prev1.shr<4>().lookup_16<uint8_t>(
   40|       |      // 0_______ ________ <ASCII in byte 1>
   41|    984|      TOO_LONG, TOO_LONG, TOO_LONG, TOO_LONG,
   42|    984|      TOO_LONG, TOO_LONG, TOO_LONG, TOO_LONG,
   43|       |      // 10______ ________ <continuation in byte 1>
   44|    984|      TWO_CONTS, TWO_CONTS, TWO_CONTS, TWO_CONTS,
   45|       |      // 1100____ ________ <two byte lead in byte 1>
   46|    984|      TOO_SHORT | OVERLONG_2,
   47|       |      // 1101____ ________ <two byte lead in byte 1>
   48|    984|      TOO_SHORT,
   49|       |      // 1110____ ________ <three byte lead in byte 1>
   50|    984|      TOO_SHORT | OVERLONG_3 | SURROGATE,
   51|       |      // 1111____ ________ <four+ byte lead in byte 1>
   52|    984|      TOO_SHORT | TOO_LARGE | TOO_LARGE_1000 | OVERLONG_4
   53|    984|    );
   54|    984|    constexpr const uint8_t CARRY = TOO_SHORT | TOO_LONG | TWO_CONTS; // These all have ____ in byte 1 .
   55|    984|    const simd8<uint8_t> byte_1_low = (prev1 & 0x0F).lookup_16<uint8_t>(
   56|       |      // ____0000 ________
   57|    984|      CARRY | OVERLONG_3 | OVERLONG_2 | OVERLONG_4,
   58|       |      // ____0001 ________
   59|    984|      CARRY | OVERLONG_2,
   60|       |      // ____001_ ________
   61|    984|      CARRY,
   62|    984|      CARRY,
   63|       |
   64|       |      // ____0100 ________
   65|    984|      CARRY | TOO_LARGE,
   66|       |      // ____0101 ________
   67|    984|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   68|       |      // ____011_ ________
   69|    984|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   70|    984|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   71|       |
   72|       |      // ____1___ ________
   73|    984|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   74|    984|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   75|    984|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   76|    984|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   77|    984|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   78|       |      // ____1101 ________
   79|    984|      CARRY | TOO_LARGE | TOO_LARGE_1000 | SURROGATE,
   80|    984|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   81|    984|      CARRY | TOO_LARGE | TOO_LARGE_1000
   82|    984|    );
   83|    984|    const simd8<uint8_t> byte_2_high = input.shr<4>().lookup_16<uint8_t>(
   84|       |      // ________ 0_______ <ASCII in byte 2>
   85|    984|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT,
   86|    984|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT,
   87|       |
   88|       |      // ________ 1000____
   89|    984|      TOO_LONG | OVERLONG_2 | TWO_CONTS | OVERLONG_3 | TOO_LARGE_1000 | OVERLONG_4,
   90|       |      // ________ 1001____
   91|    984|      TOO_LONG | OVERLONG_2 | TWO_CONTS | OVERLONG_3 | TOO_LARGE,
   92|       |      // ________ 101_____
   93|    984|      TOO_LONG | OVERLONG_2 | TWO_CONTS | SURROGATE  | TOO_LARGE,
   94|    984|      TOO_LONG | OVERLONG_2 | TWO_CONTS | SURROGATE  | TOO_LARGE,
   95|       |
   96|       |      // ________ 11______
   97|    984|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT
   98|    984|    );
   99|    984|    return (byte_1_high & byte_1_low & byte_2_high);
  100|    984|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3223check_multibyte_lengthsENS1_4simd5simd8IhEES5_S5_:
  102|    984|      const simd8<uint8_t> prev_input, const simd8<uint8_t> sc) {
  103|    984|    simd8<uint8_t> prev2 = input.prev<2>(prev_input);
  104|    984|    simd8<uint8_t> prev3 = input.prev<3>(prev_input);
  105|    984|    simd8<uint8_t> must23 = simd8<uint8_t>(must_be_2_3_continuation(prev2, prev3));
  106|    984|    simd8<uint8_t> must23_80 = must23 & uint8_t(0x80);
  107|    984|    return must23_80 ^ sc;
  108|    984|  }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder6errorsEv:
  290|   520k|    simdutf_really_inline bool errors() const {
  291|   520k|      return this->error.any_bits_set_anywhere();
  292|   520k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder19convert_with_errorsEPKcmPDi:
  203|  36.5k|    simdutf_really_inline result convert_with_errors(const char* in, size_t size, char32_t* utf32_output) {
  204|  36.5k|      size_t pos = 0;
  205|  36.5k|      char32_t* start{utf32_output};
  206|       |      // In the worst case, we have the haswell kernel which can cause an overflow of
  207|       |      // 8 bytes when calling convert_masked_utf8_to_utf32. If you skip the last 16 bytes,
  208|       |      // and if the data is valid, then it is entirely safe because 16 UTF-8 bytes generate
  209|       |      // much more than 8 bytes. However, you cannot generally assume that you have valid
  210|       |      // UTF-8 input, so we are going to go back from the end counting 4 leading bytes,
  211|       |      // to give us a good margin.
  212|  36.5k|      size_t leading_byte = 0;
  213|  36.5k|      size_t margin = size;
  214|   193k|      for(; margin > 0 && leading_byte < 4; margin--) {
  ------------------
  |  Branch (214:13): [True: 193k, False: 570]
  |  Branch (214:27): [True: 157k, False: 36.0k]
  ------------------
  215|   157k|        leading_byte += (int8_t(in[margin-1]) > -65);
  216|   157k|      }
  217|       |      // If the input is long enough, then we have that margin-1 is the fourth last leading byte.
  218|  36.5k|      const size_t safety_margin = size - margin + 1; // to avoid overruns!
  219|  36.5k|      while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (219:13): [True: 492, False: 36.0k]
  ------------------
  220|    492|        simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
  221|    492|        if(input.is_ascii()) {
  ------------------
  |  Branch (221:12): [True: 0, False: 492]
  ------------------
  222|      0|          input.store_ascii_as_utf32(utf32_output);
  223|      0|          utf32_output += 64;
  224|      0|          pos += 64;
  225|    492|        } else {
  226|       |          // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  227|    492|          static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  228|    492|              "We support either two or four chunks per 64-byte block.");
  229|    492|          auto zero = simd8<uint8_t>{uint8_t(0)};
  230|    492|          if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (230:14): [Folded - Ignored]
  ------------------
  231|    492|            this->check_utf8_bytes(input.chunks[0], zero);
  232|    492|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  233|    492|          } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (233:21): [Folded - Ignored]
  ------------------
  234|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  235|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  236|      0|            this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  237|      0|            this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  238|      0|          }
  239|    492|          if (errors()) {
  ------------------
  |  Branch (239:15): [True: 492, False: 0]
  ------------------
  240|    492|            result res = scalar::utf8_to_utf32::rewind_and_convert_with_errors(pos, in + pos, size - pos, utf32_output);
  241|    492|            res.count += pos;
  242|    492|            return res;
  243|    492|          }
  244|      0|          uint64_t utf8_continuation_mask = input.lt(-65 + 1);
  245|      0|          uint64_t utf8_leading_mask = ~utf8_continuation_mask;
  246|      0|          uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
  247|       |          // We process in blocks of up to 12 bytes except possibly
  248|       |          // for fast paths which may process up to 16 bytes. For the
  249|       |          // slow path to work, we should have at least 12 input bytes left.
  250|      0|          size_t max_starting_point = (pos + 64) - 12;
  251|       |          // Next loop is going to run at least five times.
  252|      0|          while(pos < max_starting_point) {
  ------------------
  |  Branch (252:17): [True: 0, False: 0]
  ------------------
  253|       |            // Performance note: our ability to compute 'consumed' and
  254|       |            // then shift and recompute is critical. If there is a
  255|       |            // latency of, say, 4 cycles on getting 'consumed', then
  256|       |            // the inner loop might have a total latency of about 6 cycles.
  257|       |            // Yet we process between 6 to 12 inputs bytes, thus we get
  258|       |            // a speed limit between 1 cycle/byte and 0.5 cycle/byte
  259|       |            // for this section of the code. Hence, there is a limit
  260|       |            // to how much we can further increase this latency before
  261|       |            // it seriously harms performance.
  262|      0|            size_t consumed = convert_masked_utf8_to_utf32(in + pos,
  263|      0|                            utf8_end_of_code_point_mask, utf32_output);
  264|      0|            pos += consumed;
  265|      0|            utf8_end_of_code_point_mask >>= consumed;
  266|      0|          }
  267|       |          // At this point there may remain between 0 and 12 bytes in the
  268|       |          // 64-byte block. These bytes will be processed again. So we have an
  269|       |          // 80% efficiency (in the worst case). In practice we expect an
  270|       |          // 85% to 90% efficiency.
  271|      0|        }
  272|    492|      }
  273|  36.0k|      if(errors()) {
  ------------------
  |  Branch (273:10): [True: 0, False: 36.0k]
  ------------------
  274|      0|        result res = scalar::utf8_to_utf32::rewind_and_convert_with_errors(pos, in + pos, size - pos, utf32_output);
  275|      0|        res.count += pos;
  276|      0|        return res;
  277|      0|      }
  278|  36.0k|      if(pos < size) {
  ------------------
  |  Branch (278:10): [True: 36.0k, False: 0]
  ------------------
  279|  36.0k|        result res = scalar::utf8_to_utf32::rewind_and_convert_with_errors(pos, in + pos, size - pos, utf32_output);
  280|  36.0k|        if (res.error) {    // In case of error, we want the error position
  ------------------
  |  Branch (280:13): [True: 13.9k, False: 22.1k]
  ------------------
  281|  13.9k|          res.count += pos;
  282|  13.9k|          return res;
  283|  22.1k|        } else {    // In case of success, we want the number of word written
  284|  22.1k|          utf32_output += res.count;
  285|  22.1k|        }
  286|  36.0k|      }
  287|  22.1k|      return result(error_code::SUCCESS, utf32_output - start);
  288|  36.0k|    }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3213convert_validEPKcmPDi:
   12|  11.8k|    char32_t* utf32_output) noexcept {
   13|  11.8k|  size_t pos = 0;
   14|  11.8k|  char32_t* start{utf32_output};
   15|  11.8k|  const size_t safety_margin = 16; // to avoid overruns!
   16|  20.6k|  while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (16:9): [True: 8.81k, False: 11.8k]
  ------------------
   17|  8.81k|    simd8x64<int8_t> in(reinterpret_cast<const int8_t *>(input + pos));
   18|  8.81k|    if(in.is_ascii()) {
  ------------------
  |  Branch (18:8): [True: 4.76k, False: 4.05k]
  ------------------
   19|  4.76k|      in.store_ascii_as_utf32(utf32_output);
   20|  4.76k|      utf32_output += 64;
   21|  4.76k|      pos += 64;
   22|  4.76k|    } else {
   23|       |    // -65 is 0b10111111 in two-complement's, so largest possible continuation byte
   24|  4.05k|    uint64_t utf8_continuation_mask = in.lt(-65 + 1);
   25|  4.05k|    uint64_t utf8_leading_mask = ~utf8_continuation_mask;
   26|  4.05k|    uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
   27|  4.05k|    size_t max_starting_point = (pos + 64) - 12;
   28|  30.7k|    while(pos < max_starting_point) {
  ------------------
  |  Branch (28:11): [True: 26.6k, False: 4.05k]
  ------------------
   29|  26.6k|      size_t consumed = convert_masked_utf8_to_utf32(input + pos,
   30|  26.6k|                          utf8_end_of_code_point_mask, utf32_output);
   31|  26.6k|      pos += consumed;
   32|  26.6k|      utf8_end_of_code_point_mask >>= consumed;
   33|  26.6k|      }
   34|  4.05k|    }
   35|  8.81k|  }
   36|  11.8k|  utf32_output += scalar::utf8_to_utf32::convert_valid(input + pos, size - pos, utf32_output);
   37|  11.8k|  return utf32_output - start;
   38|  11.8k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker16check_next_inputERKNS1_4simd8simd8x64IhEE:
  152|   298k|    simdutf_really_inline void check_next_input(const simd8x64<uint8_t>& input) {
  153|   298k|      if(simdutf_likely(is_ascii(input))) {
  ------------------
  |  |   70|   298k|  #define simdutf_likely(x) __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (70:29): [True: 215k, False: 83.5k]
  |  |  ------------------
  ------------------
  154|   215k|        this->error |= this->prev_incomplete;
  155|   215k|      } else {
  156|       |        // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  157|  83.5k|        static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  158|  83.5k|            "We support either two or four chunks per 64-byte block.");
  159|  83.5k|        if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (159:12): [Folded - Ignored]
  ------------------
  160|  83.5k|          this->check_utf8_bytes(input.chunks[0], this->prev_input_block);
  161|  83.5k|          this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  162|  83.5k|        } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (162:19): [Folded - Ignored]
  ------------------
  163|      0|          this->check_utf8_bytes(input.chunks[0], this->prev_input_block);
  164|      0|          this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  165|      0|          this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  166|      0|          this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  167|      0|        }
  168|  83.5k|        this->prev_incomplete = is_incomplete(input.chunks[simd8x64<uint8_t>::NUM_CHUNKS-1]);
  169|  83.5k|        this->prev_input_block = input.chunks[simd8x64<uint8_t>::NUM_CHUNKS-1];
  170|       |
  171|  83.5k|      }
  172|   298k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker16check_utf8_bytesENS1_4simd5simd8IhEES6_:
  135|   167k|    simdutf_really_inline void check_utf8_bytes(const simd8<uint8_t> input, const simd8<uint8_t> prev_input) {
  136|       |      // Flip prev1...prev3 so we can easily determine if they are 2+, 3+ or 4+ lead bytes
  137|       |      // (2, 3, 4-byte leads become large positive numbers instead of small negative numbers)
  138|   167k|      simd8<uint8_t> prev1 = input.prev<1>(prev_input);
  139|   167k|      simd8<uint8_t> sc = check_special_cases(input, prev1);
  140|   167k|      this->error |= check_multibyte_lengths(input, prev_input, sc);
  141|   167k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation19check_special_casesENS1_4simd5simd8IhEES5_:
    8|   167k|  simdutf_really_inline simd8<uint8_t> check_special_cases(const simd8<uint8_t> input, const simd8<uint8_t> prev1) {
    9|       |// Bit 0 = Too Short (lead byte/ASCII followed by lead byte/ASCII)
   10|       |// Bit 1 = Too Long (ASCII followed by continuation)
   11|       |// Bit 2 = Overlong 3-byte
   12|       |// Bit 4 = Surrogate
   13|       |// Bit 5 = Overlong 2-byte
   14|       |// Bit 7 = Two Continuations
   15|   167k|    constexpr const uint8_t TOO_SHORT   = 1<<0; // 11______ 0_______
   16|       |                                                // 11______ 11______
   17|   167k|    constexpr const uint8_t TOO_LONG    = 1<<1; // 0_______ 10______
   18|   167k|    constexpr const uint8_t OVERLONG_3  = 1<<2; // 11100000 100_____
   19|   167k|    constexpr const uint8_t SURROGATE   = 1<<4; // 11101101 101_____
   20|   167k|    constexpr const uint8_t OVERLONG_2  = 1<<5; // 1100000_ 10______
   21|   167k|    constexpr const uint8_t TWO_CONTS   = 1<<7; // 10______ 10______
   22|   167k|    constexpr const uint8_t TOO_LARGE   = 1<<3; // 11110100 1001____
   23|       |                                                // 11110100 101_____
   24|       |                                                // 11110101 1001____
   25|       |                                                // 11110101 101_____
   26|       |                                                // 1111011_ 1001____
   27|       |                                                // 1111011_ 101_____
   28|       |                                                // 11111___ 1001____
   29|       |                                                // 11111___ 101_____
   30|   167k|    constexpr const uint8_t TOO_LARGE_1000 = 1<<6;
   31|       |                                                // 11110101 1000____
   32|       |                                                // 1111011_ 1000____
   33|       |                                                // 11111___ 1000____
   34|   167k|    constexpr const uint8_t OVERLONG_4  = 1<<6; // 11110000 1000____
   35|       |
   36|   167k|    const simd8<uint8_t> byte_1_high = prev1.shr<4>().lookup_16<uint8_t>(
   37|       |      // 0_______ ________ <ASCII in byte 1>
   38|   167k|      TOO_LONG, TOO_LONG, TOO_LONG, TOO_LONG,
   39|   167k|      TOO_LONG, TOO_LONG, TOO_LONG, TOO_LONG,
   40|       |      // 10______ ________ <continuation in byte 1>
   41|   167k|      TWO_CONTS, TWO_CONTS, TWO_CONTS, TWO_CONTS,
   42|       |      // 1100____ ________ <two byte lead in byte 1>
   43|   167k|      TOO_SHORT | OVERLONG_2,
   44|       |      // 1101____ ________ <two byte lead in byte 1>
   45|   167k|      TOO_SHORT,
   46|       |      // 1110____ ________ <three byte lead in byte 1>
   47|   167k|      TOO_SHORT | OVERLONG_3 | SURROGATE,
   48|       |      // 1111____ ________ <four+ byte lead in byte 1>
   49|   167k|      TOO_SHORT | TOO_LARGE | TOO_LARGE_1000 | OVERLONG_4
   50|   167k|    );
   51|   167k|    constexpr const uint8_t CARRY = TOO_SHORT | TOO_LONG | TWO_CONTS; // These all have ____ in byte 1 .
   52|   167k|    const simd8<uint8_t> byte_1_low = (prev1 & 0x0F).lookup_16<uint8_t>(
   53|       |      // ____0000 ________
   54|   167k|      CARRY | OVERLONG_3 | OVERLONG_2 | OVERLONG_4,
   55|       |      // ____0001 ________
   56|   167k|      CARRY | OVERLONG_2,
   57|       |      // ____001_ ________
   58|   167k|      CARRY,
   59|   167k|      CARRY,
   60|       |
   61|       |      // ____0100 ________
   62|   167k|      CARRY | TOO_LARGE,
   63|       |      // ____0101 ________
   64|   167k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   65|       |      // ____011_ ________
   66|   167k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   67|   167k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   68|       |
   69|       |      // ____1___ ________
   70|   167k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   71|   167k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   72|   167k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   73|   167k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   74|   167k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   75|       |      // ____1101 ________
   76|   167k|      CARRY | TOO_LARGE | TOO_LARGE_1000 | SURROGATE,
   77|   167k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   78|   167k|      CARRY | TOO_LARGE | TOO_LARGE_1000
   79|   167k|    );
   80|   167k|    const simd8<uint8_t> byte_2_high = input.shr<4>().lookup_16<uint8_t>(
   81|       |      // ________ 0_______ <ASCII in byte 2>
   82|   167k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT,
   83|   167k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT,
   84|       |
   85|       |      // ________ 1000____
   86|   167k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | OVERLONG_3 | TOO_LARGE_1000 | OVERLONG_4,
   87|       |      // ________ 1001____
   88|   167k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | OVERLONG_3 | TOO_LARGE,
   89|       |      // ________ 101_____
   90|   167k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | SURROGATE  | TOO_LARGE,
   91|   167k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | SURROGATE  | TOO_LARGE,
   92|       |
   93|       |      // ________ 11______
   94|   167k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT
   95|   167k|    );
   96|   167k|    return (byte_1_high & byte_1_low & byte_2_high);
   97|   167k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation23check_multibyte_lengthsENS1_4simd5simd8IhEES5_S5_:
   99|   167k|      const simd8<uint8_t> prev_input, const simd8<uint8_t> sc) {
  100|   167k|    simd8<uint8_t> prev2 = input.prev<2>(prev_input);
  101|   167k|    simd8<uint8_t> prev3 = input.prev<3>(prev_input);
  102|   167k|    simd8<uint8_t> must23 = simd8<uint8_t>(must_be_2_3_continuation(prev2, prev3));
  103|   167k|    simd8<uint8_t> must23_80 = must23 & uint8_t(0x80);
  104|   167k|    return must23_80 ^ sc;
  105|   167k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation13is_incompleteENS1_4simd5simd8IhEE:
  111|  83.5k|  simdutf_really_inline simd8<uint8_t> is_incomplete(const simd8<uint8_t> input) {
  112|       |    // If the previous input's last 3 bytes match this, they're too short (they ended at EOF):
  113|       |    // ... 1111____ 111_____ 11______
  114|  83.5k|    static const uint8_t max_array[32] = {
  115|  83.5k|      255, 255, 255, 255, 255, 255, 255, 255,
  116|  83.5k|      255, 255, 255, 255, 255, 255, 255, 255,
  117|  83.5k|      255, 255, 255, 255, 255, 255, 255, 255,
  118|  83.5k|      255, 255, 255, 255, 255, 0b11110000u-1, 0b11100000u-1, 0b11000000u-1
  119|  83.5k|    };
  120|  83.5k|    const simd8<uint8_t> max_value(&max_array[sizeof(max_array)-sizeof(simd8<uint8_t>)]);
  121|  83.5k|    return input.gt_bits(max_value);
  122|  83.5k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker9check_eofEv:
  146|   265k|    simdutf_really_inline void check_eof() {
  147|       |      // If the previous block had incomplete UTF-8 characters at the end, an ASCII block can't
  148|       |      // possibly finish them.
  149|   265k|      this->error |= this->prev_incomplete;
  150|   265k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker6errorsEv:
  175|   265k|    simdutf_really_inline bool errors() const {
  176|   265k|      return this->error.any_bits_set_anywhere();
  177|   265k|    }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation21generic_validate_utf8EPKcm:
   27|   265k|bool generic_validate_utf8(const char * input, size_t length) {
   28|   265k|  return generic_validate_utf8<utf8_checker>(reinterpret_cast<const uint8_t *>(input),length);
   29|   265k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation21generic_validate_utf8INS2_12utf8_checkerEEEbPKhm:
   10|   265k|bool generic_validate_utf8(const uint8_t * input, size_t length) {
   11|   265k|    checker c{};
   12|   265k|    buf_block_reader<64> reader(input, length);
   13|   298k|    while (reader.has_full_block()) {
  ------------------
  |  Branch (13:12): [True: 32.7k, False: 265k]
  ------------------
   14|  32.7k|      simd::simd8x64<uint8_t> in(reader.full_block());
   15|  32.7k|      c.check_next_input(in);
   16|  32.7k|      reader.advance();
   17|  32.7k|    }
   18|   265k|    uint8_t block[64]{};
   19|   265k|    reader.get_remainder(block);
   20|   265k|    simd::simd8x64<uint8_t> in(block);
   21|   265k|    c.check_next_input(in);
   22|   265k|    reader.advance();
   23|   265k|    c.check_eof();
   24|   265k|    return !c.errors();
   25|   265k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_126avx2_convert_utf32_to_utf8EPKDimPc:
    1|  2.35k|std::pair<const char32_t*, char*> avx2_convert_utf32_to_utf8(const char32_t* buf, size_t len, char* utf8_output) {
    2|  2.35k|  const char32_t* end = buf + len;
    3|  2.35k|  const __m256i v_0000 = _mm256_setzero_si256();
    4|  2.35k|  const __m256i v_ffff0000 = _mm256_set1_epi32((uint32_t)0xffff0000);
    5|  2.35k|  const __m256i v_ff80 = _mm256_set1_epi16((uint16_t)0xff80);
    6|  2.35k|  const __m256i v_f800 = _mm256_set1_epi16((uint16_t)0xf800);
    7|  2.35k|  const __m256i v_c080 = _mm256_set1_epi16((uint16_t)0xc080);
    8|  2.35k|  const __m256i v_7fffffff = _mm256_set1_epi32((uint32_t)0x7fffffff);
    9|  2.35k|  __m256i running_max = _mm256_setzero_si256();
   10|  2.35k|  __m256i forbidden_bytemask = _mm256_setzero_si256();
   11|       |
   12|  2.35k|  const size_t safety_margin = 12; // to avoid overruns, see issue https://github.com/simdutf/simdutf/issues/92
   13|       |
   14|  20.0k|  while (buf + 16 + safety_margin <= end) {
  ------------------
  |  Branch (14:10): [True: 17.7k, False: 2.35k]
  ------------------
   15|  17.7k|    __m256i in = _mm256_loadu_si256((__m256i*)buf);
   16|  17.7k|    __m256i nextin = _mm256_loadu_si256((__m256i*)buf+1);
   17|  17.7k|    running_max = _mm256_max_epu32(_mm256_max_epu32(in, running_max), nextin);
   18|       |
   19|       |    // Pack 32-bit UTF-32 code units to 16-bit UTF-16 code units with unsigned saturation
   20|  17.7k|    __m256i in_16 = _mm256_packus_epi32(_mm256_and_si256(in, v_7fffffff), _mm256_and_si256(nextin, v_7fffffff));
   21|  17.7k|    in_16 = _mm256_permute4x64_epi64(in_16, 0b11011000);
   22|       |
   23|       |    // Try to apply UTF-16 => UTF-8 routine on 256 bits (haswell/avx2_convert_utf16_to_utf8.cpp)
   24|       |
   25|  17.7k|    if(_mm256_testz_si256(in_16, v_ff80)) { // ASCII fast path!!!!
  ------------------
  |  Branch (25:8): [True: 7.21k, False: 10.4k]
  ------------------
   26|       |      // 1. pack the bytes
   27|  7.21k|      const __m128i utf8_packed = _mm_packus_epi16(_mm256_castsi256_si128(in_16),_mm256_extractf128_si256(in_16,1));
   28|       |      // 2. store (16 bytes)
   29|  7.21k|      _mm_storeu_si128((__m128i*)utf8_output, utf8_packed);
   30|       |      // 3. adjust pointers
   31|  7.21k|      buf += 16;
   32|  7.21k|      utf8_output += 16;
   33|  7.21k|      continue; // we are done for this round!
   34|  7.21k|    }
   35|       |    // no bits set above 7th bit
   36|  10.4k|    const __m256i one_byte_bytemask = _mm256_cmpeq_epi16(_mm256_and_si256(in_16, v_ff80), v_0000);
   37|  10.4k|    const uint32_t one_byte_bitmask = static_cast<uint32_t>(_mm256_movemask_epi8(one_byte_bytemask));
   38|       |
   39|       |    // no bits set above 11th bit
   40|  10.4k|    const __m256i one_or_two_bytes_bytemask = _mm256_cmpeq_epi16(_mm256_and_si256(in_16, v_f800), v_0000);
   41|  10.4k|    const uint32_t one_or_two_bytes_bitmask = static_cast<uint32_t>(_mm256_movemask_epi8(one_or_two_bytes_bytemask));
   42|  10.4k|    if (one_or_two_bytes_bitmask == 0xffffffff) {
  ------------------
  |  Branch (42:9): [True: 8.92k, False: 1.57k]
  ------------------
   43|       |      // 1. prepare 2-byte values
   44|       |      // input 16-bit word : [0000|0aaa|aabb|bbbb] x 8
   45|       |      // expected output   : [110a|aaaa|10bb|bbbb] x 8
   46|  8.92k|      const __m256i v_1f00 = _mm256_set1_epi16((int16_t)0x1f00);
   47|  8.92k|      const __m256i v_003f = _mm256_set1_epi16((int16_t)0x003f);
   48|       |
   49|       |      // t0 = [000a|aaaa|bbbb|bb00]
   50|  8.92k|      const __m256i t0 = _mm256_slli_epi16(in_16, 2);
   51|       |      // t1 = [000a|aaaa|0000|0000]
   52|  8.92k|      const __m256i t1 = _mm256_and_si256(t0, v_1f00);
   53|       |      // t2 = [0000|0000|00bb|bbbb]
   54|  8.92k|      const __m256i t2 = _mm256_and_si256(in_16, v_003f);
   55|       |      // t3 = [000a|aaaa|00bb|bbbb]
   56|  8.92k|      const __m256i t3 = _mm256_or_si256(t1, t2);
   57|       |      // t4 = [110a|aaaa|10bb|bbbb]
   58|  8.92k|      const __m256i t4 = _mm256_or_si256(t3, v_c080);
   59|       |
   60|       |      // 2. merge ASCII and 2-byte codewords
   61|  8.92k|      const __m256i utf8_unpacked = _mm256_blendv_epi8(t4, in_16, one_byte_bytemask);
   62|       |
   63|       |      // 3. prepare bitmask for 8-bit lookup
   64|  8.92k|      const uint32_t M0 = one_byte_bitmask & 0x55555555;
   65|  8.92k|      const uint32_t M1 = M0 >> 7;
   66|  8.92k|      const uint32_t M2 = (M1 | M0)  & 0x00ff00ff;
   67|       |      // 4. pack the bytes
   68|       |
   69|  8.92k|      const uint8_t* row = &simdutf::tables::utf16_to_utf8::pack_1_2_utf8_bytes[uint8_t(M2)][0];
   70|  8.92k|      const uint8_t* row_2 = &simdutf::tables::utf16_to_utf8::pack_1_2_utf8_bytes[uint8_t(M2>>16)][0];
   71|       |
   72|  8.92k|      const __m128i shuffle = _mm_loadu_si128((__m128i*)(row + 1));
   73|  8.92k|      const __m128i shuffle_2 = _mm_loadu_si128((__m128i*)(row_2 + 1));
   74|       |
   75|  8.92k|      const __m256i utf8_packed = _mm256_shuffle_epi8(utf8_unpacked, _mm256_setr_m128i(shuffle,shuffle_2));
  ------------------
  |  |    4|  8.92k|#define _mm256_setr_m128i(xmm2, xmm1)  _mm256_permute2f128_si256(_mm256_castsi128_si256(xmm1), _mm256_castsi128_si256(xmm2), 2)
  ------------------
   76|       |      // 5. store bytes
   77|  8.92k|      _mm_storeu_si128((__m128i*)utf8_output, _mm256_castsi256_si128(utf8_packed));
   78|  8.92k|      utf8_output += row[0];
   79|  8.92k|      _mm_storeu_si128((__m128i*)utf8_output, _mm256_extractf128_si256(utf8_packed,1));
   80|  8.92k|      utf8_output += row_2[0];
   81|       |
   82|       |      // 6. adjust pointers
   83|  8.92k|      buf += 16;
   84|  8.92k|      continue;
   85|  8.92k|    }
   86|       |    // Must check for overflow in packing
   87|  1.57k|    const __m256i saturation_bytemask = _mm256_cmpeq_epi32(_mm256_and_si256(_mm256_or_si256(in, nextin), v_ffff0000), v_0000);
   88|  1.57k|    const uint32_t saturation_bitmask = static_cast<uint32_t>(_mm256_movemask_epi8(saturation_bytemask));
   89|  1.57k|    if (saturation_bitmask == 0xffffffff) {
  ------------------
  |  Branch (89:9): [True: 718, False: 856]
  ------------------
   90|       |      // case: code units from register produce either 1, 2 or 3 UTF-8 bytes
   91|    718|      const __m256i v_d800 = _mm256_set1_epi16((uint16_t)0xd800);
   92|    718|      forbidden_bytemask = _mm256_or_si256(forbidden_bytemask, _mm256_cmpeq_epi16(_mm256_and_si256(in_16, v_f800), v_d800));
   93|       |
   94|    718|      const __m256i dup_even = _mm256_setr_epi16(0x0000, 0x0202, 0x0404, 0x0606,
   95|    718|                                              0x0808, 0x0a0a, 0x0c0c, 0x0e0e,
   96|    718|                                              0x0000, 0x0202, 0x0404, 0x0606,
   97|    718|                                              0x0808, 0x0a0a, 0x0c0c, 0x0e0e);
   98|       |
   99|       |      /* In this branch we handle three cases:
  100|       |        1. [0000|0000|0ccc|cccc] => [0ccc|cccc]                           - single UFT-8 byte
  101|       |        2. [0000|0bbb|bbcc|cccc] => [110b|bbbb], [10cc|cccc]              - two UTF-8 bytes
  102|       |        3. [aaaa|bbbb|bbcc|cccc] => [1110|aaaa], [10bb|bbbb], [10cc|cccc] - three UTF-8 bytes
  103|       |
  104|       |        We expand the input word (16-bit) into two code units (32-bit), thus
  105|       |        we have room for four bytes. However, we need five distinct bit
  106|       |        layouts. Note that the last byte in cases #2 and #3 is the same.
  107|       |
  108|       |        We precompute byte 1 for case #1 and the common byte for cases #2 & #3
  109|       |        in register t2.
  110|       |
  111|       |        We precompute byte 1 for case #3 and -- **conditionally** -- precompute
  112|       |        either byte 1 for case #2 or byte 2 for case #3. Note that they
  113|       |        differ by exactly one bit.
  114|       |
  115|       |        Finally from these two code units we build proper UTF-8 sequence, taking
  116|       |        into account the case (i.e, the number of bytes to write).
  117|       |      */
  118|       |      /**
  119|       |       * Given [aaaa|bbbb|bbcc|cccc] our goal is to produce:
  120|       |       * t2 => [0ccc|cccc] [10cc|cccc]
  121|       |       * s4 => [1110|aaaa] ([110b|bbbb] OR [10bb|bbbb])
  122|       |       */
  123|    718|#define simdutf_vec(x) _mm256_set1_epi16(static_cast<uint16_t>(x))
  124|       |      // [aaaa|bbbb|bbcc|cccc] => [bbcc|cccc|bbcc|cccc]
  125|    718|      const __m256i t0 = _mm256_shuffle_epi8(in_16, dup_even);
  126|       |      // [bbcc|cccc|bbcc|cccc] => [00cc|cccc|0bcc|cccc]
  127|    718|      const __m256i t1 = _mm256_and_si256(t0, simdutf_vec(0b0011111101111111));
  ------------------
  |  |  123|    718|#define simdutf_vec(x) _mm256_set1_epi16(static_cast<uint16_t>(x))
  ------------------
  128|       |      // [00cc|cccc|0bcc|cccc] => [10cc|cccc|0bcc|cccc]
  129|    718|      const __m256i t2 = _mm256_or_si256 (t1, simdutf_vec(0b1000000000000000));
  ------------------
  |  |  123|    718|#define simdutf_vec(x) _mm256_set1_epi16(static_cast<uint16_t>(x))
  ------------------
  130|       |
  131|       |      // [aaaa|bbbb|bbcc|cccc] =>  [0000|aaaa|bbbb|bbcc]
  132|    718|      const __m256i s0 = _mm256_srli_epi16(in_16, 4);
  133|       |      // [0000|aaaa|bbbb|bbcc] => [0000|aaaa|bbbb|bb00]
  134|    718|      const __m256i s1 = _mm256_and_si256(s0, simdutf_vec(0b0000111111111100));
  ------------------
  |  |  123|    718|#define simdutf_vec(x) _mm256_set1_epi16(static_cast<uint16_t>(x))
  ------------------
  135|       |      // [0000|aaaa|bbbb|bb00] => [00bb|bbbb|0000|aaaa]
  136|    718|      const __m256i s2 = _mm256_maddubs_epi16(s1, simdutf_vec(0x0140));
  ------------------
  |  |  123|    718|#define simdutf_vec(x) _mm256_set1_epi16(static_cast<uint16_t>(x))
  ------------------
  137|       |      // [00bb|bbbb|0000|aaaa] => [11bb|bbbb|1110|aaaa]
  138|    718|      const __m256i s3 = _mm256_or_si256(s2, simdutf_vec(0b1100000011100000));
  ------------------
  |  |  123|    718|#define simdutf_vec(x) _mm256_set1_epi16(static_cast<uint16_t>(x))
  ------------------
  139|    718|      const __m256i m0 = _mm256_andnot_si256(one_or_two_bytes_bytemask, simdutf_vec(0b0100000000000000));
  ------------------
  |  |  123|    718|#define simdutf_vec(x) _mm256_set1_epi16(static_cast<uint16_t>(x))
  ------------------
  140|    718|      const __m256i s4 = _mm256_xor_si256(s3, m0);
  141|    718|#undef simdutf_vec
  142|       |
  143|       |      // 4. expand code units 16-bit => 32-bit
  144|    718|      const __m256i out0 = _mm256_unpacklo_epi16(t2, s4);
  145|    718|      const __m256i out1 = _mm256_unpackhi_epi16(t2, s4);
  146|       |
  147|       |      // 5. compress 32-bit code units into 1, 2 or 3 bytes -- 2 x shuffle
  148|    718|      const uint32_t mask = (one_byte_bitmask & 0x55555555) |
  149|    718|                            (one_or_two_bytes_bitmask & 0xaaaaaaaa);
  150|       |      // Due to the wider registers, the following path is less likely to be useful.
  151|       |      /*if(mask == 0) {
  152|       |        // We only have three-byte code units. Use fast path.
  153|       |        const __m256i shuffle = _mm256_setr_epi8(2,3,1,6,7,5,10,11,9,14,15,13,-1,-1,-1,-1, 2,3,1,6,7,5,10,11,9,14,15,13,-1,-1,-1,-1);
  154|       |        const __m256i utf8_0 = _mm256_shuffle_epi8(out0, shuffle);
  155|       |        const __m256i utf8_1 = _mm256_shuffle_epi8(out1, shuffle);
  156|       |        _mm_storeu_si128((__m128i*)utf8_output, _mm256_castsi256_si128(utf8_0));
  157|       |        utf8_output += 12;
  158|       |        _mm_storeu_si128((__m128i*)utf8_output, _mm256_castsi256_si128(utf8_1));
  159|       |        utf8_output += 12;
  160|       |        _mm_storeu_si128((__m128i*)utf8_output, _mm256_extractf128_si256(utf8_0,1));
  161|       |        utf8_output += 12;
  162|       |        _mm_storeu_si128((__m128i*)utf8_output, _mm256_extractf128_si256(utf8_1,1));
  163|       |        utf8_output += 12;
  164|       |        buf += 16;
  165|       |        continue;
  166|       |      }*/
  167|    718|      const uint8_t mask0 = uint8_t(mask);
  168|    718|      const uint8_t* row0 = &simdutf::tables::utf16_to_utf8::pack_1_2_3_utf8_bytes[mask0][0];
  169|    718|      const __m128i shuffle0 = _mm_loadu_si128((__m128i*)(row0 + 1));
  170|    718|      const __m128i utf8_0 = _mm_shuffle_epi8(_mm256_castsi256_si128(out0), shuffle0);
  171|       |
  172|    718|      const uint8_t mask1 = static_cast<uint8_t>(mask >> 8);
  173|    718|      const uint8_t* row1 = &simdutf::tables::utf16_to_utf8::pack_1_2_3_utf8_bytes[mask1][0];
  174|    718|      const __m128i shuffle1 = _mm_loadu_si128((__m128i*)(row1 + 1));
  175|    718|      const __m128i utf8_1 = _mm_shuffle_epi8(_mm256_castsi256_si128(out1), shuffle1);
  176|       |
  177|    718|      const uint8_t mask2 = static_cast<uint8_t>(mask >> 16);
  178|    718|      const uint8_t* row2 = &simdutf::tables::utf16_to_utf8::pack_1_2_3_utf8_bytes[mask2][0];
  179|    718|      const __m128i shuffle2 = _mm_loadu_si128((__m128i*)(row2 + 1));
  180|    718|      const __m128i utf8_2 = _mm_shuffle_epi8(_mm256_extractf128_si256(out0,1), shuffle2);
  181|       |
  182|       |
  183|    718|      const uint8_t mask3 = static_cast<uint8_t>(mask >> 24);
  184|    718|      const uint8_t* row3 = &simdutf::tables::utf16_to_utf8::pack_1_2_3_utf8_bytes[mask3][0];
  185|    718|      const __m128i shuffle3 = _mm_loadu_si128((__m128i*)(row3 + 1));
  186|    718|      const __m128i utf8_3 = _mm_shuffle_epi8(_mm256_extractf128_si256(out1,1), shuffle3);
  187|       |
  188|    718|      _mm_storeu_si128((__m128i*)utf8_output, utf8_0);
  189|    718|      utf8_output += row0[0];
  190|    718|      _mm_storeu_si128((__m128i*)utf8_output, utf8_1);
  191|    718|      utf8_output += row1[0];
  192|    718|      _mm_storeu_si128((__m128i*)utf8_output, utf8_2);
  193|    718|      utf8_output += row2[0];
  194|    718|      _mm_storeu_si128((__m128i*)utf8_output, utf8_3);
  195|    718|      utf8_output += row3[0];
  196|    718|      buf += 16;
  197|    856|    } else {
  198|       |      // case: at least one 32-bit word is larger than 0xFFFF <=> it will produce four UTF-8 bytes.
  199|       |      // Let us do a scalar fallback.
  200|       |      // It may seem wasteful to use scalar code, but being efficient with SIMD
  201|       |      // may require large, non-trivial tables?
  202|    856|      size_t forward = 15;
  203|    856|      size_t k = 0;
  204|    856|      if(size_t(end - buf) < forward + 1) { forward = size_t(end - buf - 1);}
  ------------------
  |  Branch (204:10): [True: 0, False: 856]
  ------------------
  205|  13.6k|      for(; k < forward; k++) {
  ------------------
  |  Branch (205:13): [True: 12.8k, False: 856]
  ------------------
  206|  12.8k|        uint32_t word = buf[k];
  207|  12.8k|        if((word & 0xFFFFFF80)==0) {  // 1-byte (ASCII)
  ------------------
  |  Branch (207:12): [True: 11.4k, False: 1.40k]
  ------------------
  208|  11.4k|          *utf8_output++ = char(word);
  209|  11.4k|        } else if((word & 0xFFFFF800)==0) { // 2-byte
  ------------------
  |  Branch (209:19): [True: 134, False: 1.26k]
  ------------------
  210|    134|          *utf8_output++ = char((word>>6) | 0b11000000);
  211|    134|          *utf8_output++ = char((word & 0b111111) | 0b10000000);
  212|  1.26k|        } else if((word & 0xFFFF0000 )==0) {  // 3-byte
  ------------------
  |  Branch (212:19): [True: 178, False: 1.08k]
  ------------------
  213|    178|          if (word >= 0xD800 && word <= 0xDFFF) { return std::make_pair(nullptr, utf8_output); }
  ------------------
  |  Branch (213:15): [True: 78, False: 100]
  |  Branch (213:33): [True: 0, False: 78]
  ------------------
  214|    178|          *utf8_output++ = char((word>>12) | 0b11100000);
  215|    178|          *utf8_output++ = char(((word>>6) & 0b111111) | 0b10000000);
  216|    178|          *utf8_output++ = char((word & 0b111111) | 0b10000000);
  217|  1.08k|        } else {  // 4-byte
  218|  1.08k|          if (word > 0x10FFFF) { return std::make_pair(nullptr, utf8_output); }
  ------------------
  |  Branch (218:15): [True: 0, False: 1.08k]
  ------------------
  219|  1.08k|          *utf8_output++ = char((word>>18) | 0b11110000);
  220|  1.08k|          *utf8_output++ = char(((word>>12) & 0b111111) | 0b10000000);
  221|  1.08k|          *utf8_output++ = char(((word>>6) & 0b111111) | 0b10000000);
  222|  1.08k|          *utf8_output++ = char((word & 0b111111) | 0b10000000);
  223|  1.08k|        }
  224|  12.8k|      }
  225|    856|      buf += k;
  226|    856|    }
  227|  1.57k|  } // while
  228|       |
  229|       |  // check for invalid input
  230|  2.35k|  const __m256i v_10ffff = _mm256_set1_epi32((uint32_t)0x10ffff);
  231|  2.35k|  if(static_cast<uint32_t>(_mm256_movemask_epi8(_mm256_cmpeq_epi32(_mm256_max_epu32(running_max, v_10ffff), v_10ffff))) != 0xffffffff) {
  ------------------
  |  Branch (231:6): [True: 0, False: 2.35k]
  ------------------
  232|      0|    return std::make_pair(nullptr, utf8_output);
  233|      0|  }
  234|       |
  235|  2.35k|  if (static_cast<uint32_t>(_mm256_movemask_epi8(forbidden_bytemask)) != 0) { return std::make_pair(nullptr, utf8_output); }
  ------------------
  |  Branch (235:7): [True: 0, False: 2.35k]
  ------------------
  236|       |
  237|  2.35k|  return std::make_pair(buf, utf8_output);
  238|  2.35k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_128convert_masked_utf8_to_utf32EPKcmRPDi:
   10|  26.6k|                           char32_t *&utf32_output) {
   11|       |  // we use an approach where we try to process up to 12 input bytes.
   12|       |  // Why 12 input bytes and not 16? Because we are concerned with the size of
   13|       |  // the lookup tables. Also 12 is nicely divisible by two and three.
   14|       |  //
   15|       |  //
   16|       |  // Optimization note: our main path below is load-latency dependent. Thus it is maybe
   17|       |  // beneficial to have fast paths that depend on branch prediction but have less latency.
   18|       |  // This results in more instructions but, potentially, also higher speeds.
   19|       |  //
   20|       |  // We first try a few fast paths.
   21|  26.6k|  const __m128i in = _mm_loadu_si128((__m128i *)input);
   22|  26.6k|  const uint16_t input_utf8_end_of_code_point_mask =
   23|  26.6k|      utf8_end_of_code_point_mask & 0xfff;
   24|  26.6k|  if(((utf8_end_of_code_point_mask & 0xffff) == 0xffff)) {
  ------------------
  |  Branch (24:6): [True: 5.17k, False: 21.5k]
  ------------------
   25|       |    // We process the data in chunks of 16 bytes.
   26|  5.17k|    _mm256_storeu_si256(reinterpret_cast<__m256i *>(utf32_output), _mm256_cvtepu8_epi32(in));
   27|  5.17k|    _mm256_storeu_si256(reinterpret_cast<__m256i *>(utf32_output+8), _mm256_cvtepu8_epi32(_mm_srli_si128(in,8)));
   28|  5.17k|    utf32_output += 16; // We wrote 16 32-bit characters.
   29|  5.17k|    return 16; // We consumed 16 bytes.
   30|  5.17k|  }
   31|  21.5k|  if(((utf8_end_of_code_point_mask & 0xffff) == 0xaaaa)) {
  ------------------
  |  Branch (31:6): [True: 70, False: 21.4k]
  ------------------
   32|       |    // We want to take 8 2-byte UTF-8 code units and turn them into 8 4-byte UTF-32 code units.
   33|       |    // There is probably a more efficient sequence, but the following might do.
   34|     70|    const __m128i sh = _mm_setr_epi8(1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14);
   35|     70|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   36|     70|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi16(0x7f));
   37|     70|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi16(0x1f00));
   38|     70|    const __m128i composed = _mm_or_si128(ascii, _mm_srli_epi16(highbyte, 2));
   39|     70|    _mm256_storeu_si256((__m256i *)utf32_output, _mm256_cvtepu16_epi32(composed));
   40|     70|    utf32_output += 8; // We wrote 16 bytes, 8 code points.
   41|     70|    return 16;
   42|     70|  }
   43|  21.4k|  if(input_utf8_end_of_code_point_mask == 0x924) {
  ------------------
  |  Branch (43:6): [True: 40, False: 21.3k]
  ------------------
   44|       |    // We want to take 4 3-byte UTF-8 code units and turn them into 4 4-byte UTF-32 code units.
   45|       |    // There is probably a more efficient sequence, but the following might do.
   46|     40|    const __m128i sh = _mm_setr_epi8(2, 1, 0, -1, 5, 4, 3, -1, 8, 7, 6, -1, 11, 10, 9, -1);
   47|     40|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   48|     40|    const __m128i ascii =
   49|     40|        _mm_and_si128(perm, _mm_set1_epi32(0x7f)); // 7 or 6 bits
   50|     40|    const __m128i middlebyte =
   51|     40|        _mm_and_si128(perm, _mm_set1_epi32(0x3f00)); // 5 or 6 bits
   52|     40|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
   53|     40|    const __m128i highbyte =
   54|     40|        _mm_and_si128(perm, _mm_set1_epi32(0x0f0000)); // 4 bits
   55|     40|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 4);
   56|     40|    const __m128i composed =
   57|     40|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted), highbyte_shifted);
   58|     40|    _mm_storeu_si128((__m128i *)utf32_output, composed);
   59|     40|    utf32_output += 4;
   60|     40|    return 12;
   61|     40|  }
   62|       |  /// We do not have a fast path available, so we fallback.
   63|       |
   64|  21.3k|  const uint8_t idx =
   65|  21.3k|      tables::utf8_to_utf16::utf8bigindex[input_utf8_end_of_code_point_mask][0];
   66|  21.3k|  const uint8_t consumed =
   67|  21.3k|      tables::utf8_to_utf16::utf8bigindex[input_utf8_end_of_code_point_mask][1];
   68|  21.3k|  if (idx < 64) {
  ------------------
  |  Branch (68:7): [True: 18.9k, False: 2.42k]
  ------------------
   69|       |    // SIX (6) input code-code units
   70|       |    // this is a relatively easy scenario
   71|       |    // we process SIX (6) input code-code units. The max length in bytes of six code
   72|       |    // code units spanning between 1 and 2 bytes each is 12 bytes. On processors
   73|       |    // where pdep/pext is fast, we might be able to use a small lookup table.
   74|  18.9k|    const __m128i sh =
   75|  18.9k|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
   76|  18.9k|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   77|  18.9k|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi16(0x7f));
   78|  18.9k|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi16(0x1f00));
   79|  18.9k|    const __m128i composed = _mm_or_si128(ascii, _mm_srli_epi16(highbyte, 2));
   80|  18.9k|    _mm256_storeu_si256((__m256i *)utf32_output, _mm256_cvtepu16_epi32(composed));
   81|  18.9k|    utf32_output += 6; // We wrote 24 bytes, 6 code points. There is a potential
   82|       |    // overflow of 32 - 24 = 8 bytes.
   83|  18.9k|  } else if (idx < 145) {
  ------------------
  |  Branch (83:14): [True: 1.53k, False: 890]
  ------------------
   84|       |    // FOUR (4) input code-code units
   85|  1.53k|    const __m128i sh =
   86|  1.53k|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
   87|  1.53k|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   88|  1.53k|    const __m128i ascii =
   89|  1.53k|        _mm_and_si128(perm, _mm_set1_epi32(0x7f)); // 7 or 6 bits
   90|  1.53k|    const __m128i middlebyte =
   91|  1.53k|        _mm_and_si128(perm, _mm_set1_epi32(0x3f00)); // 5 or 6 bits
   92|  1.53k|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
   93|  1.53k|    const __m128i highbyte =
   94|  1.53k|        _mm_and_si128(perm, _mm_set1_epi32(0x0f0000)); // 4 bits
   95|  1.53k|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 4);
   96|  1.53k|    const __m128i composed =
   97|  1.53k|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted), highbyte_shifted);
   98|  1.53k|    _mm_storeu_si128((__m128i *)utf32_output, composed);
   99|  1.53k|    utf32_output += 4;
  100|  1.53k|  } else if (idx < 209) {
  ------------------
  |  Branch (100:14): [True: 890, False: 0]
  ------------------
  101|       |    // TWO (2) input code-code units
  102|    890|    const __m128i sh =
  103|    890|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
  104|    890|    const __m128i perm = _mm_shuffle_epi8(in, sh);
  105|    890|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi32(0x7f));
  106|    890|    const __m128i middlebyte = _mm_and_si128(perm, _mm_set1_epi32(0x3f00));
  107|    890|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
  108|    890|    __m128i middlehighbyte = _mm_and_si128(perm, _mm_set1_epi32(0x3f0000));
  109|       |    // correct for spurious high bit
  110|    890|    const __m128i correct =
  111|    890|        _mm_srli_epi32(_mm_and_si128(perm, _mm_set1_epi32(0x400000)), 1);
  112|    890|    middlehighbyte = _mm_xor_si128(correct, middlehighbyte);
  113|    890|    const __m128i middlehighbyte_shifted = _mm_srli_epi32(middlehighbyte, 4);
  114|    890|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi32(0x07000000));
  115|    890|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 6);
  116|    890|    const __m128i composed =
  117|    890|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted),
  118|    890|                     _mm_or_si128(highbyte_shifted, middlehighbyte_shifted));
  119|    890|    _mm_storeu_si128((__m128i *)utf32_output, composed);
  120|    890|    utf32_output += 3; // We wrote 3 * 4 bytes, there is a potential overflow of 4 bytes.
  121|    890|  } else {
  122|       |    // here we know that there is an error but we do not handle errors
  123|      0|  }
  124|  21.3k|  return consumed;
  125|  21.4k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_121avx2_validate_utf32leEPKDim:
    5|  16.7k|const char32_t* avx2_validate_utf32le(const char32_t* input, size_t size) {
    6|  16.7k|    const char32_t* end = input + size;
    7|       |
    8|  16.7k|    const __m256i standardmax = _mm256_set1_epi32(0x10ffff);
    9|  16.7k|    const __m256i offset = _mm256_set1_epi32(0xffff2000);
   10|  16.7k|    const __m256i standardoffsetmax = _mm256_set1_epi32(0xfffff7ff);
   11|  16.7k|    __m256i currentmax = _mm256_setzero_si256();
   12|  16.7k|    __m256i currentoffsetmax = _mm256_setzero_si256();
   13|       |
   14|   277k|    while (input + 8 < end) {
  ------------------
  |  Branch (14:12): [True: 260k, False: 16.7k]
  ------------------
   15|   260k|        const __m256i in = _mm256_loadu_si256((__m256i *)input);
   16|   260k|        currentmax = _mm256_max_epu32(in,currentmax);
   17|   260k|        currentoffsetmax = _mm256_max_epu32(_mm256_add_epi32(in, offset), currentoffsetmax);
   18|   260k|        input += 8;
   19|   260k|    }
   20|  16.7k|    __m256i is_zero = _mm256_xor_si256(_mm256_max_epu32(currentmax, standardmax), standardmax);
   21|  16.7k|    if(_mm256_testz_si256(is_zero, is_zero) == 0) {
  ------------------
  |  Branch (21:8): [True: 96, False: 16.6k]
  ------------------
   22|     96|        return nullptr;
   23|     96|    }
   24|       |
   25|  16.6k|    is_zero = _mm256_xor_si256(_mm256_max_epu32(currentoffsetmax, standardoffsetmax), standardoffsetmax);
   26|  16.6k|    if(_mm256_testz_si256(is_zero, is_zero) == 0) {
  ------------------
  |  Branch (26:8): [True: 6, False: 16.6k]
  ------------------
   27|      6|        return nullptr;
   28|      6|    }
   29|       |
   30|  16.6k|    return input;
   31|  16.6k|}

_ZNK7simdutf7haswell14implementation13validate_utf8EPKcm:
  104|   265k|simdutf_warn_unused bool implementation::validate_utf8(const char *buf, size_t len) const noexcept {
  105|   265k|  return haswell::utf8_validation::generic_validate_utf8(buf,len);
  106|   265k|}
_ZNK7simdutf7haswell14implementation14validate_utf32EPKDim:
  158|  16.7k|simdutf_warn_unused bool implementation::validate_utf32(const char32_t *buf, size_t len) const noexcept {
  159|  16.7k|  const char32_t* tail = avx2_validate_utf32le(buf, len);
  160|  16.7k|  if (tail) {
  ------------------
  |  Branch (160:7): [True: 16.6k, False: 102]
  ------------------
  161|  16.6k|    return scalar::utf32::validate(tail, len - (tail - buf));
  162|  16.6k|  } else {
  163|    102|    return false;
  164|    102|  }
  165|  16.7k|}
_ZNK7simdutf7haswell14implementation21convert_utf8_to_utf32EPKcmPDi:
  274|   484k|simdutf_warn_unused size_t implementation::convert_utf8_to_utf32(const char* buf, size_t len, char32_t* utf32_output) const noexcept {
  275|   484k|  utf8_to_utf32::validating_transcoder converter;
  276|   484k|  return converter.convert(buf, len, utf32_output);
  277|   484k|}
_ZNK7simdutf7haswell14implementation33convert_utf8_to_utf32_with_errorsEPKcmPDi:
  279|  36.5k|simdutf_warn_unused result implementation::convert_utf8_to_utf32_with_errors(const char* buf, size_t len, char32_t* utf32_output) const noexcept {
  280|  36.5k|  utf8_to_utf32::validating_transcoder converter;
  281|  36.5k|  return converter.convert_with_errors(buf, len, utf32_output);
  282|  36.5k|}
_ZNK7simdutf7haswell14implementation27convert_valid_utf8_to_utf32EPKcmPDi:
  285|  11.8k|    char32_t* utf32_output) const noexcept {
  286|  11.8k|  return utf8_to_utf32::convert_valid(input, size,  utf32_output);
  287|  11.8k|}
_ZNK7simdutf7haswell14implementation21convert_utf32_to_utf8EPKDimPc:
  430|  2.35k|simdutf_warn_unused size_t implementation::convert_utf32_to_utf8(const char32_t* buf, size_t len, char* utf8_output) const noexcept {
  431|  2.35k|  std::pair<const char32_t*, char*> ret = avx2_convert_utf32_to_utf8(buf, len, utf8_output);
  432|  2.35k|  if (ret.first == nullptr) { return 0; }
  ------------------
  |  Branch (432:7): [True: 0, False: 2.35k]
  ------------------
  433|  2.35k|  size_t saved_bytes = ret.second - utf8_output;
  434|  2.35k|  if (ret.first != buf + len) {
  ------------------
  |  Branch (434:7): [True: 2.35k, False: 0]
  ------------------
  435|  2.35k|    const size_t scalar_saved_bytes = scalar::utf32_to_utf8::convert(
  436|  2.35k|                                        ret.first, len - (ret.first - buf), ret.second);
  437|  2.35k|    if (scalar_saved_bytes == 0) { return 0; }
  ------------------
  |  Branch (437:9): [True: 0, False: 2.35k]
  ------------------
  438|  2.35k|    saved_bytes += scalar_saved_bytes;
  439|  2.35k|  }
  440|  2.35k|  return saved_bytes;
  441|  2.35k|}
_ZNK7simdutf7haswell14implementation27convert_valid_utf32_to_utf8EPKDimPc:
  556|  2.35k|simdutf_warn_unused size_t implementation::convert_valid_utf32_to_utf8(const char32_t* buf, size_t len, char* utf8_output) const noexcept {
  557|  2.35k|  return convert_utf32_to_utf8(buf, len, utf8_output);
  558|  2.35k|}
_ZNK7simdutf7haswell14implementation22utf8_length_from_utf32EPKDim:
  735|  4.71k|simdutf_warn_unused size_t implementation::utf8_length_from_utf32(const char32_t * input, size_t length) const noexcept {
  736|  4.71k|  const __m256i v_00000000 = _mm256_setzero_si256();
  737|  4.71k|  const __m256i v_ffffff80 = _mm256_set1_epi32((uint32_t)0xffffff80);
  738|  4.71k|  const __m256i v_fffff800 = _mm256_set1_epi32((uint32_t)0xfffff800);
  739|  4.71k|  const __m256i v_ffff0000 = _mm256_set1_epi32((uint32_t)0xffff0000);
  740|  4.71k|  size_t pos = 0;
  741|  4.71k|  size_t count = 0;
  742|  79.7k|  for(;pos + 8 <= length; pos += 8) {
  ------------------
  |  Branch (742:8): [True: 75.0k, False: 4.71k]
  ------------------
  743|  75.0k|    __m256i in = _mm256_loadu_si256((__m256i*)(input + pos));
  744|  75.0k|    const __m256i ascii_bytes_bytemask = _mm256_cmpeq_epi32(_mm256_and_si256(in, v_ffffff80), v_00000000);
  745|  75.0k|    const __m256i one_two_bytes_bytemask = _mm256_cmpeq_epi32(_mm256_and_si256(in, v_fffff800), v_00000000);
  746|  75.0k|    const __m256i two_bytes_bytemask = _mm256_xor_si256(one_two_bytes_bytemask, ascii_bytes_bytemask);
  747|  75.0k|    const __m256i one_two_three_bytes_bytemask = _mm256_cmpeq_epi32(_mm256_and_si256(in, v_ffff0000), v_00000000);
  748|  75.0k|    const __m256i three_bytes_bytemask = _mm256_xor_si256(one_two_three_bytes_bytemask, one_two_bytes_bytemask);
  749|  75.0k|    const uint32_t ascii_bytes_bitmask = static_cast<uint32_t>(_mm256_movemask_epi8(ascii_bytes_bytemask));
  750|  75.0k|    const uint32_t two_bytes_bitmask = static_cast<uint32_t>(_mm256_movemask_epi8(two_bytes_bytemask));
  751|  75.0k|    const uint32_t three_bytes_bitmask = static_cast<uint32_t>(_mm256_movemask_epi8(three_bytes_bytemask));
  752|       |
  753|  75.0k|    size_t ascii_count = count_ones(ascii_bytes_bitmask) / 4;
  754|  75.0k|    size_t two_bytes_count = count_ones(two_bytes_bitmask) / 4;
  755|  75.0k|    size_t three_bytes_count = count_ones(three_bytes_bitmask) / 4;
  756|  75.0k|    count += 32 - 3*ascii_count - 2*two_bytes_count - three_bytes_count;
  757|  75.0k|  }
  758|  4.71k|  return count + scalar::utf32::utf8_length_from_utf32(input + pos, length - pos);
  759|  4.71k|}
_ZNK7simdutf7haswell14implementation22utf32_length_from_utf8EPKcm:
  776|   203k|simdutf_warn_unused size_t implementation::utf32_length_from_utf8(const char * input, size_t length) const noexcept {
  777|   203k|  return utf8::count_code_points(input, length);
  778|   203k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_18is_asciiERKNS1_4simd8simd8x64IhEE:
   23|   298k|simdutf_really_inline bool is_ascii(const simd8x64<uint8_t>& input) {
   24|   298k|  return input.reduce_or().is_ascii();
   25|   298k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_124must_be_2_3_continuationENS1_4simd5simd8IhEES4_:
   35|   168k|simdutf_really_inline simd8<bool> must_be_2_3_continuation(const simd8<uint8_t> prev2, const simd8<uint8_t> prev3) {
   36|   168k|  simd8<uint8_t> is_third_byte  = prev2.saturating_sub(0b11100000u-1); // Only 111_____ will be > 0
   37|   168k|  simd8<uint8_t> is_fourth_byte = prev3.saturating_sub(0b11110000u-1); // Only 1111____ will be > 0
   38|       |  // Caller requires a bool (all 1's). All values resulting from the subtraction will be <= 64, so signed comparison is fine.
   39|   168k|  return simd8<int8_t>(is_third_byte | is_fourth_byte) > int8_t(0);
   40|   168k|}

_ZNK7simdutf8internal29available_implementation_list21detect_best_supportedEv:
  768|      1|const implementation *available_implementation_list::detect_best_supported() const noexcept {
  769|       |  // They are prelisted in priority order, so we just go down the list
  770|      1|  uint32_t supported_instruction_sets = internal::detect_supported_architectures();
  771|      2|  for (const implementation *impl : internal::get_available_implementation_pointers()) {
  ------------------
  |  Branch (771:35): [True: 2, False: 0]
  ------------------
  772|      2|    uint32_t required_instruction_sets = impl->required_instruction_sets();
  773|      2|    if ((supported_instruction_sets & required_instruction_sets) == required_instruction_sets) { return impl; }
  ------------------
  |  Branch (773:9): [True: 1, False: 1]
  ------------------
  774|      2|  }
  775|      0|  return &unsupported_singleton; // this should never happen?
  776|      1|}
_ZNK7simdutf8internal49detect_best_supported_implementation_on_first_use8set_bestEv:
  778|      1|const implementation *detect_best_supported_implementation_on_first_use::set_best() const noexcept {
  779|      1|  SIMDUTF_PUSH_DISABLE_WARNINGS
  780|       |  SIMDUTF_DISABLE_DEPRECATED_WARNING // Disable CRT_SECURE warning on MSVC: manually verified this is safe
  781|      1|  char *force_implementation_name = getenv("SIMDUTF_FORCE_IMPLEMENTATION");
  782|      1|  SIMDUTF_POP_DISABLE_WARNINGS
  783|       |
  784|      1|  if (force_implementation_name) {
  ------------------
  |  Branch (784:7): [True: 0, False: 1]
  ------------------
  785|      0|    auto force_implementation = get_available_implementations()[force_implementation_name];
  786|      0|    if (force_implementation) {
  ------------------
  |  Branch (786:9): [True: 0, False: 0]
  ------------------
  787|      0|      return get_active_implementation() = force_implementation;
  788|      0|    } else {
  789|       |      // Note: abort() and stderr usage within the library is forbidden.
  790|      0|      return get_active_implementation() = &unsupported_singleton;
  791|      0|    }
  792|      0|  }
  793|      1|  return get_active_implementation() = get_available_implementations().detect_best_supported();
  794|      1|}
_ZN7simdutf29get_available_implementationsEv:
  803|      1|SIMDUTF_DLLIMPORTEXPORT const internal::available_implementation_list& get_available_implementations() {
  804|      1|  static const internal::available_implementation_list available_implementations{};
  805|      1|  return available_implementations;
  806|      1|}
_ZN7simdutf25get_active_implementationEv:
  811|  1.02M|SIMDUTF_DLLIMPORTEXPORT internal::atomic_ptr<const implementation>& get_active_implementation() {
  812|  1.02M|    static const internal::detect_best_supported_implementation_on_first_use detect_best_supported_implementation_on_first_use_singleton;
  813|  1.02M|    static internal::atomic_ptr<const implementation> active_implementation{&detect_best_supported_implementation_on_first_use_singleton};
  814|  1.02M|    return active_implementation;
  815|  1.02M|}
_ZN7simdutf13validate_utf8EPKcm:
  817|   265k|simdutf_warn_unused bool validate_utf8(const char *buf, size_t len) noexcept {
  818|   265k|  return get_active_implementation()->validate_utf8(buf, len);
  819|   265k|}
_ZN7simdutf21convert_utf8_to_utf32EPKcmPDi:
  876|   484k|simdutf_warn_unused size_t convert_utf8_to_utf32(const char * input, size_t length, char32_t* utf32_output) noexcept {
  877|   484k|  return get_active_implementation()->convert_utf8_to_utf32(input, length, utf32_output);
  878|   484k|}
_ZN7simdutf33convert_utf8_to_utf32_with_errorsEPKcmPDi:
  879|  36.5k|simdutf_warn_unused result convert_utf8_to_utf32_with_errors(const char * input, size_t length, char32_t* utf32_output) noexcept {
  880|  36.5k|  return get_active_implementation()->convert_utf8_to_utf32_with_errors(input, length, utf32_output);
  881|  36.5k|}
_ZN7simdutf14validate_utf32EPKDim:
  908|  16.7k|simdutf_warn_unused bool validate_utf32(const char32_t * buf, size_t len) noexcept {
  909|  16.7k|  return get_active_implementation()->validate_utf32(buf, len);
  910|  16.7k|}
_ZN7simdutf27convert_valid_utf8_to_utf32EPKcmPDi:
  927|  11.8k|simdutf_warn_unused size_t convert_valid_utf8_to_utf32(const char * input, size_t length, char32_t* utf32_buffer) noexcept {
  928|  11.8k|  return get_active_implementation()->convert_valid_utf8_to_utf32(input, length, utf32_buffer);
  929|  11.8k|}
_ZN7simdutf27convert_valid_utf32_to_utf8EPKDimPc:
 1021|  2.35k|simdutf_warn_unused size_t convert_valid_utf32_to_utf8(const char32_t * buf, size_t len, char* utf8_buffer) noexcept {
 1022|  2.35k|  return get_active_implementation()->convert_valid_utf32_to_utf8(buf, len, utf8_buffer);
 1023|  2.35k|}
_ZN7simdutf22utf8_length_from_utf32EPKDim:
 1168|  4.71k|simdutf_warn_unused size_t utf8_length_from_utf32(const char32_t * input, size_t length) noexcept {
 1169|  4.71k|  return get_active_implementation()->utf8_length_from_utf32(input, length);
 1170|  4.71k|}
_ZN7simdutf22utf32_length_from_utf8EPKcm:
 1174|   203k|simdutf_warn_unused size_t utf32_length_from_utf8(const char * input, size_t length) noexcept {
 1175|   203k|  return get_active_implementation()->utf32_length_from_utf8(input, length);
 1176|   203k|}
_ZN7simdutf8internal26unsupported_implementationC2Ev:
  754|      2|  unsupported_implementation() : implementation("unsupported", "Unsupported CPU (no detected SIMD instructions)", 0) {}
simdutf.cpp:_ZN7simdutf8internalL37get_available_implementation_pointersEv:
  423|      1|static const std::initializer_list<const implementation *>& get_available_implementation_pointers() {
  424|      1|  static const std::initializer_list<const implementation *> available_implementation_pointers {
  425|      1|#if SIMDUTF_IMPLEMENTATION_ICELAKE
  426|      1|    get_icelake_singleton(),
  427|      1|#endif
  428|      1|#if SIMDUTF_IMPLEMENTATION_HASWELL
  429|      1|    get_haswell_singleton(),
  430|      1|#endif
  431|      1|#if SIMDUTF_IMPLEMENTATION_WESTMERE
  432|      1|    get_westmere_singleton(),
  433|      1|#endif
  434|       |#if SIMDUTF_IMPLEMENTATION_ARM64
  435|       |    get_arm64_singleton(),
  436|       |#endif
  437|       |#if SIMDUTF_IMPLEMENTATION_PPC64
  438|       |    get_ppc64_singleton(),
  439|       |#endif
  440|      1|#if SIMDUTF_IMPLEMENTATION_FALLBACK
  441|      1|    get_fallback_singleton(),
  442|      1|#endif
  443|      1|  }; // available_implementation_pointers
  444|      1|  return available_implementation_pointers;
  445|      1|}
simdutf.cpp:_ZN7simdutf8internalL21get_icelake_singletonEv:
   72|      1|static const icelake::implementation* get_icelake_singleton() {
   73|      1|  static const icelake::implementation icelake_singleton{};
   74|      1|  return &icelake_singleton;
   75|      1|}
simdutf.cpp:_ZN7simdutf8internalL21get_haswell_singletonEv:
   78|      1|static const haswell::implementation* get_haswell_singleton() {
   79|      1|  static const haswell::implementation haswell_singleton{};
   80|      1|  return &haswell_singleton;
   81|      1|}
simdutf.cpp:_ZN7simdutf8internalL22get_westmere_singletonEv:
   84|      1|static const westmere::implementation* get_westmere_singleton() {
   85|      1|  static const westmere::implementation westmere_singleton{};
   86|      1|  return &westmere_singleton;
   87|      1|}
simdutf.cpp:_ZN7simdutf8internalL22get_fallback_singletonEv:
  102|      1|static const fallback::implementation* get_fallback_singleton() {
  103|      1|  static const fallback::implementation fallback_singleton{};
  104|      1|  return &fallback_singleton;
  105|      1|}
_ZN7simdutf8internal49detect_best_supported_implementation_on_first_useC2Ev:
  417|      1|  simdutf_really_inline detect_best_supported_implementation_on_first_use() noexcept : implementation("best_supported_detector", "Detects the best supported implementation and sets it", 0) {}
_ZNK7simdutf8internal49detect_best_supported_implementation_on_first_use13validate_utf8EPKcm:
  121|      1|  simdutf_warn_unused bool validate_utf8(const char * buf, size_t len) const noexcept final override {
  122|      1|    return set_best()->validate_utf8(buf, len);
  123|      1|  }

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_15utf328validateEPKDim:
    9|  16.6k|inline simdutf_warn_unused bool validate(const char32_t *buf, size_t len) noexcept {
   10|  16.6k|  const uint32_t *data = reinterpret_cast<const uint32_t *>(buf);
   11|  16.6k|  uint64_t pos = 0;
   12|  85.7k|  for(;pos < len; pos++) {
  ------------------
  |  Branch (12:8): [True: 69.2k, False: 16.4k]
  ------------------
   13|  69.2k|    uint32_t word = data[pos];
   14|  69.2k|    if(word > 0x10FFFF || (word >= 0xD800 && word <= 0xDFFF)) {
  ------------------
  |  Branch (14:8): [True: 168, False: 69.0k]
  |  Branch (14:28): [True: 1.06k, False: 67.9k]
  |  Branch (14:46): [True: 6, False: 1.06k]
  ------------------
   15|    174|        return false;
   16|    174|    }
   17|  69.2k|  }
   18|  16.4k|  return true;
   19|  16.6k|}
simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_15utf3222utf8_length_from_utf32EPKDim:
   36|  4.71k|inline size_t utf8_length_from_utf32(const char32_t* buf, size_t len) {
   37|       |  // We are not BOM aware.
   38|  4.71k|  const uint32_t * p = reinterpret_cast<const uint32_t *>(buf);
   39|  4.71k|  size_t counter{0};
   40|  18.9k|  for(size_t i = 0; i < len; i++) {
  ------------------
  |  Branch (40:21): [True: 14.2k, False: 4.71k]
  ------------------
   41|       |    // credit: @ttsugriy  for the vectorizable approach
   42|  14.2k|    counter++;                                      // ASCII
   43|  14.2k|    counter += static_cast<size_t>(p[i] > 0x7F);    // two-byte
   44|  14.2k|    counter += static_cast<size_t>(p[i] > 0x7FF);   // three-byte
   45|  14.2k|    counter += static_cast<size_t>(p[i] > 0xFFFF);  // four-bytes
   46|  14.2k|  }
   47|  4.71k|  return counter;
   48|  4.71k|}

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf32_to_utf87convertEPKDimPc:
    9|  2.35k|inline size_t convert(const char32_t* buf, size_t len, char* utf8_output) {
   10|  2.35k|  const uint32_t *data = reinterpret_cast<const uint32_t *>(buf);
   11|  2.35k|  size_t pos = 0;
   12|  2.35k|  char* start{utf8_output};
   13|  16.2k|  while (pos < len) {
  ------------------
  |  Branch (13:10): [True: 13.9k, False: 2.35k]
  ------------------
   14|       |    // try to convert the next block of 2 ASCII characters
   15|  13.9k|    if (pos + 2 <= len) { // if it is safe to read 8 more bytes, check that they are ascii
  ------------------
  |  Branch (15:9): [True: 12.8k, False: 1.13k]
  ------------------
   16|  12.8k|      uint64_t v;
   17|  12.8k|      ::memcpy(&v, data + pos, sizeof(uint64_t));
   18|  12.8k|      if ((v & 0xFFFFFF80FFFFFF80) == 0) {
  ------------------
  |  Branch (18:11): [True: 10.8k, False: 1.97k]
  ------------------
   19|  10.8k|        *utf8_output++ = char(buf[pos]);
   20|  10.8k|				*utf8_output++ = char(buf[pos+1]);
   21|  10.8k|        pos += 2;
   22|  10.8k|        continue;
   23|  10.8k|      }
   24|  12.8k|    }
   25|  3.11k|    uint32_t word = data[pos];
   26|  3.11k|    if((word & 0xFFFFFF80)==0) {
  ------------------
  |  Branch (26:8): [True: 1.54k, False: 1.57k]
  ------------------
   27|       |      // will generate one UTF-8 bytes
   28|  1.54k|      *utf8_output++ = char(word);
   29|  1.54k|      pos++;
   30|  1.57k|    } else if((word & 0xFFFFF800)==0) {
  ------------------
  |  Branch (30:15): [True: 1.08k, False: 484]
  ------------------
   31|       |      // will generate two UTF-8 bytes
   32|       |      // we have 0b110XXXXX 0b10XXXXXX
   33|  1.08k|      *utf8_output++ = char((word>>6) | 0b11000000);
   34|  1.08k|      *utf8_output++ = char((word & 0b111111) | 0b10000000);
   35|  1.08k|      pos++;
   36|  1.08k|    } else if((word & 0xFFFF0000)==0) {
  ------------------
  |  Branch (36:15): [True: 300, False: 184]
  ------------------
   37|       |      // will generate three UTF-8 bytes
   38|       |      // we have 0b1110XXXX 0b10XXXXXX 0b10XXXXXX
   39|    300|			if (word >= 0xD800 && word <= 0xDFFF) { return 0; }
  ------------------
  |  Branch (39:8): [True: 120, False: 180]
  |  Branch (39:26): [True: 0, False: 120]
  ------------------
   40|    300|      *utf8_output++ = char((word>>12) | 0b11100000);
   41|    300|      *utf8_output++ = char(((word>>6) & 0b111111) | 0b10000000);
   42|    300|      *utf8_output++ = char((word & 0b111111) | 0b10000000);
   43|    300|      pos++;
   44|    300|    } else {
   45|       |      // will generate four UTF-8 bytes
   46|       |      // we have 0b11110XXX 0b10XXXXXX 0b10XXXXXX 0b10XXXXXX
   47|    184|			if (word > 0x10FFFF) { return 0; }
  ------------------
  |  Branch (47:8): [True: 0, False: 184]
  ------------------
   48|    184|      *utf8_output++ = char((word>>18) | 0b11110000);
   49|    184|      *utf8_output++ = char(((word>>12) & 0b111111) | 0b10000000);
   50|    184|      *utf8_output++ = char(((word>>6) & 0b111111) | 0b10000000);
   51|    184|      *utf8_output++ = char((word & 0b111111) | 0b10000000);
   52|    184|      pos ++;
   53|    184|    }
   54|  3.11k|  }
   55|  2.35k|  return utf8_output - start;
   56|  2.35k|}

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_14utf817count_code_pointsEPKcm:
  168|   203k|inline size_t count_code_points(const char* buf, size_t len) {
  169|   203k|    const int8_t * p = reinterpret_cast<const int8_t *>(buf);
  170|   203k|    size_t counter{0};
  171|   535k|    for(size_t i = 0; i < len; i++) {
  ------------------
  |  Branch (171:23): [True: 331k, False: 203k]
  ------------------
  172|       |        // -65 is 0b10111111, anything larger in two-complement's should start a new code point.
  173|   331k|        if(p[i] > -65) { counter++; }
  ------------------
  |  Branch (173:12): [True: 315k, False: 16.2k]
  ------------------
  174|   331k|    }
  175|   203k|    return counter;
  176|   203k|}

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf327convertEPKcmPDi:
    9|   484k|inline size_t convert(const char* buf, size_t len, char32_t* utf32_output) {
   10|   484k| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   11|   484k|  size_t pos = 0;
   12|   484k|  char32_t* start{utf32_output};
   13|   931k|  while (pos < len) {
  ------------------
  |  Branch (13:10): [True: 484k, False: 447k]
  ------------------
   14|       |    // try to convert the next block of 16 ASCII bytes
   15|   484k|    if (pos + 16 <= len) { // if it is safe to read 16 more bytes, check that they are ascii
  ------------------
  |  Branch (15:9): [True: 0, False: 484k]
  ------------------
   16|      0|      uint64_t v1;
   17|      0|      ::memcpy(&v1, data + pos, sizeof(uint64_t));
   18|      0|      uint64_t v2;
   19|      0|      ::memcpy(&v2, data + pos + sizeof(uint64_t), sizeof(uint64_t));
   20|      0|      uint64_t v{v1 | v2};
   21|      0|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (21:11): [True: 0, False: 0]
  ------------------
   22|      0|        size_t final_pos = pos + 16;
   23|      0|        while(pos < final_pos) {
  ------------------
  |  Branch (23:15): [True: 0, False: 0]
  ------------------
   24|      0|          *utf32_output++ = char32_t(buf[pos]);
   25|      0|          pos++;
   26|      0|        }
   27|      0|        continue;
   28|      0|      }
   29|      0|    }
   30|   484k|    uint8_t leading_byte = data[pos]; // leading byte
   31|   484k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (31:9): [True: 411k, False: 72.9k]
  ------------------
   32|       |      // converting one ASCII byte !!!
   33|   411k|      *utf32_output++ = char32_t(leading_byte);
   34|   411k|      pos++;
   35|   411k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (35:16): [True: 42.0k, False: 30.8k]
  ------------------
   36|       |      // We have a two-byte UTF-8
   37|  42.0k|      if(pos + 1 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (37:10): [True: 0, False: 42.0k]
  ------------------
   38|  42.0k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (38:11): [True: 11.1k, False: 30.8k]
  ------------------
   39|       |      // range check
   40|  30.8k|      uint32_t code_point = (leading_byte & 0b00011111) << 6 | (data[pos + 1] & 0b00111111);
   41|  30.8k|      if (code_point < 0x80 || 0x7ff < code_point) { return 0; }
  ------------------
  |  Branch (41:11): [True: 4.09k, False: 26.7k]
  |  Branch (41:32): [True: 0, False: 26.7k]
  ------------------
   42|  26.7k|      *utf32_output++ = char32_t(code_point);
   43|  26.7k|      pos += 2;
   44|  30.8k|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (44:16): [True: 23.1k, False: 7.65k]
  ------------------
   45|       |      // We have a three-byte UTF-8
   46|  23.1k|      if(pos + 2 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (46:10): [True: 0, False: 23.1k]
  ------------------
   47|       |
   48|  23.1k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (48:11): [True: 8.01k, False: 15.1k]
  ------------------
   49|  15.1k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (49:11): [True: 1.44k, False: 13.7k]
  ------------------
   50|       |      // range check
   51|  13.7k|      uint32_t code_point = (leading_byte & 0b00001111) << 12 |
   52|  13.7k|                   (data[pos + 1] & 0b00111111) << 6 |
   53|  13.7k|                   (data[pos + 2] & 0b00111111);
   54|  13.7k|      if (code_point < 0x800 || 0xffff < code_point ||
  ------------------
  |  Branch (54:11): [True: 1.52k, False: 12.2k]
  |  Branch (54:33): [True: 0, False: 12.2k]
  ------------------
   55|  13.7k|          (0xd7ff < code_point && code_point < 0xe000)) {
  ------------------
  |  Branch (55:12): [True: 5.56k, False: 6.63k]
  |  Branch (55:35): [True: 2.94k, False: 2.62k]
  ------------------
   56|  4.47k|        return 0;
   57|  4.47k|      }
   58|  9.26k|      *utf32_output++ = char32_t(code_point);
   59|  9.26k|      pos += 3;
   60|  9.26k|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (60:16): [True: 7.65k, False: 0]
  ------------------
   61|       |      // we have a 4-byte UTF-8 word.
   62|  7.65k|      if(pos + 3 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (62:10): [True: 0, False: 7.65k]
  ------------------
   63|  7.65k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (63:11): [True: 5.02k, False: 2.62k]
  ------------------
   64|  2.62k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (64:11): [True: 724, False: 1.90k]
  ------------------
   65|  1.90k|      if ((data[pos + 3] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (65:11): [True: 358, False: 1.54k]
  ------------------
   66|       |
   67|       |      // range check
   68|  1.54k|      uint32_t code_point =
   69|  1.54k|          (leading_byte & 0b00000111) << 18 | (data[pos + 1] & 0b00111111) << 12 |
   70|  1.54k|          (data[pos + 2] & 0b00111111) << 6 | (data[pos + 3] & 0b00111111);
   71|  1.54k|      if (code_point <= 0xffff || 0x10ffff < code_point) { return 0; }
  ------------------
  |  Branch (71:11): [True: 730, False: 816]
  |  Branch (71:35): [True: 298, False: 518]
  ------------------
   72|    518|      *utf32_output++ = char32_t(code_point);
   73|    518|      pos += 4;
   74|    518|    } else {
   75|      0|      return 0;
   76|      0|    }
   77|   484k|  }
   78|   447k|  return utf32_output - start;
   79|   484k|}
simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf3219convert_with_errorsEPKcmPDi:
   81|  34.5k|inline result convert_with_errors(const char* buf, size_t len, char32_t* utf32_output) {
   82|  34.5k| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   83|  34.5k|  size_t pos = 0;
   84|  34.5k|  char32_t* start{utf32_output};
   85|   288k|  while (pos < len) {
  ------------------
  |  Branch (85:10): [True: 266k, False: 22.1k]
  ------------------
   86|       |    // try to convert the next block of 16 ASCII bytes
   87|   266k|    if (pos + 16 <= len) { // if it is safe to read 16 more bytes, check that they are ascii
  ------------------
  |  Branch (87:9): [True: 73.9k, False: 192k]
  ------------------
   88|  73.9k|      uint64_t v1;
   89|  73.9k|      ::memcpy(&v1, data + pos, sizeof(uint64_t));
   90|  73.9k|      uint64_t v2;
   91|  73.9k|      ::memcpy(&v2, data + pos + sizeof(uint64_t), sizeof(uint64_t));
   92|  73.9k|      uint64_t v{v1 | v2};
   93|  73.9k|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (93:11): [True: 11.0k, False: 62.9k]
  ------------------
   94|  11.0k|        size_t final_pos = pos + 16;
   95|   188k|        while(pos < final_pos) {
  ------------------
  |  Branch (95:15): [True: 177k, False: 11.0k]
  ------------------
   96|   177k|          *utf32_output++ = char32_t(buf[pos]);
   97|   177k|          pos++;
   98|   177k|        }
   99|  11.0k|        continue;
  100|  11.0k|      }
  101|  73.9k|    }
  102|   254k|    uint8_t leading_byte = data[pos]; // leading byte
  103|   254k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (103:9): [True: 219k, False: 35.4k]
  ------------------
  104|       |      // converting one ASCII byte !!!
  105|   219k|      *utf32_output++ = char32_t(leading_byte);
  106|   219k|      pos++;
  107|   219k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (107:16): [True: 24.5k, False: 10.8k]
  ------------------
  108|       |      // We have a two-byte UTF-8
  109|  24.5k|      if(pos + 1 >= len) { return result(error_code::TOO_SHORT, pos); } // minimal bound checking
  ------------------
  |  Branch (109:10): [True: 1.29k, False: 23.2k]
  ------------------
  110|  23.2k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (110:11): [True: 1.40k, False: 21.8k]
  ------------------
  111|       |      // range check
  112|  21.8k|      uint32_t code_point = (leading_byte & 0b00011111) << 6 | (data[pos + 1] & 0b00111111);
  113|  21.8k|      if (code_point < 0x80 || 0x7ff < code_point) { return result(error_code::OVERLONG, pos); }
  ------------------
  |  Branch (113:11): [True: 1.23k, False: 20.5k]
  |  Branch (113:32): [True: 0, False: 20.5k]
  ------------------
  114|  20.5k|      *utf32_output++ = char32_t(code_point);
  115|  20.5k|      pos += 2;
  116|  20.5k|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (116:16): [True: 4.29k, False: 6.57k]
  ------------------
  117|       |      // We have a three-byte UTF-8
  118|  4.29k|      if(pos + 2 >= len) { return result(error_code::TOO_SHORT, pos); } // minimal bound checking
  ------------------
  |  Branch (118:10): [True: 126, False: 4.16k]
  ------------------
  119|       |
  120|  4.16k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (120:11): [True: 600, False: 3.56k]
  ------------------
  121|  3.56k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (121:11): [True: 600, False: 2.96k]
  ------------------
  122|       |      // range check
  123|  2.96k|      uint32_t code_point = (leading_byte & 0b00001111) << 12 |
  124|  2.96k|                   (data[pos + 1] & 0b00111111) << 6 |
  125|  2.96k|                   (data[pos + 2] & 0b00111111);
  126|  2.96k|      if (code_point < 0x800 || 0xffff < code_point) { return result(error_code::OVERLONG, pos); }
  ------------------
  |  Branch (126:11): [True: 780, False: 2.18k]
  |  Branch (126:33): [True: 0, False: 2.18k]
  ------------------
  127|  2.18k|      if (0xd7ff < code_point && code_point < 0xe000) { return result(error_code::SURROGATE, pos); }
  ------------------
  |  Branch (127:11): [True: 1.34k, False: 840]
  |  Branch (127:34): [True: 804, False: 540]
  ------------------
  128|  1.38k|      *utf32_output++ = char32_t(code_point);
  129|  1.38k|      pos += 3;
  130|  6.57k|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (130:16): [True: 3.05k, False: 3.52k]
  ------------------
  131|       |      // we have a 4-byte UTF-8 word.
  132|  3.05k|      if(pos + 3 >= len) { return result(error_code::TOO_SHORT, pos); } // minimal bound checking
  ------------------
  |  Branch (132:10): [True: 114, False: 2.94k]
  ------------------
  133|  2.94k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos);}
  ------------------
  |  Branch (133:11): [True: 840, False: 2.10k]
  ------------------
  134|  2.10k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (134:11): [True: 474, False: 1.62k]
  ------------------
  135|  1.62k|      if ((data[pos + 3] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (135:11): [True: 72, False: 1.55k]
  ------------------
  136|       |
  137|       |      // range check
  138|  1.55k|      uint32_t code_point =
  139|  1.55k|          (leading_byte & 0b00000111) << 18 | (data[pos + 1] & 0b00111111) << 12 |
  140|  1.55k|          (data[pos + 2] & 0b00111111) << 6 | (data[pos + 3] & 0b00111111);
  141|  1.55k|      if (code_point <= 0xffff) { return result(error_code::OVERLONG, pos); }
  ------------------
  |  Branch (141:11): [True: 468, False: 1.08k]
  ------------------
  142|  1.08k|      if (0x10ffff < code_point) { return result(error_code::TOO_LARGE, pos); }
  ------------------
  |  Branch (142:11): [True: 72, False: 1.01k]
  ------------------
  143|  1.01k|      *utf32_output++ = char32_t(code_point);
  144|  1.01k|      pos += 4;
  145|  3.52k|    } else {
  146|       |      // we either have too many continuation bytes or an invalid leading byte
  147|  3.52k|      if ((leading_byte & 0b11000000) == 0b10000000) { return result(error_code::TOO_LONG, pos); }
  ------------------
  |  Branch (147:11): [True: 2.50k, False: 1.02k]
  ------------------
  148|  1.02k|      else { return result(error_code::HEADER_BITS, pos); }
  149|  3.52k|    }
  150|   254k|  }
  151|  22.1k|  return result(error_code::SUCCESS, utf32_output - start);
  152|  34.5k|}
simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf3230rewind_and_convert_with_errorsEmPKcmPDi:
  167|  36.5k|inline result rewind_and_convert_with_errors(size_t prior_bytes, const char* buf, size_t len, char32_t* utf32_output) {
  168|  36.5k|  size_t extra_len{0};
  169|       |  // We potentially need to go back in time and find a leading byte.
  170|  36.5k|  size_t how_far_back = 3; // 3 bytes in the past + current position
  171|  36.5k|  if(how_far_back > prior_bytes) { how_far_back = prior_bytes; }
  ------------------
  |  Branch (171:6): [True: 36.5k, False: 0]
  ------------------
  172|  36.5k|  bool found_leading_bytes{false};
  173|       |  // important: it is i <= how_far_back and not 'i < how_far_back'.
  174|  38.5k|  for(size_t i = 0; i <= how_far_back; i++) {
  ------------------
  |  Branch (174:21): [True: 36.5k, False: 2.02k]
  ------------------
  175|  36.5k|    unsigned char byte = buf[0-i];
  176|  36.5k|    found_leading_bytes = ((byte & 0b11000000) != 0b10000000);
  177|  36.5k|    if(found_leading_bytes) {
  ------------------
  |  Branch (177:8): [True: 34.5k, False: 2.02k]
  ------------------
  178|  34.5k|      buf -= i;
  179|  34.5k|      extra_len = i;
  180|  34.5k|      break;
  181|  34.5k|    }
  182|  36.5k|  }
  183|       |  //
  184|       |  // It is possible for this function to return a negative count in its result.
  185|       |  // C++ Standard Section 18.1 defines size_t is in <cstddef> which is described in C Standard as <stddef.h>.
  186|       |  // C Standard Section 4.1.5 defines size_t as an unsigned integral type of the result of the sizeof operator
  187|       |  //
  188|       |  // An unsigned type will simply wrap round arithmetically (well defined).
  189|       |  //
  190|  36.5k|  if(!found_leading_bytes) {
  ------------------
  |  Branch (190:6): [True: 2.02k, False: 34.5k]
  ------------------
  191|       |    // If how_far_back == 3, we may have four consecutive continuation bytes!!!
  192|       |    // [....] [continuation] [continuation] [continuation] | [buf is continuation]
  193|       |    // Or we possibly have a stream that does not start with a leading byte.
  194|  2.02k|    return result(error_code::TOO_LONG, 0-how_far_back);
  195|  2.02k|  }
  196|       |
  197|  34.5k|  result res = convert_with_errors(buf, len + extra_len, utf32_output);
  198|  34.5k|  if (res.error) {
  ------------------
  |  Branch (198:7): [True: 12.4k, False: 22.1k]
  ------------------
  199|  12.4k|    res.count -= extra_len;
  200|  12.4k|  }
  201|  34.5k|  return res;
  202|  36.5k|}

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf3213convert_validEPKcmPDi:
    9|  11.8k|inline size_t convert_valid(const char* buf, size_t len, char32_t* utf32_output) {
   10|  11.8k| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   11|  11.8k|  size_t pos = 0;
   12|  11.8k|  char32_t* start{utf32_output};
   13|  56.3k|  while (pos < len) {
  ------------------
  |  Branch (13:10): [True: 44.5k, False: 11.8k]
  ------------------
   14|       |    // try to convert the next block of 8 ASCII bytes
   15|  44.5k|    if (pos + 8 <= len) { // if it is safe to read 8 more bytes, check that they are ascii
  ------------------
  |  Branch (15:9): [True: 21.0k, False: 23.5k]
  ------------------
   16|  21.0k|      uint64_t v;
   17|  21.0k|      ::memcpy(&v, data + pos, sizeof(uint64_t));
   18|  21.0k|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (18:11): [True: 10.1k, False: 10.8k]
  ------------------
   19|  10.1k|        size_t final_pos = pos + 8;
   20|  91.7k|        while(pos < final_pos) {
  ------------------
  |  Branch (20:15): [True: 81.5k, False: 10.1k]
  ------------------
   21|  81.5k|          *utf32_output++ = char32_t(buf[pos]);
   22|  81.5k|          pos++;
   23|  81.5k|        }
   24|  10.1k|        continue;
   25|  10.1k|      }
   26|  21.0k|    }
   27|  34.3k|    uint8_t leading_byte = data[pos]; // leading byte
   28|  34.3k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (28:9): [True: 24.1k, False: 10.1k]
  ------------------
   29|       |      // converting one ASCII byte !!!
   30|  24.1k|      *utf32_output++ = char32_t(leading_byte);
   31|  24.1k|      pos++;
   32|  24.1k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (32:16): [True: 7.35k, False: 2.82k]
  ------------------
   33|       |      // We have a two-byte UTF-8
   34|  7.35k|      if(pos + 1 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (34:10): [True: 0, False: 7.35k]
  ------------------
   35|  7.35k|      *utf32_output++ = char32_t(((leading_byte &0b00011111) << 6) | (data[pos + 1] &0b00111111));
   36|  7.35k|      pos += 2;
   37|  7.35k|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (37:16): [True: 2.01k, False: 814]
  ------------------
   38|       |      // We have a three-byte UTF-8
   39|  2.01k|      if(pos + 2 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (39:10): [True: 0, False: 2.01k]
  ------------------
   40|  2.01k|      *utf32_output++ = char32_t(((leading_byte &0b00001111) << 12) | ((data[pos + 1] &0b00111111) << 6) | (data[pos + 2] &0b00111111));
   41|  2.01k|      pos += 3;
   42|  2.01k|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (42:16): [True: 814, False: 0]
  ------------------
   43|       |      // we have a 4-byte UTF-8 word.
   44|    814|      if(pos + 3 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (44:10): [True: 0, False: 814]
  ------------------
   45|    814|      uint32_t code_word = ((leading_byte & 0b00000111) << 18 )| ((data[pos + 1] &0b00111111) << 12)
   46|    814|                           | ((data[pos + 2] &0b00111111) << 6) | (data[pos + 3] &0b00111111);
   47|    814|      *utf32_output++ = char32_t(code_word);
   48|    814|      pos += 4;
   49|    814|    } else {
   50|       |      // we may have a continuation but we do not do error checking
   51|      0|      return 0;
   52|      0|    }
   53|  34.3k|  }
   54|  11.8k|  return utf32_output - start;
   55|  11.8k|}

_ZN7simdutf8fallback14implementationC2Ev:
   19|      1|  ) {}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_110count_onesEm:
   14|   235k|simdutf_really_inline long long int count_ones(uint64_t input_num) {
   15|   235k|  return _popcnt64(input_num);
   16|   235k|}

_ZN7simdutf7haswell14implementationC2Ev:
   18|      1|  ) {}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Ev:
  195|   797k|    simdutf_really_inline simd8() : base8_numeric<uint8_t>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhEC2Ev:
  112|   797k|    simdutf_really_inline base8_numeric() : base8<T>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEEC2Ev:
   61|   797k|    simdutf_really_inline base8() : base<simd8<T>>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEC2Ev:
   16|   797k|    simdutf_really_inline base() : value{__m256i()} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IhEC2EPKh:
  276|   298k|    simdutf_really_inline simd8x64(const T* ptr) : chunks{simd8<T>::load(ptr), simd8<T>::load(ptr+sizeof(simd8<T>)/sizeof(T))} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE4loadEPKh:
   96|   681k|    static simdutf_really_inline simd8<T> load(const T values[32]) {
   97|   681k|      return _mm256_loadu_si256(reinterpret_cast<const __m256i *>(values));
   98|   681k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2EDv4_x:
  196|  6.94M|    simdutf_really_inline simd8(const __m256i _value) : base8_numeric<uint8_t>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhEC2EDv4_x:
  113|  6.94M|    simdutf_really_inline base8_numeric(const __m256i _value) : base8<T>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEEC2EDv4_x:
   62|  6.94M|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEC2EDv4_x:
   19|  6.94M|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IhE9reduce_orEv:
  295|   298k|    simdutf_really_inline simd8<T> reduce_or() const {
  296|   298k|      return this->chunks[0] | this->chunks[1];
  297|   298k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEorES5_:
   43|  1.11M|    simdutf_really_inline Child operator|(const Child other) const { return _mm256_or_si256(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEcvRKDv4_xEv:
   21|  9.65M|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE8is_asciiEv:
  248|   298k|    simdutf_really_inline bool is_ascii() const { return _mm256_movemask_epi8(*this) == 0; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEoRES5_:
   47|   649k|    simdutf_really_inline Child& operator|=(const Child other) { auto this_cast = static_cast<Child*>(this); *this_cast = *this_cast | other; return *this_cast; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi1EEENS4_IhEES8_:
   70|   168k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|   168k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|   168k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE3shrILi4EEES4_v:
  254|   336k|    simdutf_really_inline simd8<uint8_t> shr() const { return simd8<uint8_t>(_mm256_srli_epi16(*this, N)) & uint8_t(0xFFu >> N); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE9lookup_16IhEENS2_5simd8IT_EES7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_:
  138|   504k|        L replace12, L replace13, L replace14, L replace15) const {
  139|   504k|      return lookup_16(simd8<L>::repeat_16(
  140|   504k|        replace0,  replace1,  replace2,  replace3,
  141|   504k|        replace4,  replace5,  replace6,  replace7,
  142|   504k|        replace8,  replace9,  replace10, replace11,
  143|   504k|        replace12, replace13, replace14, replace15
  144|   504k|      ));
  145|   504k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE9lookup_16IhEENS2_5simd8IT_EES8_:
  129|   504k|    simdutf_really_inline simd8<L> lookup_16(simd8<L> lookup_table) const {
  130|   504k|      return _mm256_shuffle_epi8(lookup_table, *this);
  131|   504k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEcvRDv4_xEv:
   22|   672k|    simdutf_really_inline operator __m256i&() { return this->value; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE9repeat_16Ehhhhhhhhhhhhhhhh:
  217|   504k|    ) {
  218|   504k|      return simd8<uint8_t>(
  219|   504k|        v0, v1, v2, v3, v4, v5, v6, v7,
  220|   504k|        v8, v9, v10,v11,v12,v13,v14,v15,
  221|   504k|        v0, v1, v2, v3, v4, v5, v6, v7,
  222|   504k|        v8, v9, v10,v11,v12,v13,v14,v15
  223|   504k|      );
  224|   504k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Ehhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh:
  212|   504k|    )) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEanES5_:
   44|  1.00M|    simdutf_really_inline Child operator&(const Child other) const { return _mm256_and_si256(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Eh:
  198|  1.53M|    simdutf_really_inline simd8(uint8_t _value) : simd8(splat(_value)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE5splatEh:
   94|  1.53M|    static simdutf_really_inline simd8<T> splat(T _value) { return _mm256_set1_epi8(_value); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi2EEENS4_IhEES8_:
   70|   168k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|   168k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|   168k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi3EEENS4_IhEES8_:
   70|   168k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|   168k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|   168k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE14saturating_subES4_:
  229|   419k|    simdutf_really_inline simd8<uint8_t> saturating_sub(const simd8<uint8_t> other) const { return _mm256_subs_epu8(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEC2EDv4_x:
  153|   400k|    simdutf_really_inline simd8(const __m256i _value) : base8_numeric<int8_t>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaEC2EDv4_x:
  113|   400k|    simdutf_really_inline base8_numeric(const __m256i _value) : base8<T>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IaNS2_5simd8IbEEEC2EDv4_x:
   62|   400k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEC2EDv4_x:
   19|   400k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEgtES4_:
  188|   189k|    simdutf_really_inline simd8<bool> operator>(const simd8<int8_t> other) const { return _mm256_cmpgt_epi8(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEcvRKDv4_xEv:
   21|   460k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IbEC2EDv4_x:
   81|   197k|    simdutf_really_inline simd8<bool>(const __m256i _value) : base8<bool>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IbNS2_5simd8IbEEEC2EDv4_x:
   62|   197k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEC2EDv4_x:
   19|   197k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEC2Ea:
  156|   168k|    simdutf_really_inline simd8(int8_t _value) : simd8(splat(_value)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaE5splatEa:
   94|   182k|    static simdutf_really_inline simd8<T> splat(T _value) { return _mm256_set1_epi8(_value); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEcvRDv4_xEv:
   22|   168k|    simdutf_really_inline operator __m256i&() { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEeoES5_:
   45|   168k|    simdutf_really_inline Child operator^(const Child other) const { return _mm256_xor_si256(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2EPKh:
  200|  83.5k|    simdutf_really_inline simd8(const uint8_t values[32]) : simd8(load(values)) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE7gt_bitsES4_:
  235|  83.5k|    simdutf_really_inline simd8<uint8_t> gt_bits(const simd8<uint8_t> other) const { return this->saturating_sub(other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE21any_bits_set_anywhereEv:
  250|   786k|    simdutf_really_inline bool any_bits_set_anywhere() const { return !bits_not_set_anywhere(); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE21bits_not_set_anywhereEv:
  249|   786k|    simdutf_really_inline bool bits_not_set_anywhere() const { return _mm256_testz_si256(*this, *this); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaEC2EPKa:
  276|  19.8k|    simdutf_really_inline simd8x64(const T* ptr) : chunks{simd8<T>::load(ptr), simd8<T>::load(ptr+sizeof(simd8<T>)/sizeof(T))} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaE4loadEPKa:
   96|  39.7k|    static simdutf_really_inline simd8<T> load(const T values[32]) {
   97|  39.7k|      return _mm256_loadu_si256(reinterpret_cast<const __m256i *>(values));
   98|  39.7k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE8is_asciiEv:
  299|  9.31k|    simdutf_really_inline bool is_ascii() const {
  300|  9.31k|      return this->reduce_or().is_ascii();
  301|  9.31k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE9reduce_orEv:
  295|  9.31k|    simdutf_really_inline simd8<T> reduce_or() const {
  296|  9.31k|      return this->chunks[0] | this->chunks[1];
  297|  9.31k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEorES5_:
   43|  9.31k|    simdutf_really_inline Child operator|(const Child other) const { return _mm256_or_si256(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaE8is_asciiEv:
  184|  9.31k|    simdutf_really_inline bool is_ascii() const { return _mm256_movemask_epi8(*this) == 0; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEcvNS3_IhEEEv:
  262|  1.47k|  simdutf_really_inline simd8<int8_t>::operator simd8<uint8_t>() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE2ltEa:
  362|  4.05k|    simdutf_really_inline uint64_t lt(const T m) const {
  363|  4.05k|      const simd8<T> mask = simd8<T>::splat(m);
  364|  4.05k|      return  simd8x64<bool>(
  365|  4.05k|        this->chunks[0] < mask,
  366|  4.05k|        this->chunks[1] < mask
  367|  4.05k|      ).to_bitmask();
  368|  4.05k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEltES4_:
  189|  8.10k|    simdutf_really_inline simd8<bool> operator<(const simd8<int8_t> other) const { return _mm256_cmpgt_epi8(other, *this); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IbEC2ENS2_5simd8IbEES6_:
  275|  14.6k|    simdutf_really_inline simd8x64(const simd8<T> chunk0, const simd8<T> chunk1) : chunks{chunk0, chunk1} {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IbE10to_bitmaskEv:
  283|  14.6k|    simdutf_really_inline uint64_t to_bitmask() const {
  284|  14.6k|      uint64_t r_lo = uint32_t(this->chunks[0].to_bitmask());
  285|  14.6k|      uint64_t r_hi =                       this->chunks[1].to_bitmask();
  286|  14.6k|      return r_lo | (r_hi << 32);
  287|  14.6k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IbE10to_bitmaskEv:
   85|  29.2k|    simdutf_really_inline uint32_t to_bitmask() const { return uint32_t(_mm256_movemask_epi8(*this)); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEcvRKDv4_xEv:
   21|  29.2k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE20store_ascii_as_utf32EPDi:
  309|  4.76k|    simdutf_really_inline void store_ascii_as_utf32(char32_t * ptr) const {
  310|  4.76k|      this->chunks[0].store_ascii_as_utf32(ptr+sizeof(simd8<T>)*0);
  311|  4.76k|      this->chunks[1].store_ascii_as_utf32(ptr+sizeof(simd8<T>)*1);
  312|  4.76k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEE20store_ascii_as_utf32EPDi:
   36|  9.52k|    simdutf_really_inline void store_ascii_as_utf32(char32_t * ptr) const {
   37|  9.52k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr), _mm256_cvtepu8_epi32(_mm256_castsi256_si128(*this)));
   38|  9.52k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr+8), _mm256_cvtepu8_epi32(_mm256_castsi256_si128(_mm256_srli_si256(*this,8))));
   39|  9.52k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr + 16), _mm256_cvtepu8_epi32(_mm256_extractf128_si256(*this,1)));
   40|  9.52k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr + 24), _mm256_cvtepu8_epi32(_mm_srli_si128(_mm256_extractf128_si256(*this,1),8)));
   41|  9.52k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE2gtEa:
  370|  10.5k|    simdutf_really_inline uint64_t gt(const T m) const {
  371|  10.5k|      const simd8<T> mask = simd8<T>::splat(m);
  372|  10.5k|      return  simd8x64<bool>(
  373|  10.5k|        this->chunks[0] > mask,
  374|  10.5k|        this->chunks[1] > mask
  375|  10.5k|      ).to_bitmask();
  376|  10.5k|    }

_ZN7simdutf7icelake14implementationC2Ev:
   18|      1|      internal::instruction_set::AVX2 | internal::instruction_set::BMI1 | internal::instruction_set::BMI2 | internal::instruction_set::AVX512BW | internal::instruction_set::AVX512CD | internal::instruction_set::AVX512VL | internal::instruction_set::AVX512VBMI2 | internal::instruction_set::AVX512VPOPCNTDQ ) {}

_ZN7simdutf8westmere14implementationC2Ev:
   16|      1|  simdutf_really_inline implementation() : simdutf::implementation("westmere", "Intel/AMD SSE4.2", internal::instruction_set::SSE42) {}

_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJcEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  8.08k|{
  619|  8.08k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  8.08k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  8.08k|    static_cast<    \
  |  |  247|  8.08k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  8.08k|}
_ZN3scn2v26detail20check_scan_arg_typesIJcEEEvv:
  386|  8.08k|{
  387|  8.08k|    static_assert(
  388|  8.08k|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  8.08k|        "Scan argument types must be default constructible");
  390|  8.08k|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  8.08k|                  "Scan argument types must be Destructible");
  392|  8.08k|    static_assert(
  393|  8.08k|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  8.08k|        "Scan argument types must not be references");
  395|  8.08k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJcEEC2EONSt3__15tupleIJcEEE:
  563|  8.08k|    {
  564|  8.08k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJcEE15make_data_arrayIJcEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  8.08k|    {
  574|  8.08k|        return {
  575|  8.08k|            detail::make_arg<base::is_packed, Context,
  576|  8.08k|                             detail::mapped_type_constant<
  577|  8.08k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  8.08k|                args)...};
  579|  8.08k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE12EcvEENS1_9arg_valueERT2_:
  414|  8.08k|{
  415|  8.08k|    return make_value<Context>(value);
  416|  8.08k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEcEEDaRT0_:
  371|  8.08k|{
  372|  8.08k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  8.08k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  8.08k|                                  needs_context_tag>) {
  376|  8.08k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  8.08k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  8.08k|    }
  378|  8.08k|    else {
  379|  8.08k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  8.08k|            value, context_tag<Context>{}));
  381|  8.08k|    }
  382|  8.08k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERc:
  245|  8.08k|    {
  246|  8.08k|        if constexpr (std::is_same_v<char_type, char> &&
  ------------------
  |  Branch (246:23): [Folded - Ignored]
  |  Branch (246:23): [Folded - Ignored]
  ------------------
  247|  8.08k|                      !is_type_disabled<char_type>) {
  ------------------
  |  Branch (247:23): [Folded - Ignored]
  ------------------
  248|  8.08k|            return val;
  249|  8.08k|        }
  250|  8.08k|        else if constexpr (is_type_disabled<char_type>) {
  251|  8.08k|            return unscannable_disabled{val};
  252|  8.08k|        }
  253|  8.08k|        else {
  254|  8.08k|            SCN_UNUSED(val);
  255|  8.08k|            return unscannable_char{};
  256|  8.08k|        }
  257|  8.08k|    }
_ZN3scn2v26detail15make_value_implIRcEEDaOT_:
  340|  8.08k|{
  341|  8.08k|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  8.08k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  8.08k|    constexpr bool scannable_char =
  345|  8.08k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  8.08k|    static_assert(scannable_char,
  347|  8.08k|                  "Cannot scan an argument of an unsupported character "
  348|  8.08k|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  8.08k|    constexpr bool scannable_const =
  351|  8.08k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  8.08k|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  8.08k|    constexpr bool scannable_disabled =
  355|  8.08k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  8.08k|    static_assert(scannable_disabled,
  357|  8.08k|                  "Cannot scan an argument that has been disabled by "
  358|  8.08k|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  8.08k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  8.08k|    static_assert(
  362|  8.08k|        scannable,
  363|  8.08k|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  8.08k|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  8.08k|    return arg_value{arg};
  367|  8.08k|}
_ZN3scn2v26detail9arg_valueC2IcEERT_:
  159|  8.08k|    {
  160|  8.08k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJcEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  8.08k|    {
  647|  8.08k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPNS0_6detail9arg_valueE:
  693|  72.7k|    {
  694|  72.7k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJcEE4argsEv:
  553|    196|    {
  554|    196|        return m_args;
  555|    196|    }
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJiEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  8.08k|{
  619|  8.08k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  8.08k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  8.08k|    static_cast<    \
  |  |  247|  8.08k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  8.08k|}
_ZN3scn2v26detail20check_scan_arg_typesIJiEEEvv:
  386|  21.9k|{
  387|  21.9k|    static_assert(
  388|  21.9k|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  21.9k|        "Scan argument types must be default constructible");
  390|  21.9k|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  21.9k|                  "Scan argument types must be Destructible");
  392|  21.9k|    static_assert(
  393|  21.9k|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  21.9k|        "Scan argument types must not be references");
  395|  21.9k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJiEEC2EONSt3__15tupleIJiEEE:
  563|  8.08k|    {
  564|  8.08k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJiEE15make_data_arrayIJiEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  8.08k|    {
  574|  8.08k|        return {
  575|  8.08k|            detail::make_arg<base::is_packed, Context,
  576|  8.08k|                             detail::mapped_type_constant<
  577|  8.08k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  8.08k|                args)...};
  579|  8.08k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE3EivEENS1_9arg_valueERT2_:
  414|  8.08k|{
  415|  8.08k|    return make_value<Context>(value);
  416|  8.08k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEiEEDaRT0_:
  371|  8.08k|{
  372|  8.08k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  8.08k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  8.08k|                                  needs_context_tag>) {
  376|  8.08k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  8.08k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  8.08k|    }
  378|  8.08k|    else {
  379|  8.08k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  8.08k|            value, context_tag<Context>{}));
  381|  8.08k|    }
  382|  8.08k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERi:
  216|  8.08k|    {                                                                        \
  217|  8.08k|        return val;                                                          \
  218|  8.08k|    }
_ZN3scn2v26detail15make_value_implIRiEEDaOT_:
  340|  21.9k|{
  341|  21.9k|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  21.9k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  21.9k|    constexpr bool scannable_char =
  345|  21.9k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  21.9k|    static_assert(scannable_char,
  347|  21.9k|                  "Cannot scan an argument of an unsupported character "
  348|  21.9k|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  21.9k|    constexpr bool scannable_const =
  351|  21.9k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  21.9k|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  21.9k|    constexpr bool scannable_disabled =
  355|  21.9k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  21.9k|    static_assert(scannable_disabled,
  357|  21.9k|                  "Cannot scan an argument that has been disabled by "
  358|  21.9k|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  21.9k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  21.9k|    static_assert(
  362|  21.9k|        scannable,
  363|  21.9k|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  21.9k|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  21.9k|    return arg_value{arg};
  367|  21.9k|}
_ZN3scn2v26detail9arg_valueC2IiEERT_:
  159|  21.9k|    {
  160|  21.9k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJiEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  8.08k|    {
  647|  8.08k|    }
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJjEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  8.08k|{
  619|  8.08k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  8.08k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  8.08k|    static_cast<    \
  |  |  247|  8.08k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  8.08k|}
_ZN3scn2v26detail20check_scan_arg_typesIJjEEEvv:
  386|  21.9k|{
  387|  21.9k|    static_assert(
  388|  21.9k|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  21.9k|        "Scan argument types must be default constructible");
  390|  21.9k|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  21.9k|                  "Scan argument types must be Destructible");
  392|  21.9k|    static_assert(
  393|  21.9k|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  21.9k|        "Scan argument types must not be references");
  395|  21.9k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJjEEC2EONSt3__15tupleIJjEEE:
  563|  8.08k|    {
  564|  8.08k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJjEE15make_data_arrayIJjEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  8.08k|    {
  574|  8.08k|        return {
  575|  8.08k|            detail::make_arg<base::is_packed, Context,
  576|  8.08k|                             detail::mapped_type_constant<
  577|  8.08k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  8.08k|                args)...};
  579|  8.08k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE8EjvEENS1_9arg_valueERT2_:
  414|  8.08k|{
  415|  8.08k|    return make_value<Context>(value);
  416|  8.08k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEjEEDaRT0_:
  371|  8.08k|{
  372|  8.08k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  8.08k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  8.08k|                                  needs_context_tag>) {
  376|  8.08k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  8.08k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  8.08k|    }
  378|  8.08k|    else {
  379|  8.08k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  8.08k|            value, context_tag<Context>{}));
  381|  8.08k|    }
  382|  8.08k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERj:
  216|  8.08k|    {                                                                        \
  217|  8.08k|        return val;                                                          \
  218|  8.08k|    }
_ZN3scn2v26detail15make_value_implIRjEEDaOT_:
  340|  21.9k|{
  341|  21.9k|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  21.9k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  21.9k|    constexpr bool scannable_char =
  345|  21.9k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  21.9k|    static_assert(scannable_char,
  347|  21.9k|                  "Cannot scan an argument of an unsupported character "
  348|  21.9k|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  21.9k|    constexpr bool scannable_const =
  351|  21.9k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  21.9k|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  21.9k|    constexpr bool scannable_disabled =
  355|  21.9k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  21.9k|    static_assert(scannable_disabled,
  357|  21.9k|                  "Cannot scan an argument that has been disabled by "
  358|  21.9k|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  21.9k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  21.9k|    static_assert(
  362|  21.9k|        scannable,
  363|  21.9k|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  21.9k|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  21.9k|    return arg_value{arg};
  367|  21.9k|}
_ZN3scn2v26detail9arg_valueC2IjEERT_:
  159|  21.9k|    {
  160|  21.9k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJjEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  8.08k|    {
  647|  8.08k|    }
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  8.08k|{
  619|  8.08k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  8.08k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  8.08k|    static_cast<    \
  |  |  247|  8.08k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  8.08k|}
_ZN3scn2v26detail20check_scan_arg_typesIJdEEEvv:
  386|  21.9k|{
  387|  21.9k|    static_assert(
  388|  21.9k|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  21.9k|        "Scan argument types must be default constructible");
  390|  21.9k|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  21.9k|                  "Scan argument types must be Destructible");
  392|  21.9k|    static_assert(
  393|  21.9k|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  21.9k|        "Scan argument types must not be references");
  395|  21.9k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2EONSt3__15tupleIJdEEE:
  563|  8.08k|    {
  564|  8.08k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJdEE15make_data_arrayIJdEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  8.08k|    {
  574|  8.08k|        return {
  575|  8.08k|            detail::make_arg<base::is_packed, Context,
  576|  8.08k|                             detail::mapped_type_constant<
  577|  8.08k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  8.08k|                args)...};
  579|  8.08k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEENS1_9arg_valueERT2_:
  414|  8.08k|{
  415|  8.08k|    return make_value<Context>(value);
  416|  8.08k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
  371|  8.08k|{
  372|  8.08k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  8.08k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  8.08k|                                  needs_context_tag>) {
  376|  8.08k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  8.08k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  8.08k|    }
  378|  8.08k|    else {
  379|  8.08k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  8.08k|            value, context_tag<Context>{}));
  381|  8.08k|    }
  382|  8.08k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERd:
  216|  8.08k|    {                                                                        \
  217|  8.08k|        return val;                                                          \
  218|  8.08k|    }
_ZN3scn2v26detail15make_value_implIRdEEDaOT_:
  340|  21.9k|{
  341|  21.9k|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  21.9k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  21.9k|    constexpr bool scannable_char =
  345|  21.9k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  21.9k|    static_assert(scannable_char,
  347|  21.9k|                  "Cannot scan an argument of an unsupported character "
  348|  21.9k|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  21.9k|    constexpr bool scannable_const =
  351|  21.9k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  21.9k|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  21.9k|    constexpr bool scannable_disabled =
  355|  21.9k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  21.9k|    static_assert(scannable_disabled,
  357|  21.9k|                  "Cannot scan an argument that has been disabled by "
  358|  21.9k|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  21.9k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  21.9k|    static_assert(
  362|  21.9k|        scannable,
  363|  21.9k|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  21.9k|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  21.9k|    return arg_value{arg};
  367|  21.9k|}
_ZN3scn2v26detail9arg_valueC2IdEERT_:
  159|  21.9k|    {
  160|  21.9k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  8.08k|    {
  647|  8.08k|    }
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJbEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  8.08k|{
  619|  8.08k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  8.08k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  8.08k|    static_cast<    \
  |  |  247|  8.08k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  8.08k|}
_ZN3scn2v26detail20check_scan_arg_typesIJbEEEvv:
  386|  21.9k|{
  387|  21.9k|    static_assert(
  388|  21.9k|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  21.9k|        "Scan argument types must be default constructible");
  390|  21.9k|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  21.9k|                  "Scan argument types must be Destructible");
  392|  21.9k|    static_assert(
  393|  21.9k|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  21.9k|        "Scan argument types must not be references");
  395|  21.9k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJbEEC2EONSt3__15tupleIJbEEE:
  563|  8.08k|    {
  564|  8.08k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJbEE15make_data_arrayIJbEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  8.08k|    {
  574|  8.08k|        return {
  575|  8.08k|            detail::make_arg<base::is_packed, Context,
  576|  8.08k|                             detail::mapped_type_constant<
  577|  8.08k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  8.08k|                args)...};
  579|  8.08k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE11EbvEENS1_9arg_valueERT2_:
  414|  8.08k|{
  415|  8.08k|    return make_value<Context>(value);
  416|  8.08k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEbEEDaRT0_:
  371|  8.08k|{
  372|  8.08k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  8.08k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  8.08k|                                  needs_context_tag>) {
  376|  8.08k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  8.08k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  8.08k|    }
  378|  8.08k|    else {
  379|  8.08k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  8.08k|            value, context_tag<Context>{}));
  381|  8.08k|    }
  382|  8.08k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERb:
  216|  8.08k|    {                                                                        \
  217|  8.08k|        return val;                                                          \
  218|  8.08k|    }
_ZN3scn2v26detail15make_value_implIRbEEDaOT_:
  340|  21.9k|{
  341|  21.9k|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  21.9k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  21.9k|    constexpr bool scannable_char =
  345|  21.9k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  21.9k|    static_assert(scannable_char,
  347|  21.9k|                  "Cannot scan an argument of an unsupported character "
  348|  21.9k|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  21.9k|    constexpr bool scannable_const =
  351|  21.9k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  21.9k|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  21.9k|    constexpr bool scannable_disabled =
  355|  21.9k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  21.9k|    static_assert(scannable_disabled,
  357|  21.9k|                  "Cannot scan an argument that has been disabled by "
  358|  21.9k|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  21.9k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  21.9k|    static_assert(
  362|  21.9k|        scannable,
  363|  21.9k|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  21.9k|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  21.9k|    return arg_value{arg};
  367|  21.9k|}
_ZN3scn2v26detail9arg_valueC2IbEERT_:
  159|  21.9k|    {
  160|  21.9k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJbEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  8.08k|    {
  647|  8.08k|    }
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJPvEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  8.08k|{
  619|  8.08k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  8.08k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  8.08k|    static_cast<    \
  |  |  247|  8.08k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  8.08k|}
_ZN3scn2v26detail20check_scan_arg_typesIJPvEEEvv:
  386|  21.9k|{
  387|  21.9k|    static_assert(
  388|  21.9k|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  21.9k|        "Scan argument types must be default constructible");
  390|  21.9k|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  21.9k|                  "Scan argument types must be Destructible");
  392|  21.9k|    static_assert(
  393|  21.9k|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  21.9k|        "Scan argument types must not be references");
  395|  21.9k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJPvEEC2EONSt3__15tupleIJS4_EEE:
  563|  8.08k|    {
  564|  8.08k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE15make_data_arrayIJS4_EEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  8.08k|    {
  574|  8.08k|        return {
  575|  8.08k|            detail::make_arg<base::is_packed, Context,
  576|  8.08k|                             detail::mapped_type_constant<
  577|  8.08k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  8.08k|                args)...};
  579|  8.08k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE15EPvvEENS1_9arg_valueERT2_:
  414|  8.08k|{
  415|  8.08k|    return make_value<Context>(value);
  416|  8.08k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEPvEEDaRT0_:
  371|  8.08k|{
  372|  8.08k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  8.08k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  8.08k|                                  needs_context_tag>) {
  376|  8.08k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  8.08k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  8.08k|    }
  378|  8.08k|    else {
  379|  8.08k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  8.08k|            value, context_tag<Context>{}));
  381|  8.08k|    }
  382|  8.08k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERPv:
  216|  8.08k|    {                                                                        \
  217|  8.08k|        return val;                                                          \
  218|  8.08k|    }
_ZN3scn2v26detail15make_value_implIRPvEEDaOT_:
  340|  21.9k|{
  341|  21.9k|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  21.9k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  21.9k|    constexpr bool scannable_char =
  345|  21.9k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  21.9k|    static_assert(scannable_char,
  347|  21.9k|                  "Cannot scan an argument of an unsupported character "
  348|  21.9k|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  21.9k|    constexpr bool scannable_const =
  351|  21.9k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  21.9k|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  21.9k|    constexpr bool scannable_disabled =
  355|  21.9k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  21.9k|    static_assert(scannable_disabled,
  357|  21.9k|                  "Cannot scan an argument that has been disabled by "
  358|  21.9k|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  21.9k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  21.9k|    static_assert(
  362|  21.9k|        scannable,
  363|  21.9k|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  21.9k|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  21.9k|    return arg_value{arg};
  367|  21.9k|}
_ZN3scn2v26detail9arg_valueC2IPvEERT_:
  159|  21.9k|    {
  160|  21.9k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJPvEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  8.08k|    {
  647|  8.08k|    }
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDaONS4_5tupleIJDpT0_EEE:
  618|  8.08k|{
  619|  8.08k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  8.08k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  8.08k|    static_cast<    \
  |  |  247|  8.08k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  8.08k|}
_ZN3scn2v26detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEvv:
  386|  21.9k|{
  387|  21.9k|    static_assert(
  388|  21.9k|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  21.9k|        "Scan argument types must be default constructible");
  390|  21.9k|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  21.9k|                  "Scan argument types must be Destructible");
  392|  21.9k|    static_assert(
  393|  21.9k|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  21.9k|        "Scan argument types must not be references");
  395|  21.9k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEC2EONS4_5tupleIJSA_EEE:
  563|  8.08k|    {
  564|  8.08k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE15make_data_arrayIJSA_EEENS4_5arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  8.08k|    {
  574|  8.08k|        return {
  575|  8.08k|            detail::make_arg<base::is_packed, Context,
  576|  8.08k|                             detail::mapped_type_constant<
  577|  8.08k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  8.08k|                args)...};
  579|  8.08k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEvEENS1_9arg_valueERT2_:
  414|  8.08k|{
  415|  8.08k|    return make_value<Context>(value);
  416|  8.08k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
  371|  8.08k|{
  372|  8.08k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  8.08k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  8.08k|                                  needs_context_tag>) {
  376|  8.08k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  8.08k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  8.08k|    }
  378|  8.08k|    else {
  379|  8.08k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  8.08k|            value, context_tag<Context>{}));
  381|  8.08k|    }
  382|  8.08k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
  216|  8.08k|    {                                                                        \
  217|  8.08k|        return val;                                                          \
  218|  8.08k|    }
_ZN3scn2v26detail15make_value_implIRNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEDaOT_:
  340|  21.9k|{
  341|  21.9k|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  21.9k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  21.9k|    constexpr bool scannable_char =
  345|  21.9k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  21.9k|    static_assert(scannable_char,
  347|  21.9k|                  "Cannot scan an argument of an unsupported character "
  348|  21.9k|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  21.9k|    constexpr bool scannable_const =
  351|  21.9k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  21.9k|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  21.9k|    constexpr bool scannable_disabled =
  355|  21.9k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  21.9k|    static_assert(scannable_disabled,
  357|  21.9k|                  "Cannot scan an argument that has been disabled by "
  358|  21.9k|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  21.9k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  21.9k|    static_assert(
  362|  21.9k|        scannable,
  363|  21.9k|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  21.9k|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  21.9k|    return arg_value{arg};
  367|  21.9k|}
_ZN3scn2v26detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
  159|  21.9k|    {
  160|  21.9k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  8.08k|    {
  647|  8.08k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE4argsEv:
  553|    750|    {
  554|    750|        return m_args;
  555|    750|    }
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDaONS4_5tupleIJDpT0_EEE:
  618|  8.08k|{
  619|  8.08k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  8.08k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  8.08k|    static_cast<    \
  |  |  247|  8.08k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  8.08k|}
_ZN3scn2v26detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEvv:
  386|  21.9k|{
  387|  21.9k|    static_assert(
  388|  21.9k|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  21.9k|        "Scan argument types must be default constructible");
  390|  21.9k|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  21.9k|                  "Scan argument types must be Destructible");
  392|  21.9k|    static_assert(
  393|  21.9k|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  21.9k|        "Scan argument types must not be references");
  395|  21.9k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEC2EONS4_5tupleIJSA_EEE:
  563|  8.08k|    {
  564|  8.08k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEE15make_data_arrayIJSA_EEENS4_5arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  8.08k|    {
  574|  8.08k|        return {
  575|  8.08k|            detail::make_arg<base::is_packed, Context,
  576|  8.08k|                             detail::mapped_type_constant<
  577|  8.08k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  8.08k|                args)...};
  579|  8.08k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEvEENS1_9arg_valueERT2_:
  414|  8.08k|{
  415|  8.08k|    return make_value<Context>(value);
  416|  8.08k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
  371|  8.08k|{
  372|  8.08k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  8.08k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  8.08k|                                  needs_context_tag>) {
  376|  8.08k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  8.08k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  8.08k|    }
  378|  8.08k|    else {
  379|  8.08k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  8.08k|            value, context_tag<Context>{}));
  381|  8.08k|    }
  382|  8.08k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
  216|  8.08k|    {                                                                        \
  217|  8.08k|        return val;                                                          \
  218|  8.08k|    }
_ZN3scn2v26detail15make_value_implIRNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEDaOT_:
  340|  21.9k|{
  341|  21.9k|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  21.9k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  21.9k|    constexpr bool scannable_char =
  345|  21.9k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  21.9k|    static_assert(scannable_char,
  347|  21.9k|                  "Cannot scan an argument of an unsupported character "
  348|  21.9k|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  21.9k|    constexpr bool scannable_const =
  351|  21.9k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  21.9k|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  21.9k|    constexpr bool scannable_disabled =
  355|  21.9k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  21.9k|    static_assert(scannable_disabled,
  357|  21.9k|                  "Cannot scan an argument that has been disabled by "
  358|  21.9k|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  21.9k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  21.9k|    static_assert(
  362|  21.9k|        scannable,
  363|  21.9k|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  21.9k|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  21.9k|    return arg_value{arg};
  367|  21.9k|}
_ZN3scn2v26detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
  159|  21.9k|    {
  160|  21.9k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  8.08k|    {
  647|  8.08k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEE4argsEv:
  553|    750|    {
  554|    750|        return m_args;
  555|    750|    }
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEEDaONS4_5tupleIJDpT0_EEE:
  618|  8.08k|{
  619|  8.08k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  8.08k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  8.08k|    static_cast<    \
  |  |  247|  8.08k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  8.08k|}
_ZN3scn2v26detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEvv:
  386|  8.08k|{
  387|  8.08k|    static_assert(
  388|  8.08k|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  8.08k|        "Scan argument types must be default constructible");
  390|  8.08k|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  8.08k|                  "Scan argument types must be Destructible");
  392|  8.08k|    static_assert(
  393|  8.08k|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  8.08k|        "Scan argument types must not be references");
  395|  8.08k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEC2EONS4_5tupleIJS8_EEE:
  563|  8.08k|    {
  564|  8.08k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEE15make_data_arrayIJS8_EEENS4_5arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  8.08k|    {
  574|  8.08k|        return {
  575|  8.08k|            detail::make_arg<base::is_packed, Context,
  576|  8.08k|                             detail::mapped_type_constant<
  577|  8.08k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  8.08k|                args)...};
  579|  8.08k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE19ENSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEvEENS1_9arg_valueERT2_:
  414|  8.08k|{
  415|  8.08k|    return make_value<Context>(value);
  416|  8.08k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDaRT0_:
  371|  8.08k|{
  372|  8.08k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  8.08k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  8.08k|                                  needs_context_tag>) {
  376|  8.08k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  8.08k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  8.08k|    }
  378|  8.08k|    else {
  379|  8.08k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  8.08k|            value, context_tag<Context>{}));
  381|  8.08k|    }
  382|  8.08k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
  216|  8.08k|    {                                                                        \
  217|  8.08k|        return val;                                                          \
  218|  8.08k|    }
_ZN3scn2v26detail15make_value_implIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
  340|  8.08k|{
  341|  8.08k|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  8.08k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  8.08k|    constexpr bool scannable_char =
  345|  8.08k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  8.08k|    static_assert(scannable_char,
  347|  8.08k|                  "Cannot scan an argument of an unsupported character "
  348|  8.08k|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  8.08k|    constexpr bool scannable_const =
  351|  8.08k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  8.08k|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  8.08k|    constexpr bool scannable_disabled =
  355|  8.08k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  8.08k|    static_assert(scannable_disabled,
  357|  8.08k|                  "Cannot scan an argument that has been disabled by "
  358|  8.08k|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  8.08k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  8.08k|    static_assert(
  362|  8.08k|        scannable,
  363|  8.08k|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  8.08k|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  8.08k|    return arg_value{arg};
  367|  8.08k|}
_ZN3scn2v26detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
  159|  8.08k|    {
  160|  8.08k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  8.08k|    {
  647|  8.08k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEE4argsEv:
  553|    750|    {
  554|    750|        return m_args;
  555|    750|    }
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJwEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  13.8k|{
  619|  13.8k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  13.8k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  13.8k|    static_cast<    \
  |  |  247|  13.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  13.8k|}
_ZN3scn2v26detail20check_scan_arg_typesIJwEEEvv:
  386|  13.8k|{
  387|  13.8k|    static_assert(
  388|  13.8k|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  13.8k|        "Scan argument types must be default constructible");
  390|  13.8k|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  13.8k|                  "Scan argument types must be Destructible");
  392|  13.8k|    static_assert(
  393|  13.8k|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  13.8k|        "Scan argument types must not be references");
  395|  13.8k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJwEEC2EONSt3__15tupleIJwEEE:
  563|  13.8k|    {
  564|  13.8k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJwEE15make_data_arrayIJwEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  13.8k|    {
  574|  13.8k|        return {
  575|  13.8k|            detail::make_arg<base::is_packed, Context,
  576|  13.8k|                             detail::mapped_type_constant<
  577|  13.8k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  13.8k|                args)...};
  579|  13.8k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE13EwvEENS1_9arg_valueERT2_:
  414|  13.8k|{
  415|  13.8k|    return make_value<Context>(value);
  416|  13.8k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEwEEDaRT0_:
  371|  13.8k|{
  372|  13.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  13.8k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  13.8k|                                  needs_context_tag>) {
  376|  13.8k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  13.8k|    }
  378|  13.8k|    else {
  379|  13.8k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  13.8k|            value, context_tag<Context>{}));
  381|  13.8k|    }
  382|  13.8k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERw:
  216|  13.8k|    {                                                                        \
  217|  13.8k|        return val;                                                          \
  218|  13.8k|    }
_ZN3scn2v26detail15make_value_implIRwEEDaOT_:
  340|  13.8k|{
  341|  13.8k|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  13.8k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  13.8k|    constexpr bool scannable_char =
  345|  13.8k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  13.8k|    static_assert(scannable_char,
  347|  13.8k|                  "Cannot scan an argument of an unsupported character "
  348|  13.8k|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  13.8k|    constexpr bool scannable_const =
  351|  13.8k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  13.8k|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  13.8k|    constexpr bool scannable_disabled =
  355|  13.8k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  13.8k|    static_assert(scannable_disabled,
  357|  13.8k|                  "Cannot scan an argument that has been disabled by "
  358|  13.8k|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  13.8k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  13.8k|    static_assert(
  362|  13.8k|        scannable,
  363|  13.8k|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  13.8k|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  13.8k|    return arg_value{arg};
  367|  13.8k|}
_ZN3scn2v26detail9arg_valueC2IwEERT_:
  159|  13.8k|    {
  160|  13.8k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJwEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  13.8k|    {
  647|  13.8k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPNS0_6detail9arg_valueE:
  693|   124k|    {
  694|   124k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJwEE4argsEv:
  553|    220|    {
  554|    220|        return m_args;
  555|    220|    }
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJiEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  13.8k|{
  619|  13.8k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  13.8k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  13.8k|    static_cast<    \
  |  |  247|  13.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  13.8k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJiEEC2EONSt3__15tupleIJiEEE:
  563|  13.8k|    {
  564|  13.8k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJiEE15make_data_arrayIJiEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  13.8k|    {
  574|  13.8k|        return {
  575|  13.8k|            detail::make_arg<base::is_packed, Context,
  576|  13.8k|                             detail::mapped_type_constant<
  577|  13.8k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  13.8k|                args)...};
  579|  13.8k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE3EivEENS1_9arg_valueERT2_:
  414|  13.8k|{
  415|  13.8k|    return make_value<Context>(value);
  416|  13.8k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEiEEDaRT0_:
  371|  13.8k|{
  372|  13.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  13.8k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  13.8k|                                  needs_context_tag>) {
  376|  13.8k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  13.8k|    }
  378|  13.8k|    else {
  379|  13.8k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  13.8k|            value, context_tag<Context>{}));
  381|  13.8k|    }
  382|  13.8k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERi:
  216|  13.8k|    {                                                                        \
  217|  13.8k|        return val;                                                          \
  218|  13.8k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJiEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  13.8k|    {
  647|  13.8k|    }
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJjEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  13.8k|{
  619|  13.8k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  13.8k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  13.8k|    static_cast<    \
  |  |  247|  13.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  13.8k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJjEEC2EONSt3__15tupleIJjEEE:
  563|  13.8k|    {
  564|  13.8k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJjEE15make_data_arrayIJjEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  13.8k|    {
  574|  13.8k|        return {
  575|  13.8k|            detail::make_arg<base::is_packed, Context,
  576|  13.8k|                             detail::mapped_type_constant<
  577|  13.8k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  13.8k|                args)...};
  579|  13.8k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE8EjvEENS1_9arg_valueERT2_:
  414|  13.8k|{
  415|  13.8k|    return make_value<Context>(value);
  416|  13.8k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEjEEDaRT0_:
  371|  13.8k|{
  372|  13.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  13.8k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  13.8k|                                  needs_context_tag>) {
  376|  13.8k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  13.8k|    }
  378|  13.8k|    else {
  379|  13.8k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  13.8k|            value, context_tag<Context>{}));
  381|  13.8k|    }
  382|  13.8k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERj:
  216|  13.8k|    {                                                                        \
  217|  13.8k|        return val;                                                          \
  218|  13.8k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJjEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  13.8k|    {
  647|  13.8k|    }
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  13.8k|{
  619|  13.8k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  13.8k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  13.8k|    static_cast<    \
  |  |  247|  13.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  13.8k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2EONSt3__15tupleIJdEEE:
  563|  13.8k|    {
  564|  13.8k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJdEE15make_data_arrayIJdEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  13.8k|    {
  574|  13.8k|        return {
  575|  13.8k|            detail::make_arg<base::is_packed, Context,
  576|  13.8k|                             detail::mapped_type_constant<
  577|  13.8k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  13.8k|                args)...};
  579|  13.8k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEENS1_9arg_valueERT2_:
  414|  13.8k|{
  415|  13.8k|    return make_value<Context>(value);
  416|  13.8k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
  371|  13.8k|{
  372|  13.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  13.8k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  13.8k|                                  needs_context_tag>) {
  376|  13.8k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  13.8k|    }
  378|  13.8k|    else {
  379|  13.8k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  13.8k|            value, context_tag<Context>{}));
  381|  13.8k|    }
  382|  13.8k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERd:
  216|  13.8k|    {                                                                        \
  217|  13.8k|        return val;                                                          \
  218|  13.8k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  13.8k|    {
  647|  13.8k|    }
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJbEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  13.8k|{
  619|  13.8k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  13.8k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  13.8k|    static_cast<    \
  |  |  247|  13.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  13.8k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJbEEC2EONSt3__15tupleIJbEEE:
  563|  13.8k|    {
  564|  13.8k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJbEE15make_data_arrayIJbEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  13.8k|    {
  574|  13.8k|        return {
  575|  13.8k|            detail::make_arg<base::is_packed, Context,
  576|  13.8k|                             detail::mapped_type_constant<
  577|  13.8k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  13.8k|                args)...};
  579|  13.8k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE11EbvEENS1_9arg_valueERT2_:
  414|  13.8k|{
  415|  13.8k|    return make_value<Context>(value);
  416|  13.8k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEbEEDaRT0_:
  371|  13.8k|{
  372|  13.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  13.8k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  13.8k|                                  needs_context_tag>) {
  376|  13.8k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  13.8k|    }
  378|  13.8k|    else {
  379|  13.8k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  13.8k|            value, context_tag<Context>{}));
  381|  13.8k|    }
  382|  13.8k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERb:
  216|  13.8k|    {                                                                        \
  217|  13.8k|        return val;                                                          \
  218|  13.8k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJbEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  13.8k|    {
  647|  13.8k|    }
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJPvEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  13.8k|{
  619|  13.8k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  13.8k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  13.8k|    static_cast<    \
  |  |  247|  13.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  13.8k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJPvEEC2EONSt3__15tupleIJS4_EEE:
  563|  13.8k|    {
  564|  13.8k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE15make_data_arrayIJS4_EEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  13.8k|    {
  574|  13.8k|        return {
  575|  13.8k|            detail::make_arg<base::is_packed, Context,
  576|  13.8k|                             detail::mapped_type_constant<
  577|  13.8k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  13.8k|                args)...};
  579|  13.8k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE15EPvvEENS1_9arg_valueERT2_:
  414|  13.8k|{
  415|  13.8k|    return make_value<Context>(value);
  416|  13.8k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEPvEEDaRT0_:
  371|  13.8k|{
  372|  13.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  13.8k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  13.8k|                                  needs_context_tag>) {
  376|  13.8k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  13.8k|    }
  378|  13.8k|    else {
  379|  13.8k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  13.8k|            value, context_tag<Context>{}));
  381|  13.8k|    }
  382|  13.8k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERPv:
  216|  13.8k|    {                                                                        \
  217|  13.8k|        return val;                                                          \
  218|  13.8k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJPvEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  13.8k|    {
  647|  13.8k|    }
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDaONS4_5tupleIJDpT0_EEE:
  618|  13.8k|{
  619|  13.8k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  13.8k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  13.8k|    static_cast<    \
  |  |  247|  13.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  13.8k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEC2EONS4_5tupleIJSA_EEE:
  563|  13.8k|    {
  564|  13.8k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE15make_data_arrayIJSA_EEENS4_5arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  13.8k|    {
  574|  13.8k|        return {
  575|  13.8k|            detail::make_arg<base::is_packed, Context,
  576|  13.8k|                             detail::mapped_type_constant<
  577|  13.8k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  13.8k|                args)...};
  579|  13.8k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEvEENS1_9arg_valueERT2_:
  414|  13.8k|{
  415|  13.8k|    return make_value<Context>(value);
  416|  13.8k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
  371|  13.8k|{
  372|  13.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  13.8k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  13.8k|                                  needs_context_tag>) {
  376|  13.8k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  13.8k|    }
  378|  13.8k|    else {
  379|  13.8k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  13.8k|            value, context_tag<Context>{}));
  381|  13.8k|    }
  382|  13.8k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
  216|  13.8k|    {                                                                        \
  217|  13.8k|        return val;                                                          \
  218|  13.8k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  13.8k|    {
  647|  13.8k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE4argsEv:
  553|    808|    {
  554|    808|        return m_args;
  555|    808|    }
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDaONS4_5tupleIJDpT0_EEE:
  618|  13.8k|{
  619|  13.8k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  13.8k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  13.8k|    static_cast<    \
  |  |  247|  13.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  13.8k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEC2EONS4_5tupleIJSA_EEE:
  563|  13.8k|    {
  564|  13.8k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEE15make_data_arrayIJSA_EEENS4_5arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  13.8k|    {
  574|  13.8k|        return {
  575|  13.8k|            detail::make_arg<base::is_packed, Context,
  576|  13.8k|                             detail::mapped_type_constant<
  577|  13.8k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  13.8k|                args)...};
  579|  13.8k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEvEENS1_9arg_valueERT2_:
  414|  13.8k|{
  415|  13.8k|    return make_value<Context>(value);
  416|  13.8k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
  371|  13.8k|{
  372|  13.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  13.8k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  13.8k|                                  needs_context_tag>) {
  376|  13.8k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  13.8k|    }
  378|  13.8k|    else {
  379|  13.8k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  13.8k|            value, context_tag<Context>{}));
  381|  13.8k|    }
  382|  13.8k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
  216|  13.8k|    {                                                                        \
  217|  13.8k|        return val;                                                          \
  218|  13.8k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  13.8k|    {
  647|  13.8k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEE4argsEv:
  553|    808|    {
  554|    808|        return m_args;
  555|    808|    }
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEEDaONS4_5tupleIJDpT0_EEE:
  618|  13.8k|{
  619|  13.8k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  13.8k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  13.8k|    static_cast<    \
  |  |  247|  13.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  13.8k|}
_ZN3scn2v26detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEvv:
  386|  13.8k|{
  387|  13.8k|    static_assert(
  388|  13.8k|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  13.8k|        "Scan argument types must be default constructible");
  390|  13.8k|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  13.8k|                  "Scan argument types must be Destructible");
  392|  13.8k|    static_assert(
  393|  13.8k|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  13.8k|        "Scan argument types must not be references");
  395|  13.8k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEC2EONS4_5tupleIJS8_EEE:
  563|  13.8k|    {
  564|  13.8k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEE15make_data_arrayIJS8_EEENS4_5arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  13.8k|    {
  574|  13.8k|        return {
  575|  13.8k|            detail::make_arg<base::is_packed, Context,
  576|  13.8k|                             detail::mapped_type_constant<
  577|  13.8k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  13.8k|                args)...};
  579|  13.8k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE20ENSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEvEENS1_9arg_valueERT2_:
  414|  13.8k|{
  415|  13.8k|    return make_value<Context>(value);
  416|  13.8k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDaRT0_:
  371|  13.8k|{
  372|  13.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  13.8k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  13.8k|                                  needs_context_tag>) {
  376|  13.8k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  13.8k|    }
  378|  13.8k|    else {
  379|  13.8k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  13.8k|            value, context_tag<Context>{}));
  381|  13.8k|    }
  382|  13.8k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
  216|  13.8k|    {                                                                        \
  217|  13.8k|        return val;                                                          \
  218|  13.8k|    }
_ZN3scn2v26detail15make_value_implIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaOT_:
  340|  13.8k|{
  341|  13.8k|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  13.8k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  13.8k|    constexpr bool scannable_char =
  345|  13.8k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  13.8k|    static_assert(scannable_char,
  347|  13.8k|                  "Cannot scan an argument of an unsupported character "
  348|  13.8k|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  13.8k|    constexpr bool scannable_const =
  351|  13.8k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  13.8k|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  13.8k|    constexpr bool scannable_disabled =
  355|  13.8k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  13.8k|    static_assert(scannable_disabled,
  357|  13.8k|                  "Cannot scan an argument that has been disabled by "
  358|  13.8k|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  13.8k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  13.8k|    static_assert(
  362|  13.8k|        scannable,
  363|  13.8k|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  13.8k|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  13.8k|    return arg_value{arg};
  367|  13.8k|}
_ZN3scn2v26detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
  159|  13.8k|    {
  160|  13.8k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  13.8k|    {
  647|  13.8k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEE4argsEv:
  553|    808|    {
  554|    808|        return m_args;
  555|    808|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
  681|  72.7k|    {
  682|  72.7k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  72.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 72.7k]
  |  |  ------------------
  ------------------
  683|      0|            return max_size();
  684|      0|        }
  685|       |
  686|  72.7k|        return static_cast<std::size_t>(m_desc &
  687|  72.7k|                                        ((1 << detail::packed_arg_bits) - 1));
  688|  72.7k|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
  701|   142k|    {
  702|   142k|        return (m_desc & detail::is_unpacked_bit) == 0;
  703|   142k|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
  654|  70.1k|    {
  655|  70.1k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  70.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 70.1k]
  |  |  ------------------
  ------------------
  656|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  657|      0|                return m_args[id];
  658|      0|            }
  659|      0|            return {};
  660|      0|        }
  661|       |
  662|  70.1k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  153|  70.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 72, False: 70.1k]
  |  |  ------------------
  ------------------
  663|     72|            return {};
  664|     72|        }
  665|       |
  666|  70.1k|        const auto t = type(id);
  667|  70.1k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  153|  70.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.77k, False: 68.3k]
  |  |  ------------------
  ------------------
  668|  1.77k|            return {};
  669|  1.77k|        }
  670|       |
  671|  68.3k|        basic_scan_arg<Context> arg;
  672|  68.3k|        arg.m_type = t;
  673|  68.3k|        arg.m_value = m_values[id];
  674|  68.3k|        return arg;
  675|  70.1k|    }
_ZN3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
  476|  70.1k|    constexpr basic_scan_arg() = default;
_ZN3scn2v26detail9arg_valueC2Ev:
  155|   123k|        arg_value() = default;
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
  706|  70.1k|    {
  707|       |        // First (0th) index is size, types start after that
  708|  70.1k|        const auto shift = (index + 1) * detail::packed_arg_bits;
  709|  70.1k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
  710|  70.1k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
  711|  70.1k|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
  482|   135k|    {
  483|   135k|        return m_type != detail::arg_type::none_type;
  484|   135k|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
  487|   119k|    {
  488|   119k|        return m_type;
  489|   119k|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
  681|   124k|    {
  682|   124k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 124k]
  |  |  ------------------
  ------------------
  683|      0|            return max_size();
  684|      0|        }
  685|       |
  686|   124k|        return static_cast<std::size_t>(m_desc &
  687|   124k|                                        ((1 << detail::packed_arg_bits) - 1));
  688|   124k|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
  701|   178k|    {
  702|   178k|        return (m_desc & detail::is_unpacked_bit) == 0;
  703|   178k|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
  654|  53.6k|    {
  655|  53.6k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  53.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 53.6k]
  |  |  ------------------
  ------------------
  656|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  657|      0|                return m_args[id];
  658|      0|            }
  659|      0|            return {};
  660|      0|        }
  661|       |
  662|  53.6k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  153|  53.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 68, False: 53.5k]
  |  |  ------------------
  ------------------
  663|     68|            return {};
  664|     68|        }
  665|       |
  666|  53.5k|        const auto t = type(id);
  667|  53.5k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  153|  53.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.50k, False: 52.0k]
  |  |  ------------------
  ------------------
  668|  1.50k|            return {};
  669|  1.50k|        }
  670|       |
  671|  52.0k|        basic_scan_arg<Context> arg;
  672|  52.0k|        arg.m_type = t;
  673|  52.0k|        arg.m_value = m_values[id];
  674|  52.0k|        return arg;
  675|  53.5k|    }
_ZN3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
  476|  53.6k|    constexpr basic_scan_arg() = default;
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
  706|  53.5k|    {
  707|       |        // First (0th) index is size, types start after that
  708|  53.5k|        const auto shift = (index + 1) * detail::packed_arg_bits;
  709|  53.5k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
  710|  53.5k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
  711|  53.5k|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
  482|   103k|    {
  483|   103k|        return m_type != detail::arg_type::none_type;
  484|   103k|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
  487|  90.9k|    {
  488|  90.9k|        return m_type;
  489|  90.9k|    }

_ZN3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
   59|  72.7k|    {
   60|  72.7k|    }
_ZNK3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
   42|  70.1k|    {
   43|  70.1k|        return m_args.get(id);
   44|  70.1k|    }
_ZNK3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE4argsEv:
   47|  10.3k|    {
   48|  10.3k|        return m_args;
   49|  10.3k|    }
_ZNK3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
   52|  66.2k|    {
   53|  66.2k|        return m_locale;
   54|  66.2k|    }
_ZN3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
   59|   124k|    {
   60|   124k|    }
_ZNK3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
   42|  53.6k|    {
   43|  53.6k|        return m_args.get(id);
   44|  53.6k|    }
_ZNK3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE4argsEv:
   47|  8.15k|    {
   48|  8.15k|        return m_args;
   49|  8.15k|    }
_ZNK3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
   52|  50.2k|    {
   53|  50.2k|        return m_locale;
   54|  50.2k|    }

_ZN3scn2v210scan_errorC2ENS1_4codeEPKc:
   68|   240k|    {
   69|   240k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  227|   240k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   70|   240k|    }
_ZNK3scn2v210scan_errorcvbEv:
   74|  6.74M|    {
   75|  6.74M|        return m_code == good;
   76|  6.74M|    }
_ZNK3scn2v210scan_error4codeEv:
   85|  97.7k|    {
   86|  97.7k|        return m_code;
   87|  97.7k|    }
_ZN3scn2v2eqENS0_10scan_errorENS1_4codeE:
  110|  97.7k|{
  111|  97.7k|    return a.code() == b;
  112|  97.7k|}
_ZN3scn2v2neENS0_10scan_errorENS1_4codeE:
  115|  97.7k|{
  116|  97.7k|    return !(a == b);
  117|  97.7k|}
_ZN3scn2v210scan_errorC2Ev:
   62|   365k|    constexpr scan_error() SCN_NOEXCEPT = default;

_ZNK3scn2v224basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEcvS6_Ev:
  674|  8.08k|    {
  675|  8.08k|        return m_str;
  676|  8.08k|    }
_ZN3scn2v214runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  384|  72.7k|{
  385|  72.7k|    return s;
  386|  72.7k|}
_ZN3scn2v26detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
  361|  72.7k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v224basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  8.08k|    {
  671|  8.08k|    }
_ZNK3scn2v224basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEcvS6_Ev:
  674|  8.08k|    {
  675|  8.08k|        return m_str;
  676|  8.08k|    }
_ZN3scn2v224basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  8.08k|    {
  671|  8.08k|    }
_ZNK3scn2v224basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEcvS6_Ev:
  674|  8.08k|    {
  675|  8.08k|        return m_str;
  676|  8.08k|    }
_ZN3scn2v224basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  8.08k|    {
  671|  8.08k|    }
_ZNK3scn2v224basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEcvS6_Ev:
  674|  8.08k|    {
  675|  8.08k|        return m_str;
  676|  8.08k|    }
_ZN3scn2v224basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  8.08k|    {
  671|  8.08k|    }
_ZNK3scn2v224basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEcvS6_Ev:
  674|  8.08k|    {
  675|  8.08k|        return m_str;
  676|  8.08k|    }
_ZN3scn2v224basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  8.08k|    {
  671|  8.08k|    }
_ZNK3scn2v224basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEcvS6_Ev:
  674|  8.08k|    {
  675|  8.08k|        return m_str;
  676|  8.08k|    }
_ZN3scn2v224basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  8.08k|    {
  671|  8.08k|    }
_ZNK3scn2v224basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEcvS6_Ev:
  674|  8.08k|    {
  675|  8.08k|        return m_str;
  676|  8.08k|    }
_ZN3scn2v224basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  8.08k|    {
  671|  8.08k|    }
_ZNK3scn2v224basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEcvS6_Ev:
  674|  8.08k|    {
  675|  8.08k|        return m_str;
  676|  8.08k|    }
_ZN3scn2v224basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  8.08k|    {
  671|  8.08k|    }
_ZNK3scn2v224basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEcvS6_Ev:
  674|  8.08k|    {
  675|  8.08k|        return m_str;
  676|  8.08k|    }
_ZN3scn2v224basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  8.08k|    {
  671|  8.08k|    }
_ZNK3scn2v224basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEcvS6_Ev:
  674|  13.8k|    {
  675|  13.8k|        return m_str;
  676|  13.8k|    }
_ZN3scn2v214runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
  389|   124k|{
  390|   124k|    return s;
  391|   124k|}
_ZN3scn2v26detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
  361|   124k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v224basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  13.8k|    {
  671|  13.8k|    }
_ZNK3scn2v224basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEcvS6_Ev:
  674|  13.8k|    {
  675|  13.8k|        return m_str;
  676|  13.8k|    }
_ZN3scn2v224basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  13.8k|    {
  671|  13.8k|    }
_ZNK3scn2v224basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEcvS6_Ev:
  674|  13.8k|    {
  675|  13.8k|        return m_str;
  676|  13.8k|    }
_ZN3scn2v224basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  13.8k|    {
  671|  13.8k|    }
_ZNK3scn2v224basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEcvS6_Ev:
  674|  13.8k|    {
  675|  13.8k|        return m_str;
  676|  13.8k|    }
_ZN3scn2v224basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  13.8k|    {
  671|  13.8k|    }
_ZNK3scn2v224basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEcvS6_Ev:
  674|  13.8k|    {
  675|  13.8k|        return m_str;
  676|  13.8k|    }
_ZN3scn2v224basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  13.8k|    {
  671|  13.8k|    }
_ZNK3scn2v224basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEcvS6_Ev:
  674|  13.8k|    {
  675|  13.8k|        return m_str;
  676|  13.8k|    }
_ZN3scn2v224basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  13.8k|    {
  671|  13.8k|    }
_ZNK3scn2v224basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEcvS6_Ev:
  674|  13.8k|    {
  675|  13.8k|        return m_str;
  676|  13.8k|    }
_ZN3scn2v224basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  13.8k|    {
  671|  13.8k|    }
_ZNK3scn2v224basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEcvS6_Ev:
  674|  13.8k|    {
  675|  13.8k|        return m_str;
  676|  13.8k|    }
_ZN3scn2v224basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  13.8k|    {
  671|  13.8k|    }
_ZNK3scn2v224basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEcvS6_Ev:
  674|  13.8k|    {
  675|  13.8k|        return m_str;
  676|  13.8k|    }
_ZN3scn2v224basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  13.8k|    {
  671|  13.8k|    }

_ZNK3scn2v26detail12format_specs8get_baseEi:
  195|  5.06k|    {
  196|  5.06k|        SCN_GCC_COMPAT_PUSH
  197|  5.06k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
  198|  5.06k|        switch (type) {
  199|  1.60k|            case presentation_type::none:
  ------------------
  |  Branch (199:13): [True: 1.60k, False: 3.46k]
  ------------------
  200|  1.83k|            case presentation_type::int_generic:
  ------------------
  |  Branch (200:13): [True: 228, False: 4.84k]
  ------------------
  201|  1.83k|                return default_base;
  202|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (202:13): [True: 0, False: 5.06k]
  ------------------
  203|      0|                return arbitrary_base;
  204|       |
  205|    174|            case presentation_type::int_binary:
  ------------------
  |  Branch (205:13): [True: 174, False: 4.89k]
  ------------------
  206|    174|                return 2;
  207|     80|            case presentation_type::int_octal:
  ------------------
  |  Branch (207:13): [True: 80, False: 4.98k]
  ------------------
  208|     80|                return 8;
  209|     68|            case presentation_type::int_decimal:
  ------------------
  |  Branch (209:13): [True: 68, False: 5.00k]
  ------------------
  210|    106|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (210:13): [True: 38, False: 5.03k]
  ------------------
  211|    106|                return 10;
  212|  2.87k|            case presentation_type::int_hex:
  ------------------
  |  Branch (212:13): [True: 2.87k, False: 2.19k]
  ------------------
  213|  2.87k|                return 16;
  214|       |
  215|      0|            default:
  ------------------
  |  Branch (215:13): [True: 0, False: 5.06k]
  ------------------
  216|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  217|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  218|  5.06k|        }
  219|  5.06k|        SCN_GCC_COMPAT_POP
  220|  5.06k|    }
_ZN3scn2v26detail12specs_setterC2ERNS1_12format_specsE:
  232|   105k|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v26detail12specs_setter8on_alignENS1_10align_typeE:
  235|  18.7k|    {
  236|  18.7k|        m_specs.align = align;
  237|  18.7k|    }
_ZN3scn2v26detail12specs_setter12on_localizedEv:
  244|    632|    {
  245|    632|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  126|    632|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (245:23): [Folded - Ignored]
  ------------------
  246|    632|            m_specs.localized = true;
  247|    632|        }
  248|      0|        else {
  249|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
  250|      0|        }
  251|    632|    }
_ZN3scn2v26detail12specs_setter8on_widthEi:
  254|  12.5k|    {
  255|  12.5k|        m_specs.width = width;
  256|  12.5k|    }
_ZN3scn2v26detail12specs_setter7on_typeENS1_17presentation_typeE:
  259|   113k|    {
  260|   113k|        m_specs.type = type;
  261|   113k|    }
_ZN3scn2v26detail12specs_setter17on_charset_singleEDi:
  264|  4.49M|    {
  265|  4.49M|        const auto cp_value = static_cast<unsigned>(cp);
  266|  4.49M|        if (SCN_LIKELY(cp_value <= 127)) {
  ------------------
  |  |  152|  4.49M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 4.06M, False: 432k]
  |  |  ------------------
  ------------------
  267|  4.06M|            m_specs.charset_literals[cp_value / 8] |=
  268|  4.06M|                static_cast<unsigned char>(1ul << (cp_value % 8));
  269|  4.06M|        }
  270|   432k|        else {
  271|   432k|            m_specs.charset_has_nonascii = true;
  272|   432k|        }
  273|  4.49M|    }
_ZN3scn2v26detail12specs_setter16on_charset_rangeEDiDi:
  276|  25.6k|    {
  277|  25.6k|        const auto begin_value = static_cast<unsigned>(begin);
  278|  25.6k|        const auto end_value = static_cast<unsigned>(end);
  279|  25.6k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  |  242|  25.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  25.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  280|       |
  281|  25.6k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  |  152|  25.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 21.1k, False: 4.46k]
  |  |  ------------------
  ------------------
  282|       |            // No need to bit-twiddle with a mask, because with the
  283|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
  284|  21.1k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  |  172|  21.1k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
  285|  1.23M|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (285:40): [True: 1.21M, False: 21.1k]
  ------------------
  286|  1.21M|                m_specs.charset_literals[v / 8] |=
  287|  1.21M|                    static_cast<unsigned char>(1ul << (v % 8));
  288|  1.21M|            }
  289|  21.1k|        }
  290|  4.46k|        else {
  291|  4.46k|            m_specs.charset_has_nonascii = true;
  292|  4.46k|        }
  293|  25.6k|    }
_ZN3scn2v26detail12specs_setter19on_charset_invertedEv:
  296|  7.56k|    {
  297|  7.56k|        m_specs.charset_is_inverted = true;
  298|  7.56k|    }
_ZN3scn2v26detail12specs_setter14on_regex_flagsENS1_11regex_flagsE:
  315|  60.8k|    {
  316|  60.8k|        m_specs.regexp_flags = flags;
  317|  60.8k|    }
_ZN3scn2v26detail12specs_setter8on_errorEPKc:
  321|  13.3k|    {
  322|  13.3k|        SCN_UNLIKELY_ATTR
  323|  13.3k|        m_error = scan_error{scan_error::invalid_format_string, msg};
  324|  13.3k|    }
_ZNK3scn2v26detail12specs_settercvbEv:
  332|  4.64M|    {
  333|  4.64M|        return static_cast<bool>(m_error);
  334|  4.64M|    }
_ZN3scn2v26detailanENS1_11regex_flagsES2_:
   73|  89.6k|{
   74|  89.6k|    return static_cast<regex_flags>(static_cast<unsigned>(a) &
   75|  89.6k|                                    static_cast<unsigned>(b));
   76|  89.6k|}
_ZN3scn2v26detailorENS1_11regex_flagsES2_:
   78|  9.76k|{
   79|  9.76k|    return static_cast<regex_flags>(static_cast<unsigned>(a) |
   80|  9.76k|                                    static_cast<unsigned>(b));
   81|  9.76k|}
_ZN3scn2v26detailoRERNS1_11regex_flagsES2_:
   93|  9.76k|{
   94|  9.76k|    return a = a | b;
   95|  9.76k|}
_ZN3scn2v26detail25get_category_for_arg_typeENS1_8arg_typeE:
  986|  1.53k|{
  987|  1.53k|    switch (type) {
  988|    108|        case arg_type::none_type:
  ------------------
  |  Branch (988:9): [True: 108, False: 1.42k]
  ------------------
  989|    108|            return arg_type_category::none;
  990|       |
  991|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (991:9): [True: 0, False: 1.53k]
  ------------------
  992|      0|        case arg_type::short_type:
  ------------------
  |  Branch (992:9): [True: 0, False: 1.53k]
  ------------------
  993|    158|        case arg_type::int_type:
  ------------------
  |  Branch (993:9): [True: 158, False: 1.37k]
  ------------------
  994|    158|        case arg_type::long_type:
  ------------------
  |  Branch (994:9): [True: 0, False: 1.53k]
  ------------------
  995|    158|        case arg_type::llong_type:
  ------------------
  |  Branch (995:9): [True: 0, False: 1.53k]
  ------------------
  996|    158|            return arg_type_category::integer;
  997|       |
  998|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (998:9): [True: 0, False: 1.53k]
  ------------------
  999|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (999:9): [True: 0, False: 1.53k]
  ------------------
 1000|    158|        case arg_type::uint_type:
  ------------------
  |  Branch (1000:9): [True: 158, False: 1.37k]
  ------------------
 1001|    158|        case arg_type::ulong_type:
  ------------------
  |  Branch (1001:9): [True: 0, False: 1.53k]
  ------------------
 1002|    158|        case arg_type::ullong_type:
  ------------------
  |  Branch (1002:9): [True: 0, False: 1.53k]
  ------------------
 1003|    158|            return arg_type_category::unsigned_integer;
 1004|       |
 1005|    158|        case arg_type::pointer_type:
  ------------------
  |  Branch (1005:9): [True: 158, False: 1.37k]
  ------------------
 1006|    158|            return arg_type_category::pointer;
 1007|    158|        case arg_type::bool_type:
  ------------------
  |  Branch (1007:9): [True: 158, False: 1.37k]
  ------------------
 1008|    158|            return arg_type_category::boolean;
 1009|     96|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (1009:9): [True: 96, False: 1.43k]
  ------------------
 1010|    158|        case arg_type::wide_character_type:
  ------------------
  |  Branch (1010:9): [True: 62, False: 1.46k]
  ------------------
 1011|    158|        case arg_type::code_point_type:
  ------------------
  |  Branch (1011:9): [True: 0, False: 1.53k]
  ------------------
 1012|    158|            return arg_type_category::character;
 1013|       |
 1014|      0|        case arg_type::float_type:
  ------------------
  |  Branch (1014:9): [True: 0, False: 1.53k]
  ------------------
 1015|    158|        case arg_type::double_type:
  ------------------
  |  Branch (1015:9): [True: 158, False: 1.37k]
  ------------------
 1016|    158|        case arg_type::ldouble_type:
  ------------------
  |  Branch (1016:9): [True: 0, False: 1.53k]
  ------------------
 1017|    158|            return arg_type_category::floating;
 1018|       |
 1019|     96|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (1019:9): [True: 96, False: 1.43k]
  ------------------
 1020|    254|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (1020:9): [True: 158, False: 1.37k]
  ------------------
 1021|    316|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (1021:9): [True: 62, False: 1.46k]
  ------------------
 1022|    474|        case arg_type::wide_string_type:
  ------------------
  |  Branch (1022:9): [True: 158, False: 1.37k]
  ------------------
 1023|    474|            return arg_type_category::string;
 1024|       |
 1025|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (1025:9): [True: 0, False: 1.53k]
  ------------------
 1026|      0|            return arg_type_category::custom;
 1027|       |
 1028|      0|            SCN_CLANG_PUSH
 1029|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 1030|      0|        default:
  ------------------
  |  Branch (1030:9): [True: 0, False: 1.53k]
  ------------------
 1031|      0|            SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1032|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1033|  1.53k|            SCN_CLANG_POP
 1034|  1.53k|    }
 1035|       |
 1036|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1037|  1.53k|}
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|  72.7k|{
  968|  72.7k|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|  72.7k|    handler.check_args_exhausted();
  970|  72.7k|    return handler.get_error();
  971|  72.7k|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|  72.7k|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|  72.7k|    auto begin = format.data();
  937|  72.7k|    auto it = begin;
  938|  72.7k|    const auto end = format.data() + format.size();
  939|       |
  940|   343k|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 336k, False: 7.31k]
  ------------------
  941|   336k|        const auto ch = *it++;
  942|   336k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 86.2k, False: 250k]
  ------------------
  943|  86.2k|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|  86.2k|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|  86.2k|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 64.7k, False: 21.4k]
  ------------------
  947|  64.7k|                return;
  948|  64.7k|            }
  949|  86.2k|        }
  950|   250k|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 2.50k, False: 247k]
  ------------------
  951|  2.50k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|  4.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 698, False: 1.80k]
  |  |  |  Branch (153:45): [True: 88, False: 2.41k]
  |  |  |  Branch (153:45): [True: 610, False: 1.80k]
  |  |  ------------------
  ------------------
  952|    698|                handler.on_error("Unmatched '}' in format string");
  953|    698|                return;
  954|    698|            }
  955|       |
  956|  1.80k|            handler.on_literal_text(begin, it);
  957|  1.80k|            begin = ++it;
  958|  1.80k|        }
  959|   336k|    }
  960|       |
  961|  7.31k|    handler.on_literal_text(begin, end);
  962|  7.31k|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
  865|  86.2k|{
  866|  86.2k|    struct id_adapter {
  867|  86.2k|        constexpr void operator()()
  868|  86.2k|        {
  869|  86.2k|            arg_id = handler.on_arg_id();
  870|  86.2k|        }
  871|  86.2k|        constexpr void operator()(std::size_t id)
  872|  86.2k|        {
  873|  86.2k|            arg_id = handler.on_arg_id(id);
  874|  86.2k|        }
  875|       |
  876|  86.2k|        constexpr void on_error(const char* msg)
  877|  86.2k|        {
  878|  86.2k|            SCN_UNLIKELY_ATTR
  879|  86.2k|            handler.on_error(msg);
  880|  86.2k|        }
  881|       |
  882|  86.2k|        Handler& handler;
  883|  86.2k|        std::size_t arg_id;
  884|  86.2k|    };
  885|       |
  886|  86.2k|    ++begin;
  887|  86.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  86.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 156, False: 86.0k]
  |  |  ------------------
  ------------------
  888|    156|        handler.on_error("Unexpected end of replacement field");
  889|    156|        return begin;
  890|    156|    }
  891|       |
  892|  86.0k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 10.1k, False: 75.9k]
  ------------------
  893|  10.1k|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|  10.1k|    }
  895|  75.9k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 13.7k, False: 62.2k]
  ------------------
  896|  13.7k|        handler.on_literal_text(begin, begin + 1);
  897|  13.7k|    }
  898|  62.2k|    else {
  899|  62.2k|        auto adapter = id_adapter{handler, 0};
  900|  62.2k|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|  62.2k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  62.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 122, False: 62.0k]
  |  |  ------------------
  ------------------
  903|    122|            handler.on_error("Missing '}' in format string");
  904|    122|            return begin;
  905|    122|        }
  906|       |
  907|  62.0k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 216, False: 61.8k]
  ------------------
  908|    216|            handler.on_replacement_field(adapter.arg_id, begin);
  909|    216|        }
  910|  61.8k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 59.8k, False: 1.98k]
  ------------------
  911|  59.8k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|  59.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 74, False: 59.8k]
  |  |  ------------------
  ------------------
  912|     74|                handler.on_error("Unexpected end of replacement field");
  913|     74|                return begin;
  914|     74|            }
  915|  59.8k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|  59.8k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|   119k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.67k, False: 56.1k]
  |  |  |  Branch (153:45): [True: 0, False: 59.8k]
  |  |  |  Branch (153:45): [True: 3.67k, False: 56.1k]
  |  |  ------------------
  ------------------
  917|  3.67k|                handler.on_error("Unknown format specifier");
  918|  3.67k|                return begin;
  919|  3.67k|            }
  920|  59.8k|        }
  921|  1.98k|        else {
  922|  1.98k|            SCN_UNLIKELY_ATTR
  923|  1.98k|            handler.on_error("Missing '}' in format string");
  924|  1.98k|            return begin;
  925|  1.98k|        }
  926|  62.0k|    }
  927|  80.1k|    return begin + 1;
  928|  86.0k|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|  62.2k|{
  400|  62.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  62.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  62.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|  62.2k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 62.2k, False: 0]
  |  Branch (401:26): [True: 7.74k, False: 54.4k]
  ------------------
  402|  7.74k|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|  7.74k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|  7.74k|    }
  404|       |
  405|  54.4k|    handler();
  406|  54.4k|    return begin;
  407|  62.2k|}
vscan.cpp:_ZN3scn2v26detail15do_parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  369|  7.74k|{
  370|  7.74k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  7.74k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  7.74k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  371|       |
  372|      0|    CharT c = *begin;
  373|  7.74k|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (373:9): [True: 1.61k, False: 6.12k]
  |  Branch (373:27): [True: 186, False: 5.94k]
  ------------------
  374|  1.80k|        handler.on_error("Invalid argument ID");
  375|  1.80k|        return begin;
  376|  1.80k|    }
  377|       |
  378|  5.94k|    int idx = 0;
  379|  5.94k|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (379:9): [True: 474, False: 5.46k]
  ------------------
  380|    474|        idx = parse_simple_int(begin, end);
  381|    474|    }
  382|  5.46k|    else {
  383|  5.46k|        ++begin;
  384|  5.46k|    }
  385|       |
  386|  5.94k|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (386:9): [True: 122, False: 5.82k]
  |  Branch (386:26): [True: 5.60k, False: 216]
  |  Branch (386:50): [True: 178, False: 5.42k]
  ------------------
  387|    300|        handler.on_error("Invalid argument ID");
  388|    300|        return begin;
  389|    300|    }
  390|  5.64k|    handler(idx);
  391|       |
  392|  5.64k|    return begin;
  393|  5.94k|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
  877|  2.10k|        {
  878|  2.10k|            SCN_UNLIKELY_ATTR
  879|  2.10k|            handler.on_error(msg);
  880|  2.10k|        }
_ZN3scn2v26detail16parse_simple_intIcEEiRPKT_S5_:
  348|  7.48k|{
  349|  7.48k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  7.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  7.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  350|  7.48k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  242|  7.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  7.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  351|       |
  352|      0|    unsigned long long value = 0;
  353|  24.5k|    do {
  354|  24.5k|        value *= 10;
  355|  24.5k|        value += static_cast<unsigned long long>(*begin - '0');
  356|  24.5k|        if (value >
  ------------------
  |  Branch (356:13): [True: 72, False: 24.5k]
  ------------------
  357|  24.5k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
  358|     72|            return -1;
  359|     72|        }
  360|  24.5k|        ++begin;
  361|  24.5k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (361:14): [True: 24.3k, False: 180]
  |  Branch (361:30): [True: 23.7k, False: 602]
  |  Branch (361:47): [True: 17.1k, False: 6.62k]
  ------------------
  362|  7.40k|    return static_cast<int>(value);
  363|  7.48k|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
  872|  5.64k|        {
  873|  5.64k|            arg_id = handler.on_arg_id(id);
  874|  5.64k|        }
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|  54.4k|        {
  869|  54.4k|            arg_id = handler.on_arg_id();
  870|  54.4k|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 1045|  59.8k|    {
 1046|  59.8k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|  59.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  59.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|  59.8k|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  794|  59.8k|{
  795|  59.8k|    auto do_presentation = [&]() -> const CharT* {
  796|  59.8k|        if (*begin == CharT{'['}) {
  797|  59.8k|            auto set = parse_presentation_set(begin, end, handler);
  798|  59.8k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|  59.8k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|  59.8k|                return begin;
  803|  59.8k|            }
  804|  59.8k|            handler.on_character_set_string(set);
  805|  59.8k|            return begin;
  806|  59.8k|        }
  807|  59.8k|        if (*begin == CharT{'/'}) {
  808|  59.8k|            return parse_presentation_regex(begin, end, handler);
  809|  59.8k|        }
  810|  59.8k|        presentation_type type = parse_presentation_type(*begin++);
  811|  59.8k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|  59.8k|            handler.on_error("Invalid type specifier in format string");
  813|  59.8k|            return begin;
  814|  59.8k|        }
  815|  59.8k|        handler.on_type(type);
  816|  59.8k|        return begin;
  817|  59.8k|    };
  818|       |
  819|  59.8k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 58.7k, False: 1.10k]
  |  Branch (819:28): [True: 3.83k, False: 54.8k]
  ------------------
  820|  59.8k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 1.89k, False: 1.94k]
  |  Branch (820:36): [True: 1.78k, False: 108]
  ------------------
  821|  1.78k|        return do_presentation();
  822|  1.78k|    }
  823|       |
  824|  58.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  58.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 58.0k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|  58.0k|    begin = parse_align(begin, end, handler);
  830|  58.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  58.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 132, False: 57.8k]
  |  |  ------------------
  ------------------
  831|    132|        handler.on_error("Unexpected end of format string");
  832|    132|        return begin;
  833|    132|    }
  834|       |
  835|  57.8k|    begin = parse_width(begin, end, handler);
  836|  57.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  57.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 92, False: 57.8k]
  |  |  ------------------
  ------------------
  837|     92|        handler.on_error("Unexpected end of format string");
  838|     92|        return begin;
  839|     92|    }
  840|       |
  841|  57.8k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 920, False: 56.8k]
  ------------------
  842|    920|        handler.on_localized();
  843|    920|        ++begin;
  844|    920|    }
  845|  57.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  57.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 72, False: 57.7k]
  |  |  ------------------
  ------------------
  846|     72|        handler.on_error("Unexpected end of format string");
  847|     72|        return begin;
  848|     72|    }
  849|       |
  850|  57.7k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 57.7k, False: 0]
  |  Branch (850:25): [True: 53.7k, False: 4.03k]
  ------------------
  851|  53.7k|        do_presentation();
  852|  53.7k|    }
  853|  57.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  57.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.17k, False: 55.5k]
  |  |  ------------------
  ------------------
  854|  2.17k|        handler.on_error("Unexpected end of format string");
  855|  2.17k|        return begin;
  856|  2.17k|    }
  857|       |
  858|  55.5k|    return begin;
  859|  57.7k|}
_ZN3scn2v26detail15is_ascii_letterIcEEbT_:
  463|  3.83k|{
  464|  3.83k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (464:13): [True: 2.07k, False: 1.76k]
  |  Branch (464:33): [True: 1.69k, False: 386]
  ------------------
  465|  3.83k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (465:13): [True: 604, False: 1.54k]
  |  Branch (465:33): [True: 198, False: 406]
  ------------------
  466|  3.83k|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
  795|  55.4k|    auto do_presentation = [&]() -> const CharT* {
  796|  55.4k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 16.3k, False: 39.1k]
  ------------------
  797|  16.3k|            auto set = parse_presentation_set(begin, end, handler);
  798|  16.3k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|  16.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.33k, False: 14.9k]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|  1.33k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|  1.33k|                return begin;
  803|  1.33k|            }
  804|  14.9k|            handler.on_character_set_string(set);
  805|  14.9k|            return begin;
  806|  16.3k|        }
  807|  39.1k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 34.1k, False: 5.01k]
  ------------------
  808|  34.1k|            return parse_presentation_regex(begin, end, handler);
  809|  34.1k|        }
  810|  5.01k|        presentation_type type = parse_presentation_type(*begin++);
  811|  5.01k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|  5.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 412, False: 4.60k]
  |  |  ------------------
  ------------------
  812|    412|            handler.on_error("Invalid type specifier in format string");
  813|    412|            return begin;
  814|    412|        }
  815|  4.60k|        handler.on_type(type);
  816|  4.60k|        return begin;
  817|  5.01k|    };
vscan.cpp:_ZN3scn2v26detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
  633|  16.3k|{
  634|  16.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  16.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  16.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  635|  16.3k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  242|  16.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  16.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  636|       |
  637|      0|    auto start = begin;
  638|  16.3k|    ++begin;
  639|       |
  640|  16.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  16.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 44, False: 16.2k]
  |  |  ------------------
  ------------------
  641|       |        // clang-format off
  642|     44|        handler.on_error("Unexpected end of [character set] specifier in format string");
  643|       |        // clang-format on
  644|     44|        return {};
  645|     44|    }
  646|  16.2k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (646:9): [True: 5.36k, False: 10.8k]
  ------------------
  647|  5.36k|        handler.on_charset_inverted();
  648|  5.36k|        ++begin;
  649|  5.36k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  5.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 36, False: 5.32k]
  |  |  ------------------
  ------------------
  650|       |            // clang-format off
  651|     36|            handler.on_error("Unexpected end of [character set] specifier in format string");
  652|       |            // clang-format on
  653|     36|            return {};
  654|     36|        }
  655|  5.32k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (655:13): [True: 72, False: 5.25k]
  ------------------
  656|     72|            handler.on_charset_single(char32_t{']'});
  657|     72|            ++begin;
  658|     72|        }
  659|  5.32k|    }
  660|  10.8k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (660:14): [True: 42, False: 10.8k]
  ------------------
  661|     42|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
  662|     42|    }
  663|       |
  664|  2.43M|    while (begin != end) {
  ------------------
  |  Branch (664:12): [True: 2.43M, False: 676]
  ------------------
  665|  2.43M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  2.43M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 538, False: 2.42M]
  |  |  ------------------
  ------------------
  666|    538|            break;
  667|    538|        }
  668|       |
  669|  2.42M|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (669:13): [True: 14.9k, False: 2.41M]
  ------------------
  670|  14.9k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
  671|  14.9k|        }
  672|       |
  673|  2.41M|        parse_presentation_set_literal(begin, end, handler);
  674|  2.41M|    }
  675|       |
  676|  1.21k|    SCN_UNLIKELY_ATTR
  677|  1.21k|    handler.on_error("Invalid [character set] specifier in format string");
  678|  1.21k|    return {};
  679|  16.1k|}
vscan.cpp:_ZN3scn2v26detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEvRPKT_SE_OT0_:
  597|  2.41M|{
  598|  2.41M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  2.41M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.41M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  599|       |
  600|      0|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
  601|  2.41M|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  153|  2.41M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 376, False: 2.41M]
  |  |  ------------------
  ------------------
  602|    376|        return;
  603|    376|    }
  604|       |
  605|  2.41M|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (605:9): [True: 2.41M, False: 412]
  |  Branch (605:25): [True: 13.9k, False: 2.40M]
  |  Branch (605:49): [True: 13.8k, False: 36]
  ------------------
  606|  2.41M|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (606:9): [True: 13.7k, False: 144]
  ------------------
  607|  13.7k|        ++begin;
  608|       |
  609|  13.7k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
  610|  13.7k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  153|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 70, False: 13.6k]
  |  |  ------------------
  ------------------
  611|     70|            return;
  612|     70|        }
  613|       |
  614|  13.6k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  153|  13.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 60, False: 13.6k]
  |  |  ------------------
  ------------------
  615|       |            // clang-format off
  616|     60|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
  617|       |            // clang-format on
  618|     60|            return;
  619|     60|        }
  620|       |
  621|  13.6k|        handler.on_charset_range(cp_first, cp_second + 1);
  622|  13.6k|        return;
  623|  13.6k|    }
  624|       |
  625|  2.40M|    handler.on_charset_single(cp_first);
  626|  2.40M|}
vscan.cpp:_ZN3scn2v26detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEDiRPKT_SE_OT0_:
  573|  2.42M|{
  574|  2.42M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  2.42M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.42M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  575|       |
  576|      0|    auto len = utf_code_point_length_by_starting_code_unit(*begin);
  577|  2.42M|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  153|  4.85M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 156, False: 2.42M]
  |  |  |  Branch (153:45): [True: 130, False: 2.42M]
  |  |  |  Branch (153:45): [True: 26, False: 2.42M]
  |  |  ------------------
  ------------------
  578|    156|        handler.on_error("Invalid encoding in format string");
  579|    156|        return invalid_code_point;
  580|    156|    }
  581|       |
  582|  2.42M|    const auto cp = decode_utf_code_point_exhaustive(
  583|  2.42M|        std::basic_string_view<CharT>{begin, len});
  584|  2.42M|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  153|  2.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 290, False: 2.42M]
  |  |  ------------------
  ------------------
  585|    290|        handler.on_error("Invalid encoding in format string");
  586|    290|        return invalid_code_point;
  587|    290|    }
  588|       |
  589|  2.42M|    begin += len;
  590|  2.42M|    return cp;
  591|  2.42M|}
_ZN3scn2v26detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
  302|  14.9k|    {
  303|  14.9k|        m_specs.charset_string_data = fmt.data();
  304|  14.9k|        m_specs.charset_string_size = fmt.size();
  305|  14.9k|        on_type(presentation_type::string_set);
  306|  14.9k|    }
vscan.cpp:_ZN3scn2v26detail24parse_presentation_regexIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_RSE_SE_OT0_:
  685|  34.1k|{
  686|  34.1k|#if !SCN_DISABLE_REGEX
  687|  34.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  34.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  34.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  688|  34.1k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  242|  34.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  34.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  689|       |
  690|  34.1k|    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |  101|  68.3k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (690:19): [Folded - Ignored]
  |  Branch (690:19): [Folded - Ignored]
  ------------------
  691|  34.1k|                  std::is_same_v<CharT, wchar_t>) {
  ------------------
  |  Branch (691:19): [Folded - Ignored]
  ------------------
  692|  34.1k|        handler.on_error("Regex backend doesn't support wide strings as input");
  693|  34.1k|        return begin;
  694|  34.1k|    }
  695|       |
  696|  34.1k|    auto start = begin;
  697|  34.1k|    ++begin;
  698|       |
  699|  34.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  34.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 42, False: 34.1k]
  |  |  ------------------
  ------------------
  700|     42|        handler.on_error("Unexpected end of regex in format string");
  701|     42|        return begin;
  702|     42|    }
  703|       |
  704|  34.1k|    handler.on_type(presentation_type::regex);
  705|  9.87M|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (705:12): [True: 9.87M, False: 222]
  ------------------
  706|  9.87M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (706:13): [True: 44.7k, False: 9.83M]
  ------------------
  707|  44.7k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (707:17): [True: 33.9k, False: 10.8k]
  ------------------
  708|  33.9k|                break;
  709|  33.9k|            }
  710|  10.8k|            else {
  711|  10.8k|                handler.on_type(presentation_type::regex_escaped);
  712|  10.8k|            }
  713|  44.7k|        }
  714|  9.87M|    }
  715|  34.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  34.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 222, False: 33.9k]
  |  |  ------------------
  ------------------
  716|    222|        handler.on_error("Unexpected end of regex in format string");
  717|    222|        return begin;
  718|    222|    }
  719|       |
  720|  33.9k|    auto regex_end = begin;
  721|  33.9k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
  722|  33.9k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  153|  33.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 36, False: 33.8k]
  |  |  ------------------
  ------------------
  723|     36|        handler.on_error("Invalid (empty) regex in format string");
  724|     36|        return begin;
  725|     36|    }
  726|  33.8k|    handler.on_regex_pattern(regex_pattern);
  727|  33.8k|    ++begin;
  728|       |
  729|  33.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  33.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 36, False: 33.8k]
  |  |  ------------------
  ------------------
  730|     36|        handler.on_error("Unexpected end of regex in format string");
  731|     36|        return begin;
  732|     36|    }
  733|       |
  734|  33.8k|    regex_flags flags{regex_flags::none};
  735|  33.8k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
  736|  33.8k|        {{'m', regex_flags::multiline},
  737|  33.8k|         {'s', regex_flags::singleline},
  738|  33.8k|         {'i', regex_flags::nocase},
  739|  33.8k|         {'n', regex_flags::nocapture}}};
  740|  39.1k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (740:12): [True: 39.0k, False: 62]
  ------------------
  741|  39.0k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (741:13): [True: 33.6k, False: 5.45k]
  ------------------
  742|  33.6k|            break;
  743|  33.6k|        }
  744|  5.45k|        bool found_flag = false;
  745|  14.4k|        for (auto flag : flag_map) {
  ------------------
  |  Branch (745:24): [True: 14.4k, False: 96]
  ------------------
  746|  14.4k|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (746:17): [True: 9.14k, False: 5.35k]
  ------------------
  747|  9.14k|                continue;
  748|  9.14k|            }
  749|  5.35k|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (749:17): [True: 36, False: 5.32k]
  ------------------
  750|     36|                handler.on_error("Flag set multiple times in regex");
  751|     36|                return begin;
  752|     36|            }
  753|  5.32k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
  754|  5.32k|            if (*begin == CharT{'s'}) {
  ------------------
  |  Branch (754:17): [True: 54, False: 5.26k]
  ------------------
  755|       |                // clang-format off
  756|     54|                handler.on_error("/s flag for regex isn't supported by regex backend");
  757|       |                // clang-format on
  758|     54|            }
  759|       |#if !SCN_HAS_STD_REGEX_MULTILINE
  760|       |            if (*begin == CharT{'m'}) {
  761|       |                // clang-format off
  762|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
  763|       |                // clang-format on
  764|       |            }
  765|       |#endif
  766|  5.32k|#endif
  767|  5.32k|            flags |= flag.second;
  768|  5.32k|            found_flag = true;
  769|  5.32k|            break;
  770|  5.35k|        }
  771|  5.41k|        if (!found_flag) {
  ------------------
  |  Branch (771:13): [True: 96, False: 5.32k]
  ------------------
  772|     96|            handler.on_error("Invalid flag in regex");
  773|     96|            return begin;
  774|     96|        }
  775|  5.41k|    }
  776|  33.7k|    handler.on_regex_flags(flags);
  777|       |
  778|  33.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  33.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 62, False: 33.6k]
  |  |  ------------------
  ------------------
  779|     62|        handler.on_error("Unexpected end of regex in format string");
  780|     62|        return begin;
  781|     62|    }
  782|       |
  783|  33.6k|    return begin;
  784|       |#else
  785|       |    handler.on_error("Regular expression support is disabled");
  786|       |    return {};
  787|       |#endif
  788|  33.7k|}
_ZN3scn2v26detail12specs_setter16on_regex_patternIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
  310|  33.8k|    {
  311|  33.8k|        m_specs.charset_string_data = pattern.data();
  312|  33.8k|        m_specs.charset_string_size = pattern.size();
  313|  33.8k|    }
_ZN3scn2v26detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
  411|  5.01k|{
  412|  5.01k|    switch (type) {
  413|    684|        case 'b':
  ------------------
  |  Branch (413:9): [True: 684, False: 4.32k]
  ------------------
  414|    738|        case 'B':
  ------------------
  |  Branch (414:9): [True: 54, False: 4.95k]
  ------------------
  415|    738|            return presentation_type::int_binary;
  416|    152|        case 'd':
  ------------------
  |  Branch (416:9): [True: 152, False: 4.86k]
  ------------------
  417|    152|            return presentation_type::int_decimal;
  418|    468|        case 'i':
  ------------------
  |  Branch (418:9): [True: 468, False: 4.54k]
  ------------------
  419|    468|            return presentation_type::int_generic;
  420|    108|        case 'u':
  ------------------
  |  Branch (420:9): [True: 108, False: 4.90k]
  ------------------
  421|    108|            return presentation_type::int_unsigned_decimal;
  422|    216|        case 'o':
  ------------------
  |  Branch (422:9): [True: 216, False: 4.79k]
  ------------------
  423|    216|            return presentation_type::int_octal;
  424|    144|        case 'x':
  ------------------
  |  Branch (424:9): [True: 144, False: 4.86k]
  ------------------
  425|    196|        case 'X':
  ------------------
  |  Branch (425:9): [True: 52, False: 4.96k]
  ------------------
  426|    196|            return presentation_type::int_hex;
  427|     44|        case 'r':
  ------------------
  |  Branch (427:9): [True: 44, False: 4.96k]
  ------------------
  428|     80|        case 'R':
  ------------------
  |  Branch (428:9): [True: 36, False: 4.97k]
  ------------------
  429|     80|            return presentation_type::int_arbitrary_base;
  430|     90|        case 'a':
  ------------------
  |  Branch (430:9): [True: 90, False: 4.92k]
  ------------------
  431|    270|        case 'A':
  ------------------
  |  Branch (431:9): [True: 180, False: 4.83k]
  ------------------
  432|    270|            return presentation_type::float_hex;
  433|     54|        case 'e':
  ------------------
  |  Branch (433:9): [True: 54, False: 4.95k]
  ------------------
  434|    108|        case 'E':
  ------------------
  |  Branch (434:9): [True: 54, False: 4.95k]
  ------------------
  435|    108|            return presentation_type::float_scientific;
  436|    306|        case 'f':
  ------------------
  |  Branch (436:9): [True: 306, False: 4.70k]
  ------------------
  437|    378|        case 'F':
  ------------------
  |  Branch (437:9): [True: 72, False: 4.94k]
  ------------------
  438|    378|            return presentation_type::float_fixed;
  439|     44|        case 'g':
  ------------------
  |  Branch (439:9): [True: 44, False: 4.96k]
  ------------------
  440|    142|        case 'G':
  ------------------
  |  Branch (440:9): [True: 98, False: 4.91k]
  ------------------
  441|    142|            return presentation_type::float_general;
  442|    612|        case 's':
  ------------------
  |  Branch (442:9): [True: 612, False: 4.40k]
  ------------------
  443|    612|            return presentation_type::string;
  444|    998|        case 'c':
  ------------------
  |  Branch (444:9): [True: 998, False: 4.01k]
  ------------------
  445|    998|            return presentation_type::character;
  446|     36|        case '?':
  ------------------
  |  Branch (446:9): [True: 36, False: 4.97k]
  ------------------
  447|     36|            return presentation_type::escaped_character;
  448|     98|        case 'p':
  ------------------
  |  Branch (448:9): [True: 98, False: 4.91k]
  ------------------
  449|     98|            return presentation_type::pointer;
  450|      0|        case '[':
  ------------------
  |  Branch (450:9): [True: 0, False: 5.01k]
  ------------------
  451|      0|        case '/':
  ------------------
  |  Branch (451:9): [True: 0, False: 5.01k]
  ------------------
  452|       |            // Should be handled by parse_presentation_set and
  453|       |            // parse_presentation_regex
  454|      0|            SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  456|    412|        default:
  ------------------
  |  Branch (456:9): [True: 412, False: 4.60k]
  ------------------
  457|    412|            return presentation_type::none;
  458|  5.01k|    }
  459|  5.01k|}
vscan.cpp:_ZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  488|  58.0k|{
  489|  58.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  58.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  58.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|  58.0k|        switch (ch) {
  493|  58.0k|            case L'<':
  494|  58.0k|                return align_type::left;
  495|  58.0k|            case L'>':
  496|  58.0k|                return align_type::right;
  497|  58.0k|            case L'^':
  498|  58.0k|                return align_type::center;
  499|  58.0k|            default:
  500|  58.0k|                return align_type::none;
  501|  58.0k|        }
  502|  58.0k|    };
  503|       |
  504|  58.0k|    auto potential_fill_len = code_point_length(begin, end);
  505|  58.0k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 42, False: 57.9k]
  |  |  |  Branch (153:45): [True: 38, False: 57.9k]
  |  |  |  Branch (153:45): [True: 4, False: 57.9k]
  |  |  ------------------
  ------------------
  506|  58.0k|                     std::distance(begin, end) < potential_fill_len)) {
  507|     42|        handler.on_error("Invalid encoding in fill character");
  508|     42|        return begin;
  509|     42|    }
  510|       |
  511|  57.9k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|  57.9k|    auto potential_fill = std::basic_string_view<CharT>{
  514|  57.9k|        begin, static_cast<size_t>(potential_fill_len)};
  515|  57.9k|    const auto begin_before_fill = begin;
  516|  57.9k|    begin += potential_fill_len;
  517|       |
  518|  57.9k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 1.06k, False: 56.9k]
  ------------------
  519|  1.06k|        return begin_before_fill;
  520|  1.06k|    }
  521|       |
  522|  56.9k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|  56.9k|    const auto begin_after_fill = begin;
  524|  56.9k|    ++begin;
  525|       |
  526|  56.9k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 56.7k, False: 204]
  ------------------
  527|  56.7k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|  56.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 80, False: 56.6k]
  |  |  ------------------
  ------------------
  528|     80|            handler.on_error("Invalid fill character '{' in format string");
  529|     80|            return begin;
  530|     80|        }
  531|  56.6k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 13.7k, False: 42.8k]
  ------------------
  532|  13.7k|            return begin_before_fill;
  533|  13.7k|        }
  534|  56.6k|    }
  535|       |
  536|  43.0k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 33.4k, False: 9.61k]
  ------------------
  537|  33.4k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 1.72k, False: 31.7k]
  ------------------
  538|  1.72k|            handler.on_align(potential_align_on_fill);
  539|  1.72k|            return begin_after_fill;
  540|  1.72k|        }
  541|  31.7k|        return begin_before_fill;
  542|  33.4k|    }
  543|       |
  544|  9.61k|    handler.on_fill(potential_fill);
  545|  9.61k|    handler.on_align(potential_align_after_fill);
  546|  9.61k|    return begin;
  547|  43.0k|}
_ZN3scn2v26detail17code_point_lengthIcEEiPKT_S5_:
  470|  58.0k|{
  471|  58.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  58.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  58.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  472|  58.0k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (472:19): [Folded - Ignored]
  ------------------
  473|  58.0k|        return 1;
  474|  58.0k|    }
  475|  58.0k|    else {
  476|  58.0k|        const auto lengths =
  477|  58.0k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
  478|  58.0k|            "\3\4";
  479|  58.0k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
  480|  58.0k|        return len;
  481|  58.0k|    }
  482|  58.0k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
  491|   114k|    auto check_align = [](wchar_t ch) {
  492|   114k|        switch (ch) {
  493|    534|            case L'<':
  ------------------
  |  Branch (493:13): [True: 534, False: 114k]
  ------------------
  494|    534|                return align_type::left;
  495|    592|            case L'>':
  ------------------
  |  Branch (495:13): [True: 592, False: 114k]
  ------------------
  496|    592|                return align_type::right;
  497|  14.0k|            case L'^':
  ------------------
  |  Branch (497:13): [True: 14.0k, False: 100k]
  ------------------
  498|  14.0k|                return align_type::center;
  499|  99.7k|            default:
  ------------------
  |  Branch (499:13): [True: 99.7k, False: 15.1k]
  ------------------
  500|  99.7k|                return align_type::none;
  501|   114k|        }
  502|   114k|    };
_ZN3scn2v26detail12specs_setter7on_fillIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
  240|  9.61k|    {
  241|  9.61k|        m_specs.fill = fill;
  242|  9.61k|    }
_ZN3scn2v26detail9fill_typeaSIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
  111|  9.61k|    {
  112|  9.61k|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  242|  9.61k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  9.61k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  113|  9.61k|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  242|  9.61k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  9.61k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  114|  9.61k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (114:23): [Folded - Ignored]
  ------------------
  115|  19.4k|            for (size_t i = 0; i < s.size(); ++i) {
  ------------------
  |  Branch (115:32): [True: 9.82k, False: 9.61k]
  ------------------
  116|  9.82k|                SCN_GCC_PUSH
  117|  9.82k|                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
  118|  9.82k|                m_data[i] = s[i];
  119|  9.82k|                SCN_GCC_POP
  120|  9.82k|            }
  121|  9.61k|            m_size = static_cast<unsigned char>(s.size());
  122|  9.61k|        }
  123|  9.61k|        else if constexpr (sizeof(CharT) == 2) {
  124|  9.61k|            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
  125|  9.61k|            m_data[1] =
  126|  9.61k|                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
  127|  9.61k|            if (s.size() == 1) {
  128|  9.61k|                return;
  129|  9.61k|            }
  130|  9.61k|            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
  131|  9.61k|            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
  132|  9.61k|        }
  133|  9.61k|        else {
  134|  9.61k|            const auto front = static_cast<unsigned>(s.front());
  135|  9.61k|            m_data[0] = static_cast<char>(front);
  136|  9.61k|            m_data[1] = static_cast<char>(front >> 8);
  137|  9.61k|            m_data[2] = static_cast<char>(front >> 16);
  138|  9.61k|            m_data[3] = static_cast<char>(front >> 24);
  139|  9.61k|        }
  140|  9.61k|    }
vscan.cpp:_ZN3scn2v26detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  553|  57.8k|{
  554|  57.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  57.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  57.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|  57.8k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 23.9k, False: 33.9k]
  |  Branch (556:33): [True: 7.00k, False: 16.9k]
  ------------------
  557|  7.00k|        int width = parse_simple_int(begin, end);
  558|  7.00k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|  7.00k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 6.97k, False: 36]
  |  |  ------------------
  ------------------
  559|  6.97k|            handler.on_width(width);
  560|  6.97k|        }
  561|     36|        else {
  562|     36|            handler.on_error("Invalid field width");
  563|     36|            return begin;
  564|     36|        }
  565|  7.00k|    }
  566|  57.8k|    return begin;
  567|  57.8k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 1050|    920|    {
 1051|    920|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|    920|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 824, False: 96]
  ------------------
 1053|    920|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 728, False: 96]
  ------------------
 1054|    920|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 632, False: 96]
  ------------------
 1055|    920|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 536, False: 96]
  ------------------
 1056|    536|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|    536|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|    536|        }
 1061|       |
 1062|    384|        Handler::on_localized();
 1063|    384|    }
_ZN3scn2v26detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 1072|  21.7k|{
 1073|  21.7k|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  153|  21.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 19.6k, False: 2.14k]
  |  |  ------------------
  ------------------
 1074|  19.6k|        return handler.on_error("Invalid type specifier for integer type");
 1075|  19.6k|    }
 1076|  2.14k|    if (specs.localized) {
  ------------------
  |  Branch (1076:9): [True: 200, False: 1.94k]
  ------------------
 1077|    200|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  153|    200|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 60, False: 140]
  |  |  ------------------
  ------------------
 1078|       |            // clang-format off
 1079|     60|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 1080|       |            // clang-format on
 1081|     60|            return;
 1082|     60|        }
 1083|    140|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  153|    140|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 140]
  |  |  ------------------
  ------------------
 1084|       |            // clang-format off
 1085|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 1086|       |            // clang-format on
 1087|      0|        }
 1088|    140|    }
 1089|  2.14k|}
_ZN3scn2v26detail24check_pointer_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 1151|  10.7k|{
 1152|  10.7k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (1152:9): [True: 9.98k, False: 772]
  ------------------
 1153|  10.7k|        specs.type != presentation_type::pointer) {
  ------------------
  |  Branch (1153:9): [True: 9.96k, False: 14]
  ------------------
 1154|  9.96k|        SCN_UNLIKELY_ATTR
 1155|  9.96k|        return handler.on_error("Invalid type specifier for pointer");
 1156|  9.96k|    }
 1157|  10.7k|}
_ZN3scn2v26detail21check_bool_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 1162|  10.8k|{
 1163|  10.8k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (1163:9): [True: 10.0k, False: 802]
  ------------------
 1164|  10.8k|        specs.type != presentation_type::string &&
  ------------------
  |  Branch (1164:9): [True: 9.96k, False: 122]
  ------------------
 1165|  10.8k|        specs.type != presentation_type::int_generic &&
  ------------------
  |  Branch (1165:9): [True: 9.88k, False: 84]
  ------------------
 1166|  10.8k|        specs.type != presentation_type::int_hex &&
  ------------------
  |  Branch (1166:9): [True: 9.84k, False: 34]
  ------------------
 1167|  10.8k|        specs.type != presentation_type::int_binary &&
  ------------------
  |  Branch (1167:9): [True: 9.75k, False: 88]
  ------------------
 1168|  10.8k|        specs.type != presentation_type::int_unsigned_decimal &&
  ------------------
  |  Branch (1168:9): [True: 9.74k, False: 14]
  ------------------
 1169|  10.8k|        specs.type != presentation_type::int_octal &&
  ------------------
  |  Branch (1169:9): [True: 9.71k, False: 28]
  ------------------
 1170|  10.8k|        specs.type != presentation_type::int_decimal) {
  ------------------
  |  Branch (1170:9): [True: 9.69k, False: 24]
  ------------------
 1171|  9.69k|        SCN_UNLIKELY_ATTR
 1172|  9.69k|        return handler.on_error("Invalid type specifier for boolean");
 1173|  9.69k|    }
 1174|  10.8k|}
_ZN3scn2v26detail21check_char_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 1094|  10.7k|{
 1095|  10.7k|    if (specs.type > presentation_type::int_hex ||
  ------------------
  |  Branch (1095:9): [True: 9.78k, False: 974]
  ------------------
 1096|  10.7k|        specs.type == presentation_type::int_arbitrary_base) {
  ------------------
  |  Branch (1096:9): [True: 0, False: 974]
  ------------------
 1097|  9.78k|        SCN_UNLIKELY_ATTR
 1098|  9.78k|        return handler.on_error("Invalid type specifier for character type");
 1099|  9.78k|    }
 1100|  10.7k|}
_ZN3scn2v26detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 1116|  10.8k|{
 1117|  10.8k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (1117:9): [True: 10.0k, False: 802]
  ------------------
 1118|  10.8k|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (1118:10): [True: 272, False: 9.81k]
  ------------------
 1119|  10.0k|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (1119:10): [True: 9.68k, False: 126]
  ------------------
 1120|  9.96k|        SCN_UNLIKELY_ATTR
 1121|  9.96k|        return handler.on_error("Invalid type specifier for float type");
 1122|  9.96k|    }
 1123|  10.8k|}
_ZN3scn2v26detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 1128|  32.2k|{
 1129|  32.2k|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (1129:9): [True: 2.31k, False: 29.9k]
  ------------------
 1130|  32.2k|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (1130:9): [True: 342, False: 29.6k]
  ------------------
 1131|  32.2k|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (1131:9): [True: 7.92k, False: 21.6k]
  ------------------
 1132|  32.2k|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (1132:9): [True: 18.8k, False: 2.81k]
  ------------------
 1133|  32.2k|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (1133:9): [True: 1.31k, False: 1.50k]
  ------------------
 1134|  30.7k|        return;
 1135|  30.7k|    }
 1136|  1.50k|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (1136:9): [True: 552, False: 948]
  ------------------
 1137|    552|        if (SCN_UNLIKELY(specs.width == 0)) {
  ------------------
  |  |  153|    552|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 24, False: 528]
  |  |  ------------------
  ------------------
 1138|       |            // clang-format off
 1139|     24|            return handler.on_error("'c' type specifier for strings requires the field width to be specified");
 1140|       |            // clang-format on
 1141|     24|        }
 1142|    528|        return;
 1143|    552|    }
 1144|    948|    SCN_UNLIKELY_ATTR
 1145|    948|    handler.on_error("Invalid type specifier for string");
 1146|    948|}
_ZN3scn2v26detail22parse_presentation_setIcRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
  633|  4.33k|{
  634|  4.33k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  4.33k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.33k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  635|  4.33k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  242|  4.33k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.33k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  636|       |
  637|      0|    auto start = begin;
  638|  4.33k|    ++begin;
  639|       |
  640|  4.33k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  4.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.33k]
  |  |  ------------------
  ------------------
  641|       |        // clang-format off
  642|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
  643|       |        // clang-format on
  644|      0|        return {};
  645|      0|    }
  646|  4.33k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (646:9): [True: 1.35k, False: 2.97k]
  ------------------
  647|  1.35k|        handler.on_charset_inverted();
  648|  1.35k|        ++begin;
  649|  1.35k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.35k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.35k]
  |  |  ------------------
  ------------------
  650|       |            // clang-format off
  651|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
  652|       |            // clang-format on
  653|      0|            return {};
  654|      0|        }
  655|  1.35k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (655:13): [True: 12, False: 1.34k]
  ------------------
  656|     12|            handler.on_charset_single(char32_t{']'});
  657|     12|            ++begin;
  658|     12|        }
  659|  1.35k|    }
  660|  2.97k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (660:14): [True: 0, False: 2.97k]
  ------------------
  661|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
  662|      0|    }
  663|       |
  664|   806k|    while (begin != end) {
  ------------------
  |  Branch (664:12): [True: 806k, False: 0]
  ------------------
  665|   806k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   806k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 806k]
  |  |  ------------------
  ------------------
  666|      0|            break;
  667|      0|        }
  668|       |
  669|   806k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (669:13): [True: 4.33k, False: 802k]
  ------------------
  670|  4.33k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
  671|  4.33k|        }
  672|       |
  673|   802k|        parse_presentation_set_literal(begin, end, handler);
  674|   802k|    }
  675|       |
  676|      0|    SCN_UNLIKELY_ATTR
  677|      0|    handler.on_error("Invalid [character set] specifier in format string");
  678|      0|    return {};
  679|  4.33k|}
_ZN3scn2v26detail30parse_presentation_set_literalIcRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
  597|   802k|{
  598|   802k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   802k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   802k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  599|       |
  600|      0|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
  601|   802k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  153|   802k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 802k]
  |  |  ------------------
  ------------------
  602|      0|        return;
  603|      0|    }
  604|       |
  605|   802k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (605:9): [True: 802k, False: 0]
  |  Branch (605:25): [True: 4.26k, False: 797k]
  |  Branch (605:49): [True: 4.26k, False: 0]
  ------------------
  606|   802k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (606:9): [True: 4.23k, False: 36]
  ------------------
  607|  4.23k|        ++begin;
  608|       |
  609|  4.23k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
  610|  4.23k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  153|  4.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.23k]
  |  |  ------------------
  ------------------
  611|      0|            return;
  612|      0|        }
  613|       |
  614|  4.23k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  153|  4.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.23k]
  |  |  ------------------
  ------------------
  615|       |            // clang-format off
  616|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
  617|       |            // clang-format on
  618|      0|            return;
  619|      0|        }
  620|       |
  621|  4.23k|        handler.on_charset_range(cp_first, cp_second + 1);
  622|  4.23k|        return;
  623|  4.23k|    }
  624|       |
  625|   797k|    handler.on_charset_single(cp_first);
  626|   797k|}
_ZN3scn2v26detail33parse_presentation_set_code_pointIcRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
  573|   806k|{
  574|   806k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   806k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   806k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  575|       |
  576|      0|    auto len = utf_code_point_length_by_starting_code_unit(*begin);
  577|   806k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  153|  1.61M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 806k]
  |  |  |  Branch (153:45): [True: 0, False: 806k]
  |  |  |  Branch (153:45): [True: 0, False: 806k]
  |  |  ------------------
  ------------------
  578|      0|        handler.on_error("Invalid encoding in format string");
  579|      0|        return invalid_code_point;
  580|      0|    }
  581|       |
  582|   806k|    const auto cp = decode_utf_code_point_exhaustive(
  583|   806k|        std::basic_string_view<CharT>{begin, len});
  584|   806k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  153|   806k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 806k]
  |  |  ------------------
  ------------------
  585|      0|        handler.on_error("Invalid encoding in format string");
  586|      0|        return invalid_code_point;
  587|      0|    }
  588|       |
  589|   806k|    begin += len;
  590|   806k|    return cp;
  591|   806k|}
_ZNK3scn2v26detail12format_specs14charset_stringIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
  224|  15.4k|    {
  225|  15.4k|        return {reinterpret_cast<const CharT*>(charset_string_data),
  226|  15.4k|                charset_string_size};
  227|  15.4k|    }
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|   124k|{
  968|   124k|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|   124k|    handler.check_args_exhausted();
  970|   124k|    return handler.get_error();
  971|   124k|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|   124k|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|   124k|    auto begin = format.data();
  937|   124k|    auto it = begin;
  938|   124k|    const auto end = format.data() + format.size();
  939|       |
  940|  4.02M|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 3.95M, False: 75.5k]
  ------------------
  941|  3.95M|        const auto ch = *it++;
  942|  3.95M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 68.8k, False: 3.88M]
  ------------------
  943|  68.8k|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|  68.8k|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|  68.8k|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 47.7k, False: 21.1k]
  ------------------
  947|  47.7k|                return;
  948|  47.7k|            }
  949|  68.8k|        }
  950|  3.88M|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 3.22k, False: 3.88M]
  ------------------
  951|  3.22k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|  6.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.57k, False: 1.64k]
  |  |  |  Branch (153:45): [True: 310, False: 2.91k]
  |  |  |  Branch (153:45): [True: 1.26k, False: 1.64k]
  |  |  ------------------
  ------------------
  952|  1.57k|                handler.on_error("Unmatched '}' in format string");
  953|  1.57k|                return;
  954|  1.57k|            }
  955|       |
  956|  1.64k|            handler.on_literal_text(begin, it);
  957|  1.64k|            begin = ++it;
  958|  1.64k|        }
  959|  3.95M|    }
  960|       |
  961|  75.5k|    handler.on_literal_text(begin, end);
  962|  75.5k|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
  865|  68.8k|{
  866|  68.8k|    struct id_adapter {
  867|  68.8k|        constexpr void operator()()
  868|  68.8k|        {
  869|  68.8k|            arg_id = handler.on_arg_id();
  870|  68.8k|        }
  871|  68.8k|        constexpr void operator()(std::size_t id)
  872|  68.8k|        {
  873|  68.8k|            arg_id = handler.on_arg_id(id);
  874|  68.8k|        }
  875|       |
  876|  68.8k|        constexpr void on_error(const char* msg)
  877|  68.8k|        {
  878|  68.8k|            SCN_UNLIKELY_ATTR
  879|  68.8k|            handler.on_error(msg);
  880|  68.8k|        }
  881|       |
  882|  68.8k|        Handler& handler;
  883|  68.8k|        std::size_t arg_id;
  884|  68.8k|    };
  885|       |
  886|  68.8k|    ++begin;
  887|  68.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  68.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 174, False: 68.7k]
  |  |  ------------------
  ------------------
  888|    174|        handler.on_error("Unexpected end of replacement field");
  889|    174|        return begin;
  890|    174|    }
  891|       |
  892|  68.7k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 7.96k, False: 60.7k]
  ------------------
  893|  7.96k|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|  7.96k|    }
  895|  60.7k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 13.3k, False: 47.4k]
  ------------------
  896|  13.3k|        handler.on_literal_text(begin, begin + 1);
  897|  13.3k|    }
  898|  47.4k|    else {
  899|  47.4k|        auto adapter = id_adapter{handler, 0};
  900|  47.4k|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|  47.4k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  47.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 156, False: 47.2k]
  |  |  ------------------
  ------------------
  903|    156|            handler.on_error("Missing '}' in format string");
  904|    156|            return begin;
  905|    156|        }
  906|       |
  907|  47.2k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 196, False: 47.0k]
  ------------------
  908|    196|            handler.on_replacement_field(adapter.arg_id, begin);
  909|    196|        }
  910|  47.0k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 45.5k, False: 1.51k]
  ------------------
  911|  45.5k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|  45.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 88, False: 45.4k]
  |  |  ------------------
  ------------------
  912|     88|                handler.on_error("Unexpected end of replacement field");
  913|     88|                return begin;
  914|     88|            }
  915|  45.4k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|  45.4k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|  90.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.20k, False: 42.2k]
  |  |  |  Branch (153:45): [True: 0, False: 45.4k]
  |  |  |  Branch (153:45): [True: 3.20k, False: 42.2k]
  |  |  ------------------
  ------------------
  917|  3.20k|                handler.on_error("Unknown format specifier");
  918|  3.20k|                return begin;
  919|  3.20k|            }
  920|  45.4k|        }
  921|  1.51k|        else {
  922|  1.51k|            SCN_UNLIKELY_ATTR
  923|  1.51k|            handler.on_error("Missing '}' in format string");
  924|  1.51k|            return begin;
  925|  1.51k|        }
  926|  47.2k|    }
  927|  63.7k|    return begin + 1;
  928|  68.7k|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|  47.4k|{
  400|  47.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  47.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  47.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|  47.4k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 47.4k, False: 0]
  |  Branch (401:26): [True: 6.01k, False: 41.4k]
  ------------------
  402|  6.01k|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|  6.01k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|  6.01k|    }
  404|       |
  405|  41.4k|    handler();
  406|  41.4k|    return begin;
  407|  47.4k|}
vscan.cpp:_ZN3scn2v26detail15do_parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  369|  6.01k|{
  370|  6.01k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  6.01k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.01k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  371|       |
  372|      0|    CharT c = *begin;
  373|  6.01k|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (373:9): [True: 856, False: 5.15k]
  |  Branch (373:27): [True: 470, False: 4.68k]
  ------------------
  374|  1.32k|        handler.on_error("Invalid argument ID");
  375|  1.32k|        return begin;
  376|  1.32k|    }
  377|       |
  378|  4.68k|    int idx = 0;
  379|  4.68k|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (379:9): [True: 514, False: 4.17k]
  ------------------
  380|    514|        idx = parse_simple_int(begin, end);
  381|    514|    }
  382|  4.17k|    else {
  383|  4.17k|        ++begin;
  384|  4.17k|    }
  385|       |
  386|  4.68k|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (386:9): [True: 156, False: 4.52k]
  |  Branch (386:26): [True: 4.33k, False: 196]
  |  Branch (386:50): [True: 188, False: 4.14k]
  ------------------
  387|    344|        handler.on_error("Invalid argument ID");
  388|    344|        return begin;
  389|    344|    }
  390|  4.34k|    handler(idx);
  391|       |
  392|  4.34k|    return begin;
  393|  4.68k|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
  877|  1.67k|        {
  878|  1.67k|            SCN_UNLIKELY_ATTR
  879|  1.67k|            handler.on_error(msg);
  880|  1.67k|        }
_ZN3scn2v26detail16parse_simple_intIwEEiRPKT_S5_:
  348|  6.08k|{
  349|  6.08k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  6.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  350|  6.08k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  242|  6.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  351|       |
  352|      0|    unsigned long long value = 0;
  353|  22.4k|    do {
  354|  22.4k|        value *= 10;
  355|  22.4k|        value += static_cast<unsigned long long>(*begin - '0');
  356|  22.4k|        if (value >
  ------------------
  |  Branch (356:13): [True: 68, False: 22.3k]
  ------------------
  357|  22.4k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
  358|     68|            return -1;
  359|     68|        }
  360|  22.3k|        ++begin;
  361|  22.3k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (361:14): [True: 22.1k, False: 210]
  |  Branch (361:30): [True: 21.6k, False: 470]
  |  Branch (361:47): [True: 16.3k, False: 5.34k]
  ------------------
  362|  6.02k|    return static_cast<int>(value);
  363|  6.08k|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
  872|  4.34k|        {
  873|  4.34k|            arg_id = handler.on_arg_id(id);
  874|  4.34k|        }
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|  41.4k|        {
  869|  41.4k|            arg_id = handler.on_arg_id();
  870|  41.4k|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 1045|  45.4k|    {
 1046|  45.4k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|  45.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  45.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|  45.4k|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  794|  45.4k|{
  795|  45.4k|    auto do_presentation = [&]() -> const CharT* {
  796|  45.4k|        if (*begin == CharT{'['}) {
  797|  45.4k|            auto set = parse_presentation_set(begin, end, handler);
  798|  45.4k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|  45.4k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|  45.4k|                return begin;
  803|  45.4k|            }
  804|  45.4k|            handler.on_character_set_string(set);
  805|  45.4k|            return begin;
  806|  45.4k|        }
  807|  45.4k|        if (*begin == CharT{'/'}) {
  808|  45.4k|            return parse_presentation_regex(begin, end, handler);
  809|  45.4k|        }
  810|  45.4k|        presentation_type type = parse_presentation_type(*begin++);
  811|  45.4k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|  45.4k|            handler.on_error("Invalid type specifier in format string");
  813|  45.4k|            return begin;
  814|  45.4k|        }
  815|  45.4k|        handler.on_type(type);
  816|  45.4k|        return begin;
  817|  45.4k|    };
  818|       |
  819|  45.4k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 44.2k, False: 1.17k]
  |  Branch (819:28): [True: 3.68k, False: 40.6k]
  ------------------
  820|  45.4k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 1.54k, False: 2.13k]
  |  Branch (820:36): [True: 1.45k, False: 88]
  ------------------
  821|  1.45k|        return do_presentation();
  822|  1.45k|    }
  823|       |
  824|  44.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  44.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 44.0k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|  44.0k|    begin = parse_align(begin, end, handler);
  830|  44.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  44.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 120, False: 43.8k]
  |  |  ------------------
  ------------------
  831|    120|        handler.on_error("Unexpected end of format string");
  832|    120|        return begin;
  833|    120|    }
  834|       |
  835|  43.8k|    begin = parse_width(begin, end, handler);
  836|  43.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  43.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 106, False: 43.7k]
  |  |  ------------------
  ------------------
  837|    106|        handler.on_error("Unexpected end of format string");
  838|    106|        return begin;
  839|    106|    }
  840|       |
  841|  43.7k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 610, False: 43.1k]
  ------------------
  842|    610|        handler.on_localized();
  843|    610|        ++begin;
  844|    610|    }
  845|  43.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  43.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 70, False: 43.7k]
  |  |  ------------------
  ------------------
  846|     70|        handler.on_error("Unexpected end of format string");
  847|     70|        return begin;
  848|     70|    }
  849|       |
  850|  43.7k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 43.7k, False: 0]
  |  Branch (850:25): [True: 40.2k, False: 3.43k]
  ------------------
  851|  40.2k|        do_presentation();
  852|  40.2k|    }
  853|  43.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  43.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.20k, False: 41.5k]
  |  |  ------------------
  ------------------
  854|  2.20k|        handler.on_error("Unexpected end of format string");
  855|  2.20k|        return begin;
  856|  2.20k|    }
  857|       |
  858|  41.5k|    return begin;
  859|  43.7k|}
_ZN3scn2v26detail15is_ascii_letterIwEEbT_:
  463|  3.68k|{
  464|  3.68k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (464:13): [True: 1.80k, False: 1.87k]
  |  Branch (464:33): [True: 1.34k, False: 456]
  ------------------
  465|  3.68k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (465:13): [True: 652, False: 1.68k]
  |  Branch (465:33): [True: 196, False: 456]
  ------------------
  466|  3.68k|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
  795|  41.7k|    auto do_presentation = [&]() -> const CharT* {
  796|  41.7k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 9.98k, False: 31.7k]
  ------------------
  797|  9.98k|            auto set = parse_presentation_set(begin, end, handler);
  798|  9.98k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|  9.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 974, False: 9.00k]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|    974|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|    974|                return begin;
  803|    974|            }
  804|  9.00k|            handler.on_character_set_string(set);
  805|  9.00k|            return begin;
  806|  9.98k|        }
  807|  31.7k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 27.5k, False: 4.18k]
  ------------------
  808|  27.5k|            return parse_presentation_regex(begin, end, handler);
  809|  27.5k|        }
  810|  4.18k|        presentation_type type = parse_presentation_type(*begin++);
  811|  4.18k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|  4.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 492, False: 3.69k]
  |  |  ------------------
  ------------------
  812|    492|            handler.on_error("Invalid type specifier in format string");
  813|    492|            return begin;
  814|    492|        }
  815|  3.69k|        handler.on_type(type);
  816|  3.69k|        return begin;
  817|  4.18k|    };
vscan.cpp:_ZN3scn2v26detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
  633|  9.98k|{
  634|  9.98k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  9.98k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  9.98k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  635|  9.98k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  242|  9.98k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  9.98k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  636|       |
  637|      0|    auto start = begin;
  638|  9.98k|    ++begin;
  639|       |
  640|  9.98k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  9.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 60, False: 9.92k]
  |  |  ------------------
  ------------------
  641|       |        // clang-format off
  642|     60|        handler.on_error("Unexpected end of [character set] specifier in format string");
  643|       |        // clang-format on
  644|     60|        return {};
  645|     60|    }
  646|  9.92k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (646:9): [True: 2.19k, False: 7.72k]
  ------------------
  647|  2.19k|        handler.on_charset_inverted();
  648|  2.19k|        ++begin;
  649|  2.19k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  2.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 34, False: 2.16k]
  |  |  ------------------
  ------------------
  650|       |            // clang-format off
  651|     34|            handler.on_error("Unexpected end of [character set] specifier in format string");
  652|       |            // clang-format on
  653|     34|            return {};
  654|     34|        }
  655|  2.16k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (655:13): [True: 70, False: 2.09k]
  ------------------
  656|     70|            handler.on_charset_single(char32_t{']'});
  657|     70|            ++begin;
  658|     70|        }
  659|  2.16k|    }
  660|  7.72k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (660:14): [True: 40, False: 7.68k]
  ------------------
  661|     40|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
  662|     40|    }
  663|       |
  664|  2.11M|    while (begin != end) {
  ------------------
  |  Branch (664:12): [True: 2.11M, False: 676]
  ------------------
  665|  2.11M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  2.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 164, False: 2.11M]
  |  |  ------------------
  ------------------
  666|    164|            break;
  667|    164|        }
  668|       |
  669|  2.11M|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (669:13): [True: 9.00k, False: 2.10M]
  ------------------
  670|  9.00k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
  671|  9.00k|        }
  672|       |
  673|  2.10M|        parse_presentation_set_literal(begin, end, handler);
  674|  2.10M|    }
  675|       |
  676|    840|    SCN_UNLIKELY_ATTR
  677|    840|    handler.on_error("Invalid [character set] specifier in format string");
  678|    840|    return {};
  679|  9.84k|}
vscan.cpp:_ZN3scn2v26detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEvRPKT_SE_OT0_:
  597|  2.10M|{
  598|  2.10M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  2.10M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.10M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  599|       |
  600|      0|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
  601|  2.10M|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  153|  2.10M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 46, False: 2.10M]
  |  |  ------------------
  ------------------
  602|     46|        return;
  603|     46|    }
  604|       |
  605|  2.10M|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (605:9): [True: 2.10M, False: 414]
  |  Branch (605:25): [True: 12.2k, False: 2.09M]
  |  Branch (605:49): [True: 12.2k, False: 34]
  ------------------
  606|  2.10M|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (606:9): [True: 12.0k, False: 124]
  ------------------
  607|  12.0k|        ++begin;
  608|       |
  609|  12.0k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
  610|  12.0k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  153|  12.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 28, False: 12.0k]
  |  |  ------------------
  ------------------
  611|     28|            return;
  612|     28|        }
  613|       |
  614|  12.0k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  153|  12.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 58, False: 11.9k]
  |  |  ------------------
  ------------------
  615|       |            // clang-format off
  616|     58|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
  617|       |            // clang-format on
  618|     58|            return;
  619|     58|        }
  620|       |
  621|  11.9k|        handler.on_charset_range(cp_first, cp_second + 1);
  622|  11.9k|        return;
  623|  12.0k|    }
  624|       |
  625|  2.09M|    handler.on_charset_single(cp_first);
  626|  2.09M|}
vscan.cpp:_ZN3scn2v26detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEDiRPKT_SE_OT0_:
  573|  2.11M|{
  574|  2.11M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  2.11M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.11M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  575|       |
  576|      0|    auto len = utf_code_point_length_by_starting_code_unit(*begin);
  577|  2.11M|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  153|  4.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.11M]
  |  |  |  Branch (153:45): [True: 0, False: 2.11M]
  |  |  |  Branch (153:45): [True: 0, False: 2.11M]
  |  |  ------------------
  ------------------
  578|      0|        handler.on_error("Invalid encoding in format string");
  579|      0|        return invalid_code_point;
  580|      0|    }
  581|       |
  582|  2.11M|    const auto cp = decode_utf_code_point_exhaustive(
  583|  2.11M|        std::basic_string_view<CharT>{begin, len});
  584|  2.11M|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  153|  2.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 74, False: 2.11M]
  |  |  ------------------
  ------------------
  585|     74|        handler.on_error("Invalid encoding in format string");
  586|     74|        return invalid_code_point;
  587|     74|    }
  588|       |
  589|  2.11M|    begin += len;
  590|  2.11M|    return cp;
  591|  2.11M|}
_ZN3scn2v26detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
  302|  9.00k|    {
  303|  9.00k|        m_specs.charset_string_data = fmt.data();
  304|  9.00k|        m_specs.charset_string_size = fmt.size();
  305|  9.00k|        on_type(presentation_type::string_set);
  306|  9.00k|    }
vscan.cpp:_ZN3scn2v26detail24parse_presentation_regexIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_RSE_SE_OT0_:
  685|  27.5k|{
  686|  27.5k|#if !SCN_DISABLE_REGEX
  687|  27.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  27.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  27.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  688|  27.5k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  242|  27.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  27.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  689|       |
  690|  27.5k|    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |  101|  55.1k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (690:19): [Folded - Ignored]
  |  Branch (690:19): [Folded - Ignored]
  ------------------
  691|  27.5k|                  std::is_same_v<CharT, wchar_t>) {
  ------------------
  |  Branch (691:19): [Folded - Ignored]
  ------------------
  692|  27.5k|        handler.on_error("Regex backend doesn't support wide strings as input");
  693|  27.5k|        return begin;
  694|  27.5k|    }
  695|       |
  696|  27.5k|    auto start = begin;
  697|  27.5k|    ++begin;
  698|       |
  699|  27.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  27.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 40, False: 27.5k]
  |  |  ------------------
  ------------------
  700|     40|        handler.on_error("Unexpected end of regex in format string");
  701|     40|        return begin;
  702|     40|    }
  703|       |
  704|  27.5k|    handler.on_type(presentation_type::regex);
  705|  5.28M|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (705:12): [True: 5.28M, False: 200]
  ------------------
  706|  5.28M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (706:13): [True: 36.0k, False: 5.24M]
  ------------------
  707|  36.0k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (707:17): [True: 27.3k, False: 8.72k]
  ------------------
  708|  27.3k|                break;
  709|  27.3k|            }
  710|  8.72k|            else {
  711|  8.72k|                handler.on_type(presentation_type::regex_escaped);
  712|  8.72k|            }
  713|  36.0k|        }
  714|  5.28M|    }
  715|  27.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  27.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 200, False: 27.3k]
  |  |  ------------------
  ------------------
  716|    200|        handler.on_error("Unexpected end of regex in format string");
  717|    200|        return begin;
  718|    200|    }
  719|       |
  720|  27.3k|    auto regex_end = begin;
  721|  27.3k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
  722|  27.3k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  153|  27.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 34, False: 27.3k]
  |  |  ------------------
  ------------------
  723|     34|        handler.on_error("Invalid (empty) regex in format string");
  724|     34|        return begin;
  725|     34|    }
  726|  27.3k|    handler.on_regex_pattern(regex_pattern);
  727|  27.3k|    ++begin;
  728|       |
  729|  27.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  27.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 34, False: 27.2k]
  |  |  ------------------
  ------------------
  730|     34|        handler.on_error("Unexpected end of regex in format string");
  731|     34|        return begin;
  732|     34|    }
  733|       |
  734|  27.2k|    regex_flags flags{regex_flags::none};
  735|  27.2k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
  736|  27.2k|        {{'m', regex_flags::multiline},
  737|  27.2k|         {'s', regex_flags::singleline},
  738|  27.2k|         {'i', regex_flags::nocase},
  739|  27.2k|         {'n', regex_flags::nocapture}}};
  740|  31.7k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (740:12): [True: 31.6k, False: 58]
  ------------------
  741|  31.6k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (741:13): [True: 27.0k, False: 4.57k]
  ------------------
  742|  27.0k|            break;
  743|  27.0k|        }
  744|  4.57k|        bool found_flag = false;
  745|  12.1k|        for (auto flag : flag_map) {
  ------------------
  |  Branch (745:24): [True: 12.1k, False: 92]
  ------------------
  746|  12.1k|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (746:17): [True: 7.64k, False: 4.48k]
  ------------------
  747|  7.64k|                continue;
  748|  7.64k|            }
  749|  4.48k|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (749:17): [True: 34, False: 4.44k]
  ------------------
  750|     34|                handler.on_error("Flag set multiple times in regex");
  751|     34|                return begin;
  752|     34|            }
  753|  4.44k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
  754|  4.44k|            if (*begin == CharT{'s'}) {
  ------------------
  |  Branch (754:17): [True: 52, False: 4.39k]
  ------------------
  755|       |                // clang-format off
  756|     52|                handler.on_error("/s flag for regex isn't supported by regex backend");
  757|       |                // clang-format on
  758|     52|            }
  759|       |#if !SCN_HAS_STD_REGEX_MULTILINE
  760|       |            if (*begin == CharT{'m'}) {
  761|       |                // clang-format off
  762|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
  763|       |                // clang-format on
  764|       |            }
  765|       |#endif
  766|  4.44k|#endif
  767|  4.44k|            flags |= flag.second;
  768|  4.44k|            found_flag = true;
  769|  4.44k|            break;
  770|  4.48k|        }
  771|  4.53k|        if (!found_flag) {
  ------------------
  |  Branch (771:13): [True: 92, False: 4.44k]
  ------------------
  772|     92|            handler.on_error("Invalid flag in regex");
  773|     92|            return begin;
  774|     92|        }
  775|  4.53k|    }
  776|  27.1k|    handler.on_regex_flags(flags);
  777|       |
  778|  27.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  27.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 58, False: 27.0k]
  |  |  ------------------
  ------------------
  779|     58|        handler.on_error("Unexpected end of regex in format string");
  780|     58|        return begin;
  781|     58|    }
  782|       |
  783|  27.0k|    return begin;
  784|       |#else
  785|       |    handler.on_error("Regular expression support is disabled");
  786|       |    return {};
  787|       |#endif
  788|  27.1k|}
_ZN3scn2v26detail12specs_setter16on_regex_patternIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
  310|  27.3k|    {
  311|  27.3k|        m_specs.charset_string_data = pattern.data();
  312|  27.3k|        m_specs.charset_string_size = pattern.size();
  313|  27.3k|    }
_ZN3scn2v26detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
  411|  4.18k|{
  412|  4.18k|    switch (type) {
  413|    286|        case 'b':
  ------------------
  |  Branch (413:9): [True: 286, False: 3.89k]
  ------------------
  414|    338|        case 'B':
  ------------------
  |  Branch (414:9): [True: 52, False: 4.13k]
  ------------------
  415|    338|            return presentation_type::int_binary;
  416|    150|        case 'd':
  ------------------
  |  Branch (416:9): [True: 150, False: 4.03k]
  ------------------
  417|    150|            return presentation_type::int_decimal;
  418|    412|        case 'i':
  ------------------
  |  Branch (418:9): [True: 412, False: 3.77k]
  ------------------
  419|    412|            return presentation_type::int_generic;
  420|     88|        case 'u':
  ------------------
  |  Branch (420:9): [True: 88, False: 4.09k]
  ------------------
  421|     88|            return presentation_type::int_unsigned_decimal;
  422|    106|        case 'o':
  ------------------
  |  Branch (422:9): [True: 106, False: 4.07k]
  ------------------
  423|    106|            return presentation_type::int_octal;
  424|    142|        case 'x':
  ------------------
  |  Branch (424:9): [True: 142, False: 4.04k]
  ------------------
  425|    230|        case 'X':
  ------------------
  |  Branch (425:9): [True: 88, False: 4.09k]
  ------------------
  426|    230|            return presentation_type::int_hex;
  427|     42|        case 'r':
  ------------------
  |  Branch (427:9): [True: 42, False: 4.14k]
  ------------------
  428|     76|        case 'R':
  ------------------
  |  Branch (428:9): [True: 34, False: 4.15k]
  ------------------
  429|     76|            return presentation_type::int_arbitrary_base;
  430|     88|        case 'a':
  ------------------
  |  Branch (430:9): [True: 88, False: 4.09k]
  ------------------
  431|    248|        case 'A':
  ------------------
  |  Branch (431:9): [True: 160, False: 4.02k]
  ------------------
  432|    248|            return presentation_type::float_hex;
  433|     70|        case 'e':
  ------------------
  |  Branch (433:9): [True: 70, False: 4.11k]
  ------------------
  434|    122|        case 'E':
  ------------------
  |  Branch (434:9): [True: 52, False: 4.13k]
  ------------------
  435|    122|            return presentation_type::float_scientific;
  436|    268|        case 'f':
  ------------------
  |  Branch (436:9): [True: 268, False: 3.91k]
  ------------------
  437|    338|        case 'F':
  ------------------
  |  Branch (437:9): [True: 70, False: 4.11k]
  ------------------
  438|    338|            return presentation_type::float_fixed;
  439|     42|        case 'g':
  ------------------
  |  Branch (439:9): [True: 42, False: 4.14k]
  ------------------
  440|    120|        case 'G':
  ------------------
  |  Branch (440:9): [True: 78, False: 4.10k]
  ------------------
  441|    120|            return presentation_type::float_general;
  442|    556|        case 's':
  ------------------
  |  Branch (442:9): [True: 556, False: 3.62k]
  ------------------
  443|    556|            return presentation_type::string;
  444|    796|        case 'c':
  ------------------
  |  Branch (444:9): [True: 796, False: 3.38k]
  ------------------
  445|    796|            return presentation_type::character;
  446|     34|        case '?':
  ------------------
  |  Branch (446:9): [True: 34, False: 4.15k]
  ------------------
  447|     34|            return presentation_type::escaped_character;
  448|     78|        case 'p':
  ------------------
  |  Branch (448:9): [True: 78, False: 4.10k]
  ------------------
  449|     78|            return presentation_type::pointer;
  450|      0|        case '[':
  ------------------
  |  Branch (450:9): [True: 0, False: 4.18k]
  ------------------
  451|      0|        case '/':
  ------------------
  |  Branch (451:9): [True: 0, False: 4.18k]
  ------------------
  452|       |            // Should be handled by parse_presentation_set and
  453|       |            // parse_presentation_regex
  454|      0|            SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  456|    492|        default:
  ------------------
  |  Branch (456:9): [True: 492, False: 3.69k]
  ------------------
  457|    492|            return presentation_type::none;
  458|  4.18k|    }
  459|  4.18k|}
vscan.cpp:_ZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  488|  44.0k|{
  489|  44.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  44.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  44.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|  44.0k|        switch (ch) {
  493|  44.0k|            case L'<':
  494|  44.0k|                return align_type::left;
  495|  44.0k|            case L'>':
  496|  44.0k|                return align_type::right;
  497|  44.0k|            case L'^':
  498|  44.0k|                return align_type::center;
  499|  44.0k|            default:
  500|  44.0k|                return align_type::none;
  501|  44.0k|        }
  502|  44.0k|    };
  503|       |
  504|  44.0k|    auto potential_fill_len = code_point_length(begin, end);
  505|  44.0k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|  88.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 44.0k]
  |  |  |  Branch (153:45): [True: 0, False: 44.0k]
  |  |  |  Branch (153:45): [True: 0, False: 44.0k]
  |  |  ------------------
  ------------------
  506|  44.0k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|  44.0k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|  44.0k|    auto potential_fill = std::basic_string_view<CharT>{
  514|  44.0k|        begin, static_cast<size_t>(potential_fill_len)};
  515|  44.0k|    const auto begin_before_fill = begin;
  516|  44.0k|    begin += potential_fill_len;
  517|       |
  518|  44.0k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 1.17k, False: 42.8k]
  ------------------
  519|  1.17k|        return begin_before_fill;
  520|  1.17k|    }
  521|       |
  522|  42.8k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|  42.8k|    const auto begin_after_fill = begin;
  524|  42.8k|    ++begin;
  525|       |
  526|  42.8k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 42.8k, False: 0]
  ------------------
  527|  42.8k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|  42.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 94, False: 42.7k]
  |  |  ------------------
  ------------------
  528|     94|            handler.on_error("Invalid fill character '{' in format string");
  529|     94|            return begin;
  530|     94|        }
  531|  42.7k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 8.14k, False: 34.6k]
  ------------------
  532|  8.14k|            return begin_before_fill;
  533|  8.14k|        }
  534|  42.7k|    }
  535|       |
  536|  34.6k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 28.4k, False: 6.16k]
  ------------------
  537|  28.4k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 1.26k, False: 27.1k]
  ------------------
  538|  1.26k|            handler.on_align(potential_align_on_fill);
  539|  1.26k|            return begin_after_fill;
  540|  1.26k|        }
  541|  27.1k|        return begin_before_fill;
  542|  28.4k|    }
  543|       |
  544|  6.16k|    handler.on_fill(potential_fill);
  545|  6.16k|    handler.on_align(potential_align_after_fill);
  546|  6.16k|    return begin;
  547|  34.6k|}
_ZN3scn2v26detail17code_point_lengthIwEEiPKT_S5_:
  470|  44.0k|{
  471|  44.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  44.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  44.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  472|  44.0k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (472:19): [Folded - Ignored]
  ------------------
  473|  44.0k|        return 1;
  474|  44.0k|    }
  475|  44.0k|    else {
  476|  44.0k|        const auto lengths =
  477|  44.0k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
  478|  44.0k|            "\3\4";
  479|  44.0k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
  480|  44.0k|        return len;
  481|  44.0k|    }
  482|  44.0k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
  491|  86.8k|    auto check_align = [](wchar_t ch) {
  492|  86.8k|        switch (ch) {
  493|    204|            case L'<':
  ------------------
  |  Branch (493:13): [True: 204, False: 86.6k]
  ------------------
  494|    204|                return align_type::left;
  495|    562|            case L'>':
  ------------------
  |  Branch (495:13): [True: 562, False: 86.2k]
  ------------------
  496|    562|                return align_type::right;
  497|  7.97k|            case L'^':
  ------------------
  |  Branch (497:13): [True: 7.97k, False: 78.8k]
  ------------------
  498|  7.97k|                return align_type::center;
  499|  78.1k|            default:
  ------------------
  |  Branch (499:13): [True: 78.1k, False: 8.74k]
  ------------------
  500|  78.1k|                return align_type::none;
  501|  86.8k|        }
  502|  86.8k|    };
_ZN3scn2v26detail12specs_setter7on_fillIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
  240|  6.16k|    {
  241|  6.16k|        m_specs.fill = fill;
  242|  6.16k|    }
_ZN3scn2v26detail9fill_typeaSIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
  111|  6.16k|    {
  112|  6.16k|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  242|  6.16k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.16k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  113|  6.16k|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  242|  6.16k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.16k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  114|  6.16k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (114:23): [Folded - Ignored]
  ------------------
  115|  6.16k|            for (size_t i = 0; i < s.size(); ++i) {
  116|  6.16k|                SCN_GCC_PUSH
  117|  6.16k|                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
  118|  6.16k|                m_data[i] = s[i];
  119|  6.16k|                SCN_GCC_POP
  120|  6.16k|            }
  121|  6.16k|            m_size = static_cast<unsigned char>(s.size());
  122|  6.16k|        }
  123|  6.16k|        else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (123:28): [Folded - Ignored]
  ------------------
  124|  6.16k|            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
  125|  6.16k|            m_data[1] =
  126|  6.16k|                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
  127|  6.16k|            if (s.size() == 1) {
  128|  6.16k|                return;
  129|  6.16k|            }
  130|  6.16k|            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
  131|  6.16k|            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
  132|  6.16k|        }
  133|  6.16k|        else {
  134|  6.16k|            const auto front = static_cast<unsigned>(s.front());
  135|  6.16k|            m_data[0] = static_cast<char>(front);
  136|  6.16k|            m_data[1] = static_cast<char>(front >> 8);
  137|  6.16k|            m_data[2] = static_cast<char>(front >> 16);
  138|  6.16k|            m_data[3] = static_cast<char>(front >> 24);
  139|  6.16k|        }
  140|  6.16k|    }
vscan.cpp:_ZN3scn2v26detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  553|  43.8k|{
  554|  43.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  43.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  43.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|  43.8k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 16.4k, False: 27.4k]
  |  Branch (556:33): [True: 5.57k, False: 10.8k]
  ------------------
  557|  5.57k|        int width = parse_simple_int(begin, end);
  558|  5.57k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|  5.57k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 5.54k, False: 34]
  |  |  ------------------
  ------------------
  559|  5.54k|            handler.on_width(width);
  560|  5.54k|        }
  561|     34|        else {
  562|     34|            handler.on_error("Invalid field width");
  563|     34|            return begin;
  564|     34|        }
  565|  5.57k|    }
  566|  43.8k|    return begin;
  567|  43.8k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 1050|    610|    {
 1051|    610|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|    610|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 548, False: 62]
  ------------------
 1053|    610|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 486, False: 62]
  ------------------
 1054|    610|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 424, False: 62]
  ------------------
 1055|    610|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 362, False: 62]
  ------------------
 1056|    362|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|    362|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|    362|        }
 1061|       |
 1062|    248|        Handler::on_localized();
 1063|    248|    }
_ZN3scn2v26detail22parse_presentation_setIwRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
  633|  2.53k|{
  634|  2.53k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  2.53k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.53k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  635|  2.53k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  242|  2.53k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.53k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  636|       |
  637|      0|    auto start = begin;
  638|  2.53k|    ++begin;
  639|       |
  640|  2.53k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  2.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.53k]
  |  |  ------------------
  ------------------
  641|       |        // clang-format off
  642|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
  643|       |        // clang-format on
  644|      0|        return {};
  645|      0|    }
  646|  2.53k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (646:9): [True: 462, False: 2.07k]
  ------------------
  647|    462|        handler.on_charset_inverted();
  648|    462|        ++begin;
  649|    462|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|    462|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 462]
  |  |  ------------------
  ------------------
  650|       |            // clang-format off
  651|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
  652|       |            // clang-format on
  653|      0|            return {};
  654|      0|        }
  655|    462|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (655:13): [True: 12, False: 450]
  ------------------
  656|     12|            handler.on_charset_single(char32_t{']'});
  657|     12|            ++begin;
  658|     12|        }
  659|    462|    }
  660|  2.07k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (660:14): [True: 0, False: 2.07k]
  ------------------
  661|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
  662|      0|    }
  663|       |
  664|   702k|    while (begin != end) {
  ------------------
  |  Branch (664:12): [True: 702k, False: 0]
  ------------------
  665|   702k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   702k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 702k]
  |  |  ------------------
  ------------------
  666|      0|            break;
  667|      0|        }
  668|       |
  669|   702k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (669:13): [True: 2.53k, False: 700k]
  ------------------
  670|  2.53k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
  671|  2.53k|        }
  672|       |
  673|   700k|        parse_presentation_set_literal(begin, end, handler);
  674|   700k|    }
  675|       |
  676|      0|    SCN_UNLIKELY_ATTR
  677|      0|    handler.on_error("Invalid [character set] specifier in format string");
  678|      0|    return {};
  679|  2.53k|}
_ZN3scn2v26detail30parse_presentation_set_literalIwRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
  597|   700k|{
  598|   700k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   700k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   700k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  599|       |
  600|      0|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
  601|   700k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  153|   700k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 700k]
  |  |  ------------------
  ------------------
  602|      0|        return;
  603|      0|    }
  604|       |
  605|   700k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (605:9): [True: 700k, False: 0]
  |  Branch (605:25): [True: 3.77k, False: 696k]
  |  Branch (605:49): [True: 3.77k, False: 0]
  ------------------
  606|   700k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (606:9): [True: 3.74k, False: 30]
  ------------------
  607|  3.74k|        ++begin;
  608|       |
  609|  3.74k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
  610|  3.74k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  153|  3.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.74k]
  |  |  ------------------
  ------------------
  611|      0|            return;
  612|      0|        }
  613|       |
  614|  3.74k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  153|  3.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.74k]
  |  |  ------------------
  ------------------
  615|       |            // clang-format off
  616|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
  617|       |            // clang-format on
  618|      0|            return;
  619|      0|        }
  620|       |
  621|  3.74k|        handler.on_charset_range(cp_first, cp_second + 1);
  622|  3.74k|        return;
  623|  3.74k|    }
  624|       |
  625|   696k|    handler.on_charset_single(cp_first);
  626|   696k|}
_ZN3scn2v26detail33parse_presentation_set_code_pointIwRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
  573|   703k|{
  574|   703k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   703k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   703k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  575|       |
  576|      0|    auto len = utf_code_point_length_by_starting_code_unit(*begin);
  577|   703k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  153|  1.40M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 703k]
  |  |  |  Branch (153:45): [True: 0, False: 703k]
  |  |  |  Branch (153:45): [True: 0, False: 703k]
  |  |  ------------------
  ------------------
  578|      0|        handler.on_error("Invalid encoding in format string");
  579|      0|        return invalid_code_point;
  580|      0|    }
  581|       |
  582|   703k|    const auto cp = decode_utf_code_point_exhaustive(
  583|   703k|        std::basic_string_view<CharT>{begin, len});
  584|   703k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  153|   703k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 703k]
  |  |  ------------------
  ------------------
  585|      0|        handler.on_error("Invalid encoding in format string");
  586|      0|        return invalid_code_point;
  587|      0|    }
  588|       |
  589|   703k|    begin += len;
  590|   703k|    return cp;
  591|   703k|}
_ZNK3scn2v26detail12format_specs14charset_stringIwEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
  224|  11.5k|    {
  225|  11.5k|        return {reinterpret_cast<const CharT*>(charset_string_data),
  226|  11.5k|                charset_string_size};
  227|  11.5k|    }

_ZN3scn2v26detail16make_scan_bufferINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRKT_:
  225|  72.7k|{
  226|  72.7k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|  72.7k|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|  72.7k|                  "\n"
  230|  72.7k|                  "Unsupported range type given as input to a scanning "
  231|  72.7k|                  "function.\n"
  232|  72.7k|                  "A range needs to have a character type (value type) "
  233|  72.7k|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|  72.7k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|  72.7k|                  "to be included.\n"
  236|  72.7k|                  "See the scnlib documentation for more details.");
  237|  72.7k|    static_assert(
  238|  72.7k|        !std::is_same_v<T, custom_char_traits>,
  239|  72.7k|        "\n"
  240|  72.7k|        "Unsupported range type given as input to a scanning "
  241|  72.7k|        "function.\n"
  242|  72.7k|        "String types (std::basic_string, and std::basic_string_view) "
  243|  72.7k|        "need to use std::char_traits. Strings with custom Traits are "
  244|  72.7k|        "not supported.");
  245|  72.7k|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|  72.7k|                  "\n"
  247|  72.7k|                  "Unsupported range type given as input to a scanning "
  248|  72.7k|                  "function.\n"
  249|  72.7k|                  "file_marker_found cannot be used as an "
  250|  72.7k|                  "source range type to scn::scan.\n"
  251|  72.7k|                  "To read from stdin, use scn::input or scn::prompt, "
  252|  72.7k|                  "and do not provide an explicit source range, "
  253|  72.7k|                  "or use scn::scan with a FILE* directly.");
  254|  72.7k|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|  72.7k|                  "\n"
  256|  72.7k|                  "Unsupported range type given as input to a scanning "
  257|  72.7k|                  "function.\n"
  258|  72.7k|                  "In order to be scannable, a range needs to satisfy "
  259|  72.7k|                  "`forward_range`. `input_range` is not sufficient.");
  260|  72.7k|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|  72.7k|                  "\n"
  262|  72.7k|                  "Unsupported range type given as input to a scanning "
  263|  72.7k|                  "function.\n"
  264|  72.7k|                  "A range needs to model forward_range and have a valid "
  265|  72.7k|                  "character type (char or wchar_t) to be scannable.\n"
  266|  72.7k|                  "Examples of scannable ranges are std::string, "
  267|  72.7k|                  "std::string_view, "
  268|  72.7k|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|  72.7k|                  "See the scnlib documentation for more details.");
  270|       |
  271|  72.7k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|  72.7k|}
_ZN3scn2v26detail17_make_scan_buffer4implIcEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
  100|  72.7k|{
  101|  72.7k|    if constexpr (is_valid_char_type<CharT>) {
  ------------------
  |  Branch (101:19): [Folded - Ignored]
  ------------------
  102|  72.7k|        return r;
  103|       |        // return make_string_scan_buffer(r);
  104|  72.7k|    }
  105|  72.7k|    else {
  106|  72.7k|        return invalid_char_type{};
  107|  72.7k|    }
  108|  72.7k|}
_ZN3scn2v26detail16make_scan_bufferINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRKT_:
  225|   124k|{
  226|   124k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|   124k|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|   124k|                  "\n"
  230|   124k|                  "Unsupported range type given as input to a scanning "
  231|   124k|                  "function.\n"
  232|   124k|                  "A range needs to have a character type (value type) "
  233|   124k|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|   124k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|   124k|                  "to be included.\n"
  236|   124k|                  "See the scnlib documentation for more details.");
  237|   124k|    static_assert(
  238|   124k|        !std::is_same_v<T, custom_char_traits>,
  239|   124k|        "\n"
  240|   124k|        "Unsupported range type given as input to a scanning "
  241|   124k|        "function.\n"
  242|   124k|        "String types (std::basic_string, and std::basic_string_view) "
  243|   124k|        "need to use std::char_traits. Strings with custom Traits are "
  244|   124k|        "not supported.");
  245|   124k|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|   124k|                  "\n"
  247|   124k|                  "Unsupported range type given as input to a scanning "
  248|   124k|                  "function.\n"
  249|   124k|                  "file_marker_found cannot be used as an "
  250|   124k|                  "source range type to scn::scan.\n"
  251|   124k|                  "To read from stdin, use scn::input or scn::prompt, "
  252|   124k|                  "and do not provide an explicit source range, "
  253|   124k|                  "or use scn::scan with a FILE* directly.");
  254|   124k|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|   124k|                  "\n"
  256|   124k|                  "Unsupported range type given as input to a scanning "
  257|   124k|                  "function.\n"
  258|   124k|                  "In order to be scannable, a range needs to satisfy "
  259|   124k|                  "`forward_range`. `input_range` is not sufficient.");
  260|   124k|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|   124k|                  "\n"
  262|   124k|                  "Unsupported range type given as input to a scanning "
  263|   124k|                  "function.\n"
  264|   124k|                  "A range needs to model forward_range and have a valid "
  265|   124k|                  "character type (char or wchar_t) to be scannable.\n"
  266|   124k|                  "Examples of scannable ranges are std::string, "
  267|   124k|                  "std::string_view, "
  268|   124k|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|   124k|                  "See the scnlib documentation for more details.");
  270|       |
  271|   124k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|   124k|}
_ZN3scn2v26detail17_make_scan_buffer4implIwEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
  100|   124k|{
  101|   124k|    if constexpr (is_valid_char_type<CharT>) {
  ------------------
  |  Branch (101:19): [Folded - Ignored]
  ------------------
  102|   124k|        return r;
  103|       |        // return make_string_scan_buffer(r);
  104|   124k|    }
  105|   124k|    else {
  106|   124k|        return invalid_char_type{};
  107|   124k|    }
  108|   124k|}

_ZN3scn2v26detail10locale_refC2Ev:
   29|   109k|    constexpr locale_ref() = default;

_ZN3scn2v224basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
   44|  72.7k|    {
   45|  72.7k|    }
_ZN3scn2v224basic_scan_parse_contextIcE11next_arg_idEv:
   65|  64.5k|    {
   66|  64.5k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  153|  64.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 70, False: 64.5k]
  |  |  ------------------
  ------------------
   67|     70|            on_error(
   68|     70|                "Cannot switch from manual to automatic argument indexing");
   69|     70|            return 0;
   70|     70|        }
   71|       |
   72|  64.5k|        auto id = static_cast<size_t>(m_next_arg_id++);
   73|  64.5k|        do_check_arg_id(id);
   74|  64.5k|        return id;
   75|  64.5k|    }
_ZNK3scn2v224basic_scan_parse_contextIcE8on_errorEPKc:
   89|    150|    {
   90|    150|        return detail::handle_error(
   91|    150|            scan_error{scan_error::invalid_format_string, msg});
   92|    150|    }
_ZN3scn2v224basic_scan_parse_contextIcE15do_check_arg_idEm:
  209|  70.0k|{
  210|  70.0k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (210:9): [Folded - Ignored]
  ------------------
  211|  70.0k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   54|      0|    ((major)*10'000'000 + (minor)*10'000 + (patch))
  ------------------
  |  Branch (211:10): [Folded - Ignored]
  |  Branch (211:22): [Folded - Ignored]
  ------------------
  212|       |        // The cast below will cause an error on gcc pre-12
  213|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
  214|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (214:13): [True: 0, False: 0]
  ------------------
  215|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
  216|      0|            SCN_UNLIKELY_ATTR
  217|      0|            on_error("Argument not found");
  218|      0|        }
  219|      0|    }
  220|  70.0k|}
_ZN3scn2v224basic_scan_parse_contextIcE12check_arg_idEm:
   78|  5.64k|    {
   79|  5.64k|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  153|  5.64k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 80, False: 5.56k]
  |  |  ------------------
  ------------------
   80|     80|            on_error(
   81|     80|                "Cannot switch from manual to automatic argument indexing");
   82|     80|            return;
   83|     80|        }
   84|  5.56k|        m_next_arg_id = -1;
   85|  5.56k|        do_check_arg_id(id);
   86|  5.56k|    }
_ZN3scn2v224basic_scan_parse_contextIcE10advance_toEPKc:
   60|  55.8k|    {
   61|  55.8k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
   62|  55.8k|    }
_ZNK3scn2v224basic_scan_parse_contextIcE5beginEv:
   49|   115k|    {
   50|   115k|        return m_format.data();
   51|   115k|    }
_ZN3scn2v224basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
   44|   124k|    {
   45|   124k|    }
_ZN3scn2v224basic_scan_parse_contextIwE11next_arg_idEv:
   65|  49.3k|    {
   66|  49.3k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  153|  49.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 56, False: 49.3k]
  |  |  ------------------
  ------------------
   67|     56|            on_error(
   68|     56|                "Cannot switch from manual to automatic argument indexing");
   69|     56|            return 0;
   70|     56|        }
   71|       |
   72|  49.3k|        auto id = static_cast<size_t>(m_next_arg_id++);
   73|  49.3k|        do_check_arg_id(id);
   74|  49.3k|        return id;
   75|  49.3k|    }
_ZNK3scn2v224basic_scan_parse_contextIwE8on_errorEPKc:
   89|    130|    {
   90|    130|        return detail::handle_error(
   91|    130|            scan_error{scan_error::invalid_format_string, msg});
   92|    130|    }
_ZN3scn2v224basic_scan_parse_contextIwE15do_check_arg_idEm:
  209|  53.5k|{
  210|  53.5k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (210:9): [Folded - Ignored]
  ------------------
  211|  53.5k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   54|      0|    ((major)*10'000'000 + (minor)*10'000 + (patch))
  ------------------
  |  Branch (211:10): [Folded - Ignored]
  |  Branch (211:22): [Folded - Ignored]
  ------------------
  212|       |        // The cast below will cause an error on gcc pre-12
  213|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
  214|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (214:13): [True: 0, False: 0]
  ------------------
  215|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
  216|      0|            SCN_UNLIKELY_ATTR
  217|      0|            on_error("Argument not found");
  218|      0|        }
  219|      0|    }
  220|  53.5k|}
_ZN3scn2v224basic_scan_parse_contextIwE12check_arg_idEm:
   78|  4.34k|    {
   79|  4.34k|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  153|  4.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 74, False: 4.26k]
  |  |  ------------------
  ------------------
   80|     74|            on_error(
   81|     74|                "Cannot switch from manual to automatic argument indexing");
   82|     74|            return;
   83|     74|        }
   84|  4.26k|        m_next_arg_id = -1;
   85|  4.26k|        do_check_arg_id(id);
   86|  4.26k|    }
_ZN3scn2v224basic_scan_parse_contextIwE10advance_toEPKw:
   60|  42.0k|    {
   61|  42.0k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
   62|  42.0k|    }
_ZNK3scn2v224basic_scan_parse_contextIwE5beginEv:
   49|  87.5k|    {
   50|  87.5k|        return m_format.data();
   51|  87.5k|    }

_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_NSt3__117basic_string_viewIcNSR_11char_traitsIcEEEEENKUlSM_T0_E_clIccEEDaSM_SW_:
  153|  2.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSE_T0_E_clIwcEEDaSE_SO_:
  153|  10.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_NSt3__117basic_string_viewIcNSR_11char_traitsIcEEEEENKUlSM_T0_E_clIwcEEDaSM_SW_:
  153|  2.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZNK3scn2v24r_pf10usize_impl2fnclIRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  13.1k|    {
  482|  13.1k|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  13.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  13.1k|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSH_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSF_5beginEEclsr3stdE7declvalIRSK_EEEEE15difference_typeEE4typeELm8EEmNSH_13make_unsignedISR_E4typeEE4typeE_EEOSK_:
  472|  13.1k|    {
  473|  13.1k|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  13.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  13.1k|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|   362k|    {
  482|   362k|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|   362k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|   362k|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSG_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSJ_EEEEE15difference_typeEE4typeELm8EEmNSG_13make_unsignedISQ_E4typeEE4typeE_EEOSJ_:
  472|   362k|    {
  473|   362k|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|   362k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|   362k|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclIPKcEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_l:
  512|  1.30k|    {
  513|  1.30k|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|  1.30k|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implIPKcEEDaT_lNS0_6detail12priority_tagILm0EEE:
  504|  1.30k|    {
  505|  1.30k|        return ranges::next(it, n);
  506|  1.30k|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclIPKcS6_EEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_T0_:
  548|  2.43k|    {
  549|  2.43k|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  2.43k|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implIPKcS6_EEDTclL_ZN4nano6ranges16function_objects8distanceEEfp_fp0_EET_T0_NS0_6detail12priority_tagILm0EEE:
  540|  2.43k|    {
  541|  2.43k|        return ranges::distance(lhs, rhs);
  542|  2.43k|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRKNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  3.48k|    {
  482|  3.48k|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  3.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  3.48k|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRKNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTcmclL_ZN4nano6ranges16function_objects4sizeEEscDtfp_Efp_EcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeIT_EENSD_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSI_EEEEE15difference_typeEE4typeELm8EEmNS5_13make_unsignedISP_E4typeEE4typeE_EEOSI_:
  472|  3.48k|    {
  473|  3.48k|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  3.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  3.48k|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_l:
  512|    822|    {
  513|    822|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|    822|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEEDaT_lNS0_6detail12priority_tagILm0EEE:
  504|    822|    {
  505|    822|        return ranges::next(it, n);
  506|    822|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  11.1k|    {
  482|  11.1k|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  11.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  11.1k|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSG_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSJ_EEEEE15difference_typeEE4typeELm8EEmNSG_13make_unsignedISQ_E4typeEE4typeE_EEOSJ_:
  472|  11.1k|    {
  473|  11.1k|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  11.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  11.1k|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclIPKwEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_l:
  512|  1.15k|    {
  513|  1.15k|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|  1.15k|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implIPKwEEDaT_lNS0_6detail12priority_tagILm0EEE:
  504|  1.15k|    {
  505|  1.15k|        return ranges::next(it, n);
  506|  1.15k|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclIPKwS6_EEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_T0_:
  548|  2.63k|    {
  549|  2.63k|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  2.63k|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implIPKwS6_EEDTclL_ZN4nano6ranges16function_objects8distanceEEfp_fp0_EET_T0_NS0_6detail12priority_tagILm0EEE:
  540|  2.63k|    {
  541|  2.63k|        return ranges::distance(lhs, rhs);
  542|  2.63k|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRKNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  2.58k|    {
  482|  2.58k|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  2.58k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  2.58k|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRKNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTcmclL_ZN4nano6ranges16function_objects4sizeEEscDtfp_Efp_EcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeIT_EENSD_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSI_EEEEE15difference_typeEE4typeELm8EEmNS5_13make_unsignedISP_E4typeEE4typeE_EEOSI_:
  472|  2.58k|    {
  473|  2.58k|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  2.58k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  2.58k|    }

_ZN3scn2v26detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
  342|  2.44k|{
  343|  2.44k|    return {ranges::next(ranges::begin(source), n),
  344|  2.44k|            make_vscan_result_range_end(source)};
  345|  2.44k|}
_ZN3scn2v26detail27make_vscan_result_range_endINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRT_:
  329|  2.44k|{
  330|  2.44k|    return ranges::end(source);
  331|  2.44k|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJcEEC2ES9_ONSt3__15tupleIJcEEE:
  252|    196|    {
  253|    196|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEC2EOSA_:
  103|  2.44k|    {
  104|  2.44k|    }
_ZN3scn2v26detail25scan_result_value_storageIJcEEC2EONSt3__15tupleIJcEEE:
   38|    196|    {
   39|    196|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEC2ES9_ONSA_5tupleIJSG_EEE:
  252|    750|    {
  253|    750|    }
_ZN3scn2v26detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2EONS3_5tupleIJS9_EEE:
   38|  1.55k|    {
   39|  1.55k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEC2EOSH_:
  244|    750|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEED2Ev:
  248|  1.50k|    ~scan_result() = default;
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEC2ES9_ONSA_5tupleIJSG_EEE:
  252|    750|    {
  253|    750|    }
_ZN3scn2v26detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2EONS3_5tupleIJS9_EEE:
   38|  1.55k|    {
   39|  1.55k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEC2EOSH_:
  244|    750|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEED2Ev:
  248|  1.50k|    ~scan_result() = default;
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEC2ES9_ONSA_5tupleIJSE_EEE:
  252|    750|    {
  253|    750|    }
_ZN3scn2v26detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2EONS3_5tupleIJS7_EEE:
   38|    750|    {
   39|    750|    }
_ZN3scn2v26detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
  342|  2.64k|{
  343|  2.64k|    return {ranges::next(ranges::begin(source), n),
  344|  2.64k|            make_vscan_result_range_end(source)};
  345|  2.64k|}
_ZN3scn2v26detail27make_vscan_result_range_endINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRT_:
  329|  2.64k|{
  330|  2.64k|    return ranges::end(source);
  331|  2.64k|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJwEEC2ES9_ONSt3__15tupleIJwEEE:
  252|    220|    {
  253|    220|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEC2EOSA_:
  103|  2.64k|    {
  104|  2.64k|    }
_ZN3scn2v26detail25scan_result_value_storageIJwEEC2EONSt3__15tupleIJwEEE:
   38|    220|    {
   39|    220|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEC2ES9_ONSA_5tupleIJSG_EEE:
  252|    808|    {
  253|    808|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEC2EOSH_:
  244|    808|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEED2Ev:
  248|  1.61k|    ~scan_result() = default;
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEC2ES9_ONSA_5tupleIJSG_EEE:
  252|    808|    {
  253|    808|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEC2EOSH_:
  244|    808|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEED2Ev:
  248|  1.61k|    ~scan_result() = default;
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEC2ES9_ONSA_5tupleIJSE_EEE:
  252|    808|    {
  253|    808|    }
_ZN3scn2v26detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2EONS3_5tupleIJS7_EEE:
   38|    808|    {
   39|    808|    }

_ZN3scn2v24scanIJcERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISD_E4typeEJDpNSW_ISP_E4typeEEEE:
  116|  4.04k|{
  117|  4.04k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  4.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  4.04k|}
_ZN3scn2v26detail9scan_implIcJcERNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEENS0_24basic_scan_format_stringIcS8_JcEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT0_EEEEEOSG_T2_NS3_5tupleIJST_EEE:
   76|  4.04k|{
   77|  4.04k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  4.04k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  4.04k|    static_cast<    \
  |  |  247|  4.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  4.04k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  4.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  4.04k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.04k|    static_cast<    \
  |  |  247|  4.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.04k|    static_cast<    \
  |  |  247|  4.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  4.04k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJcEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|  8.08k|{
   55|  8.08k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  8.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 7.88k, False: 196]
  |  |  ------------------
  ------------------
   56|  7.88k|        return unexpected(result.error());
   57|  7.88k|    }
   58|    196|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|    196|    static_cast<    \
  |  |  247|    196|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|    196|    static_cast<    \
  |  |  247|    196|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  8.08k|}
_ZN3scn2v24scanIJcENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESK_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISE_E4typeEJDpNS10_ISQ_E4typeEEEE:
  200|  4.04k|{
  201|  4.04k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  4.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  4.04k|                                                      format, {});
  203|  4.04k|}
_ZN3scn2v26detail19scan_localized_implIcJcENSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_24basic_scan_format_stringIcS9_JcEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSH_T3_NS3_5tupleIJSU_EEE:
  162|  4.04k|{
  163|  4.04k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  4.04k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  4.04k|    static_cast<    \
  |  |  247|  4.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  4.04k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  4.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  4.04k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.04k|    static_cast<    \
  |  |  247|  4.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.04k|    static_cast<    \
  |  |  247|  4.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  4.04k|}
_ZN3scn2v24scanIJiERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISD_E4typeEJDpNSW_ISP_E4typeEEEE:
  116|  4.04k|{
  117|  4.04k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  4.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  4.04k|}
_ZN3scn2v26detail9scan_implIcJiERNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEENS0_24basic_scan_format_stringIcS8_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT0_EEEEEOSG_T2_NS3_5tupleIJST_EEE:
   76|  4.04k|{
   77|  4.04k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  4.04k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  4.04k|    static_cast<    \
  |  |  247|  4.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  4.04k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  4.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  4.04k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.04k|    static_cast<    \
  |  |  247|  4.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.04k|    static_cast<    \
  |  |  247|  4.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  4.04k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|  8.08k|{
   55|  8.08k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  8.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 8.08k, False: 0]
  |  |  ------------------
  ------------------
   56|  8.08k|        return unexpected(result.error());
   57|  8.08k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  8.08k|}
_ZN3scn2v24scanIJiENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESK_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISE_E4typeEJDpNS10_ISQ_E4typeEEEE:
  200|  4.04k|{
  201|  4.04k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  4.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  4.04k|                                                      format, {});
  203|  4.04k|}
_ZN3scn2v26detail19scan_localized_implIcJiENSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_24basic_scan_format_stringIcS9_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSH_T3_NS3_5tupleIJSU_EEE:
  162|  4.04k|{
  163|  4.04k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  4.04k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  4.04k|    static_cast<    \
  |  |  247|  4.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  4.04k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  4.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  4.04k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.04k|    static_cast<    \
  |  |  247|  4.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.04k|    static_cast<    \
  |  |  247|  4.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  4.04k|}
_ZN3scn2v24scanIJjERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISD_E4typeEJDpNSW_ISP_E4typeEEEE:
  116|  4.04k|{
  117|  4.04k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  4.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  4.04k|}
_ZN3scn2v26detail9scan_implIcJjERNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEENS0_24basic_scan_format_stringIcS8_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT0_EEEEEOSG_T2_NS3_5tupleIJST_EEE:
   76|  4.04k|{
   77|  4.04k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  4.04k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  4.04k|    static_cast<    \
  |  |  247|  4.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  4.04k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  4.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  4.04k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.04k|    static_cast<    \
  |  |  247|  4.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.04k|    static_cast<    \
  |  |  247|  4.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  4.04k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|  8.08k|{
   55|  8.08k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  8.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 8.08k, False: 0]
  |  |  ------------------
  ------------------
   56|  8.08k|        return unexpected(result.error());
   57|  8.08k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  8.08k|}
_ZN3scn2v24scanIJjENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESK_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISE_E4typeEJDpNS10_ISQ_E4typeEEEE:
  200|  4.04k|{
  201|  4.04k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  4.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  4.04k|                                                      format, {});
  203|  4.04k|}
_ZN3scn2v26detail19scan_localized_implIcJjENSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_24basic_scan_format_stringIcS9_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSH_T3_NS3_5tupleIJSU_EEE:
  162|  4.04k|{
  163|  4.04k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  4.04k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  4.04k|    static_cast<    \
  |  |  247|  4.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  4.04k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  4.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  4.04k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.04k|    static_cast<    \
  |  |  247|  4.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.04k|    static_cast<    \
  |  |  247|  4.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  4.04k|}
_ZN3scn2v24scanIJdERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISD_E4typeEJDpNSW_ISP_E4typeEEEE:
  116|  4.04k|{
  117|  4.04k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  4.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  4.04k|}
_ZN3scn2v26detail9scan_implIcJdERNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEENS0_24basic_scan_format_stringIcS8_JdEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT0_EEEEEOSG_T2_NS3_5tupleIJST_EEE:
   76|  4.04k|{
   77|  4.04k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  4.04k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  4.04k|    static_cast<    \
  |  |  247|  4.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  4.04k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  4.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  4.04k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.04k|    static_cast<    \
  |  |  247|  4.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.04k|    static_cast<    \
  |  |  247|  4.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  4.04k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|  8.08k|{
   55|  8.08k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  8.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 8.08k, False: 0]
  |  |  ------------------
  ------------------
   56|  8.08k|        return unexpected(result.error());
   57|  8.08k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  8.08k|}
_ZN3scn2v24scanIJdENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESK_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISE_E4typeEJDpNS10_ISQ_E4typeEEEE:
  200|  4.04k|{
  201|  4.04k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  4.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  4.04k|                                                      format, {});
  203|  4.04k|}
_ZN3scn2v26detail19scan_localized_implIcJdENSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_24basic_scan_format_stringIcS9_JdEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSH_T3_NS3_5tupleIJSU_EEE:
  162|  4.04k|{
  163|  4.04k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  4.04k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  4.04k|    static_cast<    \
  |  |  247|  4.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  4.04k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  4.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  4.04k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.04k|    static_cast<    \
  |  |  247|  4.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.04k|    static_cast<    \
  |  |  247|  4.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  4.04k|}
_ZN3scn2v24scanIJbERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISD_E4typeEJDpNSW_ISP_E4typeEEEE:
  116|  4.04k|{
  117|  4.04k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  4.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  4.04k|}
_ZN3scn2v26detail9scan_implIcJbERNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEENS0_24basic_scan_format_stringIcS8_JbEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT0_EEEEEOSG_T2_NS3_5tupleIJST_EEE:
   76|  4.04k|{
   77|  4.04k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  4.04k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  4.04k|    static_cast<    \
  |  |  247|  4.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  4.04k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  4.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  4.04k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.04k|    static_cast<    \
  |  |  247|  4.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.04k|    static_cast<    \
  |  |  247|  4.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  4.04k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJbEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|  8.08k|{
   55|  8.08k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  8.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 8.08k, False: 0]
  |  |  ------------------
  ------------------
   56|  8.08k|        return unexpected(result.error());
   57|  8.08k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  8.08k|}
_ZN3scn2v24scanIJbENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESK_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISE_E4typeEJDpNS10_ISQ_E4typeEEEE:
  200|  4.04k|{
  201|  4.04k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  4.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  4.04k|                                                      format, {});
  203|  4.04k|}
_ZN3scn2v26detail19scan_localized_implIcJbENSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_24basic_scan_format_stringIcS9_JbEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSH_T3_NS3_5tupleIJSU_EEE:
  162|  4.04k|{
  163|  4.04k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  4.04k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  4.04k|    static_cast<    \
  |  |  247|  4.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  4.04k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  4.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  4.04k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.04k|    static_cast<    \
  |  |  247|  4.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.04k|    static_cast<    \
  |  |  247|  4.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  4.04k|}
_ZN3scn2v24scanIJPvERNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESK_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISE_E4typeEJDpNSX_ISQ_E4typeEEEE:
  116|  4.04k|{
  117|  4.04k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  4.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  4.04k|}
_ZN3scn2v26detail9scan_implIcJPvERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEENS0_24basic_scan_format_stringIcS9_JS3_EEEEENS0_13scan_expectedINS0_11scan_resultINS4_11conditionalIXsr3stdE9is_same_vINS4_9remove_cvINS4_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT0_EEEEEOSH_T2_NS4_5tupleIJSU_EEE:
   76|  4.04k|{
   77|  4.04k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  4.04k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  4.04k|    static_cast<    \
  |  |  247|  4.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  4.04k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  4.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  4.04k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.04k|    static_cast<    \
  |  |  247|  4.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.04k|    static_cast<    \
  |  |  247|  4.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  4.04k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJPvEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSD_ISF_EEONS0_14scan_arg_storeIT0_JSH_EEE:
   54|  8.08k|{
   55|  8.08k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  8.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 8.08k, False: 0]
  |  |  ------------------
  ------------------
   56|  8.08k|        return unexpected(result.error());
   57|  8.08k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  8.08k|}
_ZN3scn2v24scanIJPvENSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISF_E4typeEJDpNS11_ISR_E4typeEEEE:
  200|  4.04k|{
  201|  4.04k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  4.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  4.04k|                                                      format, {});
  203|  4.04k|}
_ZN3scn2v26detail19scan_localized_implIcJPvENSt3__16localeERNS4_17basic_string_viewIcNS4_11char_traitsIcEEEENS0_24basic_scan_format_stringIcSA_JS3_EEEEENS0_13scan_expectedINS0_11scan_resultINS4_11conditionalIXsr3stdE9is_same_vINS4_9remove_cvINS4_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSI_T3_NS4_5tupleIJSV_EEE:
  162|  4.04k|{
  163|  4.04k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  4.04k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  4.04k|    static_cast<    \
  |  |  247|  4.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  4.04k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  4.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  4.04k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.04k|    static_cast<    \
  |  |  247|  4.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.04k|    static_cast<    \
  |  |  247|  4.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  4.04k|}
_ZN3scn2v24scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIcS5_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
  116|  4.04k|{
  117|  4.04k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  4.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  4.04k|}
_ZN3scn2v26detail9scan_implIcJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEERNS3_17basic_string_viewIcS6_EENS0_24basic_scan_format_stringIcSC_JS9_EEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEEOSK_T2_NS3_5tupleIJSX_EEE:
   76|  4.04k|{
   77|  4.04k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  4.04k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  4.04k|    static_cast<    \
  |  |  247|  4.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  4.04k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  4.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  4.04k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.04k|    static_cast<    \
  |  |  247|  4.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.04k|    static_cast<    \
  |  |  247|  4.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  4.04k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSJ_ISL_EEONS0_14scan_arg_storeIT0_JSN_EEE:
   54|  8.08k|{
   55|  8.08k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  8.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 7.33k, False: 750]
  |  |  ------------------
  ------------------
   56|  7.33k|        return unexpected(result.error());
   57|  7.33k|    }
   58|    750|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|    750|    static_cast<    \
  |  |  247|    750|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|    750|    static_cast<    \
  |  |  247|    750|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  8.08k|}
_ZN3scn2v24scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIcS5_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  200|  4.04k|{
  201|  4.04k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  4.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  4.04k|                                                      format, {});
  203|  4.04k|}
_ZN3scn2v26detail19scan_localized_implIcJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEENS3_6localeERNS3_17basic_string_viewIcS6_EENS0_24basic_scan_format_stringIcSD_JS9_EEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSL_T3_NS3_5tupleIJSY_EEE:
  162|  4.04k|{
  163|  4.04k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  4.04k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  4.04k|    static_cast<    \
  |  |  247|  4.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  4.04k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  4.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  4.04k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.04k|    static_cast<    \
  |  |  247|  4.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.04k|    static_cast<    \
  |  |  247|  4.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  4.04k|}
_ZN3scn2v24scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIcNS4_IcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISI_E4typeEJDpNS11_ISU_E4typeEEEE:
  116|  4.04k|{
  117|  4.04k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  4.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  4.04k|}
_ZN3scn2v26detail9scan_implIcJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEERNS3_17basic_string_viewIcNS5_IcEEEENS0_24basic_scan_format_stringIcSD_JS9_EEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT0_EEEEEOSL_T2_NS3_5tupleIJSY_EEE:
   76|  4.04k|{
   77|  4.04k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  4.04k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  4.04k|    static_cast<    \
  |  |  247|  4.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  4.04k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  4.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  4.04k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.04k|    static_cast<    \
  |  |  247|  4.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.04k|    static_cast<    \
  |  |  247|  4.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  4.04k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSJ_ISL_EEONS0_14scan_arg_storeIT0_JSN_EEE:
   54|  8.08k|{
   55|  8.08k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  8.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 7.33k, False: 750]
  |  |  ------------------
  ------------------
   56|  7.33k|        return unexpected(result.error());
   57|  7.33k|    }
   58|    750|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|    750|    static_cast<    \
  |  |  247|    750|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|    750|    static_cast<    \
  |  |  247|    750|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  8.08k|}
_ZN3scn2v24scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIcNS4_IcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISJ_E4typeEJDpNS15_ISV_E4typeEEEE:
  200|  4.04k|{
  201|  4.04k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  4.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  4.04k|                                                      format, {});
  203|  4.04k|}
_ZN3scn2v26detail19scan_localized_implIcJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEENS3_6localeERNS3_17basic_string_viewIcNS5_IcEEEENS0_24basic_scan_format_stringIcSE_JS9_EEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSM_T3_NS3_5tupleIJSZ_EEE:
  162|  4.04k|{
  163|  4.04k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  4.04k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  4.04k|    static_cast<    \
  |  |  247|  4.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  4.04k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  4.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  4.04k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.04k|    static_cast<    \
  |  |  247|  4.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.04k|    static_cast<    \
  |  |  247|  4.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  4.04k|}
_ZN3scn2v24scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEERS6_vEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISD_E4typeEJDpNSW_ISP_E4typeEEEE:
  116|  4.04k|{
  117|  4.04k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  4.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  4.04k|}
_ZN3scn2v26detail9scan_implIcJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEERS7_NS0_24basic_scan_format_stringIcS8_JS7_EEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT0_EEEEEOSG_T2_NS3_5tupleIJST_EEE:
   76|  4.04k|{
   77|  4.04k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  4.04k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  4.04k|    static_cast<    \
  |  |  247|  4.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  4.04k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  4.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  4.04k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.04k|    static_cast<    \
  |  |  247|  4.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.04k|    static_cast<    \
  |  |  247|  4.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  4.04k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSH_ISJ_EEONS0_14scan_arg_storeIT0_JSL_EEE:
   54|  8.08k|{
   55|  8.08k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  8.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 7.33k, False: 750]
  |  |  ------------------
  ------------------
   56|  7.33k|        return unexpected(result.error());
   57|  7.33k|    }
   58|    750|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|    750|    static_cast<    \
  |  |  247|    750|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|    750|    static_cast<    \
  |  |  247|    750|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  8.08k|}
_ZN3scn2v24scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeERS6_vvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESK_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISE_E4typeEJDpNS10_ISQ_E4typeEEEE:
  200|  4.04k|{
  201|  4.04k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  4.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  4.04k|                                                      format, {});
  203|  4.04k|}
_ZN3scn2v26detail19scan_localized_implIcJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEENS3_6localeERS7_NS0_24basic_scan_format_stringIcS9_JS7_EEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSH_T3_NS3_5tupleIJSU_EEE:
  162|  4.04k|{
  163|  4.04k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  4.04k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  4.04k|    static_cast<    \
  |  |  247|  4.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  4.04k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  4.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  4.04k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.04k|    static_cast<    \
  |  |  247|  4.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.04k|    static_cast<    \
  |  |  247|  4.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  4.04k|}
_ZN3scn2v26detail9scan_implIwJwERNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEENS0_24basic_scan_format_stringIwS8_JwEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT0_EEEEEOSG_T2_NS3_5tupleIJST_EEE:
   76|  6.94k|{
   77|  6.94k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  6.94k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  6.94k|    static_cast<    \
  |  |  247|  6.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  6.94k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  6.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  6.94k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  6.94k|    static_cast<    \
  |  |  247|  6.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  6.94k|    static_cast<    \
  |  |  247|  6.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  6.94k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJwEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|  13.8k|{
   55|  13.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 13.6k, False: 220]
  |  |  ------------------
  ------------------
   56|  13.6k|        return unexpected(result.error());
   57|  13.6k|    }
   58|    220|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|    220|    static_cast<    \
  |  |  247|    220|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|    220|    static_cast<    \
  |  |  247|    220|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  13.8k|}
_ZN3scn2v26detail19scan_localized_implIwJwENSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_24basic_scan_format_stringIwS9_JwEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSH_T3_NS3_5tupleIJSU_EEE:
  162|  6.94k|{
  163|  6.94k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  6.94k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  6.94k|    static_cast<    \
  |  |  247|  6.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  6.94k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  6.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  6.94k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  6.94k|    static_cast<    \
  |  |  247|  6.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  6.94k|    static_cast<    \
  |  |  247|  6.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  6.94k|}
_ZN3scn2v26detail9scan_implIwJiERNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEENS0_24basic_scan_format_stringIwS8_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT0_EEEEEOSG_T2_NS3_5tupleIJST_EEE:
   76|  6.94k|{
   77|  6.94k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  6.94k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  6.94k|    static_cast<    \
  |  |  247|  6.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  6.94k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  6.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  6.94k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  6.94k|    static_cast<    \
  |  |  247|  6.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  6.94k|    static_cast<    \
  |  |  247|  6.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  6.94k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|  13.8k|{
   55|  13.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 13.8k, False: 0]
  |  |  ------------------
  ------------------
   56|  13.8k|        return unexpected(result.error());
   57|  13.8k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  13.8k|}
_ZN3scn2v26detail19scan_localized_implIwJiENSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_24basic_scan_format_stringIwS9_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSH_T3_NS3_5tupleIJSU_EEE:
  162|  6.94k|{
  163|  6.94k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  6.94k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  6.94k|    static_cast<    \
  |  |  247|  6.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  6.94k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  6.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  6.94k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  6.94k|    static_cast<    \
  |  |  247|  6.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  6.94k|    static_cast<    \
  |  |  247|  6.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  6.94k|}
_ZN3scn2v26detail9scan_implIwJjERNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEENS0_24basic_scan_format_stringIwS8_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT0_EEEEEOSG_T2_NS3_5tupleIJST_EEE:
   76|  6.94k|{
   77|  6.94k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  6.94k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  6.94k|    static_cast<    \
  |  |  247|  6.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  6.94k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  6.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  6.94k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  6.94k|    static_cast<    \
  |  |  247|  6.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  6.94k|    static_cast<    \
  |  |  247|  6.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  6.94k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|  13.8k|{
   55|  13.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 13.8k, False: 0]
  |  |  ------------------
  ------------------
   56|  13.8k|        return unexpected(result.error());
   57|  13.8k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  13.8k|}
_ZN3scn2v26detail19scan_localized_implIwJjENSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_24basic_scan_format_stringIwS9_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSH_T3_NS3_5tupleIJSU_EEE:
  162|  6.94k|{
  163|  6.94k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  6.94k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  6.94k|    static_cast<    \
  |  |  247|  6.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  6.94k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  6.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  6.94k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  6.94k|    static_cast<    \
  |  |  247|  6.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  6.94k|    static_cast<    \
  |  |  247|  6.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  6.94k|}
_ZN3scn2v26detail9scan_implIwJdERNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEENS0_24basic_scan_format_stringIwS8_JdEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT0_EEEEEOSG_T2_NS3_5tupleIJST_EEE:
   76|  6.94k|{
   77|  6.94k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  6.94k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  6.94k|    static_cast<    \
  |  |  247|  6.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  6.94k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  6.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  6.94k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  6.94k|    static_cast<    \
  |  |  247|  6.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  6.94k|    static_cast<    \
  |  |  247|  6.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  6.94k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|  13.8k|{
   55|  13.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 13.8k, False: 0]
  |  |  ------------------
  ------------------
   56|  13.8k|        return unexpected(result.error());
   57|  13.8k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  13.8k|}
_ZN3scn2v26detail19scan_localized_implIwJdENSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_24basic_scan_format_stringIwS9_JdEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSH_T3_NS3_5tupleIJSU_EEE:
  162|  6.94k|{
  163|  6.94k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  6.94k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  6.94k|    static_cast<    \
  |  |  247|  6.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  6.94k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  6.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  6.94k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  6.94k|    static_cast<    \
  |  |  247|  6.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  6.94k|    static_cast<    \
  |  |  247|  6.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  6.94k|}
_ZN3scn2v26detail9scan_implIwJbERNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEENS0_24basic_scan_format_stringIwS8_JbEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT0_EEEEEOSG_T2_NS3_5tupleIJST_EEE:
   76|  6.94k|{
   77|  6.94k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  6.94k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  6.94k|    static_cast<    \
  |  |  247|  6.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  6.94k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  6.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  6.94k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  6.94k|    static_cast<    \
  |  |  247|  6.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  6.94k|    static_cast<    \
  |  |  247|  6.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  6.94k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJbEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|  13.8k|{
   55|  13.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 13.8k, False: 0]
  |  |  ------------------
  ------------------
   56|  13.8k|        return unexpected(result.error());
   57|  13.8k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  13.8k|}
_ZN3scn2v26detail19scan_localized_implIwJbENSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_24basic_scan_format_stringIwS9_JbEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSH_T3_NS3_5tupleIJSU_EEE:
  162|  6.94k|{
  163|  6.94k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  6.94k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  6.94k|    static_cast<    \
  |  |  247|  6.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  6.94k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  6.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  6.94k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  6.94k|    static_cast<    \
  |  |  247|  6.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  6.94k|    static_cast<    \
  |  |  247|  6.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  6.94k|}
_ZN3scn2v26detail9scan_implIwJPvERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEENS0_24basic_scan_format_stringIwS9_JS3_EEEEENS0_13scan_expectedINS0_11scan_resultINS4_11conditionalIXsr3stdE9is_same_vINS4_9remove_cvINS4_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT0_EEEEEOSH_T2_NS4_5tupleIJSU_EEE:
   76|  6.94k|{
   77|  6.94k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  6.94k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  6.94k|    static_cast<    \
  |  |  247|  6.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  6.94k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  6.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  6.94k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  6.94k|    static_cast<    \
  |  |  247|  6.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  6.94k|    static_cast<    \
  |  |  247|  6.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  6.94k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJPvEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSD_ISF_EEONS0_14scan_arg_storeIT0_JSH_EEE:
   54|  13.8k|{
   55|  13.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 13.8k, False: 0]
  |  |  ------------------
  ------------------
   56|  13.8k|        return unexpected(result.error());
   57|  13.8k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  13.8k|}
_ZN3scn2v26detail19scan_localized_implIwJPvENSt3__16localeERNS4_17basic_string_viewIwNS4_11char_traitsIwEEEENS0_24basic_scan_format_stringIwSA_JS3_EEEEENS0_13scan_expectedINS0_11scan_resultINS4_11conditionalIXsr3stdE9is_same_vINS4_9remove_cvINS4_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSI_T3_NS4_5tupleIJSV_EEE:
  162|  6.94k|{
  163|  6.94k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  6.94k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  6.94k|    static_cast<    \
  |  |  247|  6.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  6.94k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  6.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  6.94k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  6.94k|    static_cast<    \
  |  |  247|  6.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  6.94k|    static_cast<    \
  |  |  247|  6.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  6.94k|}
_ZN3scn2v26detail9scan_implIwJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEERNS3_17basic_string_viewIwNS5_IwEEEENS0_24basic_scan_format_stringIwSD_JS9_EEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT0_EEEEEOSL_T2_NS3_5tupleIJSY_EEE:
   76|  6.94k|{
   77|  6.94k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  6.94k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  6.94k|    static_cast<    \
  |  |  247|  6.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  6.94k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  6.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  6.94k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  6.94k|    static_cast<    \
  |  |  247|  6.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  6.94k|    static_cast<    \
  |  |  247|  6.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  6.94k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSJ_ISL_EEONS0_14scan_arg_storeIT0_JSN_EEE:
   54|  13.8k|{
   55|  13.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 13.0k, False: 808]
  |  |  ------------------
  ------------------
   56|  13.0k|        return unexpected(result.error());
   57|  13.0k|    }
   58|    808|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|    808|    static_cast<    \
  |  |  247|    808|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|    808|    static_cast<    \
  |  |  247|    808|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  13.8k|}
_ZN3scn2v26detail19scan_localized_implIwJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEENS3_6localeERNS3_17basic_string_viewIwNS5_IwEEEENS0_24basic_scan_format_stringIwSE_JS9_EEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSM_T3_NS3_5tupleIJSZ_EEE:
  162|  6.94k|{
  163|  6.94k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  6.94k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  6.94k|    static_cast<    \
  |  |  247|  6.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  6.94k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  6.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  6.94k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  6.94k|    static_cast<    \
  |  |  247|  6.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  6.94k|    static_cast<    \
  |  |  247|  6.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  6.94k|}
_ZN3scn2v26detail9scan_implIwJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEERNS3_17basic_string_viewIwS6_EENS0_24basic_scan_format_stringIwSC_JS9_EEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEEOSK_T2_NS3_5tupleIJSX_EEE:
   76|  6.94k|{
   77|  6.94k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  6.94k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  6.94k|    static_cast<    \
  |  |  247|  6.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  6.94k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  6.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  6.94k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  6.94k|    static_cast<    \
  |  |  247|  6.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  6.94k|    static_cast<    \
  |  |  247|  6.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  6.94k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSJ_ISL_EEONS0_14scan_arg_storeIT0_JSN_EEE:
   54|  13.8k|{
   55|  13.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 13.0k, False: 808]
  |  |  ------------------
  ------------------
   56|  13.0k|        return unexpected(result.error());
   57|  13.0k|    }
   58|    808|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|    808|    static_cast<    \
  |  |  247|    808|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|    808|    static_cast<    \
  |  |  247|    808|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  13.8k|}
_ZN3scn2v26detail19scan_localized_implIwJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEENS3_6localeERNS3_17basic_string_viewIwS6_EENS0_24basic_scan_format_stringIwSD_JS9_EEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSL_T3_NS3_5tupleIJSY_EEE:
  162|  6.94k|{
  163|  6.94k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  6.94k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  6.94k|    static_cast<    \
  |  |  247|  6.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  6.94k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  6.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  6.94k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  6.94k|    static_cast<    \
  |  |  247|  6.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  6.94k|    static_cast<    \
  |  |  247|  6.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  6.94k|}
_ZN3scn2v26detail9scan_implIwJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEERS7_NS0_24basic_scan_format_stringIwS8_JS7_EEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT0_EEEEEOSG_T2_NS3_5tupleIJST_EEE:
   76|  6.94k|{
   77|  6.94k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  6.94k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  6.94k|    static_cast<    \
  |  |  247|  6.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  6.94k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  6.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  6.94k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  6.94k|    static_cast<    \
  |  |  247|  6.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  6.94k|    static_cast<    \
  |  |  247|  6.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  6.94k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSH_ISJ_EEONS0_14scan_arg_storeIT0_JSL_EEE:
   54|  13.8k|{
   55|  13.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 13.0k, False: 808]
  |  |  ------------------
  ------------------
   56|  13.0k|        return unexpected(result.error());
   57|  13.0k|    }
   58|    808|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|    808|    static_cast<    \
  |  |  247|    808|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|    808|    static_cast<    \
  |  |  247|    808|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  13.8k|}
_ZN3scn2v26detail19scan_localized_implIwJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEENS3_6localeERS7_NS0_24basic_scan_format_stringIwS9_JS7_EEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSH_T3_NS3_5tupleIJSU_EEE:
  162|  6.94k|{
  163|  6.94k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  6.94k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  6.94k|    static_cast<    \
  |  |  247|  6.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  6.94k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  6.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  6.94k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  6.94k|    static_cast<    \
  |  |  247|  6.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  6.94k|    static_cast<    \
  |  |  247|  6.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  6.94k|}

_ZN3scn2v26detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
   90|  3.23M|{
   91|  3.23M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  242|  3.23M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.23M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   92|       |
   93|      0|    const auto is_trailing_code_unit = [](char ch) {
   94|  3.23M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
   95|  3.23M|    };
   96|       |
   97|  3.23M|    if (input.size() == 1) {
  ------------------
  |  Branch (97:9): [True: 2.91M, False: 318k]
  ------------------
   98|  2.91M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (98:13): [True: 0, False: 2.91M]
  ------------------
   99|      0|            SCN_UNLIKELY_ATTR
  100|      0|            return invalid_code_point;
  101|      0|        }
  102|  2.91M|        return static_cast<char32_t>(input[0]);
  103|  2.91M|    }
  104|       |
  105|   318k|    if (input.size() == 2) {
  ------------------
  |  Branch (105:9): [True: 299k, False: 18.7k]
  ------------------
  106|   299k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (106:13): [True: 0, False: 299k]
  ------------------
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|            return invalid_code_point;
  109|      0|        }
  110|   299k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (110:13): [True: 80, False: 299k]
  ------------------
  111|     80|            SCN_UNLIKELY_ATTR
  112|     80|            return invalid_code_point;
  113|     80|        }
  114|       |
  115|   299k|        char32_t cp{};
  116|   299k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
  117|   299k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
  118|   299k|        return cp;
  119|   299k|    }
  120|       |
  121|  18.7k|    if (input.size() == 3) {
  ------------------
  |  Branch (121:9): [True: 9.72k, False: 8.97k]
  ------------------
  122|  9.72k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (122:13): [True: 0, False: 9.72k]
  ------------------
  123|      0|            SCN_UNLIKELY_ATTR
  124|      0|            return invalid_code_point;
  125|      0|        }
  126|  9.72k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (126:13): [True: 34, False: 9.69k]
  ------------------
  127|  9.72k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (127:13): [True: 34, False: 9.65k]
  ------------------
  128|     68|            SCN_UNLIKELY_ATTR
  129|     68|            return invalid_code_point;
  130|     68|        }
  131|       |
  132|  9.65k|        char32_t cp{};
  133|  9.65k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
  134|  9.65k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
  135|  9.65k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
  136|  9.65k|        return cp;
  137|  9.72k|    }
  138|       |
  139|  8.97k|    if (input.size() == 4) {
  ------------------
  |  Branch (139:9): [True: 8.97k, False: 0]
  ------------------
  140|  8.97k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (140:13): [True: 0, False: 8.97k]
  ------------------
  141|      0|            SCN_UNLIKELY_ATTR
  142|      0|            return invalid_code_point;
  143|      0|        }
  144|  8.97k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (144:13): [True: 40, False: 8.93k]
  ------------------
  145|     40|            SCN_UNLIKELY_ATTR
  146|     40|            return invalid_code_point;
  147|     40|        }
  148|  8.93k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (148:13): [True: 34, False: 8.90k]
  ------------------
  149|  8.93k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (149:13): [True: 34, False: 8.87k]
  ------------------
  150|  8.93k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (150:13): [True: 34, False: 8.83k]
  ------------------
  151|    102|            SCN_UNLIKELY_ATTR
  152|    102|            return invalid_code_point;
  153|    102|        }
  154|       |
  155|  8.83k|        char32_t cp{};
  156|  8.83k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
  157|  8.83k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
  158|  8.83k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
  159|  8.83k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
  160|  8.83k|        return cp;
  161|  8.93k|    }
  162|       |
  163|      0|    SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  164|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  165|  8.97k|}
_ZN3scn2v26detail43utf_code_point_length_by_starting_code_unitIcEEmT_:
   71|  4.90M|{
   72|  4.90M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (72:19): [Folded - Ignored]
  ------------------
   73|  4.90M|        return utf8_code_point_length_by_starting_code_unit(ch);
   74|  4.90M|    }
   75|  4.90M|    else if constexpr (sizeof(U) == 2) {
   76|  4.90M|        return utf16_code_point_length_by_starting_code_unit(ch);
   77|  4.90M|    }
   78|  4.90M|    else {
   79|       |        // utf-32
   80|  4.90M|        static_assert(sizeof(U) == 4);
   81|  4.90M|        SCN_UNUSED(ch);
   82|  4.90M|        return 1;
   83|  4.90M|    }
   84|  4.90M|}
_ZN3scn2v26detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
   35|  4.90M|{
   36|  4.90M|    static_assert(sizeof(U8) == 1);
   37|       |
   38|  4.90M|    SCN_GCC_COMPAT_PUSH
   39|  4.90M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
   40|  4.90M|    constexpr char lengths[] =
   41|  4.90M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
   42|  4.90M|        "\1\1\1\1\1\1\1\1"
   43|  4.90M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
   44|       |                            // byte
   45|  4.90M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
   46|  4.90M|        "\3\3"              // highest bits 1110 -> 3-byte cp
   47|  4.90M|        "\4";               // highest bits 11110 -> 4-byte cp
   48|  4.90M|    return lengths[static_cast<unsigned char>(ch) >> 3];
   49|  4.90M|    SCN_GCC_COMPAT_POP
   50|  4.90M|}
_ZN3scn2v26detail32decode_utf_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
  247|  3.23M|{
  248|  3.23M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (248:19): [Folded - Ignored]
  ------------------
  249|  3.23M|        return decode_utf8_code_point_exhaustive(input);
  250|  3.23M|    }
  251|  3.23M|    else if constexpr (sizeof(CharT) == 2) {
  252|  3.23M|        return decode_utf16_code_point_exhaustive(input);
  253|  3.23M|    }
  254|  3.23M|    else {
  255|  3.23M|        SCN_EXPECT(input.size() == 1);
  256|  3.23M|        return static_cast<char32_t>(input.front());
  257|  3.23M|    }
  258|  3.23M|}
_ZZN3scn2v26detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
   93|   345k|    const auto is_trailing_code_unit = [](char ch) {
   94|   345k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
   95|   345k|    };
_ZN3scn2v26detail43utf_code_point_length_by_starting_code_unitIwEEmT_:
   71|  9.76M|{
   72|  9.76M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (72:19): [Folded - Ignored]
  ------------------
   73|  9.76M|        return utf8_code_point_length_by_starting_code_unit(ch);
   74|  9.76M|    }
   75|  9.76M|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (75:24): [Folded - Ignored]
  ------------------
   76|  9.76M|        return utf16_code_point_length_by_starting_code_unit(ch);
   77|  9.76M|    }
   78|  9.76M|    else {
   79|       |        // utf-32
   80|  9.76M|        static_assert(sizeof(U) == 4);
   81|  9.76M|        SCN_UNUSED(ch);
  ------------------
  |  |  227|  9.76M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   82|  9.76M|        return 1;
   83|  9.76M|    }
   84|  9.76M|}
_ZN3scn2v26detail32decode_utf_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
  247|  2.82M|{
  248|  2.82M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (248:19): [Folded - Ignored]
  ------------------
  249|  2.82M|        return decode_utf8_code_point_exhaustive(input);
  250|  2.82M|    }
  251|  2.82M|    else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (251:24): [Folded - Ignored]
  ------------------
  252|  2.82M|        return decode_utf16_code_point_exhaustive(input);
  253|  2.82M|    }
  254|  2.82M|    else {
  255|  2.82M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  242|  2.82M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.82M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  256|      0|        return static_cast<char32_t>(input.front());
  257|  2.82M|    }
  258|  2.82M|}

_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  10.0k|{
   36|  10.0k|#define SCN_VISIT(Type)                                         \
   37|  10.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  10.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  10.0k|    }                                                           \
   40|  10.0k|    else {                                                      \
   41|  10.0k|        return vis(monostate_val);                              \
   42|  10.0k|    }
   43|       |
   44|  10.0k|    monostate monostate_val{};
   45|       |
   46|  10.0k|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 10.0k]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 10.0k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  1.12k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 1.12k, False: 8.96k]
  ------------------
   52|  1.12k|            SCN_VISIT(int);
  ------------------
  |  |   37|  1.12k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  1.12k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  1.12k|    }                                                           \
  |  |   40|  1.12k|    else {                                                      \
  |  |   41|  1.12k|        return vis(monostate_val);                              \
  |  |   42|  1.12k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 10.0k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 10.0k]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 10.0k]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 10.0k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  1.12k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 1.12k, False: 8.96k]
  ------------------
   62|  1.12k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  1.12k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  1.12k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  1.12k|    }                                                           \
  |  |   40|  1.12k|    else {                                                      \
  |  |   41|  1.12k|        return vis(monostate_val);                              \
  |  |   42|  1.12k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 10.0k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 10.0k]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|  1.12k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 1.12k, False: 8.96k]
  ------------------
   68|  1.12k|            SCN_VISIT(void*);
  ------------------
  |  |   37|  1.12k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  1.12k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  1.12k|    }                                                           \
  |  |   40|  1.12k|    else {                                                      \
  |  |   41|  1.12k|        return vis(monostate_val);                              \
  |  |   42|  1.12k|    }
  ------------------
   69|  1.12k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 1.12k, False: 8.96k]
  ------------------
   70|  1.12k|            SCN_VISIT(bool);
  ------------------
  |  |   37|  1.12k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  1.12k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  1.12k|    }                                                           \
  |  |   40|  1.12k|    else {                                                      \
  |  |   41|  1.12k|        return vis(monostate_val);                              \
  |  |   42|  1.12k|    }
  ------------------
   71|  1.12k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 1.12k, False: 8.96k]
  ------------------
   72|  1.12k|            SCN_VISIT(char);
  ------------------
  |  |   37|  1.12k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  1.12k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  1.12k|    }                                                           \
  |  |   40|  1.12k|    else {                                                      \
  |  |   41|  1.12k|        return vis(monostate_val);                              \
  |  |   42|  1.12k|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 10.0k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 10.0k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 10.0k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|  1.12k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 1.12k, False: 8.96k]
  ------------------
   80|  1.12k|            SCN_VISIT(double);
  ------------------
  |  |   37|  1.12k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  1.12k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  1.12k|    }                                                           \
  |  |   40|  1.12k|    else {                                                      \
  |  |   41|  1.12k|        return vis(monostate_val);                              \
  |  |   42|  1.12k|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 10.0k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|  1.12k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 1.12k, False: 8.96k]
  ------------------
   84|  1.12k|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|  1.12k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  1.12k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  1.12k|    }                                                           \
  |  |   40|  1.12k|    else {                                                      \
  |  |   41|  1.12k|        return vis(monostate_val);                              \
  |  |   42|  1.12k|    }
  ------------------
   85|  1.12k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 1.12k, False: 8.96k]
  ------------------
   86|  1.12k|            SCN_VISIT(std::string);
  ------------------
  |  |   37|  1.12k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  1.12k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  1.12k|    }                                                           \
  |  |   40|  1.12k|    else {                                                      \
  |  |   41|  1.12k|        return vis(monostate_val);                              \
  |  |   42|  1.12k|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 10.0k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|  1.12k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 1.12k, False: 8.96k]
  ------------------
   90|  1.12k|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|  1.12k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  1.12k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  1.12k|    }                                                           \
  |  |   40|  1.12k|    else {                                                      \
  |  |   41|  1.12k|        return vis(monostate_val);                              \
  |  |   42|  1.12k|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 10.0k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 10.0k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 10.0k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 10.0k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 10.0k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  10.0k|            SCN_CLANG_POP
  114|  10.0k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  10.0k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  55.5k|{
   36|  55.5k|#define SCN_VISIT(Type)                                         \
   37|  55.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  55.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  55.5k|    }                                                           \
   40|  55.5k|    else {                                                      \
   41|  55.5k|        return vis(monostate_val);                              \
   42|  55.5k|    }
   43|       |
   44|  55.5k|    monostate monostate_val{};
   45|       |
   46|  55.5k|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 55.5k]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 55.5k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  6.21k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 6.21k, False: 49.2k]
  ------------------
   52|  6.21k|            SCN_VISIT(int);
  ------------------
  |  |   37|  6.21k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  6.21k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  6.21k|    }                                                           \
  |  |   40|  6.21k|    else {                                                      \
  |  |   41|  6.21k|        return vis(monostate_val);                              \
  |  |   42|  6.21k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 55.5k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 55.5k]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 55.5k]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 55.5k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  6.21k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 6.21k, False: 49.2k]
  ------------------
   62|  6.21k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  6.21k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  6.21k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  6.21k|    }                                                           \
  |  |   40|  6.21k|    else {                                                      \
  |  |   41|  6.21k|        return vis(monostate_val);                              \
  |  |   42|  6.21k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 55.5k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 55.5k]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|  6.13k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 6.13k, False: 49.3k]
  ------------------
   68|  6.13k|            SCN_VISIT(void*);
  ------------------
  |  |   37|  6.13k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  6.13k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  6.13k|    }                                                           \
  |  |   40|  6.13k|    else {                                                      \
  |  |   41|  6.13k|        return vis(monostate_val);                              \
  |  |   42|  6.13k|    }
  ------------------
   69|  6.21k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 6.21k, False: 49.2k]
  ------------------
   70|  6.21k|            SCN_VISIT(bool);
  ------------------
  |  |   37|  6.21k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  6.21k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  6.21k|    }                                                           \
  |  |   40|  6.21k|    else {                                                      \
  |  |   41|  6.21k|        return vis(monostate_val);                              \
  |  |   42|  6.21k|    }
  ------------------
   71|  6.13k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 6.13k, False: 49.3k]
  ------------------
   72|  6.13k|            SCN_VISIT(char);
  ------------------
  |  |   37|  6.13k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  6.13k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  6.13k|    }                                                           \
  |  |   40|  6.13k|    else {                                                      \
  |  |   41|  6.13k|        return vis(monostate_val);                              \
  |  |   42|  6.13k|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 55.5k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 55.5k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 55.5k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|  6.21k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 6.21k, False: 49.2k]
  ------------------
   80|  6.21k|            SCN_VISIT(double);
  ------------------
  |  |   37|  6.21k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  6.21k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  6.21k|    }                                                           \
  |  |   40|  6.21k|    else {                                                      \
  |  |   41|  6.21k|        return vis(monostate_val);                              \
  |  |   42|  6.21k|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 55.5k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|  6.13k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 6.13k, False: 49.3k]
  ------------------
   84|  6.13k|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|  6.13k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  6.13k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  6.13k|    }                                                           \
  |  |   40|  6.13k|    else {                                                      \
  |  |   41|  6.13k|        return vis(monostate_val);                              \
  |  |   42|  6.13k|    }
  ------------------
   85|  6.13k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 6.13k, False: 49.3k]
  ------------------
   86|  6.13k|            SCN_VISIT(std::string);
  ------------------
  |  |   37|  6.13k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  6.13k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  6.13k|    }                                                           \
  |  |   40|  6.13k|    else {                                                      \
  |  |   41|  6.13k|        return vis(monostate_val);                              \
  |  |   42|  6.13k|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 55.5k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|  6.13k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 6.13k, False: 49.3k]
  ------------------
   90|  6.13k|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|  6.13k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  6.13k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  6.13k|    }                                                           \
  |  |   40|  6.13k|    else {                                                      \
  |  |   41|  6.13k|        return vis(monostate_val);                              \
  |  |   42|  6.13k|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 55.5k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 55.5k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 55.5k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 55.5k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 55.5k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  55.5k|            SCN_CLANG_POP
  114|  55.5k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  55.5k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  7.84k|{
   36|  7.84k|#define SCN_VISIT(Type)                                         \
   37|  7.84k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  7.84k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  7.84k|    }                                                           \
   40|  7.84k|    else {                                                      \
   41|  7.84k|        return vis(monostate_val);                              \
   42|  7.84k|    }
   43|       |
   44|  7.84k|    monostate monostate_val{};
   45|       |
   46|  7.84k|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 7.84k]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 7.84k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|    872|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 872, False: 6.97k]
  ------------------
   52|    872|            SCN_VISIT(int);
  ------------------
  |  |   37|    872|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|    872|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|    872|    }                                                           \
  |  |   40|    872|    else {                                                      \
  |  |   41|    872|        return vis(monostate_val);                              \
  |  |   42|    872|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 7.84k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 7.84k]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 7.84k]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 7.84k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|    872|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 872, False: 6.97k]
  ------------------
   62|    872|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|    872|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|    872|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|    872|    }                                                           \
  |  |   40|    872|    else {                                                      \
  |  |   41|    872|        return vis(monostate_val);                              \
  |  |   42|    872|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 7.84k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 7.84k]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|    872|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 872, False: 6.97k]
  ------------------
   68|    872|            SCN_VISIT(void*);
  ------------------
  |  |   37|    872|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|    872|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|    872|    }                                                           \
  |  |   40|    872|    else {                                                      \
  |  |   41|    872|        return vis(monostate_val);                              \
  |  |   42|    872|    }
  ------------------
   69|    872|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 872, False: 6.97k]
  ------------------
   70|    872|            SCN_VISIT(bool);
  ------------------
  |  |   37|    872|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|    872|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|    872|    }                                                           \
  |  |   40|    872|    else {                                                      \
  |  |   41|    872|        return vis(monostate_val);                              \
  |  |   42|    872|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 7.84k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|    872|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 872, False: 6.97k]
  ------------------
   74|    872|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|    872|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|    872|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|    872|    }                                                           \
  |  |   40|    872|    else {                                                      \
  |  |   41|    872|        return vis(monostate_val);                              \
  |  |   42|    872|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 7.84k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 7.84k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|    872|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 872, False: 6.97k]
  ------------------
   80|    872|            SCN_VISIT(double);
  ------------------
  |  |   37|    872|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|    872|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|    872|    }                                                           \
  |  |   40|    872|    else {                                                      \
  |  |   41|    872|        return vis(monostate_val);                              \
  |  |   42|    872|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 7.84k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 7.84k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|    872|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 872, False: 6.97k]
  ------------------
   86|    872|            SCN_VISIT(std::string);
  ------------------
  |  |   37|    872|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|    872|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|    872|    }                                                           \
  |  |   40|    872|    else {                                                      \
  |  |   41|    872|        return vis(monostate_val);                              \
  |  |   42|    872|    }
  ------------------
   87|    872|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 872, False: 6.97k]
  ------------------
   88|    872|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|    872|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|    872|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|    872|    }                                                           \
  |  |   40|    872|    else {                                                      \
  |  |   41|    872|        return vis(monostate_val);                              \
  |  |   42|    872|    }
  ------------------
   89|    872|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 872, False: 6.97k]
  ------------------
   90|    872|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|    872|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|    872|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|    872|    }                                                           \
  |  |   40|    872|    else {                                                      \
  |  |   41|    872|        return vis(monostate_val);                              \
  |  |   42|    872|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 7.84k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 7.84k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 7.84k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 7.84k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 7.84k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  7.84k|            SCN_CLANG_POP
  114|  7.84k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  7.84k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  41.8k|{
   36|  41.8k|#define SCN_VISIT(Type)                                         \
   37|  41.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  41.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  41.8k|    }                                                           \
   40|  41.8k|    else {                                                      \
   41|  41.8k|        return vis(monostate_val);                              \
   42|  41.8k|    }
   43|       |
   44|  41.8k|    monostate monostate_val{};
   45|       |
   46|  41.8k|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 41.8k]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 41.8k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  4.67k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 4.67k, False: 37.1k]
  ------------------
   52|  4.67k|            SCN_VISIT(int);
  ------------------
  |  |   37|  4.67k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  4.67k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  4.67k|    }                                                           \
  |  |   40|  4.67k|    else {                                                      \
  |  |   41|  4.67k|        return vis(monostate_val);                              \
  |  |   42|  4.67k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 41.8k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 41.8k]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 41.8k]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 41.8k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  4.67k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 4.67k, False: 37.1k]
  ------------------
   62|  4.67k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  4.67k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  4.67k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  4.67k|    }                                                           \
  |  |   40|  4.67k|    else {                                                      \
  |  |   41|  4.67k|        return vis(monostate_val);                              \
  |  |   42|  4.67k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 41.8k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 41.8k]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|  4.62k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 4.62k, False: 37.1k]
  ------------------
   68|  4.62k|            SCN_VISIT(void*);
  ------------------
  |  |   37|  4.62k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  4.62k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  4.62k|    }                                                           \
  |  |   40|  4.62k|    else {                                                      \
  |  |   41|  4.62k|        return vis(monostate_val);                              \
  |  |   42|  4.62k|    }
  ------------------
   69|  4.67k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 4.67k, False: 37.1k]
  ------------------
   70|  4.67k|            SCN_VISIT(bool);
  ------------------
  |  |   37|  4.67k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  4.67k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  4.67k|    }                                                           \
  |  |   40|  4.67k|    else {                                                      \
  |  |   41|  4.67k|        return vis(monostate_val);                              \
  |  |   42|  4.67k|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 41.8k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|  4.62k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 4.62k, False: 37.1k]
  ------------------
   74|  4.62k|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|  4.62k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  4.62k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  4.62k|    }                                                           \
  |  |   40|  4.62k|    else {                                                      \
  |  |   41|  4.62k|        return vis(monostate_val);                              \
  |  |   42|  4.62k|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 41.8k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 41.8k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|  4.67k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 4.67k, False: 37.1k]
  ------------------
   80|  4.67k|            SCN_VISIT(double);
  ------------------
  |  |   37|  4.67k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  4.67k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  4.67k|    }                                                           \
  |  |   40|  4.67k|    else {                                                      \
  |  |   41|  4.67k|        return vis(monostate_val);                              \
  |  |   42|  4.67k|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 41.8k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 41.8k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|  4.62k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 4.62k, False: 37.1k]
  ------------------
   86|  4.62k|            SCN_VISIT(std::string);
  ------------------
  |  |   37|  4.62k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  4.62k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  4.62k|    }                                                           \
  |  |   40|  4.62k|    else {                                                      \
  |  |   41|  4.62k|        return vis(monostate_val);                              \
  |  |   42|  4.62k|    }
  ------------------
   87|  4.62k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 4.62k, False: 37.1k]
  ------------------
   88|  4.62k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|  4.62k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  4.62k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  4.62k|    }                                                           \
  |  |   40|  4.62k|    else {                                                      \
  |  |   41|  4.62k|        return vis(monostate_val);                              \
  |  |   42|  4.62k|    }
  ------------------
   89|  4.62k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 4.62k, False: 37.1k]
  ------------------
   90|  4.62k|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|  4.62k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  4.62k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  4.62k|    }                                                           \
  |  |   40|  4.62k|    else {                                                      \
  |  |   41|  4.62k|        return vis(monostate_val);                              \
  |  |   42|  4.62k|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 41.8k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 41.8k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 41.8k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 41.8k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 41.8k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  41.8k|            SCN_CLANG_POP
  114|  41.8k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  41.8k|}  // namespace scn

_ZN3scn2v25vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  173|  36.3k|{
  174|  36.3k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  36.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  175|  36.3k|}
_ZN3scn2v26detail13vscan_genericIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS4_IT0_NS5_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISR_EEEE:
  110|  36.3k|{
  111|  36.3k|    auto buffer = make_scan_buffer(range);
  112|       |
  113|  36.3k|    auto result = vscan_impl(buffer, format, args);
  114|  36.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  36.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 35.1k, False: 1.22k]
  |  |  ------------------
  ------------------
  115|  35.1k|        return unexpected(result.error());
  116|  35.1k|    }
  117|  1.22k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  1.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  36.3k|}
_ZN3scn2v25vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS2_6localeEvEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  191|  36.3k|{
  192|  36.3k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  36.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  193|  36.3k|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESK_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS5_IT1_NS6_ISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
  126|  36.3k|{
  127|  36.3k|#if !SCN_DISABLE_LOCALE
  128|  36.3k|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|  36.3k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|  36.3k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|  36.3k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|  36.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  36.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 35.1k, False: 1.22k]
  |  |  ------------------
  ------------------
  135|  35.1k|        return unexpected(result.error());
  136|  35.1k|    }
  137|  1.22k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  1.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|  36.3k|}
_ZN3scn2v26detail13vscan_genericIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS4_IT0_NS5_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISR_EEEE:
  110|  62.4k|{
  111|  62.4k|    auto buffer = make_scan_buffer(range);
  112|       |
  113|  62.4k|    auto result = vscan_impl(buffer, format, args);
  114|  62.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  62.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 61.1k, False: 1.32k]
  |  |  ------------------
  ------------------
  115|  61.1k|        return unexpected(result.error());
  116|  61.1k|    }
  117|  1.32k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  1.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  62.4k|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESK_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS5_IT1_NS6_ISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
  126|  62.4k|{
  127|  62.4k|#if !SCN_DISABLE_LOCALE
  128|  62.4k|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|  62.4k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|  62.4k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|  62.4k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|  62.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  62.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 61.1k, False: 1.32k]
  |  |  ------------------
  ------------------
  135|  61.1k|        return unexpected(result.error());
  136|  61.1k|    }
  137|  1.32k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  1.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|  62.4k|}

_ZN3scn2v24scanIJwERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESK_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISE_E4typeEJDpNSX_ISQ_E4typeEEEE:
   89|  6.94k|{
   90|  6.94k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  6.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  6.94k|}
_ZN3scn2v25vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   44|  62.4k|{
   45|  62.4k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  248|  62.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|  62.4k|}
_ZN3scn2v24scanIJwENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISF_E4typeEJDpNS11_ISR_E4typeEEEE:
  124|  6.94k|{
  125|  6.94k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  6.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  6.94k|                                                         format, {});
  127|  6.94k|}
_ZN3scn2v25vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS2_6localeELPv0EEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESK_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT0_OSE_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   60|  62.4k|{
   61|  62.4k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  248|  62.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   62|  62.4k|}
_ZN3scn2v24scanIJiERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESK_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISE_E4typeEJDpNSX_ISQ_E4typeEEEE:
   89|  6.94k|{
   90|  6.94k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  6.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  6.94k|}
_ZN3scn2v24scanIJiENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISF_E4typeEJDpNS11_ISR_E4typeEEEE:
  124|  6.94k|{
  125|  6.94k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  6.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  6.94k|                                                         format, {});
  127|  6.94k|}
_ZN3scn2v24scanIJjERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESK_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISE_E4typeEJDpNSX_ISQ_E4typeEEEE:
   89|  6.94k|{
   90|  6.94k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  6.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  6.94k|}
_ZN3scn2v24scanIJjENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISF_E4typeEJDpNS11_ISR_E4typeEEEE:
  124|  6.94k|{
  125|  6.94k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  6.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  6.94k|                                                         format, {});
  127|  6.94k|}
_ZN3scn2v24scanIJdERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESK_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISE_E4typeEJDpNSX_ISQ_E4typeEEEE:
   89|  6.94k|{
   90|  6.94k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  6.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  6.94k|}
_ZN3scn2v24scanIJdENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISF_E4typeEJDpNS11_ISR_E4typeEEEE:
  124|  6.94k|{
  125|  6.94k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  6.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  6.94k|                                                         format, {});
  127|  6.94k|}
_ZN3scn2v24scanIJbERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESK_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISE_E4typeEJDpNSX_ISQ_E4typeEEEE:
   89|  6.94k|{
   90|  6.94k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  6.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  6.94k|}
_ZN3scn2v24scanIJbENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISF_E4typeEJDpNS11_ISR_E4typeEEEE:
  124|  6.94k|{
  125|  6.94k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  6.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  6.94k|                                                         format, {});
  127|  6.94k|}
_ZN3scn2v24scanIJPvERNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEELS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESK_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISE_E4typeEJDpNSX_ISQ_E4typeEEEE:
   89|  6.94k|{
   90|  6.94k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  6.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  6.94k|}
_ZN3scn2v24scanIJPvENSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEELS2_0ELS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISF_E4typeEJDpNS11_ISR_E4typeEEEE:
  124|  6.94k|{
  125|  6.94k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  6.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  6.94k|                                                         format, {});
  127|  6.94k|}
_ZN3scn2v24scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIwNS4_IwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISJ_E4typeEJDpNS12_ISV_E4typeEEEE:
   89|  6.94k|{
   90|  6.94k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  6.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  6.94k|}
_ZN3scn2v24scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIwNS4_IwEEEELPv0ELSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISK_E4typeEJDpNS16_ISW_E4typeEEEE:
  124|  6.94k|{
  125|  6.94k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  6.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  6.94k|                                                         format, {});
  127|  6.94k|}
_ZN3scn2v24scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIwS5_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS11_ISU_E4typeEEEE:
   89|  6.94k|{
   90|  6.94k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  6.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  6.94k|}
_ZN3scn2v24scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIwS5_EELPv0ELSD_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISJ_E4typeEJDpNS15_ISV_E4typeEEEE:
  124|  6.94k|{
  125|  6.94k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  6.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  6.94k|                                                         format, {});
  127|  6.94k|}
_ZN3scn2v24scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEERS6_LPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESK_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISE_E4typeEJDpNSX_ISQ_E4typeEEEE:
   89|  6.94k|{
   90|  6.94k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  6.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  6.94k|}
_ZN3scn2v24scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeERS6_LPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISF_E4typeEJDpNS11_ISR_E4typeEEEE:
  124|  6.94k|{
  125|  6.94k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  6.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  6.94k|                                                         format, {});
  127|  6.94k|}

_ZNK4nano6ranges6detail5next_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3787|   167k|            {
 3788|   167k|                ranges::advance(x, n);
 3789|   167k|                return x;
 3790|   167k|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3677|   167k|            {
 3678|   167k|                fn::impl(i, n);
 3679|   167k|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3561|   193k|            {
 3562|   193k|                r += n;
 3563|   193k|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2692|   145k|            {
 2693|   145k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   145k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESD_E4typeEOSC_NS1_12priority_tagILm1EEE:
 2671|   145k|            {
 2672|   145k|                return decay_copy(t.begin());
 2673|   145k|            }
_ZN4nano6ranges6detail10decay_copyIPKcEENSt3__15decayIT_E4typeEOS7_:
 2605|  2.77M|    {
 2606|  2.77M|        return std::forward<T>(t);
 2607|  2.77M|    }
_ZNK4nano6ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2758|   145k|            {
 2759|   145k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   145k|            }
_ZN4nano6ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEPKcSC_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|   145k|            {
 2739|   145k|                return decay_copy(std::forward<T>(t).end());
 2740|   145k|            }
_ZN4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EEC2IS4_Lb0EvEET_S4_:
 6374|   762k|        {
 6375|   762k|        }
_ZN4nano6ranges6detail13subrange_dataIPKcS4_Lb0EEC2EOS4_S6_:
 6293|   762k|        {
 6294|   762k|        }
_ZNK4nano6ranges6detail5next_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3787|  16.3k|            {
 3788|  16.3k|                ranges::advance(x, n);
 3789|  16.3k|                return x;
 3790|  16.3k|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3677|  16.3k|            {
 3678|  16.3k|                fn::impl(i, n);
 3679|  16.3k|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3561|  16.3k|            {
 3562|  16.3k|                r += n;
 3563|  16.3k|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2692|  3.58k|            {
 2693|  3.58k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  3.58k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESD_E4typeEOSC_NS1_12priority_tagILm1EEE:
 2671|  3.58k|            {
 2672|  3.58k|                return decay_copy(t.begin());
 2673|  3.58k|            }
_ZN4nano6ranges6detail10decay_copyIPKwEENSt3__15decayIT_E4typeEOS7_:
 2605|  3.91M|    {
 2606|  3.91M|        return std::forward<T>(t);
 2607|  3.91M|    }
_ZNK4nano6ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2758|  3.58k|            {
 2759|  3.58k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  3.58k|            }
_ZN4nano6ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEPKwSC_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  3.58k|            {
 2739|  3.58k|                return decay_copy(std::forward<T>(t).end());
 2740|  3.58k|            }
_ZN4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EEC2IS4_Lb0EvEET_S4_:
 6374|   369k|        {
 6375|   369k|        }
_ZN4nano6ranges6detail13subrange_dataIPKwS4_Lb0EEC2EOS4_S6_:
 6293|   369k|        {
 6294|   369k|        }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE5beginEv:
 6443|  1.38M|        {
 6444|  1.38M|            return data_.begin_;
 6445|  1.38M|        }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESG_E4typeEOSF_NS1_12priority_tagILm1EEE:
 2671|   123k|            {
 2672|   123k|                return decay_copy(t.begin());
 2673|   123k|            }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2692|   123k|            {
 2693|   123k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   123k|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE3endEv:
 6448|  1.73M|        {
 6449|  1.73M|            return data_.end_;
 6450|  1.73M|        }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSH_NS1_12priority_tagILm1EEE:
 2738|   172k|            {
 2739|   172k|                return decay_copy(std::forward<T>(t).end());
 2740|   172k|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2758|   172k|            {
 2759|   172k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   172k|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE5beginEv:
 6443|   589k|        {
 6444|   589k|            return data_.begin_;
 6445|   589k|        }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESG_E4typeEOSF_NS1_12priority_tagILm1EEE:
 2671|  95.1k|            {
 2672|  95.1k|                return decay_copy(t.begin());
 2673|  95.1k|            }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2692|  95.1k|            {
 2693|  95.1k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  95.1k|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE3endEv:
 6448|  11.1M|        {
 6449|  11.1M|            return data_.end_;
 6450|  11.1M|        }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSH_NS1_12priority_tagILm1EEE:
 2738|   256k|            {
 2739|   256k|                return decay_copy(std::forward<T>(t).end());
 2740|   256k|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2758|   256k|            {
 2759|   256k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   256k|            }
_ZNK4nano6ranges6detail5data_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSD_:
 3177|  13.1k|            {
 3178|  13.1k|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  13.1k|            }
_ZN4nano6ranges6detail5data_2fn4implIKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  13.1k|            {
 3158|  13.1k|                return t.data();
 3159|  13.1k|            }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6094|  13.1k|    {
 6095|  13.1k|        return ranges::empty(derived())
  ------------------
  |  Branch (6095:16): [True: 0, False: 13.1k]
  ------------------
 6096|  13.1k|                   ? nullptr
 6097|  13.1k|                   : std::addressof(*ranges::begin(derived()));
 6098|  13.1k|    }
_ZNK4nano6ranges6detail6empty_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSD_:
 3126|  13.1k|            {
 3127|  13.1k|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  13.1k|            }
_ZN4nano6ranges6detail6empty_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSD_NS1_12priority_tagILm2EEE:
 3097|  13.1k|            {
 3098|  13.1k|                return bool((std::forward<T>(t).empty()));
 3099|  13.1k|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE5emptyEv:
 6453|   399k|        {
 6454|   399k|            return data_.begin_ == data_.end_;
 6455|   399k|        }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6048|  26.2k|    {
 6049|  26.2k|        return static_cast<const D&>(*this);
 6050|  26.2k|    }
_ZNK4nano6ranges6detail5size_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 3037|  13.1k|            {
 3038|  13.1k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  13.1k|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|  13.1k|            {
 3000|  13.1k|                return decay_copy(std::forward<T>(t).size());
 3001|  13.1k|            }
_ZN4nano6ranges6detail10decay_copyIlEENSt3__15decayIT_E4typeEOS5_:
 2605|   427k|    {
 2606|   427k|        return std::forward<T>(t);
 2607|   427k|    }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE4sizeILS5_1EEENSt3__19enable_ifIXeqT_LS5_1EElE4typeEv:
 6461|   407k|        {
 6462|   407k|            if constexpr (StoreSize) {
  ------------------
  |  Branch (6462:27): [Folded - Ignored]
  ------------------
 6463|   407k|                return data_.size_;
 6464|   407k|            }
 6465|   407k|            else {
 6466|   407k|                return data_.end_ - data_.begin_;
 6467|   407k|            }
 6468|   407k|        }
_ZNK4nano6ranges6detail5next_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
 3779|  50.7k|            {
 3780|  50.7k|                ++x;
 3781|  50.7k|                return x;
 3782|  50.7k|            }
_ZNK4nano6ranges6detail5size_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 3037|   389k|            {
 3038|   389k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|   389k|            }
_ZN4nano6ranges6detail5size_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|   389k|            {
 3000|   389k|                return decay_copy(std::forward<T>(t).size());
 3001|   389k|            }
_ZNK4nano6ranges6detail5data_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSC_:
 3177|   375k|            {
 3178|   375k|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|   375k|            }
_ZN4nano6ranges6detail5data_2fn4implINS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|   375k|            {
 3158|   375k|                return t.data();
 3159|   375k|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6084|   386k|    {
 6085|   386k|        return ranges::empty(derived())
  ------------------
  |  Branch (6085:16): [True: 420, False: 386k]
  ------------------
 6086|   386k|                   ? nullptr
 6087|   386k|                   : std::addressof(*ranges::begin(derived()));
 6088|   386k|    }
_ZNK4nano6ranges6detail6empty_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSC_:
 3126|   386k|            {
 3127|   386k|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|   386k|            }
_ZN4nano6ranges6detail6empty_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSC_NS1_12priority_tagILm2EEE:
 3097|   386k|            {
 3098|   386k|                return bool((std::forward<T>(t).empty()));
 3099|   386k|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6043|   773k|    {
 6044|   773k|        return static_cast<D&>(*this);
 6045|   773k|    }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|  1.18M|            {
 2693|  1.18M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  1.18M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESF_E4typeEOSE_NS1_12priority_tagILm1EEE:
 2671|  1.18M|            {
 2672|  1.18M|                return decay_copy(t.begin());
 2673|  1.18M|            }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|  1.00M|            {
 2759|  1.00M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  1.00M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  1.00M|            {
 2739|  1.00M|                return decay_copy(std::forward<T>(t).end());
 2740|  1.00M|            }
_ZN4nano6ranges6detail10decay_copyImEENSt3__15decayIT_E4typeEOS5_:
 2605|  32.7k|    {
 2606|  32.7k|        return std::forward<T>(t);
 2607|  32.7k|    }
_ZNK4nano6ranges6detail6ssize_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSC_:
 3076|  14.1k|            {
 3077|  14.1k|                return fn::impl(std::forward<T>(t));
 3078|  14.1k|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNSt3__111conditionalIXltstNSE_9enable_ifIX5rangeISD_EENS0_20incrementable_traitsIDTclL_ZNSC_5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSD_:
 3066|  14.1k|            {
 3067|  14.1k|                return static_cast<ssize_return_t<T>>(
 3068|  14.1k|                    ranges::size(std::forward<T>(t)));
 3069|  14.1k|            }
_ZNK4nano6ranges6detail6ssize_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSB_:
 3076|  21.6k|            {
 3077|  21.6k|                return fn::impl(std::forward<T>(t));
 3078|  21.6k|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeISC_EENS0_20incrementable_traitsIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRSC_EEEEE15difference_typeEE4typeELm8EElSL_E4typeE_EEOSC_:
 3066|  21.6k|            {
 3067|  21.6k|                return static_cast<ssize_return_t<T>>(
 3068|  21.6k|                    ranges::size(std::forward<T>(t)));
 3069|  21.6k|            }
_ZNK4nano6ranges6detail5size_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 3037|  21.6k|            {
 3038|  21.6k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  21.6k|            }
_ZN4nano6ranges6detail5size_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEmEENS5_9enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESC_E4typeEOSE_NS1_12priority_tagILm2EEE:
 2999|  21.6k|            {
 3000|  21.6k|                return decay_copy(std::forward<T>(t).size());
 3001|  21.6k|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EENS0_20incrementable_traitsIS9_E15difference_typeEE4typeERS9_SD_SA_:
 3696|  30.1k|            {
 3697|  30.1k|                return n - fn::impl(i, n, bound);
 3698|  30.1k|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKcS6_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISA_E15difference_typeEE4typeERSA_SD_S9_:
 3619|  30.1k|            {
 3620|  30.1k|                if (fn::abs(n) >= fn::abs(bound - i)) {
  ------------------
  |  Branch (3620:21): [True: 4.45k, False: 25.7k]
  ------------------
 3621|  4.45k|                    auto dist = bound - i;
 3622|  4.45k|                    fn::impl(i, bound, priority_tag<2>{});
 3623|  4.45k|                    return dist;
 3624|  4.45k|                }
 3625|  25.7k|                else {
 3626|  25.7k|                    fn::impl(i, n);
 3627|  25.7k|                    return n;
 3628|  25.7k|                }
 3629|  30.1k|            }
_ZN4nano6ranges6detail8advance_2fn3absIlEET_S5_:
 3551|  60.3k|            {
 3552|  60.3k|                if (t < T{0}) {
  ------------------
  |  Branch (3552:21): [True: 0, False: 60.3k]
  ------------------
 3553|      0|                    return -t;
 3554|      0|                }
 3555|  60.3k|                return t;
 3556|  60.3k|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKcS6_EENSt3__19enable_ifIX15assignable_fromIRT_T0_EEvE4typeESA_SB_NS1_12priority_tagILm2EEE:
 3596|  5.75k|            {
 3597|  5.75k|                i = std::move(bound);
 3598|  5.75k|            }
_ZNK4nano6ranges6detail5size_2fnclIRNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 3037|  2.49k|            {
 3038|  2.49k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  2.49k|            }
_ZN4nano6ranges6detail5size_2fn4implIRNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEmEENS5_9enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|  2.49k|            {
 3000|  2.49k|                return decay_copy(std::forward<T>(t).size());
 3001|  2.49k|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIPKcS7_LNS0_13subrange_kindE1EEENS0_8identityEN3scn2v24impl12function_refIFbcESG_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SB_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSK_EEEENS1_16projected_helperISS_SN_vEEEEEENSM_IX14borrowed_rangeISK_EEE4typeISS_NS0_8danglingEEEE4typeEOSK_SL_SN_:
 6792|    410|        {
 6793|    410|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|    410|                                    proj);
 6795|    410|        }
_ZN4nano6ranges6detail10find_if_fn4implIPKcS5_N3scn2v24impl12function_refIFbcESA_EENS0_8identityEEET_SD_T0_RT1_RT2_:
 6760|    410|        {
 6761|  7.32k|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 7.25k, False: 72]
  ------------------
 6762|  7.25k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 338, False: 6.91k]
  ------------------
 6763|    338|                    return first;
 6764|    338|                }
 6765|  6.91k|                ++first;
 6766|  6.91k|            }
 6767|     72|            return first;
 6768|    410|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbcES9_EEJRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSE_DpOSF_:
 1299|  15.1k|            {
 1300|  15.1k|                return fn::impl(std::forward<F>(f),
 1301|  15.1k|                                std::forward<Args>(args)...);
 1302|  15.1k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbcES9_EEJRKcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINSE_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISH_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSH_DpOSK_:
 1288|  15.1k|            {
 1289|  15.1k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  15.1k|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS9_DpOSA_:
 1299|   318k|            {
 1300|   318k|                return fn::impl(std::forward<F>(f),
 1301|   318k|                                std::forward<Args>(args)...);
 1302|   318k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJRKcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS9_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISC_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSC_DpOSF_:
 1288|   318k|            {
 1289|   318k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   318k|            }
_ZNK4nano6ranges8identityclIRKcEEOT_S6_:
 1141|   318k|    {
 1142|   318k|        return std::forward<T>(t);
 1143|   318k|    }
_ZNK4nano6ranges6detail5next_2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
 3797|  1.29k|            {
 3798|  1.29k|                ranges::advance(x, bound);
 3799|  1.29k|                return x;
 3800|  1.29k|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EEvE4typeERS9_SA_:
 3685|  1.29k|            {
 3686|  1.29k|                fn::impl(i, bound, priority_tag<2>{});
 3687|  1.29k|            }
_ZNK4nano6ranges6detail5data_2fnclIRKNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSC_:
 3177|  3.48k|            {
 3178|  3.48k|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  3.48k|            }
_ZN4nano6ranges6detail5data_2fn4implIKNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEPKcEENS5_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  3.48k|            {
 3158|  3.48k|                return t.data();
 3159|  3.48k|            }
_ZNK4nano6ranges6detail5size_2fnclIRKNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 3037|  3.48k|            {
 3038|  3.48k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  3.48k|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEmEENS5_9enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESD_E4typeEOSF_NS1_12priority_tagILm2EEE:
 2999|  3.48k|            {
 3000|  3.48k|                return decay_copy(std::forward<T>(t).size());
 3001|  3.48k|            }
_ZNK4nano6ranges6detail5data_2fnclIRNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSD_:
 3177|  4.84k|            {
 3178|  4.84k|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  4.84k|            }
_ZN4nano6ranges6detail5data_2fn4implINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEPwEENS5_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  4.84k|            {
 3158|  4.84k|                return t.data();
 3159|  4.84k|            }
_ZNK4nano6ranges6detail5size_2fnclIRNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 3037|  2.42k|            {
 3038|  2.42k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  2.42k|            }
_ZN4nano6ranges6detail5size_2fn4implIRNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEmEENS5_9enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|  2.42k|            {
 3000|  2.42k|                return decay_copy(std::forward<T>(t).size());
 3001|  2.42k|            }
_ZNK4nano6ranges6detail9distance_2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EENS0_20incrementable_traitsIS9_E15difference_typeEE4typeES9_SA_:
 3755|   214k|            {
 3756|   214k|                return fn::impl(std::move(first), std::move(last));
 3757|   214k|            }
_ZN4nano6ranges6detail9distance_2fn4implIPKcS6_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISA_E15difference_typeEE4typeESA_S9_:
 3715|   214k|            {
 3716|   214k|                return s - i;
 3717|   214k|            }
_ZNK4nano6ranges6detail6begin_2fnclIRKN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeIPKcSC_LNS0_13subrange_kindE1EEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  2.74k|            {
 2693|  2.74k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  2.74k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeIPKcSC_LNS0_13subrange_kindE1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  2.74k|            {
 2672|  2.74k|                return decay_copy(t.begin());
 2673|  2.74k|            }
_ZN4nano6ranges6detail10decay_copyIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENSt3__15decayIT_E4typeEOSD_:
 2605|   245k|    {
 2606|   245k|        return std::forward<T>(t);
 2607|   245k|    }
_ZNK4nano6ranges6detail4end_2fnclIRKN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeIPKcSC_LNS0_13subrange_kindE1EEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  2.07k|            {
 2759|  2.07k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  2.07k|            }
_ZN4nano6ranges6detail4end_2fn4implIRKN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeIPKcSC_LNS0_13subrange_kindE1EEEEENSF_8sentinelILb1EEENS7_27counted_width_iterator_impl22counted_width_iteratorISC_SC_EEEENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSR_NS1_12priority_tagILm1EEE:
 2738|  2.07k|            {
 2739|  2.07k|                return decay_copy(std::forward<T>(t).end());
 2740|  2.07k|            }
_ZN4nano6ranges6detail10decay_copyIN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeIPKcSA_LNS0_13subrange_kindE1EEEE8sentinelILb1EEEEENSt3__15decayIT_E4typeEOSI_:
 2605|   224k|    {
 2606|   224k|        return std::forward<T>(t);
 2607|   224k|    }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcSB_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESF_E4typeESF_:
 3779|  2.65k|            {
 3780|  2.65k|                ++x;
 3781|  2.65k|                return x;
 3782|  2.65k|            }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EENS9_15take_width_viewINS6_ISD_SD_LNS0_13subrange_kindE1EEEE8sentinelILb1EEELSG_0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSN_:
 2758|   171k|            {
 2759|   171k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   171k|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EENS9_15take_width_viewINS6_ISD_SD_LNS0_13subrange_kindE1EEEE8sentinelILb1EEELSG_0EEESK_SE_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSR_NS1_12priority_tagILm1EEE:
 2738|   171k|            {
 2739|   171k|                return decay_copy(std::forward<T>(t).end());
 2740|   171k|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS2_IS9_S9_LNS0_13subrange_kindE1EEEE8sentinelILb1EEELSC_0EE3endEv:
 6448|   171k|        {
 6449|   171k|            return data_.end_;
 6450|   171k|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EENS9_15take_width_viewINS6_ISD_SD_LNS0_13subrange_kindE1EEEE8sentinelILb1EEELSG_0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSO_:
 2692|    580|            {
 2693|    580|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|    580|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EENS9_15take_width_viewINS6_ISD_SD_LNS0_13subrange_kindE1EEEE8sentinelILb1EEELSG_0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESR_E4typeEOSQ_NS1_12priority_tagILm1EEE:
 2671|    580|            {
 2672|    580|                return decay_copy(t.begin());
 2673|    580|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS2_IS9_S9_LNS0_13subrange_kindE1EEEE8sentinelILb1EEELSC_0EE5beginEv:
 6443|   142k|        {
 6444|   142k|            return data_.begin_;
 6445|   142k|        }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EENS9_15take_width_viewINS6_ISD_SD_LNS0_13subrange_kindE1EEEE8sentinelILb1EEELSG_0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSO_:
 2758|    580|            {
 2759|    580|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|    580|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EENS9_15take_width_viewINS6_ISD_SD_LNS0_13subrange_kindE1EEEE8sentinelILb1EEELSG_0EEESK_SE_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSS_NS1_12priority_tagILm1EEE:
 2738|    580|            {
 2739|    580|                return decay_copy(std::forward<T>(t).end());
 2740|    580|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EENS9_15take_width_viewINS6_ISD_SD_LNS0_13subrange_kindE1EEEE8sentinelILb1EEELSG_0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSN_:
 2692|   141k|            {
 2693|   141k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   141k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EENS9_15take_width_viewINS6_ISD_SD_LNS0_13subrange_kindE1EEEE8sentinelILb1EEELSG_0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESQ_E4typeEOSP_NS1_12priority_tagILm1EEE:
 2671|   141k|            {
 2672|   141k|                return decay_copy(t.begin());
 2673|   141k|            }
_ZNK4nano6ranges6detail6begin_2fnclIRN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeIPKcSC_LNS0_13subrange_kindE1EEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2692|  11.1k|            {
 2693|  11.1k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  11.1k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeIPKcSC_LNS0_13subrange_kindE1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  11.1k|            {
 2672|  11.1k|                return decay_copy(t.begin());
 2673|  11.1k|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS5_ISC_SC_LNS0_13subrange_kindE1EEEE8sentinelILb1EEELSF_0EEENS0_8identityENS8_12function_refIFbcESO_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SM_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSS_EEEENS1_16projected_helperIS10_SV_vEEEEEENSU_IX14borrowed_rangeISS_EEE4typeIS10_NS0_8danglingEEEE4typeEOSS_ST_SV_:
 6792|  1.17k|        {
 6793|  1.17k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|  1.17k|                                    proj);
 6795|  1.17k|        }
_ZN4nano6ranges6detail10find_if_fn4implIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS0_9subrange_8subrangeISA_SA_LNS0_13subrange_kindE1EEEE8sentinelILb1EEENS6_12function_refIFbcESL_EENS0_8identityEEET_SO_T0_RT1_RT2_:
 6760|  1.42k|        {
 6761|  8.01k|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 7.85k, False: 156]
  ------------------
 6762|  7.85k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 1.26k, False: 6.58k]
  ------------------
 6763|  1.26k|                    return first;
 6764|  1.26k|                }
 6765|  6.58k|                ++first;
 6766|  6.58k|            }
 6767|    156|            return first;
 6768|  1.42k|        }
_ZNK4nano6ranges6detail4end_2fnclIRN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeIPKcSC_LNS0_13subrange_kindE1EEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2758|  51.1k|            {
 2759|  51.1k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  51.1k|            }
_ZN4nano6ranges6detail4end_2fn4implIRN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeIPKcSC_LNS0_13subrange_kindE1EEEEENSF_8sentinelILb1EEENS7_27counted_width_iterator_impl22counted_width_iteratorISC_SC_EEEENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSQ_NS1_12priority_tagILm1EEE:
 2738|  51.1k|            {
 2739|  51.1k|                return decay_copy(std::forward<T>(t).end());
 2740|  51.1k|            }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS2_IS9_S9_LNS0_13subrange_kindE1EEEE8sentinelILb1EEELSC_0EEC2ISA_Lb0EvEET_SG_:
 6374|  46.4k|        {
 6375|  46.4k|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS0_9subrange_8subrangeIS9_S9_LNS0_13subrange_kindE1EEEE8sentinelILb1EEELb0EEC2EOSA_OSI_:
 6293|  46.4k|        {
 6294|  46.4k|        }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EESE_LNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  44.9k|            {
 2693|  44.9k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  44.9k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EESE_LNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  44.9k|            {
 2672|  44.9k|                return decay_copy(t.begin());
 2673|  44.9k|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_LNS0_13subrange_kindE0EE5beginEv:
 6443|  44.9k|        {
 6444|  44.9k|            return data_.begin_;
 6445|  44.9k|        }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EESE_LNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  44.9k|            {
 2759|  44.9k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  44.9k|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EESE_LNS0_13subrange_kindE0EEESE_SE_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|  44.9k|            {
 2739|  44.9k|                return decay_copy(std::forward<T>(t).end());
 2740|  44.9k|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_LNS0_13subrange_kindE0EE3endEv:
 6448|  44.9k|        {
 6449|  44.9k|            return data_.end_;
 6450|  44.9k|        }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_LNS0_13subrange_kindE0EEC2ISA_Lb0EvEET_SA_:
 6374|  44.9k|        {
 6375|  44.9k|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_Lb0EEC2EOSA_SC_:
 6293|  44.9k|        {
 6294|  44.9k|        }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcSB_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESF_E4typeESF_NS0_20incrementable_traitsISF_E15difference_typeE:
 3787|    822|            {
 3788|    822|                ranges::advance(x, n);
 3789|    822|                return x;
 3790|    822|            }
_ZNK4nano6ranges6detail8advance_2fnclIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcSB_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSF_NS0_20incrementable_traitsISF_E15difference_typeE:
 3677|    822|            {
 3678|    822|                fn::impl(i, n);
 3679|    822|            }
_ZN4nano6ranges6detail8advance_2fn4implIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcSB_EEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISF_EEvE4typeERSF_NS0_20incrementable_traitsISF_E15difference_typeE:
 3569|    822|            {
 3570|    822|                constexpr auto zero = iter_difference_t<I>{0};
 3571|       |
 3572|    822|                if (n > zero) {
  ------------------
  |  Branch (3572:21): [True: 0, False: 822]
  ------------------
 3573|      0|                    while (n-- > zero) {
  ------------------
  |  Branch (3573:28): [True: 0, False: 0]
  ------------------
 3574|      0|                        ++i;
 3575|      0|                    }
 3576|      0|                }
 3577|    822|                else {
 3578|    822|                    while (n++ < zero) {
  ------------------
  |  Branch (3578:28): [True: 0, False: 822]
  ------------------
 3579|      0|                        --i;
 3580|      0|                    }
 3581|    822|                }
 3582|    822|            }
_ZNK4nano6ranges6detail8advance_2fnclIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcSB_EENS7_15take_width_viewINS0_9subrange_8subrangeISB_SB_LNS0_13subrange_kindE1EEEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SN_EENS0_20incrementable_traitsISN_E15difference_typeEE4typeERSN_SR_SO_:
 3696|  6.83k|            {
 3697|  6.83k|                return n - fn::impl(i, n, bound);
 3698|  6.83k|            }
_ZN4nano6ranges6detail8advance_2fn4implIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcSB_EENS7_15take_width_viewINS0_9subrange_8subrangeISB_SB_LNS0_13subrange_kindE1EEEE8sentinelILb1EEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SN_EENS0_20incrementable_traitsISN_E15difference_typeEE4typeERSN_SR_SO_:
 3636|  6.83k|            {
 3637|  6.83k|                constexpr iter_difference_t<I> zero{0};
 3638|  6.83k|                iter_difference_t<I> counter{0};
 3639|       |
 3640|  6.83k|                if (n < zero) {
  ------------------
  |  Branch (3640:21): [True: 0, False: 6.83k]
  ------------------
 3641|      0|                    do {
 3642|      0|                        --i;
 3643|      0|                        --counter;  // Yes, really
 3644|      0|                    } while (++n < zero && i != bound);
  ------------------
  |  Branch (3644:30): [True: 0, False: 0]
  |  Branch (3644:44): [True: 0, False: 0]
  ------------------
 3645|      0|                }
 3646|  6.83k|                else {
 3647|  23.6k|                    while (n-- > zero && i != bound) {
  ------------------
  |  Branch (3647:28): [True: 16.8k, False: 6.75k]
  |  Branch (3647:42): [True: 16.7k, False: 78]
  ------------------
 3648|  16.7k|                        ++i;
 3649|  16.7k|                        ++counter;
 3650|  16.7k|                    }
 3651|  6.83k|                }
 3652|       |
 3653|  6.83k|                return counter;
 3654|  6.83k|            }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcSB_EENS7_15take_width_viewINS0_9subrange_8subrangeISB_SB_LNS0_13subrange_kindE1EEEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SN_EESN_E4typeESN_SO_:
 3797|    306|            {
 3798|    306|                ranges::advance(x, bound);
 3799|    306|                return x;
 3800|    306|            }
_ZNK4nano6ranges6detail8advance_2fnclIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcSB_EENS7_15take_width_viewINS0_9subrange_8subrangeISB_SB_LNS0_13subrange_kindE1EEEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SN_EEvE4typeERSN_SO_:
 3685|    306|            {
 3686|    306|                fn::impl(i, bound, priority_tag<2>{});
 3687|    306|            }
_ZN4nano6ranges6detail8advance_2fn4implIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcSB_EENS7_15take_width_viewINS0_9subrange_8subrangeISB_SB_LNS0_13subrange_kindE1EEEE8sentinelILb1EEEEEvRT_T0_NS1_12priority_tagILm0EEE:
 3609|    306|            {
 3610|  21.2k|                while (i != bound) {
  ------------------
  |  Branch (3610:24): [True: 20.9k, False: 306]
  ------------------
 3611|  20.9k|                    ++i;
 3612|  20.9k|                }
 3613|    306|            }
_ZNK4nano6ranges6detail7sort_fnclIRNSt3__16vectorINS4_4pairIDiDiEENS4_9allocatorIS7_EEEENS0_4lessENS0_8identityEEENS4_9enable_ifIXaa19random_access_rangeIT_E8sortableIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSF_EEEET0_T1_EENS1_11conditionalIX14borrowed_rangeISF_EEE4typeISI_NS0_8danglingEEEE4typeEOSF_SJ_SK_:
14808|  6.86k|        {
14809|  6.86k|            iterator_t<Rng> last_it =
14810|  6.86k|                nano::next(nano::begin(rng), nano::end(rng));
14811|  6.86k|            detail::pdqsort(nano::begin(rng), last_it, comp, proj);
14812|  6.86k|            return last_it;
14813|  6.86k|        }
_ZNK4nano6ranges6detail5next_2fnclINSt3__111__wrap_iterIPNS5_4pairIDiDiEEEESA_EENS5_9enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EESC_E4typeESC_SD_:
 3797|  6.86k|            {
 3798|  6.86k|                ranges::advance(x, bound);
 3799|  6.86k|                return x;
 3800|  6.86k|            }
_ZNK4nano6ranges6detail8advance_2fnclINSt3__111__wrap_iterIPNS5_4pairIDiDiEEEESA_EENS5_9enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EEvE4typeERSC_SD_:
 3685|  6.86k|            {
 3686|  6.86k|                fn::impl(i, bound, priority_tag<2>{});
 3687|  6.86k|            }
_ZN4nano6ranges6detail8advance_2fn4implINSt3__111__wrap_iterIPNS5_4pairIDiDiEEEESA_EENS5_9enable_ifIX15assignable_fromIRT_T0_EEvE4typeESD_SE_NS1_12priority_tagILm2EEE:
 3596|  6.86k|            {
 3597|  6.86k|                i = std::move(bound);
 3598|  6.86k|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNSt3__16vectorINS5_4pairIDiDiEENS5_9allocatorIS8_EEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2692|  13.7k|            {
 2693|  13.7k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  13.7k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNSt3__16vectorINS5_4pairIDiDiEENS5_9allocatorIS8_EEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESF_E4typeEOSE_NS1_12priority_tagILm1EEE:
 2671|  13.7k|            {
 2672|  13.7k|                return decay_copy(t.begin());
 2673|  13.7k|            }
_ZN4nano6ranges6detail10decay_copyINSt3__111__wrap_iterIPNS3_4pairIDiDiEEEEEENS3_5decayIT_E4typeEOSA_:
 2605|  20.5k|    {
 2606|  20.5k|        return std::forward<T>(t);
 2607|  20.5k|    }
_ZNK4nano6ranges6detail4end_2fnclIRNSt3__16vectorINS5_4pairIDiDiEENS5_9allocatorIS8_EEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2758|  6.86k|            {
 2759|  6.86k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  6.86k|            }
_ZN4nano6ranges6detail4end_2fn4implIRNSt3__16vectorINS5_4pairIDiDiEENS5_9allocatorIS8_EEEENS5_11__wrap_iterIPS8_EESF_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSJ_NS1_12priority_tagILm1EEE:
 2738|  6.86k|            {
 2739|  6.86k|                return decay_copy(std::forward<T>(t).end());
 2740|  6.86k|            }
_ZN4nano6ranges6detail7pdqsortINSt3__111__wrap_iterIPNS3_4pairIDiDiEEEENS0_4lessENS0_8identityELb0EEEvT_SB_RT0_RT1_:
14762|  6.86k|    {
14763|  6.86k|        if (begin == end) {
  ------------------
  |  Branch (14763:13): [True: 0, False: 6.86k]
  ------------------
14764|      0|            return;
14765|      0|        }
14766|       |
14767|  6.86k|        detail::pdqsort_loop<Branchless>(
14768|  6.86k|            std::move(begin), std::move(end), comp, proj,
14769|  6.86k|            detail::log2(nano::distance(begin, end)));
14770|  6.86k|    }
_ZN4nano6ranges6detail12pdqsort_loopILb0ENSt3__111__wrap_iterIPNS3_4pairIDiDiEEEENS0_4lessENS0_8identityEEEvT0_SB_RT1_RT2_ib:
14639|  12.2k|    {
14640|  12.2k|        using diff_t = iter_difference_t<I>;
14641|       |
14642|       |        // Use a while loop for tail recursion elimination.
14643|  20.5k|        while (true) {
  ------------------
  |  Branch (14643:16): [Folded - Ignored]
  ------------------
14644|  20.5k|            diff_t size = nano::distance(begin, end);
14645|       |
14646|       |            // Insertion sort is faster for small arrays.
14647|  20.5k|            if (size < pdqsort_insertion_sort_threshold) {
  ------------------
  |  Branch (14647:17): [True: 11.9k, False: 8.67k]
  ------------------
14648|  11.9k|                if (leftmost) {
  ------------------
  |  Branch (14648:21): [True: 6.57k, False: 5.34k]
  ------------------
14649|  6.57k|                    insertion_sort(begin, end, comp, proj);
14650|  6.57k|                }
14651|  5.34k|                else {
14652|  5.34k|                    unguarded_insertion_sort(begin, end, comp, proj);
14653|  5.34k|                }
14654|  11.9k|                return;
14655|  11.9k|            }
14656|       |
14657|       |            // Choose pivot as median of 3 or pseudomedian of 9.
14658|  8.67k|            diff_t s2 = size / 2;
14659|  8.67k|            if (size > pdqsort_ninther_threshold) {
  ------------------
  |  Branch (14659:17): [True: 2.26k, False: 6.40k]
  ------------------
14660|  2.26k|                sort3(begin, begin + s2, end - 1, comp, proj);
14661|  2.26k|                sort3(begin + 1, begin + (s2 - 1), end - 2, comp, proj);
14662|  2.26k|                sort3(begin + 2, begin + (s2 + 1), end - 3, comp, proj);
14663|  2.26k|                sort3(begin + (s2 - 1), begin + s2, begin + (s2 + 1), comp,
14664|  2.26k|                      proj);
14665|  2.26k|                nano::iter_swap(begin, begin + s2);
14666|  2.26k|            }
14667|  6.40k|            else {
14668|  6.40k|                sort3(begin + s2, begin, end - 1, comp, proj);
14669|  6.40k|            }
14670|       |
14671|       |            // If *(begin - 1) is the end of the right partition of a previous
14672|       |            // partition operation there is no element in [begin, end) that is
14673|       |            // smaller than *(begin - 1). Then if our pivot compares equal to
14674|       |            // *(begin - 1) we change strategy, putting equal elements in the
14675|       |            // left partition, greater elements in the right partition. We do
14676|       |            // not have to recurse on the left partition, since it's sorted (all
14677|       |            // equal).
14678|  8.67k|            if (!leftmost &&
  ------------------
  |  Branch (14678:17): [True: 4.47k, False: 4.20k]
  |  Branch (14678:17): [True: 2.86k, False: 5.80k]
  ------------------
14679|  8.67k|                !nano::invoke(comp, nano::invoke(proj, *(begin - 1)),
  ------------------
  |  Branch (14679:17): [True: 2.86k, False: 1.60k]
  ------------------
14680|  4.47k|                              nano::invoke(proj, *begin))) {
14681|  2.86k|                begin = partition_left(begin, end, comp, proj) + 1;
14682|  2.86k|                continue;
14683|  2.86k|            }
14684|       |
14685|       |            // Partition and get results.
14686|  5.80k|            std::pair<I, bool> part_result =
14687|  5.80k|                Branchless ? partition_right_branchless(begin, end, comp, proj)
  ------------------
  |  Branch (14687:17): [Folded - Ignored]
  ------------------
14688|  5.80k|                           : partition_right(begin, end, comp, proj);
14689|  5.80k|            I pivot_pos = part_result.first;
14690|  5.80k|            bool already_partitioned = part_result.second;
14691|       |
14692|       |            // Check for a highly unbalanced partition.
14693|  5.80k|            diff_t l_size = pivot_pos - begin;
14694|  5.80k|            diff_t r_size = end - (pivot_pos + 1);
14695|  5.80k|            bool highly_unbalanced = l_size < size / 8 || r_size < size / 8;
  ------------------
  |  Branch (14695:38): [True: 2.73k, False: 3.06k]
  |  Branch (14695:59): [True: 528, False: 2.53k]
  ------------------
14696|       |
14697|       |            // If we got a highly unbalanced partition we shuffle elements to
14698|       |            // break many patterns.
14699|  5.80k|            if (highly_unbalanced) {
  ------------------
  |  Branch (14699:17): [True: 3.26k, False: 2.53k]
  ------------------
14700|       |                // If we had too many bad partitions, switch to heapsort to
14701|       |                // guarantee O(n log n).
14702|  3.26k|                if (--bad_allowed == 0) {
  ------------------
  |  Branch (14702:21): [True: 0, False: 3.26k]
  ------------------
14703|      0|                    nano::make_heap(begin, end, comp, proj);
14704|      0|                    nano::sort_heap(begin, end, comp, proj);
14705|      0|                    return;
14706|      0|                }
14707|       |
14708|  3.26k|                if (l_size >= pdqsort_insertion_sort_threshold) {
  ------------------
  |  Branch (14708:21): [True: 450, False: 2.81k]
  ------------------
14709|    450|                    nano::iter_swap(begin, begin + l_size / 4);
14710|    450|                    nano::iter_swap(pivot_pos - 1, pivot_pos - l_size / 4);
14711|       |
14712|    450|                    if (l_size > pdqsort_ninther_threshold) {
  ------------------
  |  Branch (14712:25): [True: 132, False: 318]
  ------------------
14713|    132|                        nano::iter_swap(begin + 1, begin + (l_size / 4 + 1));
14714|    132|                        nano::iter_swap(begin + 2, begin + (l_size / 4 + 2));
14715|    132|                        nano::iter_swap(pivot_pos - 2,
14716|    132|                                        pivot_pos - (l_size / 4 + 1));
14717|    132|                        nano::iter_swap(pivot_pos - 3,
14718|    132|                                        pivot_pos - (l_size / 4 + 2));
14719|    132|                    }
14720|    450|                }
14721|       |
14722|  3.26k|                if (r_size >= pdqsort_insertion_sort_threshold) {
  ------------------
  |  Branch (14722:21): [True: 2.52k, False: 738]
  ------------------
14723|  2.52k|                    nano::iter_swap(pivot_pos + 1,
14724|  2.52k|                                    pivot_pos + (1 + r_size / 4));
14725|  2.52k|                    nano::iter_swap(end - 1, end - r_size / 4);
14726|       |
14727|  2.52k|                    if (r_size > pdqsort_ninther_threshold) {
  ------------------
  |  Branch (14727:25): [True: 768, False: 1.75k]
  ------------------
14728|    768|                        nano::iter_swap(pivot_pos + 2,
14729|    768|                                        pivot_pos + (2 + r_size / 4));
14730|    768|                        nano::iter_swap(pivot_pos + 3,
14731|    768|                                        pivot_pos + (3 + r_size / 4));
14732|    768|                        nano::iter_swap(end - 2, end - (1 + r_size / 4));
14733|    768|                        nano::iter_swap(end - 3, end - (2 + r_size / 4));
14734|    768|                    }
14735|  2.52k|                }
14736|  3.26k|            }
14737|  2.53k|            else {
14738|       |                // If we were decently balanced and we tried to sort an already
14739|       |                // partitioned sequence try to use insertion sort.
14740|  2.53k|                if (already_partitioned &&
  ------------------
  |  Branch (14740:21): [True: 534, False: 2.00k]
  ------------------
14741|  2.53k|                    partial_insertion_sort(begin, pivot_pos, comp, proj) &&
  ------------------
  |  Branch (14741:21): [True: 402, False: 132]
  ------------------
14742|  2.53k|                    partial_insertion_sort(pivot_pos + 1, end, comp, proj))
  ------------------
  |  Branch (14742:21): [True: 372, False: 30]
  ------------------
14743|    372|                    return;
14744|  2.53k|            }
14745|       |
14746|       |            // Sort the left partition first using recursion and do tail
14747|       |            // recursion elimination for the right-hand partition.
14748|  5.43k|            detail::pdqsort_loop<Branchless>(begin, pivot_pos, comp, proj,
14749|  5.43k|                                             bad_allowed, leftmost);
14750|  5.43k|            begin = pivot_pos + 1;
14751|  5.43k|            leftmost = false;
14752|  5.43k|        }
14753|  12.2k|    }
_ZN4nano6ranges6detail14insertion_sortINSt3__111__wrap_iterIPNS3_4pairIDiDiEEEENS0_4lessENS0_8identityEEEvT_SB_RT0_RT1_:
14145|  6.57k|    {
14146|  6.57k|        using T = iter_value_t<I>;
14147|       |
14148|  6.57k|        if (begin == end) {
  ------------------
  |  Branch (14148:13): [True: 1.43k, False: 5.14k]
  ------------------
14149|  1.43k|            return;
14150|  1.43k|        }
14151|       |
14152|  24.3k|        for (I cur = begin + 1; cur != end; ++cur) {
  ------------------
  |  Branch (14152:33): [True: 19.2k, False: 5.14k]
  ------------------
14153|  19.2k|            I sift = cur;
14154|  19.2k|            I sift_1 = cur - 1;
14155|       |
14156|       |            // Compare first so we can avoid 2 moves for an element already
14157|       |            // positioned correctly.
14158|  19.2k|            if (nano::invoke(comp, nano::invoke(proj, *sift),
  ------------------
  |  Branch (14158:17): [True: 9.61k, False: 9.61k]
  ------------------
14159|  19.2k|                             nano::invoke(proj, *sift_1))) {
14160|  9.61k|                T tmp = nano::iter_move(sift);
14161|       |
14162|  25.0k|                do {
14163|  25.0k|                    *sift-- = nano::iter_move(sift_1);
14164|  25.0k|                } while (sift != begin &&
  ------------------
  |  Branch (14164:26): [True: 23.7k, False: 1.35k]
  ------------------
14165|  25.0k|                         nano::invoke(comp, nano::invoke(proj, tmp),
  ------------------
  |  Branch (14165:26): [True: 15.4k, False: 8.26k]
  ------------------
14166|  23.7k|                                      nano::invoke(proj, *--sift_1)));
14167|       |
14168|  9.61k|                *sift = std::move(tmp);
14169|  9.61k|            }
14170|  19.2k|        }
14171|  5.14k|    }
_ZNK4nano6ranges6detail10iter_move_2fnclIRNSt3__111__wrap_iterIPNS5_4pairIDiDiEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSC_:
 1721|  79.1k|            {
 1722|  79.1k|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 1723|  79.1k|            }
_ZN4nano6ranges6detail10iter_move_2fn4implIRNSt3__111__wrap_iterIPNS5_4pairIDiDiEEEEEENS5_9enable_ifIXsr3std19is_lvalue_referenceIDTdeclsr3stdE7forwardIT_Efp_EEEE5valueEDTclsr3stdE4movedeclsr3stdE7forwardISD_Efp_EEEE4typeEOSD_NS1_12priority_tagILm1EEE:
 1704|  79.1k|            {
 1705|  79.1k|                return std::move(*std::forward<T>(t));
 1706|  79.1k|            }
_ZN4nano6ranges6detail24unguarded_insertion_sortINSt3__111__wrap_iterIPNS3_4pairIDiDiEEEENS0_4lessENS0_8identityEEEvT_SB_RT0_RT1_:
14182|  5.34k|    {
14183|  5.34k|        using T = iter_value_t<I>;
14184|       |
14185|  5.34k|        if (begin == end) {
  ------------------
  |  Branch (14185:13): [True: 1.77k, False: 3.57k]
  ------------------
14186|  1.77k|            return;
14187|  1.77k|        }
14188|       |
14189|  29.3k|        for (I cur = begin + 1; cur != end; ++cur) {
  ------------------
  |  Branch (14189:33): [True: 25.7k, False: 3.57k]
  ------------------
14190|  25.7k|            I sift = cur;
14191|  25.7k|            I sift_1 = cur - 1;
14192|       |
14193|       |            // Compare first so we can avoid 2 moves for an element already
14194|       |            // positioned correctly.
14195|  25.7k|            if (nano::invoke(comp, nano::invoke(proj, *sift),
  ------------------
  |  Branch (14195:17): [True: 7.44k, False: 18.3k]
  ------------------
14196|  25.7k|                             nano::invoke(proj, *sift_1))) {
14197|  7.44k|                T tmp = nano::iter_move(sift);
14198|       |
14199|  14.4k|                do {
14200|  14.4k|                    *sift-- = nano::iter_move(sift_1);
14201|  14.4k|                } while (nano::invoke(comp, nano::invoke(proj, tmp),
  ------------------
  |  Branch (14201:26): [True: 7.04k, False: 7.44k]
  ------------------
14202|  14.4k|                                      nano::invoke(proj, *--sift_1)));
14203|       |
14204|  7.44k|                *sift = std::move(tmp);
14205|  7.44k|            }
14206|  25.7k|        }
14207|  3.57k|    }
_ZN4nano6ranges6detail5sort3INSt3__111__wrap_iterIPNS3_4pairIDiDiEEEENS0_4lessENS0_8identityEEEvT_SB_SB_RT0_RT1_:
14265|  15.4k|    {
14266|  15.4k|        sort2(a, b, comp, proj);
14267|  15.4k|        sort2(b, c, comp, proj);
14268|  15.4k|        sort2(a, b, comp, proj);
14269|  15.4k|    }
_ZN4nano6ranges6detail5sort2INSt3__111__wrap_iterIPNS3_4pairIDiDiEEEENS0_4lessENS0_8identityEEEvT_SB_RT0_RT1_:
14255|  46.4k|    {
14256|  46.4k|        if (nano::invoke(comp, nano::invoke(proj, *b),
  ------------------
  |  Branch (14256:13): [True: 8.35k, False: 38.0k]
  ------------------
14257|  46.4k|                         nano::invoke(proj, *a))) {
14258|  8.35k|            nano::iter_swap(a, b);
14259|  8.35k|        }
14260|  46.4k|    }
_ZNK4nano6ranges6detail10iter_swap_2fnclIRNSt3__111__wrap_iterIPNS5_4pairIDiDiEEEESB_EEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Eclsr3stdE7forwardIT0_Efp0_EtlNS1_12priority_tagILm2EEEEEEOSC_OSD_:
 2437|  67.0k|            {
 2438|  67.0k|                return fn::impl(std::forward<T>(t), std::forward<U>(u),
 2439|  67.0k|                                priority_tag<2>{});
 2440|  67.0k|            }
_ZN4nano6ranges6detail10iter_swap_2fn4implIRNSt3__111__wrap_iterIPNS5_4pairIDiDiEEEESB_EENS5_9enable_ifIXaaaa8readableINS5_16remove_referenceIT_E4typeEE8readableINSD_IT0_E4typeEE14swappable_withINSC_IXsr6detailE15dereferenceableISE_EEDTdeclsr3stdE7declvalIRSE_EEEE4typeENSC_IXsr6detailE15dereferenceableISH_EEDTdeclsr3stdE7declvalIRSH_EEEE4typeEEEvE4typeEOSE_OSH_NS1_12priority_tagILm1EEE:
 2413|  67.0k|            {
 2414|  67.0k|                ranges::swap(*std::forward<T>(t), *std::forward<U>(u));
 2415|  67.0k|            }
_ZNK4nano6ranges6detail5swap_2fnclIRNSt3__14pairIDiDiEES8_EEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Eclsr3stdE7forwardIT0_Efp0_EtlNS1_12priority_tagILm2EEEEEEOS9_OSA_:
  865|  78.8k|            {
  866|  78.8k|                return fn::impl(std::forward<T>(t), std::forward<U>(u),
  867|  78.8k|                                priority_tag<2>{});
  868|  78.8k|            }
_ZN4nano6ranges6detail5swap_2fn4implIRNSt3__14pairIDiDiEES8_EEDTscvcl4swapclsr3stdE7forwardIT_Efp_Eclsr3stdE7forwardIT0_Efp0_EEEOS9_OSA_NS1_12priority_tagILm2EEE:
  828|  78.8k|            {
  829|  78.8k|                (void)swap(std::forward<T>(t), std::forward<U>(u));
  830|  78.8k|            }
_ZNK4nano6ranges6detail10iter_swap_2fnclIRNSt3__111__wrap_iterIPNS5_4pairIDiDiEEEESA_EEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Eclsr3stdE7forwardIT0_Efp0_EtlNS1_12priority_tagILm2EEEEEEOSC_OSD_:
 2437|  2.71k|            {
 2438|  2.71k|                return fn::impl(std::forward<T>(t), std::forward<U>(u),
 2439|  2.71k|                                priority_tag<2>{});
 2440|  2.71k|            }
_ZN4nano6ranges6detail10iter_swap_2fn4implIRNSt3__111__wrap_iterIPNS5_4pairIDiDiEEEESA_EENS5_9enable_ifIXaaaa8readableINS5_16remove_referenceIT_E4typeEE8readableINSD_IT0_E4typeEE14swappable_withINSC_IXsr6detailE15dereferenceableISE_EEDTdeclsr3stdE7declvalIRSE_EEEE4typeENSC_IXsr6detailE15dereferenceableISH_EEDTdeclsr3stdE7declvalIRSH_EEEE4typeEEEvE4typeEOSE_OSH_NS1_12priority_tagILm1EEE:
 2413|  2.71k|            {
 2414|  2.71k|                ranges::swap(*std::forward<T>(t), *std::forward<U>(u));
 2415|  2.71k|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_4lessEJRNSt3__14pairIDiDiEESA_EEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSB_DpOSC_:
 1299|   886k|            {
 1300|   886k|                return fn::impl(std::forward<F>(f),
 1301|   886k|                                std::forward<Args>(args)...);
 1302|   886k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_4lessEJRNSt3__14pairIDiDiEESA_EEENS7_9enable_ifIXntsr3std17is_member_pointerINS7_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISD_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSD_DpOSG_:
 1288|   886k|            {
 1289|   886k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   886k|            }
_ZNK4nano6ranges4lessclIRNSt3__14pairIDiDiEES6_EENS3_9enable_ifIX20totally_ordered_withIT_T0_EEbE4typeEOS8_OS9_:
 1081|   886k|    {
 1082|   886k|        return std::less<>{}(std::forward<T>(t), std::forward<U>(u));
 1083|   886k|    }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJRNSt3__14pairIDiDiEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSB_DpOSC_:
 1299|  1.77M|            {
 1300|  1.77M|                return fn::impl(std::forward<F>(f),
 1301|  1.77M|                                std::forward<Args>(args)...);
 1302|  1.77M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJRNSt3__14pairIDiDiEEEEENS7_9enable_ifIXntsr3std17is_member_pointerINS7_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISD_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSD_DpOSG_:
 1288|  1.77M|            {
 1289|  1.77M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  1.77M|            }
_ZNK4nano6ranges8identityclIRNSt3__14pairIDiDiEEEEOT_S8_:
 1141|  1.77M|    {
 1142|  1.77M|        return std::forward<T>(t);
 1143|  1.77M|    }
_ZN4nano6ranges6detail14partition_leftINSt3__111__wrap_iterIPNS3_4pairIDiDiEEEENS0_4lessENS0_8identityEEET_SB_SB_RT0_RT1_:
14592|  2.86k|    {
14593|  2.86k|        using T = iter_value_t<I>;
14594|       |
14595|  2.86k|        T pivot(nano::iter_move(begin));
14596|  2.86k|        I first = begin;
14597|  2.86k|        I last = end;
14598|       |
14599|  4.79k|        while (nano::invoke(comp, nano::invoke(proj, pivot),
  ------------------
  |  Branch (14599:16): [True: 1.92k, False: 2.86k]
  ------------------
14600|  4.79k|                            nano::invoke(proj, *--last)))
14601|  1.92k|            ;
14602|       |
14603|  2.86k|        if (last + 1 == end) {
  ------------------
  |  Branch (14603:13): [True: 2.28k, False: 588]
  ------------------
14604|   138k|            while (first < last &&
  ------------------
  |  Branch (14604:20): [True: 137k, False: 1.46k]
  ------------------
14605|   138k|                   !nano::invoke(comp, nano::invoke(proj, pivot),
  ------------------
  |  Branch (14605:20): [True: 136k, False: 816]
  ------------------
14606|   137k|                                 nano::invoke(proj, *++first)))
14607|   136k|                ;
14608|  2.28k|        }
14609|    588|        else {
14610|  7.75k|            while (!nano::invoke(comp, nano::invoke(proj, pivot),
  ------------------
  |  Branch (14610:20): [True: 7.17k, False: 588]
  ------------------
14611|  7.75k|                                 nano::invoke(proj, *++first)))
14612|  7.17k|                ;
14613|    588|        }
14614|       |
14615|  16.5k|        while (first < last) {
  ------------------
  |  Branch (14615:16): [True: 13.6k, False: 2.86k]
  ------------------
14616|  13.6k|            nano::iter_swap(first, last);
14617|  25.2k|            while (nano::invoke(comp, nano::invoke(proj, pivot),
  ------------------
  |  Branch (14617:20): [True: 11.5k, False: 13.6k]
  ------------------
14618|  25.2k|                                nano::invoke(proj, *--last)))
14619|  11.5k|                ;
14620|  64.9k|            while (!nano::invoke(comp, nano::invoke(proj, pivot),
  ------------------
  |  Branch (14620:20): [True: 51.2k, False: 13.6k]
  ------------------
14621|  64.9k|                                 nano::invoke(proj, *++first)))
14622|  51.2k|                ;
14623|  13.6k|        }
14624|       |
14625|  2.86k|        I pivot_pos = last;
14626|  2.86k|        *begin = nano::iter_move(pivot_pos);
14627|  2.86k|        *pivot_pos = std::move(pivot);
14628|       |
14629|  2.86k|        return pivot_pos;
14630|  2.86k|    }
_ZN4nano6ranges6detail15partition_rightINSt3__111__wrap_iterIPNS3_4pairIDiDiEEEENS0_4lessENS0_8identityEEENS5_IT_bEESB_SB_RT0_RT1_:
14533|  5.80k|    {
14534|  5.80k|        using T = iter_value_t<I>;
14535|       |
14536|       |        // Move pivot into local for speed.
14537|  5.80k|        T pivot(nano::iter_move(begin));
14538|       |
14539|  5.80k|        I first = begin;
14540|  5.80k|        I last = end;
14541|       |
14542|       |        // Find the first element greater than or equal than the pivot (the
14543|       |        // median of 3 guarantees this exists).
14544|  36.2k|        while (nano::invoke(comp, nano::invoke(proj, *++first),
  ------------------
  |  Branch (14544:16): [True: 30.4k, False: 5.80k]
  ------------------
14545|  36.2k|                            nano::invoke(proj, pivot))) {}
14546|       |
14547|       |        // Find the first element strictly smaller than the pivot. We have to
14548|       |        // guard this search if there was no element before *first.
14549|  5.80k|        if (first - 1 == begin) {
  ------------------
  |  Branch (14549:13): [True: 3.54k, False: 2.25k]
  ------------------
14550|   175k|            while (first < last &&
  ------------------
  |  Branch (14550:20): [True: 174k, False: 1.74k]
  ------------------
14551|   175k|                   !nano::invoke(comp, nano::invoke(proj, *--last),
  ------------------
  |  Branch (14551:20): [True: 172k, False: 1.80k]
  ------------------
14552|   174k|                                 nano::invoke(proj, pivot))) {}
14553|  3.54k|        }
14554|  2.25k|        else {
14555|  13.3k|            while (!nano::invoke(comp, nano::invoke(proj, *--last),
  ------------------
  |  Branch (14555:20): [True: 11.1k, False: 2.25k]
  ------------------
14556|  13.3k|                                 nano::invoke(proj, pivot))) {}
14557|  2.25k|        }
14558|       |
14559|       |        // If the first pair of elements that should be swapped to partition are
14560|       |        // the same element, the passed in sequence already was correctly
14561|       |        // partitioned.
14562|  5.80k|        bool already_partitioned = first >= last;
14563|       |
14564|       |        // Keep swapping pairs of elements that are on the wrong side of the
14565|       |        // pivot. Previously swapped pairs guard the searches, which is why the
14566|       |        // first iteration is special-cased above.
14567|  50.7k|        while (first < last) {
  ------------------
  |  Branch (14567:16): [True: 44.9k, False: 5.80k]
  ------------------
14568|  44.9k|            nano::iter_swap(first, last);
14569|   137k|            while (nano::invoke(comp, nano::invoke(proj, *++first),
  ------------------
  |  Branch (14569:20): [True: 92.8k, False: 44.9k]
  ------------------
14570|   137k|                                nano::invoke(proj, pivot)))
14571|  92.8k|                ;
14572|   135k|            while (!nano::invoke(comp, nano::invoke(proj, *--last),
  ------------------
  |  Branch (14572:20): [True: 90.8k, False: 44.9k]
  ------------------
14573|   135k|                                 nano::invoke(proj, pivot)))
14574|  90.8k|                ;
14575|  44.9k|        }
14576|       |
14577|       |        // Put the pivot in the right place.
14578|  5.80k|        I pivot_pos = first - 1;
14579|  5.80k|        *begin = nano::iter_move(pivot_pos);
14580|  5.80k|        *pivot_pos = std::move(pivot);
14581|       |
14582|  5.80k|        return std::make_pair(std::move(pivot_pos), already_partitioned);
14583|  5.80k|    }
_ZNK4nano6ranges6detail10iter_swap_2fnclINSt3__111__wrap_iterIPNS5_4pairIDiDiEEEESA_EEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Eclsr3stdE7forwardIT0_Efp0_EtlNS1_12priority_tagILm2EEEEEEOSB_OSC_:
 2437|  9.10k|            {
 2438|  9.10k|                return fn::impl(std::forward<T>(t), std::forward<U>(u),
 2439|  9.10k|                                priority_tag<2>{});
 2440|  9.10k|            }
_ZN4nano6ranges6detail10iter_swap_2fn4implINSt3__111__wrap_iterIPNS5_4pairIDiDiEEEESA_EENS5_9enable_ifIXaaaa8readableINS5_16remove_referenceIT_E4typeEE8readableINSC_IT0_E4typeEE14swappable_withINSB_IXsr6detailE15dereferenceableISD_EEDTdeclsr3stdE7declvalIRSD_EEEE4typeENSB_IXsr6detailE15dereferenceableISG_EEDTdeclsr3stdE7declvalIRSG_EEEE4typeEEEvE4typeEOSD_OSG_NS1_12priority_tagILm1EEE:
 2413|  9.10k|            {
 2414|  9.10k|                ranges::swap(*std::forward<T>(t), *std::forward<U>(u));
 2415|  9.10k|            }
_ZN4nano6ranges6detail22partial_insertion_sortINSt3__111__wrap_iterIPNS3_4pairIDiDiEEEENS0_4lessENS0_8identityEEEbT_SB_RT0_RT1_:
14217|    936|    {
14218|    936|        using T = iter_value_t<I>;
14219|       |
14220|    936|        if (begin == end) {
  ------------------
  |  Branch (14220:13): [True: 0, False: 936]
  ------------------
14221|      0|            return true;
14222|      0|        }
14223|       |
14224|    936|        iter_difference_t<I> limit = 0;
14225|  12.4k|        for (I cur = begin + 1; cur != end; ++cur) {
  ------------------
  |  Branch (14225:33): [True: 11.6k, False: 774]
  ------------------
14226|  11.6k|            if (limit > pqdsort_partial_insertion_sort_limit) {
  ------------------
  |  Branch (14226:17): [True: 162, False: 11.5k]
  ------------------
14227|    162|                return false;
14228|    162|            }
14229|       |
14230|  11.5k|            I sift = cur;
14231|  11.5k|            I sift_1 = cur - 1;
14232|       |
14233|       |            // Compare first so we can avoid 2 moves for an element already
14234|       |            // positioned correctly.
14235|  11.5k|            if (nano::invoke(comp, nano::invoke(proj, *sift),
  ------------------
  |  Branch (14235:17): [True: 1.88k, False: 9.61k]
  ------------------
14236|  11.5k|                             nano::invoke(proj, *sift_1))) {
14237|  1.88k|                T tmp = nano::iter_move(sift);
14238|       |
14239|  3.28k|                do {
14240|  3.28k|                    *sift-- = nano::iter_move(sift_1);
14241|  3.28k|                } while (sift != begin &&
  ------------------
  |  Branch (14241:26): [True: 2.89k, False: 384]
  ------------------
14242|  3.28k|                         nano::invoke(comp, nano::invoke(proj, tmp),
  ------------------
  |  Branch (14242:26): [True: 1.39k, False: 1.50k]
  ------------------
14243|  2.89k|                                      nano::invoke(proj, *--sift_1)));
14244|       |
14245|  1.88k|                *sift = std::move(tmp);
14246|  1.88k|                limit += cur - sift;
14247|  1.88k|            }
14248|  11.5k|        }
14249|       |
14250|    774|        return true;
14251|    936|    }
_ZN4nano6ranges6detail4log2IlEEiT_:
14134|  6.86k|    {
14135|  6.86k|        int log = 0;
14136|  25.8k|        while (n >>= 1)
  ------------------
  |  Branch (14136:16): [True: 18.9k, False: 6.86k]
  ------------------
14137|  18.9k|            ++log;
14138|  6.86k|        return log;
14139|  6.86k|    }
_ZNK4nano6ranges6detail9distance_2fnclINSt3__111__wrap_iterIPNS5_4pairIDiDiEEEESA_EENS5_9enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS0_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
 3755|  27.4k|            {
 3756|  27.4k|                return fn::impl(std::move(first), std::move(last));
 3757|  27.4k|            }
_ZN4nano6ranges6detail9distance_2fn4implINSt3__111__wrap_iterIPNS5_4pairIDiDiEEEESA_EENS5_9enable_ifIX18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_:
 3715|  27.4k|            {
 3716|  27.4k|                return s - i;
 3717|  27.4k|            }
_ZNK4nano6ranges6detail10find_if_fnclIRKNSt3__16vectorINS4_4pairIDiDiEENS4_9allocatorIS7_EEEENS0_8identityEZNK3scn2v24impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDiEUlRKT_E_EENS4_9enable_ifIXaa11input_rangeISK_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SD_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSK_EEEENS1_16projected_helperISW_SR_vEEEEEENSQ_IX14borrowed_rangeISK_EEE4typeISW_NS0_8danglingEEEE4typeEOSK_SP_SR_:
 6792|  65.8k|        {
 6793|  65.8k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|  65.8k|                                    proj);
 6795|  65.8k|        }
_ZN4nano6ranges6detail10find_if_fn4implINSt3__111__wrap_iterIPKNS4_4pairIDiDiEEEESA_ZNK3scn2v24impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDiEUlRKT_E_NS0_8identityEEESH_SH_T0_RT1_RT2_:
 6760|  65.8k|        {
 6761|   984k|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 935k, False: 48.8k]
  ------------------
 6762|   935k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 17.0k, False: 918k]
  ------------------
 6763|  17.0k|                    return first;
 6764|  17.0k|                }
 6765|   918k|                ++first;
 6766|   918k|            }
 6767|  48.8k|            return first;
 6768|  65.8k|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRZNK3scn2v24impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDiEUlRKT_E_JRKNSt3__14pairIDiDiEEEEEDTclsr2fnE4implclsr3stdE7forwardISB_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSB_DpOSL_:
 1299|   935k|            {
 1300|   935k|                return fn::impl(std::forward<F>(f),
 1301|   935k|                                std::forward<Args>(args)...);
 1302|   935k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRZNK3scn2v24impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDiEUlRKT_E_JRKNSt3__14pairIDiDiEEEEENSG_9enable_ifIXntsr3std17is_member_pointerINSG_5decayISB_E4typeEEE5valueEDTclclsr3stdE7forwardISB_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSB_DpOSP_:
 1288|   935k|            {
 1289|   935k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   935k|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJRKNSt3__14pairIDiDiEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSC_DpOSD_:
 1299|  6.77M|            {
 1300|  6.77M|                return fn::impl(std::forward<F>(f),
 1301|  6.77M|                                std::forward<Args>(args)...);
 1302|  6.77M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJRKNSt3__14pairIDiDiEEEEENS7_9enable_ifIXntsr3std17is_member_pointerINS7_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISE_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSE_DpOSH_:
 1288|  6.77M|            {
 1289|  6.77M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  6.77M|            }
_ZNK4nano6ranges8identityclIRKNSt3__14pairIDiDiEEEEOT_S9_:
 1141|  6.77M|    {
 1142|  6.77M|        return std::forward<T>(t);
 1143|  6.77M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRKNSt3__16vectorINS5_4pairIDiDiEENS5_9allocatorIS8_EEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSE_:
 2692|   131k|            {
 2693|   131k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   131k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNSt3__16vectorINS5_4pairIDiDiEENS5_9allocatorIS8_EEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESG_E4typeEOSF_NS1_12priority_tagILm1EEE:
 2671|   131k|            {
 2672|   131k|                return decay_copy(t.begin());
 2673|   131k|            }
_ZN4nano6ranges6detail10decay_copyINSt3__111__wrap_iterIPKNS3_4pairIDiDiEEEEEENS3_5decayIT_E4typeEOSB_:
 2605|   262k|    {
 2606|   262k|        return std::forward<T>(t);
 2607|   262k|    }
_ZNK4nano6ranges6detail4end_2fnclIRKNSt3__16vectorINS5_4pairIDiDiEENS5_9allocatorIS8_EEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSE_:
 2758|   131k|            {
 2759|   131k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   131k|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNSt3__16vectorINS5_4pairIDiDiEENS5_9allocatorIS8_EEEENS5_11__wrap_iterIPKS8_EESH_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|   131k|            {
 2739|   131k|                return decay_copy(std::forward<T>(t).end());
 2740|   131k|            }
_ZNK4nano6ranges6detail10find_if_fnclIRN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeIPKcSB_LNS0_13subrange_kindE1EEEEENS0_8identityENS6_12function_refIFbcESI_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SG_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSM_EEEENS1_16projected_helperISU_SP_vEEEEEENSO_IX14borrowed_rangeISM_EEE4typeISU_NS0_8danglingEEEE4typeEOSM_SN_SP_:
 6792|    246|        {
 6793|    246|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|    246|                                    proj);
 6795|    246|        }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|   367k|            {
 2693|   367k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   367k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESF_E4typeEOSE_NS1_12priority_tagILm1EEE:
 2671|   367k|            {
 2672|   367k|                return decay_copy(t.begin());
 2673|   367k|            }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|  3.19M|            {
 2759|  3.19M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  3.19M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  3.19M|            {
 2739|  3.19M|                return decay_copy(std::forward<T>(t).end());
 2740|  3.19M|            }
_ZNK4nano6ranges6detail5data_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSC_:
 3177|  11.1k|            {
 3178|  11.1k|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  11.1k|            }
_ZN4nano6ranges6detail5data_2fn4implINS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  11.1k|            {
 3158|  11.1k|                return t.data();
 3159|  11.1k|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6084|  20.5k|    {
 6085|  20.5k|        return ranges::empty(derived())
  ------------------
  |  Branch (6085:16): [True: 402, False: 20.1k]
  ------------------
 6086|  20.5k|                   ? nullptr
 6087|  20.5k|                   : std::addressof(*ranges::begin(derived()));
 6088|  20.5k|    }
_ZNK4nano6ranges6detail6empty_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSC_:
 3126|  20.5k|            {
 3127|  20.5k|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  20.5k|            }
_ZN4nano6ranges6detail6empty_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSC_NS1_12priority_tagILm2EEE:
 3097|  20.5k|            {
 3098|  20.5k|                return bool((std::forward<T>(t).empty()));
 3099|  20.5k|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE5emptyEv:
 6453|  20.5k|        {
 6454|  20.5k|            return data_.begin_ == data_.end_;
 6455|  20.5k|        }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6043|  40.7k|    {
 6044|  40.7k|        return static_cast<D&>(*this);
 6045|  40.7k|    }
_ZNK4nano6ranges6detail5size_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 3037|  23.9k|            {
 3038|  23.9k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  23.9k|            }
_ZN4nano6ranges6detail5size_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|  23.9k|            {
 3000|  23.9k|                return decay_copy(std::forward<T>(t).size());
 3001|  23.9k|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE4sizeILS5_1EEENSt3__19enable_ifIXeqT_LS5_1EElE4typeEv:
 6461|  28.1k|        {
 6462|  28.1k|            if constexpr (StoreSize) {
  ------------------
  |  Branch (6462:27): [Folded - Ignored]
  ------------------
 6463|  28.1k|                return data_.size_;
 6464|  28.1k|            }
 6465|  28.1k|            else {
 6466|  28.1k|                return data_.end_ - data_.begin_;
 6467|  28.1k|            }
 6468|  28.1k|        }
_ZN4nano6ranges6detail8advance_2fn4implIPKwS6_EENSt3__19enable_ifIX15assignable_fromIRT_T0_EEvE4typeESA_SB_NS1_12priority_tagILm2EEE:
 3596|  1.04k|            {
 3597|  1.04k|                i = std::move(bound);
 3598|  1.04k|            }
_ZNK4nano6ranges6detail5next_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
 3779|  3.61M|            {
 3780|  3.61M|                ++x;
 3781|  3.61M|                return x;
 3782|  3.61M|            }
_ZNK4nano6ranges6detail6ssize_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSC_:
 3076|  12.8k|            {
 3077|  12.8k|                return fn::impl(std::forward<T>(t));
 3078|  12.8k|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNSt3__111conditionalIXltstNSE_9enable_ifIX5rangeISD_EENS0_20incrementable_traitsIDTclL_ZNSC_5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSD_:
 3066|  12.8k|            {
 3067|  12.8k|                return static_cast<ssize_return_t<T>>(
 3068|  12.8k|                    ranges::size(std::forward<T>(t)));
 3069|  12.8k|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIPKwS7_LNS0_13subrange_kindE1EEENS0_8identityEN3scn2v24impl12function_refIFbwESG_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SB_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSK_EEEENS1_16projected_helperISS_SN_vEEEEEENSM_IX14borrowed_rangeISK_EEE4typeISS_NS0_8danglingEEEE4typeEOSK_SL_SN_:
 6792|    342|        {
 6793|    342|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|    342|                                    proj);
 6795|    342|        }
_ZN4nano6ranges6detail10find_if_fn4implIPKwS5_N3scn2v24impl12function_refIFbwESA_EENS0_8identityEEET_SD_T0_RT1_RT2_:
 6760|    342|        {
 6761|  4.95k|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 4.93k, False: 24]
  ------------------
 6762|  4.93k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 318, False: 4.61k]
  ------------------
 6763|    318|                    return first;
 6764|    318|                }
 6765|  4.61k|                ++first;
 6766|  4.61k|            }
 6767|     24|            return first;
 6768|    342|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbwES9_EEJRKwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSE_DpOSF_:
 1299|  7.72k|            {
 1300|  7.72k|                return fn::impl(std::forward<F>(f),
 1301|  7.72k|                                std::forward<Args>(args)...);
 1302|  7.72k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbwES9_EEJRKwEEENSt3__19enable_ifIXntsr3std17is_member_pointerINSE_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISH_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSH_DpOSK_:
 1288|  7.72k|            {
 1289|  7.72k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  7.72k|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJRKwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS9_DpOSA_:
 1299|  7.72k|            {
 1300|  7.72k|                return fn::impl(std::forward<F>(f),
 1301|  7.72k|                                std::forward<Args>(args)...);
 1302|  7.72k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJRKwEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS9_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISC_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSC_DpOSF_:
 1288|  7.72k|            {
 1289|  7.72k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  7.72k|            }
_ZNK4nano6ranges8identityclIRKwEEOT_S6_:
 1141|  7.72k|    {
 1142|  7.72k|        return std::forward<T>(t);
 1143|  7.72k|    }
_ZNK4nano6ranges6detail5next_2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
 3797|  1.04k|            {
 3798|  1.04k|                ranges::advance(x, bound);
 3799|  1.04k|                return x;
 3800|  1.04k|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EEvE4typeERS9_SA_:
 3685|  1.04k|            {
 3686|  1.04k|                fn::impl(i, bound, priority_tag<2>{});
 3687|  1.04k|            }
_ZNK4nano6ranges6detail5data_2fnclIRNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSD_:
 3177|  4.98k|            {
 3178|  4.98k|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  4.98k|            }
_ZN4nano6ranges6detail5data_2fn4implINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEPcEENS5_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  4.98k|            {
 3158|  4.98k|                return t.data();
 3159|  4.98k|            }
_ZNK4nano6ranges6detail5data_2fnclIRKNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSC_:
 3177|  2.58k|            {
 3178|  2.58k|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  2.58k|            }
_ZN4nano6ranges6detail5data_2fn4implIKNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEPKwEENS5_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  2.58k|            {
 3158|  2.58k|                return t.data();
 3159|  2.58k|            }
_ZNK4nano6ranges6detail5size_2fnclIRKNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 3037|  2.58k|            {
 3038|  2.58k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  2.58k|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEmEENS5_9enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESD_E4typeEOSF_NS1_12priority_tagILm2EEE:
 2999|  2.58k|            {
 3000|  2.58k|                return decay_copy(std::forward<T>(t).size());
 3001|  2.58k|            }
_ZNK4nano6ranges6detail9distance_2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EENS0_20incrementable_traitsIS9_E15difference_typeEE4typeES9_SA_:
 3755|  4.94k|            {
 3756|  4.94k|                return fn::impl(std::move(first), std::move(last));
 3757|  4.94k|            }
_ZN4nano6ranges6detail9distance_2fn4implIPKwS6_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISA_E15difference_typeEE4typeESA_S9_:
 3715|  4.94k|            {
 3716|  4.94k|                return s - i;
 3717|  4.94k|            }
_ZNK4nano6ranges6detail6begin_2fnclIRKN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeIPKwSC_LNS0_13subrange_kindE1EEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  2.11k|            {
 2693|  2.11k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  2.11k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeIPKwSC_LNS0_13subrange_kindE1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  2.11k|            {
 2672|  2.11k|                return decay_copy(t.begin());
 2673|  2.11k|            }
_ZN4nano6ranges6detail10decay_copyIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENSt3__15decayIT_E4typeEOSD_:
 2605|   131k|    {
 2606|   131k|        return std::forward<T>(t);
 2607|   131k|    }
_ZNK4nano6ranges6detail4end_2fnclIRKN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeIPKwSC_LNS0_13subrange_kindE1EEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  1.68k|            {
 2759|  1.68k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  1.68k|            }
_ZN4nano6ranges6detail4end_2fn4implIRKN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeIPKwSC_LNS0_13subrange_kindE1EEEEENSF_8sentinelILb1EEENS7_27counted_width_iterator_impl22counted_width_iteratorISC_SC_EEEENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSR_NS1_12priority_tagILm1EEE:
 2738|  1.68k|            {
 2739|  1.68k|                return decay_copy(std::forward<T>(t).end());
 2740|  1.68k|            }
_ZN4nano6ranges6detail10decay_copyIN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeIPKwSA_LNS0_13subrange_kindE1EEEE8sentinelILb1EEEEENSt3__15decayIT_E4typeEOSI_:
 2605|  79.7k|    {
 2606|  79.7k|        return std::forward<T>(t);
 2607|  79.7k|    }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwSB_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESF_E4typeESF_:
 3779|  2.14k|            {
 3780|  2.14k|                ++x;
 3781|  2.14k|                return x;
 3782|  2.14k|            }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EENS9_15take_width_viewINS6_ISD_SD_LNS0_13subrange_kindE1EEEE8sentinelILb1EEELSG_0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSN_:
 2758|  48.3k|            {
 2759|  48.3k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  48.3k|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EENS9_15take_width_viewINS6_ISD_SD_LNS0_13subrange_kindE1EEEE8sentinelILb1EEELSG_0EEESK_SE_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSR_NS1_12priority_tagILm1EEE:
 2738|  48.3k|            {
 2739|  48.3k|                return decay_copy(std::forward<T>(t).end());
 2740|  48.3k|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS2_IS9_S9_LNS0_13subrange_kindE1EEEE8sentinelILb1EEELSC_0EE3endEv:
 6448|  48.7k|        {
 6449|  48.7k|            return data_.end_;
 6450|  48.7k|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EENS9_15take_width_viewINS6_ISD_SD_LNS0_13subrange_kindE1EEEE8sentinelILb1EEELSG_0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSO_:
 2692|    468|            {
 2693|    468|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|    468|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EENS9_15take_width_viewINS6_ISD_SD_LNS0_13subrange_kindE1EEEE8sentinelILb1EEELSG_0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESR_E4typeEOSQ_NS1_12priority_tagILm1EEE:
 2671|    468|            {
 2672|    468|                return decay_copy(t.begin());
 2673|    468|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS2_IS9_S9_LNS0_13subrange_kindE1EEEE8sentinelILb1EEELSC_0EE5beginEv:
 6443|  75.2k|        {
 6444|  75.2k|            return data_.begin_;
 6445|  75.2k|        }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EENS9_15take_width_viewINS6_ISD_SD_LNS0_13subrange_kindE1EEEE8sentinelILb1EEELSG_0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSO_:
 2758|    468|            {
 2759|    468|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|    468|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EENS9_15take_width_viewINS6_ISD_SD_LNS0_13subrange_kindE1EEEE8sentinelILb1EEELSG_0EEESK_SE_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSS_NS1_12priority_tagILm1EEE:
 2738|    468|            {
 2739|    468|                return decay_copy(std::forward<T>(t).end());
 2740|    468|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EENS9_15take_width_viewINS6_ISD_SD_LNS0_13subrange_kindE1EEEE8sentinelILb1EEELSG_0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSN_:
 2692|  74.7k|            {
 2693|  74.7k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  74.7k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EENS9_15take_width_viewINS6_ISD_SD_LNS0_13subrange_kindE1EEEE8sentinelILb1EEELSG_0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESQ_E4typeEOSP_NS1_12priority_tagILm1EEE:
 2671|  74.7k|            {
 2672|  74.7k|                return decay_copy(t.begin());
 2673|  74.7k|            }
_ZNK4nano6ranges6detail6begin_2fnclIRN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeIPKwSC_LNS0_13subrange_kindE1EEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2692|  8.68k|            {
 2693|  8.68k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  8.68k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeIPKwSC_LNS0_13subrange_kindE1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  8.68k|            {
 2672|  8.68k|                return decay_copy(t.begin());
 2673|  8.68k|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS5_ISC_SC_LNS0_13subrange_kindE1EEEE8sentinelILb1EEELSF_0EEENS0_8identityENS8_12function_refIFbwESO_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SM_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSS_EEEENS1_16projected_helperIS10_SV_vEEEEEENSU_IX14borrowed_rangeISS_EEE4typeIS10_NS0_8danglingEEEE4typeEOSS_ST_SV_:
 6792|    950|        {
 6793|    950|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|    950|                                    proj);
 6795|    950|        }
_ZN4nano6ranges6detail10find_if_fn4implIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_15take_width_viewINS0_9subrange_8subrangeISA_SA_LNS0_13subrange_kindE1EEEE8sentinelILb1EEENS6_12function_refIFbwESL_EENS0_8identityEEET_SO_T0_RT1_RT2_:
 6760|  1.08k|        {
 6761|  2.84k|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 2.79k, False: 54]
  ------------------
 6762|  2.79k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 1.03k, False: 1.75k]
  ------------------
 6763|  1.03k|                    return first;
 6764|  1.03k|                }
 6765|  1.75k|                ++first;
 6766|  1.75k|            }
 6767|     54|            return first;
 6768|  1.08k|        }
_ZNK4nano6ranges6detail4end_2fnclIRN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeIPKwSC_LNS0_13subrange_kindE1EEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2758|  29.3k|            {
 2759|  29.3k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  29.3k|            }
_ZN4nano6ranges6detail4end_2fn4implIRN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeIPKwSC_LNS0_13subrange_kindE1EEEEENSF_8sentinelILb1EEENS7_27counted_width_iterator_impl22counted_width_iteratorISC_SC_EEEENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSQ_NS1_12priority_tagILm1EEE:
 2738|  29.3k|            {
 2739|  29.3k|                return decay_copy(std::forward<T>(t).end());
 2740|  29.3k|            }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS2_IS9_S9_LNS0_13subrange_kindE1EEEE8sentinelILb1EEELSC_0EEC2ISA_Lb0EvEET_SG_:
 6374|  24.3k|        {
 6375|  24.3k|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS0_9subrange_8subrangeIS9_S9_LNS0_13subrange_kindE1EEEE8sentinelILb1EEELb0EEC2EOSA_OSI_:
 6293|  24.3k|        {
 6294|  24.3k|        }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EESE_LNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  22.6k|            {
 2693|  22.6k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  22.6k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EESE_LNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  22.6k|            {
 2672|  22.6k|                return decay_copy(t.begin());
 2673|  22.6k|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_LNS0_13subrange_kindE0EE5beginEv:
 6443|  22.6k|        {
 6444|  22.6k|            return data_.begin_;
 6445|  22.6k|        }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EESE_LNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  22.6k|            {
 2759|  22.6k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  22.6k|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EESE_LNS0_13subrange_kindE0EEESE_SE_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|  22.6k|            {
 2739|  22.6k|                return decay_copy(std::forward<T>(t).end());
 2740|  22.6k|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_LNS0_13subrange_kindE0EE3endEv:
 6448|  22.6k|        {
 6449|  22.6k|            return data_.end_;
 6450|  22.6k|        }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_LNS0_13subrange_kindE0EEC2ISA_Lb0EvEET_SA_:
 6374|  22.6k|        {
 6375|  22.6k|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_Lb0EEC2EOSA_SC_:
 6293|  22.6k|        {
 6294|  22.6k|        }
_ZNK4nano6ranges6detail6ssize_2fnclIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSB_:
 3076|     36|            {
 3077|     36|                return fn::impl(std::forward<T>(t));
 3078|     36|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeISC_EENS0_20incrementable_traitsIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRSC_EEEEE15difference_typeEE4typeELm8EElSL_E4typeE_EEOSC_:
 3066|     36|            {
 3067|     36|                return static_cast<ssize_return_t<T>>(
 3068|     36|                    ranges::size(std::forward<T>(t)));
 3069|     36|            }
_ZNK4nano6ranges6detail5size_2fnclIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 3037|     36|            {
 3038|     36|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|     36|            }
_ZN4nano6ranges6detail5size_2fn4implIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEmEENS5_9enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESC_E4typeEOSE_NS1_12priority_tagILm2EEE:
 2999|     36|            {
 3000|     36|                return decay_copy(std::forward<T>(t).size());
 3001|     36|            }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwSB_EENS7_15take_width_viewINS0_9subrange_8subrangeISB_SB_LNS0_13subrange_kindE1EEEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SN_EESN_E4typeESN_SO_:
 3797|    222|            {
 3798|    222|                ranges::advance(x, bound);
 3799|    222|                return x;
 3800|    222|            }
_ZNK4nano6ranges6detail8advance_2fnclIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwSB_EENS7_15take_width_viewINS0_9subrange_8subrangeISB_SB_LNS0_13subrange_kindE1EEEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SN_EEvE4typeERSN_SO_:
 3685|    222|            {
 3686|    222|                fn::impl(i, bound, priority_tag<2>{});
 3687|    222|            }
_ZN4nano6ranges6detail8advance_2fn4implIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwSB_EENS7_15take_width_viewINS0_9subrange_8subrangeISB_SB_LNS0_13subrange_kindE1EEEE8sentinelILb1EEEEEvRT_T0_NS1_12priority_tagILm0EEE:
 3609|    222|            {
 3610|  6.56k|                while (i != bound) {
  ------------------
  |  Branch (3610:24): [True: 6.34k, False: 222]
  ------------------
 3611|  6.34k|                    ++i;
 3612|  6.34k|                }
 3613|    222|            }
_ZNK4nano6ranges6detail10find_if_fnclIRKNSt3__16vectorINS4_4pairIDiDiEENS4_9allocatorIS7_EEEENS0_8identityEZNK3scn2v24impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDiEUlRKT_E_EENS4_9enable_ifIXaa11input_rangeISK_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SD_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSK_EEEENS1_16projected_helperISW_SR_vEEEEEENSQ_IX14borrowed_rangeISK_EEE4typeISW_NS0_8danglingEEEE4typeEOSK_SP_SR_:
 6792|  65.5k|        {
 6793|  65.5k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|  65.5k|                                    proj);
 6795|  65.5k|        }
_ZN4nano6ranges6detail10find_if_fn4implINSt3__111__wrap_iterIPKNS4_4pairIDiDiEEEESA_ZNK3scn2v24impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDiEUlRKT_E_NS0_8identityEEESH_SH_T0_RT1_RT2_:
 6760|  65.5k|        {
 6761|  5.84M|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 5.84M, False: 2.79k]
  ------------------
 6762|  5.84M|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 62.7k, False: 5.77M]
  ------------------
 6763|  62.7k|                    return first;
 6764|  62.7k|                }
 6765|  5.77M|                ++first;
 6766|  5.77M|            }
 6767|  2.79k|            return first;
 6768|  65.5k|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRZNK3scn2v24impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDiEUlRKT_E_JRKNSt3__14pairIDiDiEEEEEDTclsr2fnE4implclsr3stdE7forwardISB_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSB_DpOSL_:
 1299|  5.84M|            {
 1300|  5.84M|                return fn::impl(std::forward<F>(f),
 1301|  5.84M|                                std::forward<Args>(args)...);
 1302|  5.84M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRZNK3scn2v24impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDiEUlRKT_E_JRKNSt3__14pairIDiDiEEEEENSG_9enable_ifIXntsr3std17is_member_pointerINSG_5decayISB_E4typeEEE5valueEDTclclsr3stdE7forwardISB_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSB_DpOSP_:
 1288|  5.84M|            {
 1289|  5.84M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  5.84M|            }
_ZNK4nano6ranges6detail10find_if_fnclIRN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeIPKwSB_LNS0_13subrange_kindE1EEEEENS0_8identityENS6_12function_refIFbwESI_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SG_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSM_EEEENS1_16projected_helperISU_SP_vEEEEEENSO_IX14borrowed_rangeISM_EEE4typeISU_NS0_8danglingEEEE4typeEOSM_SN_SP_:
 6792|    138|        {
 6793|    138|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|    138|                                    proj);
 6795|    138|        }
find_whitespace.cpp:_ZNK4nano6ranges6detail10find_if_fnclIRNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEENS0_8identityEZN3scn2v24impl30find_classic_space_narrow_fastES8_E3$_1EENS4_9enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SA_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSG_EEEENS1_16projected_helperISO_SJ_vEEEEEENSI_IX14borrowed_rangeISG_EEE4typeISO_NS0_8danglingEEEE4typeEOSG_SH_SJ_:
 6792|  21.1k|        {
 6793|  21.1k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|  21.1k|                                    proj);
 6795|  21.1k|        }
find_whitespace.cpp:_ZN4nano6ranges6detail10find_if_fn4implIPKcS5_ZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEE3$_1NS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|  21.1k|        {
 6761|   178k|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 157k, False: 20.4k]
  ------------------
 6762|   157k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 708, False: 157k]
  ------------------
 6763|    708|                    return first;
 6764|    708|                }
 6765|   157k|                ++first;
 6766|   157k|            }
 6767|  20.4k|            return first;
 6768|  21.1k|        }
find_whitespace.cpp:_ZNK4nano6ranges6detail7invoke_2fnclIRZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_1JRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSH_DpOSI_:
 1299|   157k|            {
 1300|   157k|                return fn::impl(std::forward<F>(f),
 1301|   157k|                                std::forward<Args>(args)...);
 1302|   157k|            }
find_whitespace.cpp:_ZN4nano6ranges6detail7invoke_2fn4implIRZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_1JRKcEEENS8_9enable_ifIXntsr3std17is_member_pointerINS8_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISJ_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSJ_DpOSM_:
 1288|   157k|            {
 1289|   157k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   157k|            }
find_whitespace.cpp:_ZNK4nano6ranges6detail10find_if_fnclIRNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEENS0_8identityEZN3scn2v24impl33find_classic_nonspace_narrow_fastES8_E3$_3EENS4_9enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SA_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSG_EEEENS1_16projected_helperISO_SJ_vEEEEEENSI_IX14borrowed_rangeISG_EEE4typeISO_NS0_8danglingEEEE4typeEOSG_SH_SJ_:
 6792|   120k|        {
 6793|   120k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|   120k|                                    proj);
 6795|   120k|        }
find_whitespace.cpp:_ZN4nano6ranges6detail10find_if_fn4implIPKcS5_ZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEE3$_3NS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|   120k|        {
 6761|   148k|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 145k, False: 3.62k]
  ------------------
 6762|   145k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 116k, False: 28.4k]
  ------------------
 6763|   116k|                    return first;
 6764|   116k|                }
 6765|  28.4k|                ++first;
 6766|  28.4k|            }
 6767|  3.62k|            return first;
 6768|   120k|        }
find_whitespace.cpp:_ZNK4nano6ranges6detail7invoke_2fnclIRZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_3JRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSH_DpOSI_:
 1299|   145k|            {
 1300|   145k|                return fn::impl(std::forward<F>(f),
 1301|   145k|                                std::forward<Args>(args)...);
 1302|   145k|            }
find_whitespace.cpp:_ZN4nano6ranges6detail7invoke_2fn4implIRZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_3JRKcEEENS8_9enable_ifIXntsr3std17is_member_pointerINS8_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISJ_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSJ_DpOSM_:
 1288|   145k|            {
 1289|   145k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   145k|            }

_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA22_KcEEEDaDpOT_:
   49|  7.29k|{
   50|  7.29k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  7.29k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  7.29k|}
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
   49|  1.48k|{
   50|  1.48k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  1.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  1.48k|}
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA47_KcEEEDaDpOT_:
   49|  5.94k|{
   50|  5.94k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  5.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  5.94k|}
_ZN3scn2v213scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
   43|  1.37k|    {
   44|  1.37k|    }
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
   49|  2.30k|{
   50|  2.30k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  2.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  2.30k|}
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA40_KcEEEDaDpOT_:
   49|  1.15k|{
   50|  1.15k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  1.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  1.15k|}
_ZN3scn2v213scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
   43|  1.46k|    {
   44|  1.46k|    }
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA23_KcEEEDaDpOT_:
   49|     38|{
   50|     38|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|     38|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|     38|}
_ZZN3scn2v24impl12float_readerIcE16read_source_implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_ENKUlSM_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSE_8sentinelILb1EEELSC_0EEEEEDaSM_:
   66|      2|    auto&& SCN_TRY_TMP = (x);                          \
_ZZN3scn2v24impl12float_readerIcE16read_source_implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_ENKUlSM_E_clIRNS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSE_8sentinelILb1EEELSC_0EEEEEDaSM_:
   66|    276|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA52_KcEEEDaDpOT_:
   49|    234|{
   50|    234|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|    234|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|    234|}
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA14_KcEEEDaDpOT_:
   49|  10.9k|{
   50|  10.9k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  10.9k|}
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA32_KcEEEDaDpOT_:
   49|  5.94k|{
   50|  5.94k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  5.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  5.94k|}
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA36_KcEEEDaDpOT_:
   49|    576|{
   50|    576|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|    576|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|    576|}
_ZN3scn2v213scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
   43|  1.11k|    {
   44|  1.11k|    }
_ZN3scn2v213scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
   43|  1.17k|    {
   44|  1.17k|    }
_ZZN3scn2v24impl12float_readerIwE16read_source_implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_ENKUlSM_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSE_8sentinelILb1EEELSC_0EEEEEDaSM_:
   66|      2|    auto&& SCN_TRY_TMP = (x);                          \
_ZZN3scn2v24impl12float_readerIwE16read_source_implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_ENKUlSM_E_clIRNS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSE_8sentinelILb1EEELSC_0EEEEEDaSM_:
   66|    220|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
   49|  2.33k|{
   50|  2.33k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  2.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  2.33k|}

_ZNK3scn2v28expectedIlNS0_10scan_errorEEcvbEv:
 1190|   202k|    {
 1191|   202k|        return has_value();
 1192|   202k|    }
_ZNK3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  188|   404k|    {
  189|   404k|        return m_has_value;
  190|   404k|    }
_ZNR3scn2v28expectedIlNS0_10scan_errorEE5errorEv:
 1196|   197k|    {
 1197|   197k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   197k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   197k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   197k|    }
_ZNR3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   197k|    {
  172|   197k|        return m_unexpected;
  173|   197k|    }
_ZNR3scn2v210unexpectedINS0_10scan_errorEE5errorEv:
   71|  1.28M|    {
   72|  1.28M|        return m_unexpected;
   73|  1.28M|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
   57|   699k|    {
   58|   699k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   699k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|   699k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISA_LPv0ELSD_0EEEONS0_10unexpectedIT_EE:
 1077|  70.2k|    {
 1078|  70.2k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  150|  70.2k|    {
  151|  70.2k|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
   66|   742k|    {
   67|   742k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   742k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|   742k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  72.7k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1250|  5.09k|    {
 1251|  5.09k|        return value();
 1252|  5.09k|    }
_ZNR3scn2v28expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1220|  5.09k|    {
 1221|  5.09k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  5.09k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.09k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  5.09k|    }
_ZNR3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  154|  5.09k|    {
  155|  5.09k|        return m_value;
  156|  5.09k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2IS9_vEEOT_:
 1033|  2.44k|    {
 1034|  2.44k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  141|  2.44k|    {
  142|  2.44k|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|  72.7k|    {
 1191|  72.7k|        return has_value();
 1192|  72.7k|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|   145k|    {
  189|   145k|        return m_has_value;
  190|   145k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|  70.2k|    {
 1197|  70.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  70.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  70.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  70.2k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  70.2k|    {
  172|  70.2k|        return m_unexpected;
  173|  70.2k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJcEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  7.88k|    {
 1078|  7.88k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJcEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  7.88k|    {
  151|  7.88k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJcEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  8.08k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEERT_v:
 1250|  2.44k|    {
 1251|  2.44k|        return value();
 1252|  2.44k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1220|  2.44k|    {
 1221|  2.44k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  2.44k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.44k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  2.44k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  2.44k|    {
  155|  2.44k|        return m_value;
  156|  2.44k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJcEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|    196|    {
 1034|    196|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJcEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|    196|    {
  142|    196|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  8.08k|    {
 1078|  8.08k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  8.08k|    {
  151|  8.08k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  8.08k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  8.08k|    {
 1078|  8.08k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  8.08k|    {
  151|  8.08k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  8.08k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  8.08k|    {
 1078|  8.08k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  8.08k|    {
  151|  8.08k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  8.08k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJbEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  8.08k|    {
 1078|  8.08k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJbEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  8.08k|    {
  151|  8.08k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  8.08k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJPvEEENS0_10scan_errorEEC2ISD_LSB_0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|  8.08k|    {
 1078|  8.08k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJPvEEENS0_10scan_errorELb1EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  150|  8.08k|    {
  151|  8.08k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  8.08k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISJ_LPv0ELSM_0EEEONS0_10unexpectedIT_EE:
 1077|  7.33k|    {
 1078|  7.33k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSK_EvEENS0_10unexpect_tEDpOT_:
  311|  7.33k|    {
  312|  7.33k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  7.33k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSC_10in_place_tESK_EEEvDpOT_:
  372|  7.33k|    {
  373|  7.33k|        scn::detail::construct_at(unexpected_ptr(),
  374|  7.33k|                                  std::forward<Args>(args)...);
  375|  7.33k|        m_has_value = false;
  376|  7.33k|    }
_ZN3scn2v26detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  101|  40.9k|{
  102|  40.9k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|  40.9k|        T(std::forward<Args>(args)...);
  104|  40.9k|}
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|  14.6k|    {
  403|  14.6k|        return reinterpret_cast<unexpected<E>*>(
  404|  14.6k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|  14.6k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|  14.6k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  8.08k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  316|  8.08k|    {
  317|  8.08k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 750, False: 7.33k]
  ------------------
  318|    750|            destroy_value();
  319|    750|        }
  320|  7.33k|        else {
  321|  7.33k|            destroy_unexpected();
  322|  7.33k|        }
  323|  8.08k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  360|  8.08k|    {
  361|  8.08k|        return m_has_value;
  362|  8.08k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  379|    750|    {
  380|    750|        scn::detail::destroy_at(value_ptr());
  381|    750|    }
_ZN3scn2v26detail10destroy_atINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEEEEvPT_:
  107|    750|{
  108|    750|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|    750|        for (auto& elem : *p) {
  110|    750|            scn::detail::destroy_at(std::addressof(elem));
  111|    750|        }
  112|    750|    }
  113|    750|    else {
  114|    750|        p->~T();
  115|    750|    }
  116|    750|}
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  389|  1.50k|    {
  390|  1.50k|        return reinterpret_cast<T*>(
  391|  1.50k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(T)));
  ------------------
  |  |  201|  1.50k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  392|  1.50k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  7.33k|    {
  384|  7.33k|        scn::detail::destroy_at(unexpected_ptr());
  385|  7.33k|    }
_ZN3scn2v26detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  107|  40.9k|{
  108|  40.9k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  40.9k|        for (auto& elem : *p) {
  110|  40.9k|            scn::detail::destroy_at(std::addressof(elem));
  111|  40.9k|        }
  112|  40.9k|    }
  113|  40.9k|    else {
  114|  40.9k|        p->~T();
  115|  40.9k|    }
  116|  40.9k|}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_vEEOT_:
 1033|    750|    {
 1034|    750|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENSC_10in_place_tEDpOT_:
  302|    750|    {
  303|    750|        construct(std::forward<Args>(args)...);
  304|    750|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSJ_EEEvDpOT_:
  366|    750|    {
  367|    750|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  368|    750|        m_has_value = true;
  369|    750|    }
_ZN3scn2v26detail12construct_atINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEEJSJ_EEEPT_SL_DpOT0_:
  101|    750|{
  102|    750|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|    750|        T(std::forward<Args>(args)...);
  104|    750|}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISJ_LPv0ELSM_0EEEONS0_10unexpectedIT_EE:
 1077|  7.33k|    {
 1078|  7.33k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSK_EvEENS0_10unexpect_tEDpOT_:
  311|  7.33k|    {
  312|  7.33k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  7.33k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSC_10in_place_tESK_EEEvDpOT_:
  372|  7.33k|    {
  373|  7.33k|        scn::detail::construct_at(unexpected_ptr(),
  374|  7.33k|                                  std::forward<Args>(args)...);
  375|  7.33k|        m_has_value = false;
  376|  7.33k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|  14.6k|    {
  403|  14.6k|        return reinterpret_cast<unexpected<E>*>(
  404|  14.6k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|  14.6k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|  14.6k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  8.08k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  316|  8.08k|    {
  317|  8.08k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 750, False: 7.33k]
  ------------------
  318|    750|            destroy_value();
  319|    750|        }
  320|  7.33k|        else {
  321|  7.33k|            destroy_unexpected();
  322|  7.33k|        }
  323|  8.08k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  360|  8.08k|    {
  361|  8.08k|        return m_has_value;
  362|  8.08k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  379|    750|    {
  380|    750|        scn::detail::destroy_at(value_ptr());
  381|    750|    }
_ZN3scn2v26detail10destroy_atINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEEEEvPT_:
  107|    750|{
  108|    750|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|    750|        for (auto& elem : *p) {
  110|    750|            scn::detail::destroy_at(std::addressof(elem));
  111|    750|        }
  112|    750|    }
  113|    750|    else {
  114|    750|        p->~T();
  115|    750|    }
  116|    750|}
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  389|  1.50k|    {
  390|  1.50k|        return reinterpret_cast<T*>(
  391|  1.50k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(T)));
  ------------------
  |  |  201|  1.50k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  392|  1.50k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  7.33k|    {
  384|  7.33k|        scn::detail::destroy_at(unexpected_ptr());
  385|  7.33k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_vEEOT_:
 1033|    750|    {
 1034|    750|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENSC_10in_place_tEDpOT_:
  302|    750|    {
  303|    750|        construct(std::forward<Args>(args)...);
  304|    750|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSJ_EEEvDpOT_:
  366|    750|    {
  367|    750|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  368|    750|        m_has_value = true;
  369|    750|    }
_ZN3scn2v26detail12construct_atINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEEJSJ_EEEPT_SL_DpOT0_:
  101|    750|{
  102|    750|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|    750|        T(std::forward<Args>(args)...);
  104|    750|}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1077|  7.33k|    {
 1078|  7.33k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  150|  7.33k|    {
  151|  7.33k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  8.08k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1033|    750|    {
 1034|    750|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENSC_10in_place_tEDpOT_:
  141|    750|    {
  142|    750|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISA_LPv0ELSD_0EEEONS0_10unexpectedIT_EE:
 1077|   122k|    {
 1078|   122k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  150|   122k|    {
  151|   122k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   124k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2IS9_vEEOT_:
 1033|  2.64k|    {
 1034|  2.64k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  141|  2.64k|    {
  142|  2.64k|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|   124k|    {
 1191|   124k|        return has_value();
 1192|   124k|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|   249k|    {
  189|   249k|        return m_has_value;
  190|   249k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   122k|    {
 1197|   122k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   122k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   122k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   122k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   122k|    {
  172|   122k|        return m_unexpected;
  173|   122k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJwEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  13.6k|    {
 1078|  13.6k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJwEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  13.6k|    {
  151|  13.6k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJwEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  13.8k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEERT_v:
 1250|  2.64k|    {
 1251|  2.64k|        return value();
 1252|  2.64k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1220|  2.64k|    {
 1221|  2.64k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  2.64k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.64k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  2.64k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  2.64k|    {
  155|  2.64k|        return m_value;
  156|  2.64k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJwEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|    220|    {
 1034|    220|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJwEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|    220|    {
  142|    220|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  13.8k|    {
 1078|  13.8k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  13.8k|    {
  151|  13.8k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  13.8k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  13.8k|    {
 1078|  13.8k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  13.8k|    {
  151|  13.8k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  13.8k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  13.8k|    {
 1078|  13.8k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  13.8k|    {
  151|  13.8k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  13.8k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJbEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  13.8k|    {
 1078|  13.8k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJbEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  13.8k|    {
  151|  13.8k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  13.8k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJPvEEENS0_10scan_errorEEC2ISD_LSB_0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|  13.8k|    {
 1078|  13.8k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJPvEEENS0_10scan_errorELb1EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  150|  13.8k|    {
  151|  13.8k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  13.8k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISJ_LPv0ELSM_0EEEONS0_10unexpectedIT_EE:
 1077|  13.0k|    {
 1078|  13.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSK_EvEENS0_10unexpect_tEDpOT_:
  311|  13.0k|    {
  312|  13.0k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  13.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSC_10in_place_tESK_EEEvDpOT_:
  372|  13.0k|    {
  373|  13.0k|        scn::detail::construct_at(unexpected_ptr(),
  374|  13.0k|                                  std::forward<Args>(args)...);
  375|  13.0k|        m_has_value = false;
  376|  13.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|  26.1k|    {
  403|  26.1k|        return reinterpret_cast<unexpected<E>*>(
  404|  26.1k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|  26.1k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|  26.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  13.8k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  316|  13.8k|    {
  317|  13.8k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 808, False: 13.0k]
  ------------------
  318|    808|            destroy_value();
  319|    808|        }
  320|  13.0k|        else {
  321|  13.0k|            destroy_unexpected();
  322|  13.0k|        }
  323|  13.8k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  360|  13.8k|    {
  361|  13.8k|        return m_has_value;
  362|  13.8k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  379|    808|    {
  380|    808|        scn::detail::destroy_at(value_ptr());
  381|    808|    }
_ZN3scn2v26detail10destroy_atINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEEEEvPT_:
  107|    808|{
  108|    808|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|    808|        for (auto& elem : *p) {
  110|    808|            scn::detail::destroy_at(std::addressof(elem));
  111|    808|        }
  112|    808|    }
  113|    808|    else {
  114|    808|        p->~T();
  115|    808|    }
  116|    808|}
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  389|  1.61k|    {
  390|  1.61k|        return reinterpret_cast<T*>(
  391|  1.61k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(T)));
  ------------------
  |  |  201|  1.61k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  392|  1.61k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  13.0k|    {
  384|  13.0k|        scn::detail::destroy_at(unexpected_ptr());
  385|  13.0k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_vEEOT_:
 1033|    808|    {
 1034|    808|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENSC_10in_place_tEDpOT_:
  302|    808|    {
  303|    808|        construct(std::forward<Args>(args)...);
  304|    808|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSJ_EEEvDpOT_:
  366|    808|    {
  367|    808|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  368|    808|        m_has_value = true;
  369|    808|    }
_ZN3scn2v26detail12construct_atINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEEJSJ_EEEPT_SL_DpOT0_:
  101|    808|{
  102|    808|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|    808|        T(std::forward<Args>(args)...);
  104|    808|}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISJ_LPv0ELSM_0EEEONS0_10unexpectedIT_EE:
 1077|  13.0k|    {
 1078|  13.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSK_EvEENS0_10unexpect_tEDpOT_:
  311|  13.0k|    {
  312|  13.0k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  13.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSC_10in_place_tESK_EEEvDpOT_:
  372|  13.0k|    {
  373|  13.0k|        scn::detail::construct_at(unexpected_ptr(),
  374|  13.0k|                                  std::forward<Args>(args)...);
  375|  13.0k|        m_has_value = false;
  376|  13.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|  26.1k|    {
  403|  26.1k|        return reinterpret_cast<unexpected<E>*>(
  404|  26.1k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|  26.1k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|  26.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  13.8k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  316|  13.8k|    {
  317|  13.8k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 808, False: 13.0k]
  ------------------
  318|    808|            destroy_value();
  319|    808|        }
  320|  13.0k|        else {
  321|  13.0k|            destroy_unexpected();
  322|  13.0k|        }
  323|  13.8k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  360|  13.8k|    {
  361|  13.8k|        return m_has_value;
  362|  13.8k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  379|    808|    {
  380|    808|        scn::detail::destroy_at(value_ptr());
  381|    808|    }
_ZN3scn2v26detail10destroy_atINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEEEEvPT_:
  107|    808|{
  108|    808|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|    808|        for (auto& elem : *p) {
  110|    808|            scn::detail::destroy_at(std::addressof(elem));
  111|    808|        }
  112|    808|    }
  113|    808|    else {
  114|    808|        p->~T();
  115|    808|    }
  116|    808|}
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  389|  1.61k|    {
  390|  1.61k|        return reinterpret_cast<T*>(
  391|  1.61k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(T)));
  ------------------
  |  |  201|  1.61k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  392|  1.61k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  13.0k|    {
  384|  13.0k|        scn::detail::destroy_at(unexpected_ptr());
  385|  13.0k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_vEEOT_:
 1033|    808|    {
 1034|    808|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENSC_10in_place_tEDpOT_:
  302|    808|    {
  303|    808|        construct(std::forward<Args>(args)...);
  304|    808|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSJ_EEEvDpOT_:
  366|    808|    {
  367|    808|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  368|    808|        m_has_value = true;
  369|    808|    }
_ZN3scn2v26detail12construct_atINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEEJSJ_EEEPT_SL_DpOT0_:
  101|    808|{
  102|    808|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|    808|        T(std::forward<Args>(args)...);
  104|    808|}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1077|  13.0k|    {
 1078|  13.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  150|  13.0k|    {
  151|  13.0k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  13.8k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1033|    808|    {
 1034|    808|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENSC_10in_place_tEDpOT_:
  141|    808|    {
  142|    808|    }
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDaOT_:
 1404|  32.4k|    {
 1405|  32.4k|        return detail::transform_error_impl(std::move(*this),
 1406|  32.4k|                                            std::forward<F>(f));
 1407|  32.4k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  32.4k|{
  927|  32.4k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  32.4k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  32.4k|        if (SCN_LIKELY(exp.has_value())) {
  930|  32.4k|            return result(*std::forward<Exp>(exp));
  931|  32.4k|        }
  932|       |
  933|  32.4k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  32.4k|        return result(unexpect, monostate{});
  935|  32.4k|    }
  936|  32.4k|    else {
  937|  32.4k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  32.4k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  32.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 32.4k, False: 0]
  |  |  ------------------
  ------------------
  939|  32.4k|                   ? result(*std::forward<Exp>(exp))
  940|  32.4k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|  32.4k|    }
  944|  32.4k|}
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  188|   103k|    {
  189|   103k|        return m_has_value;
  190|   103k|    }
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1262|  34.9k|    {
 1263|  34.9k|        return std::move(value());
 1264|  34.9k|    }
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1220|  46.1k|    {
 1221|  46.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  46.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  46.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  46.1k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  46.1k|    {
  155|  46.1k|        return m_value;
  156|  46.1k|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1033|  50.5k|    {
 1034|  50.5k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  50.5k|    {
  142|  50.5k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   140k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1206|    156|    {
 1207|    156|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|    156|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    156|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|    156|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|    156|    {
  172|    156|        return m_unexpected;
  173|    156|    }
_ZNR3scn2v210unexpectedINS0_4impl9eof_errorEE5errorEv:
   71|  1.95k|    {
   72|  1.95k|        return m_unexpected;
   73|  1.95k|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1087|  1.37k|    {
 1088|  1.37k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  150|  86.5k|    {
  151|  86.5k|    }
_ZNK3scn2v28expectedIPKcNS0_10scan_errorEEcvbEv:
 1190|   141k|    {
 1191|   141k|        return has_value();
 1192|   141k|    }
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  188|   279k|    {
  189|   279k|        return m_has_value;
  190|   279k|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEE5errorEv:
 1196|  85.2k|    {
 1197|  85.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  85.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  85.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  85.2k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  85.2k|    {
  172|  85.2k|        return m_unexpected;
  173|  85.2k|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1077|  85.2k|    {
 1078|  85.2k|    }
_ZNO3scn2v28expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1262|  40.4k|    {
 1263|  40.4k|        return std::move(value());
 1264|  40.4k|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1220|  52.6k|    {
 1221|  52.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  52.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  52.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  52.6k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  154|  52.6k|    {
  155|  52.6k|        return m_value;
  156|  52.6k|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
   57|  38.2k|    {
   58|  38.2k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  38.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  38.2k|    }
_ZN3scn2v28expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1077|   197k|    {
 1078|   197k|    }
_ZN3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  150|   197k|    {
  151|   197k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   202k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|    384|    {
 1078|    384|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|    384|    {
  151|    384|    }
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
   66|  1.09k|    {
   67|  1.09k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  1.09k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|  1.09k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  57.5k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1033|  57.1k|    {
 1034|  57.1k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  57.1k|    {
  142|  57.1k|    }
_ZNK3scn2v28expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1190|  22.4k|    {
 1191|  22.4k|        return has_value();
 1192|  22.4k|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
   57|      8|    {
   58|      8|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|      8|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|      8|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|  1.49k|    {
 1078|  1.49k|    }
_ZNR3scn2v210unexpectedINS0_4impl11parse_errorEE5errorEv:
   71|  24.6k|    {
   72|  24.6k|        return m_unexpected;
   73|  24.6k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  1.65k|    {
  151|  1.65k|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
   66|  4.65k|    {
   67|  4.65k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  4.65k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|  4.65k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  33.7k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1250|  11.2k|    {
 1251|  11.2k|        return value();
 1252|  11.2k|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
   57|  66.3k|    {
   58|  66.3k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  66.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  66.3k|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|  29.6k|    {
 1078|  29.6k|    }
_ZNR3scn2v210unexpectedINS0_4impl11parse_error4codeEE5errorEv:
   71|  66.3k|    {
   72|  66.3k|        return m_unexpected;
   73|  66.3k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  29.6k|    {
  151|  29.6k|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
   66|  66.3k|    {
   67|  66.3k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  66.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|  66.3k|    }
_ZNK3scn2v28expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1190|  35.1k|    {
 1191|  35.1k|        return has_value();
 1192|  35.1k|    }
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  47.3k|    {
  189|  47.3k|        return m_has_value;
  190|  47.3k|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1196|  8.33k|    {
 1197|  8.33k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  8.33k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  8.33k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  8.33k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|  8.33k|    {
  172|  8.33k|        return m_unexpected;
  173|  8.33k|    }
_ZN3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1033|  5.47k|    {
 1034|  5.47k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  5.47k|    {
  142|  5.47k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  5.47k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
   57|  1.09k|    {
   58|  1.09k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  1.09k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  1.09k|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1220|  2.51k|    {
 1221|  2.51k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  2.51k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.51k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  2.51k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  2.51k|    {
  155|  2.51k|        return m_value;
  156|  2.51k|    }
_ZNK3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1190|  4.14k|    {
 1191|  4.14k|        return has_value();
 1192|  4.14k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  188|  10.9k|    {
  189|  10.9k|        return m_has_value;
  190|  10.9k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  4.14k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|  5.47k|    {
 1263|  5.47k|        return std::move(value());
 1264|  5.47k|    }
_ZNR3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|  5.47k|    {
 1221|  5.47k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  5.47k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.47k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  5.47k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  154|  5.47k|    {
  155|  5.47k|        return m_value;
  156|  5.47k|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1033|  2.51k|    {
 1034|  2.51k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  2.51k|    {
  142|  2.51k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1033|  4.14k|    {
 1034|  4.14k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  4.14k|    {
  142|  4.14k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|  4.14k|    {
 1405|  4.14k|        return detail::transform_error_impl(std::move(*this),
 1406|  4.14k|                                            std::forward<F>(f));
 1407|  4.14k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
  926|  4.14k|{
  927|  4.14k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  4.14k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  4.14k|        if (SCN_LIKELY(exp.has_value())) {
  930|  4.14k|            return result(*std::forward<Exp>(exp));
  931|  4.14k|        }
  932|       |
  933|  4.14k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  4.14k|        return result(unexpect, monostate{});
  935|  4.14k|    }
  936|  4.14k|    else {
  937|  4.14k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  4.14k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  4.14k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 4.14k, False: 0]
  |  |  ------------------
  ------------------
  939|  4.14k|                   ? result(*std::forward<Exp>(exp))
  940|  4.14k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|  4.14k|    }
  944|  4.14k|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  188|  8.28k|    {
  189|  8.28k|        return m_has_value;
  190|  8.28k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1262|  4.14k|    {
 1263|  4.14k|        return std::move(value());
 1264|  4.14k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1220|  4.14k|    {
 1221|  4.14k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  4.14k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.14k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  4.14k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  154|  4.14k|    {
  155|  4.14k|        return m_value;
  156|  4.14k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1033|  4.14k|    {
 1034|  4.14k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  4.14k|    {
  142|  4.14k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  4.14k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1190|  4.14k|    {
 1191|  4.14k|        return has_value();
 1192|  4.14k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  188|  8.28k|    {
  189|  8.28k|        return m_has_value;
  190|  8.28k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1262|  4.14k|    {
 1263|  4.14k|        return std::move(value());
 1264|  4.14k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1220|  4.14k|    {
 1221|  4.14k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  4.14k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.14k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  4.14k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  154|  4.14k|    {
  155|  4.14k|        return m_value;
  156|  4.14k|    }
_ZN3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_LPv0ELSG_0EEEONS0_10unexpectedIT_EE:
 1077|     64|    {
 1078|     64|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  311|     64|    {
  312|     64|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|     64|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  372|     64|    {
  373|     64|        scn::detail::construct_at(unexpected_ptr(),
  374|     64|                                  std::forward<Args>(args)...);
  375|     64|        m_has_value = false;
  376|     64|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|    192|    {
  403|    192|        return reinterpret_cast<unexpected<E>*>(
  404|    192|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|    192|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|    192|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|     64|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  316|     64|    {
  317|     64|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 0, False: 64]
  ------------------
  318|      0|            destroy_value();
  319|      0|        }
  320|     64|        else {
  321|     64|            destroy_unexpected();
  322|     64|        }
  323|     64|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  360|    192|    {
  361|    192|        return m_has_value;
  362|    192|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|     64|    {
  384|     64|        scn::detail::destroy_at(unexpected_ptr());
  385|     64|    }
_ZNK3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1190|     64|    {
 1191|     64|        return has_value();
 1192|     64|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1196|     64|    {
 1197|     64|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|     64|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|     64|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|     64|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|     64|    {
  344|     64|        return *unexpected_ptr();
  345|     64|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1250|  12.2k|    {
 1251|  12.2k|        return value();
 1252|  12.2k|    }
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDaOT_:
 1404|  2.66k|    {
 1405|  2.66k|        return detail::transform_error_impl(std::move(*this),
 1406|  2.66k|                                            std::forward<F>(f));
 1407|  2.66k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  2.66k|{
  927|  2.66k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  2.66k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  2.66k|        if (SCN_LIKELY(exp.has_value())) {
  930|  2.66k|            return result(*std::forward<Exp>(exp));
  931|  2.66k|        }
  932|       |
  933|  2.66k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  2.66k|        return result(unexpect, monostate{});
  935|  2.66k|    }
  936|  2.66k|    else {
  937|  2.66k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  2.66k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  2.66k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 2.51k, False: 156]
  |  |  ------------------
  ------------------
  939|  2.66k|                   ? result(*std::forward<Exp>(exp))
  940|  2.66k|                   : result(unexpect,
  941|    156|                            std::invoke(std::forward<F>(f),
  942|    156|                                        std::forward<Exp>(exp).error()));
  943|  2.66k|    }
  944|  2.66k|}
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1087|    156|    {
 1088|    156|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
   57|  3.78k|    {
   58|  3.78k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  3.78k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  3.78k|    }
_ZNO3scn2v28expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1262|  2.51k|    {
 1263|  2.51k|        return std::move(value());
 1264|  2.51k|    }
_ZNO3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDaOT_:
 1404|  1.33k|    {
 1405|  1.33k|        return detail::transform_error_impl(std::move(*this),
 1406|  1.33k|                                            std::forward<F>(f));
 1407|  1.33k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
  926|  1.33k|{
  927|  1.33k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  1.33k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  1.33k|        if (SCN_LIKELY(exp.has_value())) {
  930|  1.33k|            return result(*std::forward<Exp>(exp));
  931|  1.33k|        }
  932|       |
  933|  1.33k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  1.33k|        return result(unexpect, monostate{});
  935|  1.33k|    }
  936|  1.33k|    else {
  937|  1.33k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  1.33k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  1.33k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 1.33k, False: 0]
  |  |  ------------------
  ------------------
  939|  1.33k|                   ? result(*std::forward<Exp>(exp))
  940|  1.33k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|  1.33k|    }
  944|  1.33k|}
_ZN3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1033|  1.33k|    {
 1034|  1.33k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  1.33k|    {
  142|  1.33k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.33k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1190|  1.33k|    {
 1191|  1.33k|        return has_value();
 1192|  1.33k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  2.66k|    {
  189|  2.66k|        return m_has_value;
  190|  2.66k|    }
_ZNO3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1262|  1.33k|    {
 1263|  1.33k|        return std::move(value());
 1264|  1.33k|    }
_ZNR3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1220|  1.33k|    {
 1221|  1.33k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.33k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.33k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.33k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  1.33k|    {
  155|  1.33k|        return m_value;
  156|  1.33k|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDaOT_:
 1394|  1.37k|    {
 1395|  1.37k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1396|  1.37k|    }
_ZN3scn2v26detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_LPv0ESA_EEDaOT_OT0_:
  926|  1.37k|{
  927|  1.37k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  1.37k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  1.37k|        if (SCN_LIKELY(exp.has_value())) {
  930|  1.37k|            return result(*std::forward<Exp>(exp));
  931|  1.37k|        }
  932|       |
  933|  1.37k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  1.37k|        return result(unexpect, monostate{});
  935|  1.37k|    }
  936|  1.37k|    else {
  937|  1.37k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  1.37k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  1.37k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 1.37k]
  |  |  ------------------
  ------------------
  939|  1.37k|                   ? result(*std::forward<Exp>(exp))
  940|  1.37k|                   : result(unexpect,
  941|  1.37k|                            std::invoke(std::forward<F>(f),
  942|  1.37k|                                        std::forward<Exp>(exp).error()));
  943|  1.37k|    }
  944|  1.37k|}
_ZN3scn2v28expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1033|  5.09k|    {
 1034|  5.09k|    }
_ZN3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  141|  5.09k|    {
  142|  5.09k|    }
_ZN3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|    200|    {
 1078|    200|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  150|    200|    {
  151|    200|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  6.11k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1033|  5.91k|    {
 1034|  5.91k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|  5.91k|    {
  142|  5.91k|    }
_ZNK3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEcvbEv:
 1190|  2.38k|    {
 1191|  2.38k|        return has_value();
 1192|  2.38k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9has_valueEv:
  188|  9.83k|    {
  189|  9.83k|        return m_has_value;
  190|  9.83k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  171|    200|    {
  172|    200|        return m_unexpected;
  173|    200|    }
_ZN3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|    484|    {
 1078|    484|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  150|    684|    {
  151|    684|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  11.3k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5valueIS7_LPv0EEERT_v:
 1220|  3.52k|    {
 1221|  3.52k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  3.52k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.52k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  3.52k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9get_valueEv:
  154|  3.52k|    {
  155|  3.52k|        return m_value;
  156|  3.52k|    }
_ZN3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2INS8_4codeELPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1077|  7.40k|    {
 1078|  7.40k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  7.40k|    {
  151|  7.40k|    }
_ZNK3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEcvbEv:
 1190|  10.7k|    {
 1191|  10.7k|        return has_value();
 1192|  10.7k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9has_valueEv:
  188|  18.5k|    {
  189|  18.5k|        return m_has_value;
  190|  18.5k|    }
_ZNR3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1196|  2.24k|    {
 1197|  2.24k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  2.24k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.24k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  2.24k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  171|  3.14k|    {
  172|  3.14k|        return m_unexpected;
  173|  3.14k|    }
_ZN3scn2v28expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1033|  1.19k|    {
 1034|  1.19k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  141|  1.19k|    {
  142|  1.19k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.19k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5valueIS7_LPv0EEERT_v:
 1220|  3.25k|    {
 1221|  3.25k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  3.25k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.25k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  3.25k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9get_valueEv:
  154|  3.25k|    {
  155|  3.25k|        return m_value;
  156|  3.25k|    }
_ZNK3scn2v28expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1190|    910|    {
 1191|    910|        return has_value();
 1192|    910|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  188|  2.38k|    {
  189|  2.38k|        return m_has_value;
  190|  2.38k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|    910|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_LPv0EEEOT_v:
 1262|  1.19k|    {
 1263|  1.19k|        return std::move(value());
 1264|  1.19k|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_LPv0EEERT_v:
 1220|  1.19k|    {
 1221|  1.19k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.19k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.19k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.19k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  154|  1.19k|    {
  155|  1.19k|        return m_value;
  156|  1.19k|    }
_ZNO3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDaOT_:
 1404|  3.45k|    {
 1405|  3.45k|        return detail::transform_error_impl(std::move(*this),
 1406|  3.45k|                                            std::forward<F>(f));
 1407|  3.45k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ELPv0ESC_EEDaOT_OT0_:
  926|  3.45k|{
  927|  3.45k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  3.45k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  3.45k|        if (SCN_LIKELY(exp.has_value())) {
  930|  3.45k|            return result(*std::forward<Exp>(exp));
  931|  3.45k|        }
  932|       |
  933|  3.45k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  3.45k|        return result(unexpect, monostate{});
  935|  3.45k|    }
  936|  3.45k|    else {
  937|  3.45k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  3.45k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  3.45k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 3.25k, False: 200]
  |  |  ------------------
  ------------------
  939|  3.45k|                   ? result(*std::forward<Exp>(exp))
  940|  3.45k|                   : result(unexpect,
  941|    200|                            std::invoke(std::forward<F>(f),
  942|    200|                                        std::forward<Exp>(exp).error()));
  943|  3.45k|    }
  944|  3.45k|}
_ZNO3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_LPv0EEEOT_v:
 1262|  3.52k|    {
 1263|  3.52k|        return std::move(value());
 1264|  3.52k|    }
_ZN3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1033|  3.25k|    {
 1034|  3.25k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|  3.25k|    {
  142|  3.25k|    }
_ZNO3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5errorEv:
 1206|    200|    {
 1207|    200|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|    200|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    200|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|    200|    }
_ZN3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1087|    200|    {
 1088|    200|    }
_ZNO3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEdeIS7_LPv0EEEOT_v:
 1262|  3.25k|    {
 1263|  3.25k|        return std::move(value());
 1264|  3.25k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1033|    910|    {
 1034|    910|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  141|    910|    {
  142|    910|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDaOT_:
 1404|    910|    {
 1405|    910|        return detail::transform_error_impl(std::move(*this),
 1406|    910|                                            std::forward<F>(f));
 1407|    910|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
  926|    910|{
  927|    910|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|    910|        using result = expected<expected_value_type<Exp>, monostate>;
  929|    910|        if (SCN_LIKELY(exp.has_value())) {
  930|    910|            return result(*std::forward<Exp>(exp));
  931|    910|        }
  932|       |
  933|    910|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|    910|        return result(unexpect, monostate{});
  935|    910|    }
  936|    910|    else {
  937|    910|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|    910|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|    910|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 910, False: 0]
  |  |  ------------------
  ------------------
  939|    910|                   ? result(*std::forward<Exp>(exp))
  940|    910|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|    910|    }
  944|    910|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  188|  1.82k|    {
  189|  1.82k|        return m_has_value;
  190|  1.82k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEdeIS9_LPv0EEEOT_v:
 1262|    910|    {
 1263|    910|        return std::move(value());
 1264|    910|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE5valueIS9_LPv0EEERT_v:
 1220|    910|    {
 1221|    910|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|    910|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    910|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|    910|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  154|    910|    {
  155|    910|        return m_value;
  156|    910|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1033|    910|    {
 1034|    910|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  141|    910|    {
  142|    910|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|    910|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEcvbEv:
 1190|    910|    {
 1191|    910|        return has_value();
 1192|    910|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.82k|    {
  189|  1.82k|        return m_has_value;
  190|  1.82k|    }
_ZN3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|  3.69k|    {
 1078|  3.69k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  150|  5.16k|    {
  151|  5.16k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  7.40k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1262|    910|    {
 1263|    910|        return std::move(value());
 1264|    910|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1220|    910|    {
 1221|    910|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|    910|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    910|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|    910|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  154|    910|    {
  155|    910|        return m_value;
  156|    910|    }
_ZN3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1033|  1.60k|    {
 1034|  1.60k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|  1.60k|    {
  142|  1.60k|    }
_ZNO3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDaOT_:
 1404|    894|    {
 1405|    894|        return detail::transform_error_impl(std::move(*this),
 1406|    894|                                            std::forward<F>(f));
 1407|    894|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_LPv0ESC_EEDaOT_OT0_:
  926|    894|{
  927|    894|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|    894|        using result = expected<expected_value_type<Exp>, monostate>;
  929|    894|        if (SCN_LIKELY(exp.has_value())) {
  930|    894|            return result(*std::forward<Exp>(exp));
  931|    894|        }
  932|       |
  933|    894|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|    894|        return result(unexpect, monostate{});
  935|    894|    }
  936|    894|    else {
  937|    894|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|    894|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|    894|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 894]
  |  |  ------------------
  ------------------
  939|    894|                   ? result(*std::forward<Exp>(exp))
  940|    894|                   : result(unexpect,
  941|    894|                            std::invoke(std::forward<F>(f),
  942|    894|                                        std::forward<Exp>(exp).error()));
  943|    894|    }
  944|    894|}
_ZNO3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1206|    894|    {
 1207|    894|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|    894|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    894|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|    894|    }
_ZN3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1087|  1.46k|    {
 1088|  1.46k|    }
_ZN3scn2v28expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1077|     16|    {
 1078|     16|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  311|     16|    {
  312|     16|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|     16|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  372|     16|    {
  373|     16|        scn::detail::construct_at(unexpected_ptr(),
  374|     16|                                  std::forward<Args>(args)...);
  375|     16|        m_has_value = false;
  376|     16|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|     48|    {
  403|     48|        return reinterpret_cast<unexpected<E>*>(
  404|     48|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|     48|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|     48|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|     16|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EED2Ev:
  316|     16|    {
  317|     16|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 0, False: 16]
  ------------------
  318|      0|            destroy_value();
  319|      0|        }
  320|     16|        else {
  321|     16|            destroy_unexpected();
  322|     16|        }
  323|     16|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE9has_valueEv:
  360|     48|    {
  361|     48|        return m_has_value;
  362|     48|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|     16|    {
  384|     16|        scn::detail::destroy_at(unexpected_ptr());
  385|     16|    }
_ZNK3scn2v28expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEcvbEv:
 1190|     16|    {
 1191|     16|        return has_value();
 1192|     16|    }
_ZNR3scn2v28expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEE5errorEv:
 1196|     16|    {
 1197|     16|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|     16|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|     16|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|     16|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|     16|    {
  344|     16|        return *unexpected_ptr();
  345|     16|    }
_ZNK3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEcvbEv:
 1190|  7.68k|    {
 1191|  7.68k|        return has_value();
 1192|  7.68k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9has_valueEv:
  188|  14.8k|    {
  189|  14.8k|        return m_has_value;
  190|  14.8k|    }
_ZNR3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5errorEv:
 1196|  4.87k|    {
 1197|  4.87k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  4.87k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.87k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  4.87k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  4.87k|    {
  172|  4.87k|        return m_unexpected;
  173|  4.87k|    }
_ZNO3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_LPv0EEEOT_v:
 1262|  1.60k|    {
 1263|  1.60k|        return std::move(value());
 1264|  1.60k|    }
_ZNR3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5valueIS7_LPv0EEERT_v:
 1220|  2.24k|    {
 1221|  2.24k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  2.24k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.24k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  2.24k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9get_valueEv:
  154|  2.24k|    {
  155|  2.24k|        return m_value;
  156|  2.24k|    }
_ZNR3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_LPv0EEERT_v:
 1250|    642|    {
 1251|    642|        return value();
 1252|    642|    }
_ZNO3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDaOT_:
 1404|    270|    {
 1405|    270|        return detail::transform_error_impl(std::move(*this),
 1406|    270|                                            std::forward<F>(f));
 1407|    270|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
  926|    270|{
  927|    270|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|    270|        using result = expected<expected_value_type<Exp>, monostate>;
  929|    270|        if (SCN_LIKELY(exp.has_value())) {
  930|    270|            return result(*std::forward<Exp>(exp));
  931|    270|        }
  932|       |
  933|    270|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|    270|        return result(unexpect, monostate{});
  935|    270|    }
  936|    270|    else {
  937|    270|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|    270|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|    270|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 270, False: 0]
  |  |  ------------------
  ------------------
  939|    270|                   ? result(*std::forward<Exp>(exp))
  940|    270|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|    270|    }
  944|    270|}
_ZNO3scn2v28expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDaOT_:
 1404|    284|    {
 1405|    284|        return detail::transform_error_impl(std::move(*this),
 1406|    284|                                            std::forward<F>(f));
 1407|    284|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ELPv0ESG_EEDaOT_OT0_:
  926|    284|{
  927|    284|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|    284|        using result = expected<expected_value_type<Exp>, monostate>;
  929|    284|        if (SCN_LIKELY(exp.has_value())) {
  930|    284|            return result(*std::forward<Exp>(exp));
  931|    284|        }
  932|       |
  933|    284|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|    284|        return result(unexpect, monostate{});
  935|    284|    }
  936|    284|    else {
  937|    284|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|    284|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|    284|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 284, False: 0]
  |  |  ------------------
  ------------------
  939|    284|                   ? result(*std::forward<Exp>(exp))
  940|    284|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|    284|    }
  944|    284|}
_ZN3scn2v28expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|    284|    {
 1034|    284|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  141|    284|    {
  142|    284|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|    284|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1190|    284|    {
 1191|    284|        return has_value();
 1192|    284|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  188|    568|    {
  189|    568|        return m_has_value;
  190|    568|    }
_ZNO3scn2v28expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_LPv0EEEOT_v:
 1262|    284|    {
 1263|    284|        return std::move(value());
 1264|    284|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|    284|    {
 1221|    284|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|    284|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    284|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|    284|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  154|    284|    {
  155|    284|        return m_value;
  156|    284|    }
_ZNR3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDaOT_:
 1394|    568|    {
 1395|    568|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1396|    568|    }
_ZN3scn2v26detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_LPv0ESD_EEDaOT_OT0_:
  926|    568|{
  927|    568|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|    568|        using result = expected<expected_value_type<Exp>, monostate>;
  929|    568|        if (SCN_LIKELY(exp.has_value())) {
  930|    568|            return result(*std::forward<Exp>(exp));
  931|    568|        }
  932|       |
  933|    568|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|    568|        return result(unexpect, monostate{});
  935|    568|    }
  936|    568|    else {
  937|    568|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|    568|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|    568|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 568]
  |  |  ------------------
  ------------------
  939|    568|                   ? result(*std::forward<Exp>(exp))
  940|    568|                   : result(unexpect,
  941|    568|                            std::invoke(std::forward<F>(f),
  942|    568|                                        std::forward<Exp>(exp).error()));
  943|    568|    }
  944|    568|}
_ZN3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IRKS7_vEEOT_:
 1033|    642|    {
 1034|    642|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJRKS8_EvEENSt3__110in_place_tEDpOT_:
  141|    642|    {
  142|    642|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  19.9k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEC2IS4_vEEOT_:
 1033|  19.9k|    {
 1034|  19.9k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EEC2IJS5_EvEENS3_10in_place_tEDpOT_:
  141|  19.9k|    {
  142|  19.9k|    }
_ZNK3scn2v28expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEcvbEv:
 1190|  19.9k|    {
 1191|  19.9k|        return has_value();
 1192|  19.9k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EE9has_valueEv:
  188|  39.8k|    {
  189|  39.8k|        return m_has_value;
  190|  39.8k|    }
_ZNO3scn2v28expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEdeIS4_LPv0EEEOT_v:
 1262|  19.9k|    {
 1263|  19.9k|        return std::move(value());
 1264|  19.9k|    }
_ZNR3scn2v28expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEE5valueIS4_LPv0EEERT_v:
 1220|  19.9k|    {
 1221|  19.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  19.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  19.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  19.9k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EE9get_valueEv:
  154|  19.9k|    {
  155|  19.9k|        return m_value;
  156|  19.9k|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1033|  3.41k|    {
 1034|  3.41k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  141|  3.41k|    {
  142|  3.41k|    }
_ZN3scn2v28expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|    260|    {
 1078|    260|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|    260|    {
  151|    260|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  46.5k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1033|  46.2k|    {
 1034|  46.2k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  46.2k|    {
  142|  46.2k|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDaOT_:
 1404|  25.0k|    {
 1405|  25.0k|        return detail::transform_error_impl(std::move(*this),
 1406|  25.0k|                                            std::forward<F>(f));
 1407|  25.0k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  25.0k|{
  927|  25.0k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  25.0k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  25.0k|        if (SCN_LIKELY(exp.has_value())) {
  930|  25.0k|            return result(*std::forward<Exp>(exp));
  931|  25.0k|        }
  932|       |
  933|  25.0k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  25.0k|        return result(unexpect, monostate{});
  935|  25.0k|    }
  936|  25.0k|    else {
  937|  25.0k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  25.0k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  25.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 25.0k, False: 0]
  |  |  ------------------
  ------------------
  939|  25.0k|                   ? result(*std::forward<Exp>(exp))
  940|  25.0k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|  25.0k|    }
  944|  25.0k|}
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  84.3k|    {
  189|  84.3k|        return m_has_value;
  190|  84.3k|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1262|  37.5k|    {
 1263|  37.5k|        return std::move(value());
 1264|  37.5k|    }
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1220|  37.5k|    {
 1221|  37.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  37.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  37.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  37.5k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  37.5k|    {
  155|  37.5k|        return m_value;
  156|  37.5k|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1033|  41.3k|    {
 1034|  41.3k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  41.3k|    {
  142|  41.3k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   107k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1206|    260|    {
 1207|    260|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|    260|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    260|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|    260|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|    260|    {
  172|    260|        return m_unexpected;
  173|    260|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1087|  1.11k|    {
 1088|  1.11k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  150|  64.4k|    {
  151|  64.4k|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1077|  63.3k|    {
 1078|  63.3k|    }
_ZNK3scn2v28expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1190|  8.67k|    {
 1191|  8.67k|        return has_value();
 1192|  8.67k|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|  1.33k|    {
 1078|  1.33k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  1.59k|    {
  151|  1.59k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  37.5k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|  23.4k|    {
 1078|  23.4k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  23.4k|    {
  151|  23.4k|    }
_ZNK3scn2v28expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1190|  38.6k|    {
 1191|  38.6k|        return has_value();
 1192|  38.6k|    }
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  59.1k|    {
  189|  59.1k|        return m_has_value;
  190|  59.1k|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1196|  6.78k|    {
 1197|  6.78k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  6.78k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.78k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  6.78k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|  6.78k|    {
  172|  6.78k|        return m_unexpected;
  173|  6.78k|    }
_ZN3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1033|  4.33k|    {
 1034|  4.33k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  4.33k|    {
  142|  4.33k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  4.33k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1220|  12.5k|    {
 1221|  12.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  12.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  12.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  12.5k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  12.5k|    {
  155|  12.5k|        return m_value;
  156|  12.5k|    }
_ZNK3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1190|  3.26k|    {
 1191|  3.26k|        return has_value();
 1192|  3.26k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  188|  8.67k|    {
  189|  8.67k|        return m_has_value;
  190|  8.67k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  3.26k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|  4.33k|    {
 1263|  4.33k|        return std::move(value());
 1264|  4.33k|    }
_ZNR3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|  4.33k|    {
 1221|  4.33k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  4.33k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.33k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  4.33k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  154|  4.33k|    {
  155|  4.33k|        return m_value;
  156|  4.33k|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDaOT_:
 1404|  12.8k|    {
 1405|  12.8k|        return detail::transform_error_impl(std::move(*this),
 1406|  12.8k|                                            std::forward<F>(f));
 1407|  12.8k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  12.8k|{
  927|  12.8k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  12.8k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  12.8k|        if (SCN_LIKELY(exp.has_value())) {
  930|  12.8k|            return result(*std::forward<Exp>(exp));
  931|  12.8k|        }
  932|       |
  933|  12.8k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  12.8k|        return result(unexpect, monostate{});
  935|  12.8k|    }
  936|  12.8k|    else {
  937|  12.8k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  12.8k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  12.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 12.5k, False: 260]
  |  |  ------------------
  ------------------
  939|  12.8k|                   ? result(*std::forward<Exp>(exp))
  940|  12.8k|                   : result(unexpect,
  941|    260|                            std::invoke(std::forward<F>(f),
  942|    260|                                        std::forward<Exp>(exp).error()));
  943|  12.8k|    }
  944|  12.8k|}
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1033|  12.5k|    {
 1034|  12.5k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  12.5k|    {
  142|  12.5k|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1087|    260|    {
 1088|    260|    }
_ZNO3scn2v28expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1262|  12.5k|    {
 1263|  12.5k|        return std::move(value());
 1264|  12.5k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1033|  3.26k|    {
 1034|  3.26k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  3.26k|    {
  142|  3.26k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|  3.26k|    {
 1405|  3.26k|        return detail::transform_error_impl(std::move(*this),
 1406|  3.26k|                                            std::forward<F>(f));
 1407|  3.26k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
  926|  3.26k|{
  927|  3.26k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  3.26k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  3.26k|        if (SCN_LIKELY(exp.has_value())) {
  930|  3.26k|            return result(*std::forward<Exp>(exp));
  931|  3.26k|        }
  932|       |
  933|  3.26k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  3.26k|        return result(unexpect, monostate{});
  935|  3.26k|    }
  936|  3.26k|    else {
  937|  3.26k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  3.26k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  3.26k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 3.26k, False: 0]
  |  |  ------------------
  ------------------
  939|  3.26k|                   ? result(*std::forward<Exp>(exp))
  940|  3.26k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|  3.26k|    }
  944|  3.26k|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  188|  6.52k|    {
  189|  6.52k|        return m_has_value;
  190|  6.52k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1262|  3.26k|    {
 1263|  3.26k|        return std::move(value());
 1264|  3.26k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1220|  3.26k|    {
 1221|  3.26k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  3.26k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.26k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  3.26k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  154|  3.26k|    {
  155|  3.26k|        return m_value;
  156|  3.26k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1033|  3.26k|    {
 1034|  3.26k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  3.26k|    {
  142|  3.26k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  3.26k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1190|  3.26k|    {
 1191|  3.26k|        return has_value();
 1192|  3.26k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  188|  6.52k|    {
  189|  6.52k|        return m_has_value;
  190|  6.52k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1262|  3.26k|    {
 1263|  3.26k|        return std::move(value());
 1264|  3.26k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1220|  3.26k|    {
 1221|  3.26k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  3.26k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.26k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  3.26k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  154|  3.26k|    {
  155|  3.26k|        return m_value;
  156|  3.26k|    }
_ZN3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|     44|    {
 1078|     44|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  311|     44|    {
  312|     44|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|     44|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  372|     44|    {
  373|     44|        scn::detail::construct_at(unexpected_ptr(),
  374|     44|                                  std::forward<Args>(args)...);
  375|     44|        m_has_value = false;
  376|     44|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|    132|    {
  403|    132|        return reinterpret_cast<unexpected<E>*>(
  404|    132|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|    132|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|    132|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|     44|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  316|     44|    {
  317|     44|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 0, False: 44]
  ------------------
  318|      0|            destroy_value();
  319|      0|        }
  320|     44|        else {
  321|     44|            destroy_unexpected();
  322|     44|        }
  323|     44|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  360|    132|    {
  361|    132|        return m_has_value;
  362|    132|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|     44|    {
  384|     44|        scn::detail::destroy_at(unexpected_ptr());
  385|     44|    }
_ZNK3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1190|     44|    {
 1191|     44|        return has_value();
 1192|     44|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1196|     44|    {
 1197|     44|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|     44|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|     44|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|     44|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|     44|    {
  344|     44|        return *unexpected_ptr();
  345|     44|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1250|  10.8k|    {
 1251|  10.8k|        return value();
 1252|  10.8k|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1220|  42.3k|    {
 1221|  42.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  42.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  42.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  42.3k|    }
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  188|   214k|    {
  189|   214k|        return m_has_value;
  190|   214k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  154|  42.3k|    {
  155|  42.3k|        return m_value;
  156|  42.3k|    }
_ZNO3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDaOT_:
 1404|  1.07k|    {
 1405|  1.07k|        return detail::transform_error_impl(std::move(*this),
 1406|  1.07k|                                            std::forward<F>(f));
 1407|  1.07k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
  926|  1.07k|{
  927|  1.07k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  1.07k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  1.07k|        if (SCN_LIKELY(exp.has_value())) {
  930|  1.07k|            return result(*std::forward<Exp>(exp));
  931|  1.07k|        }
  932|       |
  933|  1.07k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  1.07k|        return result(unexpect, monostate{});
  935|  1.07k|    }
  936|  1.07k|    else {
  937|  1.07k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  1.07k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  1.07k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 1.07k, False: 0]
  |  |  ------------------
  ------------------
  939|  1.07k|                   ? result(*std::forward<Exp>(exp))
  940|  1.07k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|  1.07k|    }
  944|  1.07k|}
_ZN3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1033|  1.07k|    {
 1034|  1.07k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  1.07k|    {
  142|  1.07k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.07k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1190|  1.07k|    {
 1191|  1.07k|        return has_value();
 1192|  1.07k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  2.15k|    {
  189|  2.15k|        return m_has_value;
  190|  2.15k|    }
_ZNO3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1262|  1.07k|    {
 1263|  1.07k|        return std::move(value());
 1264|  1.07k|    }
_ZNR3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1220|  1.07k|    {
 1221|  1.07k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.07k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.07k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.07k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  1.07k|    {
  155|  1.07k|        return m_value;
  156|  1.07k|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDaOT_:
 1394|  1.11k|    {
 1395|  1.11k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1396|  1.11k|    }
_ZN3scn2v26detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_LPv0ESA_EEDaOT_OT0_:
  926|  1.11k|{
  927|  1.11k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  1.11k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  1.11k|        if (SCN_LIKELY(exp.has_value())) {
  930|  1.11k|            return result(*std::forward<Exp>(exp));
  931|  1.11k|        }
  932|       |
  933|  1.11k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  1.11k|        return result(unexpect, monostate{});
  935|  1.11k|    }
  936|  1.11k|    else {
  937|  1.11k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  1.11k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  1.11k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 1.11k]
  |  |  ------------------
  ------------------
  939|  1.11k|                   ? result(*std::forward<Exp>(exp))
  940|  1.11k|                   : result(unexpect,
  941|  1.11k|                            std::invoke(std::forward<F>(f),
  942|  1.11k|                                        std::forward<Exp>(exp).error()));
  943|  1.11k|    }
  944|  1.11k|}
_ZNK3scn2v28expectedIPKwNS0_10scan_errorEEcvbEv:
 1190|   108k|    {
 1191|   108k|        return has_value();
 1192|   108k|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEE5errorEv:
 1196|  63.4k|    {
 1197|  63.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  63.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  63.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  63.4k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  63.4k|    {
  172|  63.4k|        return m_unexpected;
  173|  63.4k|    }
_ZNO3scn2v28expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1262|  31.5k|    {
 1263|  31.5k|        return std::move(value());
 1264|  31.5k|    }
_ZN3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|    246|    {
 1078|    246|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  150|    246|    {
  151|    246|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  4.92k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1033|  4.67k|    {
 1034|  4.67k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|  4.67k|    {
  142|  4.67k|    }
_ZNK3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEcvbEv:
 1190|  1.93k|    {
 1191|  1.93k|        return has_value();
 1192|  1.93k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9has_valueEv:
  188|  7.91k|    {
  189|  7.91k|        return m_has_value;
  190|  7.91k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  171|    246|    {
  172|    246|        return m_unexpected;
  173|    246|    }
_ZN3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|    472|    {
 1078|    472|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  150|    718|    {
  151|    718|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  9.12k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5valueIS7_LPv0EEERT_v:
 1220|  2.74k|    {
 1221|  2.74k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  2.74k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.74k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  2.74k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9get_valueEv:
  154|  2.74k|    {
  155|  2.74k|        return m_value;
  156|  2.74k|    }
_ZN3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2INS8_4codeELPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1077|  5.88k|    {
 1078|  5.88k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  5.88k|    {
  151|  5.88k|    }
_ZNK3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEcvbEv:
 1190|  8.62k|    {
 1191|  8.62k|        return has_value();
 1192|  8.62k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9has_valueEv:
  188|  14.9k|    {
  189|  14.9k|        return m_has_value;
  190|  14.9k|    }
_ZNR3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1196|  1.89k|    {
 1197|  1.89k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.89k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.89k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  1.89k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  171|  2.61k|    {
  172|  2.61k|        return m_unexpected;
  173|  2.61k|    }
_ZN3scn2v28expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1033|    966|    {
 1034|    966|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  141|    966|    {
  142|    966|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|    966|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5valueIS7_LPv0EEERT_v:
 1220|  2.52k|    {
 1221|  2.52k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  2.52k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.52k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  2.52k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9get_valueEv:
  154|  2.52k|    {
  155|  2.52k|        return m_value;
  156|  2.52k|    }
_ZNK3scn2v28expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1190|    740|    {
 1191|    740|        return has_value();
 1192|    740|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  188|  1.93k|    {
  189|  1.93k|        return m_has_value;
  190|  1.93k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|    740|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_LPv0EEEOT_v:
 1262|    966|    {
 1263|    966|        return std::move(value());
 1264|    966|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_LPv0EEERT_v:
 1220|    966|    {
 1221|    966|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|    966|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    966|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|    966|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  154|    966|    {
  155|    966|        return m_value;
  156|    966|    }
_ZNO3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDaOT_:
 1404|  2.77k|    {
 1405|  2.77k|        return detail::transform_error_impl(std::move(*this),
 1406|  2.77k|                                            std::forward<F>(f));
 1407|  2.77k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ELPv0ESC_EEDaOT_OT0_:
  926|  2.77k|{
  927|  2.77k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  2.77k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  2.77k|        if (SCN_LIKELY(exp.has_value())) {
  930|  2.77k|            return result(*std::forward<Exp>(exp));
  931|  2.77k|        }
  932|       |
  933|  2.77k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  2.77k|        return result(unexpect, monostate{});
  935|  2.77k|    }
  936|  2.77k|    else {
  937|  2.77k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  2.77k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  2.77k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 2.52k, False: 246]
  |  |  ------------------
  ------------------
  939|  2.77k|                   ? result(*std::forward<Exp>(exp))
  940|  2.77k|                   : result(unexpect,
  941|    246|                            std::invoke(std::forward<F>(f),
  942|    246|                                        std::forward<Exp>(exp).error()));
  943|  2.77k|    }
  944|  2.77k|}
_ZNO3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEdeIS7_LPv0EEEOT_v:
 1262|  2.74k|    {
 1263|  2.74k|        return std::move(value());
 1264|  2.74k|    }
_ZN3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1033|  2.52k|    {
 1034|  2.52k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|  2.52k|    {
  142|  2.52k|    }
_ZNO3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5errorEv:
 1206|    246|    {
 1207|    246|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|    246|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    246|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|    246|    }
_ZN3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1087|    246|    {
 1088|    246|    }
_ZNO3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEdeIS7_LPv0EEEOT_v:
 1262|  2.52k|    {
 1263|  2.52k|        return std::move(value());
 1264|  2.52k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1033|    740|    {
 1034|    740|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  141|    740|    {
  142|    740|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDaOT_:
 1404|    740|    {
 1405|    740|        return detail::transform_error_impl(std::move(*this),
 1406|    740|                                            std::forward<F>(f));
 1407|    740|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
  926|    740|{
  927|    740|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|    740|        using result = expected<expected_value_type<Exp>, monostate>;
  929|    740|        if (SCN_LIKELY(exp.has_value())) {
  930|    740|            return result(*std::forward<Exp>(exp));
  931|    740|        }
  932|       |
  933|    740|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|    740|        return result(unexpect, monostate{});
  935|    740|    }
  936|    740|    else {
  937|    740|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|    740|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|    740|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 740, False: 0]
  |  |  ------------------
  ------------------
  939|    740|                   ? result(*std::forward<Exp>(exp))
  940|    740|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|    740|    }
  944|    740|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  188|  1.48k|    {
  189|  1.48k|        return m_has_value;
  190|  1.48k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEdeIS9_LPv0EEEOT_v:
 1262|    740|    {
 1263|    740|        return std::move(value());
 1264|    740|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE5valueIS9_LPv0EEERT_v:
 1220|    740|    {
 1221|    740|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|    740|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    740|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|    740|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  154|    740|    {
  155|    740|        return m_value;
  156|    740|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1033|    740|    {
 1034|    740|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  141|    740|    {
  142|    740|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|    740|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEcvbEv:
 1190|    740|    {
 1191|    740|        return has_value();
 1192|    740|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.48k|    {
  189|  1.48k|        return m_has_value;
  190|  1.48k|    }
_ZN3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|  2.49k|    {
 1078|  2.49k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  150|  3.66k|    {
  151|  3.66k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  5.65k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1262|    740|    {
 1263|    740|        return std::move(value());
 1264|    740|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1220|    740|    {
 1221|    740|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|    740|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    740|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|    740|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  154|    740|    {
  155|    740|        return m_value;
  156|    740|    }
_ZN3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1033|  1.58k|    {
 1034|  1.58k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|  1.58k|    {
  142|  1.58k|    }
_ZNO3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDaOT_:
 1404|    724|    {
 1405|    724|        return detail::transform_error_impl(std::move(*this),
 1406|    724|                                            std::forward<F>(f));
 1407|    724|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_LPv0ESC_EEDaOT_OT0_:
  926|    724|{
  927|    724|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|    724|        using result = expected<expected_value_type<Exp>, monostate>;
  929|    724|        if (SCN_LIKELY(exp.has_value())) {
  930|    724|            return result(*std::forward<Exp>(exp));
  931|    724|        }
  932|       |
  933|    724|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|    724|        return result(unexpect, monostate{});
  935|    724|    }
  936|    724|    else {
  937|    724|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|    724|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|    724|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 724]
  |  |  ------------------
  ------------------
  939|    724|                   ? result(*std::forward<Exp>(exp))
  940|    724|                   : result(unexpect,
  941|    724|                            std::invoke(std::forward<F>(f),
  942|    724|                                        std::forward<Exp>(exp).error()));
  943|    724|    }
  944|    724|}
_ZNO3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1206|    724|    {
 1207|    724|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|    724|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    724|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|    724|    }
_ZN3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1087|  1.17k|    {
 1088|  1.17k|    }
_ZN3scn2v28expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEC2ISK_LPv0ELSN_0EEEONS0_10unexpectedIT_EE:
 1077|     16|    {
 1078|     16|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EEC2IJSL_EvEENS0_10unexpect_tEDpOT_:
  311|     16|    {
  312|     16|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|     16|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESL_EEEvDpOT_:
  372|     16|    {
  373|     16|        scn::detail::construct_at(unexpected_ptr(),
  374|     16|                                  std::forward<Args>(args)...);
  375|     16|        m_has_value = false;
  376|     16|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|     48|    {
  403|     48|        return reinterpret_cast<unexpected<E>*>(
  404|     48|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|     48|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|     48|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|     16|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  316|     16|    {
  317|     16|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 0, False: 16]
  ------------------
  318|      0|            destroy_value();
  319|      0|        }
  320|     16|        else {
  321|     16|            destroy_unexpected();
  322|     16|        }
  323|     16|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  360|     48|    {
  361|     48|        return m_has_value;
  362|     48|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|     16|    {
  384|     16|        scn::detail::destroy_at(unexpected_ptr());
  385|     16|    }
_ZNK3scn2v28expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1190|     16|    {
 1191|     16|        return has_value();
 1192|     16|    }
_ZNR3scn2v28expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1196|     16|    {
 1197|     16|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|     16|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|     16|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|     16|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|     16|    {
  344|     16|        return *unexpected_ptr();
  345|     16|    }
_ZNK3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEcvbEv:
 1190|  5.88k|    {
 1191|  5.88k|        return has_value();
 1192|  5.88k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9has_valueEv:
  188|  11.3k|    {
  189|  11.3k|        return m_has_value;
  190|  11.3k|    }
_ZNR3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5errorEv:
 1196|  3.44k|    {
 1197|  3.44k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  3.44k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.44k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  3.44k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  3.44k|    {
  172|  3.44k|        return m_unexpected;
  173|  3.44k|    }
_ZNO3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEdeIS7_LPv0EEEOT_v:
 1262|  1.58k|    {
 1263|  1.58k|        return std::move(value());
 1264|  1.58k|    }
_ZNR3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5valueIS7_LPv0EEERT_v:
 1220|  1.98k|    {
 1221|  1.98k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.98k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.98k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.98k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9get_valueEv:
  154|  1.98k|    {
  155|  1.98k|        return m_value;
  156|  1.98k|    }
_ZNR3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEdeIS7_LPv0EEERT_v:
 1250|    408|    {
 1251|    408|        return value();
 1252|    408|    }
_ZNO3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDaOT_:
 1404|    214|    {
 1405|    214|        return detail::transform_error_impl(std::move(*this),
 1406|    214|                                            std::forward<F>(f));
 1407|    214|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
  926|    214|{
  927|    214|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|    214|        using result = expected<expected_value_type<Exp>, monostate>;
  929|    214|        if (SCN_LIKELY(exp.has_value())) {
  930|    214|            return result(*std::forward<Exp>(exp));
  931|    214|        }
  932|       |
  933|    214|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|    214|        return result(unexpect, monostate{});
  935|    214|    }
  936|    214|    else {
  937|    214|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|    214|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|    214|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 214, False: 0]
  |  |  ------------------
  ------------------
  939|    214|                   ? result(*std::forward<Exp>(exp))
  940|    214|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|    214|    }
  944|    214|}
_ZNO3scn2v28expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDaOT_:
 1404|    226|    {
 1405|    226|        return detail::transform_error_impl(std::move(*this),
 1406|    226|                                            std::forward<F>(f));
 1407|    226|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ELPv0ESG_EEDaOT_OT0_:
  926|    226|{
  927|    226|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|    226|        using result = expected<expected_value_type<Exp>, monostate>;
  929|    226|        if (SCN_LIKELY(exp.has_value())) {
  930|    226|            return result(*std::forward<Exp>(exp));
  931|    226|        }
  932|       |
  933|    226|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|    226|        return result(unexpect, monostate{});
  935|    226|    }
  936|    226|    else {
  937|    226|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|    226|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|    226|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 226, False: 0]
  |  |  ------------------
  ------------------
  939|    226|                   ? result(*std::forward<Exp>(exp))
  940|    226|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|    226|    }
  944|    226|}
_ZN3scn2v28expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|    226|    {
 1034|    226|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  141|    226|    {
  142|    226|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|    226|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1190|    226|    {
 1191|    226|        return has_value();
 1192|    226|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  188|    452|    {
  189|    452|        return m_has_value;
  190|    452|    }
_ZNO3scn2v28expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_LPv0EEEOT_v:
 1262|    226|    {
 1263|    226|        return std::move(value());
 1264|    226|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|    226|    {
 1221|    226|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|    226|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    226|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|    226|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  154|    226|    {
  155|    226|        return m_value;
  156|    226|    }
_ZNR3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDaOT_:
 1394|    452|    {
 1395|    452|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1396|    452|    }
_ZN3scn2v26detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_LPv0ESD_EEDaOT_OT0_:
  926|    452|{
  927|    452|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|    452|        using result = expected<expected_value_type<Exp>, monostate>;
  929|    452|        if (SCN_LIKELY(exp.has_value())) {
  930|    452|            return result(*std::forward<Exp>(exp));
  931|    452|        }
  932|       |
  933|    452|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|    452|        return result(unexpect, monostate{});
  935|    452|    }
  936|    452|    else {
  937|    452|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|    452|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|    452|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 452]
  |  |  ------------------
  ------------------
  939|    452|                   ? result(*std::forward<Exp>(exp))
  940|    452|                   : result(unexpect,
  941|    452|                            std::invoke(std::forward<F>(f),
  942|    452|                                        std::forward<Exp>(exp).error()));
  943|    452|    }
  944|    452|}
_ZN3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IRKS7_vEEOT_:
 1033|    408|    {
 1034|    408|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJRKS8_EvEENSt3__110in_place_tEDpOT_:
  141|    408|    {
  142|    408|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1033|  2.11k|    {
 1034|  2.11k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  141|  2.11k|    {
  142|  2.11k|    }

_ZN3scn2v26detail10to_addressIRPKhEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  8.08k|{
  200|  8.08k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  8.08k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  8.08k|}
_ZN3scn2v26detail15to_address_implIKhEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  8.08k|{
  180|  8.08k|    return p;
  181|  8.08k|}
_ZN3scn2v26detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|   981k|{
  200|   981k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|   981k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|   981k|}
_ZN3scn2v26detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  1.12M|{
  180|  1.12M|    return p;
  181|  1.12M|}
_ZN3scn2v26detail10to_addressIRPDiEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|   484k|{
  200|   484k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|   484k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|   484k|}
_ZN3scn2v26detail15to_address_implIDiEEPT_S4_NS1_12priority_tagILm2EEE:
  179|   484k|{
  180|   484k|    return p;
  181|   484k|}
_ZN3scn2v26detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|   146k|{
  200|   146k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|   146k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|   146k|}
_ZN3scn2v26detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|   411k|{
  200|   411k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|   411k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|   411k|}
_ZN3scn2v26detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  179|   554k|{
  180|   554k|    return p;
  181|   554k|}
_ZN3scn2v26detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|   142k|{
  200|   142k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|   142k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|   142k|}

_ZNK3scn2v24spanIKhE4sizeEv:
  241|  28.1k|    {
  242|  28.1k|        return static_cast<size_type>(m_end - m_ptr);
  243|  28.1k|    }
_ZN3scn2v24spanIKhE5beginEv:
  180|  4.04k|    {
  181|  4.04k|        return m_ptr;
  182|  4.04k|    }
_ZN3scn2v24spanIKhE3endEv:
  184|  4.04k|    {
  185|  4.04k|        return m_end;
  186|  4.04k|    }
_ZNK3scn2v24spanIKhE4dataEv:
  237|  4.04k|    {
  238|  4.04k|        return m_ptr;
  239|  4.04k|    }
_ZN3scn2v24spanIKhEC2IPS2_LPv0EEET_m:
  119|  4.04k|    {
  120|  4.04k|    }
_ZNK3scn2v24spanIwE4sizeEv:
  241|  2.28k|    {
  242|  2.28k|        return static_cast<size_type>(m_end - m_ptr);
  243|  2.28k|    }
_ZNK3scn2v24spanIwE4dataEv:
  237|  2.28k|    {
  238|  2.28k|        return m_ptr;
  239|  2.28k|    }
_ZN3scn2v24spanIwEC2IRNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEELPv0EEEOT_:
  167|  2.42k|    {
  168|  2.42k|    }
_ZN3scn2v24spanIDiEC2IPDiLPv0EEET_m:
  119|   242k|    {
  120|   242k|    }
_ZNK3scn2v24spanIDiE4dataEv:
  237|   242k|    {
  238|   242k|        return m_ptr;
  239|   242k|    }
_ZNK3scn2v24spanIDiE4sizeEv:
  241|   228k|    {
  242|   228k|        return static_cast<size_type>(m_end - m_ptr);
  243|   228k|    }
_ZNK3scn2v24spanIcE4sizeEv:
  241|  2.35k|    {
  242|  2.35k|        return static_cast<size_type>(m_end - m_ptr);
  243|  2.35k|    }
_ZNK3scn2v24spanIcE4dataEv:
  237|  2.35k|    {
  238|  2.35k|        return m_ptr;
  239|  2.35k|    }
_ZN3scn2v24spanIcEC2IRNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEELPv0EEEOT_:
  167|  2.49k|    {
  168|  2.49k|    }

_ZN3scn2v26detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
   59|   247k|{
   60|   247k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|   247k|                                          const CharT*, const CharT*>) {
   62|   247k|        return {first, last};
   63|   247k|    }
   64|   247k|    else {
   65|   247k|        return {first, static_cast<size_t>(std::distance(first, last))};
   66|   247k|    }
   67|   247k|}
_ZN3scn2v26detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
   59|  3.98M|{
   60|  3.98M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|  3.98M|                                          const CharT*, const CharT*>) {
   62|  3.98M|        return {first, last};
   63|  3.98M|    }
   64|  3.98M|    else {
   65|  3.98M|        return {first, static_cast<size_t>(std::distance(first, last))};
   66|  3.98M|    }
   67|  3.98M|}
_ZN3scn2v26detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
   43|   283k|{
   44|   283k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (44:19): [Folded - Ignored]
  |  Branch (44:19): [Folded - Ignored]
  ------------------
   45|   283k|                                          decltype(first), decltype(last)> &&
   46|   283k|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  152|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (46:19): [Folded - Ignored]
  ------------------
   47|   283k|        return {first, last};
   48|   283k|    }
   49|   283k|    else {
   50|   283k|        return {to_address(first), static_cast<size_t>(std::distance(
   51|   283k|                                       to_address(first), to_address(last)))};
   52|   283k|    }
   53|   283k|}
_ZN3scn2v26detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
   74|   329k|{
   75|   329k|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (75:19): [Folded - Ignored]
  |  Branch (75:19): [Folded - Ignored]
  ------------------
   76|   329k|                      typename std::basic_string_view<CharT>::iterator,
   77|   329k|                      decltype(it)> &&
   78|   329k|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  152|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (78:19): [Folded - Ignored]
  ------------------
   79|   329k|        SCN_UNUSED(sv);
  ------------------
  |  |  227|   329k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   80|   329k|        return it;
   81|   329k|    }
   82|   329k|    else {
   83|   329k|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
   84|   329k|    }
   85|   329k|}

_ZN3scn2v24impl23guaranteed_minimum_sizeIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEEmRKT_:
  165|  2.89k|{
  166|  2.89k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (166:19): [Folded - Ignored]
  ------------------
  167|  2.89k|        return ranges_polyfill::usize(r);
  168|  2.89k|    }
  169|  2.89k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (169:24): [Folded - Ignored]
  ------------------
  170|  2.89k|                           ranges::iterator_t<Range>,
  171|  2.89k|                           typename detail::basic_scan_buffer<
  172|  2.89k|                               detail::char_t<Range>>::forward_iterator>) {
  173|  2.89k|        if constexpr (ranges::common_range<Range>) {
  174|  2.89k|            return static_cast<size_t>(ranges::end(r).position() -
  175|  2.89k|                                       ranges::begin(r).position());
  176|  2.89k|        }
  177|  2.89k|        else {
  178|  2.89k|            if (ranges::begin(r).stores_parent()) {
  179|  2.89k|                return static_cast<size_t>(
  180|  2.89k|                    ranges::begin(r).parent()->chars_available() -
  181|  2.89k|                    ranges::begin(r).position());
  182|  2.89k|            }
  183|  2.89k|            return ranges::begin(r).contiguous_segment().size();
  184|  2.89k|        }
  185|  2.89k|    }
  186|  2.89k|    else {
  187|  2.89k|        return 0;
  188|  2.89k|    }
  189|  2.89k|}
_ZN3scn2v24impl23guaranteed_minimum_sizeINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEEEEmRKT_:
  165|    564|{
  166|    564|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (166:19): [Folded - Ignored]
  ------------------
  167|    564|        return ranges_polyfill::usize(r);
  168|    564|    }
  169|    564|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (169:24): [Folded - Ignored]
  ------------------
  170|    564|                           ranges::iterator_t<Range>,
  171|    564|                           typename detail::basic_scan_buffer<
  172|    564|                               detail::char_t<Range>>::forward_iterator>) {
  173|    564|        if constexpr (ranges::common_range<Range>) {
  174|    564|            return static_cast<size_t>(ranges::end(r).position() -
  175|    564|                                       ranges::begin(r).position());
  176|    564|        }
  177|    564|        else {
  178|    564|            if (ranges::begin(r).stores_parent()) {
  179|    564|                return static_cast<size_t>(
  180|    564|                    ranges::begin(r).parent()->chars_available() -
  181|    564|                    ranges::begin(r).position());
  182|    564|            }
  183|    564|            return ranges::begin(r).contiguous_segment().size();
  184|    564|        }
  185|    564|    }
  186|    564|    else {
  187|    564|        return 0;
  188|    564|    }
  189|    564|}
_ZN3scn2v24impl24get_contiguous_beginningINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEEEEDaRKT_:
  111|  1.24k|{
  112|  1.24k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (112:19): [Folded - Ignored]
  |  Branch (112:19): [Folded - Ignored]
  ------------------
  113|  1.24k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (113:19): [Folded - Ignored]
  ------------------
  114|  1.24k|        return r;
  115|  1.24k|    }
  116|  1.24k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (116:24): [Folded - Ignored]
  ------------------
  117|  1.24k|                           ranges::iterator_t<Range>,
  118|  1.24k|                           typename detail::basic_scan_buffer<
  119|  1.24k|                               detail::char_t<Range>>::forward_iterator>) {
  120|  1.24k|        if constexpr (ranges::common_range<Range>) {
  121|  1.24k|            auto seg = ranges::begin(r).contiguous_segment();
  122|  1.24k|            auto dist = static_cast<size_t>(ranges_polyfill::pos_distance(
  123|  1.24k|                ranges::begin(r), ranges::end(r)));
  124|  1.24k|            return seg.substr(0, std::min(seg.size(), dist));
  125|  1.24k|        }
  126|  1.24k|        else {
  127|  1.24k|            return ranges::begin(r).contiguous_segment();
  128|  1.24k|        }
  129|  1.24k|    }
  130|  1.24k|    else {
  131|  1.24k|        return std::basic_string_view<detail::char_t<Range>>{};
  132|  1.24k|    }
  133|  1.24k|}
_ZN3scn2v24impl24get_contiguous_beginningIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEEDaRKT_:
  111|    822|{
  112|    822|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (112:19): [Folded - Ignored]
  |  Branch (112:19): [Folded - Ignored]
  ------------------
  113|    822|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (113:19): [Folded - Ignored]
  ------------------
  114|    822|        return r;
  115|    822|    }
  116|    822|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (116:24): [Folded - Ignored]
  ------------------
  117|    822|                           ranges::iterator_t<Range>,
  118|    822|                           typename detail::basic_scan_buffer<
  119|    822|                               detail::char_t<Range>>::forward_iterator>) {
  120|    822|        if constexpr (ranges::common_range<Range>) {
  121|    822|            auto seg = ranges::begin(r).contiguous_segment();
  122|    822|            auto dist = static_cast<size_t>(ranges_polyfill::pos_distance(
  123|    822|                ranges::begin(r), ranges::end(r)));
  124|    822|            return seg.substr(0, std::min(seg.size(), dist));
  125|    822|        }
  126|    822|        else {
  127|    822|            return ranges::begin(r).contiguous_segment();
  128|    822|        }
  129|    822|    }
  130|    822|    else {
  131|    822|        return std::basic_string_view<detail::char_t<Range>>{};
  132|    822|    }
  133|    822|}
_ZN3scn2v24impl27is_entire_source_contiguousINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEEEEbRKT_:
   31|    144|{
   32|    144|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (32:19): [Folded - Ignored]
  |  Branch (32:19): [Folded - Ignored]
  ------------------
   33|    144|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (33:19): [Folded - Ignored]
  ------------------
   34|    144|        return true;
   35|    144|    }
   36|    144|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (36:24): [Folded - Ignored]
  ------------------
   37|    144|                           ranges::iterator_t<Range>,
   38|    144|                           typename detail::basic_scan_buffer<
   39|    144|                               detail::char_t<Range>>::forward_iterator>) {
   40|    144|        auto beg = ranges::begin(r);
   41|    144|        if (!beg.stores_parent()) {
   42|    144|            return true;
   43|    144|        }
   44|    144|        return beg.parent()->is_contiguous();
   45|    144|    }
   46|    144|    else {
   47|    144|        return false;
   48|    144|    }
   49|    144|}
_ZN3scn2v24impl27is_entire_source_contiguousIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEbRKT_:
   31|  11.0k|{
   32|  11.0k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (32:19): [Folded - Ignored]
  |  Branch (32:19): [Folded - Ignored]
  ------------------
   33|  11.0k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (33:19): [Folded - Ignored]
  ------------------
   34|  11.0k|        return true;
   35|  11.0k|    }
   36|  11.0k|    else if constexpr (std::is_same_v<
   37|  11.0k|                           ranges::iterator_t<Range>,
   38|  11.0k|                           typename detail::basic_scan_buffer<
   39|  11.0k|                               detail::char_t<Range>>::forward_iterator>) {
   40|  11.0k|        auto beg = ranges::begin(r);
   41|  11.0k|        if (!beg.stores_parent()) {
   42|  11.0k|            return true;
   43|  11.0k|        }
   44|  11.0k|        return beg.parent()->is_contiguous();
   45|  11.0k|    }
   46|  11.0k|    else {
   47|  11.0k|        return false;
   48|  11.0k|    }
   49|  11.0k|}
_ZN3scn2v24impl17get_as_contiguousIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  137|  11.0k|{
  138|  11.0k|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  |  242|  11.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  11.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  11.0k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (139:19): [Folded - Ignored]
  |  Branch (139:19): [Folded - Ignored]
  ------------------
  140|  11.0k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (140:19): [Folded - Ignored]
  ------------------
  141|  11.0k|        return r;
  142|  11.0k|    }
  143|  11.0k|    else if constexpr (std::is_same_v<
  144|  11.0k|                           ranges::iterator_t<Range>,
  145|  11.0k|                           typename detail::basic_scan_buffer<
  146|  11.0k|                               detail::char_t<Range>>::forward_iterator>) {
  147|  11.0k|        if constexpr (ranges::common_range<Range>) {
  148|  11.0k|            return detail::make_string_view_from_pointers(
  149|  11.0k|                ranges::begin(r).to_contiguous_segment_iterator(),
  150|  11.0k|                ranges::end(r).to_contiguous_segment_iterator());
  151|  11.0k|        }
  152|  11.0k|        else {
  153|  11.0k|            return ranges::begin(r).contiguous_segment();
  154|  11.0k|        }
  155|  11.0k|    }
  156|  11.0k|    else {
  157|  11.0k|        SCN_EXPECT(false);
  158|  11.0k|        SCN_UNREACHABLE;
  159|  11.0k|        return std::basic_string_view<detail::char_t<Range>>{};
  160|  11.0k|    }
  161|  11.0k|}
_ZN3scn2v24impl21is_segment_contiguousIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEbRKT_:
   53|  11.0k|{
   54|  11.0k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (54:19): [Folded - Ignored]
  |  Branch (54:19): [Folded - Ignored]
  ------------------
   55|  11.0k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|  11.0k|        return true;
   57|  11.0k|    }
   58|  11.0k|    else if constexpr (std::is_same_v<
   59|  11.0k|                           ranges::iterator_t<Range>,
   60|  11.0k|                           typename detail::basic_scan_buffer<
   61|  11.0k|                               detail::char_t<Range>>::forward_iterator>) {
   62|  11.0k|        auto beg = ranges::begin(r);
   63|  11.0k|        if (beg.contiguous_segment().empty()) {
   64|  11.0k|            return false;
   65|  11.0k|        }
   66|  11.0k|        if constexpr (ranges::common_range<Range>) {
   67|  11.0k|            return beg.contiguous_segment().end() ==
   68|  11.0k|                   ranges::end(r).contiguous_segment().end();
   69|  11.0k|        }
   70|  11.0k|        else {
   71|  11.0k|            if (beg.stores_parent()) {
   72|  11.0k|                return beg.contiguous_segment().end() ==
   73|  11.0k|                       beg.parent()->current_view().end();
   74|  11.0k|            }
   75|  11.0k|            return true;
   76|  11.0k|        }
   77|  11.0k|    }
   78|  11.0k|    else {
   79|  11.0k|        return false;
   80|  11.0k|    }
   81|  11.0k|}
_ZN3scn2v24impl23guaranteed_minimum_sizeIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEEmRKT_:
  165|  2.32k|{
  166|  2.32k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (166:19): [Folded - Ignored]
  ------------------
  167|  2.32k|        return ranges_polyfill::usize(r);
  168|  2.32k|    }
  169|  2.32k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (169:24): [Folded - Ignored]
  ------------------
  170|  2.32k|                           ranges::iterator_t<Range>,
  171|  2.32k|                           typename detail::basic_scan_buffer<
  172|  2.32k|                               detail::char_t<Range>>::forward_iterator>) {
  173|  2.32k|        if constexpr (ranges::common_range<Range>) {
  174|  2.32k|            return static_cast<size_t>(ranges::end(r).position() -
  175|  2.32k|                                       ranges::begin(r).position());
  176|  2.32k|        }
  177|  2.32k|        else {
  178|  2.32k|            if (ranges::begin(r).stores_parent()) {
  179|  2.32k|                return static_cast<size_t>(
  180|  2.32k|                    ranges::begin(r).parent()->chars_available() -
  181|  2.32k|                    ranges::begin(r).position());
  182|  2.32k|            }
  183|  2.32k|            return ranges::begin(r).contiguous_segment().size();
  184|  2.32k|        }
  185|  2.32k|    }
  186|  2.32k|    else {
  187|  2.32k|        return 0;
  188|  2.32k|    }
  189|  2.32k|}
_ZN3scn2v24impl23guaranteed_minimum_sizeINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEEEEmRKT_:
  165|    448|{
  166|    448|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (166:19): [Folded - Ignored]
  ------------------
  167|    448|        return ranges_polyfill::usize(r);
  168|    448|    }
  169|    448|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (169:24): [Folded - Ignored]
  ------------------
  170|    448|                           ranges::iterator_t<Range>,
  171|    448|                           typename detail::basic_scan_buffer<
  172|    448|                               detail::char_t<Range>>::forward_iterator>) {
  173|    448|        if constexpr (ranges::common_range<Range>) {
  174|    448|            return static_cast<size_t>(ranges::end(r).position() -
  175|    448|                                       ranges::begin(r).position());
  176|    448|        }
  177|    448|        else {
  178|    448|            if (ranges::begin(r).stores_parent()) {
  179|    448|                return static_cast<size_t>(
  180|    448|                    ranges::begin(r).parent()->chars_available() -
  181|    448|                    ranges::begin(r).position());
  182|    448|            }
  183|    448|            return ranges::begin(r).contiguous_segment().size();
  184|    448|        }
  185|    448|    }
  186|    448|    else {
  187|    448|        return 0;
  188|    448|    }
  189|    448|}
_ZN3scn2v24impl24get_contiguous_beginningIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEEDaRKT_:
  111|    648|{
  112|    648|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (112:19): [Folded - Ignored]
  |  Branch (112:19): [Folded - Ignored]
  ------------------
  113|    648|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (113:19): [Folded - Ignored]
  ------------------
  114|    648|        return r;
  115|    648|    }
  116|    648|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (116:24): [Folded - Ignored]
  ------------------
  117|    648|                           ranges::iterator_t<Range>,
  118|    648|                           typename detail::basic_scan_buffer<
  119|    648|                               detail::char_t<Range>>::forward_iterator>) {
  120|    648|        if constexpr (ranges::common_range<Range>) {
  121|    648|            auto seg = ranges::begin(r).contiguous_segment();
  122|    648|            auto dist = static_cast<size_t>(ranges_polyfill::pos_distance(
  123|    648|                ranges::begin(r), ranges::end(r)));
  124|    648|            return seg.substr(0, std::min(seg.size(), dist));
  125|    648|        }
  126|    648|        else {
  127|    648|            return ranges::begin(r).contiguous_segment();
  128|    648|        }
  129|    648|    }
  130|    648|    else {
  131|    648|        return std::basic_string_view<detail::char_t<Range>>{};
  132|    648|    }
  133|    648|}
_ZN3scn2v24impl24get_contiguous_beginningINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEEEEDaRKT_:
  111|    294|{
  112|    294|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (112:19): [Folded - Ignored]
  |  Branch (112:19): [Folded - Ignored]
  ------------------
  113|    294|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (113:19): [Folded - Ignored]
  ------------------
  114|    294|        return r;
  115|    294|    }
  116|    294|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (116:24): [Folded - Ignored]
  ------------------
  117|    294|                           ranges::iterator_t<Range>,
  118|    294|                           typename detail::basic_scan_buffer<
  119|    294|                               detail::char_t<Range>>::forward_iterator>) {
  120|    294|        if constexpr (ranges::common_range<Range>) {
  121|    294|            auto seg = ranges::begin(r).contiguous_segment();
  122|    294|            auto dist = static_cast<size_t>(ranges_polyfill::pos_distance(
  123|    294|                ranges::begin(r), ranges::end(r)));
  124|    294|            return seg.substr(0, std::min(seg.size(), dist));
  125|    294|        }
  126|    294|        else {
  127|    294|            return ranges::begin(r).contiguous_segment();
  128|    294|        }
  129|    294|    }
  130|    294|    else {
  131|    294|        return std::basic_string_view<detail::char_t<Range>>{};
  132|    294|    }
  133|    294|}
_ZN3scn2v24impl27is_entire_source_contiguousINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEEEEbRKT_:
   31|     90|{
   32|     90|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (32:19): [Folded - Ignored]
  |  Branch (32:19): [Folded - Ignored]
  ------------------
   33|     90|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (33:19): [Folded - Ignored]
  ------------------
   34|     90|        return true;
   35|     90|    }
   36|     90|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (36:24): [Folded - Ignored]
  ------------------
   37|     90|                           ranges::iterator_t<Range>,
   38|     90|                           typename detail::basic_scan_buffer<
   39|     90|                               detail::char_t<Range>>::forward_iterator>) {
   40|     90|        auto beg = ranges::begin(r);
   41|     90|        if (!beg.stores_parent()) {
   42|     90|            return true;
   43|     90|        }
   44|     90|        return beg.parent()->is_contiguous();
   45|     90|    }
   46|     90|    else {
   47|     90|        return false;
   48|     90|    }
   49|     90|}
_ZN3scn2v24impl27is_entire_source_contiguousIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEbRKT_:
   31|  8.92k|{
   32|  8.92k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (32:19): [Folded - Ignored]
  |  Branch (32:19): [Folded - Ignored]
  ------------------
   33|  8.92k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (33:19): [Folded - Ignored]
  ------------------
   34|  8.92k|        return true;
   35|  8.92k|    }
   36|  8.92k|    else if constexpr (std::is_same_v<
   37|  8.92k|                           ranges::iterator_t<Range>,
   38|  8.92k|                           typename detail::basic_scan_buffer<
   39|  8.92k|                               detail::char_t<Range>>::forward_iterator>) {
   40|  8.92k|        auto beg = ranges::begin(r);
   41|  8.92k|        if (!beg.stores_parent()) {
   42|  8.92k|            return true;
   43|  8.92k|        }
   44|  8.92k|        return beg.parent()->is_contiguous();
   45|  8.92k|    }
   46|  8.92k|    else {
   47|  8.92k|        return false;
   48|  8.92k|    }
   49|  8.92k|}
_ZN3scn2v24impl17get_as_contiguousIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  137|  8.92k|{
  138|  8.92k|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  |  242|  8.92k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  8.92k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  8.92k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (139:19): [Folded - Ignored]
  |  Branch (139:19): [Folded - Ignored]
  ------------------
  140|  8.92k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (140:19): [Folded - Ignored]
  ------------------
  141|  8.92k|        return r;
  142|  8.92k|    }
  143|  8.92k|    else if constexpr (std::is_same_v<
  144|  8.92k|                           ranges::iterator_t<Range>,
  145|  8.92k|                           typename detail::basic_scan_buffer<
  146|  8.92k|                               detail::char_t<Range>>::forward_iterator>) {
  147|  8.92k|        if constexpr (ranges::common_range<Range>) {
  148|  8.92k|            return detail::make_string_view_from_pointers(
  149|  8.92k|                ranges::begin(r).to_contiguous_segment_iterator(),
  150|  8.92k|                ranges::end(r).to_contiguous_segment_iterator());
  151|  8.92k|        }
  152|  8.92k|        else {
  153|  8.92k|            return ranges::begin(r).contiguous_segment();
  154|  8.92k|        }
  155|  8.92k|    }
  156|  8.92k|    else {
  157|  8.92k|        SCN_EXPECT(false);
  158|  8.92k|        SCN_UNREACHABLE;
  159|  8.92k|        return std::basic_string_view<detail::char_t<Range>>{};
  160|  8.92k|    }
  161|  8.92k|}
_ZN3scn2v24impl21is_segment_contiguousIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEbRKT_:
   53|  8.92k|{
   54|  8.92k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (54:19): [Folded - Ignored]
  |  Branch (54:19): [Folded - Ignored]
  ------------------
   55|  8.92k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|  8.92k|        return true;
   57|  8.92k|    }
   58|  8.92k|    else if constexpr (std::is_same_v<
   59|  8.92k|                           ranges::iterator_t<Range>,
   60|  8.92k|                           typename detail::basic_scan_buffer<
   61|  8.92k|                               detail::char_t<Range>>::forward_iterator>) {
   62|  8.92k|        auto beg = ranges::begin(r);
   63|  8.92k|        if (beg.contiguous_segment().empty()) {
   64|  8.92k|            return false;
   65|  8.92k|        }
   66|  8.92k|        if constexpr (ranges::common_range<Range>) {
   67|  8.92k|            return beg.contiguous_segment().end() ==
   68|  8.92k|                   ranges::end(r).contiguous_segment().end();
   69|  8.92k|        }
   70|  8.92k|        else {
   71|  8.92k|            if (beg.stores_parent()) {
   72|  8.92k|                return beg.contiguous_segment().end() ==
   73|  8.92k|                       beg.parent()->current_view().end();
   74|  8.92k|            }
   75|  8.92k|            return true;
   76|  8.92k|        }
   77|  8.92k|    }
   78|  8.92k|    else {
   79|  8.92k|        return false;
   80|  8.92k|    }
   81|  8.92k|}

_ZN3scn2v24impl22make_contiguous_bufferIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|  13.1k|{
  235|  13.1k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  13.1k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  13.1k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  13.1k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|  13.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  13.1k|    }
  240|  13.1k|    else {
  241|  13.1k|        return contiguous_range_factory{SCN_FWD(range)};
  242|  13.1k|    }
  243|  13.1k|}
_ZN3scn2v24impl19string_view_wrapperIcEC2IRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|  13.1k|    {
   50|  13.1k|    }
_ZNK3scn2v24impl19string_view_wrapperIcE4viewEv:
   62|   535k|    {
   63|   535k|        return sv;
   64|   535k|    }
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|   357k|{
  235|   357k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|   357k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|   357k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|   357k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|   357k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|   357k|    }
  240|   357k|    else {
  241|   357k|        return contiguous_range_factory{SCN_FWD(range)};
  242|   357k|    }
  243|   357k|}
_ZN3scn2v24impl19string_view_wrapperIcEC2IN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|   357k|    {
   50|   357k|    }
_ZN3scn2v24impl24contiguous_range_factoryIcEC2ENS1_19string_view_wrapperIcEE:
  102|   196k|    {
  103|   196k|    }
_ZNK3scn2v24impl24contiguous_range_factoryIcE4viewEv:
  141|   244k|    {
  142|   244k|        return m_view;
  143|   244k|    }
_ZN3scn2v24impl24contiguous_range_factoryIcED2Ev:
  131|   244k|    ~contiguous_range_factory() = default;
_ZN3scn2v24impl24contiguous_range_factoryIcEC2Ev:
   91|  3.23k|    contiguous_range_factory() = default;
_ZN3scn2v24impl24contiguous_range_factoryIcE6assignIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEvOT_:
  136|  1.29k|    {
  137|  1.29k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|  1.29k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|  1.29k|    }
_ZN3scn2v24impl24contiguous_range_factoryIcE13emplace_rangeIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEvOT_:
  180|  1.29k|    {
  181|  1.29k|        using value_t = ranges::range_value_t<Range>;
  182|  1.29k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|  1.29k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|  1.29k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|  1.29k|            m_storage.reset();
  186|  1.29k|            m_view = string_view_type{ranges::data(range),
  187|  1.29k|                                      ranges_polyfill::usize(range)};
  188|  1.29k|        }
  189|  1.29k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  190|  1.29k|                                          std::basic_string<CharT>>) {
  191|  1.29k|            m_storage.emplace(SCN_FWD(range));
  192|  1.29k|            m_view = string_view_type{*m_storage};
  193|  1.29k|        }
  194|  1.29k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  195|  1.29k|                                          typename detail::basic_scan_buffer<
  196|  1.29k|                                              value_t>::forward_iterator> &&
  197|  1.29k|                           ranges::common_range<Range>) {
  198|  1.29k|            auto beg_seg = range.begin().contiguous_segment();
  199|  1.29k|            auto end_seg = range.end().contiguous_segment();
  200|  1.29k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  201|  1.29k|                             detail::to_address(end_seg.end()))) {
  202|  1.29k|                auto& str = m_storage.emplace();
  203|  1.29k|                str.reserve(range.end().position() - range.begin().position());
  204|  1.29k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|  1.29k|                m_view = string_view_type{str};
  206|  1.29k|                return;
  207|  1.29k|            }
  208|       |
  209|  1.29k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|  1.29k|                                                            end_seg.data());
  211|  1.29k|            m_storage.reset();
  212|  1.29k|        }
  213|  1.29k|        else {
  214|  1.29k|            auto& str = m_storage.emplace();
  215|  1.29k|            if constexpr (ranges::sized_range<Range>) {
  216|  1.29k|                str.reserve(ranges_polyfill::usize(range));
  217|  1.29k|            }
  218|  1.29k|            std::copy(ranges::begin(range), ranges::end(range),
  219|  1.29k|                      std::back_inserter(str));
  220|  1.29k|            m_view = string_view_type{str};
  221|  1.29k|        }
  222|  1.29k|    }
_ZNK3scn2v24impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
  146|    708|    {
  147|    708|        return m_storage.has_value();
  148|    708|    }
_ZNR3scn2v24impl24contiguous_range_factoryIcE20get_allocated_stringEv:
  151|    354|    {
  152|    354|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  242|    354|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    354|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|      0|        return *m_storage;
  154|    354|    }
_ZN3scn2v24impl22make_contiguous_bufferIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|  3.96k|{
  235|  3.96k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  3.96k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  3.96k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  3.96k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|  3.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  3.96k|    }
  240|  3.96k|    else {
  241|  3.96k|        return contiguous_range_factory{SCN_FWD(range)};
  242|  3.96k|    }
  243|  3.96k|}
_ZN3scn2v24impl19string_view_wrapperIcEC2IRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|  3.96k|    {
   50|  3.96k|    }
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EESB_LNS4_13subrange_kindE0EEEEEDaOT_:
  234|  44.9k|{
  235|  44.9k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  44.9k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  44.9k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  44.9k|        return string_view_wrapper{SCN_FWD(range)};
  239|  44.9k|    }
  240|  44.9k|    else {
  241|  44.9k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  248|  44.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  242|  44.9k|    }
  243|  44.9k|}
_ZN3scn2v24impl24contiguous_range_factoryIcEC2IN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_LNS6_13subrange_kindE0EEELPv0EEEOT_:
   96|  44.9k|    {
   97|  44.9k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|  44.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   98|  44.9k|    }
_ZN3scn2v24impl24contiguous_range_factoryIcE13emplace_rangeIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_LNS6_13subrange_kindE0EEEEEvOT_:
  180|  44.9k|    {
  181|  44.9k|        using value_t = ranges::range_value_t<Range>;
  182|  44.9k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|  44.9k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|  44.9k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|  44.9k|            m_storage.reset();
  186|  44.9k|            m_view = string_view_type{ranges::data(range),
  187|  44.9k|                                      ranges_polyfill::usize(range)};
  188|  44.9k|        }
  189|  44.9k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (189:28): [Folded - Ignored]
  ------------------
  190|  44.9k|                                          std::basic_string<CharT>>) {
  191|  44.9k|            m_storage.emplace(SCN_FWD(range));
  192|  44.9k|            m_view = string_view_type{*m_storage};
  193|  44.9k|        }
  194|  44.9k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (194:28): [Folded - Ignored]
  |  Branch (194:28): [Folded - Ignored]
  ------------------
  195|  44.9k|                                          typename detail::basic_scan_buffer<
  196|  44.9k|                                              value_t>::forward_iterator> &&
  197|  44.9k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (197:28): [Folded - Ignored]
  ------------------
  198|  44.9k|            auto beg_seg = range.begin().contiguous_segment();
  199|  44.9k|            auto end_seg = range.end().contiguous_segment();
  200|  44.9k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  201|  44.9k|                             detail::to_address(end_seg.end()))) {
  202|  44.9k|                auto& str = m_storage.emplace();
  203|  44.9k|                str.reserve(range.end().position() - range.begin().position());
  204|  44.9k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|  44.9k|                m_view = string_view_type{str};
  206|  44.9k|                return;
  207|  44.9k|            }
  208|       |
  209|  44.9k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|  44.9k|                                                            end_seg.data());
  211|  44.9k|            m_storage.reset();
  212|  44.9k|        }
  213|  44.9k|        else {
  214|  44.9k|            auto& str = m_storage.emplace();
  215|  44.9k|            if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (215:27): [Folded - Ignored]
  ------------------
  216|  44.9k|                str.reserve(ranges_polyfill::usize(range));
  217|  44.9k|            }
  218|  44.9k|            std::copy(ranges::begin(range), ranges::end(range),
  219|  44.9k|                      std::back_inserter(str));
  220|  44.9k|            m_view = string_view_type{str};
  221|  44.9k|        }
  222|  44.9k|    }
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|  10.1k|{
  235|  10.1k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  10.1k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  10.1k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  10.1k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|  10.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  10.1k|    }
  240|  10.1k|    else {
  241|  10.1k|        return contiguous_range_factory{SCN_FWD(range)};
  242|  10.1k|    }
  243|  10.1k|}
_ZN3scn2v24impl19string_view_wrapperIwEC2IN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|  10.1k|    {
   50|  10.1k|    }
_ZNK3scn2v24impl19string_view_wrapperIwE4viewEv:
   62|  14.3k|    {
   63|  14.3k|        return sv;
   64|  14.3k|    }
_ZNK3scn2v24impl24contiguous_range_factoryIwE4viewEv:
  141|  25.1k|    {
  142|  25.1k|        return m_view;
  143|  25.1k|    }
_ZN3scn2v24impl24contiguous_range_factoryIwED2Ev:
  131|  25.2k|    ~contiguous_range_factory() = default;
_ZN3scn2v24impl24contiguous_range_factoryIwEC2Ev:
   91|  2.60k|    contiguous_range_factory() = default;
_ZN3scn2v24impl24contiguous_range_factoryIwE6assignIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEELPv0EEEvOT_:
  136|  1.04k|    {
  137|  1.04k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|  1.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|  1.04k|    }
_ZN3scn2v24impl24contiguous_range_factoryIwE13emplace_rangeIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEvOT_:
  180|  1.04k|    {
  181|  1.04k|        using value_t = ranges::range_value_t<Range>;
  182|  1.04k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|  1.04k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|  1.04k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|  1.04k|            m_storage.reset();
  186|  1.04k|            m_view = string_view_type{ranges::data(range),
  187|  1.04k|                                      ranges_polyfill::usize(range)};
  188|  1.04k|        }
  189|  1.04k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  190|  1.04k|                                          std::basic_string<CharT>>) {
  191|  1.04k|            m_storage.emplace(SCN_FWD(range));
  192|  1.04k|            m_view = string_view_type{*m_storage};
  193|  1.04k|        }
  194|  1.04k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  195|  1.04k|                                          typename detail::basic_scan_buffer<
  196|  1.04k|                                              value_t>::forward_iterator> &&
  197|  1.04k|                           ranges::common_range<Range>) {
  198|  1.04k|            auto beg_seg = range.begin().contiguous_segment();
  199|  1.04k|            auto end_seg = range.end().contiguous_segment();
  200|  1.04k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  201|  1.04k|                             detail::to_address(end_seg.end()))) {
  202|  1.04k|                auto& str = m_storage.emplace();
  203|  1.04k|                str.reserve(range.end().position() - range.begin().position());
  204|  1.04k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|  1.04k|                m_view = string_view_type{str};
  206|  1.04k|                return;
  207|  1.04k|            }
  208|       |
  209|  1.04k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|  1.04k|                                                            end_seg.data());
  211|  1.04k|            m_storage.reset();
  212|  1.04k|        }
  213|  1.04k|        else {
  214|  1.04k|            auto& str = m_storage.emplace();
  215|  1.04k|            if constexpr (ranges::sized_range<Range>) {
  216|  1.04k|                str.reserve(ranges_polyfill::usize(range));
  217|  1.04k|            }
  218|  1.04k|            std::copy(ranges::begin(range), ranges::end(range),
  219|  1.04k|                      std::back_inserter(str));
  220|  1.04k|            m_view = string_view_type{str};
  221|  1.04k|        }
  222|  1.04k|    }
_ZNK3scn2v24impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
  146|    768|    {
  147|    768|        return m_storage.has_value();
  148|    768|    }
_ZNR3scn2v24impl24contiguous_range_factoryIwE20get_allocated_stringEv:
  151|    384|    {
  152|    384|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  242|    384|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    384|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|      0|        return *m_storage;
  154|    384|    }
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EESB_LNS4_13subrange_kindE0EEEEEDaOT_:
  234|  22.6k|{
  235|  22.6k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  22.6k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  22.6k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  22.6k|        return string_view_wrapper{SCN_FWD(range)};
  239|  22.6k|    }
  240|  22.6k|    else {
  241|  22.6k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  248|  22.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  242|  22.6k|    }
  243|  22.6k|}
_ZN3scn2v24impl24contiguous_range_factoryIwEC2IN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_LNS6_13subrange_kindE0EEELPv0EEEOT_:
   96|  22.6k|    {
   97|  22.6k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|  22.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   98|  22.6k|    }
_ZN3scn2v24impl24contiguous_range_factoryIwE13emplace_rangeIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_LNS6_13subrange_kindE0EEEEEvOT_:
  180|  22.6k|    {
  181|  22.6k|        using value_t = ranges::range_value_t<Range>;
  182|  22.6k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|  22.6k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|  22.6k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|  22.6k|            m_storage.reset();
  186|  22.6k|            m_view = string_view_type{ranges::data(range),
  187|  22.6k|                                      ranges_polyfill::usize(range)};
  188|  22.6k|        }
  189|  22.6k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (189:28): [Folded - Ignored]
  ------------------
  190|  22.6k|                                          std::basic_string<CharT>>) {
  191|  22.6k|            m_storage.emplace(SCN_FWD(range));
  192|  22.6k|            m_view = string_view_type{*m_storage};
  193|  22.6k|        }
  194|  22.6k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (194:28): [Folded - Ignored]
  |  Branch (194:28): [Folded - Ignored]
  ------------------
  195|  22.6k|                                          typename detail::basic_scan_buffer<
  196|  22.6k|                                              value_t>::forward_iterator> &&
  197|  22.6k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (197:28): [Folded - Ignored]
  ------------------
  198|  22.6k|            auto beg_seg = range.begin().contiguous_segment();
  199|  22.6k|            auto end_seg = range.end().contiguous_segment();
  200|  22.6k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  201|  22.6k|                             detail::to_address(end_seg.end()))) {
  202|  22.6k|                auto& str = m_storage.emplace();
  203|  22.6k|                str.reserve(range.end().position() - range.begin().position());
  204|  22.6k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|  22.6k|                m_view = string_view_type{str};
  206|  22.6k|                return;
  207|  22.6k|            }
  208|       |
  209|  22.6k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|  22.6k|                                                            end_seg.data());
  211|  22.6k|            m_storage.reset();
  212|  22.6k|        }
  213|  22.6k|        else {
  214|  22.6k|            auto& str = m_storage.emplace();
  215|  22.6k|            if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (215:27): [Folded - Ignored]
  ------------------
  216|  22.6k|                str.reserve(ranges_polyfill::usize(range));
  217|  22.6k|            }
  218|  22.6k|            std::copy(ranges::begin(range), ranges::end(range),
  219|  22.6k|                      std::back_inserter(str));
  220|  22.6k|            m_view = string_view_type{str};
  221|  22.6k|        }
  222|  22.6k|    }

_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_9eof_errorERKT_:
   96|  60.6k|{
   97|  60.6k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  60.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 60.6k]
  |  |  ------------------
  ------------------
   98|      0|        return eof_error::eof;
   99|      0|    }
  100|  60.6k|    return eof_error::good;
  101|  60.6k|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEbRKT_:
   90|  60.6k|{
   91|  60.6k|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  60.6k|}
_ZN3scn2v24impl12is_range_eofIPKcS4_EEbT_T0_:
   74|   239k|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|   239k|    {
   84|   239k|        return begin == end;
   85|   239k|    }
   86|   239k|}
_ZN3scn2v24impl9eof_checkINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEEEENS1_9eof_errorERKT_:
   96|  2.07k|{
   97|  2.07k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  2.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.07k]
  |  |  ------------------
  ------------------
   98|      0|        return eof_error::eof;
   99|      0|    }
  100|  2.07k|    return eof_error::good;
  101|  2.07k|}
_ZN3scn2v24impl12is_range_eofINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEEEEbRKT_:
   90|  2.07k|{
   91|  2.07k|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  2.07k|}
_ZN3scn2v24impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIS6_S6_LNSA_13subrange_kindE1EEEE8sentinelILb1EEEEEbT_T0_:
   74|  2.65k|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  2.65k|    {
   84|  2.65k|        return begin == end;
   85|  2.65k|    }
   86|  2.65k|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS1_9eof_errorERKT_:
   96|    580|{
   97|    580|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|    580|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 580]
  |  |  ------------------
  ------------------
   98|      0|        return eof_error::eof;
   99|      0|    }
  100|    580|    return eof_error::good;
  101|    580|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEEbRKT_:
   90|    580|{
   91|    580|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|    580|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_9eof_errorERKT_:
   96|  47.3k|{
   97|  47.3k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  47.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 47.3k]
  |  |  ------------------
  ------------------
   98|      0|        return eof_error::eof;
   99|      0|    }
  100|  47.3k|    return eof_error::good;
  101|  47.3k|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEbRKT_:
   90|  47.3k|{
   91|  47.3k|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  47.3k|}
_ZN3scn2v24impl12is_range_eofIPKwS4_EEbT_T0_:
   74|  3.79M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  3.79M|    {
   84|  3.79M|        return begin == end;
   85|  3.79M|    }
   86|  3.79M|}
_ZN3scn2v24impl9eof_checkINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEEEENS1_9eof_errorERKT_:
   96|  1.68k|{
   97|  1.68k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  1.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.68k]
  |  |  ------------------
  ------------------
   98|      0|        return eof_error::eof;
   99|      0|    }
  100|  1.68k|    return eof_error::good;
  101|  1.68k|}
_ZN3scn2v24impl12is_range_eofINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEEEEbRKT_:
   90|  1.68k|{
   91|  1.68k|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  1.68k|}
_ZN3scn2v24impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIS6_S6_LNSA_13subrange_kindE1EEEE8sentinelILb1EEEEEbT_T0_:
   74|  2.14k|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  2.14k|    {
   84|  2.14k|        return begin == end;
   85|  2.14k|    }
   86|  2.14k|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS1_9eof_errorERKT_:
   96|    468|{
   97|    468|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|    468|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 468]
  |  |  ------------------
  ------------------
   98|      0|        return eof_error::eof;
   99|      0|    }
  100|    468|    return eof_error::good;
  101|    468|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEEbRKT_:
   90|    468|{
   91|    468|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|    468|}

_ZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  119|  4.78k|{
  120|  4.78k|    return find_classic_impl(
  121|  4.78k|        source, [](char ch) { return is_ascii_space(ch); },
  122|  4.78k|        [](char32_t cp) { return is_cp_space(cp); });
  123|  4.78k|}
_ZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  127|   146k|{
  128|   146k|    return find_classic_impl(
  129|   146k|        source, [](char ch) { return !is_ascii_space(ch); },
  130|   146k|        [](char32_t cp) { return !is_cp_space(cp); });
  131|   146k|}
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_1ZNS1_30find_classic_space_narrow_fastES8_E3$_2EEPKcS8_T_T0_:
   43|  4.78k|{
   44|  4.78k|    auto it = source.begin();
   45|       |
   46|  38.6k|    while (it != source.end()) {
  ------------------
  |  Branch (46:12): [True: 35.0k, False: 3.64k]
  ------------------
   47|  35.0k|        auto sv =
   48|  35.0k|            detail::make_string_view_from_iterators<char>(it, source.end())
   49|  35.0k|                .substr(0, 8);
   50|       |
   51|  35.0k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (51:13): [True: 21.1k, False: 13.8k]
  ------------------
   52|  21.1k|            auto tmp_it = ranges::find_if(sv, cu_cb);
   53|  21.1k|            it = detail::make_string_view_iterator(source, tmp_it);
   54|  21.1k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (54:17): [True: 708, False: 20.4k]
  ------------------
   55|    708|                break;
   56|    708|            }
   57|  20.4k|            continue;
   58|  21.1k|        }
   59|       |
   60|  59.7k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (60:28): [True: 46.3k, False: 13.4k]
  ------------------
   61|  46.3k|            auto tmp =
   62|  46.3k|                detail::make_string_view_from_iterators<char>(it, source.end());
   63|  46.3k|            auto res = get_next_code_point(tmp);
   64|  46.3k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (64:17): [True: 438, False: 45.8k]
  ------------------
   65|    438|                return it;
   66|    438|            }
   67|  45.8k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
   68|  45.8k|            it = detail::make_string_view_iterator(source, res.iterator);
   69|  45.8k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  243|  45.8k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|  45.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   70|  45.8k|        }
   71|  13.8k|    }
   72|       |
   73|  4.35k|    return detail::make_string_view_iterator(source, it);
   74|  4.78k|}
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
   30|   187k|{
   31|   187k|    static_assert(sizeof(*source.data()) == 1);
   32|   187k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  242|   187k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   187k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   33|      0|    uint64_t word{};
   34|   187k|    std::memcpy(&word, source.data(), source.size());
   35|       |
   36|   187k|    return has_byte_greater(word, 127) != 0;
   37|   187k|}
find_whitespace.cpp:_ZZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEc:
  121|   157k|        source, [](char ch) { return is_ascii_space(ch); },
find_whitespace.cpp:_ZZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_2clEDi:
  122|  46.3k|        [](char32_t cp) { return is_cp_space(cp); });
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_3ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_4EEPKcS8_T_T0_:
   43|   146k|{
   44|   146k|    auto it = source.begin();
   45|       |
   46|   153k|    while (it != source.end()) {
  ------------------
  |  Branch (46:12): [True: 152k, False: 894]
  ------------------
   47|   152k|        auto sv =
   48|   152k|            detail::make_string_view_from_iterators<char>(it, source.end())
   49|   152k|                .substr(0, 8);
   50|       |
   51|   152k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (51:13): [True: 120k, False: 32.4k]
  ------------------
   52|   120k|            auto tmp_it = ranges::find_if(sv, cu_cb);
   53|   120k|            it = detail::make_string_view_iterator(source, tmp_it);
   54|   120k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (54:17): [True: 116k, False: 3.62k]
  ------------------
   55|   116k|                break;
   56|   116k|            }
   57|  3.62k|            continue;
   58|   120k|        }
   59|       |
   60|  45.7k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (60:28): [True: 42.1k, False: 3.59k]
  ------------------
   61|  42.1k|            auto tmp =
   62|  42.1k|                detail::make_string_view_from_iterators<char>(it, source.end());
   63|  42.1k|            auto res = get_next_code_point(tmp);
   64|  42.1k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (64:17): [True: 28.8k, False: 13.2k]
  ------------------
   65|  28.8k|                return it;
   66|  28.8k|            }
   67|  13.2k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
   68|  13.2k|            it = detail::make_string_view_iterator(source, res.iterator);
   69|  13.2k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  243|  13.2k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|  13.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   70|  13.2k|        }
   71|  32.4k|    }
   72|       |
   73|   117k|    return detail::make_string_view_iterator(source, it);
   74|   146k|}
find_whitespace.cpp:_ZZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_3clEc:
  129|   145k|        source, [](char ch) { return !is_ascii_space(ch); },
find_whitespace.cpp:_ZZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_4clEDi:
  130|  42.1k|        [](char32_t cp) { return !is_cp_space(cp); });

_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_:
  299|  13.1k|{
  300|  13.1k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|  13.1k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|  13.1k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|  13.1k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  ------------------
  |  |  248|  13.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  304|  13.1k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|  13.1k|        return ranges::next(ranges::begin(range),
  306|  13.1k|                            ranges::distance(buf.view().begin(), it));
  307|  13.1k|    }
  308|  13.1k|    else {
  309|  13.1k|        auto it = ranges::begin(range);
  310|       |
  311|  13.1k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  312|  13.1k|            auto seg = get_contiguous_beginning(range);
  313|  13.1k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|  13.1k|                seg_it != seg.end()) {
  315|  13.1k|                return ranges_polyfill::batch_next(
  316|  13.1k|                    it, ranges::distance(seg.begin(), seg_it));
  317|  13.1k|            }
  318|  13.1k|            ranges_polyfill::batch_next(it, seg.size());
  319|  13.1k|        }
  320|       |
  321|  13.1k|        return read_while_code_point(
  322|  13.1k|            SCN_FWD(range),
  323|  13.1k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|  13.1k|    }
  325|  13.1k|}
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  458|  5.47k|{
  459|  5.47k|    auto it = read_code_unit(range);
  460|  5.47k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  5.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.47k]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|  10.9k|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 10.9k, False: 5.47k]
  ------------------
  465|  10.9k|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 0, False: 10.9k]
  ------------------
  466|      0|            return *it;
  467|      0|        }
  468|  10.9k|    }
  469|       |
  470|  5.47k|    return unexpected(parse_error::error);
  471|  5.47k|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEOSH_OSJ_:
  481|  1.44k|{
  482|  1.44k|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 1.44k, False: 0]
  ------------------
  483|  1.44k|        return ranges::begin(range);
  484|  1.44k|    }
  485|      0|    return *result;
  486|  1.44k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  417|  13.3k|{
  418|  13.3k|    using char_type = detail::char_t<Range>;
  419|       |
  420|  13.3k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  13.3k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  13.3k|        if (ranges::size(range) < str.size()) {
  ------------------
  |  Branch (422:13): [True: 8, False: 13.3k]
  ------------------
  423|      8|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|      8|        }
  425|  13.3k|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  ------------------
  |  Branch (425:13): [True: 13.3k, False: 0]
  ------------------
  426|  13.3k|            return unexpected(parse_error::error);
  427|  13.3k|        }
  428|      0|        return ranges::next(ranges::begin(range), str.size());
  429|  13.3k|    }
  430|  13.3k|    else {
  431|  13.3k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  13.3k|            if (ch < 'A' || ch > 'Z') {
  433|  13.3k|                return ch;
  434|  13.3k|            }
  435|  13.3k|            return static_cast<char_type>(ch +
  436|  13.3k|                                          static_cast<char_type>('a' - 'A'));
  437|  13.3k|        };
  438|       |
  439|  13.3k|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  440|  13.3k|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  13.3k|        if (SCN_UNLIKELY(!std::equal(
  443|  13.3k|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  13.3k|                    return ascii_tolower(a) ==
  445|  13.3k|                           static_cast<detail::char_t<Range>>(b);
  446|  13.3k|                }))) {
  447|  13.3k|            return unexpected(parse_error::error);
  448|  13.3k|        }
  449|       |
  450|  13.3k|        return it;
  451|  13.3k|    }
  452|  13.3k|}
_ZN3scn2v24impl17fast_streq_nocaseEPKcS3_m:
  406|  13.3k|{
  407|  13.3k|    unsigned char running_diff{0};
  408|  42.7k|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (408:24): [True: 29.3k, False: 13.3k]
  ------------------
  409|  29.3k|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
  410|  29.3k|    }
  411|  13.3k|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (411:12): [True: 0, False: 13.3k]
  |  Branch (411:33): [True: 0, False: 13.3k]
  ------------------
  412|  13.3k|}
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NDTcl4implISE_EEE4typeE:
  331|  5.53k|{
  332|  5.53k|    auto it = read_code_unit(range);
  333|  5.53k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  5.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.53k]
  |  |  ------------------
  ------------------
  334|      0|        return unexpected(make_eof_parse_error(it.error()));
  335|      0|    }
  336|       |
  337|  5.53k|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|  5.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.53k, False: 0]
  |  |  ------------------
  ------------------
  338|  5.53k|                     static_cast<detail::char_t<Range>>(ch))) {
  339|  5.53k|        return unexpected(parse_error::error);
  340|  5.53k|    }
  341|       |
  342|      0|    return *it;
  343|  5.53k|}
_ZN3scn2v24impl28read_matching_string_classicIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  378|  2.64k|{
  379|  2.64k|    SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|  2.64k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.64k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.64k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.64k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 154, False: 2.49k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    154|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    154|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    154|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    154|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    154|    }                                                  \
  |  |  |  |   70|  2.64k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  380|  2.49k|                    .transform_error(make_eof_parse_error));
  381|       |
  382|  2.49k|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (382:19): [Folded - Ignored]
  ------------------
  383|  2.49k|        auto sv =
  384|  2.49k|            make_contiguous_buffer(ranges::subrange{ranges::begin(range), it});
  385|  2.49k|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  153|  2.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.49k, False: 0]
  |  |  ------------------
  ------------------
  386|  2.49k|            return unexpected(parse_error::error);
  387|  2.49k|        }
  388|      0|        return it;
  389|  2.49k|    }
  390|  2.49k|    else {
  391|  2.49k|        auto range_it = ranges::begin(range);
  392|  2.49k|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  393|  2.49k|            if (SCN_UNLIKELY(*range_it !=
  394|  2.49k|                             static_cast<detail::char_t<Range>>(str[i]))) {
  395|  2.49k|                return unexpected(parse_error::error);
  396|  2.49k|            }
  397|  2.49k|        }
  398|  2.49k|        return it;
  399|  2.49k|    }
  400|  2.49k|}
_ZN3scn2v24impl21read_while1_code_unitIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEEEOSD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISL_E8functionEEE:
  158|     38|{
  159|     38|    auto it = read_while_code_unit(range, pred);
  160|     38|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 38, False: 0]
  ------------------
  161|     38|        return unexpected(parse_error::error);
  162|     38|    }
  163|      0|    return it;
  164|     38|}
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
  138|    206|{
  139|    206|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|    206|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|    206|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
  130|    410|{
  131|    410|    return ranges::find_if(range, pred);
  132|    410|}
_ZN3scn2v24impl24read_until_classic_spaceIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_:
  269|  3.96k|{
  270|  3.96k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (270:19): [Folded - Ignored]
  |  Branch (270:19): [Folded - Ignored]
  ------------------
  271|  3.96k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (271:19): [Folded - Ignored]
  ------------------
  272|  3.96k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (272:19): [Folded - Ignored]
  ------------------
  273|  3.96k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  ------------------
  |  |  248|  3.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  274|  3.96k|        auto it = find_classic_space_narrow_fast(buf.view());
  275|  3.96k|        return ranges::next(ranges::begin(range),
  276|  3.96k|                            ranges::distance(buf.view().begin(), it));
  277|  3.96k|    }
  278|  3.96k|    else {
  279|  3.96k|        auto it = ranges::begin(range);
  280|       |
  281|  3.96k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  282|  3.96k|            auto seg = get_contiguous_beginning(range);
  283|  3.96k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
  284|  3.96k|                seg_it != seg.end()) {
  285|  3.96k|                return ranges_polyfill::batch_next(
  286|  3.96k|                    it, ranges::distance(seg.begin(), seg_it));
  287|  3.96k|            }
  288|  3.96k|            ranges_polyfill::batch_next(it, seg.size());
  289|  3.96k|        }
  290|       |
  291|  3.96k|        return read_until_code_point(
  292|  3.96k|            ranges::subrange{it, ranges::end(range)},
  293|  3.96k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  294|  3.96k|    }
  295|  3.96k|}
_ZN3scn2v24impl27read_until_code_point_eagerIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_NS1_12function_refIFbDiESF_EE:
  177|  1.24k|{
  178|  1.24k|    static_assert(ranges::contiguous_range<Range> &&
  179|  1.24k|                  ranges::sized_range<Range>);
  180|       |
  181|  1.24k|    std::array<char32_t, 16> cp_buf{};
  182|  1.24k|    std::array<uint8_t, 16> idx_buf{};
  183|  1.24k|    auto it = ranges::begin(range);
  184|  1.24k|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 0, False: 1.24k]
  ------------------
  185|      0|        auto chunk_begin = it;
  186|      0|        size_t code_point_count = 0;
  187|      0|        uint8_t code_unit_idx = 0;
  188|      0|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 0, False: 0]
  |  Branch (188:52): [True: 0, False: 0]
  ------------------
  189|      0|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 0, False: 0]
  ------------------
  190|      0|                idx_buf[code_point_count] = code_unit_idx;
  191|      0|                ++code_point_count;
  192|      0|            }
  193|      0|            ++it;
  194|      0|            ++code_unit_idx;
  195|      0|        }
  196|       |
  197|      0|        auto input = detail::make_string_view_from_pointers(
  198|      0|            detail::to_address(chunk_begin), detail::to_address(it));
  199|      0|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|      0|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|      0|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|      0|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 0, False: 0]
  ------------------
  217|      0|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 0, False: 0]
  ------------------
  218|      0|                return chunk_begin + idx_buf[i];
  219|      0|            }
  220|      0|        }
  221|      0|    }
  222|       |
  223|  1.24k|    return it;
  224|  1.24k|}
_ZN3scn2v24impl20read_code_point_intoIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_21iterator_value_resultINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeENS1_24contiguous_range_factoryINDTcl4implISD_EEE4typeEEEEEOSD_:
   41|   196k|{
   42|   196k|    SCN_EXPECT(ranges::begin(range) != ranges::end(range));
  ------------------
  |  |  242|   196k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   196k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   43|       |
   44|      0|    auto it = ranges::begin(range);
   45|   196k|    const auto len = code_point_length_by_starting_code_unit(*it);
   46|       |
   47|   196k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|   196k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 10.7k, False: 186k]
  |  |  ------------------
  ------------------
   48|  57.1k|        for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (48:16): [True: 57.0k, False: 120]
  ------------------
   49|  57.0k|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (49:17): [True: 10.5k, False: 46.4k]
  ------------------
   50|  10.5k|                break;
   51|  10.5k|            }
   52|  57.0k|        }
   53|       |
   54|  10.7k|        return {it, make_contiguous_buffer(
   55|  10.7k|                        ranges::subrange{ranges::begin(range), it})};
   56|  10.7k|    }
   57|       |
   58|   186k|    if (len == 1) {
  ------------------
  |  Branch (58:9): [True: 155k, False: 30.1k]
  ------------------
   59|   155k|        ++it;
   60|   155k|        return {it, make_contiguous_buffer(
   61|   155k|                        ranges::subrange{ranges::begin(range), it})};
   62|   155k|    }
   63|       |
   64|  30.1k|    ranges::advance(it, static_cast<ranges::range_difference_t<Range>>(len),
   65|  30.1k|                    ranges::end(range));
   66|  30.1k|    return {it,
   67|  30.1k|            make_contiguous_buffer(ranges::subrange{ranges::begin(range), it})};
   68|   186k|}
_ZN3scn2v24impl24read_while_classic_spaceIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_:
  299|   133k|{
  300|   133k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|   133k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|   133k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|   133k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  ------------------
  |  |  248|   133k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  304|   133k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|   133k|        return ranges::next(ranges::begin(range),
  306|   133k|                            ranges::distance(buf.view().begin(), it));
  307|   133k|    }
  308|   133k|    else {
  309|   133k|        auto it = ranges::begin(range);
  310|       |
  311|   133k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  312|   133k|            auto seg = get_contiguous_beginning(range);
  313|   133k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|   133k|                seg_it != seg.end()) {
  315|   133k|                return ranges_polyfill::batch_next(
  316|   133k|                    it, ranges::distance(seg.begin(), seg_it));
  317|   133k|            }
  318|   133k|            ranges_polyfill::batch_next(it, seg.size());
  319|   133k|        }
  320|       |
  321|   133k|        return read_while_code_point(
  322|   133k|            SCN_FWD(range),
  323|   133k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|   133k|    }
  325|   133k|}
_ZN3scn2v24impl21read_one_of_code_unitIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NSt3__117basic_string_viewIcNSL_11char_traitsIcEEEE:
  458|  1.19k|{
  459|  1.19k|    auto it = read_code_unit(range);
  460|  1.19k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  1.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.19k]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|  2.38k|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 2.38k, False: 1.19k]
  ------------------
  465|  2.38k|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 0, False: 2.38k]
  ------------------
  466|      0|            return *it;
  467|      0|        }
  468|  2.38k|    }
  469|       |
  470|  1.19k|    return unexpected(parse_error::error);
  471|  1.19k|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEE4typeEOSP_OSR_:
  481|    324|{
  482|    324|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 324, False: 0]
  ------------------
  483|    324|        return ranges::begin(range);
  484|    324|    }
  485|      0|    return *result;
  486|    324|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_NSt3__117basic_string_viewIcNSR_11char_traitsIcEEEE:
  417|  2.89k|{
  418|  2.89k|    using char_type = detail::char_t<Range>;
  419|       |
  420|  2.89k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  2.89k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  2.89k|        if (ranges::size(range) < str.size()) {
  423|  2.89k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  2.89k|        }
  425|  2.89k|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|  2.89k|            return unexpected(parse_error::error);
  427|  2.89k|        }
  428|  2.89k|        return ranges::next(ranges::begin(range), str.size());
  429|  2.89k|    }
  430|  2.89k|    else {
  431|  2.89k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  2.89k|            if (ch < 'A' || ch > 'Z') {
  433|  2.89k|                return ch;
  434|  2.89k|            }
  435|  2.89k|            return static_cast<char_type>(ch +
  436|  2.89k|                                          static_cast<char_type>('a' - 'A'));
  437|  2.89k|        };
  438|       |
  439|  2.89k|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|  2.89k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.89k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.89k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 138, False: 2.75k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    138|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    138|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    138|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    138|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    138|    }                                                  \
  |  |  |  |   70|  2.89k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|  2.75k|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  2.75k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|  2.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.75k, False: 0]
  |  |  ------------------
  ------------------
  443|  2.75k|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  2.75k|                    return ascii_tolower(a) ==
  445|  2.75k|                           static_cast<detail::char_t<Range>>(b);
  446|  2.75k|                }))) {
  447|  2.75k|            return unexpected(parse_error::error);
  448|  2.75k|        }
  449|       |
  450|      0|        return it;
  451|  2.75k|    }
  452|  2.89k|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_NSt3__117basic_string_viewIcNSR_11char_traitsIcEEEEENKUlcE_clEc:
  431|  2.75k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  2.75k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 16, False: 2.73k]
  |  Branch (432:29): [True: 2.73k, False: 0]
  ------------------
  433|  2.75k|                return ch;
  434|  2.75k|            }
  435|      0|            return static_cast<char_type>(ch +
  436|      0|                                          static_cast<char_type>('a' - 'A'));
  437|  2.75k|        };
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_NDTcl4implISM_EEE4typeE:
  331|    580|{
  332|    580|    auto it = read_code_unit(range);
  333|    580|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|    580|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 580]
  |  |  ------------------
  ------------------
  334|      0|        return unexpected(make_eof_parse_error(it.error()));
  335|      0|    }
  336|       |
  337|    580|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|    580|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 580, False: 0]
  |  |  ------------------
  ------------------
  338|    580|                     static_cast<detail::char_t<Range>>(ch))) {
  339|    580|        return unexpected(parse_error::error);
  340|    580|    }
  341|       |
  342|      0|    return *it;
  343|    580|}
_ZN3scn2v24impl21read_while1_code_unitIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_NS1_12function_refIFbNDTcl4implISM_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
  158|    894|{
  159|    894|    auto it = read_while_code_unit(range, pred);
  160|    894|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 894, False: 0]
  ------------------
  161|    894|        return unexpected(parse_error::error);
  162|    894|    }
  163|      0|    return it;
  164|    894|}
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
  138|  1.17k|{
  139|  1.17k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|  1.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|  1.17k|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
  130|  1.17k|{
  131|  1.17k|    return ranges::find_if(range, pred);
  132|  1.17k|}
_ZN3scn2v24impl23read_matching_code_unitIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NDTcl4implISG_EEE4typeE:
  331|    612|{
  332|    612|    auto it = read_code_unit(range);
  333|    612|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|    612|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 612]
  |  |  ------------------
  ------------------
  334|      0|        return unexpected(make_eof_parse_error(it.error()));
  335|      0|    }
  336|       |
  337|    612|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|    612|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 612, False: 0]
  |  |  ------------------
  ------------------
  338|    612|                     static_cast<detail::char_t<Range>>(ch))) {
  339|    612|        return unexpected(parse_error::error);
  340|    612|    }
  341|       |
  342|      0|    return *it;
  343|    612|}
_ZN3scn2v24impl20read_matching_stringIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NSt3__117basic_string_viewINDTcl4implISG_EEE4typeENSL_11char_traitsISO_EEEE:
  362|     16|{
  363|     16|    SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10, False: 6]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     10|    }                                                  \
  |  |  |  |   70|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  364|      6|                    .transform_error(make_eof_parse_error));
  365|       |
  366|      6|    auto sv =
  367|      6|        make_contiguous_buffer(ranges::subrange{ranges::begin(range), it});
  368|      6|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  153|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6, False: 0]
  |  |  ------------------
  ------------------
  369|      6|        return unexpected(parse_error::error);
  370|      6|    }
  371|      0|    return it;
  372|      6|}
_ZN3scn2v24impl28read_matching_string_classicIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NSt3__117basic_string_viewIcNSL_11char_traitsIcEEEE:
  378|    548|{
  379|    548|    SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|    548|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    548|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    548|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    548|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 52, False: 496]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     52|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     52|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     52|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     52|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     52|    }                                                  \
  |  |  |  |   70|    548|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    496|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  380|    496|                    .transform_error(make_eof_parse_error));
  381|       |
  382|    496|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (382:19): [Folded - Ignored]
  ------------------
  383|    496|        auto sv =
  384|    496|            make_contiguous_buffer(ranges::subrange{ranges::begin(range), it});
  385|    496|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  153|    496|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 496, False: 0]
  |  |  ------------------
  ------------------
  386|    496|            return unexpected(parse_error::error);
  387|    496|        }
  388|      0|        return it;
  389|    496|    }
  390|    496|    else {
  391|    496|        auto range_it = ranges::begin(range);
  392|    496|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  393|    496|            if (SCN_UNLIKELY(*range_it !=
  394|    496|                             static_cast<detail::char_t<Range>>(str[i]))) {
  395|    496|                return unexpected(parse_error::error);
  396|    496|            }
  397|    496|        }
  398|    496|        return it;
  399|    496|    }
  400|    496|}
_ZN3scn2v24impl20read_matching_stringIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewINDTcl4implISE_EEE4typeENSJ_11char_traitsISM_EEEE:
  362|     24|{
  363|     24|    SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|     24|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|     24|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|     24|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      2|    }                                                  \
  |  |  |  |   70|     24|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  364|     22|                    .transform_error(make_eof_parse_error));
  365|       |
  366|     22|    auto sv =
  367|     22|        make_contiguous_buffer(ranges::subrange{ranges::begin(range), it});
  368|     22|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  153|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 22, False: 0]
  |  |  ------------------
  ------------------
  369|     22|        return unexpected(parse_error::error);
  370|     22|    }
  371|      0|    return it;
  372|     22|}
_ZN3scn2v24impl21read_while1_code_unitIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEE:
  158|    284|{
  159|    284|    auto it = read_while_code_unit(range, pred);
  160|    284|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 284, False: 0]
  ------------------
  161|    284|        return unexpected(parse_error::error);
  162|    284|    }
  163|      0|    return it;
  164|    284|}
_ZN3scn2v24impl24read_until_classic_spaceIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEOSF_:
  269|    822|{
  270|    822|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (270:19): [Folded - Ignored]
  |  Branch (270:19): [Folded - Ignored]
  ------------------
  271|    822|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (271:19): [Folded - Ignored]
  ------------------
  272|    822|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (272:19): [Folded - Ignored]
  ------------------
  273|    822|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  274|    822|        auto it = find_classic_space_narrow_fast(buf.view());
  275|    822|        return ranges::next(ranges::begin(range),
  276|    822|                            ranges::distance(buf.view().begin(), it));
  277|    822|    }
  278|    822|    else {
  279|    822|        auto it = ranges::begin(range);
  280|       |
  281|    822|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (281:23): [Folded - Ignored]
  ------------------
  282|    822|            auto seg = get_contiguous_beginning(range);
  283|    822|            if (auto seg_it = find_classic_space_narrow_fast(seg);
  284|    822|                seg_it != seg.end()) {
  ------------------
  |  Branch (284:17): [True: 0, False: 822]
  ------------------
  285|      0|                return ranges_polyfill::batch_next(
  286|      0|                    it, ranges::distance(seg.begin(), seg_it));
  287|      0|            }
  288|    822|            ranges_polyfill::batch_next(it, seg.size());
  289|    822|        }
  290|       |
  291|    822|        return read_until_code_point(
  292|    822|            ranges::subrange{it, ranges::end(range)},
  293|    822|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  294|    822|    }
  295|    822|}
_ZN3scn2v24impl21read_until_code_pointIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEOSK_NS1_12function_refIFbDiESP_EE:
  230|    822|{
  231|    822|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|    822|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|    822|        return read_until_code_point_eager(SCN_FWD(range), pred);
  234|    822|    }
  235|    822|    else {
  236|    822|        auto it = ranges::begin(range);
  237|    822|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|    822|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|    822|            seg_it != seg.end()) {
  ------------------
  |  Branch (240:13): [True: 0, False: 822]
  ------------------
  241|      0|            return ranges_polyfill::batch_next(
  242|      0|                it, ranges::distance(seg.begin(), seg_it));
  243|      0|        }
  244|       |
  245|  21.8k|        while (it != ranges::end(range)) {
  ------------------
  |  Branch (245:16): [True: 21.1k, False: 678]
  ------------------
  246|  21.1k|            const auto [iter, value] =
  247|  21.1k|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|  21.1k|            const auto cp = decode_code_point_exhaustive(value.view());
  249|  21.1k|            if (pred(cp)) {
  ------------------
  |  Branch (249:17): [True: 144, False: 21.0k]
  ------------------
  250|    144|                return it;
  251|    144|            }
  252|  21.0k|            it = iter;
  253|  21.0k|        }
  254|       |
  255|    678|        return it;
  256|    822|    }
  257|    822|}
_ZN3scn2v24impl20read_code_point_intoIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS1_21iterator_value_resultINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeENS1_24contiguous_range_factoryINDTcl4implISL_EEE4typeEEEEEOSL_:
   41|  43.2k|{
   42|  43.2k|    SCN_EXPECT(ranges::begin(range) != ranges::end(range));
  ------------------
  |  |  242|  43.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  43.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   43|       |
   44|      0|    auto it = ranges::begin(range);
   45|  43.2k|    const auto len = code_point_length_by_starting_code_unit(*it);
   46|       |
   47|  43.2k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|  43.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.34k, False: 38.9k]
  |  |  ------------------
  ------------------
   48|  70.2k|        for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (48:16): [True: 70.0k, False: 126]
  ------------------
   49|  70.0k|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (49:17): [True: 4.21k, False: 65.8k]
  ------------------
   50|  4.21k|                break;
   51|  4.21k|            }
   52|  70.0k|        }
   53|       |
   54|  4.34k|        return {it, make_contiguous_buffer(
   55|  4.34k|                        ranges::subrange{ranges::begin(range), it})};
   56|  4.34k|    }
   57|       |
   58|  38.9k|    if (len == 1) {
  ------------------
  |  Branch (58:9): [True: 32.0k, False: 6.83k]
  ------------------
   59|  32.0k|        ++it;
   60|  32.0k|        return {it, make_contiguous_buffer(
   61|  32.0k|                        ranges::subrange{ranges::begin(range), it})};
   62|  32.0k|    }
   63|       |
   64|  6.83k|    ranges::advance(it, static_cast<ranges::range_difference_t<Range>>(len),
   65|  6.83k|                    ranges::end(range));
   66|  6.83k|    return {it,
   67|  6.83k|            make_contiguous_buffer(ranges::subrange{ranges::begin(range), it})};
   68|  38.9k|}
_ZZN3scn2v24impl24read_until_classic_spaceIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEOSF_ENKUlDiE_clEDi:
  293|  21.1k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_until_code_pointIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEOSF_NS1_12function_refIFbDiESK_EE:
  230|    420|{
  231|    420|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|    420|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|    420|        return read_until_code_point_eager(SCN_FWD(range), pred);
  234|    420|    }
  235|    420|    else {
  236|    420|        auto it = ranges::begin(range);
  237|    420|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|    420|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|    420|            seg_it != seg.end()) {
  ------------------
  |  Branch (240:13): [True: 0, False: 420]
  ------------------
  241|      0|            return ranges_polyfill::batch_next(
  242|      0|                it, ranges::distance(seg.begin(), seg_it));
  243|      0|        }
  244|       |
  245|  22.2k|        while (it != ranges::end(range)) {
  ------------------
  |  Branch (245:16): [True: 22.0k, False: 156]
  ------------------
  246|  22.0k|            const auto [iter, value] =
  247|  22.0k|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|  22.0k|            const auto cp = decode_code_point_exhaustive(value.view());
  249|  22.0k|            if (pred(cp)) {
  ------------------
  |  Branch (249:17): [True: 264, False: 21.8k]
  ------------------
  250|    264|                return it;
  251|    264|            }
  252|  21.8k|            it = iter;
  253|  21.8k|        }
  254|       |
  255|    156|        return it;
  256|    420|    }
  257|    420|}
_ZN3scn2v24impl21read_while_code_pointIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEOSF_NS1_12function_refIFbDiESK_EE:
  263|    186|{
  264|    186|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|    186|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|    186|}
_ZN3scn2v24impl20read_until_code_unitIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEOSF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
  130|    246|{
  131|    246|    return ranges::find_if(range, pred);
  132|    246|}
_ZN3scn2v24impl20read_while_code_unitIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEOSF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
  138|     66|{
  139|     66|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|     66|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|     66|}
_ZN3scn2v24impl21read_until_code_pointIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_NS1_12function_refIFbDiESI_EE:
  230|  3.91k|{
  231|  3.91k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|  3.91k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|  3.91k|        return read_until_code_point_eager(SCN_FWD(range), pred);
  ------------------
  |  |  248|  3.91k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  234|  3.91k|    }
  235|  3.91k|    else {
  236|  3.91k|        auto it = ranges::begin(range);
  237|  3.91k|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|  3.91k|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|  3.91k|            seg_it != seg.end()) {
  241|  3.91k|            return ranges_polyfill::batch_next(
  242|  3.91k|                it, ranges::distance(seg.begin(), seg_it));
  243|  3.91k|        }
  244|       |
  245|  3.91k|        while (it != ranges::end(range)) {
  246|  3.91k|            const auto [iter, value] =
  247|  3.91k|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|  3.91k|            const auto cp = decode_code_point_exhaustive(value.view());
  249|  3.91k|            if (pred(cp)) {
  250|  3.91k|                return it;
  251|  3.91k|            }
  252|  3.91k|            it = iter;
  253|  3.91k|        }
  254|       |
  255|  3.91k|        return it;
  256|  3.91k|    }
  257|  3.91k|}
_ZN3scn2v24impl27read_until_code_point_eagerIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_NS1_12function_refIFbDiESI_EE:
  177|  3.91k|{
  178|  3.91k|    static_assert(ranges::contiguous_range<Range> &&
  179|  3.91k|                  ranges::sized_range<Range>);
  180|       |
  181|  3.91k|    std::array<char32_t, 16> cp_buf{};
  182|  3.91k|    std::array<uint8_t, 16> idx_buf{};
  183|  3.91k|    auto it = ranges::begin(range);
  184|  37.3k|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 36.5k, False: 822]
  ------------------
  185|  36.5k|        auto chunk_begin = it;
  186|  36.5k|        size_t code_point_count = 0;
  187|  36.5k|        uint8_t code_unit_idx = 0;
  188|   697k|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 663k, False: 34.5k]
  |  Branch (188:52): [True: 661k, False: 2.03k]
  ------------------
  189|   661k|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 567k, False: 93.2k]
  ------------------
  190|   567k|                idx_buf[code_point_count] = code_unit_idx;
  191|   567k|                ++code_point_count;
  192|   567k|            }
  193|   661k|            ++it;
  194|   661k|            ++code_unit_idx;
  195|   661k|        }
  196|       |
  197|  36.5k|        auto input = detail::make_string_view_from_pointers(
  198|  36.5k|            detail::to_address(chunk_begin), detail::to_address(it));
  199|  36.5k|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|  36.5k|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|  36.5k|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|  36.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 14.4k, False: 22.1k]
  |  |  ------------------
  ------------------
  202|  14.4k|            auto end = it;
  203|  14.4k|            it = chunk_begin;
  204|   210k|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 196k, False: 13.2k]
  ------------------
  205|   196k|                const auto [iter, value] =
  206|   196k|                    read_code_point_into(ranges::subrange{it, end});
  207|   196k|                const auto cp = decode_code_point_exhaustive(value.view());
  208|   196k|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 1.14k, False: 195k]
  ------------------
  209|  1.14k|                    return it;
  210|  1.14k|                }
  211|   195k|                it = iter;
  212|   195k|            }
  213|  13.2k|            continue;
  214|  14.4k|        }
  215|       |
  216|   349k|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 328k, False: 20.1k]
  ------------------
  217|   328k|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 1.95k, False: 327k]
  ------------------
  218|  1.95k|                return chunk_begin + idx_buf[i];
  219|  1.95k|            }
  220|   328k|        }
  221|  22.1k|    }
  222|       |
  223|    822|    return it;
  224|  3.91k|}
_ZN3scn2v24impl21read_while_code_pointIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_NS1_12function_refIFbDiESI_EE:
  263|  2.79k|{
  264|  2.79k|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|  2.79k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|  2.79k|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_:
  299|  10.4k|{
  300|  10.4k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|  10.4k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|  10.4k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|  10.4k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|  10.4k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|  10.4k|        return ranges::next(ranges::begin(range),
  306|  10.4k|                            ranges::distance(buf.view().begin(), it));
  307|  10.4k|    }
  308|  10.4k|    else {
  309|  10.4k|        auto it = ranges::begin(range);
  310|       |
  311|  10.4k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|  10.4k|            auto seg = get_contiguous_beginning(range);
  313|  10.4k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|  10.4k|                seg_it != seg.end()) {
  315|  10.4k|                return ranges_polyfill::batch_next(
  316|  10.4k|                    it, ranges::distance(seg.begin(), seg_it));
  317|  10.4k|            }
  318|  10.4k|            ranges_polyfill::batch_next(it, seg.size());
  319|  10.4k|        }
  320|       |
  321|  10.4k|        return read_while_code_point(
  322|  10.4k|            SCN_FWD(range),
  ------------------
  |  |  248|  10.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  10.4k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|  10.4k|    }
  325|  10.4k|}
_ZN3scn2v24impl21read_while_code_pointIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  263|  10.4k|{
  264|  10.4k|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|  10.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|  10.4k|}
_ZN3scn2v24impl21read_until_code_pointIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  230|  10.4k|{
  231|  10.4k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|  10.4k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|  10.4k|        return read_until_code_point_eager(SCN_FWD(range), pred);
  ------------------
  |  |  248|  10.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  234|  10.4k|    }
  235|  10.4k|    else {
  236|  10.4k|        auto it = ranges::begin(range);
  237|  10.4k|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|  10.4k|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|  10.4k|            seg_it != seg.end()) {
  241|  10.4k|            return ranges_polyfill::batch_next(
  242|  10.4k|                it, ranges::distance(seg.begin(), seg_it));
  243|  10.4k|        }
  244|       |
  245|  10.4k|        while (it != ranges::end(range)) {
  246|  10.4k|            const auto [iter, value] =
  247|  10.4k|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|  10.4k|            const auto cp = decode_code_point_exhaustive(value.view());
  249|  10.4k|            if (pred(cp)) {
  250|  10.4k|                return it;
  251|  10.4k|            }
  252|  10.4k|            it = iter;
  253|  10.4k|        }
  254|       |
  255|  10.4k|        return it;
  256|  10.4k|    }
  257|  10.4k|}
_ZN3scn2v24impl27read_until_code_point_eagerIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  177|  10.4k|{
  178|  10.4k|    static_assert(ranges::contiguous_range<Range> &&
  179|  10.4k|                  ranges::sized_range<Range>);
  180|       |
  181|  10.4k|    std::array<char32_t, 16> cp_buf{};
  182|  10.4k|    std::array<uint8_t, 16> idx_buf{};
  183|  10.4k|    auto it = ranges::begin(range);
  184|  11.5k|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 11.5k, False: 0]
  ------------------
  185|  11.5k|        auto chunk_begin = it;
  186|  11.5k|        size_t code_point_count = 0;
  187|  11.5k|        uint8_t code_unit_idx = 0;
  188|   125k|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 121k, False: 3.92k]
  |  Branch (188:52): [True: 114k, False: 7.61k]
  ------------------
  189|   114k|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 114k, False: 0]
  ------------------
  190|   114k|                idx_buf[code_point_count] = code_unit_idx;
  191|   114k|                ++code_point_count;
  192|   114k|            }
  193|   114k|            ++it;
  194|   114k|            ++code_unit_idx;
  195|   114k|        }
  196|       |
  197|  11.5k|        auto input = detail::make_string_view_from_pointers(
  198|  11.5k|            detail::to_address(chunk_begin), detail::to_address(it));
  199|  11.5k|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|  11.5k|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|  11.5k|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|  11.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 11.5k]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|  31.1k|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 30.0k, False: 1.06k]
  ------------------
  217|  30.0k|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 10.4k, False: 19.5k]
  ------------------
  218|  10.4k|                return chunk_begin + idx_buf[i];
  219|  10.4k|            }
  220|  30.0k|        }
  221|  11.5k|    }
  222|       |
  223|      0|    return it;
  224|  10.4k|}
_ZZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_ENKUlDiE_clEDi:
  323|  30.0k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  458|  4.33k|{
  459|  4.33k|    auto it = read_code_unit(range);
  460|  4.33k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  4.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.33k]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|  8.67k|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 8.67k, False: 4.33k]
  ------------------
  465|  8.67k|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 0, False: 8.67k]
  ------------------
  466|      0|            return *it;
  467|      0|        }
  468|  8.67k|    }
  469|       |
  470|  4.33k|    return unexpected(parse_error::error);
  471|  4.33k|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEOSH_OSJ_:
  481|  1.09k|{
  482|  1.09k|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 1.09k, False: 0]
  ------------------
  483|  1.09k|        return ranges::begin(range);
  484|  1.09k|    }
  485|      0|    return *result;
  486|  1.09k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  417|  10.6k|{
  418|  10.6k|    using char_type = detail::char_t<Range>;
  419|       |
  420|  10.6k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  10.6k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  10.6k|        if (ranges::size(range) < str.size()) {
  423|  10.6k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  10.6k|        }
  425|  10.6k|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|  10.6k|            return unexpected(parse_error::error);
  427|  10.6k|        }
  428|  10.6k|        return ranges::next(ranges::begin(range), str.size());
  429|  10.6k|    }
  430|  10.6k|    else {
  431|  10.6k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  10.6k|            if (ch < 'A' || ch > 'Z') {
  433|  10.6k|                return ch;
  434|  10.6k|            }
  435|  10.6k|            return static_cast<char_type>(ch +
  436|  10.6k|                                          static_cast<char_type>('a' - 'A'));
  437|  10.6k|        };
  438|       |
  439|  10.6k|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|  10.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  10.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 24, False: 10.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     24|    }                                                  \
  |  |  |  |   70|  10.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  10.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|  10.6k|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  10.6k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|  10.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 10.6k, False: 0]
  |  |  ------------------
  ------------------
  443|  10.6k|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  10.6k|                    return ascii_tolower(a) ==
  445|  10.6k|                           static_cast<detail::char_t<Range>>(b);
  446|  10.6k|                }))) {
  447|  10.6k|            return unexpected(parse_error::error);
  448|  10.6k|        }
  449|       |
  450|      0|        return it;
  451|  10.6k|    }
  452|  10.6k|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlwE_clEw:
  431|  10.6k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  10.6k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 60, False: 10.5k]
  |  Branch (432:29): [True: 10.5k, False: 0]
  ------------------
  433|  10.6k|                return ch;
  434|  10.6k|            }
  435|      0|            return static_cast<char_type>(ch +
  436|      0|                                          static_cast<char_type>('a' - 'A'));
  437|  10.6k|        };
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NDTcl4implISE_EEE4typeE:
  331|  4.33k|{
  332|  4.33k|    auto it = read_code_unit(range);
  333|  4.33k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  4.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.33k]
  |  |  ------------------
  ------------------
  334|      0|        return unexpected(make_eof_parse_error(it.error()));
  335|      0|    }
  336|       |
  337|  4.33k|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|  4.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.33k, False: 0]
  |  |  ------------------
  ------------------
  338|  4.33k|                     static_cast<detail::char_t<Range>>(ch))) {
  339|  4.33k|        return unexpected(parse_error::error);
  340|  4.33k|    }
  341|       |
  342|      0|    return *it;
  343|  4.33k|}
_ZN3scn2v24impl28read_matching_string_classicIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  378|  2.13k|{
  379|  2.13k|    SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|  2.13k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.13k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.13k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 234, False: 1.89k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    234|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    234|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    234|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    234|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    234|    }                                                  \
  |  |  |  |   70|  2.13k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.89k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  380|  1.89k|                    .transform_error(make_eof_parse_error));
  381|       |
  382|  1.89k|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (382:19): [Folded - Ignored]
  ------------------
  383|  1.89k|        auto sv =
  384|  1.89k|            make_contiguous_buffer(ranges::subrange{ranges::begin(range), it});
  385|  1.89k|        if (SCN_UNLIKELY(sv.view() != str)) {
  386|  1.89k|            return unexpected(parse_error::error);
  387|  1.89k|        }
  388|  1.89k|        return it;
  389|  1.89k|    }
  390|  1.89k|    else {
  391|  1.89k|        auto range_it = ranges::begin(range);
  392|  1.89k|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (392:28): [True: 1.89k, False: 0]
  ------------------
  393|  1.89k|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  153|  1.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.89k, False: 0]
  |  |  ------------------
  ------------------
  394|  1.89k|                             static_cast<detail::char_t<Range>>(str[i]))) {
  395|  1.89k|                return unexpected(parse_error::error);
  396|  1.89k|            }
  397|  1.89k|        }
  398|      0|        return it;
  399|  1.89k|    }
  400|  1.89k|}
_ZN3scn2v24impl21read_while1_code_unitIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEEEOSD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISL_E8functionEEE:
  158|     36|{
  159|     36|    auto it = read_while_code_unit(range, pred);
  160|     36|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 36, False: 0]
  ------------------
  161|     36|        return unexpected(parse_error::error);
  162|     36|    }
  163|      0|    return it;
  164|     36|}
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
  138|    192|{
  139|    192|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|    192|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|    192|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
  130|    342|{
  131|    342|    return ranges::find_if(range, pred);
  132|    342|}
_ZN3scn2v24impl24read_until_classic_spaceIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_:
  269|  3.19k|{
  270|  3.19k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (270:19): [Folded - Ignored]
  |  Branch (270:19): [Folded - Ignored]
  ------------------
  271|  3.19k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (271:19): [Folded - Ignored]
  ------------------
  272|  3.19k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (272:19): [Folded - Ignored]
  ------------------
  273|  3.19k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  274|  3.19k|        auto it = find_classic_space_narrow_fast(buf.view());
  275|  3.19k|        return ranges::next(ranges::begin(range),
  276|  3.19k|                            ranges::distance(buf.view().begin(), it));
  277|  3.19k|    }
  278|  3.19k|    else {
  279|  3.19k|        auto it = ranges::begin(range);
  280|       |
  281|  3.19k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (281:23): [Folded - Ignored]
  ------------------
  282|  3.19k|            auto seg = get_contiguous_beginning(range);
  283|  3.19k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
  284|  3.19k|                seg_it != seg.end()) {
  285|  3.19k|                return ranges_polyfill::batch_next(
  286|  3.19k|                    it, ranges::distance(seg.begin(), seg_it));
  287|  3.19k|            }
  288|  3.19k|            ranges_polyfill::batch_next(it, seg.size());
  289|  3.19k|        }
  290|       |
  291|  3.19k|        return read_until_code_point(
  292|  3.19k|            ranges::subrange{it, ranges::end(range)},
  293|  3.19k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  294|  3.19k|    }
  295|  3.19k|}
_ZN3scn2v24impl21read_until_code_pointIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_NS1_12function_refIFbDiESH_EE:
  230|   138k|{
  231|   138k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|   138k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|   138k|        return read_until_code_point_eager(SCN_FWD(range), pred);
  ------------------
  |  |  248|   138k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  234|   138k|    }
  235|   138k|    else {
  236|   138k|        auto it = ranges::begin(range);
  237|   138k|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|   138k|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|   138k|            seg_it != seg.end()) {
  241|   138k|            return ranges_polyfill::batch_next(
  242|   138k|                it, ranges::distance(seg.begin(), seg_it));
  243|   138k|        }
  244|       |
  245|   138k|        while (it != ranges::end(range)) {
  246|   138k|            const auto [iter, value] =
  247|   138k|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|   138k|            const auto cp = decode_code_point_exhaustive(value.view());
  249|   138k|            if (pred(cp)) {
  250|   138k|                return it;
  251|   138k|            }
  252|   138k|            it = iter;
  253|   138k|        }
  254|       |
  255|   138k|        return it;
  256|   138k|    }
  257|   138k|}
_ZN3scn2v24impl27read_until_code_point_eagerIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_NS1_12function_refIFbDiESH_EE:
  177|   138k|{
  178|   138k|    static_assert(ranges::contiguous_range<Range> &&
  179|   138k|                  ranges::sized_range<Range>);
  180|       |
  181|   138k|    std::array<char32_t, 16> cp_buf{};
  182|   138k|    std::array<uint8_t, 16> idx_buf{};
  183|   138k|    auto it = ranges::begin(range);
  184|   152k|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 148k, False: 3.34k]
  ------------------
  185|   148k|        auto chunk_begin = it;
  186|   148k|        size_t code_point_count = 0;
  187|   148k|        uint8_t code_unit_idx = 0;
  188|  2.39M|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 2.25M, False: 134k]
  |  Branch (188:52): [True: 2.24M, False: 14.3k]
  ------------------
  189|  2.24M|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 2.24M, False: 0]
  ------------------
  190|  2.24M|                idx_buf[code_point_count] = code_unit_idx;
  191|  2.24M|                ++code_point_count;
  192|  2.24M|            }
  193|  2.24M|            ++it;
  194|  2.24M|            ++code_unit_idx;
  195|  2.24M|        }
  196|       |
  197|   148k|        auto input = detail::make_string_view_from_pointers(
  198|   148k|            detail::to_address(chunk_begin), detail::to_address(it));
  199|   148k|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|   148k|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|   148k|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|   148k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 148k]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|   352k|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 338k, False: 14.1k]
  ------------------
  217|   338k|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 134k, False: 203k]
  ------------------
  218|   134k|                return chunk_begin + idx_buf[i];
  219|   134k|            }
  220|   338k|        }
  221|   148k|    }
  222|       |
  223|  3.34k|    return it;
  224|   138k|}
_ZZN3scn2v24impl24read_until_classic_spaceIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_ENKUlDiE_clEDi:
  293|   180k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl24read_while_classic_spaceIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_:
  299|   134k|{
  300|   134k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|   134k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|   134k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|   134k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|   134k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|   134k|        return ranges::next(ranges::begin(range),
  306|   134k|                            ranges::distance(buf.view().begin(), it));
  307|   134k|    }
  308|   134k|    else {
  309|   134k|        auto it = ranges::begin(range);
  310|       |
  311|   134k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|   134k|            auto seg = get_contiguous_beginning(range);
  313|   134k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|   134k|                seg_it != seg.end()) {
  315|   134k|                return ranges_polyfill::batch_next(
  316|   134k|                    it, ranges::distance(seg.begin(), seg_it));
  317|   134k|            }
  318|   134k|            ranges_polyfill::batch_next(it, seg.size());
  319|   134k|        }
  320|       |
  321|   134k|        return read_while_code_point(
  322|   134k|            SCN_FWD(range),
  ------------------
  |  |  248|   134k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|   134k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|   134k|    }
  325|   134k|}
_ZN3scn2v24impl21read_while_code_pointIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_NS1_12function_refIFbDiESH_EE:
  263|   134k|{
  264|   134k|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   134k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|   134k|}
_ZZN3scn2v24impl24read_while_classic_spaceIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_ENKUlDiE_clEDi:
  323|   157k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_one_of_code_unitIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NSt3__117basic_string_viewIcNSL_11char_traitsIcEEEE:
  458|    966|{
  459|    966|    auto it = read_code_unit(range);
  460|    966|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|    966|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 966]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|  1.93k|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 1.93k, False: 966]
  ------------------
  465|  1.93k|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 0, False: 1.93k]
  ------------------
  466|      0|            return *it;
  467|      0|        }
  468|  1.93k|    }
  469|       |
  470|    966|    return unexpected(parse_error::error);
  471|    966|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEE4typeEOSP_OSR_:
  481|    266|{
  482|    266|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 266, False: 0]
  ------------------
  483|    266|        return ranges::begin(range);
  484|    266|    }
  485|      0|    return *result;
  486|    266|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_NSt3__117basic_string_viewIcNSR_11char_traitsIcEEEE:
  417|  2.32k|{
  418|  2.32k|    using char_type = detail::char_t<Range>;
  419|       |
  420|  2.32k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  2.32k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  2.32k|        if (ranges::size(range) < str.size()) {
  423|  2.32k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  2.32k|        }
  425|  2.32k|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|  2.32k|            return unexpected(parse_error::error);
  427|  2.32k|        }
  428|  2.32k|        return ranges::next(ranges::begin(range), str.size());
  429|  2.32k|    }
  430|  2.32k|    else {
  431|  2.32k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  2.32k|            if (ch < 'A' || ch > 'Z') {
  433|  2.32k|                return ch;
  434|  2.32k|            }
  435|  2.32k|            return static_cast<char_type>(ch +
  436|  2.32k|                                          static_cast<char_type>('a' - 'A'));
  437|  2.32k|        };
  438|       |
  439|  2.32k|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|  2.32k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.32k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.32k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 162, False: 2.16k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    162|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    162|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    162|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    162|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    162|    }                                                  \
  |  |  |  |   70|  2.32k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|  2.16k|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  2.16k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|  2.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.16k, False: 0]
  |  |  ------------------
  ------------------
  443|  2.16k|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  2.16k|                    return ascii_tolower(a) ==
  445|  2.16k|                           static_cast<detail::char_t<Range>>(b);
  446|  2.16k|                }))) {
  447|  2.16k|            return unexpected(parse_error::error);
  448|  2.16k|        }
  449|       |
  450|      0|        return it;
  451|  2.16k|    }
  452|  2.32k|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_NSt3__117basic_string_viewIcNSR_11char_traitsIcEEEEENKUlwE_clEw:
  431|  2.16k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  2.16k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 8, False: 2.15k]
  |  Branch (432:29): [True: 2.15k, False: 0]
  ------------------
  433|  2.16k|                return ch;
  434|  2.16k|            }
  435|      0|            return static_cast<char_type>(ch +
  436|      0|                                          static_cast<char_type>('a' - 'A'));
  437|  2.16k|        };
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_NDTcl4implISM_EEE4typeE:
  331|    468|{
  332|    468|    auto it = read_code_unit(range);
  333|    468|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|    468|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 468]
  |  |  ------------------
  ------------------
  334|      0|        return unexpected(make_eof_parse_error(it.error()));
  335|      0|    }
  336|       |
  337|    468|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|    468|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 468, False: 0]
  |  |  ------------------
  ------------------
  338|    468|                     static_cast<detail::char_t<Range>>(ch))) {
  339|    468|        return unexpected(parse_error::error);
  340|    468|    }
  341|       |
  342|      0|    return *it;
  343|    468|}
_ZN3scn2v24impl21read_while1_code_unitIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_NS1_12function_refIFbNDTcl4implISM_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
  158|    724|{
  159|    724|    auto it = read_while_code_unit(range, pred);
  160|    724|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 724, False: 0]
  ------------------
  161|    724|        return unexpected(parse_error::error);
  162|    724|    }
  163|      0|    return it;
  164|    724|}
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
  138|    950|{
  139|    950|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|    950|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|    950|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
  130|    950|{
  131|    950|    return ranges::find_if(range, pred);
  132|    950|}
_ZN3scn2v24impl23read_matching_code_unitIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NDTcl4implISG_EEE4typeE:
  331|    500|{
  332|    500|    auto it = read_code_unit(range);
  333|    500|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|    500|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 500]
  |  |  ------------------
  ------------------
  334|      0|        return unexpected(make_eof_parse_error(it.error()));
  335|      0|    }
  336|       |
  337|    500|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|    500|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 500, False: 0]
  |  |  ------------------
  ------------------
  338|    500|                     static_cast<detail::char_t<Range>>(ch))) {
  339|    500|        return unexpected(parse_error::error);
  340|    500|    }
  341|       |
  342|      0|    return *it;
  343|    500|}
_ZN3scn2v24impl20read_matching_stringIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NSt3__117basic_string_viewINDTcl4implISG_EEE4typeENSL_11char_traitsISO_EEEE:
  362|     16|{
  363|     16|    SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10, False: 6]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     10|    }                                                  \
  |  |  |  |   70|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  364|      6|                    .transform_error(make_eof_parse_error));
  365|       |
  366|      6|    auto sv =
  367|      6|        make_contiguous_buffer(ranges::subrange{ranges::begin(range), it});
  368|      6|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  153|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6, False: 0]
  |  |  ------------------
  ------------------
  369|      6|        return unexpected(parse_error::error);
  370|      6|    }
  371|      0|    return it;
  372|      6|}
_ZN3scn2v24impl28read_matching_string_classicIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NSt3__117basic_string_viewIcNSL_11char_traitsIcEEEE:
  378|    432|{
  379|    432|    SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|    432|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    432|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    432|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    432|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 74, False: 358]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     74|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     74|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     74|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     74|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     74|    }                                                  \
  |  |  |  |   70|    432|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    358|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  380|    358|                    .transform_error(make_eof_parse_error));
  381|       |
  382|    358|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (382:19): [Folded - Ignored]
  ------------------
  383|    358|        auto sv =
  384|    358|            make_contiguous_buffer(ranges::subrange{ranges::begin(range), it});
  385|    358|        if (SCN_UNLIKELY(sv.view() != str)) {
  386|    358|            return unexpected(parse_error::error);
  387|    358|        }
  388|    358|        return it;
  389|    358|    }
  390|    358|    else {
  391|    358|        auto range_it = ranges::begin(range);
  392|    358|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (392:28): [True: 358, False: 0]
  ------------------
  393|    358|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  153|    358|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 358, False: 0]
  |  |  ------------------
  ------------------
  394|    358|                             static_cast<detail::char_t<Range>>(str[i]))) {
  395|    358|                return unexpected(parse_error::error);
  396|    358|            }
  397|    358|        }
  398|      0|        return it;
  399|    358|    }
  400|    358|}
_ZN3scn2v24impl20read_matching_stringIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewINDTcl4implISE_EEE4typeENSJ_11char_traitsISM_EEEE:
  362|     20|{
  363|     20|    SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2, False: 18]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      2|    }                                                  \
  |  |  |  |   70|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|     18|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  364|     18|                    .transform_error(make_eof_parse_error));
  365|       |
  366|     18|    auto sv =
  367|     18|        make_contiguous_buffer(ranges::subrange{ranges::begin(range), it});
  368|     18|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  153|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 18, False: 0]
  |  |  ------------------
  ------------------
  369|     18|        return unexpected(parse_error::error);
  370|     18|    }
  371|      0|    return it;
  372|     18|}
_ZN3scn2v24impl21read_while1_code_unitIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEE:
  158|    226|{
  159|    226|    auto it = read_while_code_unit(range, pred);
  160|    226|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 226, False: 0]
  ------------------
  161|    226|        return unexpected(parse_error::error);
  162|    226|    }
  163|      0|    return it;
  164|    226|}
_ZN3scn2v24impl24read_until_classic_spaceIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEOSF_:
  269|    648|{
  270|    648|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (270:19): [Folded - Ignored]
  |  Branch (270:19): [Folded - Ignored]
  ------------------
  271|    648|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (271:19): [Folded - Ignored]
  ------------------
  272|    648|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (272:19): [Folded - Ignored]
  ------------------
  273|    648|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  274|    648|        auto it = find_classic_space_narrow_fast(buf.view());
  275|    648|        return ranges::next(ranges::begin(range),
  276|    648|                            ranges::distance(buf.view().begin(), it));
  277|    648|    }
  278|    648|    else {
  279|    648|        auto it = ranges::begin(range);
  280|       |
  281|    648|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (281:23): [Folded - Ignored]
  ------------------
  282|    648|            auto seg = get_contiguous_beginning(range);
  283|    648|            if (auto seg_it = find_classic_space_narrow_fast(seg);
  284|    648|                seg_it != seg.end()) {
  285|    648|                return ranges_polyfill::batch_next(
  286|    648|                    it, ranges::distance(seg.begin(), seg_it));
  287|    648|            }
  288|    648|            ranges_polyfill::batch_next(it, seg.size());
  289|    648|        }
  290|       |
  291|    648|        return read_until_code_point(
  292|    648|            ranges::subrange{it, ranges::end(range)},
  293|    648|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  294|    648|    }
  295|    648|}
_ZN3scn2v24impl21read_until_code_pointIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEOSK_NS1_12function_refIFbDiESP_EE:
  230|    648|{
  231|    648|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|    648|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|    648|        return read_until_code_point_eager(SCN_FWD(range), pred);
  234|    648|    }
  235|    648|    else {
  236|    648|        auto it = ranges::begin(range);
  237|    648|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|    648|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|    648|            seg_it != seg.end()) {
  ------------------
  |  Branch (240:13): [True: 0, False: 648]
  ------------------
  241|      0|            return ranges_polyfill::batch_next(
  242|      0|                it, ranges::distance(seg.begin(), seg_it));
  243|      0|        }
  244|       |
  245|  10.4k|        while (it != ranges::end(range)) {
  ------------------
  |  Branch (245:16): [True: 9.84k, False: 558]
  ------------------
  246|  9.84k|            const auto [iter, value] =
  247|  9.84k|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|  9.84k|            const auto cp = decode_code_point_exhaustive(value.view());
  249|  9.84k|            if (pred(cp)) {
  ------------------
  |  Branch (249:17): [True: 90, False: 9.75k]
  ------------------
  250|     90|                return it;
  251|     90|            }
  252|  9.75k|            it = iter;
  253|  9.75k|        }
  254|       |
  255|    558|        return it;
  256|    648|    }
  257|    648|}
_ZN3scn2v24impl27read_until_code_point_eagerIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_NS1_12function_refIFbDiESF_EE:
  177|    942|{
  178|    942|    static_assert(ranges::contiguous_range<Range> &&
  179|    942|                  ranges::sized_range<Range>);
  180|       |
  181|    942|    std::array<char32_t, 16> cp_buf{};
  182|    942|    std::array<uint8_t, 16> idx_buf{};
  183|    942|    auto it = ranges::begin(range);
  184|    942|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 0, False: 942]
  ------------------
  185|      0|        auto chunk_begin = it;
  186|      0|        size_t code_point_count = 0;
  187|      0|        uint8_t code_unit_idx = 0;
  188|      0|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 0, False: 0]
  |  Branch (188:52): [True: 0, False: 0]
  ------------------
  189|      0|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 0, False: 0]
  ------------------
  190|      0|                idx_buf[code_point_count] = code_unit_idx;
  191|      0|                ++code_point_count;
  192|      0|            }
  193|      0|            ++it;
  194|      0|            ++code_unit_idx;
  195|      0|        }
  196|       |
  197|      0|        auto input = detail::make_string_view_from_pointers(
  198|      0|            detail::to_address(chunk_begin), detail::to_address(it));
  199|      0|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|      0|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|      0|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|      0|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 0, False: 0]
  ------------------
  217|      0|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 0, False: 0]
  ------------------
  218|      0|                return chunk_begin + idx_buf[i];
  219|      0|            }
  220|      0|        }
  221|      0|    }
  222|       |
  223|    942|    return it;
  224|    942|}
_ZN3scn2v24impl20read_code_point_intoIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS1_21iterator_value_resultINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeENS1_24contiguous_range_factoryINDTcl4implISL_EEE4typeEEEEEOSL_:
   41|  21.7k|{
   42|  21.7k|    SCN_EXPECT(ranges::begin(range) != ranges::end(range));
  ------------------
  |  |  242|  21.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  21.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   43|       |
   44|      0|    auto it = ranges::begin(range);
   45|  21.7k|    const auto len = code_point_length_by_starting_code_unit(*it);
   46|       |
   47|  21.7k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|  21.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 21.7k]
  |  |  ------------------
  ------------------
   48|      0|        for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (48:16): [True: 0, False: 0]
  ------------------
   49|      0|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (49:17): [True: 0, False: 0]
  ------------------
   50|      0|                break;
   51|      0|            }
   52|      0|        }
   53|       |
   54|      0|        return {it, make_contiguous_buffer(
   55|      0|                        ranges::subrange{ranges::begin(range), it})};
   56|      0|    }
   57|       |
   58|  21.7k|    if (len == 1) {
  ------------------
  |  Branch (58:9): [True: 21.7k, False: 0]
  ------------------
   59|  21.7k|        ++it;
   60|  21.7k|        return {it, make_contiguous_buffer(
   61|  21.7k|                        ranges::subrange{ranges::begin(range), it})};
   62|  21.7k|    }
   63|       |
   64|      0|    ranges::advance(it, static_cast<ranges::range_difference_t<Range>>(len),
   65|      0|                    ranges::end(range));
   66|      0|    return {it,
   67|      0|            make_contiguous_buffer(ranges::subrange{ranges::begin(range), it})};
   68|  21.7k|}
_ZZN3scn2v24impl24read_until_classic_spaceIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEOSF_ENKUlDiE_clEDi:
  293|  9.84k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_until_code_pointIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEOSF_NS1_12function_refIFbDiESK_EE:
  230|    294|{
  231|    294|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|    294|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|    294|        return read_until_code_point_eager(SCN_FWD(range), pred);
  234|    294|    }
  235|    294|    else {
  236|    294|        auto it = ranges::begin(range);
  237|    294|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|    294|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|    294|            seg_it != seg.end()) {
  ------------------
  |  Branch (240:13): [True: 0, False: 294]
  ------------------
  241|      0|            return ranges_polyfill::batch_next(
  242|      0|                it, ranges::distance(seg.begin(), seg_it));
  243|      0|        }
  244|       |
  245|  11.9k|        while (it != ranges::end(range)) {
  ------------------
  |  Branch (245:16): [True: 11.9k, False: 48]
  ------------------
  246|  11.9k|            const auto [iter, value] =
  247|  11.9k|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|  11.9k|            const auto cp = decode_code_point_exhaustive(value.view());
  249|  11.9k|            if (pred(cp)) {
  ------------------
  |  Branch (249:17): [True: 246, False: 11.7k]
  ------------------
  250|    246|                return it;
  251|    246|            }
  252|  11.7k|            it = iter;
  253|  11.7k|        }
  254|       |
  255|     48|        return it;
  256|    294|    }
  257|    294|}
_ZN3scn2v24impl21read_while_code_pointIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEOSF_NS1_12function_refIFbDiESK_EE:
  263|    168|{
  264|    168|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|    168|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|    168|}
_ZN3scn2v24impl20read_until_code_unitIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEOSF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
  130|    138|{
  131|    138|    return ranges::find_if(range, pred);
  132|    138|}
_ZN3scn2v24impl20read_while_code_unitIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEOSF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
  138|     60|{
  139|     60|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|     60|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|     60|}
_ZN3scn2v24impl21read_until_code_pointIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_NS1_12function_refIFbDiESI_EE:
  230|  2.23k|{
  231|  2.23k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|  2.23k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|  2.23k|        return read_until_code_point_eager(SCN_FWD(range), pred);
  ------------------
  |  |  248|  2.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  234|  2.23k|    }
  235|  2.23k|    else {
  236|  2.23k|        auto it = ranges::begin(range);
  237|  2.23k|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|  2.23k|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|  2.23k|            seg_it != seg.end()) {
  241|  2.23k|            return ranges_polyfill::batch_next(
  242|  2.23k|                it, ranges::distance(seg.begin(), seg_it));
  243|  2.23k|        }
  244|       |
  245|  2.23k|        while (it != ranges::end(range)) {
  246|  2.23k|            const auto [iter, value] =
  247|  2.23k|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|  2.23k|            const auto cp = decode_code_point_exhaustive(value.view());
  249|  2.23k|            if (pred(cp)) {
  250|  2.23k|                return it;
  251|  2.23k|            }
  252|  2.23k|            it = iter;
  253|  2.23k|        }
  254|       |
  255|  2.23k|        return it;
  256|  2.23k|    }
  257|  2.23k|}
_ZN3scn2v24impl27read_until_code_point_eagerIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_NS1_12function_refIFbDiESI_EE:
  177|  2.23k|{
  178|  2.23k|    static_assert(ranges::contiguous_range<Range> &&
  179|  2.23k|                  ranges::sized_range<Range>);
  180|       |
  181|  2.23k|    std::array<char32_t, 16> cp_buf{};
  182|  2.23k|    std::array<uint8_t, 16> idx_buf{};
  183|  2.23k|    auto it = ranges::begin(range);
  184|  45.5k|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 45.4k, False: 150]
  ------------------
  185|  45.4k|        auto chunk_begin = it;
  186|  45.4k|        size_t code_point_count = 0;
  187|  45.4k|        uint8_t code_unit_idx = 0;
  188|   763k|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 719k, False: 44.1k]
  |  Branch (188:52): [True: 718k, False: 1.22k]
  ------------------
  189|   718k|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 718k, False: 0]
  ------------------
  190|   718k|                idx_buf[code_point_count] = code_unit_idx;
  191|   718k|                ++code_point_count;
  192|   718k|            }
  193|   718k|            ++it;
  194|   718k|            ++code_unit_idx;
  195|   718k|        }
  196|       |
  197|  45.4k|        auto input = detail::make_string_view_from_pointers(
  198|  45.4k|            detail::to_address(chunk_begin), detail::to_address(it));
  199|  45.4k|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|  45.4k|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|  45.4k|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|  45.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 45.4k]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|   746k|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 703k, False: 43.3k]
  ------------------
  217|   703k|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 2.08k, False: 701k]
  ------------------
  218|  2.08k|                return chunk_begin + idx_buf[i];
  219|  2.08k|            }
  220|   703k|        }
  221|  45.4k|    }
  222|       |
  223|    150|    return it;
  224|  2.23k|}
_ZN3scn2v24impl21read_while_code_pointIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_NS1_12function_refIFbDiESI_EE:
  263|  1.90k|{
  264|  1.90k|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|  1.90k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|  1.90k|}

_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   35|  12.2k|{
   36|  12.2k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  12.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 12.2k]
  |  |  ------------------
  ------------------
   37|      0|        return unexpected(e);
   38|      0|    }
   39|       |
   40|  12.2k|    return ranges::next(ranges::begin(range));
   41|  12.2k|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__19enable_ifIX5rangeISE_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeE:
   47|  2.66k|{
   48|  2.66k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|  2.66k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.66k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|  2.66k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|  2.66k|        const auto sz = ranges::ssize(range);
   52|  2.66k|        if (sz < count) {
  ------------------
  |  Branch (52:13): [True: 156, False: 2.51k]
  ------------------
   53|    156|            return unexpected(eof_error::eof);
   54|    156|        }
   55|       |
   56|  2.51k|        return ranges::next(ranges::begin(range), count);
   57|  2.66k|    }
   58|  2.66k|    else {
   59|  2.66k|        auto it = ranges::begin(range);
   60|  2.66k|        if (guaranteed_minimum_size(range) >= count) {
   61|  2.66k|            return ranges_polyfill::batch_next(it, count);
   62|  2.66k|        }
   63|       |
   64|  2.66k|        for (ranges::range_difference_t<Range> i = 0; i < count;
   65|  2.66k|             ++i, (void)++it) {
   66|  2.66k|            if (it == ranges::end(range)) {
   67|  2.66k|                return unexpected(eof_error::eof);
   68|  2.66k|            }
   69|  2.66k|        }
   70|       |
   71|  2.66k|        return it;
   72|  2.66k|    }
   73|  2.66k|}
_ZN3scn2v24impl8read_allIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_:
   29|  1.29k|{
   30|  1.29k|    return ranges::next(ranges::begin(range), ranges::end(range));
   31|  1.29k|}
_ZN3scn2v24impl14read_code_unitIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
   35|  2.07k|{
   36|  2.07k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  2.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.07k]
  |  |  ------------------
  ------------------
   37|      0|        return unexpected(e);
   38|      0|    }
   39|       |
   40|  2.07k|    return ranges::next(ranges::begin(range));
   41|  2.07k|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEEEOSD_NSt3__19enable_ifIX5rangeISD_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeE:
   47|  11.4k|{
   48|  11.4k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|  11.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  11.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|  11.4k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|  11.4k|        const auto sz = ranges::ssize(range);
   52|  11.4k|        if (sz < count) {
  ------------------
  |  Branch (52:13): [True: 228, False: 11.2k]
  ------------------
   53|    228|            return unexpected(eof_error::eof);
   54|    228|        }
   55|       |
   56|  11.2k|        return ranges::next(ranges::begin(range), count);
   57|  11.4k|    }
   58|  11.4k|    else {
   59|  11.4k|        auto it = ranges::begin(range);
   60|  11.4k|        if (guaranteed_minimum_size(range) >= count) {
   61|  11.4k|            return ranges_polyfill::batch_next(it, count);
   62|  11.4k|        }
   63|       |
   64|  11.4k|        for (ranges::range_difference_t<Range> i = 0; i < count;
   65|  11.4k|             ++i, (void)++it) {
   66|  11.4k|            if (it == ranges::end(range)) {
   67|  11.4k|                return unexpected(eof_error::eof);
   68|  11.4k|            }
   69|  11.4k|        }
   70|       |
   71|  11.4k|        return it;
   72|  11.4k|    }
   73|  11.4k|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_NSt3__19enable_ifIX5rangeISM_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSM_EEEEE15difference_typeEE4typeE:
   47|  2.89k|{
   48|  2.89k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|  2.89k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.89k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|  2.89k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|  2.89k|        const auto sz = ranges::ssize(range);
   52|  2.89k|        if (sz < count) {
   53|  2.89k|            return unexpected(eof_error::eof);
   54|  2.89k|        }
   55|       |
   56|  2.89k|        return ranges::next(ranges::begin(range), count);
   57|  2.89k|    }
   58|  2.89k|    else {
   59|  2.89k|        auto it = ranges::begin(range);
   60|  2.89k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (60:13): [True: 0, False: 2.89k]
  ------------------
   61|      0|            return ranges_polyfill::batch_next(it, count);
   62|      0|        }
   63|       |
   64|  9.08k|        for (ranges::range_difference_t<Range> i = 0; i < count;
  ------------------
  |  Branch (64:55): [True: 6.33k, False: 2.75k]
  ------------------
   65|  6.33k|             ++i, (void)++it) {
   66|  6.33k|            if (it == ranges::end(range)) {
  ------------------
  |  Branch (66:17): [True: 138, False: 6.19k]
  ------------------
   67|    138|                return unexpected(eof_error::eof);
   68|    138|            }
   69|  6.33k|        }
   70|       |
   71|  2.75k|        return it;
   72|  2.89k|    }
   73|  2.89k|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_:
   35|    580|{
   36|    580|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    580|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 580]
  |  |  ------------------
  ------------------
   37|      0|        return unexpected(e);
   38|      0|    }
   39|       |
   40|    580|    return ranges::next(ranges::begin(range));
   41|    580|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NSt3__19enable_ifIX5rangeISG_EENS5_20incrementable_traitsIDTclL_ZNS5_16function_objects5beginEEclsr3stdE7declvalIRSG_EEEEE15difference_typeEE4typeE:
   47|    564|{
   48|    564|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|    564|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    564|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|    564|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|    564|        const auto sz = ranges::ssize(range);
   52|    564|        if (sz < count) {
   53|    564|            return unexpected(eof_error::eof);
   54|    564|        }
   55|       |
   56|    564|        return ranges::next(ranges::begin(range), count);
   57|    564|    }
   58|    564|    else {
   59|    564|        auto it = ranges::begin(range);
   60|    564|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (60:13): [True: 0, False: 564]
  ------------------
   61|      0|            return ranges_polyfill::batch_next(it, count);
   62|      0|        }
   63|       |
   64|  2.96k|        for (ranges::range_difference_t<Range> i = 0; i < count;
  ------------------
  |  Branch (64:55): [True: 2.45k, False: 502]
  ------------------
   65|  2.45k|             ++i, (void)++it) {
   66|  2.45k|            if (it == ranges::end(range)) {
  ------------------
  |  Branch (66:17): [True: 62, False: 2.39k]
  ------------------
   67|     62|                return unexpected(eof_error::eof);
   68|     62|            }
   69|  2.45k|        }
   70|       |
   71|    502|        return it;
   72|    564|    }
   73|    564|}
_ZN3scn2v24impl8read_allIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEOSF_:
   29|    306|{
   30|    306|    return ranges::next(ranges::begin(range), ranges::end(range));
   31|    306|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   35|  9.68k|{
   36|  9.68k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  9.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 9.68k]
  |  |  ------------------
  ------------------
   37|      0|        return unexpected(e);
   38|      0|    }
   39|       |
   40|  9.68k|    return ranges::next(ranges::begin(range));
   41|  9.68k|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__19enable_ifIX5rangeISE_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeE:
   47|  12.8k|{
   48|  12.8k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|  12.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  12.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|  12.8k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|  12.8k|        const auto sz = ranges::ssize(range);
   52|  12.8k|        if (sz < count) {
  ------------------
  |  Branch (52:13): [True: 260, False: 12.5k]
  ------------------
   53|    260|            return unexpected(eof_error::eof);
   54|    260|        }
   55|       |
   56|  12.5k|        return ranges::next(ranges::begin(range), count);
   57|  12.8k|    }
   58|  12.8k|    else {
   59|  12.8k|        auto it = ranges::begin(range);
   60|  12.8k|        if (guaranteed_minimum_size(range) >= count) {
   61|  12.8k|            return ranges_polyfill::batch_next(it, count);
   62|  12.8k|        }
   63|       |
   64|  12.8k|        for (ranges::range_difference_t<Range> i = 0; i < count;
   65|  12.8k|             ++i, (void)++it) {
   66|  12.8k|            if (it == ranges::end(range)) {
   67|  12.8k|                return unexpected(eof_error::eof);
   68|  12.8k|            }
   69|  12.8k|        }
   70|       |
   71|  12.8k|        return it;
   72|  12.8k|    }
   73|  12.8k|}
_ZN3scn2v24impl8read_allIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_:
   29|  1.04k|{
   30|  1.04k|    return ranges::next(ranges::begin(range), ranges::end(range));
   31|  1.04k|}
_ZN3scn2v24impl14read_code_unitIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
   35|  1.68k|{
   36|  1.68k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.68k]
  |  |  ------------------
  ------------------
   37|      0|        return unexpected(e);
   38|      0|    }
   39|       |
   40|  1.68k|    return ranges::next(ranges::begin(range));
   41|  1.68k|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_NSt3__19enable_ifIX5rangeISM_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSM_EEEEE15difference_typeEE4typeE:
   47|  2.32k|{
   48|  2.32k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|  2.32k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.32k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|  2.32k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|  2.32k|        const auto sz = ranges::ssize(range);
   52|  2.32k|        if (sz < count) {
   53|  2.32k|            return unexpected(eof_error::eof);
   54|  2.32k|        }
   55|       |
   56|  2.32k|        return ranges::next(ranges::begin(range), count);
   57|  2.32k|    }
   58|  2.32k|    else {
   59|  2.32k|        auto it = ranges::begin(range);
   60|  2.32k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (60:13): [True: 0, False: 2.32k]
  ------------------
   61|      0|            return ranges_polyfill::batch_next(it, count);
   62|      0|        }
   63|       |
   64|  7.24k|        for (ranges::range_difference_t<Range> i = 0; i < count;
  ------------------
  |  Branch (64:55): [True: 5.08k, False: 2.16k]
  ------------------
   65|  5.08k|             ++i, (void)++it) {
   66|  5.08k|            if (it == ranges::end(range)) {
  ------------------
  |  Branch (66:17): [True: 162, False: 4.91k]
  ------------------
   67|    162|                return unexpected(eof_error::eof);
   68|    162|            }
   69|  5.08k|        }
   70|       |
   71|  2.16k|        return it;
   72|  2.32k|    }
   73|  2.32k|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_:
   35|    468|{
   36|    468|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    468|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 468]
  |  |  ------------------
  ------------------
   37|      0|        return unexpected(e);
   38|      0|    }
   39|       |
   40|    468|    return ranges::next(ranges::begin(range));
   41|    468|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NSt3__19enable_ifIX5rangeISG_EENS5_20incrementable_traitsIDTclL_ZNS5_16function_objects5beginEEclsr3stdE7declvalIRSG_EEEEE15difference_typeEE4typeE:
   47|    448|{
   48|    448|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|    448|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    448|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|    448|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|    448|        const auto sz = ranges::ssize(range);
   52|    448|        if (sz < count) {
   53|    448|            return unexpected(eof_error::eof);
   54|    448|        }
   55|       |
   56|    448|        return ranges::next(ranges::begin(range), count);
   57|    448|    }
   58|    448|    else {
   59|    448|        auto it = ranges::begin(range);
   60|    448|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (60:13): [True: 0, False: 448]
  ------------------
   61|      0|            return ranges_polyfill::batch_next(it, count);
   62|      0|        }
   63|       |
   64|  2.28k|        for (ranges::range_difference_t<Range> i = 0; i < count;
  ------------------
  |  Branch (64:55): [True: 1.91k, False: 364]
  ------------------
   65|  1.91k|             ++i, (void)++it) {
   66|  1.91k|            if (it == ranges::end(range)) {
  ------------------
  |  Branch (66:17): [True: 84, False: 1.83k]
  ------------------
   67|     84|                return unexpected(eof_error::eof);
   68|     84|            }
   69|  1.91k|        }
   70|       |
   71|    364|        return it;
   72|    448|    }
   73|    448|}
_ZN3scn2v24impl8read_allIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEOSF_:
   29|    222|{
   30|    222|    return ranges::next(ranges::begin(range), ranges::end(range));
   31|    222|}

_ZNK3scn2v24impl15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEE5beginISA_Li0EEEDav:
  485|  13.9k|    {
  486|  13.9k|        return counted_width_iterator{ranges::begin(m_base),
  487|  13.9k|                                      ranges::end(m_base), m_count};
  488|  13.9k|    }
_ZN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EC2ES5_S5_l:
   53|  13.9k|    {
   54|  13.9k|    }
_ZNK3scn2v24impl15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEE3endISA_Li0EEEDav:
  500|  53.2k|    {
  501|  53.2k|        return sentinel<true>{ranges::end(m_base)};
  502|  53.2k|    }
_ZN3scn2v24impl15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEE8sentinelILb1EEC2ES8_:
  415|  53.2k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EppEv:
  106|   364k|    {
  107|   364k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  242|   364k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   364k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  108|      0|        _increment_current();
  109|   364k|        return *this;
  110|   364k|    }
_ZN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E18_increment_currentEv:
  360|   364k|    {
  361|   364k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (361:13): [True: 97.2k, False: 267k]
  ------------------
  362|  97.2k|            auto cplen = _get_cp_length_at_current();
  363|  97.2k|            m_multibyte_left = cplen - 1;
  364|  97.2k|            m_count -= _get_width_at_current_cp_start(cplen);
  365|  97.2k|        }
  366|   267k|        else {
  367|   267k|            --m_multibyte_left;
  368|   267k|        }
  369|       |
  370|   364k|        ++m_current;
  371|   364k|    }
_ZNK3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E25_get_cp_length_at_currentEv:
  327|  97.2k|    {
  328|  97.2k|        return static_cast<difference_type>(
  329|  97.2k|            code_point_length_by_starting_code_unit(*m_current));
  330|  97.2k|    }
_ZNK3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E30_get_width_at_current_cp_startEl:
  333|  97.2k|    {
  334|  97.2k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  153|  97.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.26k, False: 95.9k]
  |  |  ------------------
  ------------------
  335|  1.26k|            return 0;
  336|  1.26k|        }
  337|       |
  338|  95.9k|        if (cplen == 1) {
  ------------------
  |  Branch (338:13): [True: 84.5k, False: 11.4k]
  ------------------
  339|  84.5k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  242|  84.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  84.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  340|      0|            auto cp = static_cast<char32_t>(*m_current);
  341|  84.5k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
  342|  84.5k|        }
  343|       |
  344|  11.4k|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
  345|  11.4k|                                           cplen);
  346|  11.4k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  11.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 228, False: 11.2k]
  |  |  ------------------
  ------------------
  347|    228|            return 0;
  348|    228|        }
  349|       |
  350|  11.2k|        auto cp_view = make_contiguous_buffer(ranges::subrange{m_current, *r});
  351|  11.2k|        if (SCN_UNLIKELY(!validate_unicode(cp_view.view()))) {
  ------------------
  |  |  153|  11.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.54k, False: 6.66k]
  |  |  ------------------
  ------------------
  352|  4.54k|            return 0;
  353|  4.54k|        }
  354|       |
  355|  6.66k|        return static_cast<difference_type>(
  356|  6.66k|            calculate_valid_text_width(cp_view.view()));
  357|  11.2k|    }
_ZN3scn2v24impl27counted_width_iterator_implneIPKcS5_EENSt3__19enable_ifIXsr10ranges_stdE11common_withIT_S5_EEbE4typeERKNS2_22counted_width_iteratorIS5_S5_EERKNSB_IS8_T0_EE:
  202|   259k|    {
  203|   259k|        return !(a == b);
  204|   259k|    }
_ZN3scn2v24impl27counted_width_iterator_impleqIPKcS5_EENSt3__19enable_ifIXsr10ranges_stdE11common_withIT_S5_EEbE4typeERKNS2_22counted_width_iteratorIS5_S5_EERKNSB_IS8_T0_EE:
  194|   260k|    {
  195|   260k|        return a.m_current == b.m_current;
  196|   260k|    }
_ZN3scn2v24impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEEE8sentinelILb1EEE:
  435|   216k|        {
  436|   216k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (436:21): [True: 778, False: 215k]
  |  Branch (436:39): [True: 506, False: 272]
  ------------------
  437|   216k|                   y.base() == x.m_end;
  ------------------
  |  Branch (437:20): [True: 1.19k, False: 214k]
  ------------------
  438|   216k|        }
_ZNK3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E5countEv:
   88|   216k|    {
   89|   216k|        return m_count;
   90|   216k|    }
_ZNK3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E14multibyte_leftEv:
   92|    778|    {
   93|    778|        return m_multibyte_left;
   94|    778|    }
_ZN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
   97|   340k|    {
   98|   340k|        return *m_current;
   99|   340k|    }
_ZN3scn2v24implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEEE8sentinelILb1EEE:
  446|   203k|        {
  447|   203k|            return !(y == x);
  448|   203k|        }
_ZNK3scn2v24impl14_take_width_fnclIRN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEERKiEEDTtlNS1_15take_width_viewEscDtfp_Efp_scDtfp0_Efp0_EEOT_OT0_:
  546|  3.71k|    {
  547|  3.71k|        return take_width_view{SCN_FWD(r), SCN_FWD(n)};
  ------------------
  |  |  248|  3.71k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                      return take_width_view{SCN_FWD(r), SCN_FWD(n)};
  ------------------
  |  |  248|  3.71k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  548|  3.71k|    }
_ZN3scn2v24impl15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEC2ESA_l:
  466|  3.71k|    {
  467|  3.71k|    }
_ZNK3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E4baseEv:
   84|   218k|    {
   85|   218k|        return m_current;
   86|   218k|    }
_ZNK3scn2v24impl15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEE5beginISA_Li0EEEDav:
  485|  10.7k|    {
  486|  10.7k|        return counted_width_iterator{ranges::begin(m_base),
  487|  10.7k|                                      ranges::end(m_base), m_count};
  488|  10.7k|    }
_ZN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EC2ES5_S5_l:
   53|  10.7k|    {
   54|  10.7k|    }
_ZNK3scn2v24impl15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEE3endISA_Li0EEEDav:
  500|  30.9k|    {
  501|  30.9k|        return sentinel<true>{ranges::end(m_base)};
  502|  30.9k|    }
_ZN3scn2v24impl15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEE8sentinelILb1EEC2ES8_:
  415|  30.9k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EppEv:
  106|  80.3k|    {
  107|  80.3k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  242|  80.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  80.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  108|      0|        _increment_current();
  109|  80.3k|        return *this;
  110|  80.3k|    }
_ZN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E18_increment_currentEv:
  360|  80.3k|    {
  361|  80.3k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (361:13): [True: 80.3k, False: 0]
  ------------------
  362|  80.3k|            auto cplen = _get_cp_length_at_current();
  363|  80.3k|            m_multibyte_left = cplen - 1;
  364|  80.3k|            m_count -= _get_width_at_current_cp_start(cplen);
  365|  80.3k|        }
  366|      0|        else {
  367|      0|            --m_multibyte_left;
  368|      0|        }
  369|       |
  370|  80.3k|        ++m_current;
  371|  80.3k|    }
_ZNK3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E25_get_cp_length_at_currentEv:
  327|  80.3k|    {
  328|  80.3k|        return static_cast<difference_type>(
  329|  80.3k|            code_point_length_by_starting_code_unit(*m_current));
  330|  80.3k|    }
_ZNK3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E30_get_width_at_current_cp_startEl:
  333|  80.3k|    {
  334|  80.3k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  153|  80.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 80.3k]
  |  |  ------------------
  ------------------
  335|      0|            return 0;
  336|      0|        }
  337|       |
  338|  80.3k|        if (cplen == 1) {
  ------------------
  |  Branch (338:13): [True: 80.3k, False: 0]
  ------------------
  339|  80.3k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  242|  80.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  80.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  340|      0|            auto cp = static_cast<char32_t>(*m_current);
  341|  80.3k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
  342|  80.3k|        }
  343|       |
  344|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
  345|      0|                                           cplen);
  346|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  347|      0|            return 0;
  348|      0|        }
  349|       |
  350|      0|        auto cp_view = make_contiguous_buffer(ranges::subrange{m_current, *r});
  351|      0|        if (SCN_UNLIKELY(!validate_unicode(cp_view.view()))) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  352|      0|            return 0;
  353|      0|        }
  354|       |
  355|      0|        return static_cast<difference_type>(
  356|      0|            calculate_valid_text_width(cp_view.view()));
  357|      0|    }
_ZN3scn2v24impl27counted_width_iterator_implneIPKwS5_EENSt3__19enable_ifIXsr10ranges_stdE11common_withIT_S5_EEbE4typeERKNS2_22counted_width_iteratorIS5_S5_EERKNSB_IS8_T0_EE:
  202|  66.3k|    {
  203|  66.3k|        return !(a == b);
  204|  66.3k|    }
_ZN3scn2v24impl27counted_width_iterator_impleqIPKwS5_EENSt3__19enable_ifIXsr10ranges_stdE11common_withIT_S5_EEbE4typeERKNS2_22counted_width_iteratorIS5_S5_EERKNSB_IS8_T0_EE:
  194|  67.7k|    {
  195|  67.7k|        return a.m_current == b.m_current;
  196|  67.7k|    }
_ZN3scn2v24impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEEE8sentinelILb1EEE:
  435|  63.5k|        {
  436|  63.5k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (436:21): [True: 524, False: 62.9k]
  |  Branch (436:39): [True: 524, False: 0]
  ------------------
  437|  63.5k|                   y.base() == x.m_end;
  ------------------
  |  Branch (437:20): [True: 604, False: 62.3k]
  ------------------
  438|  63.5k|        }
_ZNK3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E5countEv:
   88|  63.5k|    {
   89|  63.5k|        return m_count;
   90|  63.5k|    }
_ZNK3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E14multibyte_leftEv:
   92|    524|    {
   93|    524|        return m_multibyte_left;
   94|    524|    }
_ZN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EdeEv:
   97|  72.5k|    {
   98|  72.5k|        return *m_current;
   99|  72.5k|    }
_ZN3scn2v24implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEEE8sentinelILb1EEE:
  446|  53.6k|        {
  447|  53.6k|            return !(y == x);
  448|  53.6k|        }
_ZNK3scn2v24impl14_take_width_fnclIRN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEERKiEEDTtlNS1_15take_width_viewEscDtfp_Efp_scDtfp0_Efp0_EEOT_OT0_:
  546|  2.82k|    {
  547|  2.82k|        return take_width_view{SCN_FWD(r), SCN_FWD(n)};
  ------------------
  |  |  248|  2.82k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                      return take_width_view{SCN_FWD(r), SCN_FWD(n)};
  ------------------
  |  |  248|  2.82k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  548|  2.82k|    }
_ZN3scn2v24impl15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEC2ESA_l:
  466|  2.82k|    {
  467|  2.82k|    }
_ZNK3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E4baseEv:
   84|  65.1k|    {
   85|  65.1k|        return m_current;
   86|  65.1k|    }

_ZN3scn2v26detail10locale_refC2INSt3__16localeEEERKT_:
   32|  98.8k|{
   33|  98.8k|    static_assert(std::is_same_v<Locale, std::locale>);
   34|  98.8k|}
_ZNK3scn2v26detail10locale_ref3getINSt3__16localeEEET_v:
   38|    234|{
   39|    234|    static_assert(std::is_same_v<Locale, std::locale>);
   40|    234|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (40:12): [True: 117, False: 117]
  ------------------
   41|    234|                    : std::locale{};
   42|    234|}

_ZN3scn2v24impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
  111|    110|    {
  112|    110|        auto stdloc = loc.get<std::locale>();
  113|    110|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
  114|    110|        grouping = numpunct.grouping();
  115|    110|        thousands_sep =
  116|    110|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (116:13): [True: 0, False: 110]
  ------------------
  117|    110|        decimal_point = numpunct.decimal_point();
  118|    110|    }
_ZN3scn2v24impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
   48|    130|{
   49|    130|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (49:9): [True: 130, False: 0]
  ------------------
   50|    130|        return std::use_facet<Facet>(stdloc);
   51|    130|    }
   52|      0|    stdloc = std::locale(stdloc, new Facet{});
   53|      0|    return std::use_facet<Facet>(stdloc);
   54|    130|}
_ZN3scn2v24impl35localized_number_formatting_optionsIcEC2Ev:
  102|  1.61k|    localized_number_formatting_options() = default;
_ZN3scn2v24impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
  111|     86|    {
  112|     86|        auto stdloc = loc.get<std::locale>();
  113|     86|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
  114|     86|        grouping = numpunct.grouping();
  115|     86|        thousands_sep =
  116|     86|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (116:13): [True: 0, False: 86]
  ------------------
  117|     86|        decimal_point = numpunct.decimal_point();
  118|     86|    }
_ZN3scn2v24impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
   48|    104|{
   49|    104|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (49:9): [True: 104, False: 0]
  ------------------
   50|    104|        return std::use_facet<Facet>(stdloc);
   51|    104|    }
   52|      0|    stdloc = std::locale(stdloc, new Facet{});
   53|      0|    return std::use_facet<Facet>(stdloc);
   54|    104|}
_ZN3scn2v24impl35localized_number_formatting_optionsIwEC2Ev:
  102|  1.30k|    localized_number_formatting_options() = default;

_ZNK3scn2v24impl20reader_impl_for_boolIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RbNS0_6detail10locale_refE:
  188|  1.12k|    {
  189|  1.12k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  1.12k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  190|       |
  191|  1.12k|        return bool_reader<CharT>{}.read_classic(SCN_FWD(range), value);
  ------------------
  |  |  248|  1.12k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  192|  1.12k|    }
_ZN3scn2v24impl16bool_reader_baseC2Ev:
   30|  1.99k|    constexpr bool_reader_base() = default;
_ZNK3scn2v24impl16bool_reader_base12read_classicIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_Rb:
   37|  1.12k|    {
   38|  1.12k|        scan_error err{scan_error::invalid_scanned_value,
   39|  1.12k|                       "Failed to read boolean"};
   40|       |
   41|  1.12k|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (41:13): [True: 1.12k, False: 0]
  ------------------
   42|  1.12k|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (42:22): [True: 0, False: 1.12k]
  ------------------
   43|      0|                return *r;
   44|      0|            }
   45|  1.12k|            else {
   46|  1.12k|                err = r.error();
   47|  1.12k|            }
   48|  1.12k|        }
   49|       |
   50|  1.12k|        if (m_options & allow_text) {
  ------------------
  |  Branch (50:13): [True: 1.12k, False: 0]
  ------------------
   51|  1.12k|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (51:22): [True: 0, False: 1.12k]
  ------------------
   52|      0|                return *r;
   53|      0|            }
   54|  1.12k|            else {
   55|  1.12k|                err = r.error();
   56|  1.12k|            }
   57|  1.12k|        }
   58|       |
   59|  1.12k|        return unexpected(err);
   60|  1.12k|    }
_ZNK3scn2v24impl16bool_reader_base12read_numericIRN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_Rb:
   67|  1.41k|    {
   68|  1.41k|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (68:18): [True: 0, False: 1.41k]
  ------------------
   69|      0|            value = false;
   70|      0|            return *r;
   71|      0|        }
   72|  1.41k|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (72:18): [True: 0, False: 1.41k]
  ------------------
   73|      0|            value = true;
   74|      0|            return *r;
   75|      0|        }
   76|       |
   77|  1.41k|        return unexpected_scan_error(
   78|  1.41k|            scan_error::invalid_scanned_value,
   79|  1.41k|            "Failed to read numeric boolean value: No match");
   80|  1.41k|    }
_ZNK3scn2v24impl16bool_reader_base20read_textual_classicIRN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_Rb:
   86|  1.32k|    {
   87|  1.32k|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (87:18): [True: 0, False: 1.32k]
  ------------------
   88|      0|            value = true;
   89|      0|            return *r;
   90|      0|        }
   91|  1.32k|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (91:18): [True: 0, False: 1.32k]
  ------------------
   92|      0|            value = false;
   93|      0|            return *r;
   94|      0|        }
   95|       |
   96|  1.32k|        return unexpected_scan_error(
   97|  1.32k|            scan_error::invalid_scanned_value,
   98|  1.32k|            "Failed to read textual boolean value: No match");
   99|  1.32k|    }
_ZN3scn2v24impl20reader_impl_for_boolIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  181|  6.21k|    {
  182|  6.21k|        detail::check_bool_type_specs(specs, eh);
  183|  6.21k|    }
_ZNK3scn2v24impl20reader_impl_for_boolIcE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RKNS0_6detail12format_specsERbNSM_10locale_refE:
  200|    312|    {
  201|    312|        const auto rd = bool_reader<CharT>{get_options(specs)};
  202|       |
  203|    312|#if !SCN_DISABLE_LOCALE
  204|    312|        if (specs.localized) {
  ------------------
  |  Branch (204:13): [True: 12, False: 300]
  ------------------
  205|     12|            return rd.read_localized(SCN_FWD(range), loc, value);
  ------------------
  |  |  248|     12|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|     12|        }
  207|    300|#endif
  208|       |
  209|    300|        return rd.read_classic(SCN_FWD(range), value);
  ------------------
  |  |  248|    300|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  210|    312|    }
_ZN3scn2v24impl20reader_impl_for_boolIcE11get_optionsERKNS0_6detail12format_specsE:
  213|    664|    {
  214|    664|        SCN_GCC_COMPAT_PUSH
  215|    664|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
  216|       |
  217|    664|        switch (specs.type) {
  218|     64|            case detail::presentation_type::string:
  ------------------
  |  Branch (218:13): [True: 64, False: 600]
  ------------------
  219|     64|                return bool_reader_base::allow_text;
  220|       |
  221|     46|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (221:13): [True: 46, False: 618]
  ------------------
  222|    112|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (222:13): [True: 66, False: 598]
  ------------------
  223|    124|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (223:13): [True: 12, False: 652]
  ------------------
  224|    140|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (224:13): [True: 16, False: 648]
  ------------------
  225|    160|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (225:13): [True: 20, False: 644]
  ------------------
  226|    168|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (226:13): [True: 8, False: 656]
  ------------------
  227|    168|                return bool_reader_base::allow_numeric;
  228|       |
  229|    432|            default:
  ------------------
  |  Branch (229:13): [True: 432, False: 232]
  ------------------
  230|    432|                return bool_reader_base::allow_text |
  231|    432|                       bool_reader_base::allow_numeric;
  232|    664|        }
  233|       |
  234|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
  235|    664|    }
_ZN3scn2v24impl16bool_reader_baseC2Ej:
   31|  1.19k|    constexpr bool_reader_base(unsigned opt) : m_options(opt) {}
_ZNK3scn2v24impl11bool_readerIcE14read_localizedINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NS0_6detail10locale_refERb:
  112|     12|    {
  113|     12|        scan_error err{scan_error::invalid_scanned_value,
  114|     12|                       "Failed to read boolean"};
  115|       |
  116|     12|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (116:13): [True: 10, False: 2]
  ------------------
  117|     10|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (117:22): [True: 0, False: 10]
  ------------------
  118|      0|                return *r;
  119|      0|            }
  120|     10|            else {
  121|     10|                err = r.error();
  122|     10|            }
  123|     10|        }
  124|       |
  125|     12|        if (m_options & allow_text) {
  ------------------
  |  Branch (125:13): [True: 8, False: 4]
  ------------------
  126|      8|            auto stdloc = loc.get<std::locale>();
  127|      8|            const auto& numpunct =
  128|      8|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
  129|      8|            const auto truename = numpunct.truename();
  130|      8|            const auto falsename = numpunct.falsename();
  131|       |
  132|      8|            if (auto r =
  ------------------
  |  Branch (132:22): [True: 0, False: 8]
  ------------------
  133|      8|                    read_textual_custom(range, value, truename, falsename)) {
  134|      0|                return *r;
  135|      0|            }
  136|      8|            else {
  137|      8|                err = r.error();
  138|      8|            }
  139|      8|        }
  140|       |
  141|     12|        return unexpected(err);
  142|     12|    }
_ZNK3scn2v24impl16bool_reader_base12read_numericIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_Rb:
   67|    306|    {
   68|    306|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (68:18): [True: 0, False: 306]
  ------------------
   69|      0|            value = false;
   70|      0|            return *r;
   71|      0|        }
   72|    306|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (72:18): [True: 0, False: 306]
  ------------------
   73|      0|            value = true;
   74|      0|            return *r;
   75|      0|        }
   76|       |
   77|    306|        return unexpected_scan_error(
   78|    306|            scan_error::invalid_scanned_value,
   79|    306|            "Failed to read numeric boolean value: No match");
   80|    306|    }
_ZNK3scn2v24impl11bool_readerIcE19read_textual_customIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RbNSt3__117basic_string_viewIcNSO_11char_traitsIcEEEESS_:
  152|      8|    {
  153|      8|        const auto is_truename_shorter = truename.size() <= falsename.size();
  154|      8|        const auto shorter = std::pair{
  155|      8|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (155:13): [True: 8, False: 0]
  ------------------
  156|      8|        const auto longer = std::pair{
  157|      8|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (157:13): [True: 0, False: 8]
  ------------------
  158|       |
  159|      8|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (159:18): [True: 0, False: 8]
  ------------------
  160|      0|            value = shorter.second;
  161|      0|            return *r;
  162|      0|        }
  163|      8|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (163:18): [True: 0, False: 8]
  ------------------
  164|      0|            value = longer.second;
  165|      0|            return *r;
  166|      0|        }
  167|       |
  168|      8|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  169|      8|                                     "read_textual: No match");
  170|      8|    }
_ZNK3scn2v24impl16bool_reader_base12read_classicINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_Rb:
   37|    300|    {
   38|    300|        scan_error err{scan_error::invalid_scanned_value,
   39|    300|                       "Failed to read boolean"};
   40|       |
   41|    300|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (41:13): [True: 296, False: 4]
  ------------------
   42|    296|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (42:22): [True: 0, False: 296]
  ------------------
   43|      0|                return *r;
   44|      0|            }
   45|    296|            else {
   46|    296|                err = r.error();
   47|    296|            }
   48|    296|        }
   49|       |
   50|    300|        if (m_options & allow_text) {
  ------------------
  |  Branch (50:13): [True: 274, False: 26]
  ------------------
   51|    274|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (51:22): [True: 0, False: 274]
  ------------------
   52|      0|                return *r;
   53|      0|            }
   54|    274|            else {
   55|    274|                err = r.error();
   56|    274|            }
   57|    274|        }
   58|       |
   59|    300|        return unexpected(err);
   60|    300|    }
_ZNK3scn2v24impl16bool_reader_base20read_textual_classicIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_Rb:
   86|    274|    {
   87|    274|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (87:18): [True: 0, False: 274]
  ------------------
   88|      0|            value = true;
   89|      0|            return *r;
   90|      0|        }
   91|    274|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (91:18): [True: 0, False: 274]
  ------------------
   92|      0|            value = false;
   93|      0|            return *r;
   94|      0|        }
   95|       |
   96|    274|        return unexpected_scan_error(
   97|    274|            scan_error::invalid_scanned_value,
   98|    274|            "Failed to read textual boolean value: No match");
   99|    274|    }
_ZNK3scn2v24impl20reader_impl_for_boolIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERbNSL_10locale_refE:
  200|    352|    {
  201|    352|        const auto rd = bool_reader<CharT>{get_options(specs)};
  202|       |
  203|    352|#if !SCN_DISABLE_LOCALE
  204|    352|        if (specs.localized) {
  ------------------
  |  Branch (204:13): [True: 58, False: 294]
  ------------------
  205|     58|            return rd.read_localized(SCN_FWD(range), loc, value);
  ------------------
  |  |  248|     58|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|     58|        }
  207|    294|#endif
  208|       |
  209|    294|        return rd.read_classic(SCN_FWD(range), value);
  ------------------
  |  |  248|    294|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  210|    352|    }
_ZNK3scn2v24impl11bool_readerIcE14read_localizedIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NS0_6detail10locale_refERb:
  112|     58|    {
  113|     58|        scan_error err{scan_error::invalid_scanned_value,
  114|     58|                       "Failed to read boolean"};
  115|       |
  116|     58|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (116:13): [True: 56, False: 2]
  ------------------
  117|     56|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (117:22): [True: 0, False: 56]
  ------------------
  118|      0|                return *r;
  119|      0|            }
  120|     56|            else {
  121|     56|                err = r.error();
  122|     56|            }
  123|     56|        }
  124|       |
  125|     58|        if (m_options & allow_text) {
  ------------------
  |  Branch (125:13): [True: 12, False: 46]
  ------------------
  126|     12|            auto stdloc = loc.get<std::locale>();
  127|     12|            const auto& numpunct =
  128|     12|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
  129|     12|            const auto truename = numpunct.truename();
  130|     12|            const auto falsename = numpunct.falsename();
  131|       |
  132|     12|            if (auto r =
  ------------------
  |  Branch (132:22): [True: 0, False: 12]
  ------------------
  133|     12|                    read_textual_custom(range, value, truename, falsename)) {
  134|      0|                return *r;
  135|      0|            }
  136|     12|            else {
  137|     12|                err = r.error();
  138|     12|            }
  139|     12|        }
  140|       |
  141|     58|        return unexpected(err);
  142|     58|    }
_ZNK3scn2v24impl11bool_readerIcE19read_textual_customIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RbNSt3__117basic_string_viewIcNSM_11char_traitsIcEEEESQ_:
  152|     12|    {
  153|     12|        const auto is_truename_shorter = truename.size() <= falsename.size();
  154|     12|        const auto shorter = std::pair{
  155|     12|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (155:13): [True: 12, False: 0]
  ------------------
  156|     12|        const auto longer = std::pair{
  157|     12|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (157:13): [True: 0, False: 12]
  ------------------
  158|       |
  159|     12|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (159:18): [True: 0, False: 12]
  ------------------
  160|      0|            value = shorter.second;
  161|      0|            return *r;
  162|      0|        }
  163|     12|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (163:18): [True: 0, False: 12]
  ------------------
  164|      0|            value = longer.second;
  165|      0|            return *r;
  166|      0|        }
  167|       |
  168|     12|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  169|     12|                                     "read_textual: No match");
  170|     12|    }
_ZNK3scn2v24impl16bool_reader_base12read_classicIRN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_Rb:
   37|    294|    {
   38|    294|        scan_error err{scan_error::invalid_scanned_value,
   39|    294|                       "Failed to read boolean"};
   40|       |
   41|    294|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (41:13): [True: 238, False: 56]
  ------------------
   42|    238|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (42:22): [True: 0, False: 238]
  ------------------
   43|      0|                return *r;
   44|      0|            }
   45|    238|            else {
   46|    238|                err = r.error();
   47|    238|            }
   48|    238|        }
   49|       |
   50|    294|        if (m_options & allow_text) {
  ------------------
  |  Branch (50:13): [True: 202, False: 92]
  ------------------
   51|    202|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (51:22): [True: 0, False: 202]
  ------------------
   52|      0|                return *r;
   53|      0|            }
   54|    202|            else {
   55|    202|                err = r.error();
   56|    202|            }
   57|    202|        }
   58|       |
   59|    294|        return unexpected(err);
   60|    294|    }
_ZNK3scn2v24impl20reader_impl_for_boolIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RbNS0_6detail10locale_refE:
  188|    872|    {
  189|    872|        SCN_UNUSED(loc);
  ------------------
  |  |  227|    872|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  190|       |
  191|    872|        return bool_reader<CharT>{}.read_classic(SCN_FWD(range), value);
  ------------------
  |  |  248|    872|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  192|    872|    }
_ZNK3scn2v24impl16bool_reader_base12read_classicIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_Rb:
   37|    872|    {
   38|    872|        scan_error err{scan_error::invalid_scanned_value,
   39|    872|                       "Failed to read boolean"};
   40|       |
   41|    872|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (41:13): [True: 872, False: 0]
  ------------------
   42|    872|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (42:22): [True: 0, False: 872]
  ------------------
   43|      0|                return *r;
   44|      0|            }
   45|    872|            else {
   46|    872|                err = r.error();
   47|    872|            }
   48|    872|        }
   49|       |
   50|    872|        if (m_options & allow_text) {
  ------------------
  |  Branch (50:13): [True: 872, False: 0]
  ------------------
   51|    872|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (51:22): [True: 0, False: 872]
  ------------------
   52|      0|                return *r;
   53|      0|            }
   54|    872|            else {
   55|    872|                err = r.error();
   56|    872|            }
   57|    872|        }
   58|       |
   59|    872|        return unexpected(err);
   60|    872|    }
_ZNK3scn2v24impl16bool_reader_base12read_numericIRN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_Rb:
   67|  1.09k|    {
   68|  1.09k|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (68:18): [True: 0, False: 1.09k]
  ------------------
   69|      0|            value = false;
   70|      0|            return *r;
   71|      0|        }
   72|  1.09k|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (72:18): [True: 0, False: 1.09k]
  ------------------
   73|      0|            value = true;
   74|      0|            return *r;
   75|      0|        }
   76|       |
   77|  1.09k|        return unexpected_scan_error(
   78|  1.09k|            scan_error::invalid_scanned_value,
   79|  1.09k|            "Failed to read numeric boolean value: No match");
   80|  1.09k|    }
_ZNK3scn2v24impl16bool_reader_base20read_textual_classicIRN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_Rb:
   86|  1.06k|    {
   87|  1.06k|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (87:18): [True: 0, False: 1.06k]
  ------------------
   88|      0|            value = true;
   89|      0|            return *r;
   90|      0|        }
   91|  1.06k|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (91:18): [True: 0, False: 1.06k]
  ------------------
   92|      0|            value = false;
   93|      0|            return *r;
   94|      0|        }
   95|       |
   96|  1.06k|        return unexpected_scan_error(
   97|  1.06k|            scan_error::invalid_scanned_value,
   98|  1.06k|            "Failed to read textual boolean value: No match");
   99|  1.06k|    }
_ZN3scn2v24impl20reader_impl_for_boolIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  181|  4.67k|    {
  182|  4.67k|        detail::check_bool_type_specs(specs, eh);
  183|  4.67k|    }
_ZNK3scn2v24impl20reader_impl_for_boolIwE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RKNS0_6detail12format_specsERbNSM_10locale_refE:
  200|    254|    {
  201|    254|        const auto rd = bool_reader<CharT>{get_options(specs)};
  202|       |
  203|    254|#if !SCN_DISABLE_LOCALE
  204|    254|        if (specs.localized) {
  ------------------
  |  Branch (204:13): [True: 12, False: 242]
  ------------------
  205|     12|            return rd.read_localized(SCN_FWD(range), loc, value);
  ------------------
  |  |  248|     12|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|     12|        }
  207|    242|#endif
  208|       |
  209|    242|        return rd.read_classic(SCN_FWD(range), value);
  ------------------
  |  |  248|    242|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  210|    254|    }
_ZN3scn2v24impl20reader_impl_for_boolIwE11get_optionsERKNS0_6detail12format_specsE:
  213|    532|    {
  214|    532|        SCN_GCC_COMPAT_PUSH
  215|    532|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
  216|       |
  217|    532|        switch (specs.type) {
  218|     58|            case detail::presentation_type::string:
  ------------------
  |  Branch (218:13): [True: 58, False: 474]
  ------------------
  219|     58|                return bool_reader_base::allow_text;
  220|       |
  221|     38|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (221:13): [True: 38, False: 494]
  ------------------
  222|     60|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (222:13): [True: 22, False: 510]
  ------------------
  223|     72|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (223:13): [True: 12, False: 520]
  ------------------
  224|     90|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (224:13): [True: 18, False: 514]
  ------------------
  225|     98|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (225:13): [True: 8, False: 524]
  ------------------
  226|    104|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (226:13): [True: 6, False: 526]
  ------------------
  227|    104|                return bool_reader_base::allow_numeric;
  228|       |
  229|    370|            default:
  ------------------
  |  Branch (229:13): [True: 370, False: 162]
  ------------------
  230|    370|                return bool_reader_base::allow_text |
  231|    370|                       bool_reader_base::allow_numeric;
  232|    532|        }
  233|       |
  234|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
  235|    532|    }
_ZNK3scn2v24impl11bool_readerIwE14read_localizedINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NS0_6detail10locale_refERb:
  112|     12|    {
  113|     12|        scan_error err{scan_error::invalid_scanned_value,
  114|     12|                       "Failed to read boolean"};
  115|       |
  116|     12|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (116:13): [True: 10, False: 2]
  ------------------
  117|     10|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (117:22): [True: 0, False: 10]
  ------------------
  118|      0|                return *r;
  119|      0|            }
  120|     10|            else {
  121|     10|                err = r.error();
  122|     10|            }
  123|     10|        }
  124|       |
  125|     12|        if (m_options & allow_text) {
  ------------------
  |  Branch (125:13): [True: 8, False: 4]
  ------------------
  126|      8|            auto stdloc = loc.get<std::locale>();
  127|      8|            const auto& numpunct =
  128|      8|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
  129|      8|            const auto truename = numpunct.truename();
  130|      8|            const auto falsename = numpunct.falsename();
  131|       |
  132|      8|            if (auto r =
  ------------------
  |  Branch (132:22): [True: 0, False: 8]
  ------------------
  133|      8|                    read_textual_custom(range, value, truename, falsename)) {
  134|      0|                return *r;
  135|      0|            }
  136|      8|            else {
  137|      8|                err = r.error();
  138|      8|            }
  139|      8|        }
  140|       |
  141|     12|        return unexpected(err);
  142|     12|    }
_ZNK3scn2v24impl16bool_reader_base12read_numericIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_Rb:
   67|    250|    {
   68|    250|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (68:18): [True: 0, False: 250]
  ------------------
   69|      0|            value = false;
   70|      0|            return *r;
   71|      0|        }
   72|    250|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (72:18): [True: 0, False: 250]
  ------------------
   73|      0|            value = true;
   74|      0|            return *r;
   75|      0|        }
   76|       |
   77|    250|        return unexpected_scan_error(
   78|    250|            scan_error::invalid_scanned_value,
   79|    250|            "Failed to read numeric boolean value: No match");
   80|    250|    }
_ZNK3scn2v24impl11bool_readerIwE19read_textual_customIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RbNSt3__117basic_string_viewIwNSO_11char_traitsIwEEEESS_:
  152|      8|    {
  153|      8|        const auto is_truename_shorter = truename.size() <= falsename.size();
  154|      8|        const auto shorter = std::pair{
  155|      8|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (155:13): [True: 8, False: 0]
  ------------------
  156|      8|        const auto longer = std::pair{
  157|      8|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (157:13): [True: 0, False: 8]
  ------------------
  158|       |
  159|      8|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (159:18): [True: 0, False: 8]
  ------------------
  160|      0|            value = shorter.second;
  161|      0|            return *r;
  162|      0|        }
  163|      8|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (163:18): [True: 0, False: 8]
  ------------------
  164|      0|            value = longer.second;
  165|      0|            return *r;
  166|      0|        }
  167|       |
  168|      8|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  169|      8|                                     "read_textual: No match");
  170|      8|    }
_ZNK3scn2v24impl16bool_reader_base12read_classicINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_Rb:
   37|    242|    {
   38|    242|        scan_error err{scan_error::invalid_scanned_value,
   39|    242|                       "Failed to read boolean"};
   40|       |
   41|    242|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (41:13): [True: 240, False: 2]
  ------------------
   42|    240|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (42:22): [True: 0, False: 240]
  ------------------
   43|      0|                return *r;
   44|      0|            }
   45|    240|            else {
   46|    240|                err = r.error();
   47|    240|            }
   48|    240|        }
   49|       |
   50|    242|        if (m_options & allow_text) {
  ------------------
  |  Branch (50:13): [True: 216, False: 26]
  ------------------
   51|    216|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (51:22): [True: 0, False: 216]
  ------------------
   52|      0|                return *r;
   53|      0|            }
   54|    216|            else {
   55|    216|                err = r.error();
   56|    216|            }
   57|    216|        }
   58|       |
   59|    242|        return unexpected(err);
   60|    242|    }
_ZNK3scn2v24impl16bool_reader_base20read_textual_classicIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_Rb:
   86|    216|    {
   87|    216|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (87:18): [True: 0, False: 216]
  ------------------
   88|      0|            value = true;
   89|      0|            return *r;
   90|      0|        }
   91|    216|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (91:18): [True: 0, False: 216]
  ------------------
   92|      0|            value = false;
   93|      0|            return *r;
   94|      0|        }
   95|       |
   96|    216|        return unexpected_scan_error(
   97|    216|            scan_error::invalid_scanned_value,
   98|    216|            "Failed to read textual boolean value: No match");
   99|    216|    }
_ZNK3scn2v24impl20reader_impl_for_boolIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERbNSL_10locale_refE:
  200|    278|    {
  201|    278|        const auto rd = bool_reader<CharT>{get_options(specs)};
  202|       |
  203|    278|#if !SCN_DISABLE_LOCALE
  204|    278|        if (specs.localized) {
  ------------------
  |  Branch (204:13): [True: 26, False: 252]
  ------------------
  205|     26|            return rd.read_localized(SCN_FWD(range), loc, value);
  ------------------
  |  |  248|     26|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|     26|        }
  207|    252|#endif
  208|       |
  209|    252|        return rd.read_classic(SCN_FWD(range), value);
  ------------------
  |  |  248|    252|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  210|    278|    }
_ZNK3scn2v24impl11bool_readerIwE14read_localizedIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NS0_6detail10locale_refERb:
  112|     26|    {
  113|     26|        scan_error err{scan_error::invalid_scanned_value,
  114|     26|                       "Failed to read boolean"};
  115|       |
  116|     26|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (116:13): [True: 24, False: 2]
  ------------------
  117|     24|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (117:22): [True: 0, False: 24]
  ------------------
  118|      0|                return *r;
  119|      0|            }
  120|     24|            else {
  121|     24|                err = r.error();
  122|     24|            }
  123|     24|        }
  124|       |
  125|     26|        if (m_options & allow_text) {
  ------------------
  |  Branch (125:13): [True: 10, False: 16]
  ------------------
  126|     10|            auto stdloc = loc.get<std::locale>();
  127|     10|            const auto& numpunct =
  128|     10|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
  129|     10|            const auto truename = numpunct.truename();
  130|     10|            const auto falsename = numpunct.falsename();
  131|       |
  132|     10|            if (auto r =
  ------------------
  |  Branch (132:22): [True: 0, False: 10]
  ------------------
  133|     10|                    read_textual_custom(range, value, truename, falsename)) {
  134|      0|                return *r;
  135|      0|            }
  136|     10|            else {
  137|     10|                err = r.error();
  138|     10|            }
  139|     10|        }
  140|       |
  141|     26|        return unexpected(err);
  142|     26|    }
_ZNK3scn2v24impl11bool_readerIwE19read_textual_customIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RbNSt3__117basic_string_viewIwNSM_11char_traitsIwEEEESQ_:
  152|     10|    {
  153|     10|        const auto is_truename_shorter = truename.size() <= falsename.size();
  154|     10|        const auto shorter = std::pair{
  155|     10|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (155:13): [True: 10, False: 0]
  ------------------
  156|     10|        const auto longer = std::pair{
  157|     10|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (157:13): [True: 0, False: 10]
  ------------------
  158|       |
  159|     10|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (159:18): [True: 0, False: 10]
  ------------------
  160|      0|            value = shorter.second;
  161|      0|            return *r;
  162|      0|        }
  163|     10|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (163:18): [True: 0, False: 10]
  ------------------
  164|      0|            value = longer.second;
  165|      0|            return *r;
  166|      0|        }
  167|       |
  168|     10|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  169|     10|                                     "read_textual: No match");
  170|     10|    }
_ZNK3scn2v24impl16bool_reader_base12read_classicIRN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_Rb:
   37|    252|    {
   38|    252|        scan_error err{scan_error::invalid_scanned_value,
   39|    252|                       "Failed to read boolean"};
   40|       |
   41|    252|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (41:13): [True: 200, False: 52]
  ------------------
   42|    200|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (42:22): [True: 0, False: 200]
  ------------------
   43|      0|                return *r;
   44|      0|            }
   45|    200|            else {
   46|    200|                err = r.error();
   47|    200|            }
   48|    200|        }
   49|       |
   50|    252|        if (m_options & allow_text) {
  ------------------
  |  Branch (50:13): [True: 194, False: 58]
  ------------------
   51|    194|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (51:22): [True: 0, False: 194]
  ------------------
   52|      0|                return *r;
   53|      0|            }
   54|    194|            else {
   55|    194|                err = r.error();
   56|    194|            }
   57|    194|        }
   58|       |
   59|    252|        return unexpected(err);
   60|    252|    }

_ZNK3scn2v24impl16char_reader_baseIcE19skip_ws_before_readEv:
   87|  1.65k|    {
   88|  1.65k|        return false;
   89|  1.65k|    }
_ZN3scn2v24impl20reader_impl_for_charIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_RcNS0_6detail10locale_refE:
  113|  1.26k|    {
  114|  1.26k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  1.26k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  115|  1.26k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (115:23): [Folded - Ignored]
  ------------------
  116|  1.26k|            return code_unit_reader<char>{}.read(range, value);
  117|  1.26k|        }
  118|  1.26k|        else {
  119|  1.26k|            SCN_UNUSED(range);
  120|  1.26k|            SCN_EXPECT(false);
  121|  1.26k|            SCN_UNREACHABLE;
  122|  1.26k|        }
  123|  1.26k|    }
_ZN3scn2v24impl16code_unit_readerIcE4readIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_Rc:
   36|  1.26k|    {
   37|  1.26k|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  |   71|  1.26k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.26k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.26k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 1.26k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  1.26k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.26k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   38|  1.26k|        ch = *ranges::begin(range);
   39|  1.26k|        return it;
   40|  1.26k|    }
_ZNK3scn2v24impl16char_reader_baseIwE19skip_ws_before_readEv:
   87|  1.31k|    {
   88|  1.31k|        return false;
   89|  1.31k|    }
_ZN3scn2v24impl16char_reader_baseIcE11check_specsERKNS0_6detail12format_specsE:
   92|  6.13k|    {
   93|  6.13k|        reader_error_handler eh{};
   94|  6.13k|        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
  ------------------
  |  Branch (94:23): [Folded - Ignored]
  ------------------
   95|  6.13k|            detail::check_code_point_type_specs(specs, eh);
   96|  6.13k|        }
   97|  6.13k|        else {
   98|  6.13k|            detail::check_char_type_specs(specs, eh);
   99|  6.13k|        }
  100|  6.13k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  6.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.59k, False: 534]
  |  |  ------------------
  ------------------
  101|  5.59k|            return {scan_error::invalid_format_string, eh.m_msg};
  102|  5.59k|        }
  103|    534|        return {};
  104|  6.13k|    }
_ZN3scn2v24impl20reader_impl_for_charIcE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESH_RKNS0_6detail12format_specsERcNSL_10locale_refE:
  131|    296|    {
  132|    296|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (132:13): [True: 270, False: 26]
  ------------------
  133|    296|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (133:13): [True: 0, False: 26]
  ------------------
  134|    270|            return read_default(range, value, loc);
  135|    270|        }
  136|       |
  137|     26|        reader_impl_for_int<CharT> reader{};
  138|     26|        signed char tmp_value{};
  139|     26|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
  140|     26|        value = static_cast<signed char>(value);
  141|     26|        return ret;
  142|    296|    }
_ZN3scn2v24impl20reader_impl_for_charIcE12read_defaultINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESH_RcNS0_6detail10locale_refE:
  113|    270|    {
  114|    270|        SCN_UNUSED(loc);
  ------------------
  |  |  227|    270|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  115|    270|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (115:23): [Folded - Ignored]
  ------------------
  116|    270|            return code_unit_reader<char>{}.read(range, value);
  117|    270|        }
  118|    270|        else {
  119|    270|            SCN_UNUSED(range);
  120|    270|            SCN_EXPECT(false);
  121|    270|            SCN_UNREACHABLE;
  122|    270|        }
  123|    270|    }
_ZN3scn2v24impl16code_unit_readerIcE4readIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_Rc:
   36|    270|    {
   37|    270|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  |   71|    270|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    270|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    270|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    270|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 270]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    270|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    270|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   38|    270|        ch = *ranges::begin(range);
   39|    270|        return it;
   40|    270|    }
_ZN3scn2v24impl20reader_impl_for_charIcE10read_specsIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_RKNS0_6detail12format_specsERcNSJ_10locale_refE:
  131|    238|    {
  132|    238|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (132:13): [True: 146, False: 92]
  ------------------
  133|    238|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (133:13): [True: 0, False: 92]
  ------------------
  134|    146|            return read_default(range, value, loc);
  135|    146|        }
  136|       |
  137|     92|        reader_impl_for_int<CharT> reader{};
  138|     92|        signed char tmp_value{};
  139|     92|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
  140|     92|        value = static_cast<signed char>(value);
  141|     92|        return ret;
  142|    238|    }
_ZN3scn2v24impl16char_reader_baseIwE11check_specsERKNS0_6detail12format_specsE:
   92|  4.62k|    {
   93|  4.62k|        reader_error_handler eh{};
   94|  4.62k|        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
  ------------------
  |  Branch (94:23): [Folded - Ignored]
  ------------------
   95|  4.62k|            detail::check_code_point_type_specs(specs, eh);
   96|  4.62k|        }
   97|  4.62k|        else {
   98|  4.62k|            detail::check_char_type_specs(specs, eh);
   99|  4.62k|        }
  100|  4.62k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  4.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.18k, False: 440]
  |  |  ------------------
  ------------------
  101|  4.18k|            return {scan_error::invalid_format_string, eh.m_msg};
  102|  4.18k|        }
  103|    440|        return {};
  104|  4.62k|    }
_ZN3scn2v24impl21reader_impl_for_wcharIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_RwNS0_6detail10locale_refE:
  151|  1.01k|    {
  152|  1.01k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  1.01k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  153|  1.01k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (153:23): [Folded - Ignored]
  ------------------
  154|  1.01k|            return code_point_reader<wchar_t>{}.read(range, value);
  155|  1.01k|        }
  156|  1.01k|        else {
  157|  1.01k|            return code_unit_reader<wchar_t>{}.read(range, value);
  158|  1.01k|        }
  159|  1.01k|    }
_ZN3scn2v24impl16code_unit_readerIwE4readIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_Rw:
   36|  1.01k|    {
   37|  1.01k|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  |   71|  1.01k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.01k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.01k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 1.01k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  1.01k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.01k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   38|  1.01k|        ch = *ranges::begin(range);
   39|  1.01k|        return it;
   40|  1.01k|    }
_ZN3scn2v24impl21reader_impl_for_wcharIwE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESH_RKNS0_6detail12format_specsERwNSL_10locale_refE:
  167|    240|    {
  168|    240|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (168:13): [True: 214, False: 26]
  ------------------
  169|    240|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (169:13): [True: 0, False: 26]
  ------------------
  170|    214|            return read_default(range, value, loc);
  171|    214|        }
  172|       |
  173|     26|        reader_impl_for_int<CharT> reader{};
  174|     26|        using integer_type =
  175|     26|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
  176|     26|        integer_type tmp_value{};
  177|     26|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
  178|     26|        value = static_cast<integer_type>(value);
  179|     26|        return ret;
  180|    240|    }
_ZN3scn2v24impl21reader_impl_for_wcharIwE12read_defaultINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESH_RwNS0_6detail10locale_refE:
  151|    214|    {
  152|    214|        SCN_UNUSED(loc);
  ------------------
  |  |  227|    214|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  153|    214|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (153:23): [Folded - Ignored]
  ------------------
  154|    214|            return code_point_reader<wchar_t>{}.read(range, value);
  155|    214|        }
  156|    214|        else {
  157|    214|            return code_unit_reader<wchar_t>{}.read(range, value);
  158|    214|        }
  159|    214|    }
_ZN3scn2v24impl16code_unit_readerIwE4readIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_Rw:
   36|    214|    {
   37|    214|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  |   71|    214|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    214|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    214|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    214|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 214]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    214|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    214|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   38|    214|        ch = *ranges::begin(range);
   39|    214|        return it;
   40|    214|    }
_ZN3scn2v24impl21reader_impl_for_wcharIwE10read_specsIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_RKNS0_6detail12format_specsERwNSJ_10locale_refE:
  167|    200|    {
  168|    200|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (168:13): [True: 142, False: 58]
  ------------------
  169|    200|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (169:13): [True: 0, False: 58]
  ------------------
  170|    142|            return read_default(range, value, loc);
  171|    142|        }
  172|       |
  173|     58|        reader_impl_for_int<CharT> reader{};
  174|     58|        using integer_type =
  175|     58|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
  176|     58|        integer_type tmp_value{};
  177|     58|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
  178|     58|        value = static_cast<integer_type>(value);
  179|     58|        return ret;
  180|    200|    }

_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
   45|  13.1k|{
   46|  13.1k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 13.1k, False: 0]
  ------------------
   47|  13.1k|        auto it = read_while_classic_space(range);
   48|  13.1k|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|  13.1k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  13.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 13.1k]
  |  |  ------------------
  ------------------
   50|      0|            return unexpected(e);
   51|      0|        }
   52|       |
   53|  13.1k|        return it;
   54|  13.1k|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|  13.1k|}
_ZNK3scn2v24impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
  125|  3.38k|    {
  126|  3.38k|        return true;
  127|  3.38k|    }
_ZNK3scn2v24impl11reader_baseINS1_20reader_impl_for_boolIcEEcE19skip_ws_before_readEv:
  125|  1.78k|    {
  126|  1.78k|        return true;
  127|  1.78k|    }
_ZNK3scn2v24impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
  125|  1.61k|    {
  126|  1.61k|        return true;
  127|  1.61k|    }
_ZN3scn2v24impl22transcode_if_necessaryIccEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
  106|  2.06k|{
  107|  2.06k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (107:19): [Folded - Ignored]
  ------------------
  108|  2.06k|        dest.assign(source.view());
  109|  2.06k|    }
  110|  2.06k|    else {
  111|  2.06k|        return transcode_impl(source.view(), dest);
  112|  2.06k|    }
  113|       |
  114|  2.06k|    return {};
  115|  2.06k|}
_ZN3scn2v24impl22transcode_if_necessaryIcwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
  106|  2.06k|{
  107|  2.06k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (107:19): [Folded - Ignored]
  ------------------
  108|  2.06k|        dest.assign(source.view());
  109|  2.06k|    }
  110|  2.06k|    else {
  111|  2.06k|        return transcode_impl(source.view(), dest);
  112|  2.06k|    }
  113|       |
  114|      0|    return {};
  115|  2.06k|}
_ZN3scn2v24impl14transcode_implIcwEENS0_10scan_errorENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEERNS4_12basic_stringIT0_NS7_ISB_EENS4_9allocatorISB_EEEE:
   62|  2.42k|{
   63|  2.42k|    dst.clear();
   64|  2.42k|    transcode_valid_to_string(src, dst);
   65|  2.42k|    return {};
   66|  2.42k|}
_ZN3scn2v24impl22transcode_if_necessaryIccEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
   87|    354|{
   88|    354|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (88:19): [Folded - Ignored]
  ------------------
   89|    354|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (89:13): [True: 354, False: 0]
  ------------------
   90|    354|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  246|    354|    static_cast<    \
  |  |  247|    354|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   91|    354|        }
   92|      0|        else {
   93|      0|            dest.assign(source.view());
   94|      0|        }
   95|    354|    }
   96|    354|    else {
   97|    354|        return transcode_impl(source.view(), dest);
   98|    354|    }
   99|       |
  100|    354|    return {};
  101|    354|}
_ZN3scn2v24impl22transcode_if_necessaryIcwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
   87|    354|{
   88|    354|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (88:19): [Folded - Ignored]
  ------------------
   89|    354|        if (source.stores_allocated_string()) {
   90|    354|            dest.assign(SCN_MOVE(source.get_allocated_string()));
   91|    354|        }
   92|    354|        else {
   93|    354|            dest.assign(source.view());
   94|    354|        }
   95|    354|    }
   96|    354|    else {
   97|    354|        return transcode_impl(source.view(), dest);
   98|    354|    }
   99|       |
  100|      0|    return {};
  101|    354|}
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
  130|  12.4k|    {
  131|  12.4k|        reader_error_handler eh{};
  132|  12.4k|        get_derived().check_specs_impl(specs, eh);
  133|  12.4k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  12.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 11.2k, False: 1.14k]
  |  |  ------------------
  ------------------
  134|  11.2k|            return {scan_error::invalid_format_string, eh.m_msg};
  135|  11.2k|        }
  136|  1.14k|        return {};
  137|  12.4k|    }
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
  141|  12.4k|    {
  142|  12.4k|        return static_cast<Derived&>(*this);
  143|  12.4k|    }
_ZN3scn2v24impl20reader_error_handler8on_errorEPKc:
   29|  60.0k|    {
   30|  60.0k|        SCN_UNLIKELY_ATTR
   31|  60.0k|        m_msg = msg;
   32|  60.0k|    }
_ZNK3scn2v24impl20reader_error_handlercvbEv:
   34|  97.3k|    {
   35|  97.3k|        return m_msg == nullptr;
   36|  97.3k|    }
_ZN3scn2v24impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11check_specsERKNS0_6detail12format_specsE:
  130|  6.21k|    {
  131|  6.21k|        reader_error_handler eh{};
  132|  6.21k|        get_derived().check_specs_impl(specs, eh);
  133|  6.21k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  6.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.55k, False: 664]
  |  |  ------------------
  ------------------
  134|  5.55k|            return {scan_error::invalid_format_string, eh.m_msg};
  135|  5.55k|        }
  136|    664|        return {};
  137|  6.21k|    }
_ZN3scn2v24impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11get_derivedEv:
  141|  6.21k|    {
  142|  6.21k|        return static_cast<Derived&>(*this);
  143|  6.21k|    }
_ZN3scn2v24impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
  130|  6.21k|    {
  131|  6.21k|        reader_error_handler eh{};
  132|  6.21k|        get_derived().check_specs_impl(specs, eh);
  133|  6.21k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  6.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.71k, False: 498]
  |  |  ------------------
  ------------------
  134|  5.71k|            return {scan_error::invalid_format_string, eh.m_msg};
  135|  5.71k|        }
  136|    498|        return {};
  137|  6.21k|    }
_ZN3scn2v24impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
  141|  6.21k|    {
  142|  6.21k|        return static_cast<Derived&>(*this);
  143|  6.21k|    }
_ZN3scn2v24impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
  130|  18.3k|    {
  131|  18.3k|        reader_error_handler eh{};
  132|  18.3k|        get_derived().check_specs_impl(specs, eh);
  133|  18.3k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 540, False: 17.8k]
  |  |  ------------------
  ------------------
  134|    540|            return {scan_error::invalid_format_string, eh.m_msg};
  135|    540|        }
  136|  17.8k|        return {};
  137|  18.3k|    }
_ZN3scn2v24impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
  141|  18.3k|    {
  142|  18.3k|        return static_cast<Derived&>(*this);
  143|  18.3k|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
   45|  10.4k|{
   46|  10.4k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 10.4k, False: 0]
  ------------------
   47|  10.4k|        auto it = read_while_classic_space(range);
   48|  10.4k|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|  10.4k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  10.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 10.4k]
  |  |  ------------------
  ------------------
   50|      0|            return unexpected(e);
   51|      0|        }
   52|       |
   53|  10.4k|        return it;
   54|  10.4k|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|  10.4k|}
_ZNK3scn2v24impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
  125|  2.68k|    {
  126|  2.68k|        return true;
  127|  2.68k|    }
_ZNK3scn2v24impl11reader_baseINS1_20reader_impl_for_boolIwEEwE19skip_ws_before_readEv:
  125|  1.40k|    {
  126|  1.40k|        return true;
  127|  1.40k|    }
_ZNK3scn2v24impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
  125|  1.30k|    {
  126|  1.30k|        return true;
  127|  1.30k|    }
_ZN3scn2v24impl22transcode_if_necessaryIwcEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
  106|  2.10k|{
  107|  2.10k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (107:19): [Folded - Ignored]
  ------------------
  108|  2.10k|        dest.assign(source.view());
  109|  2.10k|    }
  110|  2.10k|    else {
  111|  2.10k|        return transcode_impl(source.view(), dest);
  112|  2.10k|    }
  113|       |
  114|      0|    return {};
  115|  2.10k|}
_ZN3scn2v24impl14transcode_implIwcEENS0_10scan_errorENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEERNS4_12basic_stringIT0_NS7_ISB_EENS4_9allocatorISB_EEEE:
   62|  2.49k|{
   63|  2.49k|    dst.clear();
   64|  2.49k|    transcode_valid_to_string(src, dst);
   65|  2.49k|    return {};
   66|  2.49k|}
_ZN3scn2v24impl22transcode_if_necessaryIwwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
  106|  2.10k|{
  107|  2.10k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (107:19): [Folded - Ignored]
  ------------------
  108|  2.10k|        dest.assign(source.view());
  109|  2.10k|    }
  110|  2.10k|    else {
  111|  2.10k|        return transcode_impl(source.view(), dest);
  112|  2.10k|    }
  113|       |
  114|  2.10k|    return {};
  115|  2.10k|}
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
  130|  9.34k|    {
  131|  9.34k|        reader_error_handler eh{};
  132|  9.34k|        get_derived().check_specs_impl(specs, eh);
  133|  9.34k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  9.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 8.40k, False: 940]
  |  |  ------------------
  ------------------
  134|  8.40k|            return {scan_error::invalid_format_string, eh.m_msg};
  135|  8.40k|        }
  136|    940|        return {};
  137|  9.34k|    }
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
  141|  9.34k|    {
  142|  9.34k|        return static_cast<Derived&>(*this);
  143|  9.34k|    }
_ZN3scn2v24impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11check_specsERKNS0_6detail12format_specsE:
  130|  4.67k|    {
  131|  4.67k|        reader_error_handler eh{};
  132|  4.67k|        get_derived().check_specs_impl(specs, eh);
  133|  4.67k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  4.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.14k, False: 532]
  |  |  ------------------
  ------------------
  134|  4.14k|            return {scan_error::invalid_format_string, eh.m_msg};
  135|  4.14k|        }
  136|    532|        return {};
  137|  4.67k|    }
_ZN3scn2v24impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11get_derivedEv:
  141|  4.67k|    {
  142|  4.67k|        return static_cast<Derived&>(*this);
  143|  4.67k|    }
_ZN3scn2v24impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
  130|  4.67k|    {
  131|  4.67k|        reader_error_handler eh{};
  132|  4.67k|        get_derived().check_specs_impl(specs, eh);
  133|  4.67k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  4.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.24k, False: 430]
  |  |  ------------------
  ------------------
  134|  4.24k|            return {scan_error::invalid_format_string, eh.m_msg};
  135|  4.24k|        }
  136|    430|        return {};
  137|  4.67k|    }
_ZN3scn2v24impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
  141|  4.67k|    {
  142|  4.67k|        return static_cast<Derived&>(*this);
  143|  4.67k|    }
_ZN3scn2v24impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
  130|  13.8k|    {
  131|  13.8k|        reader_error_handler eh{};
  132|  13.8k|        get_derived().check_specs_impl(specs, eh);
  133|  13.8k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 432, False: 13.4k]
  |  |  ------------------
  ------------------
  134|    432|            return {scan_error::invalid_format_string, eh.m_msg};
  135|    432|        }
  136|  13.4k|        return {};
  137|  13.8k|    }
_ZN3scn2v24impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
  141|  13.8k|    {
  142|  13.8k|        return static_cast<Derived&>(*this);
  143|  13.8k|    }
_ZN3scn2v24impl22transcode_if_necessaryIwcEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
   87|    384|{
   88|    384|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (88:19): [Folded - Ignored]
  ------------------
   89|    384|        if (source.stores_allocated_string()) {
   90|    384|            dest.assign(SCN_MOVE(source.get_allocated_string()));
   91|    384|        }
   92|    384|        else {
   93|    384|            dest.assign(source.view());
   94|    384|        }
   95|    384|    }
   96|    384|    else {
   97|    384|        return transcode_impl(source.view(), dest);
   98|    384|    }
   99|       |
  100|      0|    return {};
  101|    384|}
_ZN3scn2v24impl22transcode_if_necessaryIwwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
   87|    384|{
   88|    384|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (88:19): [Folded - Ignored]
  ------------------
   89|    384|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (89:13): [True: 384, False: 0]
  ------------------
   90|    384|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  246|    384|    static_cast<    \
  |  |  247|    384|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   91|    384|        }
   92|      0|        else {
   93|      0|            dest.assign(source.view());
   94|      0|        }
   95|    384|    }
   96|    384|    else {
   97|    384|        return transcode_impl(source.view(), dest);
   98|    384|    }
   99|       |
  100|    384|    return {};
  101|    384|}

_ZN3scn2v24impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
  639|  1.29k|{
  640|  1.29k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  641|  1.29k|                                  m_nan_payload_buffer, value);
  642|  1.29k|    value = this->setsign(value);
  643|  1.29k|    return n;
  644|  1.29k|}
_ZN3scn2v24impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
  639|  1.04k|{
  640|  1.04k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  641|  1.04k|                                  m_nan_payload_buffer, value);
  642|  1.04k|    value = this->setsign(value);
  643|  1.04k|    return n;
  644|  1.04k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  556|  1.29k|{
  557|  1.29k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (557:9): [True: 0, False: 1.29k]
  ------------------
  558|      0|        value = std::numeric_limits<T>::infinity();
  559|      0|        return 3;
  560|      0|    }
  561|  1.29k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (561:9): [True: 0, False: 1.29k]
  ------------------
  562|      0|        value = std::numeric_limits<T>::infinity();
  563|      0|        return 8;
  564|      0|    }
  565|  1.29k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (565:9): [True: 0, False: 1.29k]
  ------------------
  566|      0|        value = std::numeric_limits<T>::quiet_NaN();
  567|      0|        return 3;
  568|      0|    }
  569|  1.29k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (569:9): [True: 0, False: 1.29k]
  ------------------
  570|      0|        value = std::numeric_limits<T>::quiet_NaN();
  571|       |
  572|       |        // TODO: use payload
  573|       |#if 0
  574|       |                    {
  575|       |                        auto reader = integer_reader<CharT>{
  576|       |                            integer_reader_base::only_unsigned, 0};
  577|       |                        if (auto r = reader.read_source(
  578|       |                                detail::tag_type<unsigned long long>{},
  579|       |                                nan_payload.view());
  580|       |                            SCN_UNLIKELY(!r)) {
  581|       |                            return unexpected(r.error());
  582|       |                        }
  583|       |
  584|       |                        unsigned long long payload;
  585|       |                        if (auto r = reader.parse_value(payload);
  586|       |                            SCN_UNLIKELY(!r)) {
  587|       |                            return unexpected(r.error());
  588|       |                        }
  589|       |
  590|       |                        constexpr auto mantissa_payload_len =
  591|       |                            std::numeric_limits<T>::digits - 2;
  592|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  593|       |
  594|       |
  595|       |                    }
  596|       |#endif
  597|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  227|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  598|       |
  599|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  600|      0|    }
  601|       |
  602|  1.29k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  242|  1.29k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.29k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  603|  1.29k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (603:9): [True: 20, False: 1.27k]
  ------------------
  604|     20|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  153|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 20, False: 0]
  |  |  ------------------
  ------------------
  605|     20|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  606|     20|                                         "Invalid floating-point digit");
  607|     20|        }
  608|     20|    }
  609|  1.27k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  153|  1.27k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.27k, False: 0]
  |  |  ------------------
  ------------------
  610|  1.27k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  611|  1.27k|                                     "Invalid floating-point digit");
  612|  1.27k|    }
  613|       |
  614|      0|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (614:19): [Folded - Ignored]
  ------------------
  615|      0|        if constexpr (sizeof(double) == sizeof(long double)) {
  616|       |            // If double == long double (true on Windows),
  617|       |            // use fast_float with double
  618|      0|            double tmp{};
  619|      0|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  620|      0|            value = tmp;
  621|      0|            return ret;
  622|      0|        }
  623|      0|        else {
  624|       |            // long doubles aren't supported by fast_float ->
  625|       |            // fall back to from_chars or strtod
  626|      0|            return fast_float_fallback(data, value);
  627|      0|        }
  628|      0|    }
  629|      0|    else {
  630|       |        // Default to fast_float
  631|      0|        return fast_float_impl<CharT, T>{data}(value);
  632|      0|    }
  633|      0|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  556|  1.04k|{
  557|  1.04k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (557:9): [True: 0, False: 1.04k]
  ------------------
  558|      0|        value = std::numeric_limits<T>::infinity();
  559|      0|        return 3;
  560|      0|    }
  561|  1.04k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (561:9): [True: 0, False: 1.04k]
  ------------------
  562|      0|        value = std::numeric_limits<T>::infinity();
  563|      0|        return 8;
  564|      0|    }
  565|  1.04k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (565:9): [True: 0, False: 1.04k]
  ------------------
  566|      0|        value = std::numeric_limits<T>::quiet_NaN();
  567|      0|        return 3;
  568|      0|    }
  569|  1.04k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (569:9): [True: 0, False: 1.04k]
  ------------------
  570|      0|        value = std::numeric_limits<T>::quiet_NaN();
  571|       |
  572|       |        // TODO: use payload
  573|       |#if 0
  574|       |                    {
  575|       |                        auto reader = integer_reader<CharT>{
  576|       |                            integer_reader_base::only_unsigned, 0};
  577|       |                        if (auto r = reader.read_source(
  578|       |                                detail::tag_type<unsigned long long>{},
  579|       |                                nan_payload.view());
  580|       |                            SCN_UNLIKELY(!r)) {
  581|       |                            return unexpected(r.error());
  582|       |                        }
  583|       |
  584|       |                        unsigned long long payload;
  585|       |                        if (auto r = reader.parse_value(payload);
  586|       |                            SCN_UNLIKELY(!r)) {
  587|       |                            return unexpected(r.error());
  588|       |                        }
  589|       |
  590|       |                        constexpr auto mantissa_payload_len =
  591|       |                            std::numeric_limits<T>::digits - 2;
  592|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  593|       |
  594|       |
  595|       |                    }
  596|       |#endif
  597|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  227|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  598|       |
  599|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  600|      0|    }
  601|       |
  602|  1.04k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  242|  1.04k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.04k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  603|  1.04k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (603:9): [True: 18, False: 1.02k]
  ------------------
  604|     18|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  153|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 18, False: 0]
  |  |  ------------------
  ------------------
  605|     18|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  606|     18|                                         "Invalid floating-point digit");
  607|     18|        }
  608|     18|    }
  609|  1.02k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  153|  1.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.02k, False: 0]
  |  |  ------------------
  ------------------
  610|  1.02k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  611|  1.02k|                                     "Invalid floating-point digit");
  612|  1.02k|    }
  613|       |
  614|      0|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (614:19): [Folded - Ignored]
  ------------------
  615|      0|        if constexpr (sizeof(double) == sizeof(long double)) {
  616|       |            // If double == long double (true on Windows),
  617|       |            // use fast_float with double
  618|      0|            double tmp{};
  619|      0|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  620|      0|            value = tmp;
  621|      0|            return ret;
  622|      0|        }
  623|      0|        else {
  624|       |            // long doubles aren't supported by fast_float ->
  625|       |            // fall back to from_chars or strtod
  626|      0|            return fast_float_fallback(data, value);
  627|      0|        }
  628|      0|    }
  629|      0|    else {
  630|       |        // Default to fast_float
  631|      0|        return fast_float_impl<CharT, T>{data}(value);
  632|      0|    }
  633|      0|}

_ZN3scn2v24impl12float_readerIcEC2Ev:
   64|  1.12k|    constexpr float_reader() = default;
_ZN3scn2v24impl17float_reader_baseC2Ev:
   50|  1.99k|    constexpr float_reader_base() = default;
_ZN3scn2v24impl12float_readerIcE11read_sourceIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_NS0_6detail10locale_refE:
   72|  1.31k|    {
   73|  1.31k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  153|  1.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.31k]
  |  |  ------------------
  ------------------
   74|      0|            m_locale_options = localized_number_formatting_options<CharT>{
   75|      0|                classic_with_thsep_tag{}};
   76|      0|        }
   77|       |
   78|  1.31k|        return read_source_impl(range);
   79|  1.31k|    }
_ZN3scn2v24impl12float_readerIcE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  111|  1.33k|    {
  112|  1.33k|        SCN_TRY(sign_result,
  ------------------
  |  |   71|  1.33k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.33k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.33k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 1.33k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  1.33k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  1.33k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
  114|  1.33k|        auto it = sign_result.first;
  115|  1.33k|        m_sign = sign_result.second;
  116|       |
  117|  1.33k|        auto digits_begin = it;
  118|  1.33k|        auto r = ranges::subrange{it, ranges::end(range)};
  119|  1.33k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (119:23): [Folded - Ignored]
  |  Branch (119:23): [Folded - Ignored]
  ------------------
  120|  1.33k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|  1.33k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  153|  2.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.33k]
  |  |  |  Branch (153:45): [True: 0, False: 1.33k]
  |  |  |  Branch (153:45): [True: 0, False: 1.33k]
  |  |  ------------------
  ------------------
  122|  1.33k|                             m_locale_options.decimal_point != CharT{'.'})) {
  123|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   69|      0|    }                                                  \
  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
  124|      0|                    it,
  125|      0|                    do_read_source_impl(
  126|      0|                        r,
  127|      0|                        [&](auto&& rr) {
  128|      0|                            return read_regular_float(SCN_FWD(rr));
  129|      0|                        },
  130|      0|                        [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  131|      0|            }
  132|  1.33k|            else {
  133|  1.33k|                auto cb = [&](auto&& rr)
  134|  1.33k|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|  1.33k|                    auto res = read_all(rr);
  136|  1.33k|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  137|  1.33k|                        return unexpected_scan_error(
  138|  1.33k|                            scan_error::invalid_scanned_value,
  139|  1.33k|                            "Invalid float value");
  140|  1.33k|                    }
  141|  1.33k|                    return res;
  142|  1.33k|                };
  143|  1.33k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  |   66|  1.33k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |   67|  1.33k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  153|  1.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (153:25): [True: 38, False: 1.29k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|     38|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  |   63|     38|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|     38|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   61|     38|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   69|     38|    }                                                  \
  |  |   70|  1.33k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  248|  1.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
  144|  1.29k|            }
  145|  1.33k|        }
  146|  1.29k|        else {
  147|  1.29k|            SCN_TRY_ASSIGN(
  148|  1.29k|                it,
  149|  1.29k|                do_read_source_impl(
  150|  1.29k|                    r,
  151|  1.29k|                    [&](auto&& rr) { return read_regular_float(SCN_FWD(rr)); },
  152|  1.29k|                    [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  153|  1.29k|        }
  154|       |
  155|  1.29k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|  1.29k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.29k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|       |
  157|  1.29k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (157:13): [True: 1.29k, False: 0]
  |  Branch (157:48): [True: 1.29k, False: 0]
  ------------------
  158|  1.29k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (158:13): [True: 1.29k, False: 0]
  ------------------
  159|  1.29k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (159:13): [True: 1.29k, False: 0]
  ------------------
  160|  1.29k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
  161|  1.29k|        }
  162|       |
  163|  1.29k|        handle_separators();
  164|       |
  165|  1.29k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (165:13): [True: 0, False: 1.29k]
  ------------------
  166|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  167|      0|            if (auto e = check_thsep_grouping(
  168|      0|                    ranges::subrange{
  169|      0|                        digits_begin,
  170|      0|                        ranges::next(digits_begin, m_integral_part_length)},
  171|      0|                    m_thsep_indices, m_locale_options.grouping);
  172|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  173|      0|                return unexpected(e);
  174|      0|            }
  175|      0|        }
  176|       |
  177|  1.29k|        return it;
  178|  1.29k|    }
_ZN3scn2v24impl12float_readerIcE8read_infIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  225|  1.33k|    {
  226|  1.33k|        auto it = ranges::begin(range);
  227|  1.33k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (227:73): [True: 1.33k, False: 0]
  ------------------
  228|  1.33k|            return unexpected(r.error());
  229|  1.33k|        }
  230|      0|        else {
  231|      0|            it = *r;
  232|      0|        }
  233|       |
  234|      0|        if (auto r = read_matching_string_classic_nocase(
  235|      0|                ranges::subrange{it, ranges::end(range)}, "inity");
  236|      0|            !r) {
  ------------------
  |  Branch (236:13): [True: 0, False: 0]
  ------------------
  237|      0|            m_kind = float_kind::inf_short;
  238|      0|            return it;
  239|      0|        }
  240|      0|        else {
  241|      0|            m_kind = float_kind::inf_long;
  242|      0|            return *r;
  243|      0|        }
  244|      0|    }
_ZN3scn2v24impl12float_readerIcE8read_nanIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  248|  1.33k|    {
  249|  1.33k|        auto it = ranges::begin(range);
  250|  1.33k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (250:73): [True: 1.33k, False: 0]
  ------------------
  251|  1.33k|            return r.transform_error(map_parse_error_to_scan_error(
  252|  1.33k|                scan_error::invalid_scanned_value,
  253|  1.33k|                "Invalid floating-point NaN value"));
  254|  1.33k|        }
  255|      0|        else {
  256|      0|            it = *r;
  257|      0|        }
  258|       |
  259|      0|        if (auto r = read_matching_code_unit(
  260|      0|                ranges::subrange{it, ranges::end(range)}, '(');
  261|      0|            !r) {
  ------------------
  |  Branch (261:13): [True: 0, False: 0]
  ------------------
  262|      0|            m_kind = float_kind::nan_simple;
  263|      0|            return it;
  264|      0|        }
  265|      0|        else {
  266|      0|            it = *r;
  267|      0|        }
  268|       |
  269|      0|        auto payload_beg_it = it;
  270|      0|        it = read_while_code_unit(
  271|      0|            ranges::subrange{it, ranges::end(range)},
  272|      0|            [](char_type ch) SCN_NOEXCEPT {
  273|      0|                return is_ascii_char(ch) &&
  274|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  275|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  276|      0|            });
  277|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
  278|       |
  279|      0|        m_kind = float_kind::nan_with_payload;
  280|      0|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (280:18): [True: 0, False: 0]
  ------------------
  281|      0|                ranges::subrange{it, ranges::end(range)}, ')')) {
  282|      0|            return *r;
  283|      0|        }
  284|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  285|      0|                                     "Invalid floating-point NaN payload");
  286|      0|    }
_ZN3scn2v24impl12float_readerIcE15read_hex_prefixIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  219|  1.29k|    {
  220|  1.29k|        return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|  1.29k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  221|  1.29k|    }
_ZN3scn2v24impl12float_readerIcE18read_regular_floatIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  364|     38|    {
  365|     38|        const bool allowed_exp = (m_options & allow_scientific) != 0;
  366|     38|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (366:35): [True: 6, False: 32]
  |  Branch (366:50): [True: 2, False: 4]
  ------------------
  367|       |
  368|     38|        auto it = ranges::begin(range);
  369|     38|        std::ptrdiff_t digits_count = 0;
  370|       |
  371|     38|        if (auto r =
  372|     38|                read_dec_digits(ranges::subrange{it, ranges::end(range)}, true);
  373|     38|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 38, False: 0]
  |  |  ------------------
  ------------------
  374|     38|            return r.transform_error(
  375|     38|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
  376|     38|                                              "Invalid floating-point value"));
  377|     38|        }
  378|      0|        else {
  379|      0|            digits_count += ranges::distance(it, *r);
  380|      0|            it = *r;
  381|      0|        }
  382|       |
  383|      0|        m_integral_part_length = digits_count;
  384|      0|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (384:18): [True: 0, False: 0]
  ------------------
  385|      0|                ranges::subrange{it, ranges::end(range)},
  386|      0|                m_locale_options.decimal_point)) {
  387|      0|            it = *r;
  388|      0|        }
  389|       |
  390|      0|        if (auto r = read_dec_digits(ranges::subrange{it, ranges::end(range)},
  ------------------
  |  Branch (390:18): [True: 0, False: 0]
  ------------------
  391|      0|                                     false)) {
  392|      0|            digits_count += ranges::distance(it, *r);
  393|      0|            it = *r;
  394|      0|        }
  395|       |
  396|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  397|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  398|      0|                                         "No significand digits in float");
  399|      0|        }
  400|       |
  401|      0|        auto beg_exp_it = it;
  402|      0|        if (allowed_exp) {
  ------------------
  |  Branch (402:13): [True: 0, False: 0]
  ------------------
  403|      0|            it = read_exponent(ranges::subrange{it, ranges::end(range)}, "eE");
  404|      0|        }
  405|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (405:13): [True: 0, False: 0]
  |  Branch (405:29): [True: 0, False: 0]
  ------------------
  406|      0|            return unexpected_scan_error(
  407|      0|                scan_error::invalid_scanned_value,
  408|      0|                "No exponent given to scientific float");
  409|      0|        }
  410|       |
  411|      0|        m_kind =
  412|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (412:13): [True: 0, False: 0]
  ------------------
  413|       |
  414|      0|        return it;
  415|      0|    }
_ZN3scn2v24impl12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
  184|     38|    {
  185|     38|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  153|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 38]
  |  |  |  Branch (153:45): [True: 0, False: 38]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  186|     38|                         thsep_allowed)) {
  187|      0|            return read_while1_code_unit(
  188|      0|                SCN_FWD(range), [&](char_type ch) SCN_NOEXCEPT {
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  189|      0|                    return char_to_int(ch) < 10 ||
  190|      0|                           ch == m_locale_options.thousands_sep;
  191|      0|                });
  192|      0|        }
  193|       |
  194|     38|        return read_while1_code_unit(
  195|     38|            SCN_FWD(range),
  ------------------
  |  |  248|     38|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  196|     38|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
  197|     38|    }
_ZZN3scn2v24impl12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_bENKUlcE0_clEc:
  196|     38|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
_ZN3scn2v24impl12float_readerIcE19do_read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEERZNS3_16read_source_implISD_EENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_EUlSL_E1_SN_EESK_SL_OT0_OT1_:
  422|  1.33k|    {
  423|  1.33k|        const bool allowed_hex = (m_options & allow_hex) != 0;
  424|  1.33k|        const bool allowed_nonhex =
  425|  1.33k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
  426|  1.33k|             ~static_cast<unsigned>(allow_hex)) != 0;
  427|       |
  428|  1.33k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (428:39): [True: 1.33k, False: 0]
  |  Branch (428:45): [True: 0, False: 1.33k]
  ------------------
  429|      0|            return r.transform_error(map_parse_error_to_scan_error(
  430|      0|                scan_error::invalid_scanned_value,
  431|      0|                "Invalid infinite floating-point value"));
  432|      0|        }
  433|  1.33k|        else if (r) {
  ------------------
  |  Branch (433:18): [True: 0, False: 1.33k]
  ------------------
  434|      0|            return *r;
  435|      0|        }
  436|       |
  437|  1.33k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (437:39): [True: 1.33k, False: 0]
  |  Branch (437:45): [True: 0, False: 1.33k]
  ------------------
  438|      0|            return unexpected(r.error());
  439|      0|        }
  440|  1.33k|        else if (r) {
  ------------------
  |  Branch (440:18): [True: 0, False: 1.33k]
  ------------------
  441|      0|            return *r;
  442|      0|        }
  443|       |
  444|  1.33k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (444:13): [True: 1.29k, False: 38]
  |  Branch (444:28): [True: 20, False: 1.27k]
  ------------------
  445|       |            // only hex allowed:
  446|       |            // prefix "0x" allowed, not required
  447|     20|            auto it = ranges::begin(range);
  448|       |
  449|     20|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (449:22): [True: 0, False: 20]
  ------------------
  450|      0|                m_kind = float_kind::hex_with_prefix;
  451|      0|                it = *r;
  452|      0|            }
  453|     20|            else {
  454|     20|                m_kind = float_kind::hex_without_prefix;
  455|     20|            }
  456|       |
  457|     20|            return read_hex(ranges::subrange{it, ranges::end(range)});
  458|     20|        }
  459|  1.31k|        else if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (459:18): [True: 38, False: 1.27k]
  |  Branch (459:34): [True: 38, False: 0]
  ------------------
  460|       |            // only nonhex allowed:
  461|       |            // no prefix allowed
  462|     38|            m_kind = float_kind::generic;
  463|     38|            return read_regular_float(SCN_FWD(range));
  ------------------
  |  |  248|     38|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  464|     38|        }
  465|  1.27k|        else {
  466|       |            // both hex and nonhex allowed:
  467|       |            // check for "0x" prefix -> hex,
  468|       |            // regular otherwise
  469|       |
  470|  1.27k|            if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  153|  1.27k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.27k]
  |  |  ------------------
  ------------------
  471|      0|                m_kind = float_kind::hex_with_prefix;
  472|      0|                return read_hex(ranges::subrange{*r, ranges::end(range)});
  473|      0|            }
  474|       |
  475|  1.27k|            m_kind = float_kind::generic;
  476|  1.27k|            return read_regular(SCN_FWD(range));
  ------------------
  |  |  248|  1.27k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  477|  1.27k|        }
  478|  1.33k|    }
_ZZN3scn2v24impl12float_readerIcE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_ENKUlSK_E1_clISC_EENSE_INSF_IDtfp_EXsr6rangesE14borrowed_rangeISN_EEE4typeEEESK_:
  134|     20|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|     20|                    auto res = read_all(rr);
  136|     20|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  ------------------
  |  |  153|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 20]
  |  |  ------------------
  ------------------
  137|      0|                        return unexpected_scan_error(
  138|      0|                            scan_error::invalid_scanned_value,
  139|      0|                            "Invalid float value");
  140|      0|                    }
  141|     20|                    return res;
  142|     20|                };
_ZZN3scn2v24impl12float_readerIcE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_ENKUlSK_E1_clISD_EENSE_INSF_IDtfp_EXsr6rangesE14borrowed_rangeISN_EEE4typeEEESK_:
  134|  1.27k|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|  1.27k|                    auto res = read_all(rr);
  136|  1.27k|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  ------------------
  |  |  153|  1.27k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.27k]
  |  |  ------------------
  ------------------
  137|      0|                        return unexpected_scan_error(
  138|      0|                            scan_error::invalid_scanned_value,
  139|      0|                            "Invalid float value");
  140|      0|                    }
  141|  1.27k|                    return res;
  142|  1.27k|                };
_ZN3scn2v24impl12float_readerIcE17handle_separatorsEv:
  481|  1.29k|    {
  482|  1.29k|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (482:13): [True: 1.29k, False: 0]
  ------------------
  483|  1.29k|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (483:13): [True: 1.29k, False: 0]
  ------------------
  484|  1.29k|            return;
  485|  1.29k|        }
  486|       |
  487|      0|        auto& str = this->m_buffer.make_into_allocated_string();
  488|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (488:13): [True: 0, False: 0]
  ------------------
  489|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (489:27): [True: 0, False: 0]
  ------------------
  490|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (490:21): [True: 0, False: 0]
  ------------------
  491|      0|                    ch = CharT{'.'};
  492|      0|                }
  493|      0|            }
  494|      0|        }
  495|       |
  496|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (496:13): [True: 0, False: 0]
  ------------------
  497|      0|            return;
  498|      0|        }
  499|       |
  500|      0|        auto first = ranges::find(str, m_locale_options.thousands_sep);
  501|      0|        if (first == str.end()) {
  ------------------
  |  Branch (501:13): [True: 0, False: 0]
  ------------------
  502|      0|            return;
  503|      0|        }
  504|       |
  505|      0|        m_thsep_indices.push_back(
  506|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
  507|       |
  508|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (508:31): [True: 0, False: 0]
  ------------------
  509|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (509:17): [True: 0, False: 0]
  ------------------
  510|      0|                *first++ = std::move(*it);
  511|      0|            }
  512|      0|            else {
  513|      0|                m_thsep_indices.push_back(
  514|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
  515|      0|            }
  516|      0|        }
  517|       |
  518|      0|        str.erase(first, str.end());
  519|      0|    }
_ZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  576|  1.12k|    {
  577|  1.12k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  1.12k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|  1.12k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|  1.12k|        float_reader<CharT> rd{};
  581|  1.12k|        return read_impl<range_nocvref_t>(
  582|  1.12k|            range, rd,
  583|  1.12k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  1.12k|                return r.read_source(SCN_FWD(args)...);
  585|  1.12k|            },
  586|  1.12k|            value);
  587|  1.12k|    }
_ZN3scn2v24impl21reader_impl_for_floatIcE9read_implIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSI_SL_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEERT0_SO_:
  632|  1.33k|    {
  633|  1.33k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|  1.33k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  1.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 38, False: 1.29k]
  |  |  ------------------
  ------------------
  635|     38|            return unexpected(r.error());
  636|     38|        }
  637|       |
  638|  1.29k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|  1.29k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.29k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.29k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.29k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.29k|    }                                                  \
  |  |  |  |   70|  1.29k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|      0|        return ranges::next(ranges::begin(range), n);
  640|  1.29k|    }
_ZN3scn2v24impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
   97|  1.29k|    {
   98|  1.29k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|  1.29k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.29k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   99|       |
  100|      0|        const std::ptrdiff_t sign_len =
  101|  1.29k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (101:13): [True: 0, False: 1.29k]
  ------------------
  102|       |
  103|  1.29k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  |   71|  1.29k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.29k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.29k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.29k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.29k|    }                                                  \
  |  |  |  |   70|  1.29k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  104|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
  105|  1.29k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSC_SN_EEEDaSQ_ST_:
  583|  1.12k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  1.12k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  1.12k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|  1.12k|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  569|  6.21k|    {
  570|  6.21k|        detail::check_float_type_specs(specs, eh);
  571|  6.21k|    }
_ZN3scn2v24impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
  643|    498|    {
  644|    498|        unsigned options{};
  645|    498|        if (specs.localized) {
  ------------------
  |  Branch (645:13): [True: 30, False: 468]
  ------------------
  646|     30|            options |= float_reader_base::allow_thsep;
  647|     30|        }
  648|       |
  649|    498|        SCN_GCC_COMPAT_PUSH
  650|    498|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
  651|       |
  652|    498|        switch (specs.type) {
  653|     34|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (653:13): [True: 34, False: 464]
  ------------------
  654|     34|                return options | float_reader_base::allow_fixed;
  655|       |
  656|      4|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (656:13): [True: 4, False: 494]
  ------------------
  657|      4|                return options | float_reader_base::allow_scientific;
  658|       |
  659|     22|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (659:13): [True: 22, False: 476]
  ------------------
  660|     22|                return options | float_reader_base::allow_hex;
  661|       |
  662|      6|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (662:13): [True: 6, False: 492]
  ------------------
  663|      6|                return options | float_reader_base::allow_scientific |
  664|      6|                       float_reader_base::allow_fixed;
  665|       |
  666|    432|            case detail::presentation_type::none:
  ------------------
  |  Branch (666:13): [True: 432, False: 66]
  ------------------
  667|    432|                return options | float_reader_base::allow_scientific |
  668|    432|                       float_reader_base::allow_fixed |
  669|    432|                       float_reader_base::allow_hex;
  670|       |
  671|      0|            default:
  ------------------
  |  Branch (671:13): [True: 0, False: 498]
  ------------------
  672|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  673|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  674|    498|        }
  675|       |
  676|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
  677|    498|    }
_ZN3scn2v24impl12float_readerIcEC2Ej:
   66|    498|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v24impl17float_reader_baseC2Ej:
   51|    928|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v24impl12float_readerIcE21read_source_localizedINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESH_NS0_6detail10locale_refE:
   85|      6|    {
   86|      6|        m_locale_options = localized_number_formatting_options<CharT>{loc};
   87|      6|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  152|      6|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 6]
  |  |  ------------------
  ------------------
   88|      0|            m_locale_options.thousands_sep = CharT{0};
   89|      0|        }
   90|       |
   91|      6|        return read_source_impl(range);
   92|      6|    }
_ZN3scn2v24impl12float_readerIcE16read_source_implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_:
  111|    284|    {
  112|    284|        SCN_TRY(sign_result,
  ------------------
  |  |   71|    284|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    284|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    284|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    284|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 284]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    284|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    284|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|    284|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
  114|    284|        auto it = sign_result.first;
  115|    284|        m_sign = sign_result.second;
  116|       |
  117|    284|        auto digits_begin = it;
  118|    284|        auto r = ranges::subrange{it, ranges::end(range)};
  119|    284|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (119:23): [Folded - Ignored]
  |  Branch (119:23): [Folded - Ignored]
  ------------------
  120|    284|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|    284|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  122|    284|                             m_locale_options.decimal_point != CharT{'.'})) {
  123|    284|                SCN_TRY_ASSIGN(
  124|    284|                    it,
  125|    284|                    do_read_source_impl(
  126|    284|                        r,
  127|    284|                        [&](auto&& rr) {
  128|    284|                            return read_regular_float(SCN_FWD(rr));
  129|    284|                        },
  130|    284|                        [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  131|    284|            }
  132|    284|            else {
  133|    284|                auto cb = [&](auto&& rr)
  134|    284|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|    284|                    auto res = read_all(rr);
  136|    284|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  137|    284|                        return unexpected_scan_error(
  138|    284|                            scan_error::invalid_scanned_value,
  139|    284|                            "Invalid float value");
  140|    284|                    }
  141|    284|                    return res;
  142|    284|                };
  143|    284|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  144|    284|            }
  145|    284|        }
  146|    284|        else {
  147|    284|            SCN_TRY_ASSIGN(
  ------------------
  |  |   66|    284|    auto&& SCN_TRY_TMP = (x);                          \
  |  |   67|    284|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  153|    284|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (153:25): [True: 284, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|    284|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  |   63|    284|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|    284|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   61|    284|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   69|    284|    }                                                  \
  |  |   70|    284|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  248|    284|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
  148|      0|                it,
  149|      0|                do_read_source_impl(
  150|      0|                    r,
  151|      0|                    [&](auto&& rr) { return read_regular_float(SCN_FWD(rr)); },
  152|      0|                    [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  153|      0|        }
  154|       |
  155|      0|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|       |
  157|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (157:13): [True: 0, False: 0]
  |  Branch (157:48): [True: 0, False: 0]
  ------------------
  158|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (158:13): [True: 0, False: 0]
  ------------------
  159|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (159:13): [True: 0, False: 0]
  ------------------
  160|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
  161|      0|        }
  162|       |
  163|      0|        handle_separators();
  164|       |
  165|      0|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (165:13): [True: 0, False: 0]
  ------------------
  166|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  167|      0|            if (auto e = check_thsep_grouping(
  168|      0|                    ranges::subrange{
  169|      0|                        digits_begin,
  170|      0|                        ranges::next(digits_begin, m_integral_part_length)},
  171|      0|                    m_thsep_indices, m_locale_options.grouping);
  172|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  173|      0|                return unexpected(e);
  174|      0|            }
  175|      0|        }
  176|       |
  177|      0|        return it;
  178|      0|    }
_ZN3scn2v24impl12float_readerIcE19do_read_source_implIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_LNS6_13subrange_kindE1EEEE8sentinelILb1EEELSF_0EEEZNS3_16read_source_implIRSH_EENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_EUlSU_E_ZNSM_ISN_EEST_SU_EUlSU_E0_EEST_SU_OT0_OT1_:
  422|    284|    {
  423|    284|        const bool allowed_hex = (m_options & allow_hex) != 0;
  424|    284|        const bool allowed_nonhex =
  425|    284|            (m_options & ~static_cast<unsigned>(allow_thsep) &
  426|    284|             ~static_cast<unsigned>(allow_hex)) != 0;
  427|       |
  428|    284|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (428:39): [True: 284, False: 0]
  |  Branch (428:45): [True: 0, False: 284]
  ------------------
  429|      0|            return r.transform_error(map_parse_error_to_scan_error(
  430|      0|                scan_error::invalid_scanned_value,
  431|      0|                "Invalid infinite floating-point value"));
  432|      0|        }
  433|    284|        else if (r) {
  ------------------
  |  Branch (433:18): [True: 0, False: 284]
  ------------------
  434|      0|            return *r;
  435|      0|        }
  436|       |
  437|    284|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (437:39): [True: 284, False: 0]
  |  Branch (437:45): [True: 0, False: 284]
  ------------------
  438|      0|            return unexpected(r.error());
  439|      0|        }
  440|    284|        else if (r) {
  ------------------
  |  Branch (440:18): [True: 0, False: 284]
  ------------------
  441|      0|            return *r;
  442|      0|        }
  443|       |
  444|    284|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (444:13): [True: 278, False: 6]
  |  Branch (444:28): [True: 2, False: 276]
  ------------------
  445|       |            // only hex allowed:
  446|       |            // prefix "0x" allowed, not required
  447|      2|            auto it = ranges::begin(range);
  448|       |
  449|      2|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (449:22): [True: 0, False: 2]
  ------------------
  450|      0|                m_kind = float_kind::hex_with_prefix;
  451|      0|                it = *r;
  452|      0|            }
  453|      2|            else {
  454|      2|                m_kind = float_kind::hex_without_prefix;
  455|      2|            }
  456|       |
  457|      2|            return read_hex(ranges::subrange{it, ranges::end(range)});
  458|      2|        }
  459|    282|        else if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (459:18): [True: 6, False: 276]
  |  Branch (459:34): [True: 6, False: 0]
  ------------------
  460|       |            // only nonhex allowed:
  461|       |            // no prefix allowed
  462|      6|            m_kind = float_kind::generic;
  463|      6|            return read_regular_float(SCN_FWD(range));
  ------------------
  |  |  248|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  464|      6|        }
  465|    276|        else {
  466|       |            // both hex and nonhex allowed:
  467|       |            // check for "0x" prefix -> hex,
  468|       |            // regular otherwise
  469|       |
  470|    276|            if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  153|    276|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 276]
  |  |  ------------------
  ------------------
  471|      0|                m_kind = float_kind::hex_with_prefix;
  472|      0|                return read_hex(ranges::subrange{*r, ranges::end(range)});
  473|      0|            }
  474|       |
  475|    276|            m_kind = float_kind::generic;
  476|    276|            return read_regular(SCN_FWD(range));
  ------------------
  |  |  248|    276|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  477|    276|        }
  478|    284|    }
_ZN3scn2v24impl12float_readerIcE8read_infIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_LNS6_13subrange_kindE1EEEE8sentinelILb1EEELSF_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISO_EEE4typeEEEOSO_:
  225|    284|    {
  226|    284|        auto it = ranges::begin(range);
  227|    284|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (227:73): [True: 284, False: 0]
  ------------------
  228|    284|            return unexpected(r.error());
  229|    284|        }
  230|      0|        else {
  231|      0|            it = *r;
  232|      0|        }
  233|       |
  234|      0|        if (auto r = read_matching_string_classic_nocase(
  235|      0|                ranges::subrange{it, ranges::end(range)}, "inity");
  236|      0|            !r) {
  ------------------
  |  Branch (236:13): [True: 0, False: 0]
  ------------------
  237|      0|            m_kind = float_kind::inf_short;
  238|      0|            return it;
  239|      0|        }
  240|      0|        else {
  241|      0|            m_kind = float_kind::inf_long;
  242|      0|            return *r;
  243|      0|        }
  244|      0|    }
_ZN3scn2v24impl12float_readerIcE8read_nanIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_LNS6_13subrange_kindE1EEEE8sentinelILb1EEELSF_0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISO_EEE4typeEEEOSO_:
  248|    284|    {
  249|    284|        auto it = ranges::begin(range);
  250|    284|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (250:73): [True: 284, False: 0]
  ------------------
  251|    284|            return r.transform_error(map_parse_error_to_scan_error(
  252|    284|                scan_error::invalid_scanned_value,
  253|    284|                "Invalid floating-point NaN value"));
  254|    284|        }
  255|      0|        else {
  256|      0|            it = *r;
  257|      0|        }
  258|       |
  259|      0|        if (auto r = read_matching_code_unit(
  260|      0|                ranges::subrange{it, ranges::end(range)}, '(');
  261|      0|            !r) {
  ------------------
  |  Branch (261:13): [True: 0, False: 0]
  ------------------
  262|      0|            m_kind = float_kind::nan_simple;
  263|      0|            return it;
  264|      0|        }
  265|      0|        else {
  266|      0|            it = *r;
  267|      0|        }
  268|       |
  269|      0|        auto payload_beg_it = it;
  270|      0|        it = read_while_code_unit(
  271|      0|            ranges::subrange{it, ranges::end(range)},
  272|      0|            [](char_type ch) SCN_NOEXCEPT {
  273|      0|                return is_ascii_char(ch) &&
  274|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  275|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  276|      0|            });
  277|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
  278|       |
  279|      0|        m_kind = float_kind::nan_with_payload;
  280|      0|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (280:18): [True: 0, False: 0]
  ------------------
  281|      0|                ranges::subrange{it, ranges::end(range)}, ')')) {
  282|      0|            return *r;
  283|      0|        }
  284|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  285|      0|                                     "Invalid floating-point NaN payload");
  286|      0|    }
_ZN3scn2v24impl12float_readerIcE15read_hex_prefixIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_LNS6_13subrange_kindE1EEEE8sentinelILb1EEELSF_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISO_EEE4typeEEEOSO_:
  219|    278|    {
  220|    278|        return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|    278|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  221|    278|    }
_ZN3scn2v24impl12float_readerIcE13read_hexfloatIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_LNS6_13subrange_kindE1EEEE8sentinelILb1EEELSF_0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_:
  322|      2|    {
  323|      2|        auto it = ranges::begin(range);
  324|       |
  325|      2|        std::ptrdiff_t digits_count = 0;
  326|      2|        if (auto r =
  327|      2|                read_hex_digits(ranges::subrange{it, ranges::end(range)}, true);
  328|      2|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2, False: 0]
  |  |  ------------------
  ------------------
  329|      2|            return r.transform_error(map_parse_error_to_scan_error(
  330|      2|                scan_error::invalid_scanned_value,
  331|      2|                "Invalid hexadecimal floating-point value"));
  332|      2|        }
  333|      0|        else {
  334|      0|            digits_count += ranges::distance(it, *r);
  335|      0|            it = *r;
  336|      0|        }
  337|       |
  338|      0|        m_integral_part_length = digits_count;
  339|      0|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (339:18): [True: 0, False: 0]
  ------------------
  340|      0|                ranges::subrange{it, ranges::end(range)},
  341|      0|                m_locale_options.decimal_point)) {
  342|      0|            it = *r;
  343|      0|        }
  344|       |
  345|      0|        if (auto r = read_hex_digits(ranges::subrange{it, ranges::end(range)},
  ------------------
  |  Branch (345:18): [True: 0, False: 0]
  ------------------
  346|      0|                                     false)) {
  347|      0|            digits_count += ranges::distance(it, *r);
  348|      0|            it = *r;
  349|      0|        }
  350|       |
  351|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  352|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  353|      0|                                         "No significand digits in hexfloat");
  354|      0|        }
  355|       |
  356|      0|        it = read_exponent(ranges::subrange{it, ranges::end(range)}, "pP");
  357|       |
  358|      0|        return it;
  359|      0|    }
_ZN3scn2v24impl12float_readerIcE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_LNS6_13subrange_kindE1EEEE8sentinelILb1EEELSF_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_b:
  202|      2|    {
  203|      2|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  153|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2]
  |  |  |  Branch (153:45): [True: 0, False: 2]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  204|      2|                         thsep_allowed)) {
  205|      0|            return read_while1_code_unit(
  206|      0|                SCN_FWD(range), [&](char_type ch) SCN_NOEXCEPT {
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  207|      0|                    return char_to_int(ch) < 16 ||
  208|      0|                           ch == m_locale_options.thousands_sep;
  209|      0|                });
  210|      0|        }
  211|       |
  212|      2|        return read_while1_code_unit(
  213|      2|            SCN_FWD(range),
  ------------------
  |  |  248|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  214|      2|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 16; });
  215|      2|    }
_ZZN3scn2v24impl12float_readerIcE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_LNS6_13subrange_kindE1EEEE8sentinelILb1EEELSF_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_bENKUlcE0_clEc:
  214|      2|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 16; });
_ZN3scn2v24impl12float_readerIcE18read_regular_floatIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_LNS6_13subrange_kindE1EEEE8sentinelILb1EEELSF_0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISO_EEE4typeEEEOSO_:
  364|    282|    {
  365|    282|        const bool allowed_exp = (m_options & allow_scientific) != 0;
  366|    282|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (366:35): [True: 280, False: 2]
  |  Branch (366:50): [True: 2, False: 278]
  ------------------
  367|       |
  368|    282|        auto it = ranges::begin(range);
  369|    282|        std::ptrdiff_t digits_count = 0;
  370|       |
  371|    282|        if (auto r =
  372|    282|                read_dec_digits(ranges::subrange{it, ranges::end(range)}, true);
  373|    282|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|    282|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 282, False: 0]
  |  |  ------------------
  ------------------
  374|    282|            return r.transform_error(
  375|    282|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
  376|    282|                                              "Invalid floating-point value"));
  377|    282|        }
  378|      0|        else {
  379|      0|            digits_count += ranges::distance(it, *r);
  380|      0|            it = *r;
  381|      0|        }
  382|       |
  383|      0|        m_integral_part_length = digits_count;
  384|      0|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (384:18): [True: 0, False: 0]
  ------------------
  385|      0|                ranges::subrange{it, ranges::end(range)},
  386|      0|                m_locale_options.decimal_point)) {
  387|      0|            it = *r;
  388|      0|        }
  389|       |
  390|      0|        if (auto r = read_dec_digits(ranges::subrange{it, ranges::end(range)},
  ------------------
  |  Branch (390:18): [True: 0, False: 0]
  ------------------
  391|      0|                                     false)) {
  392|      0|            digits_count += ranges::distance(it, *r);
  393|      0|            it = *r;
  394|      0|        }
  395|       |
  396|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  397|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  398|      0|                                         "No significand digits in float");
  399|      0|        }
  400|       |
  401|      0|        auto beg_exp_it = it;
  402|      0|        if (allowed_exp) {
  ------------------
  |  Branch (402:13): [True: 0, False: 0]
  ------------------
  403|      0|            it = read_exponent(ranges::subrange{it, ranges::end(range)}, "eE");
  404|      0|        }
  405|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (405:13): [True: 0, False: 0]
  |  Branch (405:29): [True: 0, False: 0]
  ------------------
  406|      0|            return unexpected_scan_error(
  407|      0|                scan_error::invalid_scanned_value,
  408|      0|                "No exponent given to scientific float");
  409|      0|        }
  410|       |
  411|      0|        m_kind =
  412|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (412:13): [True: 0, False: 0]
  ------------------
  413|       |
  414|      0|        return it;
  415|      0|    }
_ZN3scn2v24impl12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_LNS6_13subrange_kindE1EEEE8sentinelILb1EEELSF_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_b:
  184|    282|    {
  185|    282|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  153|    282|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 282]
  |  |  |  Branch (153:45): [True: 0, False: 282]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  186|    282|                         thsep_allowed)) {
  187|      0|            return read_while1_code_unit(
  188|      0|                SCN_FWD(range), [&](char_type ch) SCN_NOEXCEPT {
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  189|      0|                    return char_to_int(ch) < 10 ||
  190|      0|                           ch == m_locale_options.thousands_sep;
  191|      0|                });
  192|      0|        }
  193|       |
  194|    282|        return read_while1_code_unit(
  195|    282|            SCN_FWD(range),
  ------------------
  |  |  248|    282|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  196|    282|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
  197|    282|    }
_ZZN3scn2v24impl12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_LNS6_13subrange_kindE1EEEE8sentinelILb1EEELSF_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_bENKUlcE0_clEc:
  196|    282|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
_ZN3scn2v24impl12float_readerIcE11read_sourceINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESH_NS0_6detail10locale_refE:
   72|    278|    {
   73|    278|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  153|    278|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 278]
  |  |  ------------------
  ------------------
   74|      0|            m_locale_options = localized_number_formatting_options<CharT>{
   75|      0|                classic_with_thsep_tag{}};
   76|      0|        }
   77|       |
   78|    278|        return read_source_impl(range);
   79|    278|    }
_ZN3scn2v24impl12float_readerIcE21read_source_localizedIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_NS0_6detail10locale_refE:
   85|     24|    {
   86|     24|        m_locale_options = localized_number_formatting_options<CharT>{loc};
   87|     24|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  152|     24|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 24]
  |  |  ------------------
  ------------------
   88|      0|            m_locale_options.thousands_sep = CharT{0};
   89|      0|        }
   90|       |
   91|     24|        return read_source_impl(range);
   92|     24|    }
_ZN3scn2v24impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RKNS0_6detail12format_specsERT0_NSM_10locale_refE:
  595|    284|    {
  596|    284|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|    284|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|    284|#if !SCN_DISABLE_LOCALE
  600|    284|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 6, False: 278]
  ------------------
  601|      6|            return read_impl<range_nocvref_t>(
  602|      6|                range, rd,
  603|      6|                [](float_reader<CharT>& r, auto&&... args) {
  604|      6|                    return r.read_source_localized(SCN_FWD(args)...);
  605|      6|                },
  606|      6|                value, loc);
  607|      6|        }
  608|    278|#endif
  609|       |
  610|    278|        return read_impl<range_nocvref_t>(
  611|    278|            range, rd,
  612|    278|            [](float_reader<CharT>& r, auto&&... args) {
  613|    278|                return r.read_source(SCN_FWD(args)...);
  614|    278|            },
  615|    278|            value);
  616|    284|    }
_ZN3scn2v24impl21reader_impl_for_floatIcE9read_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEdEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESH_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
  632|    284|    {
  633|    284|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|    284|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|    284|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 284, False: 0]
  |  |  ------------------
  ------------------
  635|    284|            return unexpected(r.error());
  636|    284|        }
  637|       |
  638|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|      0|        return ranges::next(ranges::begin(range), n);
  640|      0|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RKNS0_6detail12format_specsERT0_NSM_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SS_EEEDaSV_SY_:
  603|      6|                [](float_reader<CharT>& r, auto&&... args) {
  604|      6|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|      6|                },
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RKNS0_6detail12format_specsERT0_NSM_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_SS_EEEDaSV_SY_:
  612|    278|            [](float_reader<CharT>& r, auto&&... args) {
  613|    278|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|    278|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|    278|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  595|    214|    {
  596|    214|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|    214|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|    214|#if !SCN_DISABLE_LOCALE
  600|    214|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 24, False: 190]
  ------------------
  601|     24|            return read_impl<range_nocvref_t>(
  602|     24|                range, rd,
  603|     24|                [](float_reader<CharT>& r, auto&&... args) {
  604|     24|                    return r.read_source_localized(SCN_FWD(args)...);
  605|     24|                },
  606|     24|                value, loc);
  607|     24|        }
  608|    190|#endif
  609|       |
  610|    190|        return read_impl<range_nocvref_t>(
  611|    190|            range, rd,
  612|    190|            [](float_reader<CharT>& r, auto&&... args) {
  613|    190|                return r.read_source(SCN_FWD(args)...);
  614|    190|            },
  615|    190|            value);
  616|    214|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSC_SR_EEEDaSU_SX_:
  603|     24|                [](float_reader<CharT>& r, auto&&... args) {
  604|     24|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|     24|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|     24|                },
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSC_SR_EEEDaSU_SX_:
  612|    190|            [](float_reader<CharT>& r, auto&&... args) {
  613|    190|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|    190|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|    190|            },
_ZN3scn2v24impl12float_readerIwEC2Ev:
   64|    872|    constexpr float_reader() = default;
_ZN3scn2v24impl12float_readerIwE11read_sourceIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_NS0_6detail10locale_refE:
   72|  1.05k|    {
   73|  1.05k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  153|  1.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.05k]
  |  |  ------------------
  ------------------
   74|      0|            m_locale_options = localized_number_formatting_options<CharT>{
   75|      0|                classic_with_thsep_tag{}};
   76|      0|        }
   77|       |
   78|  1.05k|        return read_source_impl(range);
   79|  1.05k|    }
_ZN3scn2v24impl12float_readerIwE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  111|  1.07k|    {
  112|  1.07k|        SCN_TRY(sign_result,
  ------------------
  |  |   71|  1.07k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.07k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.07k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 1.07k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  1.07k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.07k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  1.07k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
  114|  1.07k|        auto it = sign_result.first;
  115|  1.07k|        m_sign = sign_result.second;
  116|       |
  117|  1.07k|        auto digits_begin = it;
  118|  1.07k|        auto r = ranges::subrange{it, ranges::end(range)};
  119|  1.07k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (119:23): [Folded - Ignored]
  |  Branch (119:23): [Folded - Ignored]
  ------------------
  120|  1.07k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|  1.07k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  153|  2.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.07k]
  |  |  |  Branch (153:45): [True: 0, False: 1.07k]
  |  |  |  Branch (153:45): [True: 0, False: 1.07k]
  |  |  ------------------
  ------------------
  122|  1.07k|                             m_locale_options.decimal_point != CharT{'.'})) {
  123|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   69|      0|    }                                                  \
  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
  124|      0|                    it,
  125|      0|                    do_read_source_impl(
  126|      0|                        r,
  127|      0|                        [&](auto&& rr) {
  128|      0|                            return read_regular_float(SCN_FWD(rr));
  129|      0|                        },
  130|      0|                        [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  131|      0|            }
  132|  1.07k|            else {
  133|  1.07k|                auto cb = [&](auto&& rr)
  134|  1.07k|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|  1.07k|                    auto res = read_all(rr);
  136|  1.07k|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  137|  1.07k|                        return unexpected_scan_error(
  138|  1.07k|                            scan_error::invalid_scanned_value,
  139|  1.07k|                            "Invalid float value");
  140|  1.07k|                    }
  141|  1.07k|                    return res;
  142|  1.07k|                };
  143|  1.07k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  |   66|  1.07k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |   67|  1.07k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  153|  1.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (153:25): [True: 36, False: 1.04k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|     36|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  |   63|     36|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|     36|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   61|     36|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   69|     36|    }                                                  \
  |  |   70|  1.07k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  248|  1.07k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
  144|  1.04k|            }
  145|  1.07k|        }
  146|  1.04k|        else {
  147|  1.04k|            SCN_TRY_ASSIGN(
  148|  1.04k|                it,
  149|  1.04k|                do_read_source_impl(
  150|  1.04k|                    r,
  151|  1.04k|                    [&](auto&& rr) { return read_regular_float(SCN_FWD(rr)); },
  152|  1.04k|                    [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  153|  1.04k|        }
  154|       |
  155|  1.04k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|  1.04k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.04k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|       |
  157|  1.04k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (157:13): [True: 1.04k, False: 0]
  |  Branch (157:48): [True: 1.04k, False: 0]
  ------------------
  158|  1.04k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (158:13): [True: 1.04k, False: 0]
  ------------------
  159|  1.04k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (159:13): [True: 1.04k, False: 0]
  ------------------
  160|  1.04k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
  161|  1.04k|        }
  162|       |
  163|  1.04k|        handle_separators();
  164|       |
  165|  1.04k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (165:13): [True: 0, False: 1.04k]
  ------------------
  166|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  167|      0|            if (auto e = check_thsep_grouping(
  168|      0|                    ranges::subrange{
  169|      0|                        digits_begin,
  170|      0|                        ranges::next(digits_begin, m_integral_part_length)},
  171|      0|                    m_thsep_indices, m_locale_options.grouping);
  172|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  173|      0|                return unexpected(e);
  174|      0|            }
  175|      0|        }
  176|       |
  177|  1.04k|        return it;
  178|  1.04k|    }
_ZN3scn2v24impl12float_readerIwE8read_infIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  225|  1.07k|    {
  226|  1.07k|        auto it = ranges::begin(range);
  227|  1.07k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (227:73): [True: 1.07k, False: 0]
  ------------------
  228|  1.07k|            return unexpected(r.error());
  229|  1.07k|        }
  230|      0|        else {
  231|      0|            it = *r;
  232|      0|        }
  233|       |
  234|      0|        if (auto r = read_matching_string_classic_nocase(
  235|      0|                ranges::subrange{it, ranges::end(range)}, "inity");
  236|      0|            !r) {
  ------------------
  |  Branch (236:13): [True: 0, False: 0]
  ------------------
  237|      0|            m_kind = float_kind::inf_short;
  238|      0|            return it;
  239|      0|        }
  240|      0|        else {
  241|      0|            m_kind = float_kind::inf_long;
  242|      0|            return *r;
  243|      0|        }
  244|      0|    }
_ZN3scn2v24impl12float_readerIwE8read_nanIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  248|  1.07k|    {
  249|  1.07k|        auto it = ranges::begin(range);
  250|  1.07k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (250:73): [True: 1.07k, False: 0]
  ------------------
  251|  1.07k|            return r.transform_error(map_parse_error_to_scan_error(
  252|  1.07k|                scan_error::invalid_scanned_value,
  253|  1.07k|                "Invalid floating-point NaN value"));
  254|  1.07k|        }
  255|      0|        else {
  256|      0|            it = *r;
  257|      0|        }
  258|       |
  259|      0|        if (auto r = read_matching_code_unit(
  260|      0|                ranges::subrange{it, ranges::end(range)}, '(');
  261|      0|            !r) {
  ------------------
  |  Branch (261:13): [True: 0, False: 0]
  ------------------
  262|      0|            m_kind = float_kind::nan_simple;
  263|      0|            return it;
  264|      0|        }
  265|      0|        else {
  266|      0|            it = *r;
  267|      0|        }
  268|       |
  269|      0|        auto payload_beg_it = it;
  270|      0|        it = read_while_code_unit(
  271|      0|            ranges::subrange{it, ranges::end(range)},
  272|      0|            [](char_type ch) SCN_NOEXCEPT {
  273|      0|                return is_ascii_char(ch) &&
  274|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  275|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  276|      0|            });
  277|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
  278|       |
  279|      0|        m_kind = float_kind::nan_with_payload;
  280|      0|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (280:18): [True: 0, False: 0]
  ------------------
  281|      0|                ranges::subrange{it, ranges::end(range)}, ')')) {
  282|      0|            return *r;
  283|      0|        }
  284|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  285|      0|                                     "Invalid floating-point NaN payload");
  286|      0|    }
_ZN3scn2v24impl12float_readerIwE15read_hex_prefixIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  219|  1.04k|    {
  220|  1.04k|        return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|  1.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  221|  1.04k|    }
_ZN3scn2v24impl12float_readerIwE18read_regular_floatIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  364|     36|    {
  365|     36|        const bool allowed_exp = (m_options & allow_scientific) != 0;
  366|     36|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (366:35): [True: 8, False: 28]
  |  Branch (366:50): [True: 4, False: 4]
  ------------------
  367|       |
  368|     36|        auto it = ranges::begin(range);
  369|     36|        std::ptrdiff_t digits_count = 0;
  370|       |
  371|     36|        if (auto r =
  372|     36|                read_dec_digits(ranges::subrange{it, ranges::end(range)}, true);
  373|     36|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|     36|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 36, False: 0]
  |  |  ------------------
  ------------------
  374|     36|            return r.transform_error(
  375|     36|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
  376|     36|                                              "Invalid floating-point value"));
  377|     36|        }
  378|      0|        else {
  379|      0|            digits_count += ranges::distance(it, *r);
  380|      0|            it = *r;
  381|      0|        }
  382|       |
  383|      0|        m_integral_part_length = digits_count;
  384|      0|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (384:18): [True: 0, False: 0]
  ------------------
  385|      0|                ranges::subrange{it, ranges::end(range)},
  386|      0|                m_locale_options.decimal_point)) {
  387|      0|            it = *r;
  388|      0|        }
  389|       |
  390|      0|        if (auto r = read_dec_digits(ranges::subrange{it, ranges::end(range)},
  ------------------
  |  Branch (390:18): [True: 0, False: 0]
  ------------------
  391|      0|                                     false)) {
  392|      0|            digits_count += ranges::distance(it, *r);
  393|      0|            it = *r;
  394|      0|        }
  395|       |
  396|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  397|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  398|      0|                                         "No significand digits in float");
  399|      0|        }
  400|       |
  401|      0|        auto beg_exp_it = it;
  402|      0|        if (allowed_exp) {
  ------------------
  |  Branch (402:13): [True: 0, False: 0]
  ------------------
  403|      0|            it = read_exponent(ranges::subrange{it, ranges::end(range)}, "eE");
  404|      0|        }
  405|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (405:13): [True: 0, False: 0]
  |  Branch (405:29): [True: 0, False: 0]
  ------------------
  406|      0|            return unexpected_scan_error(
  407|      0|                scan_error::invalid_scanned_value,
  408|      0|                "No exponent given to scientific float");
  409|      0|        }
  410|       |
  411|      0|        m_kind =
  412|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (412:13): [True: 0, False: 0]
  ------------------
  413|       |
  414|      0|        return it;
  415|      0|    }
_ZN3scn2v24impl12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
  184|     36|    {
  185|     36|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  153|     36|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 36]
  |  |  |  Branch (153:45): [True: 0, False: 36]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  186|     36|                         thsep_allowed)) {
  187|      0|            return read_while1_code_unit(
  188|      0|                SCN_FWD(range), [&](char_type ch) SCN_NOEXCEPT {
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  189|      0|                    return char_to_int(ch) < 10 ||
  190|      0|                           ch == m_locale_options.thousands_sep;
  191|      0|                });
  192|      0|        }
  193|       |
  194|     36|        return read_while1_code_unit(
  195|     36|            SCN_FWD(range),
  ------------------
  |  |  248|     36|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  196|     36|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
  197|     36|    }
_ZZN3scn2v24impl12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_bENKUlwE0_clEw:
  196|     36|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
_ZN3scn2v24impl12float_readerIwE19do_read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEERZNS3_16read_source_implISD_EENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_EUlSL_E1_SN_EESK_SL_OT0_OT1_:
  422|  1.07k|    {
  423|  1.07k|        const bool allowed_hex = (m_options & allow_hex) != 0;
  424|  1.07k|        const bool allowed_nonhex =
  425|  1.07k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
  426|  1.07k|             ~static_cast<unsigned>(allow_hex)) != 0;
  427|       |
  428|  1.07k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (428:39): [True: 1.07k, False: 0]
  |  Branch (428:45): [True: 0, False: 1.07k]
  ------------------
  429|      0|            return r.transform_error(map_parse_error_to_scan_error(
  430|      0|                scan_error::invalid_scanned_value,
  431|      0|                "Invalid infinite floating-point value"));
  432|      0|        }
  433|  1.07k|        else if (r) {
  ------------------
  |  Branch (433:18): [True: 0, False: 1.07k]
  ------------------
  434|      0|            return *r;
  435|      0|        }
  436|       |
  437|  1.07k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (437:39): [True: 1.07k, False: 0]
  |  Branch (437:45): [True: 0, False: 1.07k]
  ------------------
  438|      0|            return unexpected(r.error());
  439|      0|        }
  440|  1.07k|        else if (r) {
  ------------------
  |  Branch (440:18): [True: 0, False: 1.07k]
  ------------------
  441|      0|            return *r;
  442|      0|        }
  443|       |
  444|  1.07k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (444:13): [True: 1.04k, False: 36]
  |  Branch (444:28): [True: 18, False: 1.02k]
  ------------------
  445|       |            // only hex allowed:
  446|       |            // prefix "0x" allowed, not required
  447|     18|            auto it = ranges::begin(range);
  448|       |
  449|     18|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (449:22): [True: 0, False: 18]
  ------------------
  450|      0|                m_kind = float_kind::hex_with_prefix;
  451|      0|                it = *r;
  452|      0|            }
  453|     18|            else {
  454|     18|                m_kind = float_kind::hex_without_prefix;
  455|     18|            }
  456|       |
  457|     18|            return read_hex(ranges::subrange{it, ranges::end(range)});
  458|     18|        }
  459|  1.05k|        else if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (459:18): [True: 36, False: 1.02k]
  |  Branch (459:34): [True: 36, False: 0]
  ------------------
  460|       |            // only nonhex allowed:
  461|       |            // no prefix allowed
  462|     36|            m_kind = float_kind::generic;
  463|     36|            return read_regular_float(SCN_FWD(range));
  ------------------
  |  |  248|     36|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  464|     36|        }
  465|  1.02k|        else {
  466|       |            // both hex and nonhex allowed:
  467|       |            // check for "0x" prefix -> hex,
  468|       |            // regular otherwise
  469|       |
  470|  1.02k|            if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  153|  1.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.02k]
  |  |  ------------------
  ------------------
  471|      0|                m_kind = float_kind::hex_with_prefix;
  472|      0|                return read_hex(ranges::subrange{*r, ranges::end(range)});
  473|      0|            }
  474|       |
  475|  1.02k|            m_kind = float_kind::generic;
  476|  1.02k|            return read_regular(SCN_FWD(range));
  ------------------
  |  |  248|  1.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  477|  1.02k|        }
  478|  1.07k|    }
_ZZN3scn2v24impl12float_readerIwE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_ENKUlSK_E1_clISC_EENSE_INSF_IDtfp_EXsr6rangesE14borrowed_rangeISN_EEE4typeEEESK_:
  134|     18|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|     18|                    auto res = read_all(rr);
  136|     18|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  ------------------
  |  |  153|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
  137|      0|                        return unexpected_scan_error(
  138|      0|                            scan_error::invalid_scanned_value,
  139|      0|                            "Invalid float value");
  140|      0|                    }
  141|     18|                    return res;
  142|     18|                };
_ZZN3scn2v24impl12float_readerIwE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_ENKUlSK_E1_clISD_EENSE_INSF_IDtfp_EXsr6rangesE14borrowed_rangeISN_EEE4typeEEESK_:
  134|  1.02k|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|  1.02k|                    auto res = read_all(rr);
  136|  1.02k|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  ------------------
  |  |  153|  1.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.02k]
  |  |  ------------------
  ------------------
  137|      0|                        return unexpected_scan_error(
  138|      0|                            scan_error::invalid_scanned_value,
  139|      0|                            "Invalid float value");
  140|      0|                    }
  141|  1.02k|                    return res;
  142|  1.02k|                };
_ZN3scn2v24impl12float_readerIwE17handle_separatorsEv:
  481|  1.04k|    {
  482|  1.04k|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (482:13): [True: 1.04k, False: 0]
  ------------------
  483|  1.04k|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (483:13): [True: 1.04k, False: 0]
  ------------------
  484|  1.04k|            return;
  485|  1.04k|        }
  486|       |
  487|      0|        auto& str = this->m_buffer.make_into_allocated_string();
  488|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (488:13): [True: 0, False: 0]
  ------------------
  489|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (489:27): [True: 0, False: 0]
  ------------------
  490|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (490:21): [True: 0, False: 0]
  ------------------
  491|      0|                    ch = CharT{'.'};
  492|      0|                }
  493|      0|            }
  494|      0|        }
  495|       |
  496|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (496:13): [True: 0, False: 0]
  ------------------
  497|      0|            return;
  498|      0|        }
  499|       |
  500|      0|        auto first = ranges::find(str, m_locale_options.thousands_sep);
  501|      0|        if (first == str.end()) {
  ------------------
  |  Branch (501:13): [True: 0, False: 0]
  ------------------
  502|      0|            return;
  503|      0|        }
  504|       |
  505|      0|        m_thsep_indices.push_back(
  506|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
  507|       |
  508|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (508:31): [True: 0, False: 0]
  ------------------
  509|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (509:17): [True: 0, False: 0]
  ------------------
  510|      0|                *first++ = std::move(*it);
  511|      0|            }
  512|      0|            else {
  513|      0|                m_thsep_indices.push_back(
  514|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
  515|      0|            }
  516|      0|        }
  517|       |
  518|      0|        str.erase(first, str.end());
  519|      0|    }
_ZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  576|    872|    {
  577|    872|        SCN_UNUSED(loc);
  ------------------
  |  |  227|    872|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|    872|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|    872|        float_reader<CharT> rd{};
  581|    872|        return read_impl<range_nocvref_t>(
  582|    872|            range, rd,
  583|    872|            [](float_reader<CharT>& r, auto&&... args) {
  584|    872|                return r.read_source(SCN_FWD(args)...);
  585|    872|            },
  586|    872|            value);
  587|    872|    }
_ZN3scn2v24impl21reader_impl_for_floatIwE9read_implIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSI_SL_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEERT0_SO_:
  632|  1.07k|    {
  633|  1.07k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|  1.07k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  1.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 36, False: 1.04k]
  |  |  ------------------
  ------------------
  635|     36|            return unexpected(r.error());
  636|     36|        }
  637|       |
  638|  1.04k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|  1.04k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.04k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.04k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.04k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.04k|    }                                                  \
  |  |  |  |   70|  1.04k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|      0|        return ranges::next(ranges::begin(range), n);
  640|  1.04k|    }
_ZN3scn2v24impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
   97|  1.04k|    {
   98|  1.04k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|  1.04k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.04k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   99|       |
  100|      0|        const std::ptrdiff_t sign_len =
  101|  1.04k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (101:13): [True: 0, False: 1.04k]
  ------------------
  102|       |
  103|  1.04k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  |   71|  1.04k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.04k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.04k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.04k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.04k|    }                                                  \
  |  |  |  |   70|  1.04k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  104|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
  105|  1.04k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSC_SN_EEEDaSQ_ST_:
  583|    872|            [](float_reader<CharT>& r, auto&&... args) {
  584|    872|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|    872|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|    872|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  569|  4.67k|    {
  570|  4.67k|        detail::check_float_type_specs(specs, eh);
  571|  4.67k|    }
_ZN3scn2v24impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
  643|    430|    {
  644|    430|        unsigned options{};
  645|    430|        if (specs.localized) {
  ------------------
  |  Branch (645:13): [True: 26, False: 404]
  ------------------
  646|     26|            options |= float_reader_base::allow_thsep;
  647|     26|        }
  648|       |
  649|    430|        SCN_GCC_COMPAT_PUSH
  650|    430|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
  651|       |
  652|    430|        switch (specs.type) {
  653|     30|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (653:13): [True: 30, False: 400]
  ------------------
  654|     30|                return options | float_reader_base::allow_fixed;
  655|       |
  656|      6|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (656:13): [True: 6, False: 424]
  ------------------
  657|      6|                return options | float_reader_base::allow_scientific;
  658|       |
  659|     20|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (659:13): [True: 20, False: 410]
  ------------------
  660|     20|                return options | float_reader_base::allow_hex;
  661|       |
  662|      4|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (662:13): [True: 4, False: 426]
  ------------------
  663|      4|                return options | float_reader_base::allow_scientific |
  664|      4|                       float_reader_base::allow_fixed;
  665|       |
  666|    370|            case detail::presentation_type::none:
  ------------------
  |  Branch (666:13): [True: 370, False: 60]
  ------------------
  667|    370|                return options | float_reader_base::allow_scientific |
  668|    370|                       float_reader_base::allow_fixed |
  669|    370|                       float_reader_base::allow_hex;
  670|       |
  671|      0|            default:
  ------------------
  |  Branch (671:13): [True: 0, False: 430]
  ------------------
  672|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  673|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  674|    430|        }
  675|       |
  676|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
  677|    430|    }
_ZN3scn2v24impl12float_readerIwEC2Ej:
   66|    430|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v24impl12float_readerIwE21read_source_localizedINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESH_NS0_6detail10locale_refE:
   85|      6|    {
   86|      6|        m_locale_options = localized_number_formatting_options<CharT>{loc};
   87|      6|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  152|      6|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 6]
  |  |  ------------------
  ------------------
   88|      0|            m_locale_options.thousands_sep = CharT{0};
   89|      0|        }
   90|       |
   91|      6|        return read_source_impl(range);
   92|      6|    }
_ZN3scn2v24impl12float_readerIwE16read_source_implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_:
  111|    226|    {
  112|    226|        SCN_TRY(sign_result,
  ------------------
  |  |   71|    226|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    226|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    226|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    226|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 226]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    226|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    226|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|    226|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
  114|    226|        auto it = sign_result.first;
  115|    226|        m_sign = sign_result.second;
  116|       |
  117|    226|        auto digits_begin = it;
  118|    226|        auto r = ranges::subrange{it, ranges::end(range)};
  119|    226|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (119:23): [Folded - Ignored]
  |  Branch (119:23): [Folded - Ignored]
  ------------------
  120|    226|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|    226|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  122|    226|                             m_locale_options.decimal_point != CharT{'.'})) {
  123|    226|                SCN_TRY_ASSIGN(
  124|    226|                    it,
  125|    226|                    do_read_source_impl(
  126|    226|                        r,
  127|    226|                        [&](auto&& rr) {
  128|    226|                            return read_regular_float(SCN_FWD(rr));
  129|    226|                        },
  130|    226|                        [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  131|    226|            }
  132|    226|            else {
  133|    226|                auto cb = [&](auto&& rr)
  134|    226|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|    226|                    auto res = read_all(rr);
  136|    226|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  137|    226|                        return unexpected_scan_error(
  138|    226|                            scan_error::invalid_scanned_value,
  139|    226|                            "Invalid float value");
  140|    226|                    }
  141|    226|                    return res;
  142|    226|                };
  143|    226|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  144|    226|            }
  145|    226|        }
  146|    226|        else {
  147|    226|            SCN_TRY_ASSIGN(
  ------------------
  |  |   66|    226|    auto&& SCN_TRY_TMP = (x);                          \
  |  |   67|    226|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  153|    226|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (153:25): [True: 226, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|    226|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  |   63|    226|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|    226|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   61|    226|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   69|    226|    }                                                  \
  |  |   70|    226|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  248|    226|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
  148|      0|                it,
  149|      0|                do_read_source_impl(
  150|      0|                    r,
  151|      0|                    [&](auto&& rr) { return read_regular_float(SCN_FWD(rr)); },
  152|      0|                    [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  153|      0|        }
  154|       |
  155|      0|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|       |
  157|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (157:13): [True: 0, False: 0]
  |  Branch (157:48): [True: 0, False: 0]
  ------------------
  158|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (158:13): [True: 0, False: 0]
  ------------------
  159|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (159:13): [True: 0, False: 0]
  ------------------
  160|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
  161|      0|        }
  162|       |
  163|      0|        handle_separators();
  164|       |
  165|      0|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (165:13): [True: 0, False: 0]
  ------------------
  166|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  167|      0|            if (auto e = check_thsep_grouping(
  168|      0|                    ranges::subrange{
  169|      0|                        digits_begin,
  170|      0|                        ranges::next(digits_begin, m_integral_part_length)},
  171|      0|                    m_thsep_indices, m_locale_options.grouping);
  172|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  173|      0|                return unexpected(e);
  174|      0|            }
  175|      0|        }
  176|       |
  177|      0|        return it;
  178|      0|    }
_ZN3scn2v24impl12float_readerIwE19do_read_source_implIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_LNS6_13subrange_kindE1EEEE8sentinelILb1EEELSF_0EEEZNS3_16read_source_implIRSH_EENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_EUlSU_E_ZNSM_ISN_EEST_SU_EUlSU_E0_EEST_SU_OT0_OT1_:
  422|    226|    {
  423|    226|        const bool allowed_hex = (m_options & allow_hex) != 0;
  424|    226|        const bool allowed_nonhex =
  425|    226|            (m_options & ~static_cast<unsigned>(allow_thsep) &
  426|    226|             ~static_cast<unsigned>(allow_hex)) != 0;
  427|       |
  428|    226|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (428:39): [True: 226, False: 0]
  |  Branch (428:45): [True: 0, False: 226]
  ------------------
  429|      0|            return r.transform_error(map_parse_error_to_scan_error(
  430|      0|                scan_error::invalid_scanned_value,
  431|      0|                "Invalid infinite floating-point value"));
  432|      0|        }
  433|    226|        else if (r) {
  ------------------
  |  Branch (433:18): [True: 0, False: 226]
  ------------------
  434|      0|            return *r;
  435|      0|        }
  436|       |
  437|    226|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (437:39): [True: 226, False: 0]
  |  Branch (437:45): [True: 0, False: 226]
  ------------------
  438|      0|            return unexpected(r.error());
  439|      0|        }
  440|    226|        else if (r) {
  ------------------
  |  Branch (440:18): [True: 0, False: 226]
  ------------------
  441|      0|            return *r;
  442|      0|        }
  443|       |
  444|    226|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (444:13): [True: 222, False: 4]
  |  Branch (444:28): [True: 2, False: 220]
  ------------------
  445|       |            // only hex allowed:
  446|       |            // prefix "0x" allowed, not required
  447|      2|            auto it = ranges::begin(range);
  448|       |
  449|      2|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (449:22): [True: 0, False: 2]
  ------------------
  450|      0|                m_kind = float_kind::hex_with_prefix;
  451|      0|                it = *r;
  452|      0|            }
  453|      2|            else {
  454|      2|                m_kind = float_kind::hex_without_prefix;
  455|      2|            }
  456|       |
  457|      2|            return read_hex(ranges::subrange{it, ranges::end(range)});
  458|      2|        }
  459|    224|        else if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (459:18): [True: 4, False: 220]
  |  Branch (459:34): [True: 4, False: 0]
  ------------------
  460|       |            // only nonhex allowed:
  461|       |            // no prefix allowed
  462|      4|            m_kind = float_kind::generic;
  463|      4|            return read_regular_float(SCN_FWD(range));
  ------------------
  |  |  248|      4|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  464|      4|        }
  465|    220|        else {
  466|       |            // both hex and nonhex allowed:
  467|       |            // check for "0x" prefix -> hex,
  468|       |            // regular otherwise
  469|       |
  470|    220|            if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  153|    220|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 220]
  |  |  ------------------
  ------------------
  471|      0|                m_kind = float_kind::hex_with_prefix;
  472|      0|                return read_hex(ranges::subrange{*r, ranges::end(range)});
  473|      0|            }
  474|       |
  475|    220|            m_kind = float_kind::generic;
  476|    220|            return read_regular(SCN_FWD(range));
  ------------------
  |  |  248|    220|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  477|    220|        }
  478|    226|    }
_ZN3scn2v24impl12float_readerIwE8read_infIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_LNS6_13subrange_kindE1EEEE8sentinelILb1EEELSF_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISO_EEE4typeEEEOSO_:
  225|    226|    {
  226|    226|        auto it = ranges::begin(range);
  227|    226|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (227:73): [True: 226, False: 0]
  ------------------
  228|    226|            return unexpected(r.error());
  229|    226|        }
  230|      0|        else {
  231|      0|            it = *r;
  232|      0|        }
  233|       |
  234|      0|        if (auto r = read_matching_string_classic_nocase(
  235|      0|                ranges::subrange{it, ranges::end(range)}, "inity");
  236|      0|            !r) {
  ------------------
  |  Branch (236:13): [True: 0, False: 0]
  ------------------
  237|      0|            m_kind = float_kind::inf_short;
  238|      0|            return it;
  239|      0|        }
  240|      0|        else {
  241|      0|            m_kind = float_kind::inf_long;
  242|      0|            return *r;
  243|      0|        }
  244|      0|    }
_ZN3scn2v24impl12float_readerIwE8read_nanIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_LNS6_13subrange_kindE1EEEE8sentinelILb1EEELSF_0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISO_EEE4typeEEEOSO_:
  248|    226|    {
  249|    226|        auto it = ranges::begin(range);
  250|    226|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (250:73): [True: 226, False: 0]
  ------------------
  251|    226|            return r.transform_error(map_parse_error_to_scan_error(
  252|    226|                scan_error::invalid_scanned_value,
  253|    226|                "Invalid floating-point NaN value"));
  254|    226|        }
  255|      0|        else {
  256|      0|            it = *r;
  257|      0|        }
  258|       |
  259|      0|        if (auto r = read_matching_code_unit(
  260|      0|                ranges::subrange{it, ranges::end(range)}, '(');
  261|      0|            !r) {
  ------------------
  |  Branch (261:13): [True: 0, False: 0]
  ------------------
  262|      0|            m_kind = float_kind::nan_simple;
  263|      0|            return it;
  264|      0|        }
  265|      0|        else {
  266|      0|            it = *r;
  267|      0|        }
  268|       |
  269|      0|        auto payload_beg_it = it;
  270|      0|        it = read_while_code_unit(
  271|      0|            ranges::subrange{it, ranges::end(range)},
  272|      0|            [](char_type ch) SCN_NOEXCEPT {
  273|      0|                return is_ascii_char(ch) &&
  274|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  275|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  276|      0|            });
  277|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
  278|       |
  279|      0|        m_kind = float_kind::nan_with_payload;
  280|      0|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (280:18): [True: 0, False: 0]
  ------------------
  281|      0|                ranges::subrange{it, ranges::end(range)}, ')')) {
  282|      0|            return *r;
  283|      0|        }
  284|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  285|      0|                                     "Invalid floating-point NaN payload");
  286|      0|    }
_ZN3scn2v24impl12float_readerIwE15read_hex_prefixIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_LNS6_13subrange_kindE1EEEE8sentinelILb1EEELSF_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISO_EEE4typeEEEOSO_:
  219|    222|    {
  220|    222|        return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|    222|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  221|    222|    }
_ZN3scn2v24impl12float_readerIwE13read_hexfloatIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_LNS6_13subrange_kindE1EEEE8sentinelILb1EEELSF_0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_:
  322|      2|    {
  323|      2|        auto it = ranges::begin(range);
  324|       |
  325|      2|        std::ptrdiff_t digits_count = 0;
  326|      2|        if (auto r =
  327|      2|                read_hex_digits(ranges::subrange{it, ranges::end(range)}, true);
  328|      2|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2, False: 0]
  |  |  ------------------
  ------------------
  329|      2|            return r.transform_error(map_parse_error_to_scan_error(
  330|      2|                scan_error::invalid_scanned_value,
  331|      2|                "Invalid hexadecimal floating-point value"));
  332|      2|        }
  333|      0|        else {
  334|      0|            digits_count += ranges::distance(it, *r);
  335|      0|            it = *r;
  336|      0|        }
  337|       |
  338|      0|        m_integral_part_length = digits_count;
  339|      0|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (339:18): [True: 0, False: 0]
  ------------------
  340|      0|                ranges::subrange{it, ranges::end(range)},
  341|      0|                m_locale_options.decimal_point)) {
  342|      0|            it = *r;
  343|      0|        }
  344|       |
  345|      0|        if (auto r = read_hex_digits(ranges::subrange{it, ranges::end(range)},
  ------------------
  |  Branch (345:18): [True: 0, False: 0]
  ------------------
  346|      0|                                     false)) {
  347|      0|            digits_count += ranges::distance(it, *r);
  348|      0|            it = *r;
  349|      0|        }
  350|       |
  351|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  352|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  353|      0|                                         "No significand digits in hexfloat");
  354|      0|        }
  355|       |
  356|      0|        it = read_exponent(ranges::subrange{it, ranges::end(range)}, "pP");
  357|       |
  358|      0|        return it;
  359|      0|    }
_ZN3scn2v24impl12float_readerIwE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_LNS6_13subrange_kindE1EEEE8sentinelILb1EEELSF_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_b:
  202|      2|    {
  203|      2|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  153|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2]
  |  |  |  Branch (153:45): [True: 0, False: 2]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  204|      2|                         thsep_allowed)) {
  205|      0|            return read_while1_code_unit(
  206|      0|                SCN_FWD(range), [&](char_type ch) SCN_NOEXCEPT {
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  207|      0|                    return char_to_int(ch) < 16 ||
  208|      0|                           ch == m_locale_options.thousands_sep;
  209|      0|                });
  210|      0|        }
  211|       |
  212|      2|        return read_while1_code_unit(
  213|      2|            SCN_FWD(range),
  ------------------
  |  |  248|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  214|      2|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 16; });
  215|      2|    }
_ZZN3scn2v24impl12float_readerIwE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_LNS6_13subrange_kindE1EEEE8sentinelILb1EEELSF_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_bENKUlwE0_clEw:
  214|      2|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 16; });
_ZN3scn2v24impl12float_readerIwE18read_regular_floatIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_LNS6_13subrange_kindE1EEEE8sentinelILb1EEELSF_0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISO_EEE4typeEEEOSO_:
  364|    224|    {
  365|    224|        const bool allowed_exp = (m_options & allow_scientific) != 0;
  366|    224|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (366:35): [True: 222, False: 2]
  |  Branch (366:50): [True: 2, False: 220]
  ------------------
  367|       |
  368|    224|        auto it = ranges::begin(range);
  369|    224|        std::ptrdiff_t digits_count = 0;
  370|       |
  371|    224|        if (auto r =
  372|    224|                read_dec_digits(ranges::subrange{it, ranges::end(range)}, true);
  373|    224|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|    224|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 224, False: 0]
  |  |  ------------------
  ------------------
  374|    224|            return r.transform_error(
  375|    224|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
  376|    224|                                              "Invalid floating-point value"));
  377|    224|        }
  378|      0|        else {
  379|      0|            digits_count += ranges::distance(it, *r);
  380|      0|            it = *r;
  381|      0|        }
  382|       |
  383|      0|        m_integral_part_length = digits_count;
  384|      0|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (384:18): [True: 0, False: 0]
  ------------------
  385|      0|                ranges::subrange{it, ranges::end(range)},
  386|      0|                m_locale_options.decimal_point)) {
  387|      0|            it = *r;
  388|      0|        }
  389|       |
  390|      0|        if (auto r = read_dec_digits(ranges::subrange{it, ranges::end(range)},
  ------------------
  |  Branch (390:18): [True: 0, False: 0]
  ------------------
  391|      0|                                     false)) {
  392|      0|            digits_count += ranges::distance(it, *r);
  393|      0|            it = *r;
  394|      0|        }
  395|       |
  396|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  397|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  398|      0|                                         "No significand digits in float");
  399|      0|        }
  400|       |
  401|      0|        auto beg_exp_it = it;
  402|      0|        if (allowed_exp) {
  ------------------
  |  Branch (402:13): [True: 0, False: 0]
  ------------------
  403|      0|            it = read_exponent(ranges::subrange{it, ranges::end(range)}, "eE");
  404|      0|        }
  405|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (405:13): [True: 0, False: 0]
  |  Branch (405:29): [True: 0, False: 0]
  ------------------
  406|      0|            return unexpected_scan_error(
  407|      0|                scan_error::invalid_scanned_value,
  408|      0|                "No exponent given to scientific float");
  409|      0|        }
  410|       |
  411|      0|        m_kind =
  412|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (412:13): [True: 0, False: 0]
  ------------------
  413|       |
  414|      0|        return it;
  415|      0|    }
_ZN3scn2v24impl12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_LNS6_13subrange_kindE1EEEE8sentinelILb1EEELSF_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_b:
  184|    224|    {
  185|    224|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  153|    224|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 224]
  |  |  |  Branch (153:45): [True: 0, False: 224]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  186|    224|                         thsep_allowed)) {
  187|      0|            return read_while1_code_unit(
  188|      0|                SCN_FWD(range), [&](char_type ch) SCN_NOEXCEPT {
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  189|      0|                    return char_to_int(ch) < 10 ||
  190|      0|                           ch == m_locale_options.thousands_sep;
  191|      0|                });
  192|      0|        }
  193|       |
  194|    224|        return read_while1_code_unit(
  195|    224|            SCN_FWD(range),
  ------------------
  |  |  248|    224|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  196|    224|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
  197|    224|    }
_ZZN3scn2v24impl12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_LNS6_13subrange_kindE1EEEE8sentinelILb1EEELSF_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_bENKUlwE0_clEw:
  196|    224|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
_ZN3scn2v24impl12float_readerIwE11read_sourceINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESH_NS0_6detail10locale_refE:
   72|    220|    {
   73|    220|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  153|    220|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 220]
  |  |  ------------------
  ------------------
   74|      0|            m_locale_options = localized_number_formatting_options<CharT>{
   75|      0|                classic_with_thsep_tag{}};
   76|      0|        }
   77|       |
   78|    220|        return read_source_impl(range);
   79|    220|    }
_ZN3scn2v24impl12float_readerIwE21read_source_localizedIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_NS0_6detail10locale_refE:
   85|     20|    {
   86|     20|        m_locale_options = localized_number_formatting_options<CharT>{loc};
   87|     20|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  152|     20|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 20]
  |  |  ------------------
  ------------------
   88|      0|            m_locale_options.thousands_sep = CharT{0};
   89|      0|        }
   90|       |
   91|     20|        return read_source_impl(range);
   92|     20|    }
_ZN3scn2v24impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RKNS0_6detail12format_specsERT0_NSM_10locale_refE:
  595|    226|    {
  596|    226|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|    226|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|    226|#if !SCN_DISABLE_LOCALE
  600|    226|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 6, False: 220]
  ------------------
  601|      6|            return read_impl<range_nocvref_t>(
  602|      6|                range, rd,
  603|      6|                [](float_reader<CharT>& r, auto&&... args) {
  604|      6|                    return r.read_source_localized(SCN_FWD(args)...);
  605|      6|                },
  606|      6|                value, loc);
  607|      6|        }
  608|    220|#endif
  609|       |
  610|    220|        return read_impl<range_nocvref_t>(
  611|    220|            range, rd,
  612|    220|            [](float_reader<CharT>& r, auto&&... args) {
  613|    220|                return r.read_source(SCN_FWD(args)...);
  614|    220|            },
  615|    220|            value);
  616|    226|    }
_ZN3scn2v24impl21reader_impl_for_floatIwE9read_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEdEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESH_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
  632|    226|    {
  633|    226|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|    226|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|    226|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 226, False: 0]
  |  |  ------------------
  ------------------
  635|    226|            return unexpected(r.error());
  636|    226|        }
  637|       |
  638|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|      0|        return ranges::next(ranges::begin(range), n);
  640|      0|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RKNS0_6detail12format_specsERT0_NSM_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SS_EEEDaSV_SY_:
  603|      6|                [](float_reader<CharT>& r, auto&&... args) {
  604|      6|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|      6|                },
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RKNS0_6detail12format_specsERT0_NSM_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_SS_EEEDaSV_SY_:
  612|    220|            [](float_reader<CharT>& r, auto&&... args) {
  613|    220|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|    220|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|    220|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  595|    204|    {
  596|    204|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|    204|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|    204|#if !SCN_DISABLE_LOCALE
  600|    204|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 20, False: 184]
  ------------------
  601|     20|            return read_impl<range_nocvref_t>(
  602|     20|                range, rd,
  603|     20|                [](float_reader<CharT>& r, auto&&... args) {
  604|     20|                    return r.read_source_localized(SCN_FWD(args)...);
  605|     20|                },
  606|     20|                value, loc);
  607|     20|        }
  608|    184|#endif
  609|       |
  610|    184|        return read_impl<range_nocvref_t>(
  611|    184|            range, rd,
  612|    184|            [](float_reader<CharT>& r, auto&&... args) {
  613|    184|                return r.read_source(SCN_FWD(args)...);
  614|    184|            },
  615|    184|            value);
  616|    204|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSC_SR_EEEDaSU_SX_:
  603|     20|                [](float_reader<CharT>& r, auto&&... args) {
  604|     20|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|     20|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|     20|                },
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSC_SR_EEEDaSU_SX_:
  612|    184|            [](float_reader<CharT>& r, auto&&... args) {
  613|    184|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|    184|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|    184|            },
_ZNK3scn2v24impl12float_readerIcE7setsignIdEET_S5_:
  523|  1.29k|    {
  524|  1.29k|        SCN_EXPECT(std::isnan(value) || value >= static_cast<T>(0.0));
  ------------------
  |  |  242|  1.29k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.29k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  525|  1.29k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (525:13): [True: 0, False: 1.29k]
  ------------------
  526|      0|            return -value;
  527|      0|        }
  528|  1.29k|        return value;
  529|  1.29k|    }
_ZNK3scn2v24impl12float_readerIwE7setsignIdEET_S5_:
  523|  1.04k|    {
  524|  1.04k|        SCN_EXPECT(std::isnan(value) || value >= static_cast<T>(0.0));
  ------------------
  |  |  242|  1.04k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.04k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  525|  1.04k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (525:13): [True: 0, False: 1.04k]
  ------------------
  526|      0|            return -value;
  527|      0|        }
  528|  1.04k|        return value;
  529|  1.04k|    }

_ZN3scn2v24impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|     92|{
  218|     92|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|     92|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|     92|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|     92|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|     92|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|     92|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|     92|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|     92|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|     92|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|     92|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|     92|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|     92|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|     92|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 92, False: 0]
  ------------------
  224|     92|        SCN_UNLIKELY_ATTR
  225|     92|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|     92|                                     "Invalid integer value");
  227|     92|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|      0|    auto start = source.data();
  231|      0|    const auto end = source.data() + source.size();
  232|      0|    {
  233|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 0, False: 0]
  ------------------
  234|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 0, False: 0]
  ------------------
  235|      0|                break;
  236|      0|            }
  237|      0|        }
  238|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  239|      0|            value = 0;
  240|      0|            return ranges::next(source.begin(),
  241|      0|                                ranges::distance(source.data(), start));
  242|      0|        }
  243|      0|    }
  244|       |
  245|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|      0|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 0, False: 0]
  ------------------
  247|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|      0|                             detail::make_string_view_from_pointers(start, end),
  249|      0|                             value, sign == sign_type::minus_sign));
  250|      0|            return ranges::next(source.begin(),
  251|      0|                                ranges::distance(source.data(), ptr));
  252|      0|        }
  253|      0|    }
  254|       |
  255|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|      0|                     detail::make_string_view_from_pointers(start, end), value,
  257|      0|                     base, sign == sign_type::minus_sign));
  258|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|      0|}
_ZN3scn2v24impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|  1.35k|{
  218|  1.35k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|  1.35k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.35k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|  1.35k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|  1.35k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.35k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|  1.35k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|  1.35k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.35k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|  1.35k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|  1.35k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.35k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|  1.35k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 1.35k, False: 0]
  ------------------
  224|  1.35k|        SCN_UNLIKELY_ATTR
  225|  1.35k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  1.35k|                                     "Invalid integer value");
  227|  1.35k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|      0|    auto start = source.data();
  231|      0|    const auto end = source.data() + source.size();
  232|      0|    {
  233|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 0, False: 0]
  ------------------
  234|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 0, False: 0]
  ------------------
  235|      0|                break;
  236|      0|            }
  237|      0|        }
  238|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  239|      0|            value = 0;
  240|      0|            return ranges::next(source.begin(),
  241|      0|                                ranges::distance(source.data(), start));
  242|      0|        }
  243|      0|    }
  244|       |
  245|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|      0|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 0, False: 0]
  ------------------
  247|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|      0|                             detail::make_string_view_from_pointers(start, end),
  249|      0|                             value, sign == sign_type::minus_sign));
  250|      0|            return ranges::next(source.begin(),
  251|      0|                                ranges::distance(source.data(), ptr));
  252|      0|        }
  253|      0|    }
  254|       |
  255|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|      0|                     detail::make_string_view_from_pointers(start, end), value,
  257|      0|                     base, sign == sign_type::minus_sign));
  258|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|      0|}
_ZN3scn2v24impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|  1.13k|{
  218|  1.13k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|  1.13k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.13k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|  1.13k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|  1.13k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.13k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|  1.13k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|  1.13k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.13k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|  1.13k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|  1.13k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.13k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|  1.13k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 1.13k, False: 0]
  ------------------
  224|  1.13k|        SCN_UNLIKELY_ATTR
  225|  1.13k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  1.13k|                                     "Invalid integer value");
  227|  1.13k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|      0|    auto start = source.data();
  231|      0|    const auto end = source.data() + source.size();
  232|      0|    {
  233|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 0, False: 0]
  ------------------
  234|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 0, False: 0]
  ------------------
  235|      0|                break;
  236|      0|            }
  237|      0|        }
  238|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  239|      0|            value = 0;
  240|      0|            return ranges::next(source.begin(),
  241|      0|                                ranges::distance(source.data(), start));
  242|      0|        }
  243|      0|    }
  244|       |
  245|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|      0|        if (base == 10) {
  247|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|      0|                             detail::make_string_view_from_pointers(start, end),
  249|      0|                             value, sign == sign_type::minus_sign));
  250|      0|            return ranges::next(source.begin(),
  251|      0|                                ranges::distance(source.data(), ptr));
  252|      0|        }
  253|      0|    }
  254|       |
  255|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|      0|                     detail::make_string_view_from_pointers(start, end), value,
  257|      0|                     base, sign == sign_type::minus_sign));
  258|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|      0|}
_ZN3scn2v24impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|  1.35k|{
  218|  1.35k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|  1.35k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.35k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|  1.35k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|  1.35k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.35k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|  1.35k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|  1.35k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.35k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|  1.35k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|  1.35k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.35k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|  1.35k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 1.35k, False: 0]
  ------------------
  224|  1.35k|        SCN_UNLIKELY_ATTR
  225|  1.35k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  1.35k|                                     "Invalid integer value");
  227|  1.35k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|      0|    auto start = source.data();
  231|      0|    const auto end = source.data() + source.size();
  232|      0|    {
  233|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 0, False: 0]
  ------------------
  234|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 0, False: 0]
  ------------------
  235|      0|                break;
  236|      0|            }
  237|      0|        }
  238|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  239|      0|            value = 0;
  240|      0|            return ranges::next(source.begin(),
  241|      0|                                ranges::distance(source.data(), start));
  242|      0|        }
  243|      0|    }
  244|       |
  245|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|      0|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 0, False: 0]
  ------------------
  247|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|      0|                             detail::make_string_view_from_pointers(start, end),
  249|      0|                             value, sign == sign_type::minus_sign));
  250|      0|            return ranges::next(source.begin(),
  251|      0|                                ranges::distance(source.data(), ptr));
  252|      0|        }
  253|      0|    }
  254|       |
  255|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|      0|                     detail::make_string_view_from_pointers(start, end), value,
  257|      0|                     base, sign == sign_type::minus_sign));
  258|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|      0|}
_ZN3scn2v24impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|  1.07k|{
  218|  1.07k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|  1.07k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.07k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|  1.07k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|  1.07k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.07k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|  1.07k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|  1.07k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.07k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|  1.07k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|  1.07k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.07k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|  1.07k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 1.07k, False: 0]
  ------------------
  224|  1.07k|        SCN_UNLIKELY_ATTR
  225|  1.07k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  1.07k|                                     "Invalid integer value");
  227|  1.07k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|      0|    auto start = source.data();
  231|      0|    const auto end = source.data() + source.size();
  232|      0|    {
  233|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 0, False: 0]
  ------------------
  234|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 0, False: 0]
  ------------------
  235|      0|                break;
  236|      0|            }
  237|      0|        }
  238|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  239|      0|            value = 0;
  240|      0|            return ranges::next(source.begin(),
  241|      0|                                ranges::distance(source.data(), start));
  242|      0|        }
  243|      0|    }
  244|       |
  245|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|      0|        if (base == 10) {
  247|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|      0|                             detail::make_string_view_from_pointers(start, end),
  249|      0|                             value, sign == sign_type::minus_sign));
  250|      0|            return ranges::next(source.begin(),
  251|      0|                                ranges::distance(source.data(), ptr));
  252|      0|        }
  253|      0|    }
  254|       |
  255|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|      0|                     detail::make_string_view_from_pointers(start, end), value,
  257|      0|                     base, sign == sign_type::minus_sign));
  258|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|      0|}
_ZN3scn2v24impl19parse_integer_valueIcmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|  1.26k|{
  218|  1.26k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|  1.26k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.26k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|  1.26k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|  1.26k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.26k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|  1.26k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|  1.26k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.26k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|  1.26k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|  1.26k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.26k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|  1.26k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 1.26k, False: 0]
  ------------------
  224|  1.26k|        SCN_UNLIKELY_ATTR
  225|  1.26k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  1.26k|                                     "Invalid integer value");
  227|  1.26k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|      0|    auto start = source.data();
  231|      0|    const auto end = source.data() + source.size();
  232|      0|    {
  233|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 0, False: 0]
  ------------------
  234|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 0, False: 0]
  ------------------
  235|      0|                break;
  236|      0|            }
  237|      0|        }
  238|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  239|      0|            value = 0;
  240|      0|            return ranges::next(source.begin(),
  241|      0|                                ranges::distance(source.data(), start));
  242|      0|        }
  243|      0|    }
  244|       |
  245|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|      0|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 0, False: 0]
  ------------------
  247|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|      0|                             detail::make_string_view_from_pointers(start, end),
  249|      0|                             value, sign == sign_type::minus_sign));
  250|      0|            return ranges::next(source.begin(),
  251|      0|                                ranges::distance(source.data(), ptr));
  252|      0|        }
  253|      0|    }
  254|       |
  255|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|      0|                     detail::make_string_view_from_pointers(start, end), value,
  257|      0|                     base, sign == sign_type::minus_sign));
  258|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|      0|}
_ZN3scn2v24impl19parse_integer_valueIwmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|  1.01k|{
  218|  1.01k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|  1.01k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.01k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|  1.01k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|  1.01k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.01k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|  1.01k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|  1.01k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.01k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|  1.01k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|  1.01k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.01k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|  1.01k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 1.01k, False: 0]
  ------------------
  224|  1.01k|        SCN_UNLIKELY_ATTR
  225|  1.01k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  1.01k|                                     "Invalid integer value");
  227|  1.01k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|      0|    auto start = source.data();
  231|      0|    const auto end = source.data() + source.size();
  232|      0|    {
  233|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 0, False: 0]
  ------------------
  234|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 0, False: 0]
  ------------------
  235|      0|                break;
  236|      0|            }
  237|      0|        }
  238|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  239|      0|            value = 0;
  240|      0|            return ranges::next(source.begin(),
  241|      0|                                ranges::distance(source.data(), start));
  242|      0|        }
  243|      0|    }
  244|       |
  245|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|      0|        if (base == 10) {
  247|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|      0|                             detail::make_string_view_from_pointers(start, end),
  249|      0|                             value, sign == sign_type::minus_sign));
  250|      0|            return ranges::next(source.begin(),
  251|      0|                                ranges::distance(source.data(), ptr));
  252|      0|        }
  253|      0|    }
  254|       |
  255|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|      0|                     detail::make_string_view_from_pointers(start, end), value,
  257|      0|                     base, sign == sign_type::minus_sign));
  258|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|      0|}

_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESE_i:
  120|  4.14k|{
  121|  4.14k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|  4.14k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.14k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.14k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 4.14k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  4.14k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.14k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|  4.14k|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|  4.14k|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|  4.14k|        parse_integer_base_prefix(
  126|  4.14k|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|  4.14k|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 0, False: 4.14k]
  ------------------
  129|      0|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 0, False: 0]
  ------------------
  130|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 0, False: 0]
  ------------------
  131|      0|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|      0|                digits_begin_it, ranges::begin(range));
  133|      0|        }
  134|      0|        else {
  135|      0|            parsed_zero = false;
  136|      0|        }
  137|      0|    }
  138|  4.14k|    else {
  139|  4.14k|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 0, False: 4.14k]
  ------------------
  140|  4.14k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 4.14k, False: 0]
  ------------------
  141|  4.14k|            digits_begin_it = base_prefix_begin_it;
  142|  4.14k|        }
  143|  4.14k|    }
  144|       |
  145|  4.14k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 4.14k, False: 0]
  ------------------
  146|  4.14k|        sign = sign_type::plus_sign;
  147|  4.14k|    }
  148|  4.14k|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|  4.14k|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|  4.14k|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_i:
   87|  4.14k|{
   88|  4.14k|    switch (base) {
   89|    102|        case 2:
  ------------------
  |  Branch (89:9): [True: 102, False: 4.03k]
  ------------------
   90|       |            // allow 0b/0B
   91|    102|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|    102|                    false};
   93|       |
   94|     52|        case 8: {
  ------------------
  |  Branch (94:9): [True: 52, False: 4.08k]
  ------------------
   95|       |            // allow 0o/0O/0
   96|     52|            bool zero_parsed = false;
   97|     52|            auto it = apply_opt(
   98|     52|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|     52|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|  1.29k|        case 16:
  ------------------
  |  Branch (102:9): [True: 1.29k, False: 2.85k]
  ------------------
  103|       |            // allow 0x/0X
  104|  1.29k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|  1.29k|                    false};
  106|       |
  107|  2.65k|        case 0:
  ------------------
  |  Branch (107:9): [True: 2.65k, False: 1.48k]
  ------------------
  108|       |            // detect base
  109|  2.65k|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|  2.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|     44|        default:
  ------------------
  |  Branch (111:9): [True: 44, False: 4.09k]
  ------------------
  112|       |            // no base prefix allowed
  113|     44|            return {ranges::begin(range), base, false};
  114|  4.14k|    }
  115|  4.14k|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   37|  2.75k|{
   38|  2.75k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|  2.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|  2.75k|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_Rb:
   52|  2.70k|{
   53|  2.70k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 0, False: 2.70k]
  ------------------
   54|      0|        return *r;
   55|      0|    }
   56|       |
   57|  2.70k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 0, False: 2.70k]
  ------------------
   58|      0|        zero_parsed = true;
   59|      0|        return *r;
   60|      0|    }
   61|       |
   62|  2.70k|    return unexpected(parse_error::error);
   63|  2.70k|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   44|  3.94k|{
   45|  3.94k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|  3.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|  3.94k|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_:
   68|  2.65k|{
   69|  2.65k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 0, False: 2.65k]
  ------------------
   70|      0|        return {*r, 16, false};
   71|      0|    }
   72|  2.65k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 0, False: 2.65k]
  ------------------
   73|      0|        return {*r, 2, false};
   74|      0|    }
   75|  2.65k|    {
   76|  2.65k|        bool zero_parsed{false};
   77|  2.65k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 0, False: 2.65k]
  ------------------
   78|      0|            return {*r, 8, zero_parsed};
   79|      0|        }
   80|  2.65k|    }
   81|  2.65k|    return {ranges::begin(range), 10, false};
   82|  2.65k|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESD_i:
  155|  4.07k|{
  156|  4.07k|    using char_type = detail::char_t<Range>;
  157|       |
  158|  4.07k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|  4.07k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  4.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.07k]
  |  |  ------------------
  ------------------
  160|      0|            return unexpected_scan_error(
  161|      0|                scan_error::invalid_scanned_value,
  162|      0|                "Failed to parse integer: No digits found");
  163|      0|        }
  164|  4.07k|        return ranges::end(range);
  165|  4.07k|    }
  166|  4.07k|    else {
  167|  4.07k|        return read_while1_code_unit(
  168|  4.07k|                   range, [&](char_type ch)
  169|  4.07k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|  4.07k|            .transform_error(map_parse_error_to_scan_error(
  171|  4.07k|                scan_error::invalid_scanned_value,
  172|  4.07k|                "Failed to parse integer: No digits found"));
  173|  4.07k|    }
  174|  4.07k|}
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|  1.12k|    {
  324|  1.12k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  1.12k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  1.12k|        return read_default_with_base(range, value, 0);
  326|  1.12k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|  1.12k|    {
  287|  1.12k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  1.12k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.12k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.12k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 1.12k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  1.12k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.12k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  1.12k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  1.12k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  1.12k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  1.12k|                return unexpected_scan_error(
  293|  1.12k|                    scan_error::invalid_scanned_value,
  294|  1.12k|                    "Unexpected '-' sign when parsing an "
  295|  1.12k|                    "unsigned value");
  296|  1.12k|            }
  297|  1.12k|        }
  298|       |
  299|  1.12k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 1.12k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  2.24k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  1.12k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.12k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.12k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 1.12k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  1.12k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.12k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  2.24k|                                     ranges::subrange{prefix_result.iterator,
  306|  2.24k|                                                      ranges::end(range)},
  307|  2.24k|                                     prefix_result.parsed_base));
  308|       |
  309|  2.24k|        auto buf = make_contiguous_buffer(
  310|  2.24k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  2.24k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  1.12k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.12k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.12k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.12k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.12k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.12k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.12k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.12k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.12k|    }                                                  \
  |  |  |  |   70|  1.12k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  2.24k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|  1.12k|    {
  324|  1.12k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  1.12k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  1.12k|        return read_default_with_base(range, value, 0);
  326|  1.12k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|  1.12k|    {
  287|  1.12k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  1.12k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.12k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.12k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 1.12k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  1.12k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.12k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  1.12k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  1.12k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  1.12k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 1.12k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  1.12k|        }
  298|       |
  299|  1.12k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 1.12k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  2.24k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  1.12k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.12k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.12k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 1.12k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  1.12k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.12k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  2.24k|                                     ranges::subrange{prefix_result.iterator,
  306|  2.24k|                                                      ranges::end(range)},
  307|  2.24k|                                     prefix_result.parsed_base));
  308|       |
  309|  2.24k|        auto buf = make_contiguous_buffer(
  310|  2.24k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  2.24k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  1.12k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.12k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.12k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.12k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.12k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.12k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.12k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.12k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.12k|    }                                                  \
  |  |  |  |   70|  1.12k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  2.24k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEmEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|  1.26k|    {
  335|  1.26k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  1.26k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.26k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.26k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 1.26k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  1.26k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.26k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  1.26k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  1.26k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 1.26k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  1.26k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 1.26k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  1.26k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  1.26k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 1.26k, False: 0]
  |  |  ------------------
  ------------------
  361|  1.26k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  1.26k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.26k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.26k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 1.26k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  1.26k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.26k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  1.26k|                    parse_integer_digits_without_thsep(
  363|  1.26k|                        ranges::subrange{prefix_result.iterator,
  364|  1.26k|                                         ranges::end(range)},
  365|  1.26k|                        prefix_result.parsed_base));
  366|       |
  367|  1.26k|            auto buf = make_contiguous_buffer(
  368|  1.26k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  1.26k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  1.26k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.26k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.26k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.26k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.26k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.26k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.26k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.26k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.26k|    }                                                  \
  |  |  |  |   70|  1.26k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|  1.26k|        }
  377|       |
  378|      0|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|      0|            localized_number_formatting_options<CharT>{loc};
  383|      0|#endif
  384|       |
  385|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSC_12basic_stringIT0_NSC_11char_traitsISJ_EENSC_9allocatorISJ_EEEENSI_IcNSK_IcEENSM_IcEEEEEEEEESF_iRKNS1_35localized_number_formatting_optionsISJ_EE:
  184|     64|{
  185|     64|    std::basic_string<CharT> output;
  186|     64|    std::string thsep_indices;
  187|     64|    auto it = ranges::begin(range);
  188|     64|    bool digit_matched = false;
  189|     64|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 64, False: 0]
  ------------------
  190|     64|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 0, False: 64]
  ------------------
  191|      0|            thsep_indices.push_back(static_cast<char>(
  192|      0|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|      0|        }
  194|     64|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 64, False: 0]
  ------------------
  195|     64|            break;
  196|     64|        }
  197|      0|        else {
  198|      0|            output.push_back(*it);
  199|      0|            digit_matched = true;
  200|      0|        }
  201|     64|    }
  202|     64|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|     64|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 64, False: 0]
  |  |  ------------------
  ------------------
  203|     64|        return unexpected_scan_error(
  204|     64|            scan_error::invalid_scanned_value,
  205|     64|            "Failed to parse integer: No digits found");
  206|     64|    }
  207|      0|    return std::tuple{it, output, thsep_indices};
  208|     64|}
_ZN3scn2v24impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  279|  12.4k|    {
  280|  12.4k|        detail::check_int_type_specs(specs, eh);
  281|  12.4k|    }
_ZN3scn2v24impl20parse_integer_prefixINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS5_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESG_i:
  120|    910|{
  121|    910|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|    910|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    910|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    910|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    910|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 910]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    910|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    910|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|    910|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|    910|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|    910|        parse_integer_base_prefix(
  126|    910|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|    910|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 0, False: 910]
  ------------------
  129|      0|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 0, False: 0]
  |  Branch (129:13): [True: 0, False: 0]
  ------------------
  130|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 0, False: 0]
  ------------------
  131|      0|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|      0|                digits_begin_it, ranges::begin(range));
  133|      0|        }
  134|      0|        else {
  135|      0|            parsed_zero = false;
  136|      0|        }
  137|      0|    }
  138|    910|    else {
  139|    910|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 0, False: 910]
  |  Branch (139:13): [True: 910, False: 0]
  ------------------
  140|    910|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 910, False: 0]
  ------------------
  141|    910|            digits_begin_it = base_prefix_begin_it;
  142|    910|        }
  143|    910|    }
  144|       |
  145|    910|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 910, False: 0]
  ------------------
  146|    910|        sign = sign_type::plus_sign;
  147|    910|    }
  148|    910|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|    910|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|    910|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEibEEEOSM_i:
   87|    910|{
   88|    910|    switch (base) {
   89|     18|        case 2:
  ------------------
  |  Branch (89:9): [True: 18, False: 892]
  ------------------
   90|       |            // allow 0b/0B
   91|     18|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|     18|                    false};
   93|       |
   94|      6|        case 8: {
  ------------------
  |  Branch (94:9): [True: 6, False: 904]
  ------------------
   95|       |            // allow 0o/0O/0
   96|      6|            bool zero_parsed = false;
   97|      6|            auto it = apply_opt(
   98|      6|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|      6|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|    300|        case 16:
  ------------------
  |  Branch (102:9): [True: 300, False: 610]
  ------------------
  103|       |            // allow 0x/0X
  104|    300|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|    300|                    false};
  106|       |
  107|    574|        case 0:
  ------------------
  |  Branch (107:9): [True: 574, False: 336]
  ------------------
  108|       |            // detect base
  109|    574|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|    574|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|     12|        default:
  ------------------
  |  Branch (111:9): [True: 12, False: 898]
  ------------------
  112|       |            // no base prefix allowed
  113|     12|            return {ranges::begin(range), base, false};
  114|    910|    }
  115|    910|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_:
   37|    592|{
   38|    592|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|    592|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|    592|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_Rb:
   52|    580|{
   53|    580|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 0, False: 580]
  ------------------
   54|      0|        return *r;
   55|      0|    }
   56|       |
   57|    580|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 0, False: 580]
  ------------------
   58|      0|        zero_parsed = true;
   59|      0|        return *r;
   60|      0|    }
   61|       |
   62|    580|    return unexpected(parse_error::error);
   63|    580|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_:
   44|    874|{
   45|    874|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|    874|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|    874|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEibEEEOSM_:
   68|    574|{
   69|    574|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 0, False: 574]
  ------------------
   70|      0|        return {*r, 16, false};
   71|      0|    }
   72|    574|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 0, False: 574]
  ------------------
   73|      0|        return {*r, 2, false};
   74|      0|    }
   75|    574|    {
   76|    574|        bool zero_parsed{false};
   77|    574|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 0, False: 574]
  ------------------
   78|      0|            return {*r, 8, zero_parsed};
   79|      0|        }
   80|    574|    }
   81|    574|    return {ranges::begin(range), 10, false};
   82|    574|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESL_i:
  155|    894|{
  156|    894|    using char_type = detail::char_t<Range>;
  157|       |
  158|    894|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|    894|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  160|    894|            return unexpected_scan_error(
  161|    894|                scan_error::invalid_scanned_value,
  162|    894|                "Failed to parse integer: No digits found");
  163|    894|        }
  164|    894|        return ranges::end(range);
  165|    894|    }
  166|    894|    else {
  167|    894|        return read_while1_code_unit(
  168|    894|                   range, [&](char_type ch)
  169|    894|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|    894|            .transform_error(map_parse_error_to_scan_error(
  171|    894|                scan_error::invalid_scanned_value,
  172|    894|                "Failed to parse integer: No digits found"));
  173|    894|    }
  174|    894|}
_ZZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESL_iENKUlcE_clEc:
  169|    894|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSK_12basic_stringIT0_NSK_11char_traitsISR_EENSK_9allocatorISR_EEEENSQ_IcNSS_IcEENSU_IcEEEEEEEEESN_iRKNS1_35localized_number_formatting_optionsISR_EE:
  184|     16|{
  185|     16|    std::basic_string<CharT> output;
  186|     16|    std::string thsep_indices;
  187|     16|    auto it = ranges::begin(range);
  188|     16|    bool digit_matched = false;
  189|     16|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 16, False: 0]
  ------------------
  190|     16|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 0, False: 16]
  ------------------
  191|      0|            thsep_indices.push_back(static_cast<char>(
  192|      0|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|      0|        }
  194|     16|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 16, False: 0]
  ------------------
  195|     16|            break;
  196|     16|        }
  197|      0|        else {
  198|      0|            output.push_back(*it);
  199|      0|            digit_matched = true;
  200|      0|        }
  201|     16|    }
  202|     16|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 16, False: 0]
  |  |  ------------------
  ------------------
  203|     16|        return unexpected_scan_error(
  204|     16|            scan_error::invalid_scanned_value,
  205|     16|            "Failed to parse integer: No digits found");
  206|     16|    }
  207|      0|    return std::tuple{it, output, thsep_indices};
  208|     16|}
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|     92|    {
  335|     92|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|     92|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|     92|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|     92|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|     92|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 92]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|     92|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|     92|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|     92|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|     92|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 92]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|     92|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 92]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|     92|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|     92|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 92, False: 0]
  |  |  ------------------
  ------------------
  361|     92|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|     92|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|     92|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|     92|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|     92|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 92]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|     92|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|     92|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|     92|                    parse_integer_digits_without_thsep(
  363|     92|                        ranges::subrange{prefix_result.iterator,
  364|     92|                                         ranges::end(range)},
  365|     92|                        prefix_result.parsed_base));
  366|       |
  367|     92|            auto buf = make_contiguous_buffer(
  368|     92|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|     92|            SCN_TRY(result_it,
  ------------------
  |  |   71|     92|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|     92|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|     92|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|     92|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 92, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     92|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     92|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     92|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     92|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     92|    }                                                  \
  |  |  |  |   70|     92|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|     92|        }
  377|       |
  378|      0|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|      0|            localized_number_formatting_options<CharT>{loc};
  383|      0|#endif
  384|       |
  385|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RKNS0_6detail12format_specsERT0_NSM_10locale_refE:
  334|    304|    {
  335|    304|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|    304|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    304|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    304|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    304|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 304]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    304|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    304|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|    304|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|    304|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 304]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|    304|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 304]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|    304|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|    304|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 296, False: 8]
  |  |  ------------------
  ------------------
  361|    296|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|    296|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    296|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    296|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    296|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 296, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    296|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    296|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    296|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    296|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    296|    }                                                  \
  |  |  |  |   70|    296|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|      8|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|      8|            localized_number_formatting_options<CharT>{loc};
  383|      8|#endif
  384|       |
  385|      8|        SCN_TRY(
  ------------------
  |  |   71|      8|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      8|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      8|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      8|    }                                                  \
  |  |  |  |   70|      8|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|    270|    {
  335|    270|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|    270|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    270|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    270|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    270|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 270]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    270|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    270|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|    270|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|    270|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 270]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|    270|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 270]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|    270|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|    270|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 238, False: 32]
  |  |  ------------------
  ------------------
  361|    238|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|    238|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    238|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    238|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    238|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 238]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    238|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    238|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|    238|                    parse_integer_digits_without_thsep(
  363|    238|                        ranges::subrange{prefix_result.iterator,
  364|    238|                                         ranges::end(range)},
  365|    238|                        prefix_result.parsed_base));
  366|       |
  367|    238|            auto buf = make_contiguous_buffer(
  368|    238|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|    238|            SCN_TRY(result_it,
  ------------------
  |  |   71|    238|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    238|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    238|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    238|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 238, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    238|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    238|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    238|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    238|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    238|    }                                                  \
  |  |  |  |   70|    238|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|    238|        }
  377|       |
  378|     32|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|     32|            localized_number_formatting_options<CharT>{loc};
  383|     32|#endif
  384|       |
  385|     32|        SCN_TRY(
  ------------------
  |  |   71|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 32, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     32|    }                                                  \
  |  |  |  |   70|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RKNS0_6detail12format_specsERT0_NSM_10locale_refE:
  334|    304|    {
  335|    304|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|    304|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    304|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    304|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    304|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 304]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    304|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    304|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|    304|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|    304|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 304]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|    304|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 304]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|    304|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|    304|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 296, False: 8]
  |  |  ------------------
  ------------------
  361|    296|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|    296|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    296|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    296|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    296|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 296, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    296|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    296|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    296|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    296|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    296|    }                                                  \
  |  |  |  |   70|    296|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|      8|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|      8|            localized_number_formatting_options<CharT>{loc};
  383|      8|#endif
  384|       |
  385|      8|        SCN_TRY(
  ------------------
  |  |   71|      8|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      8|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      8|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      8|    }                                                  \
  |  |  |  |   70|      8|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|    270|    {
  335|    270|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|    270|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    270|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    270|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    270|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 270]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    270|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    270|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|    270|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|    270|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 270]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|    270|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 270]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|    270|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|    270|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 238, False: 32]
  |  |  ------------------
  ------------------
  361|    238|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|    238|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    238|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    238|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    238|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 238]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    238|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    238|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|    238|                    parse_integer_digits_without_thsep(
  363|    238|                        ranges::subrange{prefix_result.iterator,
  364|    238|                                         ranges::end(range)},
  365|    238|                        prefix_result.parsed_base));
  366|       |
  367|    238|            auto buf = make_contiguous_buffer(
  368|    238|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|    238|            SCN_TRY(result_it,
  ------------------
  |  |   71|    238|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    238|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    238|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    238|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 238, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    238|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    238|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    238|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    238|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    238|    }                                                  \
  |  |  |  |   70|    238|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|    238|        }
  377|       |
  378|     32|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|     32|            localized_number_formatting_options<CharT>{loc};
  383|     32|#endif
  384|       |
  385|     32|        SCN_TRY(
  ------------------
  |  |   71|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 32, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     32|    }                                                  \
  |  |  |  |   70|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEmEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
  334|    276|    {
  335|    276|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|    276|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    276|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    276|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    276|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 276]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    276|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    276|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|    276|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|    276|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 276]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|    276|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 276]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|    276|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|    276|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 276, False: 0]
  |  |  ------------------
  ------------------
  361|    276|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|    276|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    276|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    276|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    276|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 276, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    276|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    276|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    276|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    276|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    276|    }                                                  \
  |  |  |  |   70|    276|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|      0|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|      0|            localized_number_formatting_options<CharT>{loc};
  383|      0|#endif
  384|       |
  385|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
  334|     26|    {
  335|     26|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|     26|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|     26|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|     26|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 26]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|     26|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|     26|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|     26|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|     26|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 26]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|     26|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 26]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|     26|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|     26|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 26, False: 0]
  |  |  ------------------
  ------------------
  361|     26|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|     26|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|     26|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|     26|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 26, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     26|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     26|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     26|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     26|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     26|    }                                                  \
  |  |  |  |   70|     26|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|      0|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|      0|            localized_number_formatting_options<CharT>{loc};
  383|      0|#endif
  384|       |
  385|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESE_i:
  120|  3.26k|{
  121|  3.26k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|  3.26k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.26k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.26k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  3.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 3.26k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  3.26k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  3.26k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|  3.26k|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|  3.26k|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|  3.26k|        parse_integer_base_prefix(
  126|  3.26k|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|  3.26k|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 0, False: 3.26k]
  ------------------
  129|      0|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 0, False: 0]
  ------------------
  130|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 0, False: 0]
  ------------------
  131|      0|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|      0|                digits_begin_it, ranges::begin(range));
  133|      0|        }
  134|      0|        else {
  135|      0|            parsed_zero = false;
  136|      0|        }
  137|      0|    }
  138|  3.26k|    else {
  139|  3.26k|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 0, False: 3.26k]
  ------------------
  140|  3.26k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 3.26k, False: 0]
  ------------------
  141|  3.26k|            digits_begin_it = base_prefix_begin_it;
  142|  3.26k|        }
  143|  3.26k|    }
  144|       |
  145|  3.26k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 3.26k, False: 0]
  ------------------
  146|  3.26k|        sign = sign_type::plus_sign;
  147|  3.26k|    }
  148|  3.26k|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|  3.26k|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|  3.26k|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_i:
   87|  3.26k|{
   88|  3.26k|    switch (base) {
   89|     36|        case 2:
  ------------------
  |  Branch (89:9): [True: 36, False: 3.22k]
  ------------------
   90|       |            // allow 0b/0B
   91|     36|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|     36|                    false};
   93|       |
   94|     16|        case 8: {
  ------------------
  |  Branch (94:9): [True: 16, False: 3.24k]
  ------------------
   95|       |            // allow 0o/0O/0
   96|     16|            bool zero_parsed = false;
   97|     16|            auto it = apply_opt(
   98|     16|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|     16|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|  1.04k|        case 16:
  ------------------
  |  Branch (102:9): [True: 1.04k, False: 2.21k]
  ------------------
  103|       |            // allow 0x/0X
  104|  1.04k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|  1.04k|                    false};
  106|       |
  107|  2.12k|        case 0:
  ------------------
  |  Branch (107:9): [True: 2.12k, False: 1.13k]
  ------------------
  108|       |            // detect base
  109|  2.12k|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|  2.12k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|     38|        default:
  ------------------
  |  Branch (111:9): [True: 38, False: 3.22k]
  ------------------
  112|       |            // no base prefix allowed
  113|     38|            return {ranges::begin(range), base, false};
  114|  3.26k|    }
  115|  3.26k|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   37|  2.16k|{
   38|  2.16k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|  2.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|  2.16k|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_Rb:
   52|  2.14k|{
   53|  2.14k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 0, False: 2.14k]
  ------------------
   54|      0|        return *r;
   55|      0|    }
   56|       |
   57|  2.14k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 0, False: 2.14k]
  ------------------
   58|      0|        zero_parsed = true;
   59|      0|        return *r;
   60|      0|    }
   61|       |
   62|  2.14k|    return unexpected(parse_error::error);
   63|  2.14k|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   44|  3.17k|{
   45|  3.17k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|  3.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|  3.17k|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_:
   68|  2.12k|{
   69|  2.12k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 0, False: 2.12k]
  ------------------
   70|      0|        return {*r, 16, false};
   71|      0|    }
   72|  2.12k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 0, False: 2.12k]
  ------------------
   73|      0|        return {*r, 2, false};
   74|      0|    }
   75|  2.12k|    {
   76|  2.12k|        bool zero_parsed{false};
   77|  2.12k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 0, False: 2.12k]
  ------------------
   78|      0|            return {*r, 8, zero_parsed};
   79|      0|        }
   80|  2.12k|    }
   81|  2.12k|    return {ranges::begin(range), 10, false};
   82|  2.12k|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESD_i:
  155|  3.21k|{
  156|  3.21k|    using char_type = detail::char_t<Range>;
  157|       |
  158|  3.21k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|  3.21k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  3.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.21k]
  |  |  ------------------
  ------------------
  160|      0|            return unexpected_scan_error(
  161|      0|                scan_error::invalid_scanned_value,
  162|      0|                "Failed to parse integer: No digits found");
  163|      0|        }
  164|  3.21k|        return ranges::end(range);
  165|  3.21k|    }
  166|  3.21k|    else {
  167|  3.21k|        return read_while1_code_unit(
  168|  3.21k|                   range, [&](char_type ch)
  169|  3.21k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|  3.21k|            .transform_error(map_parse_error_to_scan_error(
  171|  3.21k|                scan_error::invalid_scanned_value,
  172|  3.21k|                "Failed to parse integer: No digits found"));
  173|  3.21k|    }
  174|  3.21k|}
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|    872|    {
  324|    872|        SCN_UNUSED(loc);
  ------------------
  |  |  227|    872|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|    872|        return read_default_with_base(range, value, 0);
  326|    872|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|    872|    {
  287|    872|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|    872|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    872|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    872|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    872|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 872]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    872|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    872|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|    872|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|    872|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|    872|            if (prefix_result.sign == sign_type::minus_sign) {
  292|    872|                return unexpected_scan_error(
  293|    872|                    scan_error::invalid_scanned_value,
  294|    872|                    "Unexpected '-' sign when parsing an "
  295|    872|                    "unsigned value");
  296|    872|            }
  297|    872|        }
  298|       |
  299|    872|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 872]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  1.74k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|    872|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    872|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    872|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    872|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 872]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    872|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    872|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  1.74k|                                     ranges::subrange{prefix_result.iterator,
  306|  1.74k|                                                      ranges::end(range)},
  307|  1.74k|                                     prefix_result.parsed_base));
  308|       |
  309|  1.74k|        auto buf = make_contiguous_buffer(
  310|  1.74k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  1.74k|        SCN_TRY(result_it,
  ------------------
  |  |   71|    872|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    872|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    872|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    872|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 872, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    872|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    872|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    872|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    872|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    872|    }                                                  \
  |  |  |  |   70|    872|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  1.74k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|    872|    {
  324|    872|        SCN_UNUSED(loc);
  ------------------
  |  |  227|    872|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|    872|        return read_default_with_base(range, value, 0);
  326|    872|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|    872|    {
  287|    872|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|    872|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    872|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    872|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    872|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 872]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    872|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    872|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|    872|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|    872|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|    872|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 872]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|    872|        }
  298|       |
  299|    872|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 872]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  1.74k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|    872|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    872|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    872|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    872|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 872]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    872|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    872|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  1.74k|                                     ranges::subrange{prefix_result.iterator,
  306|  1.74k|                                                      ranges::end(range)},
  307|  1.74k|                                     prefix_result.parsed_base));
  308|       |
  309|  1.74k|        auto buf = make_contiguous_buffer(
  310|  1.74k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  1.74k|        SCN_TRY(result_it,
  ------------------
  |  |   71|    872|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    872|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    872|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    872|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 872, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    872|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    872|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    872|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    872|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    872|    }                                                  \
  |  |  |  |   70|    872|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  1.74k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEmEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|  1.01k|    {
  335|  1.01k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  1.01k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.01k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.01k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 1.01k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  1.01k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.01k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  1.01k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  1.01k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 1.01k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  1.01k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 1.01k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  1.01k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  1.01k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 1.01k, False: 0]
  |  |  ------------------
  ------------------
  361|  1.01k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  1.01k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.01k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.01k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 1.01k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  1.01k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.01k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  1.01k|                    parse_integer_digits_without_thsep(
  363|  1.01k|                        ranges::subrange{prefix_result.iterator,
  364|  1.01k|                                         ranges::end(range)},
  365|  1.01k|                        prefix_result.parsed_base));
  366|       |
  367|  1.01k|            auto buf = make_contiguous_buffer(
  368|  1.01k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  1.01k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  1.01k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.01k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.01k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.01k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.01k|    }                                                  \
  |  |  |  |   70|  1.01k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|  1.01k|        }
  377|       |
  378|      0|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|      0|            localized_number_formatting_options<CharT>{loc};
  383|      0|#endif
  384|       |
  385|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSC_12basic_stringIT0_NSC_11char_traitsISJ_EENSC_9allocatorISJ_EEEENSI_IcNSK_IcEENSM_IcEEEEEEEEESF_iRKNS1_35localized_number_formatting_optionsISJ_EE:
  184|     44|{
  185|     44|    std::basic_string<CharT> output;
  186|     44|    std::string thsep_indices;
  187|     44|    auto it = ranges::begin(range);
  188|     44|    bool digit_matched = false;
  189|     44|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 44, False: 0]
  ------------------
  190|     44|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 0, False: 44]
  ------------------
  191|      0|            thsep_indices.push_back(static_cast<char>(
  192|      0|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|      0|        }
  194|     44|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 44, False: 0]
  ------------------
  195|     44|            break;
  196|     44|        }
  197|      0|        else {
  198|      0|            output.push_back(*it);
  199|      0|            digit_matched = true;
  200|      0|        }
  201|     44|    }
  202|     44|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|     44|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 44, False: 0]
  |  |  ------------------
  ------------------
  203|     44|        return unexpected_scan_error(
  204|     44|            scan_error::invalid_scanned_value,
  205|     44|            "Failed to parse integer: No digits found");
  206|     44|    }
  207|      0|    return std::tuple{it, output, thsep_indices};
  208|     44|}
_ZN3scn2v24impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  279|  9.34k|    {
  280|  9.34k|        detail::check_int_type_specs(specs, eh);
  281|  9.34k|    }
_ZN3scn2v24impl20parse_integer_prefixINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS5_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESG_i:
  120|    740|{
  121|    740|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|    740|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    740|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    740|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    740|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 740]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    740|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    740|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|    740|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|    740|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|    740|        parse_integer_base_prefix(
  126|    740|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|    740|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 0, False: 740]
  ------------------
  129|      0|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 0, False: 0]
  |  Branch (129:13): [True: 0, False: 0]
  ------------------
  130|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 0, False: 0]
  ------------------
  131|      0|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|      0|                digits_begin_it, ranges::begin(range));
  133|      0|        }
  134|      0|        else {
  135|      0|            parsed_zero = false;
  136|      0|        }
  137|      0|    }
  138|    740|    else {
  139|    740|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 0, False: 740]
  |  Branch (139:13): [True: 740, False: 0]
  ------------------
  140|    740|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 740, False: 0]
  ------------------
  141|    740|            digits_begin_it = base_prefix_begin_it;
  142|    740|        }
  143|    740|    }
  144|       |
  145|    740|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 740, False: 0]
  ------------------
  146|    740|        sign = sign_type::plus_sign;
  147|    740|    }
  148|    740|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|    740|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|    740|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEibEEEOSM_i:
   87|    740|{
   88|    740|    switch (base) {
   89|     18|        case 2:
  ------------------
  |  Branch (89:9): [True: 18, False: 722]
  ------------------
   90|       |            // allow 0b/0B
   91|     18|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|     18|                    false};
   93|       |
   94|      6|        case 8: {
  ------------------
  |  Branch (94:9): [True: 6, False: 734]
  ------------------
   95|       |            // allow 0o/0O/0
   96|      6|            bool zero_parsed = false;
   97|      6|            auto it = apply_opt(
   98|      6|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|      6|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|    242|        case 16:
  ------------------
  |  Branch (102:9): [True: 242, False: 498]
  ------------------
  103|       |            // allow 0x/0X
  104|    242|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|    242|                    false};
  106|       |
  107|    462|        case 0:
  ------------------
  |  Branch (107:9): [True: 462, False: 278]
  ------------------
  108|       |            // detect base
  109|    462|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|    462|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|     12|        default:
  ------------------
  |  Branch (111:9): [True: 12, False: 728]
  ------------------
  112|       |            // no base prefix allowed
  113|     12|            return {ranges::begin(range), base, false};
  114|    740|    }
  115|    740|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_:
   37|    480|{
   38|    480|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|    480|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|    480|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_Rb:
   52|    468|{
   53|    468|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 0, False: 468]
  ------------------
   54|      0|        return *r;
   55|      0|    }
   56|       |
   57|    468|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 0, False: 468]
  ------------------
   58|      0|        zero_parsed = true;
   59|      0|        return *r;
   60|      0|    }
   61|       |
   62|    468|    return unexpected(parse_error::error);
   63|    468|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_:
   44|    704|{
   45|    704|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|    704|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|    704|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEibEEEOSM_:
   68|    462|{
   69|    462|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 0, False: 462]
  ------------------
   70|      0|        return {*r, 16, false};
   71|      0|    }
   72|    462|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 0, False: 462]
  ------------------
   73|      0|        return {*r, 2, false};
   74|      0|    }
   75|    462|    {
   76|    462|        bool zero_parsed{false};
   77|    462|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 0, False: 462]
  ------------------
   78|      0|            return {*r, 8, zero_parsed};
   79|      0|        }
   80|    462|    }
   81|    462|    return {ranges::begin(range), 10, false};
   82|    462|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESL_i:
  155|    724|{
  156|    724|    using char_type = detail::char_t<Range>;
  157|       |
  158|    724|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|    724|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  160|    724|            return unexpected_scan_error(
  161|    724|                scan_error::invalid_scanned_value,
  162|    724|                "Failed to parse integer: No digits found");
  163|    724|        }
  164|    724|        return ranges::end(range);
  165|    724|    }
  166|    724|    else {
  167|    724|        return read_while1_code_unit(
  168|    724|                   range, [&](char_type ch)
  169|    724|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|    724|            .transform_error(map_parse_error_to_scan_error(
  171|    724|                scan_error::invalid_scanned_value,
  172|    724|                "Failed to parse integer: No digits found"));
  173|    724|    }
  174|    724|}
_ZZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESL_iENKUlwE_clEw:
  169|    724|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSK_12basic_stringIT0_NSK_11char_traitsISR_EENSK_9allocatorISR_EEEENSQ_IcNSS_IcEENSU_IcEEEEEEEEESN_iRKNS1_35localized_number_formatting_optionsISR_EE:
  184|     16|{
  185|     16|    std::basic_string<CharT> output;
  186|     16|    std::string thsep_indices;
  187|     16|    auto it = ranges::begin(range);
  188|     16|    bool digit_matched = false;
  189|     16|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 16, False: 0]
  ------------------
  190|     16|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 0, False: 16]
  ------------------
  191|      0|            thsep_indices.push_back(static_cast<char>(
  192|      0|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|      0|        }
  194|     16|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 16, False: 0]
  ------------------
  195|     16|            break;
  196|     16|        }
  197|      0|        else {
  198|      0|            output.push_back(*it);
  199|      0|            digit_matched = true;
  200|      0|        }
  201|     16|    }
  202|     16|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 16, False: 0]
  |  |  ------------------
  ------------------
  203|     16|        return unexpected_scan_error(
  204|     16|            scan_error::invalid_scanned_value,
  205|     16|            "Failed to parse integer: No digits found");
  206|     16|    }
  207|      0|    return std::tuple{it, output, thsep_indices};
  208|     16|}
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RKNS0_6detail12format_specsERT0_NSM_10locale_refE:
  334|    248|    {
  335|    248|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|    248|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    248|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    248|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    248|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 248]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    248|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    248|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|    248|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|    248|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 248]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|    248|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 248]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|    248|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|    248|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 240, False: 8]
  |  |  ------------------
  ------------------
  361|    240|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|    240|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    240|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    240|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    240|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 240, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    240|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    240|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    240|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    240|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    240|    }                                                  \
  |  |  |  |   70|    240|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|      8|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|      8|            localized_number_formatting_options<CharT>{loc};
  383|      8|#endif
  384|       |
  385|      8|        SCN_TRY(
  ------------------
  |  |   71|      8|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      8|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      8|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      8|    }                                                  \
  |  |  |  |   70|      8|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|    280|    {
  335|    280|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|    280|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    280|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    280|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    280|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 280]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    280|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    280|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|    280|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|    280|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 280]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|    280|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 280]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|    280|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|    280|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 258, False: 22]
  |  |  ------------------
  ------------------
  361|    258|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|    258|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    258|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    258|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    258|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 258]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    258|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    258|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|    258|                    parse_integer_digits_without_thsep(
  363|    258|                        ranges::subrange{prefix_result.iterator,
  364|    258|                                         ranges::end(range)},
  365|    258|                        prefix_result.parsed_base));
  366|       |
  367|    258|            auto buf = make_contiguous_buffer(
  368|    258|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|    258|            SCN_TRY(result_it,
  ------------------
  |  |   71|    258|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    258|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    258|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    258|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 258, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    258|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    258|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    258|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    258|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    258|    }                                                  \
  |  |  |  |   70|    258|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|    258|        }
  377|       |
  378|     22|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|     22|            localized_number_formatting_options<CharT>{loc};
  383|     22|#endif
  384|       |
  385|     22|        SCN_TRY(
  ------------------
  |  |   71|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 22, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     22|    }                                                  \
  |  |  |  |   70|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RKNS0_6detail12format_specsERT0_NSM_10locale_refE:
  334|    248|    {
  335|    248|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|    248|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    248|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    248|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    248|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 248]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    248|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    248|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|    248|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|    248|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 248]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|    248|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 248]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|    248|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|    248|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 240, False: 8]
  |  |  ------------------
  ------------------
  361|    240|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|    240|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    240|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    240|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    240|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 240, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    240|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    240|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    240|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    240|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    240|    }                                                  \
  |  |  |  |   70|    240|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|      8|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|      8|            localized_number_formatting_options<CharT>{loc};
  383|      8|#endif
  384|       |
  385|      8|        SCN_TRY(
  ------------------
  |  |   71|      8|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      8|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      8|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      8|    }                                                  \
  |  |  |  |   70|      8|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|    222|    {
  335|    222|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|    222|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    222|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    222|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    222|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 222]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    222|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    222|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|    222|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|    222|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 222]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|    222|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 222]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|    222|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|    222|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 200, False: 22]
  |  |  ------------------
  ------------------
  361|    200|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|    200|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    200|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    200|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    200|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 200]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    200|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    200|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|    200|                    parse_integer_digits_without_thsep(
  363|    200|                        ranges::subrange{prefix_result.iterator,
  364|    200|                                         ranges::end(range)},
  365|    200|                        prefix_result.parsed_base));
  366|       |
  367|    200|            auto buf = make_contiguous_buffer(
  368|    200|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|    200|            SCN_TRY(result_it,
  ------------------
  |  |   71|    200|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    200|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    200|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    200|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 200, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    200|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    200|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    200|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    200|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    200|    }                                                  \
  |  |  |  |   70|    200|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|    200|        }
  377|       |
  378|     22|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|     22|            localized_number_formatting_options<CharT>{loc};
  383|     22|#endif
  384|       |
  385|     22|        SCN_TRY(
  ------------------
  |  |   71|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 22, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     22|    }                                                  \
  |  |  |  |   70|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEmEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
  334|    218|    {
  335|    218|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|    218|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    218|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    218|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    218|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 218]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    218|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    218|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|    218|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|    218|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 218]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|    218|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 218]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|    218|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|    218|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 218, False: 0]
  |  |  ------------------
  ------------------
  361|    218|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|    218|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    218|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    218|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    218|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 218, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    218|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    218|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    218|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    218|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    218|    }                                                  \
  |  |  |  |   70|    218|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|      0|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|      0|            localized_number_formatting_options<CharT>{loc};
  383|      0|#endif
  384|       |
  385|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
  334|     26|    {
  335|     26|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|     26|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|     26|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|     26|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 26]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|     26|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|     26|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|     26|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|     26|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 26]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|     26|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 26]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|     26|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|     26|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 26, False: 0]
  |  |  ------------------
  ------------------
  361|     26|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|     26|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|     26|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|     26|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 26, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     26|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     26|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     26|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     26|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     26|    }                                                  \
  |  |  |  |   70|     26|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|      0|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|      0|            localized_number_formatting_options<CharT>{loc};
  383|      0|#endif
  384|       |
  385|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }

_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_9sign_typeEEEEEOSG_:
   68|  5.47k|{
   69|  5.47k|    auto r = read_one_of_code_unit(range, "+-");
   70|  5.47k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 5.47k, False: 0]
  ------------------
   71|  5.47k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 5.47k, False: 0]
  ------------------
   72|  5.47k|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  5.47k|        }
   74|      0|        return unexpected(eof_error::eof);
   75|  5.47k|    }
   76|       |
   77|      0|    auto& it = *r;
   78|      0|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 0, False: 0]
  ------------------
   79|      0|        return std::pair{it, sign_type::minus_sign};
   80|      0|    }
   81|      0|    return std::pair{it, sign_type::plus_sign};
   82|      0|}
_ZN3scn2v24impl11char_to_intEc:
   50|  21.0k|{
   51|  21.0k|    return char_to_int_table[static_cast<unsigned char>(ch)];
   52|  21.0k|}
_ZN3scn2v24impl18parse_numeric_signIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeENS1_9sign_typeEEEEEOSI_:
   68|  1.19k|{
   69|  1.19k|    auto r = read_one_of_code_unit(range, "+-");
   70|  1.19k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 1.19k, False: 0]
  ------------------
   71|  1.19k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 1.19k, False: 0]
  ------------------
   72|  1.19k|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  1.19k|        }
   74|      0|        return unexpected(eof_error::eof);
   75|  1.19k|    }
   76|       |
   77|      0|    auto& it = *r;
   78|      0|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 0, False: 0]
  ------------------
   79|      0|        return std::pair{it, sign_type::minus_sign};
   80|      0|    }
   81|      0|    return std::pair{it, sign_type::plus_sign};
   82|      0|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_9sign_typeEEEEEOSG_:
   68|  4.33k|{
   69|  4.33k|    auto r = read_one_of_code_unit(range, "+-");
   70|  4.33k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 4.33k, False: 0]
  ------------------
   71|  4.33k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 4.33k, False: 0]
  ------------------
   72|  4.33k|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  4.33k|        }
   74|      0|        return unexpected(eof_error::eof);
   75|  4.33k|    }
   76|       |
   77|      0|    auto& it = *r;
   78|      0|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 0, False: 0]
  ------------------
   79|      0|        return std::pair{it, sign_type::minus_sign};
   80|      0|    }
   81|      0|    return std::pair{it, sign_type::plus_sign};
   82|      0|}
_ZN3scn2v24impl11char_to_intEw:
   54|  9.30k|{
   55|  9.30k|#if WCHAR_MIN < 0
   56|  9.30k|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (56:9): [True: 9.30k, False: 0]
  |  Branch (56:20): [True: 9.29k, False: 16]
  ------------------
   57|       |#else
   58|       |    if (ch <= 255) {
   59|       |#endif
   60|  9.29k|        return char_to_int(static_cast<char>(ch));
   61|  9.29k|    }
   62|     16|    return 255;
   63|  9.30k|}
_ZN3scn2v24impl18parse_numeric_signIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeENS1_9sign_typeEEEEEOSI_:
   68|    966|{
   69|    966|    auto r = read_one_of_code_unit(range, "+-");
   70|    966|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 966, False: 0]
  ------------------
   71|    966|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 966, False: 0]
  ------------------
   72|    966|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|    966|        }
   74|      0|        return unexpected(eof_error::eof);
   75|    966|    }
   76|       |
   77|      0|    auto& it = *r;
   78|      0|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 0, False: 0]
  ------------------
   79|      0|        return std::pair{it, sign_type::minus_sign};
   80|      0|    }
   81|      0|    return std::pair{it, sign_type::plus_sign};
   82|      0|}

_ZNK3scn2v24impl23reader_impl_for_voidptrIcE19skip_ws_before_readEv:
   33|  1.54k|    {
   34|  1.54k|        return true;
   35|  1.54k|    }
_ZN3scn2v24impl23reader_impl_for_voidptrIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_RPvNS0_6detail10locale_refE:
   50|  1.26k|    {
   51|  1.26k|        detail::format_specs specs{};
   52|  1.26k|        specs.type = detail::presentation_type::int_hex;
   53|       |
   54|  1.26k|        std::uintptr_t intvalue{};
   55|  1.26k|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  |   71|  1.26k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.26k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.26k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.26k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.26k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.26k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.26k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.26k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.26k|    }                                                  \
  |  |  |  |   70|  1.26k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   56|      0|                                                                intvalue, loc));
   57|      0|        value = reinterpret_cast<void*>(intvalue);
   58|      0|        return result;
   59|  1.26k|    }
_ZN3scn2v24impl23reader_impl_for_voidptrIcE11check_specsERKNS0_6detail12format_specsE:
   38|  6.13k|    {
   39|  6.13k|        reader_error_handler eh{};
   40|  6.13k|        detail::check_pointer_type_specs(specs, eh);
   41|  6.13k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  6.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.70k, False: 424]
  |  |  ------------------
  ------------------
   42|  5.70k|            return {scan_error::invalid_format_string, eh.m_msg};
   43|  5.70k|        }
   44|    424|        return {};
   45|  6.13k|    }
_ZN3scn2v24impl23reader_impl_for_voidptrIcE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESH_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
   67|    276|    {
   68|    276|        SCN_UNUSED(specs);
  ------------------
  |  |  227|    276|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   69|    276|        return read_default(range, value, loc);
   70|    276|    }
_ZN3scn2v24impl23reader_impl_for_voidptrIcE12read_defaultINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESH_RPvNS0_6detail10locale_refE:
   50|    276|    {
   51|    276|        detail::format_specs specs{};
   52|    276|        specs.type = detail::presentation_type::int_hex;
   53|       |
   54|    276|        std::uintptr_t intvalue{};
   55|    276|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  |   71|    276|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    276|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    276|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    276|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 276, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    276|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    276|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    276|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    276|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    276|    }                                                  \
  |  |  |  |   70|    276|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   56|      0|                                                                intvalue, loc));
   57|      0|        value = reinterpret_cast<void*>(intvalue);
   58|      0|        return result;
   59|    276|    }
_ZN3scn2v24impl23reader_impl_for_voidptrIcE10read_specsIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_RKNS0_6detail12format_specsERPvNSJ_10locale_refE:
   67|    148|    {
   68|    148|        SCN_UNUSED(specs);
  ------------------
  |  |  227|    148|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   69|    148|        return read_default(range, value, loc);
   70|    148|    }
_ZNK3scn2v24impl23reader_impl_for_voidptrIwE19skip_ws_before_readEv:
   33|  1.23k|    {
   34|  1.23k|        return true;
   35|  1.23k|    }
_ZN3scn2v24impl23reader_impl_for_voidptrIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_RPvNS0_6detail10locale_refE:
   50|  1.01k|    {
   51|  1.01k|        detail::format_specs specs{};
   52|  1.01k|        specs.type = detail::presentation_type::int_hex;
   53|       |
   54|  1.01k|        std::uintptr_t intvalue{};
   55|  1.01k|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  |   71|  1.01k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.01k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.01k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.01k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.01k|    }                                                  \
  |  |  |  |   70|  1.01k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   56|      0|                                                                intvalue, loc));
   57|      0|        value = reinterpret_cast<void*>(intvalue);
   58|      0|        return result;
   59|  1.01k|    }
_ZN3scn2v24impl23reader_impl_for_voidptrIwE11check_specsERKNS0_6detail12format_specsE:
   38|  4.62k|    {
   39|  4.62k|        reader_error_handler eh{};
   40|  4.62k|        detail::check_pointer_type_specs(specs, eh);
   41|  4.62k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  4.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.26k, False: 362]
  |  |  ------------------
  ------------------
   42|  4.26k|            return {scan_error::invalid_format_string, eh.m_msg};
   43|  4.26k|        }
   44|    362|        return {};
   45|  4.62k|    }
_ZN3scn2v24impl23reader_impl_for_voidptrIwE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESH_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
   67|    218|    {
   68|    218|        SCN_UNUSED(specs);
  ------------------
  |  |  227|    218|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   69|    218|        return read_default(range, value, loc);
   70|    218|    }
_ZN3scn2v24impl23reader_impl_for_voidptrIwE12read_defaultINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESH_RPvNS0_6detail10locale_refE:
   50|    218|    {
   51|    218|        detail::format_specs specs{};
   52|    218|        specs.type = detail::presentation_type::int_hex;
   53|       |
   54|    218|        std::uintptr_t intvalue{};
   55|    218|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  |   71|    218|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    218|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    218|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    218|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 218, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    218|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    218|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    218|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    218|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    218|    }                                                  \
  |  |  |  |   70|    218|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   56|      0|                                                                intvalue, loc));
   57|      0|        value = reinterpret_cast<void*>(intvalue);
   58|      0|        return result;
   59|    218|    }
_ZN3scn2v24impl23reader_impl_for_voidptrIwE10read_specsIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_RKNS0_6detail12format_specsERPvNSJ_10locale_refE:
   67|    144|    {
   68|    144|        SCN_UNUSED(specs);
  ------------------
  |  |  227|    144|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   69|    144|        return read_default(range, value, loc);
   70|    144|    }

_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEbOSF_NS0_6detail10locale_refE:
   42|  31.1k|{
   43|  31.1k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  31.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 31.1k]
  |  |  ------------------
  ------------------
   44|      0|        return unexpected(e);
   45|      0|    }
   46|       |
   47|  31.1k|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 18.0k, False: 13.1k]
  ------------------
   48|  18.0k|        return ranges::begin(range);
   49|  18.0k|    }
   50|       |
   51|  13.1k|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|  13.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|  31.1k|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
  121|  1.12k|    {
  122|  1.12k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  1.12k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|  1.12k|                          basic_contiguous_scan_context<char_type>>) {
  126|  1.12k|            auto rd = make_reader<T, char_type>();
  127|  1.12k|            return impl(rd, range, value);
  128|  1.12k|        }
  129|  1.12k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|  1.12k|            auto rd = make_reader<T, char_type>();
  131|  1.12k|            if (!is_segment_contiguous(range)) {
  132|  1.12k|                return impl(rd, range, value);
  133|  1.12k|            }
  134|  1.12k|            auto crange = get_as_contiguous(range);
  135|  1.12k|            SCN_TRY(it, impl(rd, crange, value));
  136|  1.12k|            return ranges_polyfill::batch_next(
  137|  1.12k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|  1.12k|        }
  139|  1.12k|        else {
  140|  1.12k|            SCN_EXPECT(false);
  141|  1.12k|            SCN_UNREACHABLE;
  142|  1.12k|        }
  143|  1.12k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|  1.12k|    {
  112|  1.12k|        SCN_TRY(it,
  ------------------
  |  |   71|  1.12k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.12k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.12k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 1.12k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  1.12k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.12k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  1.12k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  1.12k|                    .transform_error(make_eof_scan_error));
  115|  1.12k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  1.12k|                               loc);
  117|  1.12k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
  121|  1.12k|    {
  122|  1.12k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  1.12k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|  1.12k|                          basic_contiguous_scan_context<char_type>>) {
  126|  1.12k|            auto rd = make_reader<T, char_type>();
  127|  1.12k|            return impl(rd, range, value);
  128|  1.12k|        }
  129|  1.12k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|  1.12k|            auto rd = make_reader<T, char_type>();
  131|  1.12k|            if (!is_segment_contiguous(range)) {
  132|  1.12k|                return impl(rd, range, value);
  133|  1.12k|            }
  134|  1.12k|            auto crange = get_as_contiguous(range);
  135|  1.12k|            SCN_TRY(it, impl(rd, crange, value));
  136|  1.12k|            return ranges_polyfill::batch_next(
  137|  1.12k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|  1.12k|        }
  139|  1.12k|        else {
  140|  1.12k|            SCN_EXPECT(false);
  141|  1.12k|            SCN_UNREACHABLE;
  142|  1.12k|        }
  143|  1.12k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|  1.12k|    {
  112|  1.12k|        SCN_TRY(it,
  ------------------
  |  |   71|  1.12k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.12k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.12k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 1.12k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  1.12k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.12k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  1.12k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  1.12k|                    .transform_error(make_eof_scan_error));
  115|  1.12k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  1.12k|                               loc);
  117|  1.12k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIPvEENS0_13scan_expectedIPKcEERT_:
  121|  1.12k|    {
  122|  1.12k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  1.12k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|  1.12k|                          basic_contiguous_scan_context<char_type>>) {
  126|  1.12k|            auto rd = make_reader<T, char_type>();
  127|  1.12k|            return impl(rd, range, value);
  128|  1.12k|        }
  129|  1.12k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|  1.12k|            auto rd = make_reader<T, char_type>();
  131|  1.12k|            if (!is_segment_contiguous(range)) {
  132|  1.12k|                return impl(rd, range, value);
  133|  1.12k|            }
  134|  1.12k|            auto crange = get_as_contiguous(range);
  135|  1.12k|            SCN_TRY(it, impl(rd, crange, value));
  136|  1.12k|            return ranges_polyfill::batch_next(
  137|  1.12k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|  1.12k|        }
  139|  1.12k|        else {
  140|  1.12k|            SCN_EXPECT(false);
  141|  1.12k|            SCN_UNREACHABLE;
  142|  1.12k|        }
  143|  1.12k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_23reader_impl_for_voidptrIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEPvEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSK_RT1_:
  111|  1.12k|    {
  112|  1.12k|        SCN_TRY(it,
  ------------------
  |  |   71|  1.12k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.12k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.12k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 1.12k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  1.12k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.12k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  1.12k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  1.12k|                    .transform_error(make_eof_scan_error));
  115|  1.12k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  1.12k|                               loc);
  117|  1.12k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIbEENS0_13scan_expectedIPKcEERT_:
  121|  1.12k|    {
  122|  1.12k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  1.12k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|  1.12k|                          basic_contiguous_scan_context<char_type>>) {
  126|  1.12k|            auto rd = make_reader<T, char_type>();
  127|  1.12k|            return impl(rd, range, value);
  128|  1.12k|        }
  129|  1.12k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|  1.12k|            auto rd = make_reader<T, char_type>();
  131|  1.12k|            if (!is_segment_contiguous(range)) {
  132|  1.12k|                return impl(rd, range, value);
  133|  1.12k|            }
  134|  1.12k|            auto crange = get_as_contiguous(range);
  135|  1.12k|            SCN_TRY(it, impl(rd, crange, value));
  136|  1.12k|            return ranges_polyfill::batch_next(
  137|  1.12k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|  1.12k|        }
  139|  1.12k|        else {
  140|  1.12k|            SCN_EXPECT(false);
  141|  1.12k|            SCN_UNREACHABLE;
  142|  1.12k|        }
  143|  1.12k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_boolIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEbEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|  1.12k|    {
  112|  1.12k|        SCN_TRY(it,
  ------------------
  |  |   71|  1.12k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.12k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.12k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 1.12k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  1.12k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.12k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  1.12k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  1.12k|                    .transform_error(make_eof_scan_error));
  115|  1.12k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  1.12k|                               loc);
  117|  1.12k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIcEENS0_13scan_expectedIPKcEERT_:
  121|  1.12k|    {
  122|  1.12k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  1.12k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|  1.12k|                          basic_contiguous_scan_context<char_type>>) {
  126|  1.12k|            auto rd = make_reader<T, char_type>();
  127|  1.12k|            return impl(rd, range, value);
  128|  1.12k|        }
  129|  1.12k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|  1.12k|            auto rd = make_reader<T, char_type>();
  131|  1.12k|            if (!is_segment_contiguous(range)) {
  132|  1.12k|                return impl(rd, range, value);
  133|  1.12k|            }
  134|  1.12k|            auto crange = get_as_contiguous(range);
  135|  1.12k|            SCN_TRY(it, impl(rd, crange, value));
  136|  1.12k|            return ranges_polyfill::batch_next(
  137|  1.12k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|  1.12k|        }
  139|  1.12k|        else {
  140|  1.12k|            SCN_EXPECT(false);
  141|  1.12k|            SCN_UNREACHABLE;
  142|  1.12k|        }
  143|  1.12k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_charIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEcEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|  1.12k|    {
  112|  1.12k|        SCN_TRY(it,
  ------------------
  |  |   71|  1.12k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.12k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.12k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 1.12k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  1.12k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.12k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  1.12k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  1.12k|                    .transform_error(make_eof_scan_error));
  115|  1.12k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  1.12k|                               loc);
  117|  1.12k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
  121|  1.12k|    {
  122|  1.12k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  1.12k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|  1.12k|                          basic_contiguous_scan_context<char_type>>) {
  126|  1.12k|            auto rd = make_reader<T, char_type>();
  127|  1.12k|            return impl(rd, range, value);
  128|  1.12k|        }
  129|  1.12k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|  1.12k|            auto rd = make_reader<T, char_type>();
  131|  1.12k|            if (!is_segment_contiguous(range)) {
  132|  1.12k|                return impl(rd, range, value);
  133|  1.12k|            }
  134|  1.12k|            auto crange = get_as_contiguous(range);
  135|  1.12k|            SCN_TRY(it, impl(rd, crange, value));
  136|  1.12k|            return ranges_polyfill::batch_next(
  137|  1.12k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|  1.12k|        }
  139|  1.12k|        else {
  140|  1.12k|            SCN_EXPECT(false);
  141|  1.12k|            SCN_UNREACHABLE;
  142|  1.12k|        }
  143|  1.12k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|  1.12k|    {
  112|  1.12k|        SCN_TRY(it,
  ------------------
  |  |   71|  1.12k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.12k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.12k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 1.12k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  1.12k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.12k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  1.12k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  1.12k|                    .transform_error(make_eof_scan_error));
  115|  1.12k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  1.12k|                               loc);
  117|  1.12k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
  121|  1.12k|    {
  122|  1.12k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  1.12k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|  1.12k|                          basic_contiguous_scan_context<char_type>>) {
  126|  1.12k|            auto rd = make_reader<T, char_type>();
  127|  1.12k|            return impl(rd, range, value);
  128|  1.12k|        }
  129|  1.12k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|  1.12k|            auto rd = make_reader<T, char_type>();
  131|  1.12k|            if (!is_segment_contiguous(range)) {
  132|  1.12k|                return impl(rd, range, value);
  133|  1.12k|            }
  134|  1.12k|            auto crange = get_as_contiguous(range);
  135|  1.12k|            SCN_TRY(it, impl(rd, crange, value));
  136|  1.12k|            return ranges_polyfill::batch_next(
  137|  1.12k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|  1.12k|        }
  139|  1.12k|        else {
  140|  1.12k|            SCN_EXPECT(false);
  141|  1.12k|            SCN_UNREACHABLE;
  142|  1.12k|        }
  143|  1.12k|    }
_ZN3scn2v24impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
   56|  7.25k|{
   57|  7.25k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (57:19): [Folded - Ignored]
  ------------------
   58|  7.25k|        return reader_impl_for_bool<CharT>{};
   59|  7.25k|    }
   60|  7.25k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (60:24): [Folded - Ignored]
  ------------------
   61|  7.25k|        return reader_impl_for_char<CharT>{};
   62|  7.25k|    }
   63|  7.25k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (63:24): [Folded - Ignored]
  ------------------
   64|  7.25k|        return reader_impl_for_wchar<CharT>{};
   65|  7.25k|    }
   66|  7.25k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (66:24): [Folded - Ignored]
  ------------------
   67|  7.25k|        return reader_impl_for_code_point<CharT>{};
   68|  7.25k|    }
   69|  7.25k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (69:24): [Folded - Ignored]
  |  Branch (69:24): [Folded - Ignored]
  ------------------
   70|  7.25k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (70:24): [Folded - Ignored]
  ------------------
   71|  7.25k|        return reader_impl_for_string<CharT>{};
   72|  7.25k|    }
   73|  7.25k|    else if constexpr (std::is_same_v<T, std::string> ||
   74|  7.25k|                       std::is_same_v<T, std::wstring>) {
   75|  7.25k|        return reader_impl_for_string<CharT>{};
   76|  7.25k|    }
   77|  7.25k|    else if constexpr (std::is_same_v<T, regex_matches> ||
   78|  7.25k|                       std::is_same_v<T, wregex_matches>) {
   79|  7.25k|        return reader_impl_for_regex_matches<CharT>{};
   80|  7.25k|    }
   81|  7.25k|    else if constexpr (std::is_same_v<T, void*>) {
   82|  7.25k|        return reader_impl_for_voidptr<CharT>{};
   83|  7.25k|    }
   84|  7.25k|    else if constexpr (std::is_floating_point_v<T>) {
   85|  7.25k|        return reader_impl_for_float<CharT>{};
   86|  7.25k|    }
   87|  7.25k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
   88|  7.25k|                       !std::is_same_v<T, wchar_t> &&
   89|  7.25k|                       !std::is_same_v<T, char32_t> &&
   90|  7.25k|                       !std::is_same_v<T, bool>) {
   91|  7.25k|        return reader_impl_for_int<CharT>{};
   92|  7.25k|    }
   93|  7.25k|    else {
   94|  7.25k|        return reader_impl_for_monostate<CharT>{};
   95|  7.25k|    }
   96|  7.25k|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEENSt3__117basic_string_viewIcNSH_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSO_RT1_:
  111|  1.12k|    {
  112|  1.12k|        SCN_TRY(it,
  ------------------
  |  |   71|  1.12k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.12k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.12k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 1.12k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  1.12k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.12k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  1.12k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  1.12k|                    .transform_error(make_eof_scan_error));
  115|  1.12k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  1.12k|                               loc);
  117|  1.12k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
  121|  1.12k|    {
  122|  1.12k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  1.12k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|  1.12k|                          basic_contiguous_scan_context<char_type>>) {
  126|  1.12k|            auto rd = make_reader<T, char_type>();
  127|  1.12k|            return impl(rd, range, value);
  128|  1.12k|        }
  129|  1.12k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|  1.12k|            auto rd = make_reader<T, char_type>();
  131|  1.12k|            if (!is_segment_contiguous(range)) {
  132|  1.12k|                return impl(rd, range, value);
  133|  1.12k|            }
  134|  1.12k|            auto crange = get_as_contiguous(range);
  135|  1.12k|            SCN_TRY(it, impl(rd, crange, value));
  136|  1.12k|            return ranges_polyfill::batch_next(
  137|  1.12k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|  1.12k|        }
  139|  1.12k|        else {
  140|  1.12k|            SCN_EXPECT(false);
  141|  1.12k|            SCN_UNREACHABLE;
  142|  1.12k|        }
  143|  1.12k|    }
_ZN3scn2v24impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
   56|  7.25k|{
   57|  7.25k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (57:19): [Folded - Ignored]
  ------------------
   58|  7.25k|        return reader_impl_for_bool<CharT>{};
   59|  7.25k|    }
   60|  7.25k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (60:24): [Folded - Ignored]
  ------------------
   61|  7.25k|        return reader_impl_for_char<CharT>{};
   62|  7.25k|    }
   63|  7.25k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (63:24): [Folded - Ignored]
  ------------------
   64|  7.25k|        return reader_impl_for_wchar<CharT>{};
   65|  7.25k|    }
   66|  7.25k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (66:24): [Folded - Ignored]
  ------------------
   67|  7.25k|        return reader_impl_for_code_point<CharT>{};
   68|  7.25k|    }
   69|  7.25k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (69:24): [Folded - Ignored]
  |  Branch (69:24): [Folded - Ignored]
  ------------------
   70|  7.25k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (70:24): [Folded - Ignored]
  ------------------
   71|  7.25k|        return reader_impl_for_string<CharT>{};
   72|  7.25k|    }
   73|  7.25k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (73:24): [Folded - Ignored]
  |  Branch (73:24): [Folded - Ignored]
  ------------------
   74|  7.25k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (74:24): [Folded - Ignored]
  ------------------
   75|  7.25k|        return reader_impl_for_string<CharT>{};
   76|  7.25k|    }
   77|  7.25k|    else if constexpr (std::is_same_v<T, regex_matches> ||
   78|  7.25k|                       std::is_same_v<T, wregex_matches>) {
   79|  7.25k|        return reader_impl_for_regex_matches<CharT>{};
   80|  7.25k|    }
   81|  7.25k|    else if constexpr (std::is_same_v<T, void*>) {
   82|  7.25k|        return reader_impl_for_voidptr<CharT>{};
   83|  7.25k|    }
   84|  7.25k|    else if constexpr (std::is_floating_point_v<T>) {
   85|  7.25k|        return reader_impl_for_float<CharT>{};
   86|  7.25k|    }
   87|  7.25k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
   88|  7.25k|                       !std::is_same_v<T, wchar_t> &&
   89|  7.25k|                       !std::is_same_v<T, char32_t> &&
   90|  7.25k|                       !std::is_same_v<T, bool>) {
   91|  7.25k|        return reader_impl_for_int<CharT>{};
   92|  7.25k|    }
   93|  7.25k|    else {
   94|  7.25k|        return reader_impl_for_monostate<CharT>{};
   95|  7.25k|    }
   96|  7.25k|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEENSt3__112basic_stringIcNSH_11char_traitsIcEENSH_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSQ_RT1_:
  111|  1.12k|    {
  112|  1.12k|        SCN_TRY(it,
  ------------------
  |  |   71|  1.12k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.12k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.12k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 1.12k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  1.12k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.12k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  1.12k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  1.12k|                    .transform_error(make_eof_scan_error));
  115|  1.12k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  1.12k|                               loc);
  117|  1.12k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKcEERT_:
  121|  1.12k|    {
  122|  1.12k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  1.12k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|  1.12k|                          basic_contiguous_scan_context<char_type>>) {
  126|  1.12k|            auto rd = make_reader<T, char_type>();
  127|  1.12k|            return impl(rd, range, value);
  128|  1.12k|        }
  129|  1.12k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|  1.12k|            auto rd = make_reader<T, char_type>();
  131|  1.12k|            if (!is_segment_contiguous(range)) {
  132|  1.12k|                return impl(rd, range, value);
  133|  1.12k|            }
  134|  1.12k|            auto crange = get_as_contiguous(range);
  135|  1.12k|            SCN_TRY(it, impl(rd, crange, value));
  136|  1.12k|            return ranges_polyfill::batch_next(
  137|  1.12k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|  1.12k|        }
  139|  1.12k|        else {
  140|  1.12k|            SCN_EXPECT(false);
  141|  1.12k|            SCN_UNREACHABLE;
  142|  1.12k|        }
  143|  1.12k|    }
_ZN3scn2v24impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEcEEDav:
   56|  7.25k|{
   57|  7.25k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (57:19): [Folded - Ignored]
  ------------------
   58|  7.25k|        return reader_impl_for_bool<CharT>{};
   59|  7.25k|    }
   60|  7.25k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (60:24): [Folded - Ignored]
  ------------------
   61|  7.25k|        return reader_impl_for_char<CharT>{};
   62|  7.25k|    }
   63|  7.25k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (63:24): [Folded - Ignored]
  ------------------
   64|  7.25k|        return reader_impl_for_wchar<CharT>{};
   65|  7.25k|    }
   66|  7.25k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (66:24): [Folded - Ignored]
  ------------------
   67|  7.25k|        return reader_impl_for_code_point<CharT>{};
   68|  7.25k|    }
   69|  7.25k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (69:24): [Folded - Ignored]
  |  Branch (69:24): [Folded - Ignored]
  ------------------
   70|  7.25k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (70:24): [Folded - Ignored]
  ------------------
   71|  7.25k|        return reader_impl_for_string<CharT>{};
   72|  7.25k|    }
   73|  7.25k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (73:24): [Folded - Ignored]
  |  Branch (73:24): [Folded - Ignored]
  ------------------
   74|  7.25k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (74:24): [Folded - Ignored]
  ------------------
   75|  7.25k|        return reader_impl_for_string<CharT>{};
   76|  7.25k|    }
   77|  7.25k|    else if constexpr (std::is_same_v<T, regex_matches> ||
   78|  7.25k|                       std::is_same_v<T, wregex_matches>) {
   79|  7.25k|        return reader_impl_for_regex_matches<CharT>{};
   80|  7.25k|    }
   81|  7.25k|    else if constexpr (std::is_same_v<T, void*>) {
   82|  7.25k|        return reader_impl_for_voidptr<CharT>{};
   83|  7.25k|    }
   84|  7.25k|    else if constexpr (std::is_floating_point_v<T>) {
   85|  7.25k|        return reader_impl_for_float<CharT>{};
   86|  7.25k|    }
   87|  7.25k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
   88|  7.25k|                       !std::is_same_v<T, wchar_t> &&
   89|  7.25k|                       !std::is_same_v<T, char32_t> &&
   90|  7.25k|                       !std::is_same_v<T, bool>) {
   91|  7.25k|        return reader_impl_for_int<CharT>{};
   92|  7.25k|    }
   93|  7.25k|    else {
   94|  7.25k|        return reader_impl_for_monostate<CharT>{};
   95|  7.25k|    }
   96|  7.25k|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEENSt3__112basic_stringIwNSH_11char_traitsIwEENSH_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSQ_RT1_:
  111|  1.12k|    {
  112|  1.12k|        SCN_TRY(it,
  ------------------
  |  |   71|  1.12k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.12k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.12k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 1.12k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  1.12k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.12k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  1.12k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  1.12k|                    .transform_error(make_eof_scan_error));
  115|  1.12k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  1.12k|                               loc);
  117|  1.12k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
  222|  6.21k|    {
  223|  6.21k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  6.21k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|  6.21k|                          basic_contiguous_scan_context<char_type>>) {
  227|  6.21k|            auto rd = make_reader<T, char_type>();
  228|  6.21k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  6.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.64k, False: 574]
  |  |  ------------------
  ------------------
  229|  5.64k|                return unexpected(e);
  230|  5.64k|            }
  231|       |
  232|    574|            return impl(rd, range, value);
  233|  6.21k|        }
  234|  6.21k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|  6.21k|            auto rd = make_reader<T, char_type>();
  236|  6.21k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|  6.21k|                return unexpected(e);
  238|  6.21k|            }
  239|       |
  240|  6.21k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|  6.21k|                return impl(rd, range, value);
  242|  6.21k|            }
  243|       |
  244|  6.21k|            auto crange = get_as_contiguous(range);
  245|  6.21k|            SCN_TRY(it, impl(rd, crange, value));
  246|  6.21k|            return ranges_polyfill::batch_next(
  247|  6.21k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|  6.21k|        }
  249|  6.21k|        else {
  250|  6.21k|            SCN_EXPECT(false);
  251|  6.21k|            SCN_UNREACHABLE;
  252|  6.21k|        }
  253|  6.21k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|    574|    {
  205|    574|        SCN_TRY(it,
  ------------------
  |  |   71|    574|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    574|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    574|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    574|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 574]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    574|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    574|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|    574|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|    574|                    .transform_error(make_eof_scan_error));
  208|       |
  209|    574|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|    574|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 304, False: 270]
  ------------------
  212|    304|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|    304|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    304|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    304|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    304|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 304, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    304|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    304|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    304|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    304|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    304|    }                                                  \
  |  |  |  |   70|    304|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|    304|        }
  216|       |
  217|    270|        return rd.read_specs(subr, specs, value, loc);
  218|    574|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
  222|  6.21k|    {
  223|  6.21k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  6.21k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|  6.21k|                          basic_contiguous_scan_context<char_type>>) {
  227|  6.21k|            auto rd = make_reader<T, char_type>();
  228|  6.21k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  6.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.64k, False: 574]
  |  |  ------------------
  ------------------
  229|  5.64k|                return unexpected(e);
  230|  5.64k|            }
  231|       |
  232|    574|            return impl(rd, range, value);
  233|  6.21k|        }
  234|  6.21k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|  6.21k|            auto rd = make_reader<T, char_type>();
  236|  6.21k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|  6.21k|                return unexpected(e);
  238|  6.21k|            }
  239|       |
  240|  6.21k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|  6.21k|                return impl(rd, range, value);
  242|  6.21k|            }
  243|       |
  244|  6.21k|            auto crange = get_as_contiguous(range);
  245|  6.21k|            SCN_TRY(it, impl(rd, crange, value));
  246|  6.21k|            return ranges_polyfill::batch_next(
  247|  6.21k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|  6.21k|        }
  249|  6.21k|        else {
  250|  6.21k|            SCN_EXPECT(false);
  251|  6.21k|            SCN_UNREACHABLE;
  252|  6.21k|        }
  253|  6.21k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|    574|    {
  205|    574|        SCN_TRY(it,
  ------------------
  |  |   71|    574|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    574|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    574|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    574|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 574]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    574|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    574|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|    574|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|    574|                    .transform_error(make_eof_scan_error));
  208|       |
  209|    574|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|    574|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 304, False: 270]
  ------------------
  212|    304|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|    304|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    304|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    304|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    304|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 304, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    304|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    304|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    304|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    304|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    304|    }                                                  \
  |  |  |  |   70|    304|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|    304|        }
  216|       |
  217|    270|        return rd.read_specs(subr, specs, value, loc);
  218|    574|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIPvEENS0_13scan_expectedIPKcEERT_:
  222|  6.13k|    {
  223|  6.13k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  6.13k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|  6.13k|                          basic_contiguous_scan_context<char_type>>) {
  227|  6.13k|            auto rd = make_reader<T, char_type>();
  228|  6.13k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  6.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.70k, False: 424]
  |  |  ------------------
  ------------------
  229|  5.70k|                return unexpected(e);
  230|  5.70k|            }
  231|       |
  232|    424|            return impl(rd, range, value);
  233|  6.13k|        }
  234|  6.13k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|  6.13k|            auto rd = make_reader<T, char_type>();
  236|  6.13k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|  6.13k|                return unexpected(e);
  238|  6.13k|            }
  239|       |
  240|  6.13k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|  6.13k|                return impl(rd, range, value);
  242|  6.13k|            }
  243|       |
  244|  6.13k|            auto crange = get_as_contiguous(range);
  245|  6.13k|            SCN_TRY(it, impl(rd, crange, value));
  246|  6.13k|            return ranges_polyfill::batch_next(
  247|  6.13k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|  6.13k|        }
  249|  6.13k|        else {
  250|  6.13k|            SCN_EXPECT(false);
  251|  6.13k|            SCN_UNREACHABLE;
  252|  6.13k|        }
  253|  6.13k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_23reader_impl_for_voidptrIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEPvEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSK_RT1_:
  204|    424|    {
  205|    424|        SCN_TRY(it,
  ------------------
  |  |   71|    424|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    424|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    424|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    424|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 424]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    424|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    424|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|    424|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|    424|                    .transform_error(make_eof_scan_error));
  208|       |
  209|    424|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|    424|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 276, False: 148]
  ------------------
  212|    276|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|    276|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    276|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    276|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    276|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 276, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    276|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    276|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    276|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    276|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    276|    }                                                  \
  |  |  |  |   70|    276|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|    276|        }
  216|       |
  217|    148|        return rd.read_specs(subr, specs, value, loc);
  218|    424|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIbEENS0_13scan_expectedIPKcEERT_:
  222|  6.21k|    {
  223|  6.21k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  6.21k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|  6.21k|                          basic_contiguous_scan_context<char_type>>) {
  227|  6.21k|            auto rd = make_reader<T, char_type>();
  228|  6.21k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  6.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.55k, False: 664]
  |  |  ------------------
  ------------------
  229|  5.55k|                return unexpected(e);
  230|  5.55k|            }
  231|       |
  232|    664|            return impl(rd, range, value);
  233|  6.21k|        }
  234|  6.21k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|  6.21k|            auto rd = make_reader<T, char_type>();
  236|  6.21k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|  6.21k|                return unexpected(e);
  238|  6.21k|            }
  239|       |
  240|  6.21k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|  6.21k|                return impl(rd, range, value);
  242|  6.21k|            }
  243|       |
  244|  6.21k|            auto crange = get_as_contiguous(range);
  245|  6.21k|            SCN_TRY(it, impl(rd, crange, value));
  246|  6.21k|            return ranges_polyfill::batch_next(
  247|  6.21k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|  6.21k|        }
  249|  6.21k|        else {
  250|  6.21k|            SCN_EXPECT(false);
  251|  6.21k|            SCN_UNREACHABLE;
  252|  6.21k|        }
  253|  6.21k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_boolIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEbEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|    664|    {
  205|    664|        SCN_TRY(it,
  ------------------
  |  |   71|    664|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    664|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    664|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    664|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 664]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    664|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    664|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|    664|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|    664|                    .transform_error(make_eof_scan_error));
  208|       |
  209|    664|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|    664|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 312, False: 352]
  ------------------
  212|    312|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|    312|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    312|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    312|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    312|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 312, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    312|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    312|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    312|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    312|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    312|    }                                                  \
  |  |  |  |   70|    312|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|    312|        }
  216|       |
  217|    352|        return rd.read_specs(subr, specs, value, loc);
  218|    664|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIcEENS0_13scan_expectedIPKcEERT_:
  222|  6.13k|    {
  223|  6.13k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  6.13k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|  6.13k|                          basic_contiguous_scan_context<char_type>>) {
  227|  6.13k|            auto rd = make_reader<T, char_type>();
  228|  6.13k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  6.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.59k, False: 534]
  |  |  ------------------
  ------------------
  229|  5.59k|                return unexpected(e);
  230|  5.59k|            }
  231|       |
  232|    534|            return impl(rd, range, value);
  233|  6.13k|        }
  234|  6.13k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|  6.13k|            auto rd = make_reader<T, char_type>();
  236|  6.13k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|  6.13k|                return unexpected(e);
  238|  6.13k|            }
  239|       |
  240|  6.13k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|  6.13k|                return impl(rd, range, value);
  242|  6.13k|            }
  243|       |
  244|  6.13k|            auto crange = get_as_contiguous(range);
  245|  6.13k|            SCN_TRY(it, impl(rd, crange, value));
  246|  6.13k|            return ranges_polyfill::batch_next(
  247|  6.13k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|  6.13k|        }
  249|  6.13k|        else {
  250|  6.13k|            SCN_EXPECT(false);
  251|  6.13k|            SCN_UNREACHABLE;
  252|  6.13k|        }
  253|  6.13k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_charIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEcEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|    534|    {
  205|    534|        SCN_TRY(it,
  ------------------
  |  |   71|    534|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    534|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    534|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    534|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 534]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    534|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    534|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|    534|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|    534|                    .transform_error(make_eof_scan_error));
  208|       |
  209|    534|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|    534|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 296, False: 238]
  ------------------
  212|    296|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|    296|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    296|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    296|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    296|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 26, False: 270]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     26|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     26|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     26|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     26|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     26|    }                                                  \
  |  |  |  |   70|    296|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    270|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|    270|                                        value, loc));
  214|    270|            return w_it.base();
  215|    296|        }
  216|       |
  217|    238|        return rd.read_specs(subr, specs, value, loc);
  218|    534|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
  222|  6.21k|    {
  223|  6.21k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  6.21k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|  6.21k|                          basic_contiguous_scan_context<char_type>>) {
  227|  6.21k|            auto rd = make_reader<T, char_type>();
  228|  6.21k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  6.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.71k, False: 498]
  |  |  ------------------
  ------------------
  229|  5.71k|                return unexpected(e);
  230|  5.71k|            }
  231|       |
  232|    498|            return impl(rd, range, value);
  233|  6.21k|        }
  234|  6.21k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|  6.21k|            auto rd = make_reader<T, char_type>();
  236|  6.21k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|  6.21k|                return unexpected(e);
  238|  6.21k|            }
  239|       |
  240|  6.21k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|  6.21k|                return impl(rd, range, value);
  242|  6.21k|            }
  243|       |
  244|  6.21k|            auto crange = get_as_contiguous(range);
  245|  6.21k|            SCN_TRY(it, impl(rd, crange, value));
  246|  6.21k|            return ranges_polyfill::batch_next(
  247|  6.21k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|  6.21k|        }
  249|  6.21k|        else {
  250|  6.21k|            SCN_EXPECT(false);
  251|  6.21k|            SCN_UNREACHABLE;
  252|  6.21k|        }
  253|  6.21k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|    498|    {
  205|    498|        SCN_TRY(it,
  ------------------
  |  |   71|    498|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    498|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    498|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    498|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 498]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    498|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    498|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|    498|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|    498|                    .transform_error(make_eof_scan_error));
  208|       |
  209|    498|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|    498|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 284, False: 214]
  ------------------
  212|    284|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|    284|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    284|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    284|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    284|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 284, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    284|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    284|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    284|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    284|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    284|    }                                                  \
  |  |  |  |   70|    284|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|    284|        }
  216|       |
  217|    214|        return rd.read_specs(subr, specs, value, loc);
  218|    498|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
  222|  6.13k|    {
  223|  6.13k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  6.13k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|  6.13k|                          basic_contiguous_scan_context<char_type>>) {
  227|  6.13k|            auto rd = make_reader<T, char_type>();
  228|  6.13k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  6.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 180, False: 5.95k]
  |  |  ------------------
  ------------------
  229|    180|                return unexpected(e);
  230|    180|            }
  231|       |
  232|  5.95k|            return impl(rd, range, value);
  233|  6.13k|        }
  234|  6.13k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|  6.13k|            auto rd = make_reader<T, char_type>();
  236|  6.13k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|  6.13k|                return unexpected(e);
  238|  6.13k|            }
  239|       |
  240|  6.13k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|  6.13k|                return impl(rd, range, value);
  242|  6.13k|            }
  243|       |
  244|  6.13k|            auto crange = get_as_contiguous(range);
  245|  6.13k|            SCN_TRY(it, impl(rd, crange, value));
  246|  6.13k|            return ranges_polyfill::batch_next(
  247|  6.13k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|  6.13k|        }
  249|  6.13k|        else {
  250|  6.13k|            SCN_EXPECT(false);
  251|  6.13k|            SCN_UNREACHABLE;
  252|  6.13k|        }
  253|  6.13k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEENSt3__117basic_string_viewIcNSH_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSO_RT1_:
  204|  5.95k|    {
  205|  5.95k|        SCN_TRY(it,
  ------------------
  |  |   71|  5.95k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.95k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.95k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  5.95k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 5.95k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  5.95k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  5.95k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  5.95k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  5.95k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  5.95k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  5.95k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 646, False: 5.30k]
  ------------------
  212|    646|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|    646|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    646|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    646|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    646|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 292, False: 354]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    292|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    292|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    292|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    292|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    292|    }                                                  \
  |  |  |  |   70|    646|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    354|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|    354|                                        value, loc));
  214|    354|            return w_it.base();
  215|    646|        }
  216|       |
  217|  5.30k|        return rd.read_specs(subr, specs, value, loc);
  218|  5.95k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
  222|  6.13k|    {
  223|  6.13k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  6.13k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|  6.13k|                          basic_contiguous_scan_context<char_type>>) {
  227|  6.13k|            auto rd = make_reader<T, char_type>();
  228|  6.13k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  6.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 180, False: 5.95k]
  |  |  ------------------
  ------------------
  229|    180|                return unexpected(e);
  230|    180|            }
  231|       |
  232|  5.95k|            return impl(rd, range, value);
  233|  6.13k|        }
  234|  6.13k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|  6.13k|            auto rd = make_reader<T, char_type>();
  236|  6.13k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|  6.13k|                return unexpected(e);
  238|  6.13k|            }
  239|       |
  240|  6.13k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|  6.13k|                return impl(rd, range, value);
  242|  6.13k|            }
  243|       |
  244|  6.13k|            auto crange = get_as_contiguous(range);
  245|  6.13k|            SCN_TRY(it, impl(rd, crange, value));
  246|  6.13k|            return ranges_polyfill::batch_next(
  247|  6.13k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|  6.13k|        }
  249|  6.13k|        else {
  250|  6.13k|            SCN_EXPECT(false);
  251|  6.13k|            SCN_UNREACHABLE;
  252|  6.13k|        }
  253|  6.13k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEENSt3__112basic_stringIcNSH_11char_traitsIcEENSH_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSQ_RT1_:
  204|  5.95k|    {
  205|  5.95k|        SCN_TRY(it,
  ------------------
  |  |   71|  5.95k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.95k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.95k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  5.95k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 5.95k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  5.95k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  5.95k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  5.95k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  5.95k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  5.95k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  5.95k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 646, False: 5.30k]
  ------------------
  212|    646|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|    646|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    646|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    646|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    646|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 292, False: 354]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    292|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    292|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    292|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    292|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    292|    }                                                  \
  |  |  |  |   70|    646|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    354|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|    354|                                        value, loc));
  214|    354|            return w_it.base();
  215|    646|        }
  216|       |
  217|  5.30k|        return rd.read_specs(subr, specs, value, loc);
  218|  5.95k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKcEERT_:
  222|  6.13k|    {
  223|  6.13k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  6.13k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|  6.13k|                          basic_contiguous_scan_context<char_type>>) {
  227|  6.13k|            auto rd = make_reader<T, char_type>();
  228|  6.13k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  6.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 180, False: 5.95k]
  |  |  ------------------
  ------------------
  229|    180|                return unexpected(e);
  230|    180|            }
  231|       |
  232|  5.95k|            return impl(rd, range, value);
  233|  6.13k|        }
  234|  6.13k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|  6.13k|            auto rd = make_reader<T, char_type>();
  236|  6.13k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|  6.13k|                return unexpected(e);
  238|  6.13k|            }
  239|       |
  240|  6.13k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|  6.13k|                return impl(rd, range, value);
  242|  6.13k|            }
  243|       |
  244|  6.13k|            auto crange = get_as_contiguous(range);
  245|  6.13k|            SCN_TRY(it, impl(rd, crange, value));
  246|  6.13k|            return ranges_polyfill::batch_next(
  247|  6.13k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|  6.13k|        }
  249|  6.13k|        else {
  250|  6.13k|            SCN_EXPECT(false);
  251|  6.13k|            SCN_UNREACHABLE;
  252|  6.13k|        }
  253|  6.13k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEENSt3__112basic_stringIwNSH_11char_traitsIwEENSH_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSQ_RT1_:
  204|  5.95k|    {
  205|  5.95k|        SCN_TRY(it,
  ------------------
  |  |   71|  5.95k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.95k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.95k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  5.95k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 5.95k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  5.95k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  5.95k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  5.95k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  5.95k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  5.95k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  5.95k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 646, False: 5.30k]
  ------------------
  212|    646|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|    646|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    646|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    646|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    646|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 292, False: 354]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    292|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    292|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    292|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    292|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    292|    }                                                  \
  |  |  |  |   70|    646|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    354|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|    354|                                        value, loc));
  214|    354|            return w_it.base();
  215|    646|        }
  216|       |
  217|  5.30k|        return rd.read_specs(subr, specs, value, loc);
  218|  5.95k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEbOSF_NS0_6detail10locale_refE:
   42|  23.9k|{
   43|  23.9k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  23.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 23.9k]
  |  |  ------------------
  ------------------
   44|      0|        return unexpected(e);
   45|      0|    }
   46|       |
   47|  23.9k|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 13.5k, False: 10.4k]
  ------------------
   48|  13.5k|        return ranges::begin(range);
   49|  13.5k|    }
   50|       |
   51|  10.4k|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|  10.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|  23.9k|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
  121|    872|    {
  122|    872|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|    872|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|    872|                          basic_contiguous_scan_context<char_type>>) {
  126|    872|            auto rd = make_reader<T, char_type>();
  127|    872|            return impl(rd, range, value);
  128|    872|        }
  129|    872|        else if constexpr (!detail::is_type_disabled<T>) {
  130|    872|            auto rd = make_reader<T, char_type>();
  131|    872|            if (!is_segment_contiguous(range)) {
  132|    872|                return impl(rd, range, value);
  133|    872|            }
  134|    872|            auto crange = get_as_contiguous(range);
  135|    872|            SCN_TRY(it, impl(rd, crange, value));
  136|    872|            return ranges_polyfill::batch_next(
  137|    872|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|    872|        }
  139|    872|        else {
  140|    872|            SCN_EXPECT(false);
  141|    872|            SCN_UNREACHABLE;
  142|    872|        }
  143|    872|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|    872|    {
  112|    872|        SCN_TRY(it,
  ------------------
  |  |   71|    872|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    872|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    872|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    872|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 872]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    872|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    872|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|    872|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|    872|                    .transform_error(make_eof_scan_error));
  115|    872|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|    872|                               loc);
  117|    872|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
  121|    872|    {
  122|    872|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|    872|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|    872|                          basic_contiguous_scan_context<char_type>>) {
  126|    872|            auto rd = make_reader<T, char_type>();
  127|    872|            return impl(rd, range, value);
  128|    872|        }
  129|    872|        else if constexpr (!detail::is_type_disabled<T>) {
  130|    872|            auto rd = make_reader<T, char_type>();
  131|    872|            if (!is_segment_contiguous(range)) {
  132|    872|                return impl(rd, range, value);
  133|    872|            }
  134|    872|            auto crange = get_as_contiguous(range);
  135|    872|            SCN_TRY(it, impl(rd, crange, value));
  136|    872|            return ranges_polyfill::batch_next(
  137|    872|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|    872|        }
  139|    872|        else {
  140|    872|            SCN_EXPECT(false);
  141|    872|            SCN_UNREACHABLE;
  142|    872|        }
  143|    872|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|    872|    {
  112|    872|        SCN_TRY(it,
  ------------------
  |  |   71|    872|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    872|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    872|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    872|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 872]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    872|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    872|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|    872|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|    872|                    .transform_error(make_eof_scan_error));
  115|    872|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|    872|                               loc);
  117|    872|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIPvEENS0_13scan_expectedIPKwEERT_:
  121|    872|    {
  122|    872|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|    872|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|    872|                          basic_contiguous_scan_context<char_type>>) {
  126|    872|            auto rd = make_reader<T, char_type>();
  127|    872|            return impl(rd, range, value);
  128|    872|        }
  129|    872|        else if constexpr (!detail::is_type_disabled<T>) {
  130|    872|            auto rd = make_reader<T, char_type>();
  131|    872|            if (!is_segment_contiguous(range)) {
  132|    872|                return impl(rd, range, value);
  133|    872|            }
  134|    872|            auto crange = get_as_contiguous(range);
  135|    872|            SCN_TRY(it, impl(rd, crange, value));
  136|    872|            return ranges_polyfill::batch_next(
  137|    872|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|    872|        }
  139|    872|        else {
  140|    872|            SCN_EXPECT(false);
  141|    872|            SCN_UNREACHABLE;
  142|    872|        }
  143|    872|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_23reader_impl_for_voidptrIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEPvEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSK_RT1_:
  111|    872|    {
  112|    872|        SCN_TRY(it,
  ------------------
  |  |   71|    872|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    872|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    872|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    872|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 872]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    872|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    872|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|    872|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|    872|                    .transform_error(make_eof_scan_error));
  115|    872|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|    872|                               loc);
  117|    872|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIbEENS0_13scan_expectedIPKwEERT_:
  121|    872|    {
  122|    872|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|    872|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|    872|                          basic_contiguous_scan_context<char_type>>) {
  126|    872|            auto rd = make_reader<T, char_type>();
  127|    872|            return impl(rd, range, value);
  128|    872|        }
  129|    872|        else if constexpr (!detail::is_type_disabled<T>) {
  130|    872|            auto rd = make_reader<T, char_type>();
  131|    872|            if (!is_segment_contiguous(range)) {
  132|    872|                return impl(rd, range, value);
  133|    872|            }
  134|    872|            auto crange = get_as_contiguous(range);
  135|    872|            SCN_TRY(it, impl(rd, crange, value));
  136|    872|            return ranges_polyfill::batch_next(
  137|    872|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|    872|        }
  139|    872|        else {
  140|    872|            SCN_EXPECT(false);
  141|    872|            SCN_UNREACHABLE;
  142|    872|        }
  143|    872|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_20reader_impl_for_boolIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEbEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|    872|    {
  112|    872|        SCN_TRY(it,
  ------------------
  |  |   71|    872|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    872|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    872|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    872|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 872]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    872|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    872|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|    872|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|    872|                    .transform_error(make_eof_scan_error));
  115|    872|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|    872|                               loc);
  117|    872|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIwEENS0_13scan_expectedIPKwEERT_:
  121|    872|    {
  122|    872|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|    872|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|    872|                          basic_contiguous_scan_context<char_type>>) {
  126|    872|            auto rd = make_reader<T, char_type>();
  127|    872|            return impl(rd, range, value);
  128|    872|        }
  129|    872|        else if constexpr (!detail::is_type_disabled<T>) {
  130|    872|            auto rd = make_reader<T, char_type>();
  131|    872|            if (!is_segment_contiguous(range)) {
  132|    872|                return impl(rd, range, value);
  133|    872|            }
  134|    872|            auto crange = get_as_contiguous(range);
  135|    872|            SCN_TRY(it, impl(rd, crange, value));
  136|    872|            return ranges_polyfill::batch_next(
  137|    872|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|    872|        }
  139|    872|        else {
  140|    872|            SCN_EXPECT(false);
  141|    872|            SCN_UNREACHABLE;
  142|    872|        }
  143|    872|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_wcharIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEwEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|    872|    {
  112|    872|        SCN_TRY(it,
  ------------------
  |  |   71|    872|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    872|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    872|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    872|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 872]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    872|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    872|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|    872|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|    872|                    .transform_error(make_eof_scan_error));
  115|    872|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|    872|                               loc);
  117|    872|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
  121|    872|    {
  122|    872|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|    872|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|    872|                          basic_contiguous_scan_context<char_type>>) {
  126|    872|            auto rd = make_reader<T, char_type>();
  127|    872|            return impl(rd, range, value);
  128|    872|        }
  129|    872|        else if constexpr (!detail::is_type_disabled<T>) {
  130|    872|            auto rd = make_reader<T, char_type>();
  131|    872|            if (!is_segment_contiguous(range)) {
  132|    872|                return impl(rd, range, value);
  133|    872|            }
  134|    872|            auto crange = get_as_contiguous(range);
  135|    872|            SCN_TRY(it, impl(rd, crange, value));
  136|    872|            return ranges_polyfill::batch_next(
  137|    872|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|    872|        }
  139|    872|        else {
  140|    872|            SCN_EXPECT(false);
  141|    872|            SCN_UNREACHABLE;
  142|    872|        }
  143|    872|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|    872|    {
  112|    872|        SCN_TRY(it,
  ------------------
  |  |   71|    872|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    872|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    872|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    872|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 872]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    872|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    872|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|    872|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|    872|                    .transform_error(make_eof_scan_error));
  115|    872|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|    872|                               loc);
  117|    872|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKwEERT_:
  121|    872|    {
  122|    872|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|    872|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|    872|                          basic_contiguous_scan_context<char_type>>) {
  126|    872|            auto rd = make_reader<T, char_type>();
  127|    872|            return impl(rd, range, value);
  128|    872|        }
  129|    872|        else if constexpr (!detail::is_type_disabled<T>) {
  130|    872|            auto rd = make_reader<T, char_type>();
  131|    872|            if (!is_segment_contiguous(range)) {
  132|    872|                return impl(rd, range, value);
  133|    872|            }
  134|    872|            auto crange = get_as_contiguous(range);
  135|    872|            SCN_TRY(it, impl(rd, crange, value));
  136|    872|            return ranges_polyfill::batch_next(
  137|    872|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|    872|        }
  139|    872|        else {
  140|    872|            SCN_EXPECT(false);
  141|    872|            SCN_UNREACHABLE;
  142|    872|        }
  143|    872|    }
_ZN3scn2v24impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEwEEDav:
   56|  5.49k|{
   57|  5.49k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (57:19): [Folded - Ignored]
  ------------------
   58|  5.49k|        return reader_impl_for_bool<CharT>{};
   59|  5.49k|    }
   60|  5.49k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (60:24): [Folded - Ignored]
  ------------------
   61|  5.49k|        return reader_impl_for_char<CharT>{};
   62|  5.49k|    }
   63|  5.49k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (63:24): [Folded - Ignored]
  ------------------
   64|  5.49k|        return reader_impl_for_wchar<CharT>{};
   65|  5.49k|    }
   66|  5.49k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (66:24): [Folded - Ignored]
  ------------------
   67|  5.49k|        return reader_impl_for_code_point<CharT>{};
   68|  5.49k|    }
   69|  5.49k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (69:24): [Folded - Ignored]
  |  Branch (69:24): [Folded - Ignored]
  ------------------
   70|  5.49k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (70:24): [Folded - Ignored]
  ------------------
   71|  5.49k|        return reader_impl_for_string<CharT>{};
   72|  5.49k|    }
   73|  5.49k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (73:24): [Folded - Ignored]
  |  Branch (73:24): [Folded - Ignored]
  ------------------
   74|  5.49k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (74:24): [Folded - Ignored]
  ------------------
   75|  5.49k|        return reader_impl_for_string<CharT>{};
   76|  5.49k|    }
   77|  5.49k|    else if constexpr (std::is_same_v<T, regex_matches> ||
   78|  5.49k|                       std::is_same_v<T, wregex_matches>) {
   79|  5.49k|        return reader_impl_for_regex_matches<CharT>{};
   80|  5.49k|    }
   81|  5.49k|    else if constexpr (std::is_same_v<T, void*>) {
   82|  5.49k|        return reader_impl_for_voidptr<CharT>{};
   83|  5.49k|    }
   84|  5.49k|    else if constexpr (std::is_floating_point_v<T>) {
   85|  5.49k|        return reader_impl_for_float<CharT>{};
   86|  5.49k|    }
   87|  5.49k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
   88|  5.49k|                       !std::is_same_v<T, wchar_t> &&
   89|  5.49k|                       !std::is_same_v<T, char32_t> &&
   90|  5.49k|                       !std::is_same_v<T, bool>) {
   91|  5.49k|        return reader_impl_for_int<CharT>{};
   92|  5.49k|    }
   93|  5.49k|    else {
   94|  5.49k|        return reader_impl_for_monostate<CharT>{};
   95|  5.49k|    }
   96|  5.49k|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEENSt3__112basic_stringIcNSH_11char_traitsIcEENSH_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSQ_RT1_:
  111|    872|    {
  112|    872|        SCN_TRY(it,
  ------------------
  |  |   71|    872|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    872|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    872|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    872|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 872]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    872|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    872|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|    872|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|    872|                    .transform_error(make_eof_scan_error));
  115|    872|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|    872|                               loc);
  117|    872|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
  121|    872|    {
  122|    872|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|    872|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|    872|                          basic_contiguous_scan_context<char_type>>) {
  126|    872|            auto rd = make_reader<T, char_type>();
  127|    872|            return impl(rd, range, value);
  128|    872|        }
  129|    872|        else if constexpr (!detail::is_type_disabled<T>) {
  130|    872|            auto rd = make_reader<T, char_type>();
  131|    872|            if (!is_segment_contiguous(range)) {
  132|    872|                return impl(rd, range, value);
  133|    872|            }
  134|    872|            auto crange = get_as_contiguous(range);
  135|    872|            SCN_TRY(it, impl(rd, crange, value));
  136|    872|            return ranges_polyfill::batch_next(
  137|    872|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|    872|        }
  139|    872|        else {
  140|    872|            SCN_EXPECT(false);
  141|    872|            SCN_UNREACHABLE;
  142|    872|        }
  143|    872|    }
_ZN3scn2v24impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
   56|  5.49k|{
   57|  5.49k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (57:19): [Folded - Ignored]
  ------------------
   58|  5.49k|        return reader_impl_for_bool<CharT>{};
   59|  5.49k|    }
   60|  5.49k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (60:24): [Folded - Ignored]
  ------------------
   61|  5.49k|        return reader_impl_for_char<CharT>{};
   62|  5.49k|    }
   63|  5.49k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (63:24): [Folded - Ignored]
  ------------------
   64|  5.49k|        return reader_impl_for_wchar<CharT>{};
   65|  5.49k|    }
   66|  5.49k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (66:24): [Folded - Ignored]
  ------------------
   67|  5.49k|        return reader_impl_for_code_point<CharT>{};
   68|  5.49k|    }
   69|  5.49k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (69:24): [Folded - Ignored]
  |  Branch (69:24): [Folded - Ignored]
  ------------------
   70|  5.49k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (70:24): [Folded - Ignored]
  ------------------
   71|  5.49k|        return reader_impl_for_string<CharT>{};
   72|  5.49k|    }
   73|  5.49k|    else if constexpr (std::is_same_v<T, std::string> ||
   74|  5.49k|                       std::is_same_v<T, std::wstring>) {
   75|  5.49k|        return reader_impl_for_string<CharT>{};
   76|  5.49k|    }
   77|  5.49k|    else if constexpr (std::is_same_v<T, regex_matches> ||
   78|  5.49k|                       std::is_same_v<T, wregex_matches>) {
   79|  5.49k|        return reader_impl_for_regex_matches<CharT>{};
   80|  5.49k|    }
   81|  5.49k|    else if constexpr (std::is_same_v<T, void*>) {
   82|  5.49k|        return reader_impl_for_voidptr<CharT>{};
   83|  5.49k|    }
   84|  5.49k|    else if constexpr (std::is_floating_point_v<T>) {
   85|  5.49k|        return reader_impl_for_float<CharT>{};
   86|  5.49k|    }
   87|  5.49k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
   88|  5.49k|                       !std::is_same_v<T, wchar_t> &&
   89|  5.49k|                       !std::is_same_v<T, char32_t> &&
   90|  5.49k|                       !std::is_same_v<T, bool>) {
   91|  5.49k|        return reader_impl_for_int<CharT>{};
   92|  5.49k|    }
   93|  5.49k|    else {
   94|  5.49k|        return reader_impl_for_monostate<CharT>{};
   95|  5.49k|    }
   96|  5.49k|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEENSt3__117basic_string_viewIwNSH_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSO_RT1_:
  111|    872|    {
  112|    872|        SCN_TRY(it,
  ------------------
  |  |   71|    872|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    872|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    872|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    872|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 872]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    872|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    872|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|    872|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|    872|                    .transform_error(make_eof_scan_error));
  115|    872|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|    872|                               loc);
  117|    872|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
  121|    872|    {
  122|    872|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|    872|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|    872|                          basic_contiguous_scan_context<char_type>>) {
  126|    872|            auto rd = make_reader<T, char_type>();
  127|    872|            return impl(rd, range, value);
  128|    872|        }
  129|    872|        else if constexpr (!detail::is_type_disabled<T>) {
  130|    872|            auto rd = make_reader<T, char_type>();
  131|    872|            if (!is_segment_contiguous(range)) {
  132|    872|                return impl(rd, range, value);
  133|    872|            }
  134|    872|            auto crange = get_as_contiguous(range);
  135|    872|            SCN_TRY(it, impl(rd, crange, value));
  136|    872|            return ranges_polyfill::batch_next(
  137|    872|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|    872|        }
  139|    872|        else {
  140|    872|            SCN_EXPECT(false);
  141|    872|            SCN_UNREACHABLE;
  142|    872|        }
  143|    872|    }
_ZN3scn2v24impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
   56|  5.49k|{
   57|  5.49k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (57:19): [Folded - Ignored]
  ------------------
   58|  5.49k|        return reader_impl_for_bool<CharT>{};
   59|  5.49k|    }
   60|  5.49k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (60:24): [Folded - Ignored]
  ------------------
   61|  5.49k|        return reader_impl_for_char<CharT>{};
   62|  5.49k|    }
   63|  5.49k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (63:24): [Folded - Ignored]
  ------------------
   64|  5.49k|        return reader_impl_for_wchar<CharT>{};
   65|  5.49k|    }
   66|  5.49k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (66:24): [Folded - Ignored]
  ------------------
   67|  5.49k|        return reader_impl_for_code_point<CharT>{};
   68|  5.49k|    }
   69|  5.49k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (69:24): [Folded - Ignored]
  |  Branch (69:24): [Folded - Ignored]
  ------------------
   70|  5.49k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (70:24): [Folded - Ignored]
  ------------------
   71|  5.49k|        return reader_impl_for_string<CharT>{};
   72|  5.49k|    }
   73|  5.49k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (73:24): [Folded - Ignored]
  |  Branch (73:24): [Folded - Ignored]
  ------------------
   74|  5.49k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (74:24): [Folded - Ignored]
  ------------------
   75|  5.49k|        return reader_impl_for_string<CharT>{};
   76|  5.49k|    }
   77|  5.49k|    else if constexpr (std::is_same_v<T, regex_matches> ||
   78|  5.49k|                       std::is_same_v<T, wregex_matches>) {
   79|  5.49k|        return reader_impl_for_regex_matches<CharT>{};
   80|  5.49k|    }
   81|  5.49k|    else if constexpr (std::is_same_v<T, void*>) {
   82|  5.49k|        return reader_impl_for_voidptr<CharT>{};
   83|  5.49k|    }
   84|  5.49k|    else if constexpr (std::is_floating_point_v<T>) {
   85|  5.49k|        return reader_impl_for_float<CharT>{};
   86|  5.49k|    }
   87|  5.49k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
   88|  5.49k|                       !std::is_same_v<T, wchar_t> &&
   89|  5.49k|                       !std::is_same_v<T, char32_t> &&
   90|  5.49k|                       !std::is_same_v<T, bool>) {
   91|  5.49k|        return reader_impl_for_int<CharT>{};
   92|  5.49k|    }
   93|  5.49k|    else {
   94|  5.49k|        return reader_impl_for_monostate<CharT>{};
   95|  5.49k|    }
   96|  5.49k|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEENSt3__112basic_stringIwNSH_11char_traitsIwEENSH_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSQ_RT1_:
  111|    872|    {
  112|    872|        SCN_TRY(it,
  ------------------
  |  |   71|    872|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    872|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    872|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    872|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 872]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    872|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    872|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|    872|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|    872|                    .transform_error(make_eof_scan_error));
  115|    872|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|    872|                               loc);
  117|    872|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
  222|  4.67k|    {
  223|  4.67k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  4.67k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|  4.67k|                          basic_contiguous_scan_context<char_type>>) {
  227|  4.67k|            auto rd = make_reader<T, char_type>();
  228|  4.67k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  4.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.20k, False: 470]
  |  |  ------------------
  ------------------
  229|  4.20k|                return unexpected(e);
  230|  4.20k|            }
  231|       |
  232|    470|            return impl(rd, range, value);
  233|  4.67k|        }
  234|  4.67k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|  4.67k|            auto rd = make_reader<T, char_type>();
  236|  4.67k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|  4.67k|                return unexpected(e);
  238|  4.67k|            }
  239|       |
  240|  4.67k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|  4.67k|                return impl(rd, range, value);
  242|  4.67k|            }
  243|       |
  244|  4.67k|            auto crange = get_as_contiguous(range);
  245|  4.67k|            SCN_TRY(it, impl(rd, crange, value));
  246|  4.67k|            return ranges_polyfill::batch_next(
  247|  4.67k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|  4.67k|        }
  249|  4.67k|        else {
  250|  4.67k|            SCN_EXPECT(false);
  251|  4.67k|            SCN_UNREACHABLE;
  252|  4.67k|        }
  253|  4.67k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|    470|    {
  205|    470|        SCN_TRY(it,
  ------------------
  |  |   71|    470|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    470|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    470|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    470|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 470]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    470|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    470|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|    470|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|    470|                    .transform_error(make_eof_scan_error));
  208|       |
  209|    470|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|    470|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 248, False: 222]
  ------------------
  212|    248|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|    248|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    248|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    248|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    248|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 248, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    248|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    248|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    248|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    248|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    248|    }                                                  \
  |  |  |  |   70|    248|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|    248|        }
  216|       |
  217|    222|        return rd.read_specs(subr, specs, value, loc);
  218|    470|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
  222|  4.67k|    {
  223|  4.67k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  4.67k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|  4.67k|                          basic_contiguous_scan_context<char_type>>) {
  227|  4.67k|            auto rd = make_reader<T, char_type>();
  228|  4.67k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  4.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.20k, False: 470]
  |  |  ------------------
  ------------------
  229|  4.20k|                return unexpected(e);
  230|  4.20k|            }
  231|       |
  232|    470|            return impl(rd, range, value);
  233|  4.67k|        }
  234|  4.67k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|  4.67k|            auto rd = make_reader<T, char_type>();
  236|  4.67k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|  4.67k|                return unexpected(e);
  238|  4.67k|            }
  239|       |
  240|  4.67k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|  4.67k|                return impl(rd, range, value);
  242|  4.67k|            }
  243|       |
  244|  4.67k|            auto crange = get_as_contiguous(range);
  245|  4.67k|            SCN_TRY(it, impl(rd, crange, value));
  246|  4.67k|            return ranges_polyfill::batch_next(
  247|  4.67k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|  4.67k|        }
  249|  4.67k|        else {
  250|  4.67k|            SCN_EXPECT(false);
  251|  4.67k|            SCN_UNREACHABLE;
  252|  4.67k|        }
  253|  4.67k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|    470|    {
  205|    470|        SCN_TRY(it,
  ------------------
  |  |   71|    470|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    470|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    470|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    470|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 470]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    470|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    470|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|    470|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|    470|                    .transform_error(make_eof_scan_error));
  208|       |
  209|    470|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|    470|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 248, False: 222]
  ------------------
  212|    248|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|    248|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    248|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    248|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    248|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 248, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    248|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    248|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    248|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    248|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    248|    }                                                  \
  |  |  |  |   70|    248|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|    248|        }
  216|       |
  217|    222|        return rd.read_specs(subr, specs, value, loc);
  218|    470|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIPvEENS0_13scan_expectedIPKwEERT_:
  222|  4.62k|    {
  223|  4.62k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  4.62k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|  4.62k|                          basic_contiguous_scan_context<char_type>>) {
  227|  4.62k|            auto rd = make_reader<T, char_type>();
  228|  4.62k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  4.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.26k, False: 362]
  |  |  ------------------
  ------------------
  229|  4.26k|                return unexpected(e);
  230|  4.26k|            }
  231|       |
  232|    362|            return impl(rd, range, value);
  233|  4.62k|        }
  234|  4.62k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|  4.62k|            auto rd = make_reader<T, char_type>();
  236|  4.62k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|  4.62k|                return unexpected(e);
  238|  4.62k|            }
  239|       |
  240|  4.62k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|  4.62k|                return impl(rd, range, value);
  242|  4.62k|            }
  243|       |
  244|  4.62k|            auto crange = get_as_contiguous(range);
  245|  4.62k|            SCN_TRY(it, impl(rd, crange, value));
  246|  4.62k|            return ranges_polyfill::batch_next(
  247|  4.62k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|  4.62k|        }
  249|  4.62k|        else {
  250|  4.62k|            SCN_EXPECT(false);
  251|  4.62k|            SCN_UNREACHABLE;
  252|  4.62k|        }
  253|  4.62k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_23reader_impl_for_voidptrIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEPvEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSK_RT1_:
  204|    362|    {
  205|    362|        SCN_TRY(it,
  ------------------
  |  |   71|    362|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    362|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    362|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    362|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 362]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    362|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    362|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|    362|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|    362|                    .transform_error(make_eof_scan_error));
  208|       |
  209|    362|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|    362|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 218, False: 144]
  ------------------
  212|    218|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|    218|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    218|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    218|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    218|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 218, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    218|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    218|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    218|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    218|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    218|    }                                                  \
  |  |  |  |   70|    218|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|    218|        }
  216|       |
  217|    144|        return rd.read_specs(subr, specs, value, loc);
  218|    362|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIbEENS0_13scan_expectedIPKwEERT_:
  222|  4.67k|    {
  223|  4.67k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  4.67k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|  4.67k|                          basic_contiguous_scan_context<char_type>>) {
  227|  4.67k|            auto rd = make_reader<T, char_type>();
  228|  4.67k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  4.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.14k, False: 532]
  |  |  ------------------
  ------------------
  229|  4.14k|                return unexpected(e);
  230|  4.14k|            }
  231|       |
  232|    532|            return impl(rd, range, value);
  233|  4.67k|        }
  234|  4.67k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|  4.67k|            auto rd = make_reader<T, char_type>();
  236|  4.67k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|  4.67k|                return unexpected(e);
  238|  4.67k|            }
  239|       |
  240|  4.67k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|  4.67k|                return impl(rd, range, value);
  242|  4.67k|            }
  243|       |
  244|  4.67k|            auto crange = get_as_contiguous(range);
  245|  4.67k|            SCN_TRY(it, impl(rd, crange, value));
  246|  4.67k|            return ranges_polyfill::batch_next(
  247|  4.67k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|  4.67k|        }
  249|  4.67k|        else {
  250|  4.67k|            SCN_EXPECT(false);
  251|  4.67k|            SCN_UNREACHABLE;
  252|  4.67k|        }
  253|  4.67k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_20reader_impl_for_boolIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEbEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|    532|    {
  205|    532|        SCN_TRY(it,
  ------------------
  |  |   71|    532|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    532|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    532|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    532|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 532]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    532|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    532|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|    532|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|    532|                    .transform_error(make_eof_scan_error));
  208|       |
  209|    532|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|    532|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 254, False: 278]
  ------------------
  212|    254|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|    254|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    254|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    254|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    254|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 254, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    254|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    254|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    254|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    254|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    254|    }                                                  \
  |  |  |  |   70|    254|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|    254|        }
  216|       |
  217|    278|        return rd.read_specs(subr, specs, value, loc);
  218|    532|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIwEENS0_13scan_expectedIPKwEERT_:
  222|  4.62k|    {
  223|  4.62k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  4.62k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|  4.62k|                          basic_contiguous_scan_context<char_type>>) {
  227|  4.62k|            auto rd = make_reader<T, char_type>();
  228|  4.62k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  4.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.18k, False: 440]
  |  |  ------------------
  ------------------
  229|  4.18k|                return unexpected(e);
  230|  4.18k|            }
  231|       |
  232|    440|            return impl(rd, range, value);
  233|  4.62k|        }
  234|  4.62k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|  4.62k|            auto rd = make_reader<T, char_type>();
  236|  4.62k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|  4.62k|                return unexpected(e);
  238|  4.62k|            }
  239|       |
  240|  4.62k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|  4.62k|                return impl(rd, range, value);
  242|  4.62k|            }
  243|       |
  244|  4.62k|            auto crange = get_as_contiguous(range);
  245|  4.62k|            SCN_TRY(it, impl(rd, crange, value));
  246|  4.62k|            return ranges_polyfill::batch_next(
  247|  4.62k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|  4.62k|        }
  249|  4.62k|        else {
  250|  4.62k|            SCN_EXPECT(false);
  251|  4.62k|            SCN_UNREACHABLE;
  252|  4.62k|        }
  253|  4.62k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_wcharIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEwEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|    440|    {
  205|    440|        SCN_TRY(it,
  ------------------
  |  |   71|    440|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    440|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    440|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    440|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 440]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    440|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    440|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|    440|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|    440|                    .transform_error(make_eof_scan_error));
  208|       |
  209|    440|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|    440|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 240, False: 200]
  ------------------
  212|    240|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|    240|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    240|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    240|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    240|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 26, False: 214]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     26|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     26|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     26|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     26|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     26|    }                                                  \
  |  |  |  |   70|    240|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    214|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|    214|                                        value, loc));
  214|    214|            return w_it.base();
  215|    240|        }
  216|       |
  217|    200|        return rd.read_specs(subr, specs, value, loc);
  218|    440|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
  222|  4.67k|    {
  223|  4.67k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  4.67k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|  4.67k|                          basic_contiguous_scan_context<char_type>>) {
  227|  4.67k|            auto rd = make_reader<T, char_type>();
  228|  4.67k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  4.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.24k, False: 430]
  |  |  ------------------
  ------------------
  229|  4.24k|                return unexpected(e);
  230|  4.24k|            }
  231|       |
  232|    430|            return impl(rd, range, value);
  233|  4.67k|        }
  234|  4.67k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|  4.67k|            auto rd = make_reader<T, char_type>();
  236|  4.67k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|  4.67k|                return unexpected(e);
  238|  4.67k|            }
  239|       |
  240|  4.67k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|  4.67k|                return impl(rd, range, value);
  242|  4.67k|            }
  243|       |
  244|  4.67k|            auto crange = get_as_contiguous(range);
  245|  4.67k|            SCN_TRY(it, impl(rd, crange, value));
  246|  4.67k|            return ranges_polyfill::batch_next(
  247|  4.67k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|  4.67k|        }
  249|  4.67k|        else {
  250|  4.67k|            SCN_EXPECT(false);
  251|  4.67k|            SCN_UNREACHABLE;
  252|  4.67k|        }
  253|  4.67k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|    430|    {
  205|    430|        SCN_TRY(it,
  ------------------
  |  |   71|    430|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    430|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    430|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    430|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 430]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    430|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    430|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|    430|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|    430|                    .transform_error(make_eof_scan_error));
  208|       |
  209|    430|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|    430|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 226, False: 204]
  ------------------
  212|    226|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|    226|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    226|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    226|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    226|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 226, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    226|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    226|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    226|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    226|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    226|    }                                                  \
  |  |  |  |   70|    226|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|    226|        }
  216|       |
  217|    204|        return rd.read_specs(subr, specs, value, loc);
  218|    430|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKwEERT_:
  222|  4.62k|    {
  223|  4.62k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  4.62k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|  4.62k|                          basic_contiguous_scan_context<char_type>>) {
  227|  4.62k|            auto rd = make_reader<T, char_type>();
  228|  4.62k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  4.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 144, False: 4.48k]
  |  |  ------------------
  ------------------
  229|    144|                return unexpected(e);
  230|    144|            }
  231|       |
  232|  4.48k|            return impl(rd, range, value);
  233|  4.62k|        }
  234|  4.62k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|  4.62k|            auto rd = make_reader<T, char_type>();
  236|  4.62k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|  4.62k|                return unexpected(e);
  238|  4.62k|            }
  239|       |
  240|  4.62k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|  4.62k|                return impl(rd, range, value);
  242|  4.62k|            }
  243|       |
  244|  4.62k|            auto crange = get_as_contiguous(range);
  245|  4.62k|            SCN_TRY(it, impl(rd, crange, value));
  246|  4.62k|            return ranges_polyfill::batch_next(
  247|  4.62k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|  4.62k|        }
  249|  4.62k|        else {
  250|  4.62k|            SCN_EXPECT(false);
  251|  4.62k|            SCN_UNREACHABLE;
  252|  4.62k|        }
  253|  4.62k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEENSt3__112basic_stringIcNSH_11char_traitsIcEENSH_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSQ_RT1_:
  204|  4.48k|    {
  205|  4.48k|        SCN_TRY(it,
  ------------------
  |  |   71|  4.48k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.48k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.48k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 4.48k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  4.48k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  4.48k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  4.48k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  4.48k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  4.48k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 464, False: 4.01k]
  ------------------
  212|    464|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|    464|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    464|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    464|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    464|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 80, False: 384]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     80|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     80|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     80|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     80|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     80|    }                                                  \
  |  |  |  |   70|    464|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    384|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|    384|                                        value, loc));
  214|    384|            return w_it.base();
  215|    464|        }
  216|       |
  217|  4.01k|        return rd.read_specs(subr, specs, value, loc);
  218|  4.48k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
  222|  4.62k|    {
  223|  4.62k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  4.62k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|  4.62k|                          basic_contiguous_scan_context<char_type>>) {
  227|  4.62k|            auto rd = make_reader<T, char_type>();
  228|  4.62k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  4.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 144, False: 4.48k]
  |  |  ------------------
  ------------------
  229|    144|                return unexpected(e);
  230|    144|            }
  231|       |
  232|  4.48k|            return impl(rd, range, value);
  233|  4.62k|        }
  234|  4.62k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|  4.62k|            auto rd = make_reader<T, char_type>();
  236|  4.62k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|  4.62k|                return unexpected(e);
  238|  4.62k|            }
  239|       |
  240|  4.62k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|  4.62k|                return impl(rd, range, value);
  242|  4.62k|            }
  243|       |
  244|  4.62k|            auto crange = get_as_contiguous(range);
  245|  4.62k|            SCN_TRY(it, impl(rd, crange, value));
  246|  4.62k|            return ranges_polyfill::batch_next(
  247|  4.62k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|  4.62k|        }
  249|  4.62k|        else {
  250|  4.62k|            SCN_EXPECT(false);
  251|  4.62k|            SCN_UNREACHABLE;
  252|  4.62k|        }
  253|  4.62k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEENSt3__117basic_string_viewIwNSH_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSO_RT1_:
  204|  4.48k|    {
  205|  4.48k|        SCN_TRY(it,
  ------------------
  |  |   71|  4.48k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.48k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.48k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 4.48k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  4.48k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  4.48k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  4.48k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  4.48k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  4.48k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 464, False: 4.01k]
  ------------------
  212|    464|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|    464|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    464|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    464|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    464|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 80, False: 384]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     80|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     80|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     80|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     80|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     80|    }                                                  \
  |  |  |  |   70|    464|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    384|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|    384|                                        value, loc));
  214|    384|            return w_it.base();
  215|    464|        }
  216|       |
  217|  4.01k|        return rd.read_specs(subr, specs, value, loc);
  218|  4.48k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
  222|  4.62k|    {
  223|  4.62k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  4.62k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|  4.62k|                          basic_contiguous_scan_context<char_type>>) {
  227|  4.62k|            auto rd = make_reader<T, char_type>();
  228|  4.62k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  4.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 144, False: 4.48k]
  |  |  ------------------
  ------------------
  229|    144|                return unexpected(e);
  230|    144|            }
  231|       |
  232|  4.48k|            return impl(rd, range, value);
  233|  4.62k|        }
  234|  4.62k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|  4.62k|            auto rd = make_reader<T, char_type>();
  236|  4.62k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|  4.62k|                return unexpected(e);
  238|  4.62k|            }
  239|       |
  240|  4.62k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|  4.62k|                return impl(rd, range, value);
  242|  4.62k|            }
  243|       |
  244|  4.62k|            auto crange = get_as_contiguous(range);
  245|  4.62k|            SCN_TRY(it, impl(rd, crange, value));
  246|  4.62k|            return ranges_polyfill::batch_next(
  247|  4.62k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|  4.62k|        }
  249|  4.62k|        else {
  250|  4.62k|            SCN_EXPECT(false);
  251|  4.62k|            SCN_UNREACHABLE;
  252|  4.62k|        }
  253|  4.62k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEENSt3__112basic_stringIwNSH_11char_traitsIwEENSH_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSQ_RT1_:
  204|  4.48k|    {
  205|  4.48k|        SCN_TRY(it,
  ------------------
  |  |   71|  4.48k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.48k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.48k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 4.48k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  4.48k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  4.48k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  4.48k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  4.48k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  4.48k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 464, False: 4.01k]
  ------------------
  212|    464|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|    464|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    464|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    464|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    464|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 80, False: 384]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     80|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     80|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     80|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     80|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     80|    }                                                  \
  |  |  |  |   70|    464|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    384|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|    384|                                        value, loc));
  214|    384|            return w_it.base();
  215|    464|        }
  216|       |
  217|  4.01k|        return rd.read_specs(subr, specs, value, loc);
  218|  4.48k|    }

_ZN3scn2v24impl16make_regex_flagsENS0_6detail11regex_flagsE:
   56|  19.9k|{
   57|  19.9k|    std::regex_constants::syntax_option_type result{};
   58|  19.9k|    if ((flags & detail::regex_flags::multiline) != detail::regex_flags::none) {
  ------------------
  |  Branch (58:9): [True: 594, False: 19.3k]
  ------------------
   59|    594|#if SCN_HAS_STD_REGEX_MULTILINE
   60|    594|        result |= std::regex_constants::multiline;
   61|       |#else
   62|       |        return unexpected_scan_error(
   63|       |            scan_error::invalid_format_string,
   64|       |            "/m flag for regex isn't supported by regex backend");
   65|       |#endif
   66|    594|    }
   67|  19.9k|    if ((flags & detail::regex_flags::singleline) !=
  ------------------
  |  Branch (67:9): [True: 0, False: 19.9k]
  ------------------
   68|  19.9k|        detail::regex_flags::none) {
   69|      0|        return unexpected_scan_error(
   70|      0|            scan_error::invalid_format_string,
   71|      0|            "/s flag for regex isn't supported by regex backend");
   72|      0|    }
   73|  19.9k|    if ((flags & detail::regex_flags::nocase) != detail::regex_flags::none) {
  ------------------
  |  Branch (73:9): [True: 2.49k, False: 17.4k]
  ------------------
   74|  2.49k|        result |= std::regex_constants::icase;
   75|  2.49k|    }
   76|  19.9k|    if ((flags & detail::regex_flags::nocapture) != detail::regex_flags::none) {
  ------------------
  |  Branch (76:9): [True: 12, False: 19.9k]
  ------------------
   77|     12|        result |= std::regex_constants::nosubs;
   78|     12|    }
   79|  19.9k|    return result;
   80|  19.9k|}
_ZN3scn2v24impl27get_unescaped_regex_patternENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  424|    762|{
  425|    762|    std::string result{pattern};
  426|  4.31k|    for (size_t n = 0; (n = result.find("\\/", n)) != std::string::npos;) {
  ------------------
  |  Branch (426:24): [True: 3.55k, False: 762]
  ------------------
  427|  3.55k|        result.replace(n, 2, "/");
  428|  3.55k|        ++n;
  429|  3.55k|    }
  430|    762|    return result;
  431|    762|}
_ZN3scn2v24impl22read_regex_string_implIcN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEENS0_6detail11regex_flagsESD_:
  131|  11.0k|{
  132|  11.0k|    static_assert(ranges::contiguous_range<Input> &&
  133|  11.0k|                  ranges::borrowed_range<Input> &&
  134|  11.0k|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
  135|       |
  136|  11.0k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
  137|  11.0k|    std::basic_regex<CharT> re{};
  138|  11.0k|    try {
  139|  11.0k|        SCN_TRY(re_flags, make_regex_flags(flags));
  ------------------
  |  |   71|  11.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  11.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  11.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  11.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 11.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  11.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  11.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  140|  11.0k|        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
  141|  11.0k|                                     re_flags | std::regex_constants::nosubs};
  142|  11.0k|    }
  143|  11.0k|    catch (const std::regex_error& err) {
  144|  6.16k|        return unexpected_scan_error(scan_error::invalid_format_string,
  145|  6.16k|                                     "Invalid regex");
  146|  6.16k|    }
  147|       |
  148|  4.85k|    std::match_results<const CharT*> matches{};
  149|  4.85k|    try {
  150|  4.85k|        bool found = std::regex_search(input.data(),
  151|  4.85k|                                       input.data() + input.size(), matches, re,
  152|  4.85k|                                       std::regex_constants::match_continuous);
  153|  4.85k|        if (!found || matches.prefix().matched) {
  ------------------
  |  Branch (153:13): [True: 3.55k, False: 1.30k]
  |  Branch (153:23): [True: 0, False: 1.30k]
  ------------------
  154|  3.22k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  155|  3.22k|                                         "Regular expression didn't match");
  156|  3.22k|        }
  157|  4.85k|    }
  158|  4.85k|    catch (const std::regex_error& err) {
  159|    324|        return unexpected_scan_error(scan_error::invalid_format_string,
  160|    324|                                     "Regex matching failed with an error");
  161|    324|    }
  162|       |
  163|  1.30k|    return input.begin() + ranges::distance(input.data(), matches[0].second);
  164|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
  165|       |    auto re =
  166|       |#if SCN_REGEX_BOOST_USE_ICU
  167|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
  168|       |                             make_regex_flags(flags) |
  169|       |                                 boost::regex_constants::no_except |
  170|       |                                 boost::regex_constants::nosubs);
  171|       |#else
  172|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
  173|       |                                  make_regex_flags(flags) |
  174|       |                                      boost::regex_constants::no_except |
  175|       |                                      boost::regex_constants::nosubs};
  176|       |#endif
  177|       |    if (re.status() != 0) {
  178|       |        return unexpected_scan_error(scan_error::invalid_format_string,
  179|       |                                     "Invalid regex");
  180|       |    }
  181|       |
  182|       |    boost::match_results<const CharT*> matches{};
  183|       |    try {
  184|       |        bool found =
  185|       |#if SCN_REGEX_BOOST_USE_ICU
  186|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
  187|       |                                   matches, re,
  188|       |                                   boost::regex_constants::match_continuous);
  189|       |#else
  190|       |            boost::regex_search(input.data(), input.data() + input.size(),
  191|       |                                matches, re,
  192|       |                                boost::regex_constants::match_continuous);
  193|       |#endif
  194|       |        if (!found || matches.prefix().matched) {
  195|       |            return unexpected_scan_error(scan_error::invalid_scanned_value,
  196|       |                                         "Regular expression didn't match");
  197|       |        }
  198|       |    }
  199|       |    catch (const std::runtime_error& err) {
  200|       |        return unexpected_scan_error(scan_error::invalid_format_string,
  201|       |                                     "Regex matching failed with an error");
  202|       |    }
  203|       |
  204|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
  205|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
  206|       |    static_assert(std::is_same_v<CharT, char>);
  207|       |    std::string flagged_pattern{};
  208|       |    auto re = [&]() {
  209|       |        auto [opts, flagstr] = make_regex_flags(flags);
  210|       |        opts.set_never_capture(true);
  211|       |        if (flagstr.empty()) {
  212|       |            return re2::RE2{pattern, opts};
  213|       |        }
  214|       |        flagged_pattern.reserve(flagstr.size() + pattern.size());
  215|       |        flagged_pattern.append(flagstr);
  216|       |        flagged_pattern.append(pattern);
  217|       |        return re2::RE2{flagged_pattern, opts};
  218|       |    }();
  219|       |    if (!re.ok()) {
  220|       |        return unexpected_scan_error(scan_error::invalid_format_string,
  221|       |                                     "Failed to parse regular expression");
  222|       |    }
  223|       |
  224|       |    auto new_input = detail::make_string_view_from_pointers(
  225|       |        detail::to_address(input.begin()), detail::to_address(input.end()));
  226|       |    bool found = re2::RE2::Consume(&new_input, re);
  227|       |    if (!found) {
  228|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
  229|       |                                     "Regular expression didn't match");
  230|       |    }
  231|       |    return input.begin() + ranges::distance(input.data(), new_input.data());
  232|       |#endif  // SCN_REGEX_BACKEND == ...
  233|  4.85k|}
_ZN3scn2v24impl27get_unescaped_regex_patternENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEE:
  433|    552|{
  434|    552|    std::wstring result{pattern};
  435|  3.40k|    for (size_t n = 0; (n = result.find(L"\\/", n)) != std::wstring::npos;) {
  ------------------
  |  Branch (435:24): [True: 2.85k, False: 552]
  ------------------
  436|  2.85k|        result.replace(n, 2, L"/");
  437|  2.85k|        ++n;
  438|  2.85k|    }
  439|    552|    return result;
  440|    552|}
_ZN3scn2v24impl22read_regex_string_implIwN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEENS0_6detail11regex_flagsESD_:
  131|  8.92k|{
  132|  8.92k|    static_assert(ranges::contiguous_range<Input> &&
  133|  8.92k|                  ranges::borrowed_range<Input> &&
  134|  8.92k|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
  135|       |
  136|  8.92k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
  137|  8.92k|    std::basic_regex<CharT> re{};
  138|  8.92k|    try {
  139|  8.92k|        SCN_TRY(re_flags, make_regex_flags(flags));
  ------------------
  |  |   71|  8.92k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.92k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.92k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 8.92k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  8.92k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  8.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  140|  8.92k|        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
  141|  8.92k|                                     re_flags | std::regex_constants::nosubs};
  142|  8.92k|    }
  143|  8.92k|    catch (const std::regex_error& err) {
  144|  4.80k|        return unexpected_scan_error(scan_error::invalid_format_string,
  145|  4.80k|                                     "Invalid regex");
  146|  4.80k|    }
  147|       |
  148|  4.11k|    std::match_results<const CharT*> matches{};
  149|  4.11k|    try {
  150|  4.11k|        bool found = std::regex_search(input.data(),
  151|  4.11k|                                       input.data() + input.size(), matches, re,
  152|  4.11k|                                       std::regex_constants::match_continuous);
  153|  4.11k|        if (!found || matches.prefix().matched) {
  ------------------
  |  Branch (153:13): [True: 2.96k, False: 1.15k]
  |  Branch (153:23): [True: 0, False: 1.15k]
  ------------------
  154|  2.71k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  155|  2.71k|                                         "Regular expression didn't match");
  156|  2.71k|        }
  157|  4.11k|    }
  158|  4.11k|    catch (const std::regex_error& err) {
  159|    252|        return unexpected_scan_error(scan_error::invalid_format_string,
  160|    252|                                     "Regex matching failed with an error");
  161|    252|    }
  162|       |
  163|  1.15k|    return input.begin() + ranges::distance(input.data(), matches[0].second);
  164|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
  165|       |    auto re =
  166|       |#if SCN_REGEX_BOOST_USE_ICU
  167|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
  168|       |                             make_regex_flags(flags) |
  169|       |                                 boost::regex_constants::no_except |
  170|       |                                 boost::regex_constants::nosubs);
  171|       |#else
  172|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
  173|       |                                  make_regex_flags(flags) |
  174|       |                                      boost::regex_constants::no_except |
  175|       |                                      boost::regex_constants::nosubs};
  176|       |#endif
  177|       |    if (re.status() != 0) {
  178|       |        return unexpected_scan_error(scan_error::invalid_format_string,
  179|       |                                     "Invalid regex");
  180|       |    }
  181|       |
  182|       |    boost::match_results<const CharT*> matches{};
  183|       |    try {
  184|       |        bool found =
  185|       |#if SCN_REGEX_BOOST_USE_ICU
  186|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
  187|       |                                   matches, re,
  188|       |                                   boost::regex_constants::match_continuous);
  189|       |#else
  190|       |            boost::regex_search(input.data(), input.data() + input.size(),
  191|       |                                matches, re,
  192|       |                                boost::regex_constants::match_continuous);
  193|       |#endif
  194|       |        if (!found || matches.prefix().matched) {
  195|       |            return unexpected_scan_error(scan_error::invalid_scanned_value,
  196|       |                                         "Regular expression didn't match");
  197|       |        }
  198|       |    }
  199|       |    catch (const std::runtime_error& err) {
  200|       |        return unexpected_scan_error(scan_error::invalid_format_string,
  201|       |                                     "Regex matching failed with an error");
  202|       |    }
  203|       |
  204|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
  205|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
  206|       |    static_assert(std::is_same_v<CharT, char>);
  207|       |    std::string flagged_pattern{};
  208|       |    auto re = [&]() {
  209|       |        auto [opts, flagstr] = make_regex_flags(flags);
  210|       |        opts.set_never_capture(true);
  211|       |        if (flagstr.empty()) {
  212|       |            return re2::RE2{pattern, opts};
  213|       |        }
  214|       |        flagged_pattern.reserve(flagstr.size() + pattern.size());
  215|       |        flagged_pattern.append(flagstr);
  216|       |        flagged_pattern.append(pattern);
  217|       |        return re2::RE2{flagged_pattern, opts};
  218|       |    }();
  219|       |    if (!re.ok()) {
  220|       |        return unexpected_scan_error(scan_error::invalid_format_string,
  221|       |                                     "Failed to parse regular expression");
  222|       |    }
  223|       |
  224|       |    auto new_input = detail::make_string_view_from_pointers(
  225|       |        detail::to_address(input.begin()), detail::to_address(input.end()));
  226|       |    bool found = re2::RE2::Consume(&new_input, re);
  227|       |    if (!found) {
  228|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
  229|       |                                     "Regular expression didn't match");
  230|       |    }
  231|       |    return input.begin() + ranges::distance(input.data(), new_input.data());
  232|       |#endif  // SCN_REGEX_BACKEND == ...
  233|  4.11k|}

_ZN3scn2v24impl13string_readerIcEC2Ev:
  450|  21.7k|    constexpr string_reader() = default;
_ZNK3scn2v24impl13string_readerIcE19skip_ws_before_readEv:
  493|  21.2k|    {
  494|  21.2k|        return m_type == reader_type::word;
  495|  21.2k|    }
_ZN3scn2v24impl13string_readerIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENSt3__117basic_string_viewIcNSD_11char_traitsIcEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RT0_NS0_6detail10locale_refE:
  500|  1.12k|    {
  501|  1.12k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  1.12k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  502|  1.12k|        return word_reader_impl<SourceCharT>{}.read(SCN_FWD(range), value);
  ------------------
  |  |  248|  1.12k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  1.12k|    }
_ZN3scn2v24impl16word_reader_implIcE4readIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RNSt3__117basic_string_viewIT0_NSK_11char_traitsISM_EEEE:
  120|  1.12k|    {
  121|  1.12k|        return read_string_view_impl(range, read_until_classic_space(range),
  122|  1.12k|                                     value);
  123|  1.12k|    }
_ZN3scn2v24impl21read_string_view_implIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEES8_cEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESE_OT0_RNSt3__117basic_string_viewIT1_NSJ_11char_traitsISL_EEEE:
   62|  1.32k|{
   63|  1.32k|    static_assert(
   64|  1.32k|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   65|       |
   66|  1.32k|    auto src = [&]() {
   67|  1.32k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
   68|  1.32k|            return make_contiguous_buffer(
   69|  1.32k|                ranges::subrange{ranges::begin(range).base(), result.base()});
   70|  1.32k|        }
   71|  1.32k|        else {
   72|  1.32k|            return make_contiguous_buffer(
   73|  1.32k|                ranges::subrange{ranges::begin(range), result});
   74|  1.32k|        }
   75|  1.32k|    }();
   76|  1.32k|    using src_type = decltype(src);
   77|       |
   78|  1.32k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (78:9): [Folded - Ignored]
  ------------------
   79|      0|        return unexpected_scan_error(
   80|      0|            scan_error::invalid_scanned_value,
   81|      0|            "Cannot read a string_view from this source range (not "
   82|      0|            "contiguous)");
   83|      0|    }
   84|  1.32k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (84:19): [Folded - Ignored]
  ------------------
   85|  1.32k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   86|  1.32k|                                     "Cannot read a string_view from "
   87|  1.32k|                                     "this source range (would require "
   88|  1.32k|                                     "transcoding)");
   89|  1.32k|    }
   90|  1.32k|    else {
   91|  1.32k|        const auto view = src.view();
   92|  1.32k|        value = std::basic_string_view<ValueCharT>(
   93|  1.32k|            ranges::data(view), ranges_polyfill::usize(view));
   94|       |
   95|  1.32k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (95:13): [True: 322, False: 1.00k]
  ------------------
   96|    322|            return unexpected_scan_error(
   97|    322|                scan_error::invalid_scanned_value,
   98|    322|                "Invalid encoding in scanned string_view");
   99|    322|        }
  100|       |
  101|  1.00k|        return SCN_MOVE(result);
  ------------------
  |  |  246|  1.00k|    static_cast<    \
  |  |  247|  1.00k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  102|  1.32k|    }
  103|  1.32k|}
_ZZN3scn2v24impl21read_string_view_implIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEES8_cEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESE_OT0_RNSt3__117basic_string_viewIT1_NSJ_11char_traitsISL_EEEEENKUlvE_clEv:
   66|  1.32k|    auto src = [&]() {
   67|  1.32k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (67:23): [Folded - Ignored]
  ------------------
   68|  1.32k|            return make_contiguous_buffer(
   69|  1.32k|                ranges::subrange{ranges::begin(range).base(), result.base()});
   70|  1.32k|        }
   71|  1.32k|        else {
   72|  1.32k|            return make_contiguous_buffer(
   73|  1.32k|                ranges::subrange{ranges::begin(range), result});
   74|  1.32k|        }
   75|  1.32k|    }();
_ZN3scn2v24impl13string_readerIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RT0_NS0_6detail10locale_refE:
  500|  1.12k|    {
  501|  1.12k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  1.12k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  502|  1.12k|        return word_reader_impl<SourceCharT>{}.read(SCN_FWD(range), value);
  ------------------
  |  |  248|  1.12k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  1.12k|    }
_ZN3scn2v24impl16word_reader_implIcE4readIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RNSt3__112basic_stringIT0_NSK_11char_traitsISM_EENSK_9allocatorISM_EEEE:
  112|  1.12k|    {
  113|  1.12k|        return read_string_impl(range, read_until_classic_space(range), value);
  114|  1.12k|    }
_ZN3scn2v24impl16read_string_implIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEES8_cEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESE_OT0_RNSt3__112basic_stringIT1_NSJ_11char_traitsISL_EENSJ_9allocatorISL_EEEE:
   39|  1.32k|{
   40|  1.32k|    static_assert(
   41|  1.32k|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   42|       |
   43|  1.32k|    auto src =
   44|  1.32k|        make_contiguous_buffer(ranges::subrange{ranges::begin(range), result});
   45|  1.32k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (45:9): [True: 322, False: 1.00k]
  ------------------
   46|    322|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   47|    322|                                     "Invalid encoding in scanned string");
   48|    322|    }
   49|  1.00k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  246|  1.00k|    static_cast<    \
  |  |  247|  1.00k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   50|  1.00k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.00k]
  |  |  ------------------
  ------------------
   51|      0|        return unexpected(e);
   52|      0|    }
   53|       |
   54|  1.00k|    return SCN_MOVE(result);
  ------------------
  |  |  246|  1.00k|    static_cast<    \
  |  |  247|  1.00k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   55|  1.00k|}
_ZN3scn2v24impl13string_readerIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENSt3__112basic_stringIwNSD_11char_traitsIwEENSD_9allocatorIwEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RT0_NS0_6detail10locale_refE:
  500|  1.12k|    {
  501|  1.12k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  1.12k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  502|  1.12k|        return word_reader_impl<SourceCharT>{}.read(SCN_FWD(range), value);
  ------------------
  |  |  248|  1.12k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  1.12k|    }
_ZN3scn2v24impl16word_reader_implIcE4readIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RNSt3__112basic_stringIT0_NSK_11char_traitsISM_EENSK_9allocatorISM_EEEE:
  112|  1.12k|    {
  113|  1.12k|        return read_string_impl(range, read_until_classic_space(range), value);
  114|  1.12k|    }
_ZN3scn2v24impl16read_string_implIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEES8_wEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESE_OT0_RNSt3__112basic_stringIT1_NSJ_11char_traitsISL_EENSJ_9allocatorISL_EEEE:
   39|  1.32k|{
   40|  1.32k|    static_assert(
   41|  1.32k|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   42|       |
   43|  1.32k|    auto src =
   44|  1.32k|        make_contiguous_buffer(ranges::subrange{ranges::begin(range), result});
   45|  1.32k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (45:9): [True: 322, False: 1.00k]
  ------------------
   46|    322|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   47|    322|                                     "Invalid encoding in scanned string");
   48|    322|    }
   49|  1.00k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  246|  1.00k|    static_cast<    \
  |  |  247|  1.00k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   50|  1.00k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.00k]
  |  |  ------------------
  ------------------
   51|      0|        return unexpected(e);
   52|      0|    }
   53|       |
   54|  1.00k|    return SCN_MOVE(result);
  ------------------
  |  |  246|  1.00k|    static_cast<    \
  |  |  247|  1.00k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   55|  1.00k|}
_ZN3scn2v24impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  454|  18.3k|    {
  455|  18.3k|        detail::check_string_type_specs(specs, eh);
  456|       |
  457|  18.3k|        SCN_GCC_PUSH
  458|  18.3k|        SCN_GCC_IGNORE("-Wswitch")
  459|  18.3k|        SCN_GCC_IGNORE("-Wswitch-default")
  460|       |
  461|  18.3k|        SCN_CLANG_PUSH
  462|  18.3k|        SCN_CLANG_IGNORE("-Wswitch")
  463|  18.3k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
  464|       |
  465|  18.3k|        switch (specs.type) {
  ------------------
  |  Branch (465:17): [True: 534, False: 17.8k]
  ------------------
  466|  1.24k|            case detail::presentation_type::none:
  ------------------
  |  Branch (466:13): [True: 1.24k, False: 17.1k]
  ------------------
  467|  1.42k|            case detail::presentation_type::string:
  ------------------
  |  Branch (467:13): [True: 180, False: 18.2k]
  ------------------
  468|  1.42k|                m_type = reader_type::word;
  469|  1.42k|                break;
  470|       |
  471|    312|            case detail::presentation_type::character:
  ------------------
  |  Branch (471:13): [True: 312, False: 18.0k]
  ------------------
  472|    312|                m_type = reader_type::character;
  473|    312|                break;
  474|       |
  475|  4.95k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (475:13): [True: 4.95k, False: 13.4k]
  ------------------
  476|  4.95k|                m_type = reader_type::character_set;
  477|  4.95k|                break;
  478|       |
  479|  10.4k|            case detail::presentation_type::regex:
  ------------------
  |  Branch (479:13): [True: 10.4k, False: 7.98k]
  ------------------
  480|  10.4k|                m_type = reader_type::regex;
  481|  10.4k|                break;
  482|       |
  483|    762|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (483:13): [True: 762, False: 17.6k]
  ------------------
  484|    762|                m_type = reader_type::regex_escaped;
  485|    762|                break;
  486|  18.3k|        }
  487|       |
  488|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
  489|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
  490|  18.3k|    }
_ZN3scn2v24impl13string_readerIcE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEENSt3__117basic_string_viewIcNSF_11char_traitsIcEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
  511|    646|    {
  512|    646|        SCN_UNUSED(loc);
  ------------------
  |  |  227|    646|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  513|    646|        return read_impl(SCN_FWD(range), specs, value);
  ------------------
  |  |  248|    646|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  514|    646|    }
_ZN3scn2v24impl13string_readerIcE9read_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEENSt3__117basic_string_viewIcNSF_11char_traitsIcEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNS0_6detail12format_specsERT0_:
  528|    646|    {
  529|    646|        SCN_CLANG_PUSH
  530|    646|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
  531|       |
  532|    646|        switch (m_type) {
  533|    274|            case reader_type::word:
  ------------------
  |  Branch (533:13): [True: 274, False: 372]
  ------------------
  534|    274|                return word_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|    274|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  535|    274|                                                            value);
  536|       |
  537|    102|            case reader_type::character:
  ------------------
  |  Branch (537:13): [True: 102, False: 544]
  ------------------
  538|    102|                return character_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|    102|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  539|    102|                                                                 value);
  540|       |
  541|    222|            case reader_type::character_set:
  ------------------
  |  Branch (541:13): [True: 222, False: 424]
  ------------------
  542|    222|                return character_set_reader_impl<SourceCharT>{}.read(
  543|    222|                    SCN_FWD(range), specs, value);
  ------------------
  |  |  248|    222|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  544|       |
  545|      0|#if !SCN_DISABLE_REGEX
  546|      6|            case reader_type::regex:
  ------------------
  |  Branch (546:13): [True: 6, False: 640]
  ------------------
  547|      6|                return regex_string_reader_impl<SourceCharT>{}.read(
  548|      6|                    SCN_FWD(range), specs.charset_string<SourceCharT>(),
  ------------------
  |  |  248|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  549|      6|                    specs.regexp_flags, value);
  550|       |
  551|     42|            case reader_type::regex_escaped:
  ------------------
  |  Branch (551:13): [True: 42, False: 604]
  ------------------
  552|     42|                return regex_string_reader_impl<SourceCharT>{}.read(
  553|     42|                    SCN_FWD(range),
  ------------------
  |  |  248|     42|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  554|     42|                    get_unescaped_regex_pattern(
  555|     42|                        specs.charset_string<SourceCharT>()),
  556|     42|                    specs.regexp_flags, value);
  557|      0|#endif
  558|       |
  559|      0|            default:
  ------------------
  |  Branch (559:13): [True: 0, False: 646]
  ------------------
  560|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  561|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  562|    646|        }
  563|       |
  564|    646|        SCN_CLANG_POP
  565|    646|    }
_ZN3scn2v24impl16word_reader_implIcE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RNSt3__117basic_string_viewIT0_NSM_11char_traitsISO_EEEE:
  120|    274|    {
  121|    274|        return read_string_view_impl(range, read_until_classic_space(range),
  122|    274|                                     value);
  123|    274|    }
_ZN3scn2v24impl21read_string_view_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS5_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESJ_OT0_RNSt3__117basic_string_viewIT1_NSO_11char_traitsISQ_EEEE:
   62|    376|{
   63|    376|    static_assert(
   64|    376|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   65|       |
   66|    376|    auto src = [&]() {
   67|    376|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
   68|    376|            return make_contiguous_buffer(
   69|    376|                ranges::subrange{ranges::begin(range).base(), result.base()});
   70|    376|        }
   71|    376|        else {
   72|    376|            return make_contiguous_buffer(
   73|    376|                ranges::subrange{ranges::begin(range), result});
   74|    376|        }
   75|    376|    }();
   76|    376|    using src_type = decltype(src);
   77|       |
   78|    376|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (78:9): [Folded - Ignored]
  ------------------
   79|      0|        return unexpected_scan_error(
   80|      0|            scan_error::invalid_scanned_value,
   81|      0|            "Cannot read a string_view from this source range (not "
   82|      0|            "contiguous)");
   83|      0|    }
   84|    376|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (84:19): [Folded - Ignored]
  ------------------
   85|    376|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   86|    376|                                     "Cannot read a string_view from "
   87|    376|                                     "this source range (would require "
   88|    376|                                     "transcoding)");
   89|    376|    }
   90|    376|    else {
   91|    376|        const auto view = src.view();
   92|    376|        value = std::basic_string_view<ValueCharT>(
   93|    376|            ranges::data(view), ranges_polyfill::usize(view));
   94|       |
   95|    376|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (95:13): [True: 166, False: 210]
  ------------------
   96|    166|            return unexpected_scan_error(
   97|    166|                scan_error::invalid_scanned_value,
   98|    166|                "Invalid encoding in scanned string_view");
   99|    166|        }
  100|       |
  101|    210|        return SCN_MOVE(result);
  ------------------
  |  |  246|    210|    static_cast<    \
  |  |  247|    210|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  102|    376|    }
  103|    376|}
_ZZN3scn2v24impl21read_string_view_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS5_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESJ_OT0_RNSt3__117basic_string_viewIT1_NSO_11char_traitsISQ_EEEEENKUlvE_clEv:
   66|    376|    auto src = [&]() {
   67|    376|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (67:23): [Folded - Ignored]
  ------------------
   68|    376|            return make_contiguous_buffer(
   69|    376|                ranges::subrange{ranges::begin(range).base(), result.base()});
   70|    376|        }
   71|    376|        else {
   72|    376|            return make_contiguous_buffer(
   73|    376|                ranges::subrange{ranges::begin(range), result});
   74|    376|        }
   75|    376|    }();
_ZN3scn2v24impl21character_reader_implIcE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RNSt3__117basic_string_viewIT0_NSM_11char_traitsISO_EEEE:
  204|    102|    {
  205|    102|        return read_impl(
  206|    102|            range,
  207|    102|            [&](auto&& rng) {
  208|    102|                return read_string_view_impl(rng, read_all(rng), value);
  209|    102|            },
  210|    102|            detail::priority_tag<1>{});
  211|    102|    }
_ZN3scn2v24impl21character_reader_implIcE9read_implIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEZNS3_4readINS1_15take_width_viewISC_EEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RNSt3__117basic_string_viewIT0_NSN_11char_traitsISP_EEEEEUlSM_E_EENSG_INSH_IRNSE_ISI_EEXsr6rangesE14borrowed_rangeISW_EEE4typeEEESW_OSP_NS0_6detail12priority_tagILm1EEE:
  219|    102|    {
  220|    102|        return read_cb(range);
  221|    102|    }
_ZZN3scn2v24impl21character_reader_implIcE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RNSt3__117basic_string_viewIT0_NSM_11char_traitsISO_EEEEENKUlSL_E_clIRSE_EEDaSL_:
  207|    102|            [&](auto&& rng) {
  208|    102|                return read_string_view_impl(rng, read_all(rng), value);
  209|    102|            },
_ZN3scn2v24impl25character_set_reader_implIcE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RKNS0_6detail12format_specsERNSt3__117basic_string_viewIT0_NSQ_11char_traitsISS_EEEE:
  307|    222|    {
  308|    222|        auto it = read_source_impl(range, {specs});
  309|    222|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|    222|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 8, False: 214]
  |  |  ------------------
  ------------------
  310|      8|            return unexpected(it.error());
  311|      8|        }
  312|       |
  313|    214|        return read_string_view_impl(range, *it, value);
  314|    222|    }
_ZNK3scn2v24impl25character_set_reader_implIcE16read_source_implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_NS3_12specs_helperE:
  397|    666|    {
  398|    666|        const bool is_inverted = helper.specs.charset_is_inverted;
  399|    666|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
  400|       |
  401|    666|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    666|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 666]
  |  |  ------------------
  ------------------
  402|      0|            return unexpected(e);
  403|      0|        }
  404|       |
  405|    666|        read_source_callback cb_wrapper{helper};
  406|       |
  407|    666|        if (accepts_nonascii) {
  ------------------
  |  Branch (407:13): [True: 420, False: 246]
  ------------------
  408|    420|            const auto cb = [&](char32_t cp) {
  409|    420|                return cb_wrapper.on_classic_with_extra_ranges(cp);
  410|    420|            };
  411|       |
  412|    420|            if (is_inverted) {
  ------------------
  |  Branch (412:17): [True: 234, False: 186]
  ------------------
  413|    234|                auto it = read_until_code_point(range, cb);
  414|    234|                return check_nonempty(it, range);
  415|    234|            }
  416|    186|            auto it = read_while_code_point(range, cb);
  417|    186|            return check_nonempty(it, range);
  418|    420|        }
  419|       |
  420|    246|        const auto cb = [&](SourceCharT ch) {
  421|    246|            return cb_wrapper.on_ascii_only(ch);
  422|    246|        };
  423|       |
  424|    246|        if (is_inverted) {
  ------------------
  |  Branch (424:13): [True: 180, False: 66]
  ------------------
  425|    180|            auto it = read_until_code_unit(range, cb);
  426|    180|            return check_nonempty(it, range);
  427|    180|        }
  428|     66|        auto it = read_while_code_unit(range, cb);
  429|     66|        return check_nonempty(it, range);
  430|    246|    }
_ZN3scn2v24impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
  347|  4.95k|        {
  348|  4.95k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (348:17): [True: 618, False: 4.33k]
  ------------------
  349|    618|                return {};
  350|    618|            }
  351|       |
  352|  4.33k|            auto charset_string = specs.charset_string<SourceCharT>();
  353|  4.33k|            auto it = detail::to_address(charset_string.begin());
  354|  4.33k|            auto set = detail::parse_presentation_set(
  355|  4.33k|                it, detail::to_address(charset_string.end()), nonascii);
  356|  4.33k|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  153|  4.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.33k]
  |  |  ------------------
  ------------------
  357|      0|                return nonascii.err;
  358|      0|            }
  359|  4.33k|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  243|  4.33k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.33k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  360|  4.33k|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  243|  4.33k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.33k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  361|       |
  362|      0|            ranges::sort(nonascii.extra_ranges);
  363|  4.33k|            return {};
  364|  4.33k|        }
_ZNK3scn2v24impl22nonascii_specs_handler19on_charset_invertedEv:
  262|  1.81k|    {
  263|       |        // no-op
  264|  1.81k|    }
_ZN3scn2v24impl22nonascii_specs_handler17on_charset_singleEDi:
  235|  1.49M|    {
  236|  1.49M|        on_charset_range(cp, cp + 1);
  237|  1.49M|    }
_ZN3scn2v24impl22nonascii_specs_handler16on_charset_rangeEDiDi:
  240|  1.50M|    {
  241|  1.50M|        if (end <= 127) {
  ------------------
  |  Branch (241:13): [True: 1.21M, False: 282k]
  ------------------
  242|  1.21M|            return;
  243|  1.21M|        }
  244|       |
  245|  30.9M|        for (auto& elem : extra_ranges) {
  ------------------
  |  Branch (245:25): [True: 30.9M, False: 281k]
  ------------------
  246|       |            // TODO: check for overlap
  247|  30.9M|            if (elem.first == end) {
  ------------------
  |  Branch (247:17): [True: 162, False: 30.9M]
  ------------------
  248|    162|                elem.first = begin;
  249|    162|                return;
  250|    162|            }
  251|       |
  252|  30.9M|            if (elem.second == begin) {
  ------------------
  |  Branch (252:17): [True: 534, False: 30.9M]
  ------------------
  253|    534|                elem.second = end;
  254|    534|                return;
  255|    534|            }
  256|  30.9M|        }
  257|       |
  258|   281k|        extra_ranges.push_back(std::make_pair(begin, end));
  259|   281k|    }
_ZNK3scn2v24impl22nonascii_specs_handlercvbEv:
  277|  1.51M|    {
  278|  1.51M|        return static_cast<bool>(err);
  279|  1.51M|    }
_ZZNK3scn2v24impl25character_set_reader_implIcE16read_source_implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_NS3_12specs_helperEENKUlDiE_clEDi:
  408|  22.0k|            const auto cb = [&](char32_t cp) {
  409|  22.0k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
  410|  22.0k|            };
_ZNK3scn2v24impl25character_set_reader_implIcE20read_source_callback28on_classic_with_extra_rangesEDi:
  381|   547k|        {
  382|   547k|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (382:17): [True: 65.8k, False: 481k]
  ------------------
  383|  65.8k|                return helper.is_char_set_in_extra_literals(cp);
  384|  65.8k|            }
  385|       |
  386|   481k|            return helper.is_char_set_in_literals(static_cast<char>(cp));
  387|   547k|        }
_ZNK3scn2v24impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDi:
  331|  65.8k|        {
  332|       |            // TODO: binary search?
  333|  65.8k|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (333:17): [True: 0, False: 65.8k]
  ------------------
  334|      0|                return false;
  335|      0|            }
  336|       |
  337|  65.8k|            const auto cp_val = static_cast<uint32_t>(cp);
  338|  65.8k|            return ranges::find_if(
  339|  65.8k|                       nonascii.extra_ranges,
  340|  65.8k|                       [cp_val](const auto& pair) SCN_NOEXCEPT {
  341|  65.8k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  342|  65.8k|                                  static_cast<uint32_t>(pair.second) > cp_val;
  343|  65.8k|                       }) != nonascii.extra_ranges.end();
  344|  65.8k|        }
_ZZNK3scn2v24impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
  340|   935k|                       [cp_val](const auto& pair) SCN_NOEXCEPT {
  341|   935k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (341:35): [True: 924k, False: 11.3k]
  ------------------
  342|   935k|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (342:35): [True: 17.0k, False: 907k]
  ------------------
  343|   935k|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v24impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
  321|   490k|        {
  322|   490k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  242|   490k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   490k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  323|      0|            const auto val =
  324|   490k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
  325|   490k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
  326|   490k|                    (val % 8)) &
  327|   490k|                   1u;
  328|   490k|        }
_ZN3scn2v24impl25character_set_reader_implIcE14check_nonemptyINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIS8_S8_LNSC_13subrange_kindE1EEEEEEENS0_13scan_expectedIT_EERKSJ_RKT0_:
  435|    666|    {
  436|    666|        if (it == ranges::begin(range)) {
  ------------------
  |  Branch (436:13): [True: 24, False: 642]
  ------------------
  437|     24|            return unexpected_scan_error(
  438|     24|                scan_error::invalid_scanned_value,
  439|     24|                "No characters matched in [character set]");
  440|     24|        }
  441|       |
  442|    642|        return it;
  443|    666|    }
_ZZNK3scn2v24impl25character_set_reader_implIcE16read_source_implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_NS3_12specs_helperEENKUlcE_clEc:
  420|  6.67k|        const auto cb = [&](SourceCharT ch) {
  421|  6.67k|            return cb_wrapper.on_ascii_only(ch);
  422|  6.67k|        };
_ZNK3scn2v24impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
  372|  13.8k|        {
  373|  13.8k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (373:17): [True: 4.96k, False: 8.92k]
  ------------------
  374|  4.96k|                return false;
  375|  4.96k|            }
  376|       |
  377|  8.92k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
  378|  13.8k|        }
_ZN3scn2v24impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
  318|  4.95k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v24impl21read_string_view_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS5_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_OT0_RNSt3__117basic_string_viewIT1_NSP_11char_traitsISR_EEEE:
   62|    214|{
   63|    214|    static_assert(
   64|    214|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   65|       |
   66|    214|    auto src = [&]() {
   67|    214|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
   68|    214|            return make_contiguous_buffer(
   69|    214|                ranges::subrange{ranges::begin(range).base(), result.base()});
   70|    214|        }
   71|    214|        else {
   72|    214|            return make_contiguous_buffer(
   73|    214|                ranges::subrange{ranges::begin(range), result});
   74|    214|        }
   75|    214|    }();
   76|    214|    using src_type = decltype(src);
   77|       |
   78|    214|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (78:9): [Folded - Ignored]
  ------------------
   79|      0|        return unexpected_scan_error(
   80|      0|            scan_error::invalid_scanned_value,
   81|      0|            "Cannot read a string_view from this source range (not "
   82|      0|            "contiguous)");
   83|      0|    }
   84|    214|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (84:19): [Folded - Ignored]
  ------------------
   85|    214|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   86|    214|                                     "Cannot read a string_view from "
   87|    214|                                     "this source range (would require "
   88|    214|                                     "transcoding)");
   89|    214|    }
   90|    214|    else {
   91|    214|        const auto view = src.view();
   92|    214|        value = std::basic_string_view<ValueCharT>(
   93|    214|            ranges::data(view), ranges_polyfill::usize(view));
   94|       |
   95|    214|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (95:13): [True: 70, False: 144]
  ------------------
   96|     70|            return unexpected_scan_error(
   97|     70|                scan_error::invalid_scanned_value,
   98|     70|                "Invalid encoding in scanned string_view");
   99|     70|        }
  100|       |
  101|    144|        return SCN_MOVE(result);
  ------------------
  |  |  246|    144|    static_cast<    \
  |  |  247|    144|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  102|    214|    }
  103|    214|}
_ZZN3scn2v24impl21read_string_view_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS5_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_OT0_RNSt3__117basic_string_viewIT1_NSP_11char_traitsISR_EEEEENKUlvE_clEv:
   66|    214|    auto src = [&]() {
   67|    214|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (67:23): [Folded - Ignored]
  ------------------
   68|    214|            return make_contiguous_buffer(
   69|    214|                ranges::subrange{ranges::begin(range).base(), result.base()});
   70|    214|        }
   71|    214|        else {
   72|    214|            return make_contiguous_buffer(
   73|    214|                ranges::subrange{ranges::begin(range), result});
   74|    214|        }
   75|    214|    }();
_ZN3scn2v24impl24regex_string_reader_implIcE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEENS0_6detail11regex_flagsERNSN_IT0_NSO_IST_EEEE:
  147|     48|    {
  148|     48|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  |   71|     48|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|     48|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|     48|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|     48|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 48, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     48|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     48|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     48|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     48|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     48|    }                                                  \
  |  |  |  |   70|     48|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  149|      0|        return read_string_view_impl(range, it, value);
  150|     48|    }
_ZN3scn2v24impl24regex_string_reader_implIcE4implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_NSt3__117basic_string_viewIcNSN_11char_traitsIcEEEENS0_6detail11regex_flagsE:
  158|    144|    {
  159|    144|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |  101|    288|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (159:23): [Folded - Ignored]
  |  Branch (159:23): [Folded - Ignored]
  ------------------
  160|    144|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (160:23): [Folded - Ignored]
  ------------------
  161|    144|            return unexpected_scan_error(
  162|    144|                scan_error::invalid_scanned_value,
  163|    144|                "Regex backend doesn't support wide strings as input");
  164|    144|        }
  165|    144|        else {
  166|    144|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (166:17): [True: 144, False: 0]
  ------------------
  167|    144|                return unexpected_scan_error(
  168|    144|                    scan_error::invalid_scanned_value,
  169|    144|                    "Cannot use regex with a non-contiguous source "
  170|    144|                    "range");
  171|    144|            }
  172|       |
  173|      0|            auto input = get_as_contiguous(range);
  174|      0|            SCN_TRY(it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  175|      0|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
  176|      0|            return ranges_polyfill::batch_next(
  177|      0|                ranges::begin(range), ranges::distance(input.begin(), it));
  178|      0|        }
  179|    144|    }
_ZN3scn2v24impl13string_readerIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RKNS0_6detail12format_specsERT0_NSQ_10locale_refE:
  511|  5.30k|    {
  512|  5.30k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  5.30k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  513|  5.30k|        return read_impl(SCN_FWD(range), specs, value);
  ------------------
  |  |  248|  5.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  514|  5.30k|    }
_ZN3scn2v24impl13string_readerIcE9read_implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RKNS0_6detail12format_specsERT0_:
  528|  5.30k|    {
  529|  5.30k|        SCN_CLANG_PUSH
  530|  5.30k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
  531|       |
  532|  5.30k|        switch (m_type) {
  533|    202|            case reader_type::word:
  ------------------
  |  Branch (533:13): [True: 202, False: 5.10k]
  ------------------
  534|    202|                return word_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|    202|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  535|    202|                                                            value);
  536|       |
  537|      0|            case reader_type::character:
  ------------------
  |  Branch (537:13): [True: 0, False: 5.30k]
  ------------------
  538|      0|                return character_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  539|      0|                                                                 value);
  540|       |
  541|  1.42k|            case reader_type::character_set:
  ------------------
  |  Branch (541:13): [True: 1.42k, False: 3.87k]
  ------------------
  542|  1.42k|                return character_set_reader_impl<SourceCharT>{}.read(
  543|  1.42k|                    SCN_FWD(range), specs, value);
  ------------------
  |  |  248|  1.42k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  544|       |
  545|      0|#if !SCN_DISABLE_REGEX
  546|  3.46k|            case reader_type::regex:
  ------------------
  |  Branch (546:13): [True: 3.46k, False: 1.84k]
  ------------------
  547|  3.46k|                return regex_string_reader_impl<SourceCharT>{}.read(
  548|  3.46k|                    SCN_FWD(range), specs.charset_string<SourceCharT>(),
  ------------------
  |  |  248|  3.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  549|  3.46k|                    specs.regexp_flags, value);
  550|       |
  551|    212|            case reader_type::regex_escaped:
  ------------------
  |  Branch (551:13): [True: 212, False: 5.09k]
  ------------------
  552|    212|                return regex_string_reader_impl<SourceCharT>{}.read(
  553|    212|                    SCN_FWD(range),
  ------------------
  |  |  248|    212|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  554|    212|                    get_unescaped_regex_pattern(
  555|    212|                        specs.charset_string<SourceCharT>()),
  556|    212|                    specs.regexp_flags, value);
  557|      0|#endif
  558|       |
  559|      0|            default:
  ------------------
  |  Branch (559:13): [True: 0, False: 5.30k]
  ------------------
  560|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  561|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  562|  5.30k|        }
  563|       |
  564|  5.30k|        SCN_CLANG_POP
  565|  5.30k|    }
_ZN3scn2v24impl16word_reader_implIcE4readIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RNSt3__117basic_string_viewIT0_NSL_11char_traitsISN_EEEE:
  120|    202|    {
  121|    202|        return read_string_view_impl(range, read_until_classic_space(range),
  122|    202|                                     value);
  123|    202|    }
_ZN3scn2v24impl25character_set_reader_implIcE4readIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERNSt3__117basic_string_viewIT0_NSP_11char_traitsISR_EEEE:
  307|  1.42k|    {
  308|  1.42k|        auto it = read_source_impl(range, {specs});
  309|  1.42k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  1.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 290, False: 1.13k]
  |  |  ------------------
  ------------------
  310|    290|            return unexpected(it.error());
  311|    290|        }
  312|       |
  313|  1.13k|        return read_string_view_impl(range, *it, value);
  314|  1.42k|    }
_ZNK3scn2v24impl25character_set_reader_implIcE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NS3_12specs_helperE:
  397|  4.28k|    {
  398|  4.28k|        const bool is_inverted = helper.specs.charset_is_inverted;
  399|  4.28k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
  400|       |
  401|  4.28k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  4.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.28k]
  |  |  ------------------
  ------------------
  402|      0|            return unexpected(e);
  403|      0|        }
  404|       |
  405|  4.28k|        read_source_callback cb_wrapper{helper};
  406|       |
  407|  4.28k|        if (accepts_nonascii) {
  ------------------
  |  Branch (407:13): [True: 3.91k, False: 372]
  ------------------
  408|  3.91k|            const auto cb = [&](char32_t cp) {
  409|  3.91k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
  410|  3.91k|            };
  411|       |
  412|  3.91k|            if (is_inverted) {
  ------------------
  |  Branch (412:17): [True: 1.12k, False: 2.79k]
  ------------------
  413|  1.12k|                auto it = read_until_code_point(range, cb);
  414|  1.12k|                return check_nonempty(it, range);
  415|  1.12k|            }
  416|  2.79k|            auto it = read_while_code_point(range, cb);
  417|  2.79k|            return check_nonempty(it, range);
  418|  3.91k|        }
  419|       |
  420|    372|        const auto cb = [&](SourceCharT ch) {
  421|    372|            return cb_wrapper.on_ascii_only(ch);
  422|    372|        };
  423|       |
  424|    372|        if (is_inverted) {
  ------------------
  |  Branch (424:13): [True: 204, False: 168]
  ------------------
  425|    204|            auto it = read_until_code_unit(range, cb);
  426|    204|            return check_nonempty(it, range);
  427|    204|        }
  428|    168|        auto it = read_while_code_unit(range, cb);
  429|    168|        return check_nonempty(it, range);
  430|    372|    }
_ZZNK3scn2v24impl25character_set_reader_implIcE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NS3_12specs_helperEENKUlDiE_clEDi:
  408|   525k|            const auto cb = [&](char32_t cp) {
  409|   525k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
  410|   525k|            };
_ZN3scn2v24impl25character_set_reader_implIcE14check_nonemptyIPKcN4nano6ranges9subrange_8subrangeIS6_S6_LNS8_13subrange_kindE1EEEEENS0_13scan_expectedIT_EERKSE_RKT0_:
  435|  4.28k|    {
  436|  4.28k|        if (it == ranges::begin(range)) {
  ------------------
  |  Branch (436:13): [True: 870, False: 3.41k]
  ------------------
  437|    870|            return unexpected_scan_error(
  438|    870|                scan_error::invalid_scanned_value,
  439|    870|                "No characters matched in [character set]");
  440|    870|        }
  441|       |
  442|  3.41k|        return it;
  443|  4.28k|    }
_ZZNK3scn2v24impl25character_set_reader_implIcE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NS3_12specs_helperEENKUlcE_clEc:
  420|  7.21k|        const auto cb = [&](SourceCharT ch) {
  421|  7.21k|            return cb_wrapper.on_ascii_only(ch);
  422|  7.21k|        };
_ZN3scn2v24impl21read_string_view_implIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEERS8_cEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_OT0_RNSt3__117basic_string_viewIT1_NSK_11char_traitsISM_EEEE:
   62|  1.57k|{
   63|  1.57k|    static_assert(
   64|  1.57k|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   65|       |
   66|  1.57k|    auto src = [&]() {
   67|  1.57k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
   68|  1.57k|            return make_contiguous_buffer(
   69|  1.57k|                ranges::subrange{ranges::begin(range).base(), result.base()});
   70|  1.57k|        }
   71|  1.57k|        else {
   72|  1.57k|            return make_contiguous_buffer(
   73|  1.57k|                ranges::subrange{ranges::begin(range), result});
   74|  1.57k|        }
   75|  1.57k|    }();
   76|  1.57k|    using src_type = decltype(src);
   77|       |
   78|  1.57k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (78:9): [Folded - Ignored]
  ------------------
   79|      0|        return unexpected_scan_error(
   80|      0|            scan_error::invalid_scanned_value,
   81|      0|            "Cannot read a string_view from this source range (not "
   82|      0|            "contiguous)");
   83|      0|    }
   84|  1.57k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (84:19): [Folded - Ignored]
  ------------------
   85|  1.57k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   86|  1.57k|                                     "Cannot read a string_view from "
   87|  1.57k|                                     "this source range (would require "
   88|  1.57k|                                     "transcoding)");
   89|  1.57k|    }
   90|  1.57k|    else {
   91|  1.57k|        const auto view = src.view();
   92|  1.57k|        value = std::basic_string_view<ValueCharT>(
   93|  1.57k|            ranges::data(view), ranges_polyfill::usize(view));
   94|       |
   95|  1.57k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (95:13): [True: 504, False: 1.06k]
  ------------------
   96|    504|            return unexpected_scan_error(
   97|    504|                scan_error::invalid_scanned_value,
   98|    504|                "Invalid encoding in scanned string_view");
   99|    504|        }
  100|       |
  101|  1.06k|        return SCN_MOVE(result);
  ------------------
  |  |  246|  1.06k|    static_cast<    \
  |  |  247|  1.06k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  102|  1.57k|    }
  103|  1.57k|}
_ZZN3scn2v24impl21read_string_view_implIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEERS8_cEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_OT0_RNSt3__117basic_string_viewIT1_NSK_11char_traitsISM_EEEEENKUlvE_clEv:
   66|  1.57k|    auto src = [&]() {
   67|  1.57k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (67:23): [Folded - Ignored]
  ------------------
   68|  1.57k|            return make_contiguous_buffer(
   69|  1.57k|                ranges::subrange{ranges::begin(range).base(), result.base()});
   70|  1.57k|        }
   71|  1.57k|        else {
   72|  1.57k|            return make_contiguous_buffer(
   73|  1.57k|                ranges::subrange{ranges::begin(range), result});
   74|  1.57k|        }
   75|  1.57k|    }();
_ZN3scn2v24impl24regex_string_reader_implIcE4readIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NSt3__117basic_string_viewIcNSL_11char_traitsIcEEEENS0_6detail11regex_flagsERNSM_IT0_NSN_ISS_EEEE:
  147|  3.67k|    {
  148|  3.67k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  |   71|  3.67k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.67k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.67k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  3.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.24k, False: 434]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.24k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.24k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.24k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.24k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.24k|    }                                                  \
  |  |  |  |   70|  3.67k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    434|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  149|    434|        return read_string_view_impl(range, it, value);
  150|  3.67k|    }
_ZN3scn2v24impl24regex_string_reader_implIcE4implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NSt3__117basic_string_viewIcNSL_11char_traitsIcEEEENS0_6detail11regex_flagsE:
  158|  11.0k|    {
  159|  11.0k|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |  101|  22.0k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (159:23): [Folded - Ignored]
  |  Branch (159:23): [Folded - Ignored]
  ------------------
  160|  11.0k|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (160:23): [Folded - Ignored]
  ------------------
  161|  11.0k|            return unexpected_scan_error(
  162|  11.0k|                scan_error::invalid_scanned_value,
  163|  11.0k|                "Regex backend doesn't support wide strings as input");
  164|  11.0k|        }
  165|  11.0k|        else {
  166|  11.0k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (166:17): [True: 0, False: 11.0k]
  ------------------
  167|      0|                return unexpected_scan_error(
  168|      0|                    scan_error::invalid_scanned_value,
  169|      0|                    "Cannot use regex with a non-contiguous source "
  170|      0|                    "range");
  171|      0|            }
  172|       |
  173|  11.0k|            auto input = get_as_contiguous(range);
  174|  11.0k|            SCN_TRY(it,
  ------------------
  |  |   71|  11.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  11.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  11.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  11.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 9.72k, False: 1.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  9.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  9.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  9.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  9.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  9.72k|    }                                                  \
  |  |  |  |   70|  11.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  175|  1.30k|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
  176|  1.30k|            return ranges_polyfill::batch_next(
  177|  1.30k|                ranges::begin(range), ranges::distance(input.begin(), it));
  178|  11.0k|        }
  179|  11.0k|    }
_ZN3scn2v24impl13string_readerIcE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISO_EEE4typeEEEOSO_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
  511|    646|    {
  512|    646|        SCN_UNUSED(loc);
  ------------------
  |  |  227|    646|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  513|    646|        return read_impl(SCN_FWD(range), specs, value);
  ------------------
  |  |  248|    646|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  514|    646|    }
_ZN3scn2v24impl13string_readerIcE9read_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISO_EEE4typeEEEOSO_RKNS0_6detail12format_specsERT0_:
  528|    646|    {
  529|    646|        SCN_CLANG_PUSH
  530|    646|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
  531|       |
  532|    646|        switch (m_type) {
  533|    274|            case reader_type::word:
  ------------------
  |  Branch (533:13): [True: 274, False: 372]
  ------------------
  534|    274|                return word_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|    274|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  535|    274|                                                            value);
  536|       |
  537|    102|            case reader_type::character:
  ------------------
  |  Branch (537:13): [True: 102, False: 544]
  ------------------
  538|    102|                return character_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|    102|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  539|    102|                                                                 value);
  540|       |
  541|    222|            case reader_type::character_set:
  ------------------
  |  Branch (541:13): [True: 222, False: 424]
  ------------------
  542|    222|                return character_set_reader_impl<SourceCharT>{}.read(
  543|    222|                    SCN_FWD(range), specs, value);
  ------------------
  |  |  248|    222|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  544|       |
  545|      0|#if !SCN_DISABLE_REGEX
  546|      6|            case reader_type::regex:
  ------------------
  |  Branch (546:13): [True: 6, False: 640]
  ------------------
  547|      6|                return regex_string_reader_impl<SourceCharT>{}.read(
  548|      6|                    SCN_FWD(range), specs.charset_string<SourceCharT>(),
  ------------------
  |  |  248|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  549|      6|                    specs.regexp_flags, value);
  550|       |
  551|     42|            case reader_type::regex_escaped:
  ------------------
  |  Branch (551:13): [True: 42, False: 604]
  ------------------
  552|     42|                return regex_string_reader_impl<SourceCharT>{}.read(
  553|     42|                    SCN_FWD(range),
  ------------------
  |  |  248|     42|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  554|     42|                    get_unescaped_regex_pattern(
  555|     42|                        specs.charset_string<SourceCharT>()),
  556|     42|                    specs.regexp_flags, value);
  557|      0|#endif
  558|       |
  559|      0|            default:
  ------------------
  |  Branch (559:13): [True: 0, False: 646]
  ------------------
  560|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  561|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  562|    646|        }
  563|       |
  564|    646|        SCN_CLANG_POP
  565|    646|    }
_ZN3scn2v24impl16word_reader_implIcE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RNSt3__112basic_stringIT0_NSM_11char_traitsISO_EENSM_9allocatorISO_EEEE:
  112|    274|    {
  113|    274|        return read_string_impl(range, read_until_classic_space(range), value);
  114|    274|    }
_ZN3scn2v24impl16read_string_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS5_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESJ_OT0_RNSt3__112basic_stringIT1_NSO_11char_traitsISQ_EENSO_9allocatorISQ_EEEE:
   39|    376|{
   40|    376|    static_assert(
   41|    376|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   42|       |
   43|    376|    auto src =
   44|    376|        make_contiguous_buffer(ranges::subrange{ranges::begin(range), result});
   45|    376|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (45:9): [True: 166, False: 210]
  ------------------
   46|    166|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   47|    166|                                     "Invalid encoding in scanned string");
   48|    166|    }
   49|    210|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  246|    210|    static_cast<    \
  |  |  247|    210|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   50|    210|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    210|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 210]
  |  |  ------------------
  ------------------
   51|      0|        return unexpected(e);
   52|      0|    }
   53|       |
   54|    210|    return SCN_MOVE(result);
  ------------------
  |  |  246|    210|    static_cast<    \
  |  |  247|    210|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   55|    210|}
_ZN3scn2v24impl21character_reader_implIcE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RNSt3__112basic_stringIT0_NSM_11char_traitsISO_EENSM_9allocatorISO_EEEE:
  192|    102|    {
  193|    102|        return read_impl(
  194|    102|            range,
  195|    102|            [&](auto&& rng) {
  196|    102|                return read_string_impl(rng, read_all(rng), value);
  197|    102|            },
  198|    102|            detail::priority_tag<1>{});
  199|    102|    }
_ZN3scn2v24impl21character_reader_implIcE9read_implIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEZNS3_4readINS1_15take_width_viewISC_EEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RNSt3__112basic_stringIT0_NSN_11char_traitsISP_EENSN_9allocatorISP_EEEEEUlSM_E_EENSG_INSH_IRNSE_ISI_EEXsr6rangesE14borrowed_rangeISY_EEE4typeEEESY_OSP_NS0_6detail12priority_tagILm1EEE:
  219|    102|    {
  220|    102|        return read_cb(range);
  221|    102|    }
_ZZN3scn2v24impl21character_reader_implIcE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RNSt3__112basic_stringIT0_NSM_11char_traitsISO_EENSM_9allocatorISO_EEEEENKUlSL_E_clIRSE_EEDaSL_:
  195|    102|            [&](auto&& rng) {
  196|    102|                return read_string_impl(rng, read_all(rng), value);
  197|    102|            },
_ZN3scn2v24impl25character_set_reader_implIcE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RKNS0_6detail12format_specsERNSt3__112basic_stringIT0_NSQ_11char_traitsISS_EENSQ_9allocatorISS_EEEE:
  293|    222|    {
  294|    222|        auto it = read_source_impl(range, {specs});
  295|    222|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|    222|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 8, False: 214]
  |  |  ------------------
  ------------------
  296|      8|            return unexpected(it.error());
  297|      8|        }
  298|       |
  299|    214|        return read_string_impl(range, *it, value);
  300|    222|    }
_ZN3scn2v24impl16read_string_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS5_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_OT0_RNSt3__112basic_stringIT1_NSP_11char_traitsISR_EENSP_9allocatorISR_EEEE:
   39|    214|{
   40|    214|    static_assert(
   41|    214|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   42|       |
   43|    214|    auto src =
   44|    214|        make_contiguous_buffer(ranges::subrange{ranges::begin(range), result});
   45|    214|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (45:9): [True: 70, False: 144]
  ------------------
   46|     70|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   47|     70|                                     "Invalid encoding in scanned string");
   48|     70|    }
   49|    144|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  246|    144|    static_cast<    \
  |  |  247|    144|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   50|    144|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    144|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 144]
  |  |  ------------------
  ------------------
   51|      0|        return unexpected(e);
   52|      0|    }
   53|       |
   54|    144|    return SCN_MOVE(result);
  ------------------
  |  |  246|    144|    static_cast<    \
  |  |  247|    144|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   55|    144|}
_ZN3scn2v24impl24regex_string_reader_implIcE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEENS0_6detail11regex_flagsERNSM_12basic_stringIT0_NSO_ISU_EENSM_9allocatorISU_EEEE:
  136|     48|    {
  137|     48|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  |   71|     48|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|     48|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|     48|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|     48|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 48, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     48|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     48|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     48|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     48|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     48|    }                                                  \
  |  |  |  |   70|     48|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  138|      0|        return read_string_impl(range, it, value);
  139|     48|    }
_ZN3scn2v24impl13string_readerIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNS0_6detail12format_specsERT0_NSS_10locale_refE:
  511|  5.30k|    {
  512|  5.30k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  5.30k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  513|  5.30k|        return read_impl(SCN_FWD(range), specs, value);
  ------------------
  |  |  248|  5.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  514|  5.30k|    }
_ZN3scn2v24impl13string_readerIcE9read_implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNS0_6detail12format_specsERT0_:
  528|  5.30k|    {
  529|  5.30k|        SCN_CLANG_PUSH
  530|  5.30k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
  531|       |
  532|  5.30k|        switch (m_type) {
  533|    202|            case reader_type::word:
  ------------------
  |  Branch (533:13): [True: 202, False: 5.10k]
  ------------------
  534|    202|                return word_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|    202|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  535|    202|                                                            value);
  536|       |
  537|      0|            case reader_type::character:
  ------------------
  |  Branch (537:13): [True: 0, False: 5.30k]
  ------------------
  538|      0|                return character_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  539|      0|                                                                 value);
  540|       |
  541|  1.42k|            case reader_type::character_set:
  ------------------
  |  Branch (541:13): [True: 1.42k, False: 3.87k]
  ------------------
  542|  1.42k|                return character_set_reader_impl<SourceCharT>{}.read(
  543|  1.42k|                    SCN_FWD(range), specs, value);
  ------------------
  |  |  248|  1.42k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  544|       |
  545|      0|#if !SCN_DISABLE_REGEX
  546|  3.46k|            case reader_type::regex:
  ------------------
  |  Branch (546:13): [True: 3.46k, False: 1.84k]
  ------------------
  547|  3.46k|                return regex_string_reader_impl<SourceCharT>{}.read(
  548|  3.46k|                    SCN_FWD(range), specs.charset_string<SourceCharT>(),
  ------------------
  |  |  248|  3.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  549|  3.46k|                    specs.regexp_flags, value);
  550|       |
  551|    212|            case reader_type::regex_escaped:
  ------------------
  |  Branch (551:13): [True: 212, False: 5.09k]
  ------------------
  552|    212|                return regex_string_reader_impl<SourceCharT>{}.read(
  553|    212|                    SCN_FWD(range),
  ------------------
  |  |  248|    212|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  554|    212|                    get_unescaped_regex_pattern(
  555|    212|                        specs.charset_string<SourceCharT>()),
  556|    212|                    specs.regexp_flags, value);
  557|      0|#endif
  558|       |
  559|      0|            default:
  ------------------
  |  Branch (559:13): [True: 0, False: 5.30k]
  ------------------
  560|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  561|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  562|  5.30k|        }
  563|       |
  564|  5.30k|        SCN_CLANG_POP
  565|  5.30k|    }
_ZN3scn2v24impl16word_reader_implIcE4readIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RNSt3__112basic_stringIT0_NSL_11char_traitsISN_EENSL_9allocatorISN_EEEE:
  112|    202|    {
  113|    202|        return read_string_impl(range, read_until_classic_space(range), value);
  114|    202|    }
_ZN3scn2v24impl25character_set_reader_implIcE4readIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERNSt3__112basic_stringIT0_NSP_11char_traitsISR_EENSP_9allocatorISR_EEEE:
  293|  1.42k|    {
  294|  1.42k|        auto it = read_source_impl(range, {specs});
  295|  1.42k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  1.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 290, False: 1.13k]
  |  |  ------------------
  ------------------
  296|    290|            return unexpected(it.error());
  297|    290|        }
  298|       |
  299|  1.13k|        return read_string_impl(range, *it, value);
  300|  1.42k|    }
_ZN3scn2v24impl16read_string_implIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEERS8_cEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_OT0_RNSt3__112basic_stringIT1_NSK_11char_traitsISM_EENSK_9allocatorISM_EEEE:
   39|  1.57k|{
   40|  1.57k|    static_assert(
   41|  1.57k|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   42|       |
   43|  1.57k|    auto src =
   44|  1.57k|        make_contiguous_buffer(ranges::subrange{ranges::begin(range), result});
   45|  1.57k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (45:9): [True: 504, False: 1.06k]
  ------------------
   46|    504|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   47|    504|                                     "Invalid encoding in scanned string");
   48|    504|    }
   49|  1.06k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  246|  1.06k|    static_cast<    \
  |  |  247|  1.06k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   50|  1.06k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.06k]
  |  |  ------------------
  ------------------
   51|      0|        return unexpected(e);
   52|      0|    }
   53|       |
   54|  1.06k|    return SCN_MOVE(result);
  ------------------
  |  |  246|  1.06k|    static_cast<    \
  |  |  247|  1.06k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   55|  1.06k|}
_ZN3scn2v24impl24regex_string_reader_implIcE4readIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NSt3__117basic_string_viewIcNSL_11char_traitsIcEEEENS0_6detail11regex_flagsERNSL_12basic_stringIT0_NSN_IST_EENSL_9allocatorIST_EEEE:
  136|  3.67k|    {
  137|  3.67k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  |   71|  3.67k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.67k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.67k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  3.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.24k, False: 434]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.24k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.24k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.24k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.24k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.24k|    }                                                  \
  |  |  |  |   70|  3.67k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    434|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  138|    434|        return read_string_impl(range, it, value);
  139|  3.67k|    }
_ZN3scn2v24impl13string_readerIcE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISO_EEE4typeEEEOSO_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
  511|    646|    {
  512|    646|        SCN_UNUSED(loc);
  ------------------
  |  |  227|    646|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  513|    646|        return read_impl(SCN_FWD(range), specs, value);
  ------------------
  |  |  248|    646|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  514|    646|    }
_ZN3scn2v24impl13string_readerIcE9read_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISO_EEE4typeEEEOSO_RKNS0_6detail12format_specsERT0_:
  528|    646|    {
  529|    646|        SCN_CLANG_PUSH
  530|    646|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
  531|       |
  532|    646|        switch (m_type) {
  533|    274|            case reader_type::word:
  ------------------
  |  Branch (533:13): [True: 274, False: 372]
  ------------------
  534|    274|                return word_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|    274|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  535|    274|                                                            value);
  536|       |
  537|    102|            case reader_type::character:
  ------------------
  |  Branch (537:13): [True: 102, False: 544]
  ------------------
  538|    102|                return character_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|    102|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  539|    102|                                                                 value);
  540|       |
  541|    222|            case reader_type::character_set:
  ------------------
  |  Branch (541:13): [True: 222, False: 424]
  ------------------
  542|    222|                return character_set_reader_impl<SourceCharT>{}.read(
  543|    222|                    SCN_FWD(range), specs, value);
  ------------------
  |  |  248|    222|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  544|       |
  545|      0|#if !SCN_DISABLE_REGEX
  546|      6|            case reader_type::regex:
  ------------------
  |  Branch (546:13): [True: 6, False: 640]
  ------------------
  547|      6|                return regex_string_reader_impl<SourceCharT>{}.read(
  548|      6|                    SCN_FWD(range), specs.charset_string<SourceCharT>(),
  ------------------
  |  |  248|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  549|      6|                    specs.regexp_flags, value);
  550|       |
  551|     42|            case reader_type::regex_escaped:
  ------------------
  |  Branch (551:13): [True: 42, False: 604]
  ------------------
  552|     42|                return regex_string_reader_impl<SourceCharT>{}.read(
  553|     42|                    SCN_FWD(range),
  ------------------
  |  |  248|     42|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  554|     42|                    get_unescaped_regex_pattern(
  555|     42|                        specs.charset_string<SourceCharT>()),
  556|     42|                    specs.regexp_flags, value);
  557|      0|#endif
  558|       |
  559|      0|            default:
  ------------------
  |  Branch (559:13): [True: 0, False: 646]
  ------------------
  560|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  561|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  562|    646|        }
  563|       |
  564|    646|        SCN_CLANG_POP
  565|    646|    }
_ZN3scn2v24impl16word_reader_implIcE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RNSt3__112basic_stringIT0_NSM_11char_traitsISO_EENSM_9allocatorISO_EEEE:
  112|    274|    {
  113|    274|        return read_string_impl(range, read_until_classic_space(range), value);
  114|    274|    }
_ZN3scn2v24impl16read_string_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS5_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESJ_OT0_RNSt3__112basic_stringIT1_NSO_11char_traitsISQ_EENSO_9allocatorISQ_EEEE:
   39|    376|{
   40|    376|    static_assert(
   41|    376|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   42|       |
   43|    376|    auto src =
   44|    376|        make_contiguous_buffer(ranges::subrange{ranges::begin(range), result});
   45|    376|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (45:9): [True: 166, False: 210]
  ------------------
   46|    166|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   47|    166|                                     "Invalid encoding in scanned string");
   48|    166|    }
   49|    210|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  246|    210|    static_cast<    \
  |  |  247|    210|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   50|    210|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    210|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 210]
  |  |  ------------------
  ------------------
   51|      0|        return unexpected(e);
   52|      0|    }
   53|       |
   54|    210|    return SCN_MOVE(result);
  ------------------
  |  |  246|    210|    static_cast<    \
  |  |  247|    210|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   55|    210|}
_ZN3scn2v24impl21character_reader_implIcE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RNSt3__112basic_stringIT0_NSM_11char_traitsISO_EENSM_9allocatorISO_EEEE:
  192|    102|    {
  193|    102|        return read_impl(
  194|    102|            range,
  195|    102|            [&](auto&& rng) {
  196|    102|                return read_string_impl(rng, read_all(rng), value);
  197|    102|            },
  198|    102|            detail::priority_tag<1>{});
  199|    102|    }
_ZN3scn2v24impl21character_reader_implIcE9read_implIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEZNS3_4readINS1_15take_width_viewISC_EEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RNSt3__112basic_stringIT0_NSN_11char_traitsISP_EENSN_9allocatorISP_EEEEEUlSM_E_EENSG_INSH_IRNSE_ISI_EEXsr6rangesE14borrowed_rangeISY_EEE4typeEEESY_OSP_NS0_6detail12priority_tagILm1EEE:
  219|    102|    {
  220|    102|        return read_cb(range);
  221|    102|    }
_ZZN3scn2v24impl21character_reader_implIcE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RNSt3__112basic_stringIT0_NSM_11char_traitsISO_EENSM_9allocatorISO_EEEEENKUlSL_E_clIRSE_EEDaSL_:
  195|    102|            [&](auto&& rng) {
  196|    102|                return read_string_impl(rng, read_all(rng), value);
  197|    102|            },
_ZN3scn2v24impl25character_set_reader_implIcE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RKNS0_6detail12format_specsERNSt3__112basic_stringIT0_NSQ_11char_traitsISS_EENSQ_9allocatorISS_EEEE:
  293|    222|    {
  294|    222|        auto it = read_source_impl(range, {specs});
  295|    222|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|    222|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 8, False: 214]
  |  |  ------------------
  ------------------
  296|      8|            return unexpected(it.error());
  297|      8|        }
  298|       |
  299|    214|        return read_string_impl(range, *it, value);
  300|    222|    }
_ZN3scn2v24impl16read_string_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS5_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_OT0_RNSt3__112basic_stringIT1_NSP_11char_traitsISR_EENSP_9allocatorISR_EEEE:
   39|    214|{
   40|    214|    static_assert(
   41|    214|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   42|       |
   43|    214|    auto src =
   44|    214|        make_contiguous_buffer(ranges::subrange{ranges::begin(range), result});
   45|    214|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (45:9): [True: 70, False: 144]
  ------------------
   46|     70|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   47|     70|                                     "Invalid encoding in scanned string");
   48|     70|    }
   49|    144|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  246|    144|    static_cast<    \
  |  |  247|    144|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   50|    144|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    144|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 144]
  |  |  ------------------
  ------------------
   51|      0|        return unexpected(e);
   52|      0|    }
   53|       |
   54|    144|    return SCN_MOVE(result);
  ------------------
  |  |  246|    144|    static_cast<    \
  |  |  247|    144|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   55|    144|}
_ZN3scn2v24impl24regex_string_reader_implIcE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEENS0_6detail11regex_flagsERNSM_12basic_stringIT0_NSO_ISU_EENSM_9allocatorISU_EEEE:
  136|     48|    {
  137|     48|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  |   71|     48|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|     48|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|     48|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|     48|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 48, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     48|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     48|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     48|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     48|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     48|    }                                                  \
  |  |  |  |   70|     48|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  138|      0|        return read_string_impl(range, it, value);
  139|     48|    }
_ZN3scn2v24impl13string_readerIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNS0_6detail12format_specsERT0_NSS_10locale_refE:
  511|  5.30k|    {
  512|  5.30k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  5.30k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  513|  5.30k|        return read_impl(SCN_FWD(range), specs, value);
  ------------------
  |  |  248|  5.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  514|  5.30k|    }
_ZN3scn2v24impl13string_readerIcE9read_implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNS0_6detail12format_specsERT0_:
  528|  5.30k|    {
  529|  5.30k|        SCN_CLANG_PUSH
  530|  5.30k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
  531|       |
  532|  5.30k|        switch (m_type) {
  533|    202|            case reader_type::word:
  ------------------
  |  Branch (533:13): [True: 202, False: 5.10k]
  ------------------
  534|    202|                return word_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|    202|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  535|    202|                                                            value);
  536|       |
  537|      0|            case reader_type::character:
  ------------------
  |  Branch (537:13): [True: 0, False: 5.30k]
  ------------------
  538|      0|                return character_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  539|      0|                                                                 value);
  540|       |
  541|  1.42k|            case reader_type::character_set:
  ------------------
  |  Branch (541:13): [True: 1.42k, False: 3.87k]
  ------------------
  542|  1.42k|                return character_set_reader_impl<SourceCharT>{}.read(
  543|  1.42k|                    SCN_FWD(range), specs, value);
  ------------------
  |  |  248|  1.42k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  544|       |
  545|      0|#if !SCN_DISABLE_REGEX
  546|  3.46k|            case reader_type::regex:
  ------------------
  |  Branch (546:13): [True: 3.46k, False: 1.84k]
  ------------------
  547|  3.46k|                return regex_string_reader_impl<SourceCharT>{}.read(
  548|  3.46k|                    SCN_FWD(range), specs.charset_string<SourceCharT>(),
  ------------------
  |  |  248|  3.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  549|  3.46k|                    specs.regexp_flags, value);
  550|       |
  551|    212|            case reader_type::regex_escaped:
  ------------------
  |  Branch (551:13): [True: 212, False: 5.09k]
  ------------------
  552|    212|                return regex_string_reader_impl<SourceCharT>{}.read(
  553|    212|                    SCN_FWD(range),
  ------------------
  |  |  248|    212|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  554|    212|                    get_unescaped_regex_pattern(
  555|    212|                        specs.charset_string<SourceCharT>()),
  556|    212|                    specs.regexp_flags, value);
  557|      0|#endif
  558|       |
  559|      0|            default:
  ------------------
  |  Branch (559:13): [True: 0, False: 5.30k]
  ------------------
  560|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  561|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  562|  5.30k|        }
  563|       |
  564|  5.30k|        SCN_CLANG_POP
  565|  5.30k|    }
_ZN3scn2v24impl16word_reader_implIcE4readIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RNSt3__112basic_stringIT0_NSL_11char_traitsISN_EENSL_9allocatorISN_EEEE:
  112|    202|    {
  113|    202|        return read_string_impl(range, read_until_classic_space(range), value);
  114|    202|    }
_ZN3scn2v24impl25character_set_reader_implIcE4readIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERNSt3__112basic_stringIT0_NSP_11char_traitsISR_EENSP_9allocatorISR_EEEE:
  293|  1.42k|    {
  294|  1.42k|        auto it = read_source_impl(range, {specs});
  295|  1.42k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  1.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 290, False: 1.13k]
  |  |  ------------------
  ------------------
  296|    290|            return unexpected(it.error());
  297|    290|        }
  298|       |
  299|  1.13k|        return read_string_impl(range, *it, value);
  300|  1.42k|    }
_ZN3scn2v24impl16read_string_implIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEERS8_wEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_OT0_RNSt3__112basic_stringIT1_NSK_11char_traitsISM_EENSK_9allocatorISM_EEEE:
   39|  1.57k|{
   40|  1.57k|    static_assert(
   41|  1.57k|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   42|       |
   43|  1.57k|    auto src =
   44|  1.57k|        make_contiguous_buffer(ranges::subrange{ranges::begin(range), result});
   45|  1.57k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (45:9): [True: 504, False: 1.06k]
  ------------------
   46|    504|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   47|    504|                                     "Invalid encoding in scanned string");
   48|    504|    }
   49|  1.06k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  246|  1.06k|    static_cast<    \
  |  |  247|  1.06k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   50|  1.06k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.06k]
  |  |  ------------------
  ------------------
   51|      0|        return unexpected(e);
   52|      0|    }
   53|       |
   54|  1.06k|    return SCN_MOVE(result);
  ------------------
  |  |  246|  1.06k|    static_cast<    \
  |  |  247|  1.06k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   55|  1.06k|}
_ZN3scn2v24impl24regex_string_reader_implIcE4readIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NSt3__117basic_string_viewIcNSL_11char_traitsIcEEEENS0_6detail11regex_flagsERNSL_12basic_stringIT0_NSN_IST_EENSL_9allocatorIST_EEEE:
  136|  3.67k|    {
  137|  3.67k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  |   71|  3.67k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.67k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.67k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  3.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.24k, False: 434]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.24k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.24k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.24k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.24k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.24k|    }                                                  \
  |  |  |  |   70|  3.67k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    434|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  138|    434|        return read_string_impl(range, it, value);
  139|  3.67k|    }
_ZN3scn2v24impl13string_readerIwEC2Ev:
  450|  16.4k|    constexpr string_reader() = default;
_ZNK3scn2v24impl13string_readerIwE19skip_ws_before_readEv:
  493|  16.0k|    {
  494|  16.0k|        return m_type == reader_type::word;
  495|  16.0k|    }
_ZN3scn2v24impl13string_readerIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RT0_NS0_6detail10locale_refE:
  500|    872|    {
  501|    872|        SCN_UNUSED(loc);
  ------------------
  |  |  227|    872|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  502|    872|        return word_reader_impl<SourceCharT>{}.read(SCN_FWD(range), value);
  ------------------
  |  |  248|    872|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|    872|    }
_ZN3scn2v24impl16word_reader_implIwE4readIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RNSt3__112basic_stringIT0_NSK_11char_traitsISM_EENSK_9allocatorISM_EEEE:
  112|    872|    {
  113|    872|        return read_string_impl(range, read_until_classic_space(range), value);
  114|    872|    }
_ZN3scn2v24impl16read_string_implIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEES8_cEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESE_OT0_RNSt3__112basic_stringIT1_NSJ_11char_traitsISL_EENSJ_9allocatorISL_EEEE:
   39|  1.06k|{
   40|  1.06k|    static_assert(
   41|  1.06k|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   42|       |
   43|  1.06k|    auto src =
   44|  1.06k|        make_contiguous_buffer(ranges::subrange{ranges::begin(range), result});
   45|  1.06k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (45:9): [True: 50, False: 1.01k]
  ------------------
   46|     50|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   47|     50|                                     "Invalid encoding in scanned string");
   48|     50|    }
   49|  1.01k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  246|  1.01k|    static_cast<    \
  |  |  247|  1.01k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   50|  1.01k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.01k]
  |  |  ------------------
  ------------------
   51|      0|        return unexpected(e);
   52|      0|    }
   53|       |
   54|  1.01k|    return SCN_MOVE(result);
  ------------------
  |  |  246|  1.01k|    static_cast<    \
  |  |  247|  1.01k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   55|  1.01k|}
_ZN3scn2v24impl13string_readerIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENSt3__117basic_string_viewIwNSD_11char_traitsIwEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RT0_NS0_6detail10locale_refE:
  500|    872|    {
  501|    872|        SCN_UNUSED(loc);
  ------------------
  |  |  227|    872|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  502|    872|        return word_reader_impl<SourceCharT>{}.read(SCN_FWD(range), value);
  ------------------
  |  |  248|    872|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|    872|    }
_ZN3scn2v24impl16word_reader_implIwE4readIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RNSt3__117basic_string_viewIT0_NSK_11char_traitsISM_EEEE:
  120|    872|    {
  121|    872|        return read_string_view_impl(range, read_until_classic_space(range),
  122|    872|                                     value);
  123|    872|    }
_ZN3scn2v24impl21read_string_view_implIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEES8_wEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESE_OT0_RNSt3__117basic_string_viewIT1_NSJ_11char_traitsISL_EEEE:
   62|  1.06k|{
   63|  1.06k|    static_assert(
   64|  1.06k|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   65|       |
   66|  1.06k|    auto src = [&]() {
   67|  1.06k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
   68|  1.06k|            return make_contiguous_buffer(
   69|  1.06k|                ranges::subrange{ranges::begin(range).base(), result.base()});
   70|  1.06k|        }
   71|  1.06k|        else {
   72|  1.06k|            return make_contiguous_buffer(
   73|  1.06k|                ranges::subrange{ranges::begin(range), result});
   74|  1.06k|        }
   75|  1.06k|    }();
   76|  1.06k|    using src_type = decltype(src);
   77|       |
   78|  1.06k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (78:9): [Folded - Ignored]
  ------------------
   79|      0|        return unexpected_scan_error(
   80|      0|            scan_error::invalid_scanned_value,
   81|      0|            "Cannot read a string_view from this source range (not "
   82|      0|            "contiguous)");
   83|      0|    }
   84|  1.06k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (84:19): [Folded - Ignored]
  ------------------
   85|  1.06k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   86|  1.06k|                                     "Cannot read a string_view from "
   87|  1.06k|                                     "this source range (would require "
   88|  1.06k|                                     "transcoding)");
   89|  1.06k|    }
   90|  1.06k|    else {
   91|  1.06k|        const auto view = src.view();
   92|  1.06k|        value = std::basic_string_view<ValueCharT>(
   93|  1.06k|            ranges::data(view), ranges_polyfill::usize(view));
   94|       |
   95|  1.06k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (95:13): [True: 50, False: 1.01k]
  ------------------
   96|     50|            return unexpected_scan_error(
   97|     50|                scan_error::invalid_scanned_value,
   98|     50|                "Invalid encoding in scanned string_view");
   99|     50|        }
  100|       |
  101|  1.01k|        return SCN_MOVE(result);
  ------------------
  |  |  246|  1.01k|    static_cast<    \
  |  |  247|  1.01k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  102|  1.06k|    }
  103|  1.06k|}
_ZZN3scn2v24impl21read_string_view_implIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEES8_wEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESE_OT0_RNSt3__117basic_string_viewIT1_NSJ_11char_traitsISL_EEEEENKUlvE_clEv:
   66|  1.06k|    auto src = [&]() {
   67|  1.06k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (67:23): [Folded - Ignored]
  ------------------
   68|  1.06k|            return make_contiguous_buffer(
   69|  1.06k|                ranges::subrange{ranges::begin(range).base(), result.base()});
   70|  1.06k|        }
   71|  1.06k|        else {
   72|  1.06k|            return make_contiguous_buffer(
   73|  1.06k|                ranges::subrange{ranges::begin(range), result});
   74|  1.06k|        }
   75|  1.06k|    }();
_ZN3scn2v24impl13string_readerIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENSt3__112basic_stringIwNSD_11char_traitsIwEENSD_9allocatorIwEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RT0_NS0_6detail10locale_refE:
  500|    872|    {
  501|    872|        SCN_UNUSED(loc);
  ------------------
  |  |  227|    872|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  502|    872|        return word_reader_impl<SourceCharT>{}.read(SCN_FWD(range), value);
  ------------------
  |  |  248|    872|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|    872|    }
_ZN3scn2v24impl16word_reader_implIwE4readIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RNSt3__112basic_stringIT0_NSK_11char_traitsISM_EENSK_9allocatorISM_EEEE:
  112|    872|    {
  113|    872|        return read_string_impl(range, read_until_classic_space(range), value);
  114|    872|    }
_ZN3scn2v24impl16read_string_implIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEES8_wEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESE_OT0_RNSt3__112basic_stringIT1_NSJ_11char_traitsISL_EENSJ_9allocatorISL_EEEE:
   39|  1.06k|{
   40|  1.06k|    static_assert(
   41|  1.06k|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   42|       |
   43|  1.06k|    auto src =
   44|  1.06k|        make_contiguous_buffer(ranges::subrange{ranges::begin(range), result});
   45|  1.06k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (45:9): [True: 50, False: 1.01k]
  ------------------
   46|     50|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   47|     50|                                     "Invalid encoding in scanned string");
   48|     50|    }
   49|  1.01k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  246|  1.01k|    static_cast<    \
  |  |  247|  1.01k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   50|  1.01k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.01k]
  |  |  ------------------
  ------------------
   51|      0|        return unexpected(e);
   52|      0|    }
   53|       |
   54|  1.01k|    return SCN_MOVE(result);
  ------------------
  |  |  246|  1.01k|    static_cast<    \
  |  |  247|  1.01k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   55|  1.01k|}
_ZN3scn2v24impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  454|  13.8k|    {
  455|  13.8k|        detail::check_string_type_specs(specs, eh);
  456|       |
  457|  13.8k|        SCN_GCC_PUSH
  458|  13.8k|        SCN_GCC_IGNORE("-Wswitch")
  459|  13.8k|        SCN_GCC_IGNORE("-Wswitch-default")
  460|       |
  461|  13.8k|        SCN_CLANG_PUSH
  462|  13.8k|        SCN_CLANG_IGNORE("-Wswitch")
  463|  13.8k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
  464|       |
  465|  13.8k|        switch (specs.type) {
  ------------------
  |  Branch (465:17): [True: 414, False: 13.4k]
  ------------------
  466|  1.06k|            case detail::presentation_type::none:
  ------------------
  |  Branch (466:13): [True: 1.06k, False: 12.8k]
  ------------------
  467|  1.23k|            case detail::presentation_type::string:
  ------------------
  |  Branch (467:13): [True: 162, False: 13.7k]
  ------------------
  468|  1.23k|                m_type = reader_type::word;
  469|  1.23k|                break;
  470|       |
  471|    240|            case detail::presentation_type::character:
  ------------------
  |  Branch (471:13): [True: 240, False: 13.6k]
  ------------------
  472|    240|                m_type = reader_type::character;
  473|    240|                break;
  474|       |
  475|  2.97k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (475:13): [True: 2.97k, False: 10.8k]
  ------------------
  476|  2.97k|                m_type = reader_type::character_set;
  477|  2.97k|                break;
  478|       |
  479|  8.46k|            case detail::presentation_type::regex:
  ------------------
  |  Branch (479:13): [True: 8.46k, False: 5.41k]
  ------------------
  480|  8.46k|                m_type = reader_type::regex;
  481|  8.46k|                break;
  482|       |
  483|    552|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (483:13): [True: 552, False: 13.3k]
  ------------------
  484|    552|                m_type = reader_type::regex_escaped;
  485|    552|                break;
  486|  13.8k|        }
  487|       |
  488|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
  489|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
  490|  13.8k|    }
_ZNK3scn2v24impl25character_set_reader_implIwE16read_source_implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_NS3_12specs_helperE:
  397|    432|    {
  398|    432|        const bool is_inverted = helper.specs.charset_is_inverted;
  399|    432|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
  400|       |
  401|    432|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    432|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 432]
  |  |  ------------------
  ------------------
  402|      0|            return unexpected(e);
  403|      0|        }
  404|       |
  405|    432|        read_source_callback cb_wrapper{helper};
  406|       |
  407|    432|        if (accepts_nonascii) {
  ------------------
  |  Branch (407:13): [True: 294, False: 138]
  ------------------
  408|    294|            const auto cb = [&](char32_t cp) {
  409|    294|                return cb_wrapper.on_classic_with_extra_ranges(cp);
  410|    294|            };
  411|       |
  412|    294|            if (is_inverted) {
  ------------------
  |  Branch (412:17): [True: 126, False: 168]
  ------------------
  413|    126|                auto it = read_until_code_point(range, cb);
  414|    126|                return check_nonempty(it, range);
  415|    126|            }
  416|    168|            auto it = read_while_code_point(range, cb);
  417|    168|            return check_nonempty(it, range);
  418|    294|        }
  419|       |
  420|    138|        const auto cb = [&](SourceCharT ch) {
  421|    138|            return cb_wrapper.on_ascii_only(ch);
  422|    138|        };
  423|       |
  424|    138|        if (is_inverted) {
  ------------------
  |  Branch (424:13): [True: 78, False: 60]
  ------------------
  425|     78|            auto it = read_until_code_unit(range, cb);
  426|     78|            return check_nonempty(it, range);
  427|     78|        }
  428|     60|        auto it = read_while_code_unit(range, cb);
  429|     60|        return check_nonempty(it, range);
  430|    138|    }
_ZN3scn2v24impl25character_set_reader_implIwE12specs_helper15handle_nonasciiEv:
  347|  2.97k|        {
  348|  2.97k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (348:17): [True: 444, False: 2.53k]
  ------------------
  349|    444|                return {};
  350|    444|            }
  351|       |
  352|  2.53k|            auto charset_string = specs.charset_string<SourceCharT>();
  353|  2.53k|            auto it = detail::to_address(charset_string.begin());
  354|  2.53k|            auto set = detail::parse_presentation_set(
  355|  2.53k|                it, detail::to_address(charset_string.end()), nonascii);
  356|  2.53k|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  153|  2.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.53k]
  |  |  ------------------
  ------------------
  357|      0|                return nonascii.err;
  358|      0|            }
  359|  2.53k|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  243|  2.53k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.53k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  360|  2.53k|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  243|  2.53k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.53k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  361|       |
  362|      0|            ranges::sort(nonascii.extra_ranges);
  363|  2.53k|            return {};
  364|  2.53k|        }
_ZZNK3scn2v24impl25character_set_reader_implIwE16read_source_implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_NS3_12specs_helperEENKUlDiE_clEDi:
  408|  11.9k|            const auto cb = [&](char32_t cp) {
  409|  11.9k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
  410|  11.9k|            };
_ZNK3scn2v24impl25character_set_reader_implIwE20read_source_callback28on_classic_with_extra_rangesEDi:
  381|   715k|        {
  382|   715k|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (382:17): [True: 65.5k, False: 649k]
  ------------------
  383|  65.5k|                return helper.is_char_set_in_extra_literals(cp);
  384|  65.5k|            }
  385|       |
  386|   649k|            return helper.is_char_set_in_literals(static_cast<char>(cp));
  387|   715k|        }
_ZNK3scn2v24impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDi:
  331|  65.5k|        {
  332|       |            // TODO: binary search?
  333|  65.5k|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (333:17): [True: 0, False: 65.5k]
  ------------------
  334|      0|                return false;
  335|      0|            }
  336|       |
  337|  65.5k|            const auto cp_val = static_cast<uint32_t>(cp);
  338|  65.5k|            return ranges::find_if(
  339|  65.5k|                       nonascii.extra_ranges,
  340|  65.5k|                       [cp_val](const auto& pair) SCN_NOEXCEPT {
  341|  65.5k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  342|  65.5k|                                  static_cast<uint32_t>(pair.second) > cp_val;
  343|  65.5k|                       }) != nonascii.extra_ranges.end();
  344|  65.5k|        }
_ZZNK3scn2v24impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
  340|  5.84M|                       [cp_val](const auto& pair) SCN_NOEXCEPT {
  341|  5.84M|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (341:35): [True: 5.83M, False: 5.11k]
  ------------------
  342|  5.84M|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (342:35): [True: 62.7k, False: 5.77M]
  ------------------
  343|  5.84M|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v24impl25character_set_reader_implIwE12specs_helper23is_char_set_in_literalsEc:
  321|   656k|        {
  322|   656k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  242|   656k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   656k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  323|      0|            const auto val =
  324|   656k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
  325|   656k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
  326|   656k|                    (val % 8)) &
  327|   656k|                   1u;
  328|   656k|        }
_ZN3scn2v24impl25character_set_reader_implIwE14check_nonemptyINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIS8_S8_LNSC_13subrange_kindE1EEEEEEENS0_13scan_expectedIT_EERKSJ_RKT0_:
  435|    432|    {
  436|    432|        if (it == ranges::begin(range)) {
  ------------------
  |  Branch (436:13): [True: 24, False: 408]
  ------------------
  437|     24|            return unexpected_scan_error(
  438|     24|                scan_error::invalid_scanned_value,
  439|     24|                "No characters matched in [character set]");
  440|     24|        }
  441|       |
  442|    408|        return it;
  443|    432|    }
_ZZNK3scn2v24impl25character_set_reader_implIwE16read_source_implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_NS3_12specs_helperEENKUlwE_clEw:
  420|  1.84k|        const auto cb = [&](SourceCharT ch) {
  421|  1.84k|            return cb_wrapper.on_ascii_only(ch);
  422|  1.84k|        };
_ZNK3scn2v24impl25character_set_reader_implIwE20read_source_callback13on_ascii_onlyEw:
  372|  6.73k|        {
  373|  6.73k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (373:17): [True: 546, False: 6.19k]
  ------------------
  374|    546|                return false;
  375|    546|            }
  376|       |
  377|  6.19k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
  378|  6.73k|        }
_ZN3scn2v24impl25character_set_reader_implIwE12specs_helperC2ERKNS0_6detail12format_specsE:
  318|  2.97k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v24impl24regex_string_reader_implIwE4implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_NSt3__117basic_string_viewIwNSN_11char_traitsIwEEEENS0_6detail11regex_flagsE:
  158|     90|    {
  159|     90|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |  101|    180|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (159:23): [Folded - Ignored]
  |  Branch (159:23): [Folded - Ignored]
  ------------------
  160|     90|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (160:23): [Folded - Ignored]
  ------------------
  161|     90|            return unexpected_scan_error(
  162|     90|                scan_error::invalid_scanned_value,
  163|     90|                "Regex backend doesn't support wide strings as input");
  164|     90|        }
  165|     90|        else {
  166|     90|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (166:17): [True: 90, False: 0]
  ------------------
  167|     90|                return unexpected_scan_error(
  168|     90|                    scan_error::invalid_scanned_value,
  169|     90|                    "Cannot use regex with a non-contiguous source "
  170|     90|                    "range");
  171|     90|            }
  172|       |
  173|      0|            auto input = get_as_contiguous(range);
  174|      0|            SCN_TRY(it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  175|      0|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
  176|      0|            return ranges_polyfill::batch_next(
  177|      0|                ranges::begin(range), ranges::distance(input.begin(), it));
  178|      0|        }
  179|     90|    }
_ZNK3scn2v24impl25character_set_reader_implIwE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NS3_12specs_helperE:
  397|  2.54k|    {
  398|  2.54k|        const bool is_inverted = helper.specs.charset_is_inverted;
  399|  2.54k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
  400|       |
  401|  2.54k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  2.54k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.54k]
  |  |  ------------------
  ------------------
  402|      0|            return unexpected(e);
  403|      0|        }
  404|       |
  405|  2.54k|        read_source_callback cb_wrapper{helper};
  406|       |
  407|  2.54k|        if (accepts_nonascii) {
  ------------------
  |  Branch (407:13): [True: 2.23k, False: 306]
  ------------------
  408|  2.23k|            const auto cb = [&](char32_t cp) {
  409|  2.23k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
  410|  2.23k|            };
  411|       |
  412|  2.23k|            if (is_inverted) {
  ------------------
  |  Branch (412:17): [True: 336, False: 1.90k]
  ------------------
  413|    336|                auto it = read_until_code_point(range, cb);
  414|    336|                return check_nonempty(it, range);
  415|    336|            }
  416|  1.90k|            auto it = read_while_code_point(range, cb);
  417|  1.90k|            return check_nonempty(it, range);
  418|  2.23k|        }
  419|       |
  420|    306|        const auto cb = [&](SourceCharT ch) {
  421|    306|            return cb_wrapper.on_ascii_only(ch);
  422|    306|        };
  423|       |
  424|    306|        if (is_inverted) {
  ------------------
  |  Branch (424:13): [True: 150, False: 156]
  ------------------
  425|    150|            auto it = read_until_code_unit(range, cb);
  426|    150|            return check_nonempty(it, range);
  427|    150|        }
  428|    156|        auto it = read_while_code_unit(range, cb);
  429|    156|        return check_nonempty(it, range);
  430|    306|    }
_ZZNK3scn2v24impl25character_set_reader_implIwE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NS3_12specs_helperEENKUlDiE_clEDi:
  408|   703k|            const auto cb = [&](char32_t cp) {
  409|   703k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
  410|   703k|            };
_ZN3scn2v24impl25character_set_reader_implIwE14check_nonemptyIPKwN4nano6ranges9subrange_8subrangeIS6_S6_LNS8_13subrange_kindE1EEEEENS0_13scan_expectedIT_EERKSE_RKT0_:
  435|  2.54k|    {
  436|  2.54k|        if (it == ranges::begin(range)) {
  ------------------
  |  Branch (436:13): [True: 426, False: 2.11k]
  ------------------
  437|    426|            return unexpected_scan_error(
  438|    426|                scan_error::invalid_scanned_value,
  439|    426|                "No characters matched in [character set]");
  440|    426|        }
  441|       |
  442|  2.11k|        return it;
  443|  2.54k|    }
_ZZNK3scn2v24impl25character_set_reader_implIwE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NS3_12specs_helperEENKUlwE_clEw:
  420|  4.89k|        const auto cb = [&](SourceCharT ch) {
  421|  4.89k|            return cb_wrapper.on_ascii_only(ch);
  422|  4.89k|        };
_ZN3scn2v24impl24regex_string_reader_implIwE4implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NSt3__117basic_string_viewIwNSL_11char_traitsIwEEEENS0_6detail11regex_flagsE:
  158|  8.92k|    {
  159|  8.92k|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |  101|  17.8k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (159:23): [Folded - Ignored]
  |  Branch (159:23): [Folded - Ignored]
  ------------------
  160|  8.92k|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (160:23): [Folded - Ignored]
  ------------------
  161|  8.92k|            return unexpected_scan_error(
  162|  8.92k|                scan_error::invalid_scanned_value,
  163|  8.92k|                "Regex backend doesn't support wide strings as input");
  164|  8.92k|        }
  165|  8.92k|        else {
  166|  8.92k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (166:17): [True: 0, False: 8.92k]
  ------------------
  167|      0|                return unexpected_scan_error(
  168|      0|                    scan_error::invalid_scanned_value,
  169|      0|                    "Cannot use regex with a non-contiguous source "
  170|      0|                    "range");
  171|      0|            }
  172|       |
  173|  8.92k|            auto input = get_as_contiguous(range);
  174|  8.92k|            SCN_TRY(it,
  ------------------
  |  |   71|  8.92k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.92k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.92k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.77k, False: 1.15k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.77k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.77k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.77k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.77k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.77k|    }                                                  \
  |  |  |  |   70|  8.92k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  175|  1.15k|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
  176|  1.15k|            return ranges_polyfill::batch_next(
  177|  1.15k|                ranges::begin(range), ranges::distance(input.begin(), it));
  178|  8.92k|        }
  179|  8.92k|    }
_ZN3scn2v24impl13string_readerIwE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISO_EEE4typeEEEOSO_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
  511|    464|    {
  512|    464|        SCN_UNUSED(loc);
  ------------------
  |  |  227|    464|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  513|    464|        return read_impl(SCN_FWD(range), specs, value);
  ------------------
  |  |  248|    464|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  514|    464|    }
_ZN3scn2v24impl13string_readerIwE9read_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISO_EEE4typeEEEOSO_RKNS0_6detail12format_specsERT0_:
  528|    464|    {
  529|    464|        SCN_CLANG_PUSH
  530|    464|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
  531|       |
  532|    464|        switch (m_type) {
  533|    216|            case reader_type::word:
  ------------------
  |  Branch (533:13): [True: 216, False: 248]
  ------------------
  534|    216|                return word_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|    216|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  535|    216|                                                            value);
  536|       |
  537|     74|            case reader_type::character:
  ------------------
  |  Branch (537:13): [True: 74, False: 390]
  ------------------
  538|     74|                return character_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|     74|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  539|     74|                                                                 value);
  540|       |
  541|    144|            case reader_type::character_set:
  ------------------
  |  Branch (541:13): [True: 144, False: 320]
  ------------------
  542|    144|                return character_set_reader_impl<SourceCharT>{}.read(
  543|    144|                    SCN_FWD(range), specs, value);
  ------------------
  |  |  248|    144|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  544|       |
  545|      0|#if !SCN_DISABLE_REGEX
  546|      6|            case reader_type::regex:
  ------------------
  |  Branch (546:13): [True: 6, False: 458]
  ------------------
  547|      6|                return regex_string_reader_impl<SourceCharT>{}.read(
  548|      6|                    SCN_FWD(range), specs.charset_string<SourceCharT>(),
  ------------------
  |  |  248|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  549|      6|                    specs.regexp_flags, value);
  550|       |
  551|     24|            case reader_type::regex_escaped:
  ------------------
  |  Branch (551:13): [True: 24, False: 440]
  ------------------
  552|     24|                return regex_string_reader_impl<SourceCharT>{}.read(
  553|     24|                    SCN_FWD(range),
  ------------------
  |  |  248|     24|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  554|     24|                    get_unescaped_regex_pattern(
  555|     24|                        specs.charset_string<SourceCharT>()),
  556|     24|                    specs.regexp_flags, value);
  557|      0|#endif
  558|       |
  559|      0|            default:
  ------------------
  |  Branch (559:13): [True: 0, False: 464]
  ------------------
  560|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  561|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  562|    464|        }
  563|       |
  564|    464|        SCN_CLANG_POP
  565|    464|    }
_ZN3scn2v24impl16word_reader_implIwE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RNSt3__112basic_stringIT0_NSM_11char_traitsISO_EENSM_9allocatorISO_EEEE:
  112|    216|    {
  113|    216|        return read_string_impl(range, read_until_classic_space(range), value);
  114|    216|    }
_ZN3scn2v24impl16read_string_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS5_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESJ_OT0_RNSt3__112basic_stringIT1_NSO_11char_traitsISQ_EENSO_9allocatorISQ_EEEE:
   39|    290|{
   40|    290|    static_assert(
   41|    290|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   42|       |
   43|    290|    auto src =
   44|    290|        make_contiguous_buffer(ranges::subrange{ranges::begin(range), result});
   45|    290|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (45:9): [True: 42, False: 248]
  ------------------
   46|     42|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   47|     42|                                     "Invalid encoding in scanned string");
   48|     42|    }
   49|    248|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  246|    248|    static_cast<    \
  |  |  247|    248|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   50|    248|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    248|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 248]
  |  |  ------------------
  ------------------
   51|      0|        return unexpected(e);
   52|      0|    }
   53|       |
   54|    248|    return SCN_MOVE(result);
  ------------------
  |  |  246|    248|    static_cast<    \
  |  |  247|    248|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   55|    248|}
_ZN3scn2v24impl21character_reader_implIwE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RNSt3__112basic_stringIT0_NSM_11char_traitsISO_EENSM_9allocatorISO_EEEE:
  192|     74|    {
  193|     74|        return read_impl(
  194|     74|            range,
  195|     74|            [&](auto&& rng) {
  196|     74|                return read_string_impl(rng, read_all(rng), value);
  197|     74|            },
  198|     74|            detail::priority_tag<1>{});
  199|     74|    }
_ZN3scn2v24impl21character_reader_implIwE9read_implIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEZNS3_4readINS1_15take_width_viewISC_EEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RNSt3__112basic_stringIT0_NSN_11char_traitsISP_EENSN_9allocatorISP_EEEEEUlSM_E_EENSG_INSH_IRNSE_ISI_EEXsr6rangesE14borrowed_rangeISY_EEE4typeEEESY_OSP_NS0_6detail12priority_tagILm1EEE:
  219|     74|    {
  220|     74|        return read_cb(range);
  221|     74|    }
_ZZN3scn2v24impl21character_reader_implIwE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RNSt3__112basic_stringIT0_NSM_11char_traitsISO_EENSM_9allocatorISO_EEEEENKUlSL_E_clIRSE_EEDaSL_:
  195|     74|            [&](auto&& rng) {
  196|     74|                return read_string_impl(rng, read_all(rng), value);
  197|     74|            },
_ZN3scn2v24impl25character_set_reader_implIwE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RKNS0_6detail12format_specsERNSt3__112basic_stringIT0_NSQ_11char_traitsISS_EENSQ_9allocatorISS_EEEE:
  293|    144|    {
  294|    144|        auto it = read_source_impl(range, {specs});
  295|    144|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|    144|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 8, False: 136]
  |  |  ------------------
  ------------------
  296|      8|            return unexpected(it.error());
  297|      8|        }
  298|       |
  299|    136|        return read_string_impl(range, *it, value);
  300|    144|    }
_ZN3scn2v24impl16read_string_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS5_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_OT0_RNSt3__112basic_stringIT1_NSP_11char_traitsISR_EENSP_9allocatorISR_EEEE:
   39|    136|{
   40|    136|    static_assert(
   41|    136|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   42|       |
   43|    136|    auto src =
   44|    136|        make_contiguous_buffer(ranges::subrange{ranges::begin(range), result});
   45|    136|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (45:9): [True: 0, False: 136]
  ------------------
   46|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   47|      0|                                     "Invalid encoding in scanned string");
   48|      0|    }
   49|    136|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  246|    136|    static_cast<    \
  |  |  247|    136|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   50|    136|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    136|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 136]
  |  |  ------------------
  ------------------
   51|      0|        return unexpected(e);
   52|      0|    }
   53|       |
   54|    136|    return SCN_MOVE(result);
  ------------------
  |  |  246|    136|    static_cast<    \
  |  |  247|    136|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   55|    136|}
_ZN3scn2v24impl24regex_string_reader_implIwE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIwNSM_11char_traitsIwEEEENS0_6detail11regex_flagsERNSM_12basic_stringIT0_NSO_ISU_EENSM_9allocatorISU_EEEE:
  136|     30|    {
  137|     30|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  |   71|     30|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|     30|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|     30|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|     30|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 30, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     30|    }                                                  \
  |  |  |  |   70|     30|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  138|      0|        return read_string_impl(range, it, value);
  139|     30|    }
_ZN3scn2v24impl13string_readerIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNS0_6detail12format_specsERT0_NSS_10locale_refE:
  511|  4.01k|    {
  512|  4.01k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  4.01k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  513|  4.01k|        return read_impl(SCN_FWD(range), specs, value);
  ------------------
  |  |  248|  4.01k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  514|  4.01k|    }
_ZN3scn2v24impl13string_readerIwE9read_implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNS0_6detail12format_specsERT0_:
  528|  4.01k|    {
  529|  4.01k|        SCN_CLANG_PUSH
  530|  4.01k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
  531|       |
  532|  4.01k|        switch (m_type) {
  533|    194|            case reader_type::word:
  ------------------
  |  Branch (533:13): [True: 194, False: 3.82k]
  ------------------
  534|    194|                return word_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|    194|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  535|    194|                                                            value);
  536|       |
  537|      0|            case reader_type::character:
  ------------------
  |  Branch (537:13): [True: 0, False: 4.01k]
  ------------------
  538|      0|                return character_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  539|      0|                                                                 value);
  540|       |
  541|    848|            case reader_type::character_set:
  ------------------
  |  Branch (541:13): [True: 848, False: 3.16k]
  ------------------
  542|    848|                return character_set_reader_impl<SourceCharT>{}.read(
  543|    848|                    SCN_FWD(range), specs, value);
  ------------------
  |  |  248|    848|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  544|       |
  545|      0|#if !SCN_DISABLE_REGEX
  546|  2.81k|            case reader_type::regex:
  ------------------
  |  Branch (546:13): [True: 2.81k, False: 1.20k]
  ------------------
  547|  2.81k|                return regex_string_reader_impl<SourceCharT>{}.read(
  548|  2.81k|                    SCN_FWD(range), specs.charset_string<SourceCharT>(),
  ------------------
  |  |  248|  2.81k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  549|  2.81k|                    specs.regexp_flags, value);
  550|       |
  551|    160|            case reader_type::regex_escaped:
  ------------------
  |  Branch (551:13): [True: 160, False: 3.85k]
  ------------------
  552|    160|                return regex_string_reader_impl<SourceCharT>{}.read(
  553|    160|                    SCN_FWD(range),
  ------------------
  |  |  248|    160|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  554|    160|                    get_unescaped_regex_pattern(
  555|    160|                        specs.charset_string<SourceCharT>()),
  556|    160|                    specs.regexp_flags, value);
  557|      0|#endif
  558|       |
  559|      0|            default:
  ------------------
  |  Branch (559:13): [True: 0, False: 4.01k]
  ------------------
  560|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  561|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  562|  4.01k|        }
  563|       |
  564|  4.01k|        SCN_CLANG_POP
  565|  4.01k|    }
_ZN3scn2v24impl16word_reader_implIwE4readIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RNSt3__112basic_stringIT0_NSL_11char_traitsISN_EENSL_9allocatorISN_EEEE:
  112|    194|    {
  113|    194|        return read_string_impl(range, read_until_classic_space(range), value);
  114|    194|    }
_ZN3scn2v24impl25character_set_reader_implIwE4readIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERNSt3__112basic_stringIT0_NSP_11char_traitsISR_EENSP_9allocatorISR_EEEE:
  293|    848|    {
  294|    848|        auto it = read_source_impl(range, {specs});
  295|    848|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|    848|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 142, False: 706]
  |  |  ------------------
  ------------------
  296|    142|            return unexpected(it.error());
  297|    142|        }
  298|       |
  299|    706|        return read_string_impl(range, *it, value);
  300|    848|    }
_ZN3scn2v24impl16read_string_implIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEERS8_cEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_OT0_RNSt3__112basic_stringIT1_NSK_11char_traitsISM_EENSK_9allocatorISM_EEEE:
   39|  1.09k|{
   40|  1.09k|    static_assert(
   41|  1.09k|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   42|       |
   43|  1.09k|    auto src =
   44|  1.09k|        make_contiguous_buffer(ranges::subrange{ranges::begin(range), result});
   45|  1.09k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (45:9): [True: 0, False: 1.09k]
  ------------------
   46|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   47|      0|                                     "Invalid encoding in scanned string");
   48|      0|    }
   49|  1.09k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  246|  1.09k|    static_cast<    \
  |  |  247|  1.09k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   50|  1.09k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.09k]
  |  |  ------------------
  ------------------
   51|      0|        return unexpected(e);
   52|      0|    }
   53|       |
   54|  1.09k|    return SCN_MOVE(result);
  ------------------
  |  |  246|  1.09k|    static_cast<    \
  |  |  247|  1.09k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   55|  1.09k|}
_ZN3scn2v24impl24regex_string_reader_implIwE4readIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NSt3__117basic_string_viewIwNSL_11char_traitsIwEEEENS0_6detail11regex_flagsERNSL_12basic_stringIT0_NSN_IST_EENSL_9allocatorIST_EEEE:
  136|  2.97k|    {
  137|  2.97k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  |   71|  2.97k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.97k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.97k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.59k, False: 384]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.59k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.59k|    }                                                  \
  |  |  |  |   70|  2.97k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    384|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  138|    384|        return read_string_impl(range, it, value);
  139|  2.97k|    }
_ZN3scn2v24impl13string_readerIwE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEENSt3__117basic_string_viewIwNSF_11char_traitsIwEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
  511|    464|    {
  512|    464|        SCN_UNUSED(loc);
  ------------------
  |  |  227|    464|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  513|    464|        return read_impl(SCN_FWD(range), specs, value);
  ------------------
  |  |  248|    464|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  514|    464|    }
_ZN3scn2v24impl13string_readerIwE9read_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEENSt3__117basic_string_viewIwNSF_11char_traitsIwEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNS0_6detail12format_specsERT0_:
  528|    464|    {
  529|    464|        SCN_CLANG_PUSH
  530|    464|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
  531|       |
  532|    464|        switch (m_type) {
  533|    216|            case reader_type::word:
  ------------------
  |  Branch (533:13): [True: 216, False: 248]
  ------------------
  534|    216|                return word_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|    216|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  535|    216|                                                            value);
  536|       |
  537|     74|            case reader_type::character:
  ------------------
  |  Branch (537:13): [True: 74, False: 390]
  ------------------
  538|     74|                return character_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|     74|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  539|     74|                                                                 value);
  540|       |
  541|    144|            case reader_type::character_set:
  ------------------
  |  Branch (541:13): [True: 144, False: 320]
  ------------------
  542|    144|                return character_set_reader_impl<SourceCharT>{}.read(
  543|    144|                    SCN_FWD(range), specs, value);
  ------------------
  |  |  248|    144|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  544|       |
  545|      0|#if !SCN_DISABLE_REGEX
  546|      6|            case reader_type::regex:
  ------------------
  |  Branch (546:13): [True: 6, False: 458]
  ------------------
  547|      6|                return regex_string_reader_impl<SourceCharT>{}.read(
  548|      6|                    SCN_FWD(range), specs.charset_string<SourceCharT>(),
  ------------------
  |  |  248|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  549|      6|                    specs.regexp_flags, value);
  550|       |
  551|     24|            case reader_type::regex_escaped:
  ------------------
  |  Branch (551:13): [True: 24, False: 440]
  ------------------
  552|     24|                return regex_string_reader_impl<SourceCharT>{}.read(
  553|     24|                    SCN_FWD(range),
  ------------------
  |  |  248|     24|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  554|     24|                    get_unescaped_regex_pattern(
  555|     24|                        specs.charset_string<SourceCharT>()),
  556|     24|                    specs.regexp_flags, value);
  557|      0|#endif
  558|       |
  559|      0|            default:
  ------------------
  |  Branch (559:13): [True: 0, False: 464]
  ------------------
  560|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  561|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  562|    464|        }
  563|       |
  564|    464|        SCN_CLANG_POP
  565|    464|    }
_ZN3scn2v24impl16word_reader_implIwE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RNSt3__117basic_string_viewIT0_NSM_11char_traitsISO_EEEE:
  120|    216|    {
  121|    216|        return read_string_view_impl(range, read_until_classic_space(range),
  122|    216|                                     value);
  123|    216|    }
_ZN3scn2v24impl21read_string_view_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS5_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESJ_OT0_RNSt3__117basic_string_viewIT1_NSO_11char_traitsISQ_EEEE:
   62|    290|{
   63|    290|    static_assert(
   64|    290|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   65|       |
   66|    290|    auto src = [&]() {
   67|    290|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
   68|    290|            return make_contiguous_buffer(
   69|    290|                ranges::subrange{ranges::begin(range).base(), result.base()});
   70|    290|        }
   71|    290|        else {
   72|    290|            return make_contiguous_buffer(
   73|    290|                ranges::subrange{ranges::begin(range), result});
   74|    290|        }
   75|    290|    }();
   76|    290|    using src_type = decltype(src);
   77|       |
   78|    290|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (78:9): [Folded - Ignored]
  ------------------
   79|      0|        return unexpected_scan_error(
   80|      0|            scan_error::invalid_scanned_value,
   81|      0|            "Cannot read a string_view from this source range (not "
   82|      0|            "contiguous)");
   83|      0|    }
   84|    290|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (84:19): [Folded - Ignored]
  ------------------
   85|    290|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   86|    290|                                     "Cannot read a string_view from "
   87|    290|                                     "this source range (would require "
   88|    290|                                     "transcoding)");
   89|    290|    }
   90|    290|    else {
   91|    290|        const auto view = src.view();
   92|    290|        value = std::basic_string_view<ValueCharT>(
   93|    290|            ranges::data(view), ranges_polyfill::usize(view));
   94|       |
   95|    290|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (95:13): [True: 42, False: 248]
  ------------------
   96|     42|            return unexpected_scan_error(
   97|     42|                scan_error::invalid_scanned_value,
   98|     42|                "Invalid encoding in scanned string_view");
   99|     42|        }
  100|       |
  101|    248|        return SCN_MOVE(result);
  ------------------
  |  |  246|    248|    static_cast<    \
  |  |  247|    248|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  102|    290|    }
  103|    290|}
_ZZN3scn2v24impl21read_string_view_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS5_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESJ_OT0_RNSt3__117basic_string_viewIT1_NSO_11char_traitsISQ_EEEEENKUlvE_clEv:
   66|    290|    auto src = [&]() {
   67|    290|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (67:23): [Folded - Ignored]
  ------------------
   68|    290|            return make_contiguous_buffer(
   69|    290|                ranges::subrange{ranges::begin(range).base(), result.base()});
   70|    290|        }
   71|    290|        else {
   72|    290|            return make_contiguous_buffer(
   73|    290|                ranges::subrange{ranges::begin(range), result});
   74|    290|        }
   75|    290|    }();
_ZN3scn2v24impl21character_reader_implIwE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RNSt3__117basic_string_viewIT0_NSM_11char_traitsISO_EEEE:
  204|     74|    {
  205|     74|        return read_impl(
  206|     74|            range,
  207|     74|            [&](auto&& rng) {
  208|     74|                return read_string_view_impl(rng, read_all(rng), value);
  209|     74|            },
  210|     74|            detail::priority_tag<1>{});
  211|     74|    }
_ZN3scn2v24impl21character_reader_implIwE9read_implIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEZNS3_4readINS1_15take_width_viewISC_EEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RNSt3__117basic_string_viewIT0_NSN_11char_traitsISP_EEEEEUlSM_E_EENSG_INSH_IRNSE_ISI_EEXsr6rangesE14borrowed_rangeISW_EEE4typeEEESW_OSP_NS0_6detail12priority_tagILm1EEE:
  219|     74|    {
  220|     74|        return read_cb(range);
  221|     74|    }
_ZZN3scn2v24impl21character_reader_implIwE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RNSt3__117basic_string_viewIT0_NSM_11char_traitsISO_EEEEENKUlSL_E_clIRSE_EEDaSL_:
  207|     74|            [&](auto&& rng) {
  208|     74|                return read_string_view_impl(rng, read_all(rng), value);
  209|     74|            },
_ZN3scn2v24impl25character_set_reader_implIwE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RKNS0_6detail12format_specsERNSt3__117basic_string_viewIT0_NSQ_11char_traitsISS_EEEE:
  307|    144|    {
  308|    144|        auto it = read_source_impl(range, {specs});
  309|    144|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|    144|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 8, False: 136]
  |  |  ------------------
  ------------------
  310|      8|            return unexpected(it.error());
  311|      8|        }
  312|       |
  313|    136|        return read_string_view_impl(range, *it, value);
  314|    144|    }
_ZN3scn2v24impl21read_string_view_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS5_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_OT0_RNSt3__117basic_string_viewIT1_NSP_11char_traitsISR_EEEE:
   62|    136|{
   63|    136|    static_assert(
   64|    136|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   65|       |
   66|    136|    auto src = [&]() {
   67|    136|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
   68|    136|            return make_contiguous_buffer(
   69|    136|                ranges::subrange{ranges::begin(range).base(), result.base()});
   70|    136|        }
   71|    136|        else {
   72|    136|            return make_contiguous_buffer(
   73|    136|                ranges::subrange{ranges::begin(range), result});
   74|    136|        }
   75|    136|    }();
   76|    136|    using src_type = decltype(src);
   77|       |
   78|    136|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (78:9): [Folded - Ignored]
  ------------------
   79|      0|        return unexpected_scan_error(
   80|      0|            scan_error::invalid_scanned_value,
   81|      0|            "Cannot read a string_view from this source range (not "
   82|      0|            "contiguous)");
   83|      0|    }
   84|    136|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (84:19): [Folded - Ignored]
  ------------------
   85|    136|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   86|    136|                                     "Cannot read a string_view from "
   87|    136|                                     "this source range (would require "
   88|    136|                                     "transcoding)");
   89|    136|    }
   90|    136|    else {
   91|    136|        const auto view = src.view();
   92|    136|        value = std::basic_string_view<ValueCharT>(
   93|    136|            ranges::data(view), ranges_polyfill::usize(view));
   94|       |
   95|    136|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (95:13): [True: 0, False: 136]
  ------------------
   96|      0|            return unexpected_scan_error(
   97|      0|                scan_error::invalid_scanned_value,
   98|      0|                "Invalid encoding in scanned string_view");
   99|      0|        }
  100|       |
  101|    136|        return SCN_MOVE(result);
  ------------------
  |  |  246|    136|    static_cast<    \
  |  |  247|    136|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  102|    136|    }
  103|    136|}
_ZZN3scn2v24impl21read_string_view_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS5_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_OT0_RNSt3__117basic_string_viewIT1_NSP_11char_traitsISR_EEEEENKUlvE_clEv:
   66|    136|    auto src = [&]() {
   67|    136|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (67:23): [Folded - Ignored]
  ------------------
   68|    136|            return make_contiguous_buffer(
   69|    136|                ranges::subrange{ranges::begin(range).base(), result.base()});
   70|    136|        }
   71|    136|        else {
   72|    136|            return make_contiguous_buffer(
   73|    136|                ranges::subrange{ranges::begin(range), result});
   74|    136|        }
   75|    136|    }();
_ZN3scn2v24impl24regex_string_reader_implIwE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIwNSM_11char_traitsIwEEEENS0_6detail11regex_flagsERNSN_IT0_NSO_IST_EEEE:
  147|     30|    {
  148|     30|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  |   71|     30|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|     30|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|     30|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|     30|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 30, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     30|    }                                                  \
  |  |  |  |   70|     30|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  149|      0|        return read_string_view_impl(range, it, value);
  150|     30|    }
_ZN3scn2v24impl13string_readerIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RKNS0_6detail12format_specsERT0_NSQ_10locale_refE:
  511|  4.01k|    {
  512|  4.01k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  4.01k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  513|  4.01k|        return read_impl(SCN_FWD(range), specs, value);
  ------------------
  |  |  248|  4.01k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  514|  4.01k|    }
_ZN3scn2v24impl13string_readerIwE9read_implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RKNS0_6detail12format_specsERT0_:
  528|  4.01k|    {
  529|  4.01k|        SCN_CLANG_PUSH
  530|  4.01k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
  531|       |
  532|  4.01k|        switch (m_type) {
  533|    194|            case reader_type::word:
  ------------------
  |  Branch (533:13): [True: 194, False: 3.82k]
  ------------------
  534|    194|                return word_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|    194|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  535|    194|                                                            value);
  536|       |
  537|      0|            case reader_type::character:
  ------------------
  |  Branch (537:13): [True: 0, False: 4.01k]
  ------------------
  538|      0|                return character_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  539|      0|                                                                 value);
  540|       |
  541|    848|            case reader_type::character_set:
  ------------------
  |  Branch (541:13): [True: 848, False: 3.16k]
  ------------------
  542|    848|                return character_set_reader_impl<SourceCharT>{}.read(
  543|    848|                    SCN_FWD(range), specs, value);
  ------------------
  |  |  248|    848|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  544|       |
  545|      0|#if !SCN_DISABLE_REGEX
  546|  2.81k|            case reader_type::regex:
  ------------------
  |  Branch (546:13): [True: 2.81k, False: 1.20k]
  ------------------
  547|  2.81k|                return regex_string_reader_impl<SourceCharT>{}.read(
  548|  2.81k|                    SCN_FWD(range), specs.charset_string<SourceCharT>(),
  ------------------
  |  |  248|  2.81k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  549|  2.81k|                    specs.regexp_flags, value);
  550|       |
  551|    160|            case reader_type::regex_escaped:
  ------------------
  |  Branch (551:13): [True: 160, False: 3.85k]
  ------------------
  552|    160|                return regex_string_reader_impl<SourceCharT>{}.read(
  553|    160|                    SCN_FWD(range),
  ------------------
  |  |  248|    160|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  554|    160|                    get_unescaped_regex_pattern(
  555|    160|                        specs.charset_string<SourceCharT>()),
  556|    160|                    specs.regexp_flags, value);
  557|      0|#endif
  558|       |
  559|      0|            default:
  ------------------
  |  Branch (559:13): [True: 0, False: 4.01k]
  ------------------
  560|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  561|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  562|  4.01k|        }
  563|       |
  564|  4.01k|        SCN_CLANG_POP
  565|  4.01k|    }
_ZN3scn2v24impl16word_reader_implIwE4readIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RNSt3__117basic_string_viewIT0_NSL_11char_traitsISN_EEEE:
  120|    194|    {
  121|    194|        return read_string_view_impl(range, read_until_classic_space(range),
  122|    194|                                     value);
  123|    194|    }
_ZN3scn2v24impl25character_set_reader_implIwE4readIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERNSt3__117basic_string_viewIT0_NSP_11char_traitsISR_EEEE:
  307|    848|    {
  308|    848|        auto it = read_source_impl(range, {specs});
  309|    848|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|    848|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 142, False: 706]
  |  |  ------------------
  ------------------
  310|    142|            return unexpected(it.error());
  311|    142|        }
  312|       |
  313|    706|        return read_string_view_impl(range, *it, value);
  314|    848|    }
_ZN3scn2v24impl21read_string_view_implIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEERS8_wEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_OT0_RNSt3__117basic_string_viewIT1_NSK_11char_traitsISM_EEEE:
   62|  1.09k|{
   63|  1.09k|    static_assert(
   64|  1.09k|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   65|       |
   66|  1.09k|    auto src = [&]() {
   67|  1.09k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
   68|  1.09k|            return make_contiguous_buffer(
   69|  1.09k|                ranges::subrange{ranges::begin(range).base(), result.base()});
   70|  1.09k|        }
   71|  1.09k|        else {
   72|  1.09k|            return make_contiguous_buffer(
   73|  1.09k|                ranges::subrange{ranges::begin(range), result});
   74|  1.09k|        }
   75|  1.09k|    }();
   76|  1.09k|    using src_type = decltype(src);
   77|       |
   78|  1.09k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (78:9): [Folded - Ignored]
  ------------------
   79|      0|        return unexpected_scan_error(
   80|      0|            scan_error::invalid_scanned_value,
   81|      0|            "Cannot read a string_view from this source range (not "
   82|      0|            "contiguous)");
   83|      0|    }
   84|  1.09k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (84:19): [Folded - Ignored]
  ------------------
   85|  1.09k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   86|  1.09k|                                     "Cannot read a string_view from "
   87|  1.09k|                                     "this source range (would require "
   88|  1.09k|                                     "transcoding)");
   89|  1.09k|    }
   90|  1.09k|    else {
   91|  1.09k|        const auto view = src.view();
   92|  1.09k|        value = std::basic_string_view<ValueCharT>(
   93|  1.09k|            ranges::data(view), ranges_polyfill::usize(view));
   94|       |
   95|  1.09k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (95:13): [True: 0, False: 1.09k]
  ------------------
   96|      0|            return unexpected_scan_error(
   97|      0|                scan_error::invalid_scanned_value,
   98|      0|                "Invalid encoding in scanned string_view");
   99|      0|        }
  100|       |
  101|  1.09k|        return SCN_MOVE(result);
  ------------------
  |  |  246|  1.09k|    static_cast<    \
  |  |  247|  1.09k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  102|  1.09k|    }
  103|  1.09k|}
_ZZN3scn2v24impl21read_string_view_implIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEERS8_wEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_OT0_RNSt3__117basic_string_viewIT1_NSK_11char_traitsISM_EEEEENKUlvE_clEv:
   66|  1.09k|    auto src = [&]() {
   67|  1.09k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (67:23): [Folded - Ignored]
  ------------------
   68|  1.09k|            return make_contiguous_buffer(
   69|  1.09k|                ranges::subrange{ranges::begin(range).base(), result.base()});
   70|  1.09k|        }
   71|  1.09k|        else {
   72|  1.09k|            return make_contiguous_buffer(
   73|  1.09k|                ranges::subrange{ranges::begin(range), result});
   74|  1.09k|        }
   75|  1.09k|    }();
_ZN3scn2v24impl24regex_string_reader_implIwE4readIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NSt3__117basic_string_viewIwNSL_11char_traitsIwEEEENS0_6detail11regex_flagsERNSM_IT0_NSN_ISS_EEEE:
  147|  2.97k|    {
  148|  2.97k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  |   71|  2.97k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.97k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.97k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.59k, False: 384]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.59k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.59k|    }                                                  \
  |  |  |  |   70|  2.97k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    384|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  149|    384|        return read_string_view_impl(range, it, value);
  150|  2.97k|    }
_ZN3scn2v24impl13string_readerIwE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISO_EEE4typeEEEOSO_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
  511|    464|    {
  512|    464|        SCN_UNUSED(loc);
  ------------------
  |  |  227|    464|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  513|    464|        return read_impl(SCN_FWD(range), specs, value);
  ------------------
  |  |  248|    464|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  514|    464|    }
_ZN3scn2v24impl13string_readerIwE9read_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISO_EEE4typeEEEOSO_RKNS0_6detail12format_specsERT0_:
  528|    464|    {
  529|    464|        SCN_CLANG_PUSH
  530|    464|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
  531|       |
  532|    464|        switch (m_type) {
  533|    216|            case reader_type::word:
  ------------------
  |  Branch (533:13): [True: 216, False: 248]
  ------------------
  534|    216|                return word_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|    216|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  535|    216|                                                            value);
  536|       |
  537|     74|            case reader_type::character:
  ------------------
  |  Branch (537:13): [True: 74, False: 390]
  ------------------
  538|     74|                return character_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|     74|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  539|     74|                                                                 value);
  540|       |
  541|    144|            case reader_type::character_set:
  ------------------
  |  Branch (541:13): [True: 144, False: 320]
  ------------------
  542|    144|                return character_set_reader_impl<SourceCharT>{}.read(
  543|    144|                    SCN_FWD(range), specs, value);
  ------------------
  |  |  248|    144|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  544|       |
  545|      0|#if !SCN_DISABLE_REGEX
  546|      6|            case reader_type::regex:
  ------------------
  |  Branch (546:13): [True: 6, False: 458]
  ------------------
  547|      6|                return regex_string_reader_impl<SourceCharT>{}.read(
  548|      6|                    SCN_FWD(range), specs.charset_string<SourceCharT>(),
  ------------------
  |  |  248|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  549|      6|                    specs.regexp_flags, value);
  550|       |
  551|     24|            case reader_type::regex_escaped:
  ------------------
  |  Branch (551:13): [True: 24, False: 440]
  ------------------
  552|     24|                return regex_string_reader_impl<SourceCharT>{}.read(
  553|     24|                    SCN_FWD(range),
  ------------------
  |  |  248|     24|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  554|     24|                    get_unescaped_regex_pattern(
  555|     24|                        specs.charset_string<SourceCharT>()),
  556|     24|                    specs.regexp_flags, value);
  557|      0|#endif
  558|       |
  559|      0|            default:
  ------------------
  |  Branch (559:13): [True: 0, False: 464]
  ------------------
  560|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  561|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  562|    464|        }
  563|       |
  564|    464|        SCN_CLANG_POP
  565|    464|    }
_ZN3scn2v24impl16word_reader_implIwE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RNSt3__112basic_stringIT0_NSM_11char_traitsISO_EENSM_9allocatorISO_EEEE:
  112|    216|    {
  113|    216|        return read_string_impl(range, read_until_classic_space(range), value);
  114|    216|    }
_ZN3scn2v24impl16read_string_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS5_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESJ_OT0_RNSt3__112basic_stringIT1_NSO_11char_traitsISQ_EENSO_9allocatorISQ_EEEE:
   39|    290|{
   40|    290|    static_assert(
   41|    290|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   42|       |
   43|    290|    auto src =
   44|    290|        make_contiguous_buffer(ranges::subrange{ranges::begin(range), result});
   45|    290|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (45:9): [True: 42, False: 248]
  ------------------
   46|     42|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   47|     42|                                     "Invalid encoding in scanned string");
   48|     42|    }
   49|    248|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  246|    248|    static_cast<    \
  |  |  247|    248|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   50|    248|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    248|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 248]
  |  |  ------------------
  ------------------
   51|      0|        return unexpected(e);
   52|      0|    }
   53|       |
   54|    248|    return SCN_MOVE(result);
  ------------------
  |  |  246|    248|    static_cast<    \
  |  |  247|    248|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   55|    248|}
_ZN3scn2v24impl21character_reader_implIwE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RNSt3__112basic_stringIT0_NSM_11char_traitsISO_EENSM_9allocatorISO_EEEE:
  192|     74|    {
  193|     74|        return read_impl(
  194|     74|            range,
  195|     74|            [&](auto&& rng) {
  196|     74|                return read_string_impl(rng, read_all(rng), value);
  197|     74|            },
  198|     74|            detail::priority_tag<1>{});
  199|     74|    }
_ZN3scn2v24impl21character_reader_implIwE9read_implIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEZNS3_4readINS1_15take_width_viewISC_EEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RNSt3__112basic_stringIT0_NSN_11char_traitsISP_EENSN_9allocatorISP_EEEEEUlSM_E_EENSG_INSH_IRNSE_ISI_EEXsr6rangesE14borrowed_rangeISY_EEE4typeEEESY_OSP_NS0_6detail12priority_tagILm1EEE:
  219|     74|    {
  220|     74|        return read_cb(range);
  221|     74|    }
_ZZN3scn2v24impl21character_reader_implIwE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RNSt3__112basic_stringIT0_NSM_11char_traitsISO_EENSM_9allocatorISO_EEEEENKUlSL_E_clIRSE_EEDaSL_:
  195|     74|            [&](auto&& rng) {
  196|     74|                return read_string_impl(rng, read_all(rng), value);
  197|     74|            },
_ZN3scn2v24impl25character_set_reader_implIwE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RKNS0_6detail12format_specsERNSt3__112basic_stringIT0_NSQ_11char_traitsISS_EENSQ_9allocatorISS_EEEE:
  293|    144|    {
  294|    144|        auto it = read_source_impl(range, {specs});
  295|    144|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|    144|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 8, False: 136]
  |  |  ------------------
  ------------------
  296|      8|            return unexpected(it.error());
  297|      8|        }
  298|       |
  299|    136|        return read_string_impl(range, *it, value);
  300|    144|    }
_ZN3scn2v24impl16read_string_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS5_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_OT0_RNSt3__112basic_stringIT1_NSP_11char_traitsISR_EENSP_9allocatorISR_EEEE:
   39|    136|{
   40|    136|    static_assert(
   41|    136|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   42|       |
   43|    136|    auto src =
   44|    136|        make_contiguous_buffer(ranges::subrange{ranges::begin(range), result});
   45|    136|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (45:9): [True: 0, False: 136]
  ------------------
   46|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   47|      0|                                     "Invalid encoding in scanned string");
   48|      0|    }
   49|    136|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  246|    136|    static_cast<    \
  |  |  247|    136|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   50|    136|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    136|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 136]
  |  |  ------------------
  ------------------
   51|      0|        return unexpected(e);
   52|      0|    }
   53|       |
   54|    136|    return SCN_MOVE(result);
  ------------------
  |  |  246|    136|    static_cast<    \
  |  |  247|    136|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   55|    136|}
_ZN3scn2v24impl24regex_string_reader_implIwE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIwNSM_11char_traitsIwEEEENS0_6detail11regex_flagsERNSM_12basic_stringIT0_NSO_ISU_EENSM_9allocatorISU_EEEE:
  136|     30|    {
  137|     30|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  |   71|     30|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|     30|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|     30|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|     30|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 30, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     30|    }                                                  \
  |  |  |  |   70|     30|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  138|      0|        return read_string_impl(range, it, value);
  139|     30|    }
_ZN3scn2v24impl13string_readerIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNS0_6detail12format_specsERT0_NSS_10locale_refE:
  511|  4.01k|    {
  512|  4.01k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  4.01k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  513|  4.01k|        return read_impl(SCN_FWD(range), specs, value);
  ------------------
  |  |  248|  4.01k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  514|  4.01k|    }
_ZN3scn2v24impl13string_readerIwE9read_implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNS0_6detail12format_specsERT0_:
  528|  4.01k|    {
  529|  4.01k|        SCN_CLANG_PUSH
  530|  4.01k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
  531|       |
  532|  4.01k|        switch (m_type) {
  533|    194|            case reader_type::word:
  ------------------
  |  Branch (533:13): [True: 194, False: 3.82k]
  ------------------
  534|    194|                return word_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|    194|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  535|    194|                                                            value);
  536|       |
  537|      0|            case reader_type::character:
  ------------------
  |  Branch (537:13): [True: 0, False: 4.01k]
  ------------------
  538|      0|                return character_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  539|      0|                                                                 value);
  540|       |
  541|    848|            case reader_type::character_set:
  ------------------
  |  Branch (541:13): [True: 848, False: 3.16k]
  ------------------
  542|    848|                return character_set_reader_impl<SourceCharT>{}.read(
  543|    848|                    SCN_FWD(range), specs, value);
  ------------------
  |  |  248|    848|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  544|       |
  545|      0|#if !SCN_DISABLE_REGEX
  546|  2.81k|            case reader_type::regex:
  ------------------
  |  Branch (546:13): [True: 2.81k, False: 1.20k]
  ------------------
  547|  2.81k|                return regex_string_reader_impl<SourceCharT>{}.read(
  548|  2.81k|                    SCN_FWD(range), specs.charset_string<SourceCharT>(),
  ------------------
  |  |  248|  2.81k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  549|  2.81k|                    specs.regexp_flags, value);
  550|       |
  551|    160|            case reader_type::regex_escaped:
  ------------------
  |  Branch (551:13): [True: 160, False: 3.85k]
  ------------------
  552|    160|                return regex_string_reader_impl<SourceCharT>{}.read(
  553|    160|                    SCN_FWD(range),
  ------------------
  |  |  248|    160|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  554|    160|                    get_unescaped_regex_pattern(
  555|    160|                        specs.charset_string<SourceCharT>()),
  556|    160|                    specs.regexp_flags, value);
  557|      0|#endif
  558|       |
  559|      0|            default:
  ------------------
  |  Branch (559:13): [True: 0, False: 4.01k]
  ------------------
  560|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  561|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  562|  4.01k|        }
  563|       |
  564|  4.01k|        SCN_CLANG_POP
  565|  4.01k|    }
_ZN3scn2v24impl16word_reader_implIwE4readIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RNSt3__112basic_stringIT0_NSL_11char_traitsISN_EENSL_9allocatorISN_EEEE:
  112|    194|    {
  113|    194|        return read_string_impl(range, read_until_classic_space(range), value);
  114|    194|    }
_ZN3scn2v24impl25character_set_reader_implIwE4readIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERNSt3__112basic_stringIT0_NSP_11char_traitsISR_EENSP_9allocatorISR_EEEE:
  293|    848|    {
  294|    848|        auto it = read_source_impl(range, {specs});
  295|    848|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|    848|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 142, False: 706]
  |  |  ------------------
  ------------------
  296|    142|            return unexpected(it.error());
  297|    142|        }
  298|       |
  299|    706|        return read_string_impl(range, *it, value);
  300|    848|    }
_ZN3scn2v24impl16read_string_implIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEERS8_wEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_OT0_RNSt3__112basic_stringIT1_NSK_11char_traitsISM_EENSK_9allocatorISM_EEEE:
   39|  1.09k|{
   40|  1.09k|    static_assert(
   41|  1.09k|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   42|       |
   43|  1.09k|    auto src =
   44|  1.09k|        make_contiguous_buffer(ranges::subrange{ranges::begin(range), result});
   45|  1.09k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (45:9): [True: 0, False: 1.09k]
  ------------------
   46|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   47|      0|                                     "Invalid encoding in scanned string");
   48|      0|    }
   49|  1.09k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  246|  1.09k|    static_cast<    \
  |  |  247|  1.09k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   50|  1.09k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.09k]
  |  |  ------------------
  ------------------
   51|      0|        return unexpected(e);
   52|      0|    }
   53|       |
   54|  1.09k|    return SCN_MOVE(result);
  ------------------
  |  |  246|  1.09k|    static_cast<    \
  |  |  247|  1.09k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   55|  1.09k|}
_ZN3scn2v24impl24regex_string_reader_implIwE4readIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NSt3__117basic_string_viewIwNSL_11char_traitsIwEEEENS0_6detail11regex_flagsERNSL_12basic_stringIT0_NSN_IST_EENSL_9allocatorIST_EEEE:
  136|  2.97k|    {
  137|  2.97k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  |   71|  2.97k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.97k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.97k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.59k, False: 384]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.59k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.59k|    }                                                  \
  |  |  |  |   70|  2.97k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    384|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  138|    384|        return read_string_impl(range, it, value);
  139|  2.97k|    }

_ZN3scn2v24impl39code_point_length_by_starting_code_unitIcEEmT_:
  109|  1.66M|{
  110|  1.66M|    return detail::utf_code_point_length_by_starting_code_unit(ch);
  111|  1.66M|}
_ZN3scn2v24impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   88|   262k|{
   89|   262k|    if (input.empty()) {
  ------------------
  |  Branch (89:9): [True: 560, False: 261k]
  ------------------
   90|    560|        return true;
   91|    560|    }
   92|       |
   93|   261k|    constexpr auto enc = get_encoding<CharT>();
   94|   261k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (94:19): [Folded - Ignored]
  ------------------
   95|   261k|        return simdutf::validate_utf8(input.data(), input.size());
   96|   261k|    }
   97|   261k|    else if constexpr (enc == encoding::utf16) {
   98|   261k|        return simdutf::validate_utf16(
   99|   261k|            reinterpret_cast<const char16_t*>(input.data()), input.size());
  100|   261k|    }
  101|   261k|    else if constexpr (enc == encoding::utf32) {
  102|   261k|        return simdutf::validate_utf32(
  103|   261k|            reinterpret_cast<const char32_t*>(input.data()), input.size());
  104|   261k|    }
  105|   261k|}
_ZN3scn2v24impl25transcode_valid_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
  571|  2.42k|{
  572|  2.42k|    SCN_EXPECT(validate_unicode(source));
  ------------------
  |  |  242|  2.42k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.42k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  573|       |
  574|      0|    auto transcoded_length =
  575|  2.42k|        count_valid_transcoded_code_units<DestCharT>(source);
  576|  2.42k|    dest.resize(transcoded_length);
  577|       |
  578|  2.42k|    const auto n = transcode_valid(source, span{dest});
  579|  2.42k|    SCN_ENSURE(n == dest.size());
  ------------------
  |  |  243|  2.42k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.42k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  580|  2.42k|}
_ZN3scn2v24impl33count_valid_transcoded_code_unitsIwcEEmNSt3__117basic_string_viewIT0_NS3_11char_traitsIS5_EEEE:
  367|  4.70k|{
  368|  4.70k|    if (input.empty()) {
  ------------------
  |  Branch (368:9): [True: 140, False: 4.56k]
  ------------------
  369|    140|        return 0;
  370|    140|    }
  371|       |
  372|  4.56k|    SCN_EXPECT(validate_unicode(input));
  ------------------
  |  |  242|  4.56k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.56k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  373|       |
  374|      0|    constexpr auto src_enc = get_encoding<SourceCharT>();
  375|  4.56k|    constexpr auto dest_enc = get_encoding<DestCharT>();
  376|       |
  377|  4.56k|    if constexpr (src_enc == dest_enc) {
  ------------------
  |  Branch (377:19): [Folded - Ignored]
  ------------------
  378|  4.56k|        return input.size();
  379|  4.56k|    }
  380|       |
  381|  4.56k|    if constexpr (src_enc == encoding::utf8) {
  ------------------
  |  Branch (381:19): [Folded - Ignored]
  ------------------
  382|  4.56k|        if constexpr (dest_enc == encoding::utf16) {
  ------------------
  |  Branch (382:23): [Folded - Ignored]
  ------------------
  383|  4.56k|            return simdutf::utf16_length_from_utf8(input.data(), input.size());
  384|  4.56k|        }
  385|  4.56k|        else {
  386|  4.56k|            return simdutf::utf32_length_from_utf8(input.data(), input.size());
  387|  4.56k|        }
  388|  4.56k|    }
  389|  4.56k|    else if constexpr (src_enc == encoding::utf16) {
  390|  4.56k|        if constexpr (dest_enc == encoding::utf8) {
  391|  4.56k|            return simdutf::utf8_length_from_utf16(
  392|  4.56k|                reinterpret_cast<const char16_t*>(input.data()), input.size());
  393|  4.56k|        }
  394|  4.56k|        else {
  395|  4.56k|            return simdutf::utf32_length_from_utf16(
  396|  4.56k|                reinterpret_cast<const char16_t*>(input.data()), input.size());
  397|  4.56k|        }
  398|  4.56k|    }
  399|  4.56k|    else if constexpr (src_enc == encoding::utf32) {
  400|  4.56k|        if constexpr (dest_enc == encoding::utf8) {
  401|  4.56k|            return simdutf::utf8_length_from_utf32(
  402|  4.56k|                reinterpret_cast<const char32_t*>(input.data()), input.size());
  403|  4.56k|        }
  404|  4.56k|        else {
  405|  4.56k|            return simdutf::utf16_length_from_utf32(
  406|  4.56k|                reinterpret_cast<const char32_t*>(input.data()), input.size());
  407|  4.56k|        }
  408|  4.56k|    }
  409|  4.56k|}
_ZN3scn2v24impl15transcode_validIcwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS0_4spanIT0_EE:
  512|  2.42k|{
  513|  2.42k|    if (input.empty()) {
  ------------------
  |  Branch (513:9): [True: 140, False: 2.28k]
  ------------------
  514|    140|        return 0;
  515|    140|    }
  516|       |
  517|  2.28k|    SCN_EXPECT(validate_unicode(input));
  ------------------
  |  |  242|  2.28k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.28k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  518|  2.28k|    SCN_EXPECT(count_valid_transcoded_code_units<DestCharT>(input) <=
  ------------------
  |  |  242|  2.28k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.28k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  519|      0|               output.size());
  520|       |
  521|      0|    constexpr auto src_enc = get_encoding<SourceCharT>();
  522|  2.28k|    constexpr auto dest_enc = get_encoding<DestCharT>();
  523|       |
  524|  2.28k|    if constexpr (src_enc == dest_enc) {
  ------------------
  |  Branch (524:19): [Folded - Ignored]
  ------------------
  525|  2.28k|        std::memcpy(output.data(), input.data(),
  526|  2.28k|                    input.size() * sizeof(SourceCharT));
  527|  2.28k|        return input.size();
  528|  2.28k|    }
  529|       |
  530|  2.28k|    if constexpr (src_enc == encoding::utf8) {
  ------------------
  |  Branch (530:19): [Folded - Ignored]
  ------------------
  531|  2.28k|        if constexpr (dest_enc == encoding::utf16) {
  ------------------
  |  Branch (531:23): [Folded - Ignored]
  ------------------
  532|  2.28k|            return simdutf::convert_valid_utf8_to_utf16(
  533|  2.28k|                input.data(), input.size(),
  534|  2.28k|                reinterpret_cast<char16_t*>(output.data()));
  535|  2.28k|        }
  536|  2.28k|        else {
  537|  2.28k|            return simdutf::convert_valid_utf8_to_utf32(
  538|  2.28k|                input.data(), input.size(),
  539|  2.28k|                reinterpret_cast<char32_t*>(output.data()));
  540|  2.28k|        }
  541|  2.28k|    }
  542|  2.28k|    else if constexpr (src_enc == encoding::utf16) {
  543|  2.28k|        if constexpr (dest_enc == encoding::utf8) {
  544|  2.28k|            return simdutf::convert_valid_utf16_to_utf8(
  545|  2.28k|                reinterpret_cast<const char16_t*>(input.data()), input.size(),
  546|  2.28k|                output.data());
  547|  2.28k|        }
  548|  2.28k|        else {
  549|  2.28k|            return simdutf::convert_valid_utf16_to_utf32(
  550|  2.28k|                reinterpret_cast<const char16_t*>(input.data()), input.size(),
  551|  2.28k|                reinterpret_cast<char32_t*>(output.data()));
  552|  2.28k|        }
  553|  2.28k|    }
  554|  2.28k|    else if constexpr (src_enc == encoding::utf32) {
  555|  2.28k|        if constexpr (dest_enc == encoding::utf8) {
  556|  2.28k|            return simdutf::convert_valid_utf32_to_utf8(
  557|  2.28k|                reinterpret_cast<const char32_t*>(input.data()), input.size(),
  558|  2.28k|                output.data());
  559|  2.28k|        }
  560|  2.28k|        else {
  561|  2.28k|            return simdutf::convert_valid_utf32_to_utf16(
  562|  2.28k|                reinterpret_cast<const char32_t*>(input.data()), input.size(),
  563|  2.28k|                reinterpret_cast<char16_t*>(output.data()));
  564|  2.28k|        }
  565|  2.28k|    }
  566|  2.28k|}
_ZN3scn2v24impl26transcode_possibly_invalidIcDiEENSt3__18optionalImEENS3_17basic_string_viewIT_NS3_11char_traitsIS7_EEEENS0_4spanIT0_EE:
  448|  36.5k|{
  449|  36.5k|    if (input.empty()) {
  ------------------
  |  Branch (449:9): [True: 0, False: 36.5k]
  ------------------
  450|      0|        return 0;
  451|      0|    }
  452|       |
  453|  36.5k|    if constexpr (get_encoding<SourceCharT>() == get_encoding<DestCharT>()) {
  ------------------
  |  Branch (453:19): [Folded - Ignored]
  ------------------
  454|  36.5k|        SCN_EXPECT(output.size() >= input.size());
  455|  36.5k|        std::memcpy(output.data(), input.data(),
  456|  36.5k|                    input.size() * sizeof(SourceCharT));
  457|  36.5k|        return input.size();
  458|  36.5k|    }
  459|       |
  460|  36.5k|    const auto result = [&]() {
  461|  36.5k|        constexpr auto src_enc = get_encoding<SourceCharT>();
  462|  36.5k|        constexpr auto dest_enc = get_encoding<DestCharT>();
  463|       |
  464|  36.5k|        if constexpr (src_enc == encoding::utf8) {
  465|  36.5k|            if constexpr (dest_enc == encoding::utf16) {
  466|  36.5k|                return simdutf::convert_utf8_to_utf16_with_errors(
  467|  36.5k|                    input.data(), input.size(),
  468|  36.5k|                    reinterpret_cast<char16_t*>(output.data()));
  469|  36.5k|            }
  470|  36.5k|            else {
  471|  36.5k|                return simdutf::convert_utf8_to_utf32_with_errors(
  472|  36.5k|                    input.data(), input.size(),
  473|  36.5k|                    reinterpret_cast<char32_t*>(output.data()));
  474|  36.5k|            }
  475|  36.5k|        }
  476|  36.5k|        else if constexpr (src_enc == encoding::utf16) {
  477|  36.5k|            if constexpr (dest_enc == encoding::utf8) {
  478|  36.5k|                return simdutf::convert_utf16_to_utf8_with_errors(
  479|  36.5k|                    reinterpret_cast<const char16_t*>(input.data()),
  480|  36.5k|                    input.size(), output.data());
  481|  36.5k|            }
  482|  36.5k|            else {
  483|  36.5k|                return simdutf::convert_utf16_to_utf32_with_errors(
  484|  36.5k|                    reinterpret_cast<const char16_t*>(input.data()),
  485|  36.5k|                    input.size(), reinterpret_cast<char32_t*>(output.data()));
  486|  36.5k|            }
  487|  36.5k|        }
  488|  36.5k|        else if constexpr (src_enc == encoding::utf32) {
  489|  36.5k|            if constexpr (dest_enc == encoding::utf8) {
  490|  36.5k|                return simdutf::convert_utf32_to_utf8_with_errors(
  491|  36.5k|                    reinterpret_cast<const char32_t*>(input.data()),
  492|  36.5k|                    input.size(), output.data());
  493|  36.5k|            }
  494|  36.5k|            else {
  495|  36.5k|                return simdutf::convert_utf32_to_utf16_with_errors(
  496|  36.5k|                    reinterpret_cast<const char32_t*>(input.data()),
  497|  36.5k|                    input.size(), reinterpret_cast<char16_t*>(output.data()));
  498|  36.5k|            }
  499|  36.5k|        }
  500|  36.5k|    }();
  501|       |
  502|  36.5k|    if (SCN_UNLIKELY(result.error != simdutf::SUCCESS)) {
  ------------------
  |  |  153|  36.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 14.4k, False: 22.1k]
  |  |  ------------------
  ------------------
  503|  14.4k|        return std::nullopt;
  504|  14.4k|    }
  505|  22.1k|    SCN_ENSURE(result.count <= output.size());
  ------------------
  |  |  243|  22.1k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|  22.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  506|      0|    return result.count;
  507|  36.5k|}
_ZZN3scn2v24impl26transcode_possibly_invalidIcDiEENSt3__18optionalImEENS3_17basic_string_viewIT_NS3_11char_traitsIS7_EEEENS0_4spanIT0_EEENKUlvE_clEv:
  460|  36.5k|    const auto result = [&]() {
  461|  36.5k|        constexpr auto src_enc = get_encoding<SourceCharT>();
  462|  36.5k|        constexpr auto dest_enc = get_encoding<DestCharT>();
  463|       |
  464|  36.5k|        if constexpr (src_enc == encoding::utf8) {
  ------------------
  |  Branch (464:23): [Folded - Ignored]
  ------------------
  465|  36.5k|            if constexpr (dest_enc == encoding::utf16) {
  ------------------
  |  Branch (465:27): [Folded - Ignored]
  ------------------
  466|  36.5k|                return simdutf::convert_utf8_to_utf16_with_errors(
  467|  36.5k|                    input.data(), input.size(),
  468|  36.5k|                    reinterpret_cast<char16_t*>(output.data()));
  469|  36.5k|            }
  470|  36.5k|            else {
  471|  36.5k|                return simdutf::convert_utf8_to_utf32_with_errors(
  472|  36.5k|                    input.data(), input.size(),
  473|  36.5k|                    reinterpret_cast<char32_t*>(output.data()));
  474|  36.5k|            }
  475|  36.5k|        }
  476|  36.5k|        else if constexpr (src_enc == encoding::utf16) {
  477|  36.5k|            if constexpr (dest_enc == encoding::utf8) {
  478|  36.5k|                return simdutf::convert_utf16_to_utf8_with_errors(
  479|  36.5k|                    reinterpret_cast<const char16_t*>(input.data()),
  480|  36.5k|                    input.size(), output.data());
  481|  36.5k|            }
  482|  36.5k|            else {
  483|  36.5k|                return simdutf::convert_utf16_to_utf32_with_errors(
  484|  36.5k|                    reinterpret_cast<const char16_t*>(input.data()),
  485|  36.5k|                    input.size(), reinterpret_cast<char32_t*>(output.data()));
  486|  36.5k|            }
  487|  36.5k|        }
  488|  36.5k|        else if constexpr (src_enc == encoding::utf32) {
  489|  36.5k|            if constexpr (dest_enc == encoding::utf8) {
  490|  36.5k|                return simdutf::convert_utf32_to_utf8_with_errors(
  491|  36.5k|                    reinterpret_cast<const char32_t*>(input.data()),
  492|  36.5k|                    input.size(), output.data());
  493|  36.5k|            }
  494|  36.5k|            else {
  495|  36.5k|                return simdutf::convert_utf32_to_utf16_with_errors(
  496|  36.5k|                    reinterpret_cast<const char32_t*>(input.data()),
  497|  36.5k|                    input.size(), reinterpret_cast<char16_t*>(output.data()));
  498|  36.5k|            }
  499|  36.5k|        }
  500|  36.5k|    }();
_ZN3scn2v24impl28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
  115|   239k|{
  116|   239k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  242|   239k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   239k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  117|       |
  118|      0|    const auto len = code_point_length_by_starting_code_unit(input[0]);
  119|   239k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|   239k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 15.0k, False: 224k]
  |  |  ------------------
  ------------------
  120|  15.0k|        return detail::invalid_code_point;
  121|  15.0k|    }
  122|       |
  123|   224k|    constexpr auto enc = get_encoding<CharT>();
  124|   224k|    char32_t output{};
  125|   224k|    size_t ret{};
  126|   224k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (126:19): [Folded - Ignored]
  ------------------
  127|   224k|#ifndef NDEBUG
  128|   224k|        if (validate_unicode(input)) {
  ------------------
  |  Branch (128:13): [True: 196k, False: 28.4k]
  ------------------
  129|   196k|            auto len =
  130|   196k|                simdutf::utf32_length_from_utf8(input.data(), input.size());
  131|   196k|            SCN_EXPECT(len == 1);
  ------------------
  |  |  242|   196k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   196k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  132|   196k|        }
  133|      0|#endif
  134|      0|        ret = simdutf::convert_utf8_to_utf32(input.data(), len, &output);
  135|   224k|    }
  136|      0|    else if constexpr (enc == encoding::utf16) {
  137|      0|#ifndef NDEBUG
  138|      0|        if (validate_unicode(input)) {
  139|      0|            auto len = simdutf::utf32_length_from_utf16(
  140|      0|                reinterpret_cast<const char16_t*>(input.data()), input.size());
  141|      0|            SCN_EXPECT(len == 1);
  142|      0|        }
  143|      0|#endif
  144|      0|        ret = simdutf::convert_utf16_to_utf32(
  145|      0|            reinterpret_cast<const char16_t*>(input.data()), len, &output);
  146|      0|    }
  147|      0|    else if constexpr (enc == encoding::utf32) {
  148|      0|        output = static_cast<char32_t>(input[0]);
  149|      0|        ret = output < detail::invalid_code_point;
  150|      0|    }
  151|       |
  152|   224k|    if (SCN_UNLIKELY(ret != 1)) {
  ------------------
  |  |  153|   224k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 27.0k, False: 197k]
  |  |  ------------------
  ------------------
  153|  27.0k|        return detail::invalid_code_point;
  154|  27.0k|    }
  155|   197k|    return static_cast<char32_t>(output);
  156|   224k|}
_ZN3scn2v24impl19get_next_code_pointIcEENS1_21iterator_value_resultIDTclL_ZN4nano6ranges16function_objects5beginEEclsr3stdE7declvalIRNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEEEEDiEESC_:
  262|   265k|{
  263|   265k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  242|   265k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   265k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  264|       |
  265|      0|    const auto len = code_point_length_by_starting_code_unit(input[0]);
  266|   265k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|   265k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.04k, False: 260k]
  |  |  ------------------
  ------------------
  267|  5.04k|        return {get_start_of_next_code_point(input),
  268|  5.04k|                detail::invalid_code_point};
  269|  5.04k|    }
  270|   260k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  153|   260k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 926, False: 259k]
  |  |  ------------------
  ------------------
  271|    926|        return {input.end(), detail::invalid_code_point};
  272|    926|    }
  273|       |
  274|   259k|    constexpr auto enc = get_encoding<CharT>();
  275|   259k|    std::size_t result{1};
  276|   259k|    char32_t output{};
  277|   259k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (277:19): [Folded - Ignored]
  ------------------
  278|   259k|        result = simdutf::convert_utf8_to_utf32(
  279|   259k|            reinterpret_cast<const char*>(input.data()), len, &output);
  280|   259k|    }
  281|   259k|    else if constexpr (enc == encoding::utf16) {
  282|   259k|        result = simdutf::convert_utf16_to_utf32(
  283|   259k|            reinterpret_cast<const char16_t*>(input.data()), len, &output);
  284|   259k|    }
  285|   259k|    else if constexpr (enc == encoding::utf32) {
  286|   259k|        SCN_EXPECT(len == 1);
  287|   259k|        output = static_cast<char32_t>(input[0]);
  288|   259k|    }
  289|       |
  290|   259k|    if (SCN_UNLIKELY(result != 1)) {
  ------------------
  |  |  153|   259k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 9.28k, False: 249k]
  |  |  ------------------
  ------------------
  291|  9.28k|        return {get_start_of_next_code_point(input.substr(1)),
  292|  9.28k|                detail::invalid_code_point};
  293|  9.28k|    }
  294|       |
  295|   249k|    return {input.begin() + len, output};
  296|   259k|}
_ZN3scn2v24impl28get_start_of_next_code_pointIcEEDTclL_ZN4nano6ranges16function_objects5beginEEclsr3stdE7declvalIRNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEEESB_:
  247|  14.3k|{
  248|  14.3k|    auto it = input.begin();
  249|  32.9k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (249:12): [True: 29.9k, False: 2.98k]
  ------------------
  250|  29.9k|        if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (250:13): [True: 11.3k, False: 18.5k]
  ------------------
  251|  11.3k|            break;
  252|  11.3k|        }
  253|  29.9k|    }
  254|       |
  255|  14.3k|    return it;
  256|  14.3k|}
_ZN3scn2v24impl25for_each_code_point_validIcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
  681|  6.66k|{
  682|  6.66k|    auto it = input.begin();
  683|  13.3k|    while (it != input.end()) {
  ------------------
  |  Branch (683:12): [True: 6.66k, False: 6.66k]
  ------------------
  684|  6.66k|        auto res = get_next_code_point_valid(
  685|  6.66k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
  686|  6.66k|        cb(res.value);
  687|  6.66k|        it = detail::make_string_view_iterator(input, res.iterator);
  688|  6.66k|    }
  689|  6.66k|}
_ZN3scn2v24impl25get_next_code_point_validIcEENS1_21iterator_value_resultIDTclL_ZN4nano6ranges16function_objects5beginEEclsr3stdE7declvalIRNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEEEEDiEESC_:
  216|  6.66k|{
  217|  6.66k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  242|  6.66k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.66k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  218|  6.66k|    SCN_EXPECT(validate_unicode(input));
  ------------------
  |  |  242|  6.66k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.66k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|       |
  220|      0|    const auto len = code_point_length_by_starting_code_unit(input[0]);
  221|  6.66k|    SCN_EXPECT(len != 0);
  ------------------
  |  |  242|  6.66k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.66k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|      0|    constexpr auto enc = get_encoding<CharT>();
  224|  6.66k|    char32_t output{};
  225|  6.66k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (225:19): [Folded - Ignored]
  ------------------
  226|  6.66k|        const auto ret = simdutf::convert_valid_utf8_to_utf32(
  227|  6.66k|            reinterpret_cast<const char*>(input.data()), len, &output);
  228|  6.66k|        SCN_EXPECT(ret == 1);
  ------------------
  |  |  242|  6.66k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.66k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  229|  6.66k|    }
  230|      0|    else if constexpr (enc == encoding::utf16) {
  231|      0|        const auto ret = simdutf::convert_valid_utf16_to_utf32(
  232|      0|            reinterpret_cast<const char16_t*>(input.data()), len, &output);
  233|      0|        SCN_EXPECT(ret == 1);
  234|      0|    }
  235|      0|    else if constexpr (enc == encoding::utf32) {
  236|      0|        output = static_cast<char32_t>(input[0]);
  237|      0|    }
  238|       |
  239|      0|    return iterator_value_result<
  240|  6.66k|        ranges::iterator_t<std::basic_string_view<CharT>>, char32_t>{
  241|  6.66k|        input.begin() + len, static_cast<char32_t>(output)};
  242|  6.66k|}
_ZN3scn2v24impl39code_point_length_by_starting_code_unitIwEEmT_:
  109|  6.94M|{
  110|  6.94M|    return detail::utf_code_point_length_by_starting_code_unit(ch);
  111|  6.94M|}
_ZN3scn2v24impl26transcode_possibly_invalidIwDiEENSt3__18optionalImEENS3_17basic_string_viewIT_NS3_11char_traitsIS7_EEEENS0_4spanIT0_EE:
  448|   205k|{
  449|   205k|    if (input.empty()) {
  ------------------
  |  Branch (449:9): [True: 0, False: 205k]
  ------------------
  450|      0|        return 0;
  451|      0|    }
  452|       |
  453|   205k|    if constexpr (get_encoding<SourceCharT>() == get_encoding<DestCharT>()) {
  ------------------
  |  Branch (453:19): [Folded - Ignored]
  ------------------
  454|   205k|        SCN_EXPECT(output.size() >= input.size());
  ------------------
  |  |  242|   205k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   205k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|        std::memcpy(output.data(), input.data(),
  456|   205k|                    input.size() * sizeof(SourceCharT));
  457|   205k|        return input.size();
  458|   205k|    }
  459|       |
  460|      0|    const auto result = [&]() {
  461|      0|        constexpr auto src_enc = get_encoding<SourceCharT>();
  462|      0|        constexpr auto dest_enc = get_encoding<DestCharT>();
  463|       |
  464|      0|        if constexpr (src_enc == encoding::utf8) {
  465|      0|            if constexpr (dest_enc == encoding::utf16) {
  466|      0|                return simdutf::convert_utf8_to_utf16_with_errors(
  467|      0|                    input.data(), input.size(),
  468|      0|                    reinterpret_cast<char16_t*>(output.data()));
  469|      0|            }
  470|      0|            else {
  471|      0|                return simdutf::convert_utf8_to_utf32_with_errors(
  472|      0|                    input.data(), input.size(),
  473|      0|                    reinterpret_cast<char32_t*>(output.data()));
  474|      0|            }
  475|      0|        }
  476|      0|        else if constexpr (src_enc == encoding::utf16) {
  477|      0|            if constexpr (dest_enc == encoding::utf8) {
  478|      0|                return simdutf::convert_utf16_to_utf8_with_errors(
  479|      0|                    reinterpret_cast<const char16_t*>(input.data()),
  480|      0|                    input.size(), output.data());
  481|      0|            }
  482|      0|            else {
  483|      0|                return simdutf::convert_utf16_to_utf32_with_errors(
  484|      0|                    reinterpret_cast<const char16_t*>(input.data()),
  485|      0|                    input.size(), reinterpret_cast<char32_t*>(output.data()));
  486|      0|            }
  487|      0|        }
  488|      0|        else if constexpr (src_enc == encoding::utf32) {
  489|      0|            if constexpr (dest_enc == encoding::utf8) {
  490|      0|                return simdutf::convert_utf32_to_utf8_with_errors(
  491|      0|                    reinterpret_cast<const char32_t*>(input.data()),
  492|      0|                    input.size(), output.data());
  493|      0|            }
  494|      0|            else {
  495|      0|                return simdutf::convert_utf32_to_utf16_with_errors(
  496|      0|                    reinterpret_cast<const char32_t*>(input.data()),
  497|      0|                    input.size(), reinterpret_cast<char16_t*>(output.data()));
  498|      0|            }
  499|      0|        }
  500|      0|    }();
  501|       |
  502|      0|    if (SCN_UNLIKELY(result.error != simdutf::SUCCESS)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  503|      0|        return std::nullopt;
  504|      0|    }
  505|      0|    SCN_ENSURE(result.count <= output.size());
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  506|      0|    return result.count;
  507|      0|}
_ZN3scn2v24impl28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
  115|  21.7k|{
  116|  21.7k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  242|  21.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  21.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  117|       |
  118|      0|    const auto len = code_point_length_by_starting_code_unit(input[0]);
  119|  21.7k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|  21.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 21.7k]
  |  |  ------------------
  ------------------
  120|      0|        return detail::invalid_code_point;
  121|      0|    }
  122|       |
  123|  21.7k|    constexpr auto enc = get_encoding<CharT>();
  124|  21.7k|    char32_t output{};
  125|  21.7k|    size_t ret{};
  126|  21.7k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (126:19): [Folded - Ignored]
  ------------------
  127|  21.7k|#ifndef NDEBUG
  128|  21.7k|        if (validate_unicode(input)) {
  129|  21.7k|            auto len =
  130|  21.7k|                simdutf::utf32_length_from_utf8(input.data(), input.size());
  131|  21.7k|            SCN_EXPECT(len == 1);
  132|  21.7k|        }
  133|  21.7k|#endif
  134|  21.7k|        ret = simdutf::convert_utf8_to_utf32(input.data(), len, &output);
  135|  21.7k|    }
  136|  21.7k|    else if constexpr (enc == encoding::utf16) {
  ------------------
  |  Branch (136:24): [Folded - Ignored]
  ------------------
  137|  21.7k|#ifndef NDEBUG
  138|  21.7k|        if (validate_unicode(input)) {
  139|  21.7k|            auto len = simdutf::utf32_length_from_utf16(
  140|  21.7k|                reinterpret_cast<const char16_t*>(input.data()), input.size());
  141|  21.7k|            SCN_EXPECT(len == 1);
  142|  21.7k|        }
  143|  21.7k|#endif
  144|  21.7k|        ret = simdutf::convert_utf16_to_utf32(
  145|  21.7k|            reinterpret_cast<const char16_t*>(input.data()), len, &output);
  146|  21.7k|    }
  147|  21.7k|    else if constexpr (enc == encoding::utf32) {
  ------------------
  |  Branch (147:24): [Folded - Ignored]
  ------------------
  148|  21.7k|        output = static_cast<char32_t>(input[0]);
  149|  21.7k|        ret = output < detail::invalid_code_point;
  150|  21.7k|    }
  151|       |
  152|  21.7k|    if (SCN_UNLIKELY(ret != 1)) {
  ------------------
  |  |  153|  21.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.47k, False: 20.3k]
  |  |  ------------------
  ------------------
  153|  1.47k|        return detail::invalid_code_point;
  154|  1.47k|    }
  155|  20.3k|    return static_cast<char32_t>(output);
  156|  21.7k|}
_ZN3scn2v24impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   88|  17.3k|{
   89|  17.3k|    if (input.empty()) {
  ------------------
  |  Branch (89:9): [True: 536, False: 16.7k]
  ------------------
   90|    536|        return true;
   91|    536|    }
   92|       |
   93|  16.7k|    constexpr auto enc = get_encoding<CharT>();
   94|  16.7k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (94:19): [Folded - Ignored]
  ------------------
   95|  16.7k|        return simdutf::validate_utf8(input.data(), input.size());
   96|  16.7k|    }
   97|  16.7k|    else if constexpr (enc == encoding::utf16) {
  ------------------
  |  Branch (97:24): [Folded - Ignored]
  ------------------
   98|  16.7k|        return simdutf::validate_utf16(
   99|  16.7k|            reinterpret_cast<const char16_t*>(input.data()), input.size());
  100|  16.7k|    }
  101|  16.7k|    else if constexpr (enc == encoding::utf32) {
  ------------------
  |  Branch (101:24): [Folded - Ignored]
  ------------------
  102|  16.7k|        return simdutf::validate_utf32(
  103|  16.7k|            reinterpret_cast<const char32_t*>(input.data()), input.size());
  104|  16.7k|    }
  105|  16.7k|}
_ZN3scn2v24impl25transcode_valid_to_stringIwcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
  571|  2.49k|{
  572|  2.49k|    SCN_EXPECT(validate_unicode(source));
  ------------------
  |  |  242|  2.49k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.49k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  573|       |
  574|      0|    auto transcoded_length =
  575|  2.49k|        count_valid_transcoded_code_units<DestCharT>(source);
  576|  2.49k|    dest.resize(transcoded_length);
  577|       |
  578|  2.49k|    const auto n = transcode_valid(source, span{dest});
  579|  2.49k|    SCN_ENSURE(n == dest.size());
  ------------------
  |  |  243|  2.49k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.49k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  580|  2.49k|}
_ZN3scn2v24impl33count_valid_transcoded_code_unitsIcwEEmNSt3__117basic_string_viewIT0_NS3_11char_traitsIS5_EEEE:
  367|  4.84k|{
  368|  4.84k|    if (input.empty()) {
  ------------------
  |  Branch (368:9): [True: 134, False: 4.71k]
  ------------------
  369|    134|        return 0;
  370|    134|    }
  371|       |
  372|  4.71k|    SCN_EXPECT(validate_unicode(input));
  ------------------
  |  |  242|  4.71k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.71k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  373|       |
  374|      0|    constexpr auto src_enc = get_encoding<SourceCharT>();
  375|  4.71k|    constexpr auto dest_enc = get_encoding<DestCharT>();
  376|       |
  377|  4.71k|    if constexpr (src_enc == dest_enc) {
  ------------------
  |  Branch (377:19): [Folded - Ignored]
  ------------------
  378|  4.71k|        return input.size();
  379|  4.71k|    }
  380|       |
  381|  4.71k|    if constexpr (src_enc == encoding::utf8) {
  ------------------
  |  Branch (381:19): [Folded - Ignored]
  ------------------
  382|  4.71k|        if constexpr (dest_enc == encoding::utf16) {
  383|  4.71k|            return simdutf::utf16_length_from_utf8(input.data(), input.size());
  384|  4.71k|        }
  385|  4.71k|        else {
  386|  4.71k|            return simdutf::utf32_length_from_utf8(input.data(), input.size());
  387|  4.71k|        }
  388|  4.71k|    }
  389|  4.71k|    else if constexpr (src_enc == encoding::utf16) {
  ------------------
  |  Branch (389:24): [Folded - Ignored]
  ------------------
  390|  4.71k|        if constexpr (dest_enc == encoding::utf8) {
  391|  4.71k|            return simdutf::utf8_length_from_utf16(
  392|  4.71k|                reinterpret_cast<const char16_t*>(input.data()), input.size());
  393|  4.71k|        }
  394|  4.71k|        else {
  395|  4.71k|            return simdutf::utf32_length_from_utf16(
  396|  4.71k|                reinterpret_cast<const char16_t*>(input.data()), input.size());
  397|  4.71k|        }
  398|  4.71k|    }
  399|  4.71k|    else if constexpr (src_enc == encoding::utf32) {
  ------------------
  |  Branch (399:24): [Folded - Ignored]
  ------------------
  400|  4.71k|        if constexpr (dest_enc == encoding::utf8) {
  ------------------
  |  Branch (400:23): [Folded - Ignored]
  ------------------
  401|  4.71k|            return simdutf::utf8_length_from_utf32(
  402|  4.71k|                reinterpret_cast<const char32_t*>(input.data()), input.size());
  403|  4.71k|        }
  404|  4.71k|        else {
  405|  4.71k|            return simdutf::utf16_length_from_utf32(
  406|  4.71k|                reinterpret_cast<const char32_t*>(input.data()), input.size());
  407|  4.71k|        }
  408|  4.71k|    }
  409|  4.71k|}
_ZN3scn2v24impl15transcode_validIwcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS0_4spanIT0_EE:
  512|  2.49k|{
  513|  2.49k|    if (input.empty()) {
  ------------------
  |  Branch (513:9): [True: 134, False: 2.35k]
  ------------------
  514|    134|        return 0;
  515|    134|    }
  516|       |
  517|  2.35k|    SCN_EXPECT(validate_unicode(input));
  ------------------
  |  |  242|  2.35k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.35k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  518|  2.35k|    SCN_EXPECT(count_valid_transcoded_code_units<DestCharT>(input) <=
  ------------------
  |  |  242|  2.35k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.35k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  519|      0|               output.size());
  520|       |
  521|      0|    constexpr auto src_enc = get_encoding<SourceCharT>();
  522|  2.35k|    constexpr auto dest_enc = get_encoding<DestCharT>();
  523|       |
  524|  2.35k|    if constexpr (src_enc == dest_enc) {
  ------------------
  |  Branch (524:19): [Folded - Ignored]
  ------------------
  525|  2.35k|        std::memcpy(output.data(), input.data(),
  526|  2.35k|                    input.size() * sizeof(SourceCharT));
  527|  2.35k|        return input.size();
  528|  2.35k|    }
  529|       |
  530|  2.35k|    if constexpr (src_enc == encoding::utf8) {
  ------------------
  |  Branch (530:19): [Folded - Ignored]
  ------------------
  531|  2.35k|        if constexpr (dest_enc == encoding::utf16) {
  532|  2.35k|            return simdutf::convert_valid_utf8_to_utf16(
  533|  2.35k|                input.data(), input.size(),
  534|  2.35k|                reinterpret_cast<char16_t*>(output.data()));
  535|  2.35k|        }
  536|  2.35k|        else {
  537|  2.35k|            return simdutf::convert_valid_utf8_to_utf32(
  538|  2.35k|                input.data(), input.size(),
  539|  2.35k|                reinterpret_cast<char32_t*>(output.data()));
  540|  2.35k|        }
  541|  2.35k|    }
  542|  2.35k|    else if constexpr (src_enc == encoding::utf16) {
  ------------------
  |  Branch (542:24): [Folded - Ignored]
  ------------------
  543|  2.35k|        if constexpr (dest_enc == encoding::utf8) {
  544|  2.35k|            return simdutf::convert_valid_utf16_to_utf8(
  545|  2.35k|                reinterpret_cast<const char16_t*>(input.data()), input.size(),
  546|  2.35k|                output.data());
  547|  2.35k|        }
  548|  2.35k|        else {
  549|  2.35k|            return simdutf::convert_valid_utf16_to_utf32(
  550|  2.35k|                reinterpret_cast<const char16_t*>(input.data()), input.size(),
  551|  2.35k|                reinterpret_cast<char32_t*>(output.data()));
  552|  2.35k|        }
  553|  2.35k|    }
  554|  2.35k|    else if constexpr (src_enc == encoding::utf32) {
  ------------------
  |  Branch (554:24): [Folded - Ignored]
  ------------------
  555|  2.35k|        if constexpr (dest_enc == encoding::utf8) {
  ------------------
  |  Branch (555:23): [Folded - Ignored]
  ------------------
  556|  2.35k|            return simdutf::convert_valid_utf32_to_utf8(
  557|  2.35k|                reinterpret_cast<const char32_t*>(input.data()), input.size(),
  558|  2.35k|                output.data());
  559|  2.35k|        }
  560|  2.35k|        else {
  561|  2.35k|            return simdutf::convert_valid_utf32_to_utf16(
  562|  2.35k|                reinterpret_cast<const char32_t*>(input.data()), input.size(),
  563|  2.35k|                reinterpret_cast<char16_t*>(output.data()));
  564|  2.35k|        }
  565|  2.35k|    }
  566|  2.35k|}
_ZN3scn2v24impl19get_next_code_pointIwEENS1_21iterator_value_resultIDTclL_ZN4nano6ranges16function_objects5beginEEclsr3stdE7declvalIRNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEEEEDiEESC_:
  262|  3.74M|{
  263|  3.74M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  242|  3.74M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.74M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  264|       |
  265|      0|    const auto len = code_point_length_by_starting_code_unit(input[0]);
  266|  3.74M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|  3.74M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.74M]
  |  |  ------------------
  ------------------
  267|      0|        return {get_start_of_next_code_point(input),
  268|      0|                detail::invalid_code_point};
  269|      0|    }
  270|  3.74M|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  153|  3.74M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.74M]
  |  |  ------------------
  ------------------
  271|      0|        return {input.end(), detail::invalid_code_point};
  272|      0|    }
  273|       |
  274|  3.74M|    constexpr auto enc = get_encoding<CharT>();
  275|  3.74M|    std::size_t result{1};
  276|  3.74M|    char32_t output{};
  277|  3.74M|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (277:19): [Folded - Ignored]
  ------------------
  278|  3.74M|        result = simdutf::convert_utf8_to_utf32(
  279|  3.74M|            reinterpret_cast<const char*>(input.data()), len, &output);
  280|  3.74M|    }
  281|  3.74M|    else if constexpr (enc == encoding::utf16) {
  ------------------
  |  Branch (281:24): [Folded - Ignored]
  ------------------
  282|  3.74M|        result = simdutf::convert_utf16_to_utf32(
  283|  3.74M|            reinterpret_cast<const char16_t*>(input.data()), len, &output);
  284|  3.74M|    }
  285|  3.74M|    else if constexpr (enc == encoding::utf32) {
  ------------------
  |  Branch (285:24): [Folded - Ignored]
  ------------------
  286|  3.74M|        SCN_EXPECT(len == 1);
  ------------------
  |  |  242|  3.74M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.74M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  287|      0|        output = static_cast<char32_t>(input[0]);
  288|  3.74M|    }
  289|       |
  290|  3.74M|    if (SCN_UNLIKELY(result != 1)) {
  ------------------
  |  |  153|  3.74M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.74M]
  |  |  ------------------
  ------------------
  291|      0|        return {get_start_of_next_code_point(input.substr(1)),
  292|      0|                detail::invalid_code_point};
  293|      0|    }
  294|       |
  295|  3.74M|    return {input.begin() + len, output};
  296|  3.74M|}

_ZN3scn2v24impl11is_cp_spaceEDi:
   28|  4.41M|{
   29|       |    // Pattern_White_Space property
   30|  4.41M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (30:13): [True: 4.08M, False: 330k]
  |  Branch (30:27): [True: 274k, False: 3.80M]
  ------------------
   31|  4.41M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (31:12): [True: 13.7k, False: 4.12M]
  ------------------
   32|  4.41M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (32:12): [True: 30.0k, False: 4.09M]
  ------------------
   33|  4.41M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (33:12): [True: 1.60k, False: 4.09M]
  ------------------
   34|  4.41M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (34:12): [True: 4.86k, False: 4.08M]
  ------------------
   35|  4.41M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (35:12): [True: 1.87k, False: 4.08M]
  ------------------
   36|  4.41M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (36:12): [True: 104, False: 4.08M]
  ------------------
   37|  4.41M|}
_ZN3scn2v24impl19is_first_char_spaceIcEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
   49|   176k|{
   50|       |    // TODO: optimize
   51|   176k|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  242|   176k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   176k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   52|      0|    auto res = get_next_code_point(str);
   53|   176k|    return {res.iterator, res.value, is_cp_space(res.value)};
   54|   176k|}
_ZN3scn2v24impl19is_first_char_spaceIwEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
   49|  3.74M|{
   50|       |    // TODO: optimize
   51|  3.74M|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  242|  3.74M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.74M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   52|      0|    auto res = get_next_code_point(str);
   53|  3.74M|    return {res.iterator, res.value, is_cp_space(res.value)};
   54|  3.74M|}

_ZN3scn2v24impl13is_ascii_charEc:
   68|  1.16M|{
   69|  1.16M|    return static_cast<unsigned char>(ch) <= 127;
   70|  1.16M|}
_ZN3scn2v24impl13is_ascii_charEDi:
   82|  1.26M|{
   83|  1.26M|    return cp <= 127;
   84|  1.26M|}
_ZN3scn2v24impl13is_ascii_charEw:
   73|  6.73k|{
   74|  6.73k|#if WCHAR_MIN < 0
   75|  6.73k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (75:12): [True: 6.73k, False: 0]
  |  Branch (75:23): [True: 6.19k, False: 546]
  ------------------
   76|       |#else
   77|       |    return ch <= 127;
   78|       |#endif
   79|  6.73k|}
_ZN3scn2v24impl14is_ascii_spaceEc:
   57|   303k|{
   58|   303k|    return is_ascii_space_lookup[static_cast<size_t>(
   59|   303k|        static_cast<unsigned char>(ch))];
   60|   303k|}

_ZN3scn2v24impl16has_byte_greaterEmh:
   91|   187k|{
   92|   187k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
   93|   187k|}

_ZN3scn2v24impl29basic_contiguous_scan_contextIcEC2IRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
   56|  72.7k|    {
   57|  72.7k|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE5beginEv:
   60|   453k|    {
   61|   453k|        return m_current;
   62|   453k|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE3endEv:
   65|   559k|    {
   66|   559k|        return m_range.end();
   67|   559k|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
   80|   180k|    {
   81|   180k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  242|   180k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   180k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   82|   180k|        if constexpr (detail::is_comparable_with_nullptr<iterator>::value) {
  ------------------
  |  Branch (82:23): [Folded - Ignored]
  ------------------
   83|   180k|            if (it == nullptr) {
  ------------------
  |  Branch (83:17): [True: 0, False: 180k]
  ------------------
   84|      0|                it = end();
   85|      0|            }
   86|   180k|        }
   87|   180k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|   180k|    static_cast<    \
  |  |  247|   180k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   88|   180k|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE5rangeEv:
   70|   199k|    {
   71|   199k|        return ranges::subrange{begin(), end()};
   72|   199k|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIwEC2IRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
   56|   124k|    {
   57|   124k|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE5beginEv:
   60|  4.06M|    {
   61|  4.06M|        return m_current;
   62|  4.06M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE3endEv:
   65|  7.68M|    {
   66|  7.68M|        return m_range.end();
   67|  7.68M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
   80|  3.75M|    {
   81|  3.75M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  242|  3.75M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.75M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   82|  3.75M|        if constexpr (detail::is_comparable_with_nullptr<iterator>::value) {
  ------------------
  |  Branch (82:23): [Folded - Ignored]
  ------------------
   83|  3.75M|            if (it == nullptr) {
  ------------------
  |  Branch (83:17): [True: 0, False: 3.75M]
  ------------------
   84|      0|                it = end();
   85|      0|            }
   86|  3.75M|        }
   87|  3.75M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|  3.75M|    static_cast<    \
  |  |  247|  3.75M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   88|  3.75M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE5rangeEv:
   70|   185k|    {
   71|   185k|        return ranges::subrange{begin(), end()};
   72|   185k|    }

_ZNK3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EclES9_SF_SH_:
  204|  1.33k|    {
  205|  1.33k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  1.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  1.33k|    }
_ZNK3scn2v24impl12function_refIFbcES3_EclEc:
  204|  18.3k|    {
  205|  18.3k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  18.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  18.3k|    }
_ZN3scn2v24impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|  1.45k|    {
  196|  1.45k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  185|  3.19k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  3.19k|              cvref<T> obj = *get<T>(fn);
  187|  3.19k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  3.19k|                  obj(static_cast<decltype(args)>(args)...);
  189|  3.19k|              }
  190|  3.19k|              else {
  191|  3.19k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  3.19k|              }
  193|  3.19k|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  125|  3.19k|    {
  126|  3.19k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  3.19k|            return static_cast<T*>(s.m_cp);
  128|  3.19k|        }
  129|  3.19k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  3.19k|            return static_cast<T*>(s.m_p);
  131|  3.19k|        }
  132|  3.19k|        else {
  133|  3.19k|            return reinterpret_cast<T*>(s.m_fp);
  134|  3.19k|        }
  135|  3.19k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  103|  1.45k|        {
  104|  1.45k|        }
_ZN3scn2v24impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_bEUlcE0_SO_LPv0EEESN_:
  195|     38|    {
  196|     38|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_bEUlcE0_SO_LPv0EEESN_ENKUlNS1_12fnref_detail4base7storageEcE_clESS_c:
  185|     38|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|     38|              cvref<T> obj = *get<T>(fn);
  187|     38|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|     38|                  obj(static_cast<decltype(args)>(args)...);
  189|     38|              }
  190|     38|              else {
  191|     38|                  return obj(static_cast<decltype(args)>(args)...);
  192|     38|              }
  193|     38|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_bEUlcE0_EEDaNS3_7storageE:
  125|     38|    {
  126|     38|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|     38|            return static_cast<T*>(s.m_cp);
  128|     38|        }
  129|     38|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|     38|            return static_cast<T*>(s.m_p);
  131|     38|        }
  132|     38|        else {
  133|     38|            return reinterpret_cast<T*>(s.m_fp);
  134|     38|        }
  135|     38|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_bEUlcE0_LPv0EEEPSJ_:
  103|     38|        {
  104|     38|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_:
  195|  1.12k|    {
  196|  1.12k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES13_S9_SF_SH_:
  185|  1.12k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  1.12k|              cvref<T> obj = *get<T>(fn);
  187|  1.12k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  1.12k|                  obj(static_cast<decltype(args)>(args)...);
  189|  1.12k|              }
  190|  1.12k|              else {
  191|  1.12k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  1.12k|              }
  193|  1.12k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|  1.12k|    {
  126|  1.12k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  1.12k|            return static_cast<T*>(s.m_cp);
  128|  1.12k|        }
  129|  1.12k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  1.12k|            return static_cast<T*>(s.m_p);
  131|  1.12k|        }
  132|  1.12k|        else {
  133|  1.12k|            return reinterpret_cast<T*>(s.m_fp);
  134|  1.12k|        }
  135|  1.12k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  103|  1.12k|        {
  104|  1.12k|        }
_ZNK3scn2v24impl12function_refIFbDiES3_EclEDi:
  204|  2.79M|    {
  205|  2.79M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  2.79M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  2.79M|    }
_ZN3scn2v24impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|   150k|    {
  196|   150k|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  185|  1.13M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  1.13M|              cvref<T> obj = *get<T>(fn);
  187|  1.13M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  1.13M|                  obj(static_cast<decltype(args)>(args)...);
  189|  1.13M|              }
  190|  1.13M|              else {
  191|  1.13M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  1.13M|              }
  193|  1.13M|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  125|  1.13M|    {
  126|  1.13M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  1.13M|            return static_cast<T*>(s.m_cp);
  128|  1.13M|        }
  129|  1.13M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  1.13M|            return static_cast<T*>(s.m_p);
  131|  1.13M|        }
  132|  1.13M|        else {
  133|  1.13M|            return reinterpret_cast<T*>(s.m_fp);
  134|  1.13M|        }
  135|  1.13M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  103|   150k|        {
  104|   150k|        }
_ZNK3scn2v24impl12function_refIFvDiES3_EclEDi:
  204|  6.66k|    {
  205|  6.66k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  6.66k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  6.66k|    }
_ZN3scn2v24impl12function_refIFvDiES3_EC2IZNS1_26calculate_valid_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEENS1_20text_width_algorithmEEUlDiE_SE_LPv0EEEOS9_:
  195|  6.66k|    {
  196|  6.66k|    }
_ZZN3scn2v24impl12function_refIFvDiES3_EC1IZNS1_26calculate_valid_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEENS1_20text_width_algorithmEEUlDiE_SE_LPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESJ_Di:
  185|  6.66k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  6.66k|              cvref<T> obj = *get<T>(fn);
  187|  6.66k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  6.66k|                  obj(static_cast<decltype(args)>(args)...);
  189|  6.66k|              }
  190|  6.66k|              else {
  191|  6.66k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  6.66k|              }
  193|  6.66k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_26calculate_valid_text_widthIcEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEENS1_20text_width_algorithmEEUlDiE_EEDaNS3_7storageE:
  125|  6.66k|    {
  126|  6.66k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  6.66k|            return static_cast<T*>(s.m_cp);
  128|  6.66k|        }
  129|  6.66k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  6.66k|            return static_cast<T*>(s.m_p);
  131|  6.66k|        }
  132|  6.66k|        else {
  133|  6.66k|            return reinterpret_cast<T*>(s.m_fp);
  134|  6.66k|        }
  135|  6.66k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_26calculate_valid_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEENS1_20text_width_algorithmEEUlDiE_LPv0EEEPS9_:
  103|  6.66k|        {
  104|  6.66k|        }
_ZN3scn2v24impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_LNS8_13subrange_kindE1EEEE8sentinelILb1EEELSH_0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESP_iEUlcE_ST_LPv0EEEOSP_:
  195|    894|    {
  196|    894|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_LNS8_13subrange_kindE1EEEE8sentinelILb1EEELSH_0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESP_iEUlcE_ST_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEcE_clESY_c:
  185|    894|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|    894|              cvref<T> obj = *get<T>(fn);
  187|    894|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|    894|                  obj(static_cast<decltype(args)>(args)...);
  189|    894|              }
  190|    894|              else {
  191|    894|                  return obj(static_cast<decltype(args)>(args)...);
  192|    894|              }
  193|    894|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EENS1_15take_width_viewINS9_ISD_SD_LNS7_13subrange_kindE1EEEE8sentinelILb1EEELSG_0EEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESO_iEUlcE_EEDaNS3_7storageE:
  125|    894|    {
  126|    894|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|    894|            return static_cast<T*>(s.m_cp);
  128|    894|        }
  129|    894|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|    894|            return static_cast<T*>(s.m_p);
  131|    894|        }
  132|    894|        else {
  133|    894|            return reinterpret_cast<T*>(s.m_fp);
  134|    894|        }
  135|    894|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_LNS8_13subrange_kindE1EEEE8sentinelILb1EEELSH_0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESP_iEUlcE_LPv0EEEPSP_:
  103|    894|        {
  104|    894|        }
_ZNK3scn2v24impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIS7_S7_LNSF_13subrange_kindE1EEEEENS0_6detail10locale_refEESN_EclESC_SK_SM_:
  204|    284|    {
  205|    284|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|    284|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|    284|    }
_ZN3scn2v24impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_LNSA_13subrange_kindE1EEEE8sentinelILb1EEELSJ_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_bEUlcE0_SW_LPv0EEESV_:
  195|      2|    {
  196|      2|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_LNSA_13subrange_kindE1EEEE8sentinelILb1EEELSJ_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_bEUlcE0_SW_LPv0EEESV_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  185|      2|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|      2|              cvref<T> obj = *get<T>(fn);
  187|      2|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|      2|                  obj(static_cast<decltype(args)>(args)...);
  189|      2|              }
  190|      2|              else {
  191|      2|                  return obj(static_cast<decltype(args)>(args)...);
  192|      2|              }
  193|      2|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_LNS9_13subrange_kindE1EEEE8sentinelILb1EEELSI_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_bEUlcE0_EEDaNS3_7storageE:
  125|      2|    {
  126|      2|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|      2|            return static_cast<T*>(s.m_cp);
  128|      2|        }
  129|      2|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|      2|            return static_cast<T*>(s.m_p);
  131|      2|        }
  132|      2|        else {
  133|      2|            return reinterpret_cast<T*>(s.m_fp);
  134|      2|        }
  135|      2|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_LNSA_13subrange_kindE1EEEE8sentinelILb1EEELSJ_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_bEUlcE0_LPv0EEEPSR_:
  103|      2|        {
  104|      2|        }
_ZN3scn2v24impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_LNSA_13subrange_kindE1EEEE8sentinelILb1EEELSJ_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_bEUlcE0_SW_LPv0EEESV_:
  195|    282|    {
  196|    282|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_LNSA_13subrange_kindE1EEEE8sentinelILb1EEELSJ_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_bEUlcE0_SW_LPv0EEESV_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  185|    282|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|    282|              cvref<T> obj = *get<T>(fn);
  187|    282|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|    282|                  obj(static_cast<decltype(args)>(args)...);
  189|    282|              }
  190|    282|              else {
  191|    282|                  return obj(static_cast<decltype(args)>(args)...);
  192|    282|              }
  193|    282|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_LNS9_13subrange_kindE1EEEE8sentinelILb1EEELSI_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_bEUlcE0_EEDaNS3_7storageE:
  125|    282|    {
  126|    282|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|    282|            return static_cast<T*>(s.m_cp);
  128|    282|        }
  129|    282|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|    282|            return static_cast<T*>(s.m_p);
  131|    282|        }
  132|    282|        else {
  133|    282|            return reinterpret_cast<T*>(s.m_fp);
  134|    282|        }
  135|    282|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_LNSA_13subrange_kindE1EEEE8sentinelILb1EEELSJ_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_bEUlcE0_LPv0EEEPSR_:
  103|    282|        {
  104|    282|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIS7_S7_LNSF_13subrange_kindE1EEEEENS0_6detail10locale_refEESN_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISK_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISU_EEE4typeEEEOSU_RKNSL_12format_specsERT0_SM_EUlSC_DpOT_E_S17_LPv0EEESY_:
  195|      6|    {
  196|      6|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIS7_S7_LNSF_13subrange_kindE1EEEEENS0_6detail10locale_refEESN_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISK_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISU_EEE4typeEEEOSU_RKNSL_12format_specsERT0_SM_EUlSC_DpOT_E_S17_LPv0EEESY_ENKUlNS1_12fnref_detail4base7storageESC_SK_SM_E_clES1B_SC_SK_SM_:
  185|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|      6|              cvref<T> obj = *get<T>(fn);
  187|      6|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|      6|                  obj(static_cast<decltype(args)>(args)...);
  189|      6|              }
  190|      6|              else {
  191|      6|                  return obj(static_cast<decltype(args)>(args)...);
  192|      6|              }
  193|      6|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|      6|    {
  126|      6|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|      6|            return static_cast<T*>(s.m_cp);
  128|      6|        }
  129|      6|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|      6|            return static_cast<T*>(s.m_p);
  131|      6|        }
  132|      6|        else {
  133|      6|            return reinterpret_cast<T*>(s.m_fp);
  134|      6|        }
  135|      6|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSF_LNSB_13subrange_kindE1EEEEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSL_:
  103|      6|        {
  104|      6|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIS7_S7_LNSF_13subrange_kindE1EEEEENS0_6detail10locale_refEESN_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISK_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISU_EEE4typeEEEOSU_RKNSL_12format_specsERT0_SM_EUlSC_DpOT_E0_S17_LPv0EEESY_:
  195|    278|    {
  196|    278|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIS7_S7_LNSF_13subrange_kindE1EEEEENS0_6detail10locale_refEESN_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISK_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISU_EEE4typeEEEOSU_RKNSL_12format_specsERT0_SM_EUlSC_DpOT_E0_S17_LPv0EEESY_ENKUlNS1_12fnref_detail4base7storageESC_SK_SM_E_clES1B_SC_SK_SM_:
  185|    278|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|    278|              cvref<T> obj = *get<T>(fn);
  187|    278|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|    278|                  obj(static_cast<decltype(args)>(args)...);
  189|    278|              }
  190|    278|              else {
  191|    278|                  return obj(static_cast<decltype(args)>(args)...);
  192|    278|              }
  193|    278|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  125|    278|    {
  126|    278|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|    278|            return static_cast<T*>(s.m_cp);
  128|    278|        }
  129|    278|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|    278|            return static_cast<T*>(s.m_p);
  131|    278|        }
  132|    278|        else {
  133|    278|            return reinterpret_cast<T*>(s.m_fp);
  134|    278|        }
  135|    278|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSF_LNSB_13subrange_kindE1EEEEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSL_:
  103|    278|        {
  104|    278|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_:
  195|     24|    {
  196|     24|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|     24|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|     24|              cvref<T> obj = *get<T>(fn);
  187|     24|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|     24|                  obj(static_cast<decltype(args)>(args)...);
  189|     24|              }
  190|     24|              else {
  191|     24|                  return obj(static_cast<decltype(args)>(args)...);
  192|     24|              }
  193|     24|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|     24|    {
  126|     24|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|     24|            return static_cast<T*>(s.m_cp);
  128|     24|        }
  129|     24|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|     24|            return static_cast<T*>(s.m_p);
  131|     24|        }
  132|     24|        else {
  133|     24|            return reinterpret_cast<T*>(s.m_fp);
  134|     24|        }
  135|     24|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSK_:
  103|     24|        {
  104|     24|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_:
  195|    190|    {
  196|    190|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|    190|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|    190|              cvref<T> obj = *get<T>(fn);
  187|    190|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|    190|                  obj(static_cast<decltype(args)>(args)...);
  189|    190|              }
  190|    190|              else {
  191|    190|                  return obj(static_cast<decltype(args)>(args)...);
  192|    190|              }
  193|    190|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  125|    190|    {
  126|    190|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|    190|            return static_cast<T*>(s.m_cp);
  128|    190|        }
  129|    190|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|    190|            return static_cast<T*>(s.m_p);
  131|    190|        }
  132|    190|        else {
  133|    190|            return reinterpret_cast<T*>(s.m_fp);
  134|    190|        }
  135|    190|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSK_:
  103|    190|        {
  104|    190|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEOSJ_EUlDiE_SN_LPv0EEESM_:
  195|    822|    {
  196|    822|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEOSJ_EUlDiE_SN_LPv0EEESM_ENKUlNS1_12fnref_detail4base7storageEDiE_clESR_Di:
  185|  21.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  21.1k|              cvref<T> obj = *get<T>(fn);
  187|  21.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  21.1k|                  obj(static_cast<decltype(args)>(args)...);
  189|  21.1k|              }
  190|  21.1k|              else {
  191|  21.1k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  21.1k|              }
  193|  21.1k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSC_LNS8_13subrange_kindE1EEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_EEDaNS3_7storageE:
  125|  21.1k|    {
  126|  21.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  21.1k|            return static_cast<T*>(s.m_cp);
  128|  21.1k|        }
  129|  21.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  21.1k|            return static_cast<T*>(s.m_p);
  131|  21.1k|        }
  132|  21.1k|        else {
  133|  21.1k|            return reinterpret_cast<T*>(s.m_fp);
  134|  21.1k|        }
  135|  21.1k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEOSJ_EUlDiE_LPv0EEEPSJ_:
  103|    822|        {
  104|    822|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSF_LNSB_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_NS7_12specs_helperEEUlDiE_ST_LPv0EEESQ_:
  195|    420|    {
  196|    420|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSF_LNSB_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_NS7_12specs_helperEEUlDiE_ST_LPv0EEESQ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  185|  22.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  22.0k|              cvref<T> obj = *get<T>(fn);
  187|  22.0k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  22.0k|                  obj(static_cast<decltype(args)>(args)...);
  189|  22.0k|              }
  190|  22.0k|              else {
  191|  22.0k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  22.0k|              }
  193|  22.0k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  125|  22.0k|    {
  126|  22.0k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  22.0k|            return static_cast<T*>(s.m_cp);
  128|  22.0k|        }
  129|  22.0k|        else if constexpr (std::is_object_v<T>) {
  130|  22.0k|            return static_cast<T*>(s.m_p);
  131|  22.0k|        }
  132|  22.0k|        else {
  133|  22.0k|            return reinterpret_cast<T*>(s.m_fp);
  134|  22.0k|        }
  135|  22.0k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSF_LNSB_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_NS7_12specs_helperEEUlDiE_LPv0EEEPKSM_:
  108|    420|        {
  109|    420|        }
_ZN3scn2v24impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSF_LNSB_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_NS7_12specs_helperEEUlcE_ST_LPv0EEESQ_:
  195|    246|    {
  196|    246|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSF_LNSB_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_NS7_12specs_helperEEUlcE_ST_LPv0EEESQ_ENKUlNS1_12fnref_detail4base7storageEcE_clESY_c:
  185|  6.67k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  6.67k|              cvref<T> obj = *get<T>(fn);
  187|  6.67k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  6.67k|                  obj(static_cast<decltype(args)>(args)...);
  189|  6.67k|              }
  190|  6.67k|              else {
  191|  6.67k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  6.67k|              }
  193|  6.67k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  125|  6.67k|    {
  126|  6.67k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  6.67k|            return static_cast<T*>(s.m_cp);
  128|  6.67k|        }
  129|  6.67k|        else if constexpr (std::is_object_v<T>) {
  130|  6.67k|            return static_cast<T*>(s.m_p);
  131|  6.67k|        }
  132|  6.67k|        else {
  133|  6.67k|            return reinterpret_cast<T*>(s.m_fp);
  134|  6.67k|        }
  135|  6.67k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSF_LNSB_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_NS7_12specs_helperEEUlcE_LPv0EEEPKSM_:
  108|    246|        {
  109|    246|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_NS7_12specs_helperEEUlDiE_SR_LPv0EEESO_:
  195|  3.91k|    {
  196|  3.91k|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_NS7_12specs_helperEEUlDiE_SR_LPv0EEESO_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  185|   525k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   525k|              cvref<T> obj = *get<T>(fn);
  187|   525k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   525k|                  obj(static_cast<decltype(args)>(args)...);
  189|   525k|              }
  190|   525k|              else {
  191|   525k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   525k|              }
  193|   525k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  125|   525k|    {
  126|   525k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   525k|            return static_cast<T*>(s.m_cp);
  128|   525k|        }
  129|   525k|        else if constexpr (std::is_object_v<T>) {
  130|   525k|            return static_cast<T*>(s.m_p);
  131|   525k|        }
  132|   525k|        else {
  133|   525k|            return reinterpret_cast<T*>(s.m_fp);
  134|   525k|        }
  135|   525k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_NS7_12specs_helperEEUlDiE_LPv0EEEPKSK_:
  108|  3.91k|        {
  109|  3.91k|        }
_ZN3scn2v24impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_NS7_12specs_helperEEUlcE_SR_LPv0EEESO_:
  195|    372|    {
  196|    372|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_NS7_12specs_helperEEUlcE_SR_LPv0EEESO_ENKUlNS1_12fnref_detail4base7storageEcE_clESW_c:
  185|  7.21k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  7.21k|              cvref<T> obj = *get<T>(fn);
  187|  7.21k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  7.21k|                  obj(static_cast<decltype(args)>(args)...);
  189|  7.21k|              }
  190|  7.21k|              else {
  191|  7.21k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  7.21k|              }
  193|  7.21k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  125|  7.21k|    {
  126|  7.21k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  7.21k|            return static_cast<T*>(s.m_cp);
  128|  7.21k|        }
  129|  7.21k|        else if constexpr (std::is_object_v<T>) {
  130|  7.21k|            return static_cast<T*>(s.m_p);
  131|  7.21k|        }
  132|  7.21k|        else {
  133|  7.21k|            return reinterpret_cast<T*>(s.m_fp);
  134|  7.21k|        }
  135|  7.21k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_NS7_12specs_helperEEUlcE_LPv0EEEPKSK_:
  108|    372|        {
  109|    372|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_SM_LPv0EEESL_:
  195|  10.4k|    {
  196|  10.4k|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_SM_LPv0EEESL_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  185|  30.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  30.0k|              cvref<T> obj = *get<T>(fn);
  187|  30.0k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  30.0k|                  obj(static_cast<decltype(args)>(args)...);
  189|  30.0k|              }
  190|  30.0k|              else {
  191|  30.0k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  30.0k|              }
  193|  30.0k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_EUlDiE_EEDaNS3_7storageE:
  125|  30.0k|    {
  126|  30.0k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  30.0k|            return static_cast<T*>(s.m_cp);
  128|  30.0k|        }
  129|  30.0k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  30.0k|            return static_cast<T*>(s.m_p);
  131|  30.0k|        }
  132|  30.0k|        else {
  133|  30.0k|            return reinterpret_cast<T*>(s.m_fp);
  134|  30.0k|        }
  135|  30.0k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_LPv0EEEPSI_:
  103|  10.4k|        {
  104|  10.4k|        }
_ZNK3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EclES9_SF_SH_:
  204|  1.07k|    {
  205|  1.07k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  1.07k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  1.07k|    }
_ZNK3scn2v24impl12function_refIFbwES3_EclEw:
  204|  10.5k|    {
  205|  10.5k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  10.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  10.5k|    }
_ZN3scn2v24impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|  1.20k|    {
  196|  1.20k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  185|  2.83k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  2.83k|              cvref<T> obj = *get<T>(fn);
  187|  2.83k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  2.83k|                  obj(static_cast<decltype(args)>(args)...);
  189|  2.83k|              }
  190|  2.83k|              else {
  191|  2.83k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  2.83k|              }
  193|  2.83k|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  125|  2.83k|    {
  126|  2.83k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  2.83k|            return static_cast<T*>(s.m_cp);
  128|  2.83k|        }
  129|  2.83k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  2.83k|            return static_cast<T*>(s.m_p);
  131|  2.83k|        }
  132|  2.83k|        else {
  133|  2.83k|            return reinterpret_cast<T*>(s.m_fp);
  134|  2.83k|        }
  135|  2.83k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  103|  1.20k|        {
  104|  1.20k|        }
_ZN3scn2v24impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_bEUlwE0_SO_LPv0EEESN_:
  195|     36|    {
  196|     36|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_bEUlwE0_SO_LPv0EEESN_ENKUlNS1_12fnref_detail4base7storageEwE_clESS_w:
  185|     36|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|     36|              cvref<T> obj = *get<T>(fn);
  187|     36|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|     36|                  obj(static_cast<decltype(args)>(args)...);
  189|     36|              }
  190|     36|              else {
  191|     36|                  return obj(static_cast<decltype(args)>(args)...);
  192|     36|              }
  193|     36|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_bEUlwE0_EEDaNS3_7storageE:
  125|     36|    {
  126|     36|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|     36|            return static_cast<T*>(s.m_cp);
  128|     36|        }
  129|     36|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|     36|            return static_cast<T*>(s.m_p);
  131|     36|        }
  132|     36|        else {
  133|     36|            return reinterpret_cast<T*>(s.m_fp);
  134|     36|        }
  135|     36|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_bEUlwE0_LPv0EEEPSJ_:
  103|     36|        {
  104|     36|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_:
  195|    872|    {
  196|    872|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES13_S9_SF_SH_:
  185|    872|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|    872|              cvref<T> obj = *get<T>(fn);
  187|    872|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|    872|                  obj(static_cast<decltype(args)>(args)...);
  189|    872|              }
  190|    872|              else {
  191|    872|                  return obj(static_cast<decltype(args)>(args)...);
  192|    872|              }
  193|    872|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|    872|    {
  126|    872|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|    872|            return static_cast<T*>(s.m_cp);
  128|    872|        }
  129|    872|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|    872|            return static_cast<T*>(s.m_p);
  131|    872|        }
  132|    872|        else {
  133|    872|            return reinterpret_cast<T*>(s.m_fp);
  134|    872|        }
  135|    872|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  103|    872|        {
  104|    872|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceIRN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_EUlDiE_SL_LPv0EEESK_:
  195|  3.19k|    {
  196|  3.19k|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceIRN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_EUlDiE_SL_LPv0EEESK_ENKUlNS1_12fnref_detail4base7storageEDiE_clESP_Di:
  185|   180k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   180k|              cvref<T> obj = *get<T>(fn);
  187|   180k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   180k|                  obj(static_cast<decltype(args)>(args)...);
  189|   180k|              }
  190|   180k|              else {
  191|   180k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   180k|              }
  193|   180k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceIRN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_EUlDiE_EEDaNS3_7storageE:
  125|   180k|    {
  126|   180k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   180k|            return static_cast<T*>(s.m_cp);
  128|   180k|        }
  129|   180k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   180k|            return static_cast<T*>(s.m_p);
  131|   180k|        }
  132|   180k|        else {
  133|   180k|            return reinterpret_cast<T*>(s.m_fp);
  134|   180k|        }
  135|   180k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceIRN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_EUlDiE_LPv0EEEPSH_:
  103|  3.19k|        {
  104|  3.19k|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceIN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_EUlDiE_SK_LPv0EEESJ_:
  195|   134k|    {
  196|   134k|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceIN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_EUlDiE_SK_LPv0EEESJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  185|   157k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   157k|              cvref<T> obj = *get<T>(fn);
  187|   157k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   157k|                  obj(static_cast<decltype(args)>(args)...);
  189|   157k|              }
  190|   157k|              else {
  191|   157k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   157k|              }
  193|   157k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEOSF_EUlDiE_EEDaNS3_7storageE:
  125|   157k|    {
  126|   157k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   157k|            return static_cast<T*>(s.m_cp);
  128|   157k|        }
  129|   157k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   157k|            return static_cast<T*>(s.m_p);
  131|   157k|        }
  132|   157k|        else {
  133|   157k|            return reinterpret_cast<T*>(s.m_fp);
  134|   157k|        }
  135|   157k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceIN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_EUlDiE_LPv0EEEPSG_:
  103|   134k|        {
  104|   134k|        }
_ZN3scn2v24impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_LNS8_13subrange_kindE1EEEE8sentinelILb1EEELSH_0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESP_iEUlwE_ST_LPv0EEEOSP_:
  195|    724|    {
  196|    724|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_LNS8_13subrange_kindE1EEEE8sentinelILb1EEELSH_0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESP_iEUlwE_ST_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEwE_clESY_w:
  185|    724|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|    724|              cvref<T> obj = *get<T>(fn);
  187|    724|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|    724|                  obj(static_cast<decltype(args)>(args)...);
  189|    724|              }
  190|    724|              else {
  191|    724|                  return obj(static_cast<decltype(args)>(args)...);
  192|    724|              }
  193|    724|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EENS1_15take_width_viewINS9_ISD_SD_LNS7_13subrange_kindE1EEEE8sentinelILb1EEELSG_0EEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESO_iEUlwE_EEDaNS3_7storageE:
  125|    724|    {
  126|    724|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|    724|            return static_cast<T*>(s.m_cp);
  128|    724|        }
  129|    724|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|    724|            return static_cast<T*>(s.m_p);
  131|    724|        }
  132|    724|        else {
  133|    724|            return reinterpret_cast<T*>(s.m_fp);
  134|    724|        }
  135|    724|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_LNS8_13subrange_kindE1EEEE8sentinelILb1EEELSH_0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESP_iEUlwE_LPv0EEEPSP_:
  103|    724|        {
  104|    724|        }
_ZNK3scn2v24impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIS7_S7_LNSF_13subrange_kindE1EEEEENS0_6detail10locale_refEESN_EclESC_SK_SM_:
  204|    226|    {
  205|    226|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|    226|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|    226|    }
_ZN3scn2v24impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_LNSA_13subrange_kindE1EEEE8sentinelILb1EEELSJ_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_bEUlwE0_SW_LPv0EEESV_:
  195|      2|    {
  196|      2|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_LNSA_13subrange_kindE1EEEE8sentinelILb1EEELSJ_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_bEUlwE0_SW_LPv0EEESV_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  185|      2|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|      2|              cvref<T> obj = *get<T>(fn);
  187|      2|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|      2|                  obj(static_cast<decltype(args)>(args)...);
  189|      2|              }
  190|      2|              else {
  191|      2|                  return obj(static_cast<decltype(args)>(args)...);
  192|      2|              }
  193|      2|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_LNS9_13subrange_kindE1EEEE8sentinelILb1EEELSI_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_bEUlwE0_EEDaNS3_7storageE:
  125|      2|    {
  126|      2|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|      2|            return static_cast<T*>(s.m_cp);
  128|      2|        }
  129|      2|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|      2|            return static_cast<T*>(s.m_p);
  131|      2|        }
  132|      2|        else {
  133|      2|            return reinterpret_cast<T*>(s.m_fp);
  134|      2|        }
  135|      2|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_LNSA_13subrange_kindE1EEEE8sentinelILb1EEELSJ_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_bEUlwE0_LPv0EEEPSR_:
  103|      2|        {
  104|      2|        }
_ZN3scn2v24impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_LNSA_13subrange_kindE1EEEE8sentinelILb1EEELSJ_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_bEUlwE0_SW_LPv0EEESV_:
  195|    224|    {
  196|    224|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_LNSA_13subrange_kindE1EEEE8sentinelILb1EEELSJ_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_bEUlwE0_SW_LPv0EEESV_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  185|    224|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|    224|              cvref<T> obj = *get<T>(fn);
  187|    224|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|    224|                  obj(static_cast<decltype(args)>(args)...);
  189|    224|              }
  190|    224|              else {
  191|    224|                  return obj(static_cast<decltype(args)>(args)...);
  192|    224|              }
  193|    224|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_LNS9_13subrange_kindE1EEEE8sentinelILb1EEELSI_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_bEUlwE0_EEDaNS3_7storageE:
  125|    224|    {
  126|    224|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|    224|            return static_cast<T*>(s.m_cp);
  128|    224|        }
  129|    224|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|    224|            return static_cast<T*>(s.m_p);
  131|    224|        }
  132|    224|        else {
  133|    224|            return reinterpret_cast<T*>(s.m_fp);
  134|    224|        }
  135|    224|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_LNSA_13subrange_kindE1EEEE8sentinelILb1EEELSJ_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_bEUlwE0_LPv0EEEPSR_:
  103|    224|        {
  104|    224|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIS7_S7_LNSF_13subrange_kindE1EEEEENS0_6detail10locale_refEESN_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISK_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISU_EEE4typeEEEOSU_RKNSL_12format_specsERT0_SM_EUlSC_DpOT_E_S17_LPv0EEESY_:
  195|      6|    {
  196|      6|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIS7_S7_LNSF_13subrange_kindE1EEEEENS0_6detail10locale_refEESN_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISK_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISU_EEE4typeEEEOSU_RKNSL_12format_specsERT0_SM_EUlSC_DpOT_E_S17_LPv0EEESY_ENKUlNS1_12fnref_detail4base7storageESC_SK_SM_E_clES1B_SC_SK_SM_:
  185|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|      6|              cvref<T> obj = *get<T>(fn);
  187|      6|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|      6|                  obj(static_cast<decltype(args)>(args)...);
  189|      6|              }
  190|      6|              else {
  191|      6|                  return obj(static_cast<decltype(args)>(args)...);
  192|      6|              }
  193|      6|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|      6|    {
  126|      6|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|      6|            return static_cast<T*>(s.m_cp);
  128|      6|        }
  129|      6|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|      6|            return static_cast<T*>(s.m_p);
  131|      6|        }
  132|      6|        else {
  133|      6|            return reinterpret_cast<T*>(s.m_fp);
  134|      6|        }
  135|      6|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSF_LNSB_13subrange_kindE1EEEEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSL_:
  103|      6|        {
  104|      6|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIS7_S7_LNSF_13subrange_kindE1EEEEENS0_6detail10locale_refEESN_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISK_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISU_EEE4typeEEEOSU_RKNSL_12format_specsERT0_SM_EUlSC_DpOT_E0_S17_LPv0EEESY_:
  195|    220|    {
  196|    220|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIS7_S7_LNSF_13subrange_kindE1EEEEENS0_6detail10locale_refEESN_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISK_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISU_EEE4typeEEEOSU_RKNSL_12format_specsERT0_SM_EUlSC_DpOT_E0_S17_LPv0EEESY_ENKUlNS1_12fnref_detail4base7storageESC_SK_SM_E_clES1B_SC_SK_SM_:
  185|    220|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|    220|              cvref<T> obj = *get<T>(fn);
  187|    220|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|    220|                  obj(static_cast<decltype(args)>(args)...);
  189|    220|              }
  190|    220|              else {
  191|    220|                  return obj(static_cast<decltype(args)>(args)...);
  192|    220|              }
  193|    220|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  125|    220|    {
  126|    220|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|    220|            return static_cast<T*>(s.m_cp);
  128|    220|        }
  129|    220|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|    220|            return static_cast<T*>(s.m_p);
  131|    220|        }
  132|    220|        else {
  133|    220|            return reinterpret_cast<T*>(s.m_fp);
  134|    220|        }
  135|    220|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSF_LNSB_13subrange_kindE1EEEEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSL_:
  103|    220|        {
  104|    220|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_:
  195|     20|    {
  196|     20|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|     20|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|     20|              cvref<T> obj = *get<T>(fn);
  187|     20|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|     20|                  obj(static_cast<decltype(args)>(args)...);
  189|     20|              }
  190|     20|              else {
  191|     20|                  return obj(static_cast<decltype(args)>(args)...);
  192|     20|              }
  193|     20|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|     20|    {
  126|     20|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|     20|            return static_cast<T*>(s.m_cp);
  128|     20|        }
  129|     20|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|     20|            return static_cast<T*>(s.m_p);
  131|     20|        }
  132|     20|        else {
  133|     20|            return reinterpret_cast<T*>(s.m_fp);
  134|     20|        }
  135|     20|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSK_:
  103|     20|        {
  104|     20|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_:
  195|    184|    {
  196|    184|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|    184|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|    184|              cvref<T> obj = *get<T>(fn);
  187|    184|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|    184|                  obj(static_cast<decltype(args)>(args)...);
  189|    184|              }
  190|    184|              else {
  191|    184|                  return obj(static_cast<decltype(args)>(args)...);
  192|    184|              }
  193|    184|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  125|    184|    {
  126|    184|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|    184|            return static_cast<T*>(s.m_cp);
  128|    184|        }
  129|    184|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|    184|            return static_cast<T*>(s.m_p);
  131|    184|        }
  132|    184|        else {
  133|    184|            return reinterpret_cast<T*>(s.m_fp);
  134|    184|        }
  135|    184|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSK_:
  103|    184|        {
  104|    184|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEOSJ_EUlDiE_SN_LPv0EEESM_:
  195|    648|    {
  196|    648|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEOSJ_EUlDiE_SN_LPv0EEESM_ENKUlNS1_12fnref_detail4base7storageEDiE_clESR_Di:
  185|  9.84k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  9.84k|              cvref<T> obj = *get<T>(fn);
  187|  9.84k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  9.84k|                  obj(static_cast<decltype(args)>(args)...);
  189|  9.84k|              }
  190|  9.84k|              else {
  191|  9.84k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  9.84k|              }
  193|  9.84k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_EEDaNS3_7storageE:
  125|  9.84k|    {
  126|  9.84k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  9.84k|            return static_cast<T*>(s.m_cp);
  128|  9.84k|        }
  129|  9.84k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  9.84k|            return static_cast<T*>(s.m_p);
  131|  9.84k|        }
  132|  9.84k|        else {
  133|  9.84k|            return reinterpret_cast<T*>(s.m_fp);
  134|  9.84k|        }
  135|  9.84k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEOSJ_EUlDiE_LPv0EEEPSJ_:
  103|    648|        {
  104|    648|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSF_LNSB_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_NS7_12specs_helperEEUlDiE_ST_LPv0EEESQ_:
  195|    294|    {
  196|    294|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSF_LNSB_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_NS7_12specs_helperEEUlDiE_ST_LPv0EEESQ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  185|  11.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  11.9k|              cvref<T> obj = *get<T>(fn);
  187|  11.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  11.9k|                  obj(static_cast<decltype(args)>(args)...);
  189|  11.9k|              }
  190|  11.9k|              else {
  191|  11.9k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  11.9k|              }
  193|  11.9k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  125|  11.9k|    {
  126|  11.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  11.9k|            return static_cast<T*>(s.m_cp);
  128|  11.9k|        }
  129|  11.9k|        else if constexpr (std::is_object_v<T>) {
  130|  11.9k|            return static_cast<T*>(s.m_p);
  131|  11.9k|        }
  132|  11.9k|        else {
  133|  11.9k|            return reinterpret_cast<T*>(s.m_fp);
  134|  11.9k|        }
  135|  11.9k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSF_LNSB_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_NS7_12specs_helperEEUlDiE_LPv0EEEPKSM_:
  108|    294|        {
  109|    294|        }
_ZN3scn2v24impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSF_LNSB_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_NS7_12specs_helperEEUlwE_ST_LPv0EEESQ_:
  195|    138|    {
  196|    138|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSF_LNSB_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_NS7_12specs_helperEEUlwE_ST_LPv0EEESQ_ENKUlNS1_12fnref_detail4base7storageEwE_clESY_w:
  185|  1.84k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  1.84k|              cvref<T> obj = *get<T>(fn);
  187|  1.84k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  1.84k|                  obj(static_cast<decltype(args)>(args)...);
  189|  1.84k|              }
  190|  1.84k|              else {
  191|  1.84k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  1.84k|              }
  193|  1.84k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  125|  1.84k|    {
  126|  1.84k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  1.84k|            return static_cast<T*>(s.m_cp);
  128|  1.84k|        }
  129|  1.84k|        else if constexpr (std::is_object_v<T>) {
  130|  1.84k|            return static_cast<T*>(s.m_p);
  131|  1.84k|        }
  132|  1.84k|        else {
  133|  1.84k|            return reinterpret_cast<T*>(s.m_fp);
  134|  1.84k|        }
  135|  1.84k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSF_LNSB_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_NS7_12specs_helperEEUlwE_LPv0EEEPKSM_:
  108|    138|        {
  109|    138|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_NS7_12specs_helperEEUlDiE_SR_LPv0EEESO_:
  195|  2.23k|    {
  196|  2.23k|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_NS7_12specs_helperEEUlDiE_SR_LPv0EEESO_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  185|   703k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   703k|              cvref<T> obj = *get<T>(fn);
  187|   703k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   703k|                  obj(static_cast<decltype(args)>(args)...);
  189|   703k|              }
  190|   703k|              else {
  191|   703k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   703k|              }
  193|   703k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  125|   703k|    {
  126|   703k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   703k|            return static_cast<T*>(s.m_cp);
  128|   703k|        }
  129|   703k|        else if constexpr (std::is_object_v<T>) {
  130|   703k|            return static_cast<T*>(s.m_p);
  131|   703k|        }
  132|   703k|        else {
  133|   703k|            return reinterpret_cast<T*>(s.m_fp);
  134|   703k|        }
  135|   703k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_NS7_12specs_helperEEUlDiE_LPv0EEEPKSK_:
  108|  2.23k|        {
  109|  2.23k|        }
_ZN3scn2v24impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_NS7_12specs_helperEEUlwE_SR_LPv0EEESO_:
  195|    306|    {
  196|    306|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_NS7_12specs_helperEEUlwE_SR_LPv0EEESO_ENKUlNS1_12fnref_detail4base7storageEwE_clESW_w:
  185|  4.89k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  4.89k|              cvref<T> obj = *get<T>(fn);
  187|  4.89k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  4.89k|                  obj(static_cast<decltype(args)>(args)...);
  189|  4.89k|              }
  190|  4.89k|              else {
  191|  4.89k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  4.89k|              }
  193|  4.89k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  125|  4.89k|    {
  126|  4.89k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  4.89k|            return static_cast<T*>(s.m_cp);
  128|  4.89k|        }
  129|  4.89k|        else if constexpr (std::is_object_v<T>) {
  130|  4.89k|            return static_cast<T*>(s.m_p);
  131|  4.89k|        }
  132|  4.89k|        else {
  133|  4.89k|            return reinterpret_cast<T*>(s.m_fp);
  134|  4.89k|        }
  135|  4.89k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_NS7_12specs_helperEEUlwE_LPv0EEEPKSK_:
  108|    306|        {
  109|    306|        }

_ZN3scn2v24implntENS1_9eof_errorE:
   29|   112k|{
   30|   112k|    return e != eof_error::good;
   31|   112k|}
_ZN3scn2v24impl20make_eof_parse_errorENS1_9eof_errorE:
   90|    870|{
   91|    870|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  242|    870|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    870|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   92|      0|    return parse_error::eof;
   93|    870|}
_ZN3scn2v24impleqENS1_11parse_errorES2_:
   68|  22.2k|    {
   69|  22.2k|        return a.m_code == b.m_code;
   70|  22.2k|    }
_ZN3scn2v24impl11parse_errorC2ENS2_4codeE:
   54|  89.4k|    {
   55|  89.4k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  227|  89.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   56|  89.4k|    }
_ZZN3scn2v24impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  114|  5.12k|    return [code, msg](parse_error err) {
  115|  5.12k|        return make_scan_error_from_parse_error(err, code, msg);
  116|  5.12k|    };
_ZN3scn2v24impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
   99|  5.12k|{
  100|  5.12k|    if (err == parse_error::good) {
  ------------------
  |  Branch (100:9): [True: 0, False: 5.12k]
  ------------------
  101|      0|        return {};
  102|      0|    }
  103|       |
  104|  5.12k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (104:9): [True: 52, False: 5.07k]
  ------------------
  105|     52|        return scan_error{scan_error::end_of_range, "EOF"};
  106|     52|    }
  107|       |
  108|  5.07k|    return scan_error{code, msg};
  109|  5.12k|}
_ZN3scn2v24impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  113|  5.12k|{
  114|  5.12k|    return [code, msg](parse_error err) {
  115|  5.12k|        return make_scan_error_from_parse_error(err, code, msg);
  116|  5.12k|    };
  117|  5.12k|}

_ZN3scn2v24impl26calculate_valid_text_widthIvEEmDiNS1_20text_width_algorithmE:
  106|   164k|{
  107|   164k|    SCN_GCC_PUSH
  108|   164k|    SCN_GCC_IGNORE("-Wswitch-enum")
  109|       |
  110|   164k|    SCN_CLANG_PUSH
  111|   164k|    SCN_CLANG_IGNORE("-Wcovered-switch-default")
  112|       |
  113|   164k|    switch (algo) {
  114|      0|        case text_width_algorithm::wcswidth: {
  ------------------
  |  Branch (114:9): [True: 0, False: 164k]
  ------------------
  115|      0|#if SCN_POSIX
  116|      0|            set_clocale_classic_guard clocale_guard{LC_CTYPE};
  117|       |
  118|      0|            std::wstring winput;
  119|      0|            transcode_valid_to_string(std::u32string_view{&cp, 1}, winput);
  120|      0|            const auto n = ::wcswidth(winput.data(), winput.size());
  121|      0|            SCN_ENSURE(n != -1);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  122|      0|            return static_cast<size_t>(n);
  123|       |#else
  124|       |            SCN_ASSERT(false, "No wcswidth");
  125|       |            SCN_UNREACHABLE;
  126|       |#endif
  127|      0|        }
  128|       |
  129|      0|        case text_width_algorithm::code_units: {
  ------------------
  |  Branch (129:9): [True: 0, False: 164k]
  ------------------
  130|      0|            std::wstring winput;
  131|      0|            transcode_valid_to_string(std::u32string_view{&cp, 1}, winput);
  132|      0|            return winput.size();
  133|      0|        }
  134|       |
  135|      0|        case text_width_algorithm::code_points: {
  ------------------
  |  Branch (135:9): [True: 0, False: 164k]
  ------------------
  136|      0|            return 1;
  137|      0|        }
  138|       |
  139|   164k|        case text_width_algorithm::fmt_v10: {
  ------------------
  |  Branch (139:9): [True: 164k, False: 0]
  ------------------
  140|   164k|            return calculate_text_width_for_fmt_v10(cp);
  141|      0|        }
  142|       |
  143|      0|        default:
  ------------------
  |  Branch (143:9): [True: 0, False: 164k]
  ------------------
  144|      0|            SCN_ASSERT(false, "Not implemented");
  ------------------
  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  ------------------
  145|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  146|   164k|    }
  147|       |    SCN_CLANG_POP    // -Wcovered-switch-default
  148|       |        SCN_GCC_POP  // -Wswitch-enum
  149|   164k|}
_ZN3scn2v24impl32calculate_text_width_for_fmt_v10EDi:
   78|   171k|{
   79|   171k|    if (cp >= 0x1100 &&
  ------------------
  |  Branch (79:9): [True: 8.18k, False: 163k]
  ------------------
   80|   171k|        (cp <= 0x115f ||  // Hangul Jamo init. consonants
  ------------------
  |  Branch (80:10): [True: 70, False: 8.11k]
  ------------------
   81|  8.18k|         cp == 0x2329 ||  // LEFT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (81:10): [True: 92, False: 8.02k]
  ------------------
   82|  8.18k|         cp == 0x232a ||  // RIGHT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (82:10): [True: 50, False: 7.97k]
  ------------------
   83|       |         // CJK ... Yi except IDEOGRAPHIC HALF FILL SPACE:
   84|  8.18k|         (cp >= 0x2e80 && cp <= 0xa4cf && cp != 0x303f) ||
  ------------------
  |  Branch (84:11): [True: 7.48k, False: 486]
  |  Branch (84:27): [True: 400, False: 7.08k]
  |  Branch (84:43): [True: 400, False: 0]
  ------------------
   85|  8.18k|         (cp >= 0xac00 && cp <= 0xd7a3) ||    // Hangul Syllables
  ------------------
  |  Branch (85:11): [True: 7.08k, False: 486]
  |  Branch (85:27): [True: 196, False: 6.88k]
  ------------------
   86|  8.18k|         (cp >= 0xf900 && cp <= 0xfaff) ||    // CJK Compatibility Ideographs
  ------------------
  |  Branch (86:11): [True: 6.75k, False: 620]
  |  Branch (86:27): [True: 88, False: 6.66k]
  ------------------
   87|  8.18k|         (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms
  ------------------
  |  Branch (87:11): [True: 6.42k, False: 860]
  |  Branch (87:27): [True: 68, False: 6.35k]
  ------------------
   88|  8.18k|         (cp >= 0xfe30 && cp <= 0xfe6f) ||    // CJK Compatibility Forms
  ------------------
  |  Branch (88:11): [True: 6.35k, False: 860]
  |  Branch (88:27): [True: 768, False: 5.59k]
  ------------------
   89|  8.18k|         (cp >= 0xff00 && cp <= 0xff60) ||    // Fullwidth Forms
  ------------------
  |  Branch (89:11): [True: 5.59k, False: 860]
  |  Branch (89:27): [True: 68, False: 5.52k]
  ------------------
   90|  8.18k|         (cp >= 0xffe0 && cp <= 0xffe6) ||    // Fullwidth Forms
  ------------------
  |  Branch (90:11): [True: 5.52k, False: 860]
  |  Branch (90:27): [True: 62, False: 5.46k]
  ------------------
   91|  8.18k|         (cp >= 0x20000 && cp <= 0x2fffd) ||  // CJK
  ------------------
  |  Branch (91:11): [True: 5.33k, False: 982]
  |  Branch (91:28): [True: 62, False: 5.27k]
  ------------------
   92|  8.18k|         (cp >= 0x30000 && cp <= 0x3fffd) ||
  ------------------
  |  Branch (92:11): [True: 5.27k, False: 982]
  |  Branch (92:28): [True: 1.09k, False: 4.18k]
  ------------------
   93|       |         // Miscellaneous Symbols and Pictographs + Emoticons:
   94|  8.18k|         (cp >= 0x1f300 && cp <= 0x1f64f) ||
  ------------------
  |  Branch (94:11): [True: 4.30k, False: 860]
  |  Branch (94:28): [True: 62, False: 4.24k]
  ------------------
   95|       |         // Supplemental Symbols and Pictographs:
   96|  8.18k|         (cp >= 0x1f900 && cp <= 0x1f9ff))) {
  ------------------
  |  Branch (96:11): [True: 4.24k, False: 860]
  |  Branch (96:28): [True: 60, False: 4.18k]
  ------------------
   97|  3.13k|        return 2;
   98|  3.13k|    }
   99|   168k|    return 1;
  100|   171k|}
_ZN3scn2v24impl26calculate_valid_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_20text_width_algorithmE:
  155|  6.66k|{
  156|  6.66k|    SCN_GCC_PUSH
  157|  6.66k|    SCN_GCC_IGNORE("-Wswitch-enum")
  158|       |
  159|  6.66k|    SCN_CLANG_PUSH
  160|  6.66k|    SCN_CLANG_IGNORE("-Wcovered-switch-default")
  161|       |
  162|  6.66k|    switch (algo) {
  163|      0|        case text_width_algorithm::wcswidth: {
  ------------------
  |  Branch (163:9): [True: 0, False: 6.66k]
  ------------------
  164|      0|#if SCN_POSIX
  165|      0|            set_clocale_classic_guard clocale_guard{LC_CTYPE};
  166|       |
  167|      0|            std::wstring winput;
  168|      0|            transcode_valid_to_string(input, winput);
  169|      0|            const auto n = ::wcswidth(winput.data(), winput.size());
  170|      0|            SCN_ENSURE(n != -1);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  171|      0|            return static_cast<size_t>(n);
  172|       |#else
  173|       |            SCN_ASSERT(false, "No wcswidth");
  174|       |            SCN_UNREACHABLE;
  175|       |#endif
  176|      0|        }
  177|       |
  178|      0|        case text_width_algorithm::code_units: {
  ------------------
  |  Branch (178:9): [True: 0, False: 6.66k]
  ------------------
  179|      0|            return input.size();
  180|      0|        }
  181|       |
  182|      0|        case text_width_algorithm::code_points: {
  ------------------
  |  Branch (182:9): [True: 0, False: 6.66k]
  ------------------
  183|      0|            return count_valid_code_points(input);
  184|      0|        }
  185|       |
  186|  6.66k|        case text_width_algorithm::fmt_v10: {
  ------------------
  |  Branch (186:9): [True: 6.66k, False: 0]
  ------------------
  187|  6.66k|            size_t count{0};
  188|  6.66k|            for_each_code_point_valid(input, [&count](char32_t cp) {
  189|  6.66k|                count += calculate_text_width_for_fmt_v10(cp);
  190|  6.66k|            });
  191|  6.66k|            return count;
  192|      0|        }
  193|       |
  194|      0|        default:
  ------------------
  |  Branch (194:9): [True: 0, False: 6.66k]
  ------------------
  195|      0|            SCN_ASSERT(false, "Not implemented");
  ------------------
  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  ------------------
  196|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  197|  6.66k|    }
  198|       |    SCN_CLANG_POP    // -Wcovered-switch-default
  199|       |        SCN_GCC_POP  // -Wswitch-enum
  200|  6.66k|}
_ZZN3scn2v24impl26calculate_valid_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_20text_width_algorithmEENKUlDiE_clEDi:
  188|  6.66k|            for_each_code_point_valid(input, [&count](char32_t cp) {
  189|  6.66k|                count += calculate_text_width_for_fmt_v10(cp);
  190|  6.66k|            });

_ZN3scn2v26detail12handle_errorENS0_10scan_errorE:
   25|    280|{
   26|    280|    return e;
   27|    280|}

_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  586|  36.3k|{
  587|  36.3k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
  588|  36.3k|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  610|  62.4k|{
  611|  62.4k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
  612|  62.4k|}
_ZN3scn2v26detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  543|  36.3k|{
  544|  36.3k|    return vscan_internal(source, format, args);
  545|  36.3k|}
_ZN3scn2v26detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  563|  62.4k|{
  564|  62.4k|    return vscan_internal(source, format, args);
  565|  62.4k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   35|  72.7k|{
   36|  72.7k|    if (format.size() != 2) {
  ------------------
  |  Branch (36:9): [True: 72.3k, False: 432]
  ------------------
   37|  72.3k|        return false;
   38|  72.3k|    }
   39|    432|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (39:12): [True: 126, False: 306]
  |  Branch (39:39): [True: 18, False: 108]
  ------------------
   40|  72.7k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcEC2IN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEOT_NSt3__117basic_string_viewIcNSF_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
  313|  72.7k|    {
  314|  72.7k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_baseC2Em:
  132|   197k|    {
  133|   197k|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  153|   197k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 197k]
  |  |  ------------------
  ------------------
  134|      0|            visited_args_upper.resize((args_count - 64) / 8);
  135|      0|        }
  136|   197k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIcEC2EN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
  263|  72.7k|    {
  264|  72.7k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|  72.7k|{
  441|  72.7k|    const auto beg = handler.get_ctx().begin();
  442|  72.7k|    detail::parse_format_string<false>(format, handler);
  443|  72.7k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  72.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 70.2k, False: 2.43k]
  |  |  ------------------
  ------------------
  444|  70.2k|        return unexpected(handler.error);
  445|  70.2k|    }
  446|  2.43k|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|  72.7k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
  424|  1.02M|    {
  425|  1.02M|        return ctx.get();
  426|  1.02M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
  267|  1.02M|    {
  268|  1.02M|        return contiguous_ctx;
  269|  1.02M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
  317|   109k|    {
  318|   280k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 179k, False: 101k]
  ------------------
  319|   179k|            auto it = get_ctx().begin();
  320|   179k|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 2.37k, False: 176k]
  ------------------
  321|  2.37k|                SCN_UNLIKELY_ATTR
  322|  2.37k|                return on_error("Unexpected end of source");
  323|  2.37k|            }
  324|       |
  325|   176k|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|   176k|                    detail::make_string_view_from_pointers(begin, end));
  327|   176k|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 2.32k, False: 174k]
  ------------------
  328|  2.32k|                return on_error("Invalid encoding in format string");
  329|  2.32k|            }
  330|   174k|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 133k, False: 40.9k]
  ------------------
  331|   133k|                get_ctx().advance_to(
  332|   133k|                    impl::read_while_classic_space(get_ctx().range()));
  333|   133k|                begin = detail::to_address(std::prev(after_space_it));
  334|   133k|                continue;
  335|   133k|            }
  336|       |
  337|  40.9k|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 2.45k, False: 38.4k]
  ------------------
  338|  2.45k|                SCN_UNLIKELY_ATTR
  339|  2.45k|                return on_error("Unexpected literal character in source");
  340|  2.45k|            }
  341|  38.4k|            get_ctx().advance_to(ranges::next(it));
  342|  38.4k|        }
  343|   109k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE20on_replacement_fieldEmPKc:
  374|  10.3k|    {
  375|  10.3k|        auto arg = get_arg(get_ctx(), arg_id, *this);
  376|  10.3k|        set_arg_as_visited(arg_id);
  377|       |
  378|  10.3k|        on_visit_scan_arg(
  379|  10.3k|            impl::default_arg_reader<context_type>{
  380|  10.3k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
  381|  10.3k|            arg);
  382|  10.3k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
   91|  70.1k|{
   92|  70.1k|    auto arg = ctx.arg(id);
   93|  70.1k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  70.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.84k, False: 68.3k]
  |  |  ------------------
  ------------------
   94|  1.84k|        handler.on_error("Failed to find argument with ID");
   95|  1.84k|    }
   96|  70.1k|    return arg;
   97|  70.1k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
  207|   123k|    {
  208|   123k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  153|   123k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.42k, False: 120k]
  |  |  ------------------
  ------------------
  209|  3.42k|            on_error("Invalid out-of-range argument ID");
  210|  3.42k|            return;
  211|  3.42k|        }
  212|       |
  213|   120k|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  153|   120k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 146, False: 120k]
  |  |  ------------------
  ------------------
  214|    146|            return on_error("Argument with this ID has already been scanned");
  215|    146|        }
  216|       |
  217|   120k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  152|   120k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 120k, False: 0]
  |  |  ------------------
  ------------------
  218|   120k|            visited_args_lower64 |= (1ull << id);
  219|   120k|            return;
  220|   120k|        }
  221|       |
  222|      0|        id -= 64;
  223|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
  224|      0|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
  192|   120k|    {
  193|   120k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  153|   120k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 120k]
  |  |  ------------------
  ------------------
  194|      0|            on_error("Invalid out-of-range argument ID");
  195|      0|            return false;
  196|      0|        }
  197|       |
  198|   120k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  152|   120k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 120k, False: 0]
  |  |  ------------------
  ------------------
  199|   120k|            return (visited_args_lower64 >> id) & 1ull;
  200|   120k|        }
  201|       |
  202|      0|        id -= 64;
  203|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
  204|   120k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl18default_arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  358|  10.3k|    {
  359|  10.3k|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 292, False: 10.0k]
  |  Branch (359:23): [True: 0, False: 10.0k]
  ------------------
  360|    292|            SCN_UNLIKELY_ATTR
  361|    292|            return;
  362|    292|        }
  363|       |
  364|  10.0k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|  10.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|  10.0k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  10.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.46k, False: 3.60k]
  |  |  ------------------
  ------------------
  366|  6.46k|            on_error(r.error());
  367|  6.46k|        }
  368|  3.60k|        else {
  369|  3.60k|            get_ctx().advance_to(*r);
  370|  3.60k|        }
  371|  10.0k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
  176|  97.7k|    {
  177|  97.7k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  153|  97.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 97.7k, False: 0]
  |  |  ------------------
  ------------------
  178|  97.7k|            error = err;
  179|  97.7k|        }
  180|  97.7k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
  346|  64.5k|    {
  347|  64.5k|        return parse_ctx.next_arg_id();
  348|  64.5k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEm:
  350|  5.64k|    {
  351|  5.64k|        parse_ctx.check_arg_id(id);
  352|  5.64k|        return id;
  353|  5.64k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
  387|  59.8k|    {
  388|  59.8k|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|  59.8k|        set_arg_as_visited(arg_id);
  390|       |
  391|  59.8k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 59.8k]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|  59.8k|        auto specs = detail::format_specs{};
  401|  59.8k|        detail::specs_checker<specs_handler<context_type>> handler{
  402|  59.8k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|  59.8k|            arg.type()};
  404|       |
  405|  59.8k|        begin = detail::parse_format_specs(begin, end, handler);
  406|  59.8k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 2.47k, False: 57.3k]
  |  Branch (406:29): [True: 982, False: 56.3k]
  ------------------
  407|  3.45k|            SCN_UNLIKELY_ATTR
  408|  3.45k|            on_error("Missing '}' in format string");
  409|  3.45k|            return parse_ctx.begin();
  410|  3.45k|        }
  411|  56.3k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  56.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 486, False: 55.8k]
  |  |  ------------------
  ------------------
  412|    486|            return parse_ctx.begin();
  413|    486|        }
  414|  55.8k|        parse_ctx.advance_to(begin);
  415|       |
  416|  55.8k|        on_visit_scan_arg(
  417|  55.8k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|  55.8k|                                           get_ctx().locale()},
  419|  55.8k|            arg);
  420|  55.8k|        return parse_ctx.begin();
  421|  56.3k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
  111|  59.8k|    {
  112|  59.8k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  358|  55.8k|    {
  359|  55.8k|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 364, False: 55.5k]
  |  Branch (359:23): [True: 0, False: 55.5k]
  ------------------
  360|    364|            SCN_UNLIKELY_ATTR
  361|    364|            return;
  362|    364|        }
  363|       |
  364|  55.5k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|  55.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|  55.5k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  55.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 50.3k, False: 5.19k]
  |  |  ------------------
  ------------------
  366|  50.3k|            on_error(r.error());
  367|  50.3k|        }
  368|  5.19k|        else {
  369|  5.19k|            get_ctx().advance_to(*r);
  370|  5.19k|        }
  371|  55.5k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base8on_errorEPKc:
  171|   120k|    {
  172|   120k|        SCN_UNLIKELY_ATTR
  173|   120k|        error = scan_error{scan_error::invalid_format_string, msg};
  174|   120k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
  139|   197k|    {
  140|   197k|        {
  141|   197k|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (141:45): [True: 0, False: 197k]
  ------------------
  142|   197k|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (142:35): [True: 0, False: 197k]
  ------------------
  143|   197k|                                      ? std::numeric_limits<uint64_t>::max()
  144|   197k|                                      : (1ull << args_count_lower64) - 1;
  145|       |
  146|   197k|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (146:17): [True: 77.4k, False: 120k]
  ------------------
  147|  77.4k|                return on_error("Argument list not exhausted");
  148|  77.4k|            }
  149|   197k|        }
  150|       |
  151|   120k|        if (args_count < 64) {
  ------------------
  |  Branch (151:13): [True: 120k, False: 0]
  ------------------
  152|   120k|            return;
  153|   120k|        }
  154|       |
  155|      0|        auto last_args_count = args_count - 64;
  156|      0|        for (auto it = visited_args_upper.begin();
  157|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (157:14): [True: 0, False: 0]
  ------------------
  158|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (158:17): [True: 0, False: 0]
  ------------------
  159|      0|                return on_error("Argument list not exhausted");
  160|      0|            }
  161|      0|            last_args_count -= 8;
  162|      0|        }
  163|       |
  164|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
  165|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (165:13): [True: 0, False: 0]
  ------------------
  166|      0|            return on_error("Argument list not exhausted");
  167|      0|        }
  168|      0|    }
vscan.cpp:_ZNK3scn2v212_GLOBAL__N_119format_handler_base9get_errorEv:
  187|   197k|    {
  188|   197k|        return error;
  189|   197k|    }
vscan.cpp:_ZNK3scn2v212_GLOBAL__N_119format_handler_basecvbEv:
  183|   469k|    {
  184|   469k|        return static_cast<bool>(error);
  185|   469k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
  455|  72.7k|{
  456|  72.7k|    const auto argcount = args.size();
  457|  72.7k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (457:9): [True: 18, False: 72.7k]
  |  Branch (457:60): [True: 18, False: 0]
  ------------------
  458|     18|        auto arg = args.get(0);
  459|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  246|     18|    static_cast<    \
  |  |  247|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  460|     18|    }
  461|       |
  462|  72.7k|    auto handler = format_handler<true, CharT>{
  463|  72.7k|        ranges::subrange<const CharT*>{source.data(),
  464|  72.7k|                                       source.data() + source.size()},
  465|  72.7k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  72.7k|    static_cast<    \
  |  |  247|  72.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  72.7k|    static_cast<    \
  |  |  247|  72.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  466|  72.7k|    return vscan_parse_format_string(format, handler);
  467|  72.7k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
   48|     18|{
   49|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
   50|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   51|      0|                                     "Argument #0 not found");
   52|      0|    }
   53|       |
   54|     18|    auto reader =
   55|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
   56|     18|            ranges::subrange<const CharT*>{source.data(),
   57|     18|                                           source.data() + source.size()},
   58|     18|            SCN_MOVE(args), loc};
  ------------------
  |  |  246|     18|    static_cast<    \
  |  |  247|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|     18|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     10|    }                                                  \
  |  |  |  |   70|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   60|      8|    return ranges::distance(source.data(), it);
   61|     18|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
  455|   124k|{
  456|   124k|    const auto argcount = args.size();
  457|   124k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (457:9): [True: 18, False: 124k]
  |  Branch (457:60): [True: 18, False: 0]
  ------------------
  458|     18|        auto arg = args.get(0);
  459|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  246|     18|    static_cast<    \
  |  |  247|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  460|     18|    }
  461|       |
  462|   124k|    auto handler = format_handler<true, CharT>{
  463|   124k|        ranges::subrange<const CharT*>{source.data(),
  464|   124k|                                       source.data() + source.size()},
  465|   124k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   124k|    static_cast<    \
  |  |  247|   124k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   124k|    static_cast<    \
  |  |  247|   124k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  466|   124k|    return vscan_parse_format_string(format, handler);
  467|   124k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   35|   124k|{
   36|   124k|    if (format.size() != 2) {
  ------------------
  |  Branch (36:9): [True: 111k, False: 13.3k]
  ------------------
   37|   111k|        return false;
   38|   111k|    }
   39|  13.3k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (39:12): [True: 144, False: 13.2k]
  |  Branch (39:39): [True: 18, False: 126]
  ------------------
   40|   124k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
   48|     18|{
   49|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
   50|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   51|      0|                                     "Argument #0 not found");
   52|      0|    }
   53|       |
   54|     18|    auto reader =
   55|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
   56|     18|            ranges::subrange<const CharT*>{source.data(),
   57|     18|                                           source.data() + source.size()},
   58|     18|            SCN_MOVE(args), loc};
  ------------------
  |  |  246|     18|    static_cast<    \
  |  |  247|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|     18|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     10|    }                                                  \
  |  |  |  |   70|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   60|      8|    return ranges::distance(source.data(), it);
   61|     18|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwEC2IN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEOT_NSt3__117basic_string_viewIwNSF_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
  313|   124k|    {
  314|   124k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIwEC2EN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
  263|   124k|    {
  264|   124k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|   124k|{
  441|   124k|    const auto beg = handler.get_ctx().begin();
  442|   124k|    detail::parse_format_string<false>(format, handler);
  443|   124k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 122k, False: 2.63k]
  |  |  ------------------
  ------------------
  444|   122k|        return unexpected(handler.error);
  445|   122k|    }
  446|  2.63k|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|   124k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
  424|  11.7M|    {
  425|  11.7M|        return ctx.get();
  426|  11.7M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
  267|  11.7M|    {
  268|  11.7M|        return contiguous_ctx;
  269|  11.7M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
  317|   159k|    {
  318|  3.90M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 3.74M, False: 154k]
  ------------------
  319|  3.74M|            auto it = get_ctx().begin();
  320|  3.74M|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 2.65k, False: 3.74M]
  ------------------
  321|  2.65k|                SCN_UNLIKELY_ATTR
  322|  2.65k|                return on_error("Unexpected end of source");
  323|  2.65k|            }
  324|       |
  325|  3.74M|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|  3.74M|                    detail::make_string_view_from_pointers(begin, end));
  327|  3.74M|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 52, False: 3.74M]
  ------------------
  328|     52|                return on_error("Invalid encoding in format string");
  329|     52|            }
  330|  3.74M|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 134k, False: 3.61M]
  ------------------
  331|   134k|                get_ctx().advance_to(
  332|   134k|                    impl::read_while_classic_space(get_ctx().range()));
  333|   134k|                begin = detail::to_address(std::prev(after_space_it));
  334|   134k|                continue;
  335|   134k|            }
  336|       |
  337|  3.61M|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 2.66k, False: 3.60M]
  ------------------
  338|  2.66k|                SCN_UNLIKELY_ATTR
  339|  2.66k|                return on_error("Unexpected literal character in source");
  340|  2.66k|            }
  341|  3.60M|            get_ctx().advance_to(ranges::next(it));
  342|  3.60M|        }
  343|   159k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE20on_replacement_fieldEmPKw:
  374|  8.15k|    {
  375|  8.15k|        auto arg = get_arg(get_ctx(), arg_id, *this);
  376|  8.15k|        set_arg_as_visited(arg_id);
  377|       |
  378|  8.15k|        on_visit_scan_arg(
  379|  8.15k|            impl::default_arg_reader<context_type>{
  380|  8.15k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
  381|  8.15k|            arg);
  382|  8.15k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
   91|  53.6k|{
   92|  53.6k|    auto arg = ctx.arg(id);
   93|  53.6k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  53.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.57k, False: 52.0k]
  |  |  ------------------
  ------------------
   94|  1.57k|        handler.on_error("Failed to find argument with ID");
   95|  1.57k|    }
   96|  53.6k|    return arg;
   97|  53.6k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl18default_arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  358|  8.15k|    {
  359|  8.15k|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 328, False: 7.83k]
  |  Branch (359:23): [True: 0, False: 7.83k]
  ------------------
  360|    328|            SCN_UNLIKELY_ATTR
  361|    328|            return;
  362|    328|        }
  363|       |
  364|  7.83k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|  7.83k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|  7.83k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  7.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.45k, False: 3.37k]
  |  |  ------------------
  ------------------
  366|  4.45k|            on_error(r.error());
  367|  4.45k|        }
  368|  3.37k|        else {
  369|  3.37k|            get_ctx().advance_to(*r);
  370|  3.37k|        }
  371|  7.83k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
  346|  49.3k|    {
  347|  49.3k|        return parse_ctx.next_arg_id();
  348|  49.3k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEm:
  350|  4.34k|    {
  351|  4.34k|        parse_ctx.check_arg_id(id);
  352|  4.34k|        return id;
  353|  4.34k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
  387|  45.4k|    {
  388|  45.4k|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|  45.4k|        set_arg_as_visited(arg_id);
  390|       |
  391|  45.4k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 45.4k]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|  45.4k|        auto specs = detail::format_specs{};
  401|  45.4k|        detail::specs_checker<specs_handler<context_type>> handler{
  402|  45.4k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|  45.4k|            arg.type()};
  404|       |
  405|  45.4k|        begin = detail::parse_format_specs(begin, end, handler);
  406|  45.4k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 2.50k, False: 42.9k]
  |  Branch (406:29): [True: 538, False: 42.4k]
  ------------------
  407|  3.04k|            SCN_UNLIKELY_ATTR
  408|  3.04k|            on_error("Missing '}' in format string");
  409|  3.04k|            return parse_ctx.begin();
  410|  3.04k|        }
  411|  42.4k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  42.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 384, False: 42.0k]
  |  |  ------------------
  ------------------
  412|    384|            return parse_ctx.begin();
  413|    384|        }
  414|  42.0k|        parse_ctx.advance_to(begin);
  415|       |
  416|  42.0k|        on_visit_scan_arg(
  417|  42.0k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|  42.0k|                                           get_ctx().locale()},
  419|  42.0k|            arg);
  420|  42.0k|        return parse_ctx.begin();
  421|  42.4k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
  111|  45.4k|    {
  112|  45.4k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  358|  42.0k|    {
  359|  42.0k|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 228, False: 41.8k]
  |  Branch (359:23): [True: 0, False: 41.8k]
  ------------------
  360|    228|            SCN_UNLIKELY_ATTR
  361|    228|            return;
  362|    228|        }
  363|       |
  364|  41.8k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|  41.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|  41.8k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  41.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 36.5k, False: 5.31k]
  |  |  ------------------
  ------------------
  366|  36.5k|            on_error(r.error());
  367|  36.5k|        }
  368|  5.31k|        else {
  369|  5.31k|            get_ctx().advance_to(*r);
  370|  5.31k|        }
  371|  41.8k|    }

LLVMFuzzerTestOneInput:
   68|  4.04k|{
   69|  4.04k|    scn::fuzz::run({data, size});
   70|  4.04k|    return 0;
   71|  4.04k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runENS_2v24spanIKhEE:
   51|  4.04k|{
   52|  4.04k|    if (data.size() > max_input_bytes || data.size() == 0) {
  ------------------
  |  Branch (52:9): [True: 0, False: 4.04k]
  |  Branch (52:42): [True: 0, False: 4.04k]
  ------------------
   53|      0|        return;
   54|      0|    }
   55|       |
   56|  4.04k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data);
   57|       |
   58|  4.04k|    run_for_source(sv);
   59|  4.04k|    run_for_source(wsv_reinterpret);
   60|  4.04k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (60:9): [True: 2.90k, False: 1.14k]
  ------------------
   61|  2.90k|        run_for_source(wsv_transcode);
   62|  2.90k|    }
   63|  4.04k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT_:
   36|  4.04k|{
   37|  4.04k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  4.04k|    run_for_type<char_type>(source);
   40|  4.04k|    run_for_type<int>(source);
   41|  4.04k|    run_for_type<unsigned>(source);
   42|  4.04k|    run_for_type<double>(source);
   43|  4.04k|    run_for_type<bool>(source);
   44|  4.04k|    run_for_type<void*>(source);
   45|  4.04k|    run_for_type<std::string>(source);
   46|  4.04k|    run_for_type<std::wstring>(source);
   47|  4.04k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  4.04k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIcNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.04k|{
   25|  4.04k|    {
   26|  4.04k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.04k|    }
   28|  4.04k|    {
   29|  4.04k|        auto _ =
   30|  4.04k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.04k|    }
   32|  4.04k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.04k|{
   25|  4.04k|    {
   26|  4.04k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.04k|    }
   28|  4.04k|    {
   29|  4.04k|        auto _ =
   30|  4.04k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.04k|    }
   32|  4.04k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.04k|{
   25|  4.04k|    {
   26|  4.04k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.04k|    }
   28|  4.04k|    {
   29|  4.04k|        auto _ =
   30|  4.04k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.04k|    }
   32|  4.04k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.04k|{
   25|  4.04k|    {
   26|  4.04k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.04k|    }
   28|  4.04k|    {
   29|  4.04k|        auto _ =
   30|  4.04k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.04k|    }
   32|  4.04k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.04k|{
   25|  4.04k|    {
   26|  4.04k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.04k|    }
   28|  4.04k|    {
   29|  4.04k|        auto _ =
   30|  4.04k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.04k|    }
   32|  4.04k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEvRT0_:
   24|  4.04k|{
   25|  4.04k|    {
   26|  4.04k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.04k|    }
   28|  4.04k|    {
   29|  4.04k|        auto _ =
   30|  4.04k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.04k|    }
   32|  4.04k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIcS6_EEEEvRT0_:
   24|  4.04k|{
   25|  4.04k|    {
   26|  4.04k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.04k|    }
   28|  4.04k|    {
   29|  4.04k|        auto _ =
   30|  4.04k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.04k|    }
   32|  4.04k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIcNS5_IcEEEEEEvRT0_:
   24|  4.04k|{
   25|  4.04k|    {
   26|  4.04k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.04k|    }
   28|  4.04k|    {
   29|  4.04k|        auto _ =
   30|  4.04k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.04k|    }
   32|  4.04k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEES7_EEvRT0_:
   24|  4.04k|{
   25|  4.04k|    {
   26|  4.04k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.04k|    }
   28|  4.04k|    {
   29|  4.04k|        auto _ =
   30|  4.04k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.04k|    }
   32|  4.04k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT_:
   36|  6.94k|{
   37|  6.94k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  6.94k|    run_for_type<char_type>(source);
   40|  6.94k|    run_for_type<int>(source);
   41|  6.94k|    run_for_type<unsigned>(source);
   42|  6.94k|    run_for_type<double>(source);
   43|  6.94k|    run_for_type<bool>(source);
   44|  6.94k|    run_for_type<void*>(source);
   45|  6.94k|    run_for_type<std::string>(source);
   46|  6.94k|    run_for_type<std::wstring>(source);
   47|  6.94k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  6.94k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIwNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  6.94k|{
   25|  6.94k|    {
   26|  6.94k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  6.94k|    }
   28|  6.94k|    {
   29|  6.94k|        auto _ =
   30|  6.94k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  6.94k|    }
   32|  6.94k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  6.94k|{
   25|  6.94k|    {
   26|  6.94k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  6.94k|    }
   28|  6.94k|    {
   29|  6.94k|        auto _ =
   30|  6.94k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  6.94k|    }
   32|  6.94k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  6.94k|{
   25|  6.94k|    {
   26|  6.94k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  6.94k|    }
   28|  6.94k|    {
   29|  6.94k|        auto _ =
   30|  6.94k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  6.94k|    }
   32|  6.94k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  6.94k|{
   25|  6.94k|    {
   26|  6.94k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  6.94k|    }
   28|  6.94k|    {
   29|  6.94k|        auto _ =
   30|  6.94k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  6.94k|    }
   32|  6.94k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  6.94k|{
   25|  6.94k|    {
   26|  6.94k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  6.94k|    }
   28|  6.94k|    {
   29|  6.94k|        auto _ =
   30|  6.94k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  6.94k|    }
   32|  6.94k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEvRT0_:
   24|  6.94k|{
   25|  6.94k|    {
   26|  6.94k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  6.94k|    }
   28|  6.94k|    {
   29|  6.94k|        auto _ =
   30|  6.94k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  6.94k|    }
   32|  6.94k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIwNS5_IwEEEEEEvRT0_:
   24|  6.94k|{
   25|  6.94k|    {
   26|  6.94k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  6.94k|    }
   28|  6.94k|    {
   29|  6.94k|        auto _ =
   30|  6.94k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  6.94k|    }
   32|  6.94k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIwS6_EEEEvRT0_:
   24|  6.94k|{
   25|  6.94k|    {
   26|  6.94k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  6.94k|    }
   28|  6.94k|    {
   29|  6.94k|        auto _ =
   30|  6.94k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  6.94k|    }
   32|  6.94k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEES7_EEvRT0_:
   24|  6.94k|{
   25|  6.94k|    {
   26|  6.94k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  6.94k|    }
   28|  6.94k|    {
   29|  6.94k|        auto _ =
   30|  6.94k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  6.94k|    }
   32|  6.94k|}

_ZN3scn4fuzz16make_input_viewsENS_2v24spanIKhEE:
   51|  4.04k|{
   52|  4.04k|    SCN_EXPECT(data.size() <= max_input_bytes);
  ------------------
  |  |  242|  4.04k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.04k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|      0|    string_buffer.resize(data.size());
   56|  4.04k|    std::copy(data.begin(), data.end(),
   57|  4.04k|              reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|  4.04k|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|  4.04k|    const auto wsv_reinterpret_size =
   62|  4.04k|        data.size() < sizeof(wchar_t) ? 1 : (data.size() / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 95, False: 3.94k]
  ------------------
   63|  4.04k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|  4.04k|    std::memcpy(wstring_buffer_reinterpreted.data(), data.data(), data.size());
   65|  4.04k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|  4.04k|    std::wstring_view wsv_transcoded;
   69|  4.04k|    if (simdutf::validate_utf8(sv.data(), sv.size())) {
  ------------------
  |  Branch (69:9): [True: 2.90k, False: 1.14k]
  ------------------
   70|  2.90k|        if constexpr (sizeof(wchar_t) == 2) {
  ------------------
  |  Branch (70:23): [Folded - Ignored]
  ------------------
   71|      0|            auto size = simdutf::utf16_length_from_utf8(sv.data(), sv.size());
   72|      0|            wstring_buffer_transcoded_wide.resize(size);
   73|      0|            (void)simdutf::convert_valid_utf8_to_utf16(
   74|      0|                sv.data(), sv.size(),
   75|      0|                reinterpret_cast<char16_t*>(
   76|      0|                    wstring_buffer_transcoded_wide.data()));
   77|      0|        }
   78|  2.90k|        else {
   79|  2.90k|            auto size = simdutf::utf32_length_from_utf8(sv.data(), sv.size());
   80|  2.90k|            wstring_buffer_transcoded_wide.resize(size);
   81|  2.90k|            (void)simdutf::convert_valid_utf8_to_utf32(
   82|  2.90k|                sv.data(), sv.size(),
   83|  2.90k|                reinterpret_cast<char32_t*>(
   84|  2.90k|                    wstring_buffer_transcoded_wide.data()));
   85|  2.90k|        }
   86|  2.90k|        wsv_transcoded = {wstring_buffer_transcoded_wide};
   87|  2.90k|    }
   88|       |
   89|  4.04k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   90|  4.04k|}

