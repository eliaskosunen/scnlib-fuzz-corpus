_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIccEEDaSL_SV_:
  859|    970|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIwcEEDaSL_SV_:
  859|    562|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  859|  3.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3802|  4.08M|{
 3803|  4.08M|    if constexpr (sizeof(U) == 1) {
 3804|  4.08M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|       |    }
 3806|       |    else if constexpr (sizeof(U) == 2) {
 3807|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|       |    }
 3809|       |    else {
 3810|       |        // utf-32
 3811|       |        static_assert(sizeof(U) == 4);
 3812|       |        SCN_UNUSED(ch);
 3813|       |        return 1;
 3814|       |    }
 3815|  4.08M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3766|  4.08M|{
 3767|  4.08M|    static_assert(sizeof(U8) == 1);
 3768|       |
 3769|  4.08M|    SCN_GCC_COMPAT_PUSH
 3770|  4.08M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3771|  4.08M|    constexpr char lengths[] =
 3772|  4.08M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3773|  4.08M|        "\1\1\1\1\1\1\1\1"
 3774|  4.08M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3775|       |                            // byte
 3776|  4.08M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3777|  4.08M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3778|  4.08M|        "\4";               // highest bits 11110 -> 4-byte cp
 3779|  4.08M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3780|  4.08M|    SCN_GCC_COMPAT_POP
 3781|  4.08M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|  3.76M|{
 4009|  3.76M|    if constexpr (sizeof(CharT) == 1) {
 4010|  3.76M|        return decode_utf8_code_point_exhaustive(input);
 4011|       |    }
 4012|       |    else if constexpr (sizeof(CharT) == 2) {
 4013|       |        return decode_utf16_code_point_exhaustive(input);
 4014|       |    }
 4015|       |    else {
 4016|       |        SCN_EXPECT(input.size() == 1);
 4017|       |        auto cp = static_cast<char32_t>(input.front());
 4018|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4019|       |            return invalid_code_point;
 4020|       |        }
 4021|       |        return cp;
 4022|       |    }
 4023|  3.76M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3821|  3.76M|{
 3822|  3.76M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  3.76M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.76M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3823|       |
 3824|  3.76M|    const auto is_trailing_code_unit = [](char ch) {
 3825|  3.76M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|  3.76M|    };
 3827|       |
 3828|  3.76M|    if (input.size() == 1) {
  ------------------
  |  Branch (3828:9): [True: 3.33M, False: 431k]
  ------------------
 3829|  3.33M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3829:13): [True: 84, False: 3.33M]
  ------------------
 3830|     84|            SCN_UNLIKELY_ATTR
 3831|     84|            return invalid_code_point;
 3832|     84|        }
 3833|  3.33M|        return static_cast<char32_t>(input[0]);
 3834|  3.33M|    }
 3835|       |
 3836|   431k|    if (input.size() == 2) {
  ------------------
  |  Branch (3836:9): [True: 392k, False: 39.3k]
  ------------------
 3837|   392k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3837:13): [True: 18, False: 392k]
  ------------------
 3838|     18|            SCN_UNLIKELY_ATTR
 3839|     18|            return invalid_code_point;
 3840|     18|        }
 3841|   392k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3841:13): [True: 10.1k, False: 382k]
  ------------------
 3842|  10.1k|            SCN_UNLIKELY_ATTR
 3843|  10.1k|            return invalid_code_point;
 3844|  10.1k|        }
 3845|       |
 3846|   382k|        char32_t cp{};
 3847|   382k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3848|   382k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3849|   382k|        return cp;
 3850|   392k|    }
 3851|       |
 3852|  39.3k|    if (input.size() == 3) {
  ------------------
  |  Branch (3852:9): [True: 32.0k, False: 7.31k]
  ------------------
 3853|  32.0k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3853:13): [True: 18, False: 32.0k]
  ------------------
 3854|     18|            SCN_UNLIKELY_ATTR
 3855|     18|            return invalid_code_point;
 3856|     18|        }
 3857|  32.0k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3857:13): [True: 4.48k, False: 27.5k]
  ------------------
 3858|  32.0k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3858:13): [True: 388, False: 27.1k]
  ------------------
 3859|  4.87k|            SCN_UNLIKELY_ATTR
 3860|  4.87k|            return invalid_code_point;
 3861|  4.87k|        }
 3862|       |
 3863|  27.1k|        char32_t cp{};
 3864|  27.1k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3865|  27.1k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3866|  27.1k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3867|  27.1k|        return cp;
 3868|  32.0k|    }
 3869|       |
 3870|  7.31k|    if (input.size() == 4) {
  ------------------
  |  Branch (3870:9): [True: 7.31k, False: 0]
  ------------------
 3871|  7.31k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3871:13): [True: 0, False: 7.31k]
  ------------------
 3872|      0|            SCN_UNLIKELY_ATTR
 3873|      0|            return invalid_code_point;
 3874|      0|        }
 3875|  7.31k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3875:13): [True: 860, False: 6.45k]
  ------------------
 3876|    860|            SCN_UNLIKELY_ATTR
 3877|    860|            return invalid_code_point;
 3878|    860|        }
 3879|  6.45k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3879:13): [True: 1.01k, False: 5.44k]
  ------------------
 3880|  6.45k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3880:13): [True: 444, False: 4.99k]
  ------------------
 3881|  6.45k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3881:13): [True: 330, False: 4.66k]
  ------------------
 3882|  1.78k|            SCN_UNLIKELY_ATTR
 3883|  1.78k|            return invalid_code_point;
 3884|  1.78k|        }
 3885|       |
 3886|  4.66k|        char32_t cp{};
 3887|  4.66k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3888|  4.66k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3889|  4.66k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3890|  4.66k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3891|  4.66k|        return cp;
 3892|  6.45k|    }
 3893|       |
 3894|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3895|       |    // gcc 7 thinks we'll get here, even when we won't
 3896|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3897|      0|#endif
 3898|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3899|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3824|   468k|    const auto is_trailing_code_unit = [](char ch) {
 3825|   468k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|   468k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3694|  1.77M|{
 3695|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3696|       |                                          decltype(first), decltype(last)> &&
 3697|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3698|       |        return {first, last};
 3699|       |    }
 3700|  1.77M|    else {
 3701|  1.77M|        return {to_address(first), static_cast<size_t>(std::distance(
 3702|  1.77M|                                       to_address(first), to_address(last)))};
 3703|  1.77M|    }
 3704|  1.77M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  5.39M|{
  326|  5.39M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  5.39M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  5.39M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  5.44M|{
  304|  5.44M|    return p;
  305|  5.44M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3725|  1.25M|{
 3726|       |    if constexpr (std::is_constructible_v<
 3727|       |                      typename std::basic_string_view<CharT>::iterator,
 3728|       |                      decltype(it)> &&
 3729|  1.25M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3730|  1.25M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  1.25M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3731|  1.25M|        return it;
 3732|       |    }
 3733|       |    else {
 3734|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3735|       |    }
 3736|  1.25M|}
_ZN3scn2v34scanIJcERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8877|  6.07k|{
 8878|  6.07k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  6.07k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  6.07k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  6.07k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.07k|    static_cast<    \
  |  |  929|  6.07k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.07k|    static_cast<    \
  |  |  929|  6.07k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  6.07k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJcEEEDav:
 5405|  12.1k|{
 5406|  12.1k|    detail::check_scan_arg_types<Args...>();
 5407|  12.1k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  12.1k|}
_ZN3scn2v36detail20check_scan_arg_typesIJcEEEvv:
 5144|  12.1k|{
 5145|  12.1k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  12.1k|                  "Scan argument types must be default constructible");
 5147|  12.1k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  12.1k|                  "Scan argument types must be Destructible");
 5149|  12.1k|    static_assert(
 5150|  12.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  12.1k|        "Scan argument types must not be references");
 5152|  12.1k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEEC2Ev:
 5357|  12.1k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  12.1k|    {
 5359|  12.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE12make_argptrsIJcEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  12.1k|    {
 5370|  12.1k|        return {detail::make_arg<
 5371|  12.1k|            kind, Context,
 5372|  12.1k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  12.1k|                                 typename Context::char_type>::value>(args)...};
 5374|  12.1k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE12EcvEEPvRT2_:
 5179|  12.1k|{
 5180|  12.1k|    return make_value<Context>(value).ref_value;
 5181|  12.1k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEcEEDaRT0_:
 5129|  12.1k|{
 5130|  12.1k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  12.1k|                                  needs_context_tag>) {
 5134|  12.1k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  12.1k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERc:
 4997|  12.1k|    {
 4998|       |        if constexpr (std::is_same_v<char_type, char> &&
 4999|  12.1k|                      !is_type_disabled<char_type>) {
 5000|  12.1k|            return val;
 5001|       |        }
 5002|       |        else if constexpr (is_type_disabled<char_type>) {
 5003|       |            return unscannable_disabled{val};
 5004|       |        }
 5005|       |        else {
 5006|       |            SCN_UNUSED(val);
 5007|       |            return unscannable_char{};
 5008|       |        }
 5009|  12.1k|    }
_ZN3scn2v36detail15make_value_implIRcEEDaOT_:
 5098|  12.1k|{
 5099|  12.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  12.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  12.1k|    constexpr bool scannable_char =
 5103|  12.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  12.1k|    static_assert(scannable_char,
 5105|  12.1k|                  "Cannot scan an argument of an unsupported character "
 5106|  12.1k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  12.1k|    constexpr bool scannable_const =
 5109|  12.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  12.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  12.1k|    constexpr bool scannable_disabled =
 5113|  12.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  12.1k|    static_assert(scannable_disabled,
 5115|  12.1k|                  "Cannot scan an argument that has been disabled by "
 5116|  12.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  12.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  12.1k|    static_assert(
 5120|  12.1k|        scannable,
 5121|  12.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  12.1k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  12.1k|    return arg_value{arg};
 5125|  12.1k|}
_ZN3scn2v36detail9arg_valueC2IcEERT_:
 4909|  12.1k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  12.1k|    {
 4911|  12.1k|    }
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8664|  54.6k|{
 8665|  54.6k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  54.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8666|  54.6k|}
_ZN3scn2v36detail13vscan_genericIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISN_EEEE:
 8601|  54.6k|{
 8602|  54.6k|    auto buffer = make_scan_buffer(range);
 8603|       |
 8604|  54.6k|    auto result = vscan_impl(buffer, format, args);
 8605|  54.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  54.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 53.0k, False: 1.67k]
  |  |  ------------------
  ------------------
 8606|  53.0k|        return unexpected(result.error());
 8607|  53.0k|    }
 8608|  1.67k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8609|  54.6k|}
_ZN3scn2v36detail16make_scan_bufferINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRKT_:
 4728|   109k|{
 4729|   109k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|   109k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|   109k|                  "\n"
 4733|   109k|                  "Unsupported range type given as input to a scanning "
 4734|   109k|                  "function.\n"
 4735|   109k|                  "A range needs to have a character type (value type) "
 4736|   109k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|   109k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|   109k|                  "to be included.\n"
 4739|   109k|                  "See the scnlib documentation for more details.");
 4740|   109k|    static_assert(
 4741|   109k|        !std::is_same_v<T, custom_char_traits>,
 4742|   109k|        "\n"
 4743|   109k|        "Unsupported range type given as input to a scanning "
 4744|   109k|        "function.\n"
 4745|   109k|        "String types (std::basic_string, and std::basic_string_view) "
 4746|   109k|        "need to use std::char_traits. Strings with custom Traits are "
 4747|   109k|        "not supported.");
 4748|   109k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|   109k|                  "\n"
 4750|   109k|                  "Unsupported range type given as input to a scanning "
 4751|   109k|                  "function.\n"
 4752|   109k|                  "file_marker_found cannot be used as an "
 4753|   109k|                  "source range type to scn::scan.\n"
 4754|   109k|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|   109k|                  "and do not provide an explicit source range, "
 4756|   109k|                  "or use scn::scan with a FILE* directly.");
 4757|   109k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|   109k|                  "\n"
 4759|   109k|                  "Unsupported range type given as input to a scanning "
 4760|   109k|                  "function.\n"
 4761|   109k|                  "In order to be scannable, a range needs to satisfy "
 4762|   109k|                  "`forward_range`. `input_range` is not sufficient.");
 4763|   109k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|   109k|                  "\n"
 4765|   109k|                  "Unsupported range type given as input to a scanning "
 4766|   109k|                  "function.\n"
 4767|   109k|                  "A range needs to model forward_range and have a valid "
 4768|   109k|                  "character type (char or wchar_t) to be scannable.\n"
 4769|   109k|                  "Examples of scannable ranges are std::string, "
 4770|   109k|                  "std::string_view, "
 4771|   109k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|   109k|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|   109k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|   109k|}
_ZN3scn2v36detail17_make_scan_buffer4implIcEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 4620|   109k|{
 4621|   109k|    if constexpr (is_valid_char_type<CharT>) {
 4622|   109k|        return r;
 4623|       |        // return make_string_scan_buffer(r);
 4624|       |    }
 4625|       |    else {
 4626|       |        return invalid_char_type{};
 4627|       |    }
 4628|   109k|}
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1597|   331k|    {
 1598|   331k|        return has_value();
 1599|   331k|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  484|   663k|    {
  485|   663k|        return m_has_value;
  486|   663k|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1603|   326k|    {
 1604|   326k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   326k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   326k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   326k|        return this->get_unexpected().error();
 1606|   326k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   326k|    {
  468|   326k|        return m_unexpected;
  469|   326k|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  360|  1.95M|    {
  361|  1.95M|        return m_unexpected;
  362|  1.95M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  345|  1.10M|        : m_unexpected(std::forward<Err>(e))
  346|  1.10M|    {
  347|  1.10M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  1.10M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  1.10M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|   106k|        : base(unexpect, std::move(e.error())),
 1474|   106k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   106k|    {
 1476|   106k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|   106k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   106k|          m_has_value(false)
  446|   106k|    {
  447|   106k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  354|  1.14M|        : m_unexpected(std::forward<Args>(args)...)
  355|  1.14M|    {
  356|  1.14M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  1.14M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  1.14M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   109k|    {
 1177|   109k|    }
_ZN3scn2v36detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 5932|  3.35k|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|  3.35k|                      ranges::iterator_t<SourceRange>>) {
 5935|  3.35k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|  3.35k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  3.35k|    {
 2724|  3.35k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.35k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  3.35k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  3.35k|    {
 2705|  3.35k|        return decay_copy(t.begin());
 2706|  3.35k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1948|  56.7k|{
 1949|  56.7k|    return SCN_FWD(t);
  ------------------
  |  |  930|  56.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  56.7k|}
_ZN3scn2v36detail27make_vscan_result_range_endINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRT_:
 5919|  3.35k|{
 5920|  3.35k|    return ranges::end(source);
 5921|  3.35k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  3.35k|    {
 2781|  3.35k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.35k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  3.35k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  3.35k|    {
 2763|  3.35k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  3.35k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  3.35k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3310|   592k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   592k|    static_cast<    \
  |  |  929|   592k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   592k|    static_cast<    \
  |  |  929|   592k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|   592k|    {
 3312|   592k|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1652|  4.88k|    {
 1653|  4.88k|        return value();
 1654|  4.88k|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1626|  4.88k|    {
 1627|  4.88k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.88k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.88k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.88k|        return this->get_value();
 1629|  4.88k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  450|  4.88k|    {
  451|  4.88k|        return m_value;
  452|  4.88k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|  3.35k|        : base(std::in_place, std::forward<U>(val)),
 1428|  3.35k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  3.35k|    {
 1430|  3.35k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  435|  3.35k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  3.35k|    {
  437|  3.35k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEcvS6_Ev:
 7985|  12.1k|    {
 7986|  12.1k|        return m_str;
 7987|  12.1k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJcEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  12.1k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  12.1k|    {
 5436|  12.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE12arg_pointersEv:
 5388|  12.1k|    {
 5389|  12.1k|        return m_argptrs;
 5390|  12.1k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5486|   109k|        : m_desc(desc), m_builtin_values(data)
 5487|   109k|    {
 5488|   109k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJcEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  12.1k|{
 8831|  12.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.9k, False: 216]
  |  |  ------------------
  ------------------
 8832|  11.9k|        return unexpected(result.error());
 8833|  11.9k|    }
 8834|    216|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    216|    static_cast<    \
  |  |  929|    216|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    216|    static_cast<    \
  |  |  929|    216|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  12.1k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1597|   109k|    {
 1598|   109k|        return has_value();
 1599|   109k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   218k|    {
  485|   218k|        return m_has_value;
  486|   218k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1603|   106k|    {
 1604|   106k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   106k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   106k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   106k|        return this->get_unexpected().error();
 1606|   106k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   106k|    {
  468|   106k|        return m_unexpected;
  469|   106k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  11.9k|        : base(unexpect, std::move(e.error())),
 1474|  11.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  11.9k|    {
 1476|  11.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  11.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  11.9k|          m_has_value(false)
  446|  11.9k|    {
  447|  11.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  12.1k|    {
 1177|  12.1k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1652|  3.35k|    {
 1653|  3.35k|        return value();
 1654|  3.35k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|  3.35k|    {
 1627|  3.35k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.35k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.35k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.35k|        return this->get_value();
 1629|  3.35k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  3.35k|    {
  451|  3.35k|        return m_value;
  452|  3.35k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJcEEC2ES8_ONSt3__15tupleIJcEEE:
 5838|    216|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    216|    static_cast<    \
  |  |  929|    216|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    216|    static_cast<    \
  |  |  929|    216|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    216|    {
 5840|    216|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5689|  3.35k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|  3.35k|    static_cast<    \
  |  |  929|  3.35k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|  3.35k|    {
 5691|  3.35k|    }
_ZN3scn2v36detail25scan_result_value_storageIJcEEC2EONSt3__15tupleIJcEEE:
 5624|    216|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|    216|    static_cast<    \
  |  |  929|    216|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|    216|    {
 5626|    216|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|    216|        : base(std::in_place, std::forward<U>(val)),
 1428|    216|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    216|    {
 1430|    216|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|    216|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    216|    {
  437|    216|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE4argsEv:
 5383|  12.1k|    {
 5384|  12.1k|        return m_args;
 5385|  12.1k|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7701|   109k|{
 7702|   109k|    return s;
 7703|   109k|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7678|   109k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  12.1k|        : m_str(r.str)
 7981|  12.1k|    {
 7982|  12.1k|    }
_ZN3scn2v34scanIJcENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8944|  6.07k|{
 8945|  6.07k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  6.07k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  6.07k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  6.07k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.07k|    static_cast<    \
  |  |  929|  6.07k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.07k|    static_cast<    \
  |  |  929|  6.07k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  6.07k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS2_6localeEvEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEERKT0_OSB_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8682|  54.6k|{
 8683|  54.6k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  54.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8684|  54.6k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISR_EEEE:
 8617|  54.6k|{
 8618|  54.6k|#if !SCN_DISABLE_LOCALE
 8619|  54.6k|    auto buffer = detail::make_scan_buffer(range);
 8620|       |
 8621|  54.6k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8622|  54.6k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8623|  54.6k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8624|       |
 8625|  54.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  54.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 53.0k, False: 1.67k]
  |  |  ------------------
  ------------------
 8626|  53.0k|        return unexpected(result.error());
 8627|  53.0k|    }
 8628|  1.67k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8629|       |#else
 8630|       |    static_assert(dependent_false<Locale>::value,
 8631|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8632|       |
 8633|       |    return {};
 8634|       |#endif
 8635|  54.6k|}
_ZN3scn2v34scanIJiERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8877|  6.07k|{
 8878|  6.07k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  6.07k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  6.07k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  6.07k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.07k|    static_cast<    \
  |  |  929|  6.07k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.07k|    static_cast<    \
  |  |  929|  6.07k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  6.07k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJiEEEDav:
 5405|  12.1k|{
 5406|  12.1k|    detail::check_scan_arg_types<Args...>();
 5407|  12.1k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  12.1k|}
_ZN3scn2v36detail20check_scan_arg_typesIJiEEEvv:
 5144|  36.4k|{
 5145|  36.4k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  36.4k|                  "Scan argument types must be default constructible");
 5147|  36.4k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  36.4k|                  "Scan argument types must be Destructible");
 5149|  36.4k|    static_assert(
 5150|  36.4k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  36.4k|        "Scan argument types must not be references");
 5152|  36.4k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEEC2Ev:
 5357|  12.1k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  12.1k|    {
 5359|  12.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  12.1k|    {
 5370|  12.1k|        return {detail::make_arg<
 5371|  12.1k|            kind, Context,
 5372|  12.1k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  12.1k|                                 typename Context::char_type>::value>(args)...};
 5374|  12.1k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE3EivEEPvRT2_:
 5179|  12.1k|{
 5180|  12.1k|    return make_value<Context>(value).ref_value;
 5181|  12.1k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEiEEDaRT0_:
 5129|  12.1k|{
 5130|  12.1k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  12.1k|                                  needs_context_tag>) {
 5134|  12.1k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  12.1k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERi:
 4968|  12.1k|    {                                                                        \
 4969|  12.1k|        return val;                                                          \
 4970|  12.1k|    }
_ZN3scn2v36detail15make_value_implIRiEEDaOT_:
 5098|  36.4k|{
 5099|  36.4k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  36.4k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  36.4k|    constexpr bool scannable_char =
 5103|  36.4k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  36.4k|    static_assert(scannable_char,
 5105|  36.4k|                  "Cannot scan an argument of an unsupported character "
 5106|  36.4k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  36.4k|    constexpr bool scannable_const =
 5109|  36.4k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  36.4k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  36.4k|    constexpr bool scannable_disabled =
 5113|  36.4k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  36.4k|    static_assert(scannable_disabled,
 5115|  36.4k|                  "Cannot scan an argument that has been disabled by "
 5116|  36.4k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  36.4k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  36.4k|    static_assert(
 5120|  36.4k|        scannable,
 5121|  36.4k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  36.4k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  36.4k|    return arg_value{arg};
 5125|  36.4k|}
_ZN3scn2v36detail9arg_valueC2IiEERT_:
 4909|  36.4k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  36.4k|    {
 4911|  36.4k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEcvS6_Ev:
 7985|  12.1k|    {
 7986|  12.1k|        return m_str;
 7987|  12.1k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJiEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  12.1k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  12.1k|    {
 5436|  12.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE12arg_pointersEv:
 5388|  12.1k|    {
 5389|  12.1k|        return m_argptrs;
 5390|  12.1k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  12.1k|{
 8831|  12.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.1k, False: 0]
  |  |  ------------------
  ------------------
 8832|  12.1k|        return unexpected(result.error());
 8833|  12.1k|    }
 8834|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  12.1k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  12.1k|        : base(unexpect, std::move(e.error())),
 1474|  12.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  12.1k|    {
 1476|  12.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  12.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  12.1k|          m_has_value(false)
  446|  12.1k|    {
  447|  12.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  12.1k|    {
 1177|  12.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE4argsEv:
 5383|  12.1k|    {
 5384|  12.1k|        return m_args;
 5385|  12.1k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  12.1k|        : m_str(r.str)
 7981|  12.1k|    {
 7982|  12.1k|    }
_ZN3scn2v34scanIJiENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8944|  6.07k|{
 8945|  6.07k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  6.07k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  6.07k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  6.07k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.07k|    static_cast<    \
  |  |  929|  6.07k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.07k|    static_cast<    \
  |  |  929|  6.07k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  6.07k|}
_ZN3scn2v34scanIJjERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8877|  6.07k|{
 8878|  6.07k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  6.07k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  6.07k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  6.07k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.07k|    static_cast<    \
  |  |  929|  6.07k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.07k|    static_cast<    \
  |  |  929|  6.07k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  6.07k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJjEEEDav:
 5405|  12.1k|{
 5406|  12.1k|    detail::check_scan_arg_types<Args...>();
 5407|  12.1k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  12.1k|}
_ZN3scn2v36detail20check_scan_arg_typesIJjEEEvv:
 5144|  36.4k|{
 5145|  36.4k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  36.4k|                  "Scan argument types must be default constructible");
 5147|  36.4k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  36.4k|                  "Scan argument types must be Destructible");
 5149|  36.4k|    static_assert(
 5150|  36.4k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  36.4k|        "Scan argument types must not be references");
 5152|  36.4k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEEC2Ev:
 5357|  12.1k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  12.1k|    {
 5359|  12.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  12.1k|    {
 5370|  12.1k|        return {detail::make_arg<
 5371|  12.1k|            kind, Context,
 5372|  12.1k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  12.1k|                                 typename Context::char_type>::value>(args)...};
 5374|  12.1k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE8EjvEEPvRT2_:
 5179|  12.1k|{
 5180|  12.1k|    return make_value<Context>(value).ref_value;
 5181|  12.1k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEjEEDaRT0_:
 5129|  12.1k|{
 5130|  12.1k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  12.1k|                                  needs_context_tag>) {
 5134|  12.1k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  12.1k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERj:
 4968|  12.1k|    {                                                                        \
 4969|  12.1k|        return val;                                                          \
 4970|  12.1k|    }
_ZN3scn2v36detail15make_value_implIRjEEDaOT_:
 5098|  36.4k|{
 5099|  36.4k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  36.4k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  36.4k|    constexpr bool scannable_char =
 5103|  36.4k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  36.4k|    static_assert(scannable_char,
 5105|  36.4k|                  "Cannot scan an argument of an unsupported character "
 5106|  36.4k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  36.4k|    constexpr bool scannable_const =
 5109|  36.4k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  36.4k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  36.4k|    constexpr bool scannable_disabled =
 5113|  36.4k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  36.4k|    static_assert(scannable_disabled,
 5115|  36.4k|                  "Cannot scan an argument that has been disabled by "
 5116|  36.4k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  36.4k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  36.4k|    static_assert(
 5120|  36.4k|        scannable,
 5121|  36.4k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  36.4k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  36.4k|    return arg_value{arg};
 5125|  36.4k|}
_ZN3scn2v36detail9arg_valueC2IjEERT_:
 4909|  36.4k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  36.4k|    {
 4911|  36.4k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEcvS6_Ev:
 7985|  12.1k|    {
 7986|  12.1k|        return m_str;
 7987|  12.1k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJjEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  12.1k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  12.1k|    {
 5436|  12.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE12arg_pointersEv:
 5388|  12.1k|    {
 5389|  12.1k|        return m_argptrs;
 5390|  12.1k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  12.1k|{
 8831|  12.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.1k, False: 0]
  |  |  ------------------
  ------------------
 8832|  12.1k|        return unexpected(result.error());
 8833|  12.1k|    }
 8834|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  12.1k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  12.1k|        : base(unexpect, std::move(e.error())),
 1474|  12.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  12.1k|    {
 1476|  12.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  12.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  12.1k|          m_has_value(false)
  446|  12.1k|    {
  447|  12.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  12.1k|    {
 1177|  12.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE4argsEv:
 5383|  12.1k|    {
 5384|  12.1k|        return m_args;
 5385|  12.1k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  12.1k|        : m_str(r.str)
 7981|  12.1k|    {
 7982|  12.1k|    }
_ZN3scn2v34scanIJjENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8944|  6.07k|{
 8945|  6.07k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  6.07k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  6.07k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  6.07k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.07k|    static_cast<    \
  |  |  929|  6.07k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.07k|    static_cast<    \
  |  |  929|  6.07k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  6.07k|}
_ZN3scn2v34scanIJdERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8877|  6.07k|{
 8878|  6.07k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  6.07k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  6.07k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  6.07k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.07k|    static_cast<    \
  |  |  929|  6.07k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.07k|    static_cast<    \
  |  |  929|  6.07k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  6.07k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDav:
 5405|  12.1k|{
 5406|  12.1k|    detail::check_scan_arg_types<Args...>();
 5407|  12.1k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  12.1k|}
_ZN3scn2v36detail20check_scan_arg_typesIJdEEEvv:
 5144|  36.4k|{
 5145|  36.4k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  36.4k|                  "Scan argument types must be default constructible");
 5147|  36.4k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  36.4k|                  "Scan argument types must be Destructible");
 5149|  36.4k|    static_assert(
 5150|  36.4k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  36.4k|        "Scan argument types must not be references");
 5152|  36.4k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2Ev:
 5357|  12.1k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  12.1k|    {
 5359|  12.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  12.1k|    {
 5370|  12.1k|        return {detail::make_arg<
 5371|  12.1k|            kind, Context,
 5372|  12.1k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  12.1k|                                 typename Context::char_type>::value>(args)...};
 5374|  12.1k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5179|  12.1k|{
 5180|  12.1k|    return make_value<Context>(value).ref_value;
 5181|  12.1k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
 5129|  12.1k|{
 5130|  12.1k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  12.1k|                                  needs_context_tag>) {
 5134|  12.1k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  12.1k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERd:
 4968|  12.1k|    {                                                                        \
 4969|  12.1k|        return val;                                                          \
 4970|  12.1k|    }
_ZN3scn2v36detail15make_value_implIRdEEDaOT_:
 5098|  36.4k|{
 5099|  36.4k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  36.4k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  36.4k|    constexpr bool scannable_char =
 5103|  36.4k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  36.4k|    static_assert(scannable_char,
 5105|  36.4k|                  "Cannot scan an argument of an unsupported character "
 5106|  36.4k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  36.4k|    constexpr bool scannable_const =
 5109|  36.4k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  36.4k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  36.4k|    constexpr bool scannable_disabled =
 5113|  36.4k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  36.4k|    static_assert(scannable_disabled,
 5115|  36.4k|                  "Cannot scan an argument that has been disabled by "
 5116|  36.4k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  36.4k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  36.4k|    static_assert(
 5120|  36.4k|        scannable,
 5121|  36.4k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  36.4k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  36.4k|    return arg_value{arg};
 5125|  36.4k|}
_ZN3scn2v36detail9arg_valueC2IdEERT_:
 4909|  36.4k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  36.4k|    {
 4911|  36.4k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEcvS6_Ev:
 7985|  12.1k|    {
 7986|  12.1k|        return m_str;
 7987|  12.1k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  12.1k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  12.1k|    {
 5436|  12.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12arg_pointersEv:
 5388|  12.1k|    {
 5389|  12.1k|        return m_argptrs;
 5390|  12.1k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  12.1k|{
 8831|  12.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.1k, False: 0]
  |  |  ------------------
  ------------------
 8832|  12.1k|        return unexpected(result.error());
 8833|  12.1k|    }
 8834|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  12.1k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  12.1k|        : base(unexpect, std::move(e.error())),
 1474|  12.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  12.1k|    {
 1476|  12.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  12.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  12.1k|          m_has_value(false)
  446|  12.1k|    {
  447|  12.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  12.1k|    {
 1177|  12.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE4argsEv:
 5383|  12.1k|    {
 5384|  12.1k|        return m_args;
 5385|  12.1k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  12.1k|        : m_str(r.str)
 7981|  12.1k|    {
 7982|  12.1k|    }
_ZN3scn2v34scanIJdENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8944|  6.07k|{
 8945|  6.07k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  6.07k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  6.07k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  6.07k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.07k|    static_cast<    \
  |  |  929|  6.07k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.07k|    static_cast<    \
  |  |  929|  6.07k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  6.07k|}
_ZN3scn2v34scanIJbERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8877|  6.07k|{
 8878|  6.07k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  6.07k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  6.07k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  6.07k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.07k|    static_cast<    \
  |  |  929|  6.07k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.07k|    static_cast<    \
  |  |  929|  6.07k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  6.07k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJbEEEDav:
 5405|  12.1k|{
 5406|  12.1k|    detail::check_scan_arg_types<Args...>();
 5407|  12.1k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  12.1k|}
_ZN3scn2v36detail20check_scan_arg_typesIJbEEEvv:
 5144|  36.4k|{
 5145|  36.4k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  36.4k|                  "Scan argument types must be default constructible");
 5147|  36.4k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  36.4k|                  "Scan argument types must be Destructible");
 5149|  36.4k|    static_assert(
 5150|  36.4k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  36.4k|        "Scan argument types must not be references");
 5152|  36.4k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEEC2Ev:
 5357|  12.1k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  12.1k|    {
 5359|  12.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  12.1k|    {
 5370|  12.1k|        return {detail::make_arg<
 5371|  12.1k|            kind, Context,
 5372|  12.1k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  12.1k|                                 typename Context::char_type>::value>(args)...};
 5374|  12.1k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE11EbvEEPvRT2_:
 5179|  12.1k|{
 5180|  12.1k|    return make_value<Context>(value).ref_value;
 5181|  12.1k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEbEEDaRT0_:
 5129|  12.1k|{
 5130|  12.1k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  12.1k|                                  needs_context_tag>) {
 5134|  12.1k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  12.1k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERb:
 4968|  12.1k|    {                                                                        \
 4969|  12.1k|        return val;                                                          \
 4970|  12.1k|    }
_ZN3scn2v36detail15make_value_implIRbEEDaOT_:
 5098|  36.4k|{
 5099|  36.4k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  36.4k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  36.4k|    constexpr bool scannable_char =
 5103|  36.4k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  36.4k|    static_assert(scannable_char,
 5105|  36.4k|                  "Cannot scan an argument of an unsupported character "
 5106|  36.4k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  36.4k|    constexpr bool scannable_const =
 5109|  36.4k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  36.4k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  36.4k|    constexpr bool scannable_disabled =
 5113|  36.4k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  36.4k|    static_assert(scannable_disabled,
 5115|  36.4k|                  "Cannot scan an argument that has been disabled by "
 5116|  36.4k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  36.4k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  36.4k|    static_assert(
 5120|  36.4k|        scannable,
 5121|  36.4k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  36.4k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  36.4k|    return arg_value{arg};
 5125|  36.4k|}
_ZN3scn2v36detail9arg_valueC2IbEERT_:
 4909|  36.4k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  36.4k|    {
 4911|  36.4k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEcvS6_Ev:
 7985|  12.1k|    {
 7986|  12.1k|        return m_str;
 7987|  12.1k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJbEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  12.1k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  12.1k|    {
 5436|  12.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE12arg_pointersEv:
 5388|  12.1k|    {
 5389|  12.1k|        return m_argptrs;
 5390|  12.1k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJbEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  12.1k|{
 8831|  12.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.1k, False: 0]
  |  |  ------------------
  ------------------
 8832|  12.1k|        return unexpected(result.error());
 8833|  12.1k|    }
 8834|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  12.1k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  12.1k|        : base(unexpect, std::move(e.error())),
 1474|  12.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  12.1k|    {
 1476|  12.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  12.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  12.1k|          m_has_value(false)
  446|  12.1k|    {
  447|  12.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  12.1k|    {
 1177|  12.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE4argsEv:
 5383|  12.1k|    {
 5384|  12.1k|        return m_args;
 5385|  12.1k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  12.1k|        : m_str(r.str)
 7981|  12.1k|    {
 7982|  12.1k|    }
_ZN3scn2v34scanIJbENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8944|  6.07k|{
 8945|  6.07k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  6.07k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  6.07k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  6.07k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.07k|    static_cast<    \
  |  |  929|  6.07k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.07k|    static_cast<    \
  |  |  929|  6.07k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  6.07k|}
_ZN3scn2v34scanIJPvERNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
 8877|  6.07k|{
 8878|  6.07k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  6.07k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  6.07k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  6.07k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.07k|    static_cast<    \
  |  |  929|  6.07k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.07k|    static_cast<    \
  |  |  929|  6.07k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  6.07k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJPvEEEDav:
 5405|  12.1k|{
 5406|  12.1k|    detail::check_scan_arg_types<Args...>();
 5407|  12.1k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  12.1k|}
_ZN3scn2v36detail20check_scan_arg_typesIJPvEEEvv:
 5144|  36.4k|{
 5145|  36.4k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  36.4k|                  "Scan argument types must be default constructible");
 5147|  36.4k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  36.4k|                  "Scan argument types must be Destructible");
 5149|  36.4k|    static_assert(
 5150|  36.4k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  36.4k|        "Scan argument types must not be references");
 5152|  36.4k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEEC2Ev:
 5357|  12.1k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  12.1k|    {
 5359|  12.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE12make_argptrsIJS5_EEENSt3__15arrayIS5_Lm1EEEDpRT_:
 5369|  12.1k|    {
 5370|  12.1k|        return {detail::make_arg<
 5371|  12.1k|            kind, Context,
 5372|  12.1k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  12.1k|                                 typename Context::char_type>::value>(args)...};
 5374|  12.1k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE15EPvvEES7_RT2_:
 5179|  12.1k|{
 5180|  12.1k|    return make_value<Context>(value).ref_value;
 5181|  12.1k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEPvEEDaRT0_:
 5129|  12.1k|{
 5130|  12.1k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  12.1k|                                  needs_context_tag>) {
 5134|  12.1k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  12.1k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERPv:
 4968|  12.1k|    {                                                                        \
 4969|  12.1k|        return val;                                                          \
 4970|  12.1k|    }
_ZN3scn2v36detail15make_value_implIRPvEEDaOT_:
 5098|  36.4k|{
 5099|  36.4k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  36.4k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  36.4k|    constexpr bool scannable_char =
 5103|  36.4k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  36.4k|    static_assert(scannable_char,
 5105|  36.4k|                  "Cannot scan an argument of an unsupported character "
 5106|  36.4k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  36.4k|    constexpr bool scannable_const =
 5109|  36.4k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  36.4k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  36.4k|    constexpr bool scannable_disabled =
 5113|  36.4k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  36.4k|    static_assert(scannable_disabled,
 5115|  36.4k|                  "Cannot scan an argument that has been disabled by "
 5116|  36.4k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  36.4k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  36.4k|    static_assert(
 5120|  36.4k|        scannable,
 5121|  36.4k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  36.4k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  36.4k|    return arg_value{arg};
 5125|  36.4k|}
_ZN3scn2v36detail9arg_valueC2IPvEERT_:
 4909|  36.4k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  36.4k|    {
 4911|  36.4k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEcvS6_Ev:
 7985|  12.1k|    {
 7986|  12.1k|        return m_str;
 7987|  12.1k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJPvEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  12.1k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  12.1k|    {
 5436|  12.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE12arg_pointersEv:
 5388|  12.1k|    {
 5389|  12.1k|        return m_argptrs;
 5390|  12.1k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJPvEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSA_ISC_EEONSt3__15tupleIJSE_EEE:
 8830|  12.1k|{
 8831|  12.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.1k, False: 0]
  |  |  ------------------
  ------------------
 8832|  12.1k|        return unexpected(result.error());
 8833|  12.1k|    }
 8834|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  12.1k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELSA_0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSA_0EEEONS0_10unexpectedISH_EE:
 1473|  12.1k|        : base(unexpect, std::move(e.error())),
 1474|  12.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  12.1k|    {
 1476|  12.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  444|  12.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  12.1k|          m_has_value(false)
  446|  12.1k|    {
  447|  12.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  12.1k|    {
 1177|  12.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE4argsEv:
 5383|  12.1k|    {
 5384|  12.1k|        return m_args;
 5385|  12.1k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  12.1k|        : m_str(r.str)
 7981|  12.1k|    {
 7982|  12.1k|    }
_ZN3scn2v34scanIJPvENSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
 8944|  6.07k|{
 8945|  6.07k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  6.07k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  6.07k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  6.07k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.07k|    static_cast<    \
  |  |  929|  6.07k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.07k|    static_cast<    \
  |  |  929|  6.07k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  6.07k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIcS5_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSW_ISQ_E4typeEEEE:
 8877|  6.07k|{
 8878|  6.07k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  6.07k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  6.07k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  6.07k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.07k|    static_cast<    \
  |  |  929|  6.07k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.07k|    static_cast<    \
  |  |  929|  6.07k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  6.07k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5405|  12.1k|{
 5406|  12.1k|    detail::check_scan_arg_types<Args...>();
 5407|  12.1k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  12.1k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEvv:
 5144|  36.4k|{
 5145|  36.4k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  36.4k|                  "Scan argument types must be default constructible");
 5147|  36.4k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  36.4k|                  "Scan argument types must be Destructible");
 5149|  36.4k|    static_assert(
 5150|  36.4k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  36.4k|        "Scan argument types must not be references");
 5152|  36.4k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5357|  12.1k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  12.1k|    {
 5359|  12.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5369|  12.1k|    {
 5370|  12.1k|        return {detail::make_arg<
 5371|  12.1k|            kind, Context,
 5372|  12.1k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  12.1k|                                 typename Context::char_type>::value>(args)...};
 5374|  12.1k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5179|  12.1k|{
 5180|  12.1k|    return make_value<Context>(value).ref_value;
 5181|  12.1k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5129|  12.1k|{
 5130|  12.1k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  12.1k|                                  needs_context_tag>) {
 5134|  12.1k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  12.1k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4968|  12.1k|    {                                                                        \
 4969|  12.1k|        return val;                                                          \
 4970|  12.1k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEDaOT_:
 5098|  36.4k|{
 5099|  36.4k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  36.4k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  36.4k|    constexpr bool scannable_char =
 5103|  36.4k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  36.4k|    static_assert(scannable_char,
 5105|  36.4k|                  "Cannot scan an argument of an unsupported character "
 5106|  36.4k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  36.4k|    constexpr bool scannable_const =
 5109|  36.4k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  36.4k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  36.4k|    constexpr bool scannable_disabled =
 5113|  36.4k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  36.4k|    static_assert(scannable_disabled,
 5115|  36.4k|                  "Cannot scan an argument that has been disabled by "
 5116|  36.4k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  36.4k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  36.4k|    static_assert(
 5120|  36.4k|        scannable,
 5121|  36.4k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  36.4k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  36.4k|    return arg_value{arg};
 5125|  36.4k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 4909|  36.4k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  36.4k|    {
 4911|  36.4k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEcvS6_Ev:
 7985|  12.1k|    {
 7986|  12.1k|        return m_str;
 7987|  12.1k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  12.1k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  12.1k|    {
 5436|  12.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5388|  12.1k|    {
 5389|  12.1k|        return m_argptrs;
 5390|  12.1k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8830|  12.1k|{
 8831|  12.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.1k, False: 1.04k]
  |  |  ------------------
  ------------------
 8832|  11.1k|        return unexpected(result.error());
 8833|  11.1k|    }
 8834|  1.04k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.04k|    static_cast<    \
  |  |  929|  1.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.04k|    static_cast<    \
  |  |  929|  1.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  12.1k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1473|  11.1k|        : base(unexpect, std::move(e.error())),
 1474|  11.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  11.1k|    {
 1476|  11.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  624|  11.1k|        : m_has_value(false)
  625|  11.1k|    {
  626|  11.1k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  11.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  11.1k|    {
  689|  11.1k|        scn::detail::construct_at(unexpected_ptr(),
  690|  11.1k|                                  std::forward<Args>(args)...);
  691|  11.1k|        m_has_value = false;
  692|  11.1k|    }
_ZN3scn2v36detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  391|  70.0k|{
  392|  70.0k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  70.0k|        T(std::forward<Args>(args)...);
  394|  70.0k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  22.2k|    {
  718|  22.2k|        return reinterpret_cast<unexpected<E>*>(
  719|  22.2k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  22.2k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  22.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  12.1k|    {
 1177|  12.1k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5838|  1.04k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  1.04k|    static_cast<    \
  |  |  929|  1.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  1.04k|    static_cast<    \
  |  |  929|  1.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  1.04k|    {
 5840|  1.04k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2EONS3_5tupleIJS9_EEE:
 5624|  1.52k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|  1.52k|    static_cast<    \
  |  |  929|  1.52k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|  1.52k|    {
 5626|  1.52k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1427|  1.04k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.04k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.04k|    {
 1430|  1.04k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  614|  1.04k|        : m_has_value(true)
  615|  1.04k|    {
  616|  1.04k|        construct(std::forward<Args>(args)...);
  617|  1.04k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|  1.04k|    {
  682|  1.04k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|  1.04k|        m_has_value = true;
  684|  1.04k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|  1.04k|{
  392|  1.04k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  1.04k|        T(std::forward<Args>(args)...);
  394|  1.04k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5831|  1.04k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  2.09k|    {
  706|  2.09k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  2.09k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  2.09k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5835|  2.09k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5383|  12.1k|    {
 5384|  12.1k|        return m_args;
 5385|  12.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5380|  12.1k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  12.1k|        : m_str(r.str)
 7981|  12.1k|    {
 7982|  12.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  12.1k|    {
  631|  12.1k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 1.04k, False: 11.1k]
  ------------------
  632|  1.04k|            destroy_value();
  633|  1.04k|        }
  634|  11.1k|        else {
  635|  11.1k|            destroy_unexpected();
  636|  11.1k|        }
  637|  12.1k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  12.1k|    {
  675|  12.1k|        return m_has_value;
  676|  12.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|  1.04k|    {
  696|  1.04k|        scn::detail::destroy_at(value_ptr());
  697|  1.04k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  397|  1.04k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|  1.04k|    else {
  404|  1.04k|        p->~T();
  405|  1.04k|    }
  406|  1.04k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  11.1k|    {
  700|  11.1k|        scn::detail::destroy_at(unexpected_ptr());
  701|  11.1k|    }
_ZN3scn2v36detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  397|  70.0k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|  70.0k|    else {
  404|  70.0k|        p->~T();
  405|  70.0k|    }
  406|  70.0k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIcS5_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNS10_ISR_E4typeEEEE:
 8944|  6.07k|{
 8945|  6.07k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  6.07k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  6.07k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  6.07k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.07k|    static_cast<    \
  |  |  929|  6.07k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.07k|    static_cast<    \
  |  |  929|  6.07k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  6.07k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIcNS4_IcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNSX_ISR_E4typeEEEE:
 8877|  6.07k|{
 8878|  6.07k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  6.07k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  6.07k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  6.07k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.07k|    static_cast<    \
  |  |  929|  6.07k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.07k|    static_cast<    \
  |  |  929|  6.07k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  6.07k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5405|  12.1k|{
 5406|  12.1k|    detail::check_scan_arg_types<Args...>();
 5407|  12.1k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  12.1k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEvv:
 5144|  36.4k|{
 5145|  36.4k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  36.4k|                  "Scan argument types must be default constructible");
 5147|  36.4k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  36.4k|                  "Scan argument types must be Destructible");
 5149|  36.4k|    static_assert(
 5150|  36.4k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  36.4k|        "Scan argument types must not be references");
 5152|  36.4k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5357|  12.1k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  12.1k|    {
 5359|  12.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5369|  12.1k|    {
 5370|  12.1k|        return {detail::make_arg<
 5371|  12.1k|            kind, Context,
 5372|  12.1k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  12.1k|                                 typename Context::char_type>::value>(args)...};
 5374|  12.1k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5179|  12.1k|{
 5180|  12.1k|    return make_value<Context>(value).ref_value;
 5181|  12.1k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5129|  12.1k|{
 5130|  12.1k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  12.1k|                                  needs_context_tag>) {
 5134|  12.1k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  12.1k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4968|  12.1k|    {                                                                        \
 4969|  12.1k|        return val;                                                          \
 4970|  12.1k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEDaOT_:
 5098|  36.4k|{
 5099|  36.4k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  36.4k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  36.4k|    constexpr bool scannable_char =
 5103|  36.4k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  36.4k|    static_assert(scannable_char,
 5105|  36.4k|                  "Cannot scan an argument of an unsupported character "
 5106|  36.4k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  36.4k|    constexpr bool scannable_const =
 5109|  36.4k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  36.4k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  36.4k|    constexpr bool scannable_disabled =
 5113|  36.4k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  36.4k|    static_assert(scannable_disabled,
 5115|  36.4k|                  "Cannot scan an argument that has been disabled by "
 5116|  36.4k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  36.4k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  36.4k|    static_assert(
 5120|  36.4k|        scannable,
 5121|  36.4k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  36.4k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  36.4k|    return arg_value{arg};
 5125|  36.4k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 4909|  36.4k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  36.4k|    {
 4911|  36.4k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEcvS6_Ev:
 7985|  12.1k|    {
 7986|  12.1k|        return m_str;
 7987|  12.1k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  12.1k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  12.1k|    {
 5436|  12.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5388|  12.1k|    {
 5389|  12.1k|        return m_argptrs;
 5390|  12.1k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8830|  12.1k|{
 8831|  12.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.1k, False: 1.04k]
  |  |  ------------------
  ------------------
 8832|  11.1k|        return unexpected(result.error());
 8833|  11.1k|    }
 8834|  1.04k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.04k|    static_cast<    \
  |  |  929|  1.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.04k|    static_cast<    \
  |  |  929|  1.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  12.1k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1473|  11.1k|        : base(unexpect, std::move(e.error())),
 1474|  11.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  11.1k|    {
 1476|  11.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  624|  11.1k|        : m_has_value(false)
  625|  11.1k|    {
  626|  11.1k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  11.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  11.1k|    {
  689|  11.1k|        scn::detail::construct_at(unexpected_ptr(),
  690|  11.1k|                                  std::forward<Args>(args)...);
  691|  11.1k|        m_has_value = false;
  692|  11.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  22.2k|    {
  718|  22.2k|        return reinterpret_cast<unexpected<E>*>(
  719|  22.2k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  22.2k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  22.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  12.1k|    {
 1177|  12.1k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5838|  1.04k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  1.04k|    static_cast<    \
  |  |  929|  1.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  1.04k|    static_cast<    \
  |  |  929|  1.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  1.04k|    {
 5840|  1.04k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2EONS3_5tupleIJS9_EEE:
 5624|  1.52k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|  1.52k|    static_cast<    \
  |  |  929|  1.52k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|  1.52k|    {
 5626|  1.52k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1427|  1.04k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.04k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.04k|    {
 1430|  1.04k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  614|  1.04k|        : m_has_value(true)
  615|  1.04k|    {
  616|  1.04k|        construct(std::forward<Args>(args)...);
  617|  1.04k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|  1.04k|    {
  682|  1.04k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|  1.04k|        m_has_value = true;
  684|  1.04k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|  1.04k|{
  392|  1.04k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  1.04k|        T(std::forward<Args>(args)...);
  394|  1.04k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5831|  1.04k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  2.09k|    {
  706|  2.09k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  2.09k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  2.09k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5835|  2.09k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5383|  12.1k|    {
 5384|  12.1k|        return m_args;
 5385|  12.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5380|  12.1k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  12.1k|        : m_str(r.str)
 7981|  12.1k|    {
 7982|  12.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  12.1k|    {
  631|  12.1k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 1.04k, False: 11.1k]
  ------------------
  632|  1.04k|            destroy_value();
  633|  1.04k|        }
  634|  11.1k|        else {
  635|  11.1k|            destroy_unexpected();
  636|  11.1k|        }
  637|  12.1k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  12.1k|    {
  675|  12.1k|        return m_has_value;
  676|  12.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|  1.04k|    {
  696|  1.04k|        scn::detail::destroy_at(value_ptr());
  697|  1.04k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  397|  1.04k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|  1.04k|    else {
  404|  1.04k|        p->~T();
  405|  1.04k|    }
  406|  1.04k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  11.1k|    {
  700|  11.1k|        scn::detail::destroy_at(unexpected_ptr());
  701|  11.1k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIcNS4_IcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNS11_ISS_E4typeEEEE:
 8944|  6.07k|{
 8945|  6.07k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  6.07k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  6.07k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  6.07k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.07k|    static_cast<    \
  |  |  929|  6.07k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.07k|    static_cast<    \
  |  |  929|  6.07k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  6.07k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEERS6_vEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8877|  6.07k|{
 8878|  6.07k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  6.07k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  6.07k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  6.07k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.07k|    static_cast<    \
  |  |  929|  6.07k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.07k|    static_cast<    \
  |  |  929|  6.07k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  6.07k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEEDav:
 5405|  12.1k|{
 5406|  12.1k|    detail::check_scan_arg_types<Args...>();
 5407|  12.1k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  12.1k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEvv:
 5144|  12.1k|{
 5145|  12.1k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  12.1k|                  "Scan argument types must be default constructible");
 5147|  12.1k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  12.1k|                  "Scan argument types must be Destructible");
 5149|  12.1k|    static_assert(
 5150|  12.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  12.1k|        "Scan argument types must not be references");
 5152|  12.1k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEC2Ev:
 5357|  12.1k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  12.1k|    {
 5359|  12.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5369|  12.1k|    {
 5370|  12.1k|        return {detail::make_arg<
 5371|  12.1k|            kind, Context,
 5372|  12.1k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  12.1k|                                 typename Context::char_type>::value>(args)...};
 5374|  12.1k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE19ENSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEvEEPvRT2_:
 5179|  12.1k|{
 5180|  12.1k|    return make_value<Context>(value).ref_value;
 5181|  12.1k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDaRT0_:
 5129|  12.1k|{
 5130|  12.1k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  12.1k|                                  needs_context_tag>) {
 5134|  12.1k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  12.1k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 4968|  12.1k|    {                                                                        \
 4969|  12.1k|        return val;                                                          \
 4970|  12.1k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 5098|  12.1k|{
 5099|  12.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  12.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  12.1k|    constexpr bool scannable_char =
 5103|  12.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  12.1k|    static_assert(scannable_char,
 5105|  12.1k|                  "Cannot scan an argument of an unsupported character "
 5106|  12.1k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  12.1k|    constexpr bool scannable_const =
 5109|  12.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  12.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  12.1k|    constexpr bool scannable_disabled =
 5113|  12.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  12.1k|    static_assert(scannable_disabled,
 5115|  12.1k|                  "Cannot scan an argument that has been disabled by "
 5116|  12.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  12.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  12.1k|    static_assert(
 5120|  12.1k|        scannable,
 5121|  12.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  12.1k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  12.1k|    return arg_value{arg};
 5125|  12.1k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 4909|  12.1k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  12.1k|    {
 4911|  12.1k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEcvS6_Ev:
 7985|  12.1k|    {
 7986|  12.1k|        return m_str;
 7987|  12.1k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  12.1k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  12.1k|    {
 5436|  12.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12arg_pointersEv:
 5388|  12.1k|    {
 5389|  12.1k|        return m_argptrs;
 5390|  12.1k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8830|  12.1k|{
 8831|  12.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.1k, False: 1.04k]
  |  |  ------------------
  ------------------
 8832|  11.1k|        return unexpected(result.error());
 8833|  11.1k|    }
 8834|  1.04k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.04k|    static_cast<    \
  |  |  929|  1.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.04k|    static_cast<    \
  |  |  929|  1.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  12.1k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1473|  11.1k|        : base(unexpect, std::move(e.error())),
 1474|  11.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  11.1k|    {
 1476|  11.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  444|  11.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  11.1k|          m_has_value(false)
  446|  11.1k|    {
  447|  11.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  12.1k|    {
 1177|  12.1k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5838|  1.04k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  1.04k|    static_cast<    \
  |  |  929|  1.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  1.04k|    static_cast<    \
  |  |  929|  1.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  1.04k|    {
 5840|  1.04k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2EONS3_5tupleIJS7_EEE:
 5624|  1.04k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|  1.04k|    static_cast<    \
  |  |  929|  1.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|  1.04k|    {
 5626|  1.04k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1427|  1.04k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.04k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.04k|    {
 1430|  1.04k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  435|  1.04k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.04k|    {
  437|  1.04k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE4argsEv:
 5383|  12.1k|    {
 5384|  12.1k|        return m_args;
 5385|  12.1k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  12.1k|        : m_str(r.str)
 7981|  12.1k|    {
 7982|  12.1k|    }
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeERS6_vvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8944|  6.07k|{
 8945|  6.07k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  6.07k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  6.07k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  6.07k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.07k|    static_cast<    \
  |  |  929|  6.07k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.07k|    static_cast<    \
  |  |  929|  6.07k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  6.07k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJwEEEDav:
 5405|  24.3k|{
 5406|  24.3k|    detail::check_scan_arg_types<Args...>();
 5407|  24.3k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  24.3k|}
_ZN3scn2v36detail20check_scan_arg_typesIJwEEEvv:
 5144|  24.3k|{
 5145|  24.3k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  24.3k|                  "Scan argument types must be default constructible");
 5147|  24.3k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  24.3k|                  "Scan argument types must be Destructible");
 5149|  24.3k|    static_assert(
 5150|  24.3k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  24.3k|        "Scan argument types must not be references");
 5152|  24.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEEC2Ev:
 5357|  24.3k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  24.3k|    {
 5359|  24.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE12make_argptrsIJwEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  24.3k|    {
 5370|  24.3k|        return {detail::make_arg<
 5371|  24.3k|            kind, Context,
 5372|  24.3k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  24.3k|                                 typename Context::char_type>::value>(args)...};
 5374|  24.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE13EwvEEPvRT2_:
 5179|  24.3k|{
 5180|  24.3k|    return make_value<Context>(value).ref_value;
 5181|  24.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEwEEDaRT0_:
 5129|  24.3k|{
 5130|  24.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  24.3k|                                  needs_context_tag>) {
 5134|  24.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  24.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  24.3k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERw:
 4968|  24.3k|    {                                                                        \
 4969|  24.3k|        return val;                                                          \
 4970|  24.3k|    }
_ZN3scn2v36detail15make_value_implIRwEEDaOT_:
 5098|  24.3k|{
 5099|  24.3k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  24.3k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  24.3k|    constexpr bool scannable_char =
 5103|  24.3k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  24.3k|    static_assert(scannable_char,
 5105|  24.3k|                  "Cannot scan an argument of an unsupported character "
 5106|  24.3k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  24.3k|    constexpr bool scannable_const =
 5109|  24.3k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  24.3k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  24.3k|    constexpr bool scannable_disabled =
 5113|  24.3k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  24.3k|    static_assert(scannable_disabled,
 5115|  24.3k|                  "Cannot scan an argument that has been disabled by "
 5116|  24.3k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  24.3k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  24.3k|    static_assert(
 5120|  24.3k|        scannable,
 5121|  24.3k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  24.3k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  24.3k|    return arg_value{arg};
 5125|  24.3k|}
_ZN3scn2v36detail9arg_valueC2IwEERT_:
 4909|  24.3k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  24.3k|    {
 4911|  24.3k|    }
_ZN3scn2v36detail13vscan_genericIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISN_EEEE:
 8601|   109k|{
 8602|   109k|    auto buffer = make_scan_buffer(range);
 8603|       |
 8604|   109k|    auto result = vscan_impl(buffer, format, args);
 8605|   109k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 108k, False: 763]
  |  |  ------------------
  ------------------
 8606|   108k|        return unexpected(result.error());
 8607|   108k|    }
 8608|    763|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|    763|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8609|   109k|}
_ZN3scn2v36detail16make_scan_bufferINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRKT_:
 4728|   218k|{
 4729|   218k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|   218k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|   218k|                  "\n"
 4733|   218k|                  "Unsupported range type given as input to a scanning "
 4734|   218k|                  "function.\n"
 4735|   218k|                  "A range needs to have a character type (value type) "
 4736|   218k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|   218k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|   218k|                  "to be included.\n"
 4739|   218k|                  "See the scnlib documentation for more details.");
 4740|   218k|    static_assert(
 4741|   218k|        !std::is_same_v<T, custom_char_traits>,
 4742|   218k|        "\n"
 4743|   218k|        "Unsupported range type given as input to a scanning "
 4744|   218k|        "function.\n"
 4745|   218k|        "String types (std::basic_string, and std::basic_string_view) "
 4746|   218k|        "need to use std::char_traits. Strings with custom Traits are "
 4747|   218k|        "not supported.");
 4748|   218k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|   218k|                  "\n"
 4750|   218k|                  "Unsupported range type given as input to a scanning "
 4751|   218k|                  "function.\n"
 4752|   218k|                  "file_marker_found cannot be used as an "
 4753|   218k|                  "source range type to scn::scan.\n"
 4754|   218k|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|   218k|                  "and do not provide an explicit source range, "
 4756|   218k|                  "or use scn::scan with a FILE* directly.");
 4757|   218k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|   218k|                  "\n"
 4759|   218k|                  "Unsupported range type given as input to a scanning "
 4760|   218k|                  "function.\n"
 4761|   218k|                  "In order to be scannable, a range needs to satisfy "
 4762|   218k|                  "`forward_range`. `input_range` is not sufficient.");
 4763|   218k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|   218k|                  "\n"
 4765|   218k|                  "Unsupported range type given as input to a scanning "
 4766|   218k|                  "function.\n"
 4767|   218k|                  "A range needs to model forward_range and have a valid "
 4768|   218k|                  "character type (char or wchar_t) to be scannable.\n"
 4769|   218k|                  "Examples of scannable ranges are std::string, "
 4770|   218k|                  "std::string_view, "
 4771|   218k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|   218k|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|   218k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|   218k|}
_ZN3scn2v36detail17_make_scan_buffer4implIwEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 4620|   218k|{
 4621|   218k|    if constexpr (is_valid_char_type<CharT>) {
 4622|   218k|        return r;
 4623|       |        // return make_string_scan_buffer(r);
 4624|       |    }
 4625|       |    else {
 4626|       |        return invalid_char_type{};
 4627|       |    }
 4628|   218k|}
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|   217k|        : base(unexpect, std::move(e.error())),
 1474|   217k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   217k|    {
 1476|   217k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|   217k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   217k|          m_has_value(false)
  446|   217k|    {
  447|   217k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   218k|    {
 1177|   218k|    }
_ZN3scn2v36detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 5932|  1.52k|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|  1.52k|                      ranges::iterator_t<SourceRange>>) {
 5935|  1.52k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|  1.52k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.52k|    {
 2724|  1.52k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.52k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.52k|    {
 2705|  1.52k|        return decay_copy(t.begin());
 2706|  1.52k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1948|  24.9k|{
 1949|  24.9k|    return SCN_FWD(t);
  ------------------
  |  |  930|  24.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  24.9k|}
_ZN3scn2v36detail27make_vscan_result_range_endINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRT_:
 5919|  1.52k|{
 5920|  1.52k|    return ranges::end(source);
 5921|  1.52k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.52k|    {
 2781|  1.52k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.52k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.52k|    {
 2763|  1.52k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.52k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3310|   349k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   349k|    static_cast<    \
  |  |  929|   349k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   349k|    static_cast<    \
  |  |  929|   349k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|   349k|    {
 3312|   349k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|  1.52k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.52k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.52k|    {
 1430|  1.52k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  435|  1.52k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.52k|    {
  437|  1.52k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEcvS6_Ev:
 7985|  24.3k|    {
 7986|  24.3k|        return m_str;
 7987|  24.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJwEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  24.3k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  24.3k|    {
 5436|  24.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE12arg_pointersEv:
 5388|  24.3k|    {
 5389|  24.3k|        return m_argptrs;
 5390|  24.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5486|   218k|        : m_desc(desc), m_builtin_values(data)
 5487|   218k|    {
 5488|   218k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJwEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  24.3k|{
 8831|  24.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  24.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.2k, False: 98]
  |  |  ------------------
  ------------------
 8832|  24.2k|        return unexpected(result.error());
 8833|  24.2k|    }
 8834|     98|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     98|    static_cast<    \
  |  |  929|     98|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     98|    static_cast<    \
  |  |  929|     98|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  24.3k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1597|   218k|    {
 1598|   218k|        return has_value();
 1599|   218k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   437k|    {
  485|   437k|        return m_has_value;
  486|   437k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1603|   217k|    {
 1604|   217k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   217k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   217k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   217k|        return this->get_unexpected().error();
 1606|   217k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   217k|    {
  468|   217k|        return m_unexpected;
  469|   217k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  24.2k|        : base(unexpect, std::move(e.error())),
 1474|  24.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  24.2k|    {
 1476|  24.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  24.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  24.2k|          m_has_value(false)
  446|  24.2k|    {
  447|  24.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  24.3k|    {
 1177|  24.3k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1652|  1.52k|    {
 1653|  1.52k|        return value();
 1654|  1.52k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|  1.52k|    {
 1627|  1.52k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.52k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.52k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.52k|        return this->get_value();
 1629|  1.52k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.52k|    {
  451|  1.52k|        return m_value;
  452|  1.52k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJwEEC2ES8_ONSt3__15tupleIJwEEE:
 5838|     98|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|     98|    static_cast<    \
  |  |  929|     98|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|     98|    static_cast<    \
  |  |  929|     98|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|     98|    {
 5840|     98|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5689|  1.52k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|  1.52k|    static_cast<    \
  |  |  929|  1.52k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|  1.52k|    {
 5691|  1.52k|    }
_ZN3scn2v36detail25scan_result_value_storageIJwEEC2EONSt3__15tupleIJwEEE:
 5624|     98|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|     98|    static_cast<    \
  |  |  929|     98|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|     98|    {
 5626|     98|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|     98|        : base(std::in_place, std::forward<U>(val)),
 1428|     98|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|     98|    {
 1430|     98|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|     98|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|     98|    {
  437|     98|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE4argsEv:
 5383|  24.3k|    {
 5384|  24.3k|        return m_args;
 5385|  24.3k|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7706|   218k|{
 7707|   218k|    return s;
 7708|   218k|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7678|   218k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  24.3k|        : m_str(r.str)
 7981|  24.3k|    {
 7982|  24.3k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISR_EEEE:
 8617|   109k|{
 8618|   109k|#if !SCN_DISABLE_LOCALE
 8619|   109k|    auto buffer = detail::make_scan_buffer(range);
 8620|       |
 8621|   109k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8622|   109k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8623|   109k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8624|       |
 8625|   109k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 108k, False: 763]
  |  |  ------------------
  ------------------
 8626|   108k|        return unexpected(result.error());
 8627|   108k|    }
 8628|    763|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|    763|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8629|       |#else
 8630|       |    static_assert(dependent_false<Locale>::value,
 8631|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8632|       |
 8633|       |    return {};
 8634|       |#endif
 8635|   109k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJiEEEDav:
 5405|  24.3k|{
 5406|  24.3k|    detail::check_scan_arg_types<Args...>();
 5407|  24.3k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  24.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEEC2Ev:
 5357|  24.3k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  24.3k|    {
 5359|  24.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  24.3k|    {
 5370|  24.3k|        return {detail::make_arg<
 5371|  24.3k|            kind, Context,
 5372|  24.3k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  24.3k|                                 typename Context::char_type>::value>(args)...};
 5374|  24.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE3EivEEPvRT2_:
 5179|  24.3k|{
 5180|  24.3k|    return make_value<Context>(value).ref_value;
 5181|  24.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEiEEDaRT0_:
 5129|  24.3k|{
 5130|  24.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  24.3k|                                  needs_context_tag>) {
 5134|  24.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  24.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  24.3k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERi:
 4968|  24.3k|    {                                                                        \
 4969|  24.3k|        return val;                                                          \
 4970|  24.3k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEcvS6_Ev:
 7985|  24.3k|    {
 7986|  24.3k|        return m_str;
 7987|  24.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJiEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  24.3k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  24.3k|    {
 5436|  24.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE12arg_pointersEv:
 5388|  24.3k|    {
 5389|  24.3k|        return m_argptrs;
 5390|  24.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  24.3k|{
 8831|  24.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  24.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.3k, False: 0]
  |  |  ------------------
  ------------------
 8832|  24.3k|        return unexpected(result.error());
 8833|  24.3k|    }
 8834|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  24.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  24.3k|        : base(unexpect, std::move(e.error())),
 1474|  24.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  24.3k|    {
 1476|  24.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  24.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  24.3k|          m_has_value(false)
  446|  24.3k|    {
  447|  24.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  24.3k|    {
 1177|  24.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE4argsEv:
 5383|  24.3k|    {
 5384|  24.3k|        return m_args;
 5385|  24.3k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  24.3k|        : m_str(r.str)
 7981|  24.3k|    {
 7982|  24.3k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJjEEEDav:
 5405|  24.3k|{
 5406|  24.3k|    detail::check_scan_arg_types<Args...>();
 5407|  24.3k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  24.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEEC2Ev:
 5357|  24.3k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  24.3k|    {
 5359|  24.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  24.3k|    {
 5370|  24.3k|        return {detail::make_arg<
 5371|  24.3k|            kind, Context,
 5372|  24.3k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  24.3k|                                 typename Context::char_type>::value>(args)...};
 5374|  24.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE8EjvEEPvRT2_:
 5179|  24.3k|{
 5180|  24.3k|    return make_value<Context>(value).ref_value;
 5181|  24.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEjEEDaRT0_:
 5129|  24.3k|{
 5130|  24.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  24.3k|                                  needs_context_tag>) {
 5134|  24.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  24.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  24.3k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERj:
 4968|  24.3k|    {                                                                        \
 4969|  24.3k|        return val;                                                          \
 4970|  24.3k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEcvS6_Ev:
 7985|  24.3k|    {
 7986|  24.3k|        return m_str;
 7987|  24.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJjEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  24.3k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  24.3k|    {
 5436|  24.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE12arg_pointersEv:
 5388|  24.3k|    {
 5389|  24.3k|        return m_argptrs;
 5390|  24.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  24.3k|{
 8831|  24.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  24.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.3k, False: 0]
  |  |  ------------------
  ------------------
 8832|  24.3k|        return unexpected(result.error());
 8833|  24.3k|    }
 8834|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  24.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  24.3k|        : base(unexpect, std::move(e.error())),
 1474|  24.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  24.3k|    {
 1476|  24.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  24.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  24.3k|          m_has_value(false)
  446|  24.3k|    {
  447|  24.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  24.3k|    {
 1177|  24.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE4argsEv:
 5383|  24.3k|    {
 5384|  24.3k|        return m_args;
 5385|  24.3k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  24.3k|        : m_str(r.str)
 7981|  24.3k|    {
 7982|  24.3k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDav:
 5405|  24.3k|{
 5406|  24.3k|    detail::check_scan_arg_types<Args...>();
 5407|  24.3k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  24.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2Ev:
 5357|  24.3k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  24.3k|    {
 5359|  24.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  24.3k|    {
 5370|  24.3k|        return {detail::make_arg<
 5371|  24.3k|            kind, Context,
 5372|  24.3k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  24.3k|                                 typename Context::char_type>::value>(args)...};
 5374|  24.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5179|  24.3k|{
 5180|  24.3k|    return make_value<Context>(value).ref_value;
 5181|  24.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
 5129|  24.3k|{
 5130|  24.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  24.3k|                                  needs_context_tag>) {
 5134|  24.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  24.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  24.3k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERd:
 4968|  24.3k|    {                                                                        \
 4969|  24.3k|        return val;                                                          \
 4970|  24.3k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEcvS6_Ev:
 7985|  24.3k|    {
 7986|  24.3k|        return m_str;
 7987|  24.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  24.3k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  24.3k|    {
 5436|  24.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12arg_pointersEv:
 5388|  24.3k|    {
 5389|  24.3k|        return m_argptrs;
 5390|  24.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  24.3k|{
 8831|  24.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  24.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.3k, False: 0]
  |  |  ------------------
  ------------------
 8832|  24.3k|        return unexpected(result.error());
 8833|  24.3k|    }
 8834|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  24.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  24.3k|        : base(unexpect, std::move(e.error())),
 1474|  24.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  24.3k|    {
 1476|  24.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  24.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  24.3k|          m_has_value(false)
  446|  24.3k|    {
  447|  24.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  24.3k|    {
 1177|  24.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE4argsEv:
 5383|  24.3k|    {
 5384|  24.3k|        return m_args;
 5385|  24.3k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  24.3k|        : m_str(r.str)
 7981|  24.3k|    {
 7982|  24.3k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJbEEEDav:
 5405|  24.3k|{
 5406|  24.3k|    detail::check_scan_arg_types<Args...>();
 5407|  24.3k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  24.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEEC2Ev:
 5357|  24.3k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  24.3k|    {
 5359|  24.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  24.3k|    {
 5370|  24.3k|        return {detail::make_arg<
 5371|  24.3k|            kind, Context,
 5372|  24.3k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  24.3k|                                 typename Context::char_type>::value>(args)...};
 5374|  24.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE11EbvEEPvRT2_:
 5179|  24.3k|{
 5180|  24.3k|    return make_value<Context>(value).ref_value;
 5181|  24.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEbEEDaRT0_:
 5129|  24.3k|{
 5130|  24.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  24.3k|                                  needs_context_tag>) {
 5134|  24.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  24.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  24.3k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERb:
 4968|  24.3k|    {                                                                        \
 4969|  24.3k|        return val;                                                          \
 4970|  24.3k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEcvS6_Ev:
 7985|  24.3k|    {
 7986|  24.3k|        return m_str;
 7987|  24.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJbEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  24.3k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  24.3k|    {
 5436|  24.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE12arg_pointersEv:
 5388|  24.3k|    {
 5389|  24.3k|        return m_argptrs;
 5390|  24.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJbEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  24.3k|{
 8831|  24.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  24.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.3k, False: 0]
  |  |  ------------------
  ------------------
 8832|  24.3k|        return unexpected(result.error());
 8833|  24.3k|    }
 8834|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  24.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  24.3k|        : base(unexpect, std::move(e.error())),
 1474|  24.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  24.3k|    {
 1476|  24.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  24.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  24.3k|          m_has_value(false)
  446|  24.3k|    {
  447|  24.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  24.3k|    {
 1177|  24.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE4argsEv:
 5383|  24.3k|    {
 5384|  24.3k|        return m_args;
 5385|  24.3k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  24.3k|        : m_str(r.str)
 7981|  24.3k|    {
 7982|  24.3k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJPvEEEDav:
 5405|  24.3k|{
 5406|  24.3k|    detail::check_scan_arg_types<Args...>();
 5407|  24.3k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  24.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEEC2Ev:
 5357|  24.3k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  24.3k|    {
 5359|  24.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE12make_argptrsIJS5_EEENSt3__15arrayIS5_Lm1EEEDpRT_:
 5369|  24.3k|    {
 5370|  24.3k|        return {detail::make_arg<
 5371|  24.3k|            kind, Context,
 5372|  24.3k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  24.3k|                                 typename Context::char_type>::value>(args)...};
 5374|  24.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE15EPvvEES7_RT2_:
 5179|  24.3k|{
 5180|  24.3k|    return make_value<Context>(value).ref_value;
 5181|  24.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEPvEEDaRT0_:
 5129|  24.3k|{
 5130|  24.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  24.3k|                                  needs_context_tag>) {
 5134|  24.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  24.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  24.3k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERPv:
 4968|  24.3k|    {                                                                        \
 4969|  24.3k|        return val;                                                          \
 4970|  24.3k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEcvS6_Ev:
 7985|  24.3k|    {
 7986|  24.3k|        return m_str;
 7987|  24.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJPvEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  24.3k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  24.3k|    {
 5436|  24.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE12arg_pointersEv:
 5388|  24.3k|    {
 5389|  24.3k|        return m_argptrs;
 5390|  24.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJPvEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSA_ISC_EEONSt3__15tupleIJSE_EEE:
 8830|  24.3k|{
 8831|  24.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  24.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.3k, False: 0]
  |  |  ------------------
  ------------------
 8832|  24.3k|        return unexpected(result.error());
 8833|  24.3k|    }
 8834|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  24.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELSA_0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSA_0EEEONS0_10unexpectedISH_EE:
 1473|  24.3k|        : base(unexpect, std::move(e.error())),
 1474|  24.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  24.3k|    {
 1476|  24.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  444|  24.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  24.3k|          m_has_value(false)
  446|  24.3k|    {
  447|  24.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  24.3k|    {
 1177|  24.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE4argsEv:
 5383|  24.3k|    {
 5384|  24.3k|        return m_args;
 5385|  24.3k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  24.3k|        : m_str(r.str)
 7981|  24.3k|    {
 7982|  24.3k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5405|  24.3k|{
 5406|  24.3k|    detail::check_scan_arg_types<Args...>();
 5407|  24.3k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  24.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5357|  24.3k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  24.3k|    {
 5359|  24.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5369|  24.3k|    {
 5370|  24.3k|        return {detail::make_arg<
 5371|  24.3k|            kind, Context,
 5372|  24.3k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  24.3k|                                 typename Context::char_type>::value>(args)...};
 5374|  24.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5179|  24.3k|{
 5180|  24.3k|    return make_value<Context>(value).ref_value;
 5181|  24.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5129|  24.3k|{
 5130|  24.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  24.3k|                                  needs_context_tag>) {
 5134|  24.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  24.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  24.3k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4968|  24.3k|    {                                                                        \
 4969|  24.3k|        return val;                                                          \
 4970|  24.3k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEcvS6_Ev:
 7985|  24.3k|    {
 7986|  24.3k|        return m_str;
 7987|  24.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  24.3k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  24.3k|    {
 5436|  24.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5388|  24.3k|    {
 5389|  24.3k|        return m_argptrs;
 5390|  24.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8830|  24.3k|{
 8831|  24.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  24.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.8k, False: 476]
  |  |  ------------------
  ------------------
 8832|  23.8k|        return unexpected(result.error());
 8833|  23.8k|    }
 8834|    476|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    476|    static_cast<    \
  |  |  929|    476|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    476|    static_cast<    \
  |  |  929|    476|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  24.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1473|  23.8k|        : base(unexpect, std::move(e.error())),
 1474|  23.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  23.8k|    {
 1476|  23.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  624|  23.8k|        : m_has_value(false)
  625|  23.8k|    {
  626|  23.8k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  23.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  23.8k|    {
  689|  23.8k|        scn::detail::construct_at(unexpected_ptr(),
  690|  23.8k|                                  std::forward<Args>(args)...);
  691|  23.8k|        m_has_value = false;
  692|  23.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  47.6k|    {
  718|  47.6k|        return reinterpret_cast<unexpected<E>*>(
  719|  47.6k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  47.6k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  47.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  24.3k|    {
 1177|  24.3k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5838|    476|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    476|    static_cast<    \
  |  |  929|    476|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    476|    static_cast<    \
  |  |  929|    476|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    476|    {
 5840|    476|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1427|    476|        : base(std::in_place, std::forward<U>(val)),
 1428|    476|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    476|    {
 1430|    476|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  614|    476|        : m_has_value(true)
  615|    476|    {
  616|    476|        construct(std::forward<Args>(args)...);
  617|    476|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|    476|    {
  682|    476|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|    476|        m_has_value = true;
  684|    476|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|    476|{
  392|    476|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|    476|        T(std::forward<Args>(args)...);
  394|    476|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5831|    476|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|    952|    {
  706|    952|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|    952|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|    952|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5835|    952|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5383|  24.3k|    {
 5384|  24.3k|        return m_args;
 5385|  24.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5380|  24.3k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  24.3k|        : m_str(r.str)
 7981|  24.3k|    {
 7982|  24.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  24.3k|    {
  631|  24.3k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 476, False: 23.8k]
  ------------------
  632|    476|            destroy_value();
  633|    476|        }
  634|  23.8k|        else {
  635|  23.8k|            destroy_unexpected();
  636|  23.8k|        }
  637|  24.3k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  24.3k|    {
  675|  24.3k|        return m_has_value;
  676|  24.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|    476|    {
  696|    476|        scn::detail::destroy_at(value_ptr());
  697|    476|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  397|    476|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|    476|    else {
  404|    476|        p->~T();
  405|    476|    }
  406|    476|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  23.8k|    {
  700|  23.8k|        scn::detail::destroy_at(unexpected_ptr());
  701|  23.8k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5405|  24.3k|{
 5406|  24.3k|    detail::check_scan_arg_types<Args...>();
 5407|  24.3k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  24.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5357|  24.3k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  24.3k|    {
 5359|  24.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5369|  24.3k|    {
 5370|  24.3k|        return {detail::make_arg<
 5371|  24.3k|            kind, Context,
 5372|  24.3k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  24.3k|                                 typename Context::char_type>::value>(args)...};
 5374|  24.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5179|  24.3k|{
 5180|  24.3k|    return make_value<Context>(value).ref_value;
 5181|  24.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5129|  24.3k|{
 5130|  24.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  24.3k|                                  needs_context_tag>) {
 5134|  24.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  24.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  24.3k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4968|  24.3k|    {                                                                        \
 4969|  24.3k|        return val;                                                          \
 4970|  24.3k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEcvS6_Ev:
 7985|  24.3k|    {
 7986|  24.3k|        return m_str;
 7987|  24.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  24.3k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  24.3k|    {
 5436|  24.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5388|  24.3k|    {
 5389|  24.3k|        return m_argptrs;
 5390|  24.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8830|  24.3k|{
 8831|  24.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  24.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.8k, False: 476]
  |  |  ------------------
  ------------------
 8832|  23.8k|        return unexpected(result.error());
 8833|  23.8k|    }
 8834|    476|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    476|    static_cast<    \
  |  |  929|    476|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    476|    static_cast<    \
  |  |  929|    476|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  24.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1473|  23.8k|        : base(unexpect, std::move(e.error())),
 1474|  23.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  23.8k|    {
 1476|  23.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  624|  23.8k|        : m_has_value(false)
  625|  23.8k|    {
  626|  23.8k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  23.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  23.8k|    {
  689|  23.8k|        scn::detail::construct_at(unexpected_ptr(),
  690|  23.8k|                                  std::forward<Args>(args)...);
  691|  23.8k|        m_has_value = false;
  692|  23.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  47.6k|    {
  718|  47.6k|        return reinterpret_cast<unexpected<E>*>(
  719|  47.6k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  47.6k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  47.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  24.3k|    {
 1177|  24.3k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5838|    476|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    476|    static_cast<    \
  |  |  929|    476|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    476|    static_cast<    \
  |  |  929|    476|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    476|    {
 5840|    476|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1427|    476|        : base(std::in_place, std::forward<U>(val)),
 1428|    476|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    476|    {
 1430|    476|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  614|    476|        : m_has_value(true)
  615|    476|    {
  616|    476|        construct(std::forward<Args>(args)...);
  617|    476|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|    476|    {
  682|    476|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|    476|        m_has_value = true;
  684|    476|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|    476|{
  392|    476|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|    476|        T(std::forward<Args>(args)...);
  394|    476|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5831|    476|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|    952|    {
  706|    952|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|    952|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|    952|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5835|    952|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5383|  24.3k|    {
 5384|  24.3k|        return m_args;
 5385|  24.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5380|  24.3k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  24.3k|        : m_str(r.str)
 7981|  24.3k|    {
 7982|  24.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  24.3k|    {
  631|  24.3k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 476, False: 23.8k]
  ------------------
  632|    476|            destroy_value();
  633|    476|        }
  634|  23.8k|        else {
  635|  23.8k|            destroy_unexpected();
  636|  23.8k|        }
  637|  24.3k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  24.3k|    {
  675|  24.3k|        return m_has_value;
  676|  24.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|    476|    {
  696|    476|        scn::detail::destroy_at(value_ptr());
  697|    476|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  397|    476|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|    476|    else {
  404|    476|        p->~T();
  405|    476|    }
  406|    476|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  23.8k|    {
  700|  23.8k|        scn::detail::destroy_at(unexpected_ptr());
  701|  23.8k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEEDav:
 5405|  24.3k|{
 5406|  24.3k|    detail::check_scan_arg_types<Args...>();
 5407|  24.3k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  24.3k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEvv:
 5144|  24.3k|{
 5145|  24.3k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  24.3k|                  "Scan argument types must be default constructible");
 5147|  24.3k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  24.3k|                  "Scan argument types must be Destructible");
 5149|  24.3k|    static_assert(
 5150|  24.3k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  24.3k|        "Scan argument types must not be references");
 5152|  24.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEC2Ev:
 5357|  24.3k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  24.3k|    {
 5359|  24.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5369|  24.3k|    {
 5370|  24.3k|        return {detail::make_arg<
 5371|  24.3k|            kind, Context,
 5372|  24.3k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  24.3k|                                 typename Context::char_type>::value>(args)...};
 5374|  24.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE20ENSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEvEEPvRT2_:
 5179|  24.3k|{
 5180|  24.3k|    return make_value<Context>(value).ref_value;
 5181|  24.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDaRT0_:
 5129|  24.3k|{
 5130|  24.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  24.3k|                                  needs_context_tag>) {
 5134|  24.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  24.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  24.3k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 4968|  24.3k|    {                                                                        \
 4969|  24.3k|        return val;                                                          \
 4970|  24.3k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaOT_:
 5098|  24.3k|{
 5099|  24.3k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  24.3k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  24.3k|    constexpr bool scannable_char =
 5103|  24.3k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  24.3k|    static_assert(scannable_char,
 5105|  24.3k|                  "Cannot scan an argument of an unsupported character "
 5106|  24.3k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  24.3k|    constexpr bool scannable_const =
 5109|  24.3k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  24.3k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  24.3k|    constexpr bool scannable_disabled =
 5113|  24.3k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  24.3k|    static_assert(scannable_disabled,
 5115|  24.3k|                  "Cannot scan an argument that has been disabled by "
 5116|  24.3k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  24.3k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  24.3k|    static_assert(
 5120|  24.3k|        scannable,
 5121|  24.3k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  24.3k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  24.3k|    return arg_value{arg};
 5125|  24.3k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 4909|  24.3k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  24.3k|    {
 4911|  24.3k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEcvS6_Ev:
 7985|  24.3k|    {
 7986|  24.3k|        return m_str;
 7987|  24.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  24.3k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  24.3k|    {
 5436|  24.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12arg_pointersEv:
 5388|  24.3k|    {
 5389|  24.3k|        return m_argptrs;
 5390|  24.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8830|  24.3k|{
 8831|  24.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  24.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.8k, False: 476]
  |  |  ------------------
  ------------------
 8832|  23.8k|        return unexpected(result.error());
 8833|  23.8k|    }
 8834|    476|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    476|    static_cast<    \
  |  |  929|    476|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    476|    static_cast<    \
  |  |  929|    476|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  24.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1473|  23.8k|        : base(unexpect, std::move(e.error())),
 1474|  23.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  23.8k|    {
 1476|  23.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  444|  23.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  23.8k|          m_has_value(false)
  446|  23.8k|    {
  447|  23.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  24.3k|    {
 1177|  24.3k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5838|    476|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    476|    static_cast<    \
  |  |  929|    476|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    476|    static_cast<    \
  |  |  929|    476|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    476|    {
 5840|    476|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2EONS3_5tupleIJS7_EEE:
 5624|    476|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|    476|    static_cast<    \
  |  |  929|    476|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|    476|    {
 5626|    476|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1427|    476|        : base(std::in_place, std::forward<U>(val)),
 1428|    476|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    476|    {
 1430|    476|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  435|    476|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    476|    {
  437|    476|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE4argsEv:
 5383|  24.3k|    {
 5384|  24.3k|        return m_args;
 5385|  24.3k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  24.3k|        : m_str(r.str)
 7981|  24.3k|    {
 7982|  24.3k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3562|   613k|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3563|   613k|    {
 3564|   613k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|   613k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3565|   613k|    }
_ZNK3scn2v310scan_errorcvbEv:
 3569|  2.57M|    {
 3570|  2.57M|        return m_code == good;
 3571|  2.57M|    }
_ZNK3scn2v310scan_error4codeEv:
 3580|  90.2k|    {
 3581|  90.2k|        return m_code;
 3582|  90.2k|    }
_ZNK3scn2v36detail9fill_type4sizeEv:
 6190|  5.14k|    {
 6191|  5.14k|        return m_size;
 6192|  5.14k|    }
_ZNK3scn2v36detail12format_specs8get_baseEv:
 6231|  4.30k|    {
 6232|  4.30k|        SCN_GCC_COMPAT_PUSH
 6233|  4.30k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 6234|  4.30k|        switch (type) {
 6235|  1.87k|            case presentation_type::none:
  ------------------
  |  Branch (6235:13): [True: 1.87k, False: 2.43k]
  ------------------
 6236|  1.87k|                return 10;
 6237|     78|            case presentation_type::int_generic:
  ------------------
  |  Branch (6237:13): [True: 78, False: 4.22k]
  ------------------
 6238|     78|                return 0;
 6239|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (6239:13): [True: 0, False: 4.30k]
  ------------------
 6240|      0|                return arbitrary_base;
 6241|       |
 6242|     38|            case presentation_type::int_binary:
  ------------------
  |  Branch (6242:13): [True: 38, False: 4.26k]
  ------------------
 6243|     38|                return 2;
 6244|     82|            case presentation_type::int_octal:
  ------------------
  |  Branch (6244:13): [True: 82, False: 4.22k]
  ------------------
 6245|     82|                return 8;
 6246|     40|            case presentation_type::int_decimal:
  ------------------
  |  Branch (6246:13): [True: 40, False: 4.26k]
  ------------------
 6247|     84|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (6247:13): [True: 44, False: 4.25k]
  ------------------
 6248|     84|                return 10;
 6249|  2.14k|            case presentation_type::int_hex:
  ------------------
  |  Branch (6249:13): [True: 2.14k, False: 2.15k]
  ------------------
 6250|  2.14k|                return 16;
 6251|       |
 6252|      0|            default:
  ------------------
  |  Branch (6252:13): [True: 0, False: 4.30k]
  ------------------
 6253|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6254|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6255|  4.30k|        }
 6256|  4.30k|        SCN_GCC_COMPAT_POP
 6257|  4.30k|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6269|  97.1k|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter8on_alignENS1_10align_typeE:
 6272|  11.5k|    {
 6273|  11.5k|        m_specs.align = align;
 6274|  11.5k|    }
_ZN3scn2v36detail12specs_setter8on_widthEi:
 6292|  15.1k|    {
 6293|  15.1k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (6293:13): [True: 0, False: 15.1k]
  |  Branch (6293:39): [True: 0, False: 0]
  ------------------
 6294|       |            // clang-format off
 6295|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6296|       |            // clang-format on
 6297|      0|        }
 6298|       |
 6299|  15.1k|        m_specs.width = width;
 6300|  15.1k|    }
_ZN3scn2v36detail12specs_setter12on_precisionEi:
 6302|  12.9k|    {
 6303|  12.9k|        if (m_specs.width > prec) {
  ------------------
  |  Branch (6303:13): [True: 158, False: 12.7k]
  ------------------
 6304|       |            // clang-format off
 6305|    158|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6306|       |            // clang-format on
 6307|    158|        }
 6308|       |
 6309|  12.7k|        m_specs.precision = prec;
 6310|  12.7k|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6313|   139k|    {
 6314|   139k|        m_specs.type = type;
 6315|   139k|    }
_ZN3scn2v36detail12specs_setter17on_charset_singleEDi:
 6318|  1.31M|    {
 6319|  1.31M|        const auto cp_value = static_cast<unsigned>(cp);
 6320|  1.31M|        if (SCN_LIKELY(cp_value <= 127)) {
  ------------------
  |  |  858|  1.31M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.12M, False: 196k]
  |  |  ------------------
  ------------------
 6321|  1.12M|            m_specs.charset_literals[cp_value / 8] |=
 6322|  1.12M|                static_cast<unsigned char>(1ul << (cp_value % 8));
 6323|  1.12M|        }
 6324|   196k|        else {
 6325|   196k|            m_specs.charset_has_nonascii = true;
 6326|   196k|        }
 6327|  1.31M|    }
_ZN3scn2v36detail12specs_setter16on_charset_rangeEDiDi:
 6330|  11.0k|    {
 6331|  11.0k|        const auto begin_value = static_cast<unsigned>(begin);
 6332|  11.0k|        const auto end_value = static_cast<unsigned>(end);
 6333|  11.0k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  |  924|  11.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6334|       |
 6335|  11.0k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  |  858|  11.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 5.58k, False: 5.43k]
  |  |  ------------------
  ------------------
 6336|       |            // No need to bit-twiddle with a mask, because with the
 6337|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 6338|  5.58k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  |  878|  5.58k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 6339|   359k|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (6339:40): [True: 354k, False: 5.58k]
  ------------------
 6340|   354k|                m_specs.charset_literals[v / 8] |=
 6341|   354k|                    static_cast<unsigned char>(1ul << (v % 8));
 6342|   354k|            }
 6343|  5.58k|        }
 6344|  5.43k|        else {
 6345|  5.43k|            m_specs.charset_has_nonascii = true;
 6346|  5.43k|        }
 6347|  11.0k|    }
_ZN3scn2v36detail12specs_setter19on_charset_invertedEv:
 6350|  3.46k|    {
 6351|  3.46k|        m_specs.charset_is_inverted = true;
 6352|  3.46k|    }
_ZN3scn2v36detail12specs_setter14on_regex_flagsENS1_11regex_flagsE:
 6369|  63.4k|    {
 6370|  63.4k|        m_specs.regexp_flags = flags;
 6371|  63.4k|    }
_ZN3scn2v36detail12specs_setter8on_errorEPKc:
 6375|  10.7k|    {
 6376|  10.7k|        SCN_UNLIKELY_ATTR
 6377|  10.7k|        m_error = scan_error{scan_error::invalid_format_string, msg};
 6378|  10.7k|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6386|  1.43M|    {
 6387|  1.43M|        return static_cast<bool>(m_error);
 6388|  1.43M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3604|  90.2k|{
 3605|  90.2k|    return a.code() == b;
 3606|  90.2k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3608|  90.2k|{
 3609|  90.2k|    return !(a == b);
 3610|  90.2k|}
_ZN3scn2v36detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3903|   124k|{
 3904|   124k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|   124k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   124k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3905|       |
 3906|   124k|    const auto is_trailing_code_unit = [](char ch) {
 3907|   124k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3908|   124k|    };
 3909|       |
 3910|   124k|    if (input.size() == 1) {
  ------------------
  |  Branch (3910:9): [True: 108k, False: 16.4k]
  ------------------
 3911|   108k|        SCN_EXPECT(static_cast<unsigned char>(input[0]) < 0x80);
  ------------------
  |  |  924|   108k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   108k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3912|   108k|        return static_cast<char32_t>(input[0]);
 3913|   108k|    }
 3914|       |
 3915|  16.4k|    if (input.size() == 2) {
  ------------------
  |  Branch (3915:9): [True: 15.4k, False: 970]
  ------------------
 3916|  15.4k|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xe0) == 0xc0);
  ------------------
  |  |  924|  15.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3917|  15.4k|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|  15.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3918|       |
 3919|  15.4k|        char32_t cp{};
 3920|  15.4k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3921|  15.4k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3922|  15.4k|        return cp;
 3923|  15.4k|    }
 3924|       |
 3925|    970|    if (input.size() == 3) {
  ------------------
  |  Branch (3925:9): [True: 784, False: 186]
  ------------------
 3926|    784|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf0) == 0xe0);
  ------------------
  |  |  924|    784|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    784|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3927|    784|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|    784|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    784|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3928|    784|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  |  924|    784|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    784|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3929|       |
 3930|    784|        char32_t cp{};
 3931|    784|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3932|    784|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3933|    784|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3934|    784|        return cp;
 3935|    784|    }
 3936|       |
 3937|    186|    if (input.size() == 4) {
  ------------------
  |  Branch (3937:9): [True: 186, False: 0]
  ------------------
 3938|    186|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf8) == 0xf0);
  ------------------
  |  |  924|    186|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    186|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3939|    186|        SCN_EXPECT(static_cast<unsigned char>(input[0]) <= 0xf4);
  ------------------
  |  |  924|    186|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    186|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3940|    186|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|    186|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    186|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3941|    186|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  |  924|    186|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    186|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3942|    186|        SCN_EXPECT(is_trailing_code_unit(input[3]));
  ------------------
  |  |  924|    186|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    186|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3943|       |
 3944|    186|        char32_t cp{};
 3945|    186|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3946|    186|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3947|    186|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3948|    186|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3949|    186|        return cp;
 3950|    186|    }
 3951|       |
 3952|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3953|       |    // gcc 7 thinks we'll get here, even when we won't
 3954|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3955|      0|#endif
 3956|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3957|      0|}
_ZN3scn2v36detail11is_cp_spaceEDi:
 4042|   335k|{
 4043|       |    // Pattern_White_Space property
 4044|   335k|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4044:13): [True: 190k, False: 144k]
  |  Branch (4044:27): [True: 8.86k, False: 182k]
  ------------------
 4045|   335k|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4045:12): [True: 4.32k, False: 321k]
  ------------------
 4046|   335k|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4046:12): [True: 6.90k, False: 314k]
  ------------------
 4047|   335k|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4047:12): [True: 1.94k, False: 313k]
  ------------------
 4048|   335k|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4048:12): [True: 3.40k, False: 309k]
  ------------------
 4049|   335k|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4049:12): [True: 1.39k, False: 308k]
  ------------------
 4050|   335k|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4050:12): [True: 108, False: 308k]
  ------------------
 4051|   335k|}
_ZN3scn2v36detailanENS1_11regex_flagsES2_:
 6120|  91.7k|{
 6121|  91.7k|    return static_cast<regex_flags>(static_cast<unsigned>(a) &
 6122|  91.7k|                                    static_cast<unsigned>(b));
 6123|  91.7k|}
_ZN3scn2v36detailorENS1_11regex_flagsES2_:
 6125|  10.0k|{
 6126|  10.0k|    return static_cast<regex_flags>(static_cast<unsigned>(a) |
 6127|  10.0k|                                    static_cast<unsigned>(b));
 6128|  10.0k|}
_ZN3scn2v36detailoRERNS1_11regex_flagsES2_:
 6140|  10.0k|{
 6141|  10.0k|    return a = a | b;
 6142|  10.0k|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7073|  1.09k|{
 7074|  1.09k|    switch (type) {
 7075|    100|        case arg_type::none_type:
  ------------------
  |  Branch (7075:9): [True: 100, False: 990]
  ------------------
 7076|    100|            return arg_type_category::none;
 7077|       |
 7078|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7078:9): [True: 0, False: 1.09k]
  ------------------
 7079|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7079:9): [True: 0, False: 1.09k]
  ------------------
 7080|    110|        case arg_type::int_type:
  ------------------
  |  Branch (7080:9): [True: 110, False: 980]
  ------------------
 7081|    110|        case arg_type::long_type:
  ------------------
  |  Branch (7081:9): [True: 0, False: 1.09k]
  ------------------
 7082|    110|        case arg_type::llong_type:
  ------------------
  |  Branch (7082:9): [True: 0, False: 1.09k]
  ------------------
 7083|    110|            return arg_type_category::integer;
 7084|       |
 7085|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7085:9): [True: 0, False: 1.09k]
  ------------------
 7086|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7086:9): [True: 0, False: 1.09k]
  ------------------
 7087|    110|        case arg_type::uint_type:
  ------------------
  |  Branch (7087:9): [True: 110, False: 980]
  ------------------
 7088|    110|        case arg_type::ulong_type:
  ------------------
  |  Branch (7088:9): [True: 0, False: 1.09k]
  ------------------
 7089|    110|        case arg_type::ullong_type:
  ------------------
  |  Branch (7089:9): [True: 0, False: 1.09k]
  ------------------
 7090|    110|            return arg_type_category::unsigned_integer;
 7091|       |
 7092|    110|        case arg_type::pointer_type:
  ------------------
  |  Branch (7092:9): [True: 110, False: 980]
  ------------------
 7093|    110|            return arg_type_category::pointer;
 7094|    110|        case arg_type::bool_type:
  ------------------
  |  Branch (7094:9): [True: 110, False: 980]
  ------------------
 7095|    110|            return arg_type_category::boolean;
 7096|     56|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7096:9): [True: 56, False: 1.03k]
  ------------------
 7097|    110|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7097:9): [True: 54, False: 1.03k]
  ------------------
 7098|    110|        case arg_type::code_point_type:
  ------------------
  |  Branch (7098:9): [True: 0, False: 1.09k]
  ------------------
 7099|    110|            return arg_type_category::character;
 7100|       |
 7101|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7101:9): [True: 0, False: 1.09k]
  ------------------
 7102|    110|        case arg_type::double_type:
  ------------------
  |  Branch (7102:9): [True: 110, False: 980]
  ------------------
 7103|    110|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7103:9): [True: 0, False: 1.09k]
  ------------------
 7104|    110|            return arg_type_category::floating;
 7105|       |
 7106|     56|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7106:9): [True: 56, False: 1.03k]
  ------------------
 7107|    166|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7107:9): [True: 110, False: 980]
  ------------------
 7108|    220|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7108:9): [True: 54, False: 1.03k]
  ------------------
 7109|    330|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7109:9): [True: 110, False: 980]
  ------------------
 7110|    330|            return arg_type_category::string;
 7111|       |
 7112|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7112:9): [True: 0, False: 1.09k]
  ------------------
 7113|      0|            return arg_type_category::custom;
 7114|       |
 7115|      0|            SCN_CLANG_PUSH
 7116|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7117|      0|        default:
  ------------------
  |  Branch (7117:9): [True: 0, False: 1.09k]
  ------------------
 7118|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7119|  1.09k|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7120|  1.09k|            SCN_CLANG_POP
 7121|  1.09k|    }
 7122|       |
 7123|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7124|  1.09k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
 3649|  1.28k|{
 3650|  1.28k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  1.28k|}
_ZN3scn2v36detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7159|  20.2k|{
 7160|  20.2k|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  859|  20.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.0k, False: 2.19k]
  |  |  ------------------
  ------------------
 7161|  18.0k|        return handler.on_error("Invalid type specifier for integer type");
 7162|  18.0k|    }
 7163|  2.19k|    if (specs.localized) {
  ------------------
  |  Branch (7163:9): [True: 144, False: 2.05k]
  ------------------
 7164|    144|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  859|    144|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 136]
  |  |  ------------------
  ------------------
 7165|       |            // clang-format off
 7166|      8|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 7167|       |            // clang-format on
 7168|      8|            return;
 7169|      8|        }
 7170|    136|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  859|    136|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 136]
  |  |  ------------------
  ------------------
 7171|       |            // clang-format off
 7172|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 7173|       |            // clang-format on
 7174|      0|        }
 7175|    136|    }
 7176|  2.19k|}
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1948|     52|{
 1949|     52|    return SCN_FWD(t);
  ------------------
  |  |  930|     52|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|     52|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3649|  2.66k|{
 3650|  2.66k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  2.66k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  2.66k|}
_ZN3scn2v36detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7203|  10.1k|{
 7204|  10.1k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7204:9): [True: 9.17k, False: 958]
  ------------------
 7205|  10.1k|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7205:10): [True: 140, False: 9.03k]
  ------------------
 7206|  9.17k|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7206:10): [True: 8.93k, False: 100]
  ------------------
 7207|  9.07k|        SCN_UNLIKELY_ATTR
 7208|  9.07k|        return handler.on_error("Invalid type specifier for float type");
 7209|  9.07k|    }
 7210|  10.1k|}
_ZNK3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EE9has_valueEv:
  484|  40.8k|    {
  485|  40.8k|        return m_has_value;
  486|  40.8k|    }
_ZNK3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEcvbEv:
 1597|  20.4k|    {
 1598|  20.4k|        return has_value();
 1599|  20.4k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EE9get_valueEv:
  450|  20.4k|    {
  451|  20.4k|        return m_value;
  452|  20.4k|    }
_ZNR3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEE5valueIS4_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1626|  20.4k|    {
 1627|  20.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  20.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  20.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  20.4k|        return this->get_value();
 1629|  20.4k|    }
_ZNO3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEdeIS4_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1662|  20.4k|    {
 1663|  20.4k|        return std::move(value());
 1664|  20.4k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA14_KcEEEDaDpOT_:
 3649|  9.91k|{
 3650|  9.91k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  9.91k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  9.91k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA32_KcEEEDaDpOT_:
 3649|  6.82k|{
 3650|  6.82k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  6.82k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  6.82k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA36_KcEEEDaDpOT_:
 3649|    282|{
 3650|    282|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|    282|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|    282|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA52_KcEEEDaDpOT_:
 3649|    696|{
 3650|    696|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|    696|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|    696|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA40_KcEEEDaDpOT_:
 3649|  1.33k|{
 3650|  1.33k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  1.33k|}
_ZN3scn2v36detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7215|  30.1k|{
 7216|  30.1k|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (7216:9): [True: 2.79k, False: 27.3k]
  ------------------
 7217|  30.1k|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (7217:9): [True: 1.00k, False: 26.3k]
  ------------------
 7218|  30.1k|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (7218:9): [True: 4.30k, False: 22.0k]
  ------------------
 7219|  30.1k|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (7219:9): [True: 19.0k, False: 2.93k]
  ------------------
 7220|  30.1k|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (7220:9): [True: 2.03k, False: 900]
  ------------------
 7221|  29.2k|        return;
 7222|  29.2k|    }
 7223|    900|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (7223:9): [True: 288, False: 612]
  ------------------
 7224|    288|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  |  859|    288|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 276]
  |  |  ------------------
  ------------------
 7225|       |            // clang-format off
 7226|     12|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 7227|       |            // clang-format on
 7228|     12|        }
 7229|    276|        return;
 7230|    288|    }
 7231|    612|    SCN_UNLIKELY_ATTR
 7232|    612|    handler.on_error("Invalid type specifier for string");
 7233|    612|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA47_KcEEEDaDpOT_:
 3649|  4.62k|{
 3650|  4.62k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  4.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  4.62k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA23_KcEEEDaDpOT_:
 3649|     46|{
 3650|     46|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|     46|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|     46|}
_ZN3scn2v36detail21check_bool_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7249|  10.1k|{
 7250|  10.1k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7250:9): [True: 9.17k, False: 958]
  ------------------
 7251|  10.1k|        specs.type != presentation_type::string &&
  ------------------
  |  Branch (7251:9): [True: 8.82k, False: 354]
  ------------------
 7252|  10.1k|        specs.type != presentation_type::int_generic &&
  ------------------
  |  Branch (7252:9): [True: 8.78k, False: 32]
  ------------------
 7253|  10.1k|        specs.type != presentation_type::int_hex &&
  ------------------
  |  Branch (7253:9): [True: 8.76k, False: 24]
  ------------------
 7254|  10.1k|        specs.type != presentation_type::int_binary &&
  ------------------
  |  Branch (7254:9): [True: 8.74k, False: 18]
  ------------------
 7255|  10.1k|        specs.type != presentation_type::int_unsigned_decimal &&
  ------------------
  |  Branch (7255:9): [True: 8.73k, False: 16]
  ------------------
 7256|  10.1k|        specs.type != presentation_type::int_octal &&
  ------------------
  |  Branch (7256:9): [True: 8.69k, False: 34]
  ------------------
 7257|  10.1k|        specs.type != presentation_type::int_decimal) {
  ------------------
  |  Branch (7257:9): [True: 8.68k, False: 16]
  ------------------
 7258|  8.68k|        SCN_UNLIKELY_ATTR
 7259|  8.68k|        return handler.on_error("Invalid type specifier for boolean");
 7260|  8.68k|    }
 7261|  10.1k|}
_ZN3scn2v36detail21check_char_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7181|  10.0k|{
 7182|  10.0k|    if (specs.type > presentation_type::int_hex ||
  ------------------
  |  Branch (7182:9): [True: 9.01k, False: 1.02k]
  ------------------
 7183|  10.0k|        specs.type == presentation_type::int_arbitrary_base) {
  ------------------
  |  Branch (7183:9): [True: 0, False: 1.02k]
  ------------------
 7184|  9.01k|        SCN_UNLIKELY_ATTR
 7185|  9.01k|        return handler.on_error("Invalid type specifier for character type");
 7186|  9.01k|    }
 7187|  10.0k|}
_ZN3scn2v36detail24check_pointer_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7238|  10.0k|{
 7239|  10.0k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7239:9): [True: 9.10k, False: 930]
  ------------------
 7240|  10.0k|        specs.type != presentation_type::pointer) {
  ------------------
  |  Branch (7240:9): [True: 9.09k, False: 14]
  ------------------
 7241|  9.09k|        SCN_UNLIKELY_ATTR
 7242|  9.09k|        return handler.on_error("Invalid type specifier for pointer");
 7243|  9.09k|    }
 7244|  10.0k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA79_KcEEEDaDpOT_:
 3649|     88|{
 3650|     88|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|     88|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|     88|}
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3710|   106k|{
 3711|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3712|       |                                          const CharT*, const CharT*>) {
 3713|       |        return {first, last};
 3714|       |    }
 3715|   106k|    else {
 3716|   106k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3717|   106k|    }
 3718|   106k|}
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3710|   193k|{
 3711|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3712|       |                                          const CharT*, const CharT*>) {
 3713|       |        return {first, last};
 3714|       |    }
 3715|   193k|    else {
 3716|   193k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3717|   193k|    }
 3718|   193k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3325|  1.30M|    {
 3326|  1.30M|        return m_iterator;
 3327|  1.30M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3329|  1.38M|    {
 3330|  1.38M|        return m_sentinel;
 3331|  1.38M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3325|   502k|    {
 3326|   502k|        return m_iterator;
 3327|   502k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3329|   538k|    {
 3330|   538k|        return m_sentinel;
 3331|   538k|    }
_ZN3scn2v36detail10locale_refC2Ev:
 8001|   170k|    constexpr locale_ref() = default;
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|    174|{
 1211|    174|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|    174|}
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  360|  2.16k|    {
  361|  2.16k|        return m_unexpected;
  362|  2.16k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA22_KcEEEDaDpOT_:
 3649|  5.24k|{
 3650|  5.24k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  5.24k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  5.24k|}
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  345|  34.7k|        : m_unexpected(std::forward<Err>(e))
  346|  34.7k|    {
  347|  34.7k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  34.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  34.7k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1473|   102k|        : base(unexpect, std::move(e.error())),
 1474|   102k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   102k|    {
 1476|   102k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  444|   103k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   103k|          m_has_value(false)
  446|   103k|    {
  447|   103k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   133k|    {
 1177|   133k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1427|  28.5k|        : base(std::in_place, std::forward<U>(val)),
 1428|  28.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  28.5k|    {
 1430|  28.5k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  28.5k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  28.5k|    {
  437|  28.5k|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1597|   134k|    {
 1598|   134k|        return has_value();
 1599|   134k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  484|   266k|    {
  485|   266k|        return m_has_value;
  486|   266k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1603|   102k|    {
 1604|   102k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   102k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   102k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   102k|        return this->get_unexpected().error();
 1606|   102k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   102k|    {
  468|   102k|        return m_unexpected;
  469|   102k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1662|  20.5k|    {
 1663|  20.5k|        return std::move(value());
 1664|  20.5k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1626|  29.4k|    {
 1627|  29.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  29.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  29.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  29.4k|        return this->get_value();
 1629|  29.4k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  450|  29.4k|    {
  451|  29.4k|        return m_value;
  452|  29.4k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1473|  56.1k|        : base(unexpect, std::move(e.error())),
 1474|  56.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  56.1k|    {
 1476|  56.1k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  444|  56.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  56.9k|          m_has_value(false)
  446|  56.9k|    {
  447|  56.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  79.1k|    {
 1177|  79.1k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1427|  21.7k|        : base(std::in_place, std::forward<U>(val)),
 1428|  21.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  21.7k|    {
 1430|  21.7k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  21.7k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  21.7k|    {
  437|  21.7k|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1597|  79.9k|    {
 1598|  79.9k|        return has_value();
 1599|  79.9k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  484|   157k|    {
  485|   157k|        return m_has_value;
  486|   157k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1603|  56.1k|    {
 1604|  56.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  56.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  56.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  56.1k|        return this->get_unexpected().error();
 1606|  56.1k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  56.1k|    {
  468|  56.1k|        return m_unexpected;
  469|  56.1k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1662|  17.2k|    {
 1663|  17.2k|        return std::move(value());
 1664|  17.2k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1626|  21.2k|    {
 1627|  21.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  21.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  21.2k|        return this->get_value();
 1629|  21.2k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  450|  21.2k|    {
  451|  21.2k|        return m_value;
  452|  21.2k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  8.36k|    {
 1837|  8.36k|        return detail::transform_error_impl(std::move(*this),
 1838|  8.36k|                                            std::forward<F>(f));
 1839|  8.36k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|  8.36k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  8.36k|    else {
 1333|  8.36k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  8.36k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  8.36k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 8.36k, False: 0]
  |  |  ------------------
  ------------------
 1335|  8.36k|                   ? result(*std::forward<Exp>(exp))
 1336|  8.36k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  8.36k|    }
 1340|  8.36k|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  66.0k|    {
  485|  66.0k|        return m_has_value;
  486|  66.0k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|  10.2k|    {
 1663|  10.2k|        return std::move(value());
 1664|  10.2k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  30.0k|    {
 1627|  30.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  30.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  30.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  30.0k|        return this->get_value();
 1629|  30.0k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  30.0k|    {
  451|  30.0k|        return m_value;
  452|  30.0k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1613|    102|    {
 1614|    102|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    102|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    102|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    102|        return std::move(this->get_unexpected().error());
 1616|    102|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|    102|    {
  468|    102|        return m_unexpected;
  469|    102|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1483|    932|        : base(unexpect, std::forward<Args>(args)...),
 1484|    932|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|    932|    {
 1486|    932|    }
_ZN3scn2v310scan_errorC2Ev:
 3558|   484k|    constexpr scan_error() noexcept = default;
_ZNK3scn2v36detail9fill_type13get_code_unitIcEET_v:
 6196|  3.02k|    {
 6197|  3.02k|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  |  924|  3.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6198|  3.02k|        CharT r{};
 6199|  3.02k|        std::memcpy(&r, m_data, m_size);
 6200|  3.02k|        return r;
 6201|  3.02k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  345|  1.11k|        : m_unexpected(std::forward<Err>(e))
  346|  1.11k|    {
  347|  1.11k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  1.11k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  1.11k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  354|  1.28k|        : m_unexpected(std::forward<Args>(args)...)
  355|  1.28k|    {
  356|  1.28k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  1.28k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  1.28k|    }
_ZNK3scn2v36detail9fill_type14get_code_unitsIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6205|    870|    {
 6206|    870|        return {reinterpret_cast<const CharT*>(m_data), m_size};
 6207|    870|    }
_ZNK3scn2v36ranges6detail6ssize_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSD_:
 2961|     52|    {
 2962|     52|        return fn::impl(std::forward<T>(t));
 2963|     52|    }
_ZN3scn2v36ranges6detail6ssize_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISD_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeELm8EElSM_E4typeE_EEOSD_:
 2952|     52|    {
 2953|     52|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 2954|     52|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|     52|    {
 2930|     52|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|     52|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 2895|     52|    {
 2896|     52|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|     52|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|     52|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  345|    174|        : m_unexpected(std::forward<Err>(e))
  346|    174|    {
  347|    174|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|    174|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|    174|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  345|      8|        : m_unexpected(std::forward<Err>(e))
  346|      8|    {
  347|      8|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|      8|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|      8|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_errorEE5errorEv:
  360|  18.4k|    {
  361|  18.4k|        return m_unexpected;
  362|  18.4k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  354|  3.60k|        : m_unexpected(std::forward<Args>(args)...)
  355|  3.60k|    {
  356|  3.60k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  3.60k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  3.60k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  345|  28.4k|        : m_unexpected(std::forward<Err>(e))
  346|  28.4k|    {
  347|  28.4k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  28.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  28.4k|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  360|  28.4k|    {
  361|  28.4k|        return m_unexpected;
  362|  28.4k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  354|  28.4k|        : m_unexpected(std::forward<Args>(args)...)
  355|  28.4k|    {
  356|  28.4k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  28.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  28.4k|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|    706|{
 1211|    706|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|    706|}
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  345|  2.89k|        : m_unexpected(std::forward<Err>(e))
  346|  2.89k|    {
  347|  2.89k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  2.89k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  2.89k|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JS8_EvEEDcOT_DpOT0_:
 1210|  1.24k|{
 1211|  1.24k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  1.24k|}
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  59.1k|{
  326|  59.1k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  59.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  59.1k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3341|  63.7k|    {
 3342|  63.7k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3343|  63.7k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|    428|        : base(unexpect, std::move(e.error())),
 1474|    428|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    428|    {
 1476|    428|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|    428|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    428|          m_has_value(false)
  446|    428|    {
  447|    428|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  35.8k|    {
 1177|  35.8k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1427|  35.4k|        : base(std::in_place, std::forward<U>(val)),
 1428|  35.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  35.4k|    {
 1430|  35.4k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  35.4k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  35.4k|    {
  437|  35.4k|    }
_ZNK3scn2v38expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1597|  25.4k|    {
 1598|  25.4k|        return has_value();
 1599|  25.4k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|  19.7k|    {
 1653|  19.7k|        return value();
 1654|  19.7k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1427|  6.58k|        : base(std::in_place, std::forward<U>(val)),
 1428|  6.58k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  6.58k|    {
 1430|  6.58k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  435|  6.58k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  6.58k|    {
  437|  6.58k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  6.93k|    {
 1177|  6.93k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|    344|        : base(unexpect, std::move(e.error())),
 1474|    344|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    344|    {
 1476|    344|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|    344|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    344|          m_has_value(false)
  446|    344|    {
  447|    344|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEcvbEv:
 1597|  4.35k|    {
 1598|  4.35k|        return has_value();
 1599|  4.35k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9has_valueEv:
  484|  12.3k|    {
  485|  12.3k|        return m_has_value;
  486|  12.3k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1652|  2.80k|    {
 1653|  2.80k|        return value();
 1654|  2.80k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  5.06k|    {
 1627|  5.06k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  5.06k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.06k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  5.06k|        return this->get_value();
 1629|  5.06k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9get_valueEv:
  450|  5.06k|    {
  451|  5.06k|        return m_value;
  452|  5.06k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1473|    174|        : base(unexpect, std::move(e.error())),
 1474|    174|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    174|    {
 1476|    174|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|    174|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    174|          m_has_value(false)
  446|    174|    {
  447|    174|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  4.50k|    {
 1177|  4.50k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|  4.33k|        : base(std::in_place, std::forward<U>(val)),
 1428|  4.33k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  4.33k|    {
 1430|  4.33k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2IJSB_EvEENS3_10in_place_tEDpOT_:
  435|  4.33k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  4.33k|    {
  437|  4.33k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|    748|    {
 1837|    748|        return detail::transform_error_impl(std::move(*this),
 1838|    748|                                            std::forward<F>(f));
 1839|    748|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1322|    748|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    748|    else {
 1333|    748|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    748|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    748|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 748, False: 0]
  |  |  ------------------
  ------------------
 1335|    748|                   ? result(*std::forward<Exp>(exp))
 1336|    748|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    748|    }
 1340|    748|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  2.25k|    {
 1663|  2.25k|        return std::move(value());
 1664|  2.25k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1427|  2.16k|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.16k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.16k|    {
 1430|  2.16k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  435|  2.16k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.16k|    {
  437|  2.16k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  8.99k|    {
 1177|  8.99k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5errorEv:
 1613|    316|    {
 1614|    316|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    316|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    316|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    316|        return std::move(this->get_unexpected().error());
 1616|    316|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  467|    316|    {
  468|    316|        return m_unexpected;
  469|    316|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1483|  1.35k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  1.35k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  1.35k|    {
 1486|  1.35k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|  6.06k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  6.06k|          m_has_value(false)
  446|  6.06k|    {
  447|  6.06k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.76k|    {
 2724|  1.76k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.76k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.76k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.76k|    {
 2705|  1.76k|        return decay_copy(t.begin());
 2706|  1.76k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEEu7__decayIT_EOSA_:
 1948|  3.79k|{
 1949|  3.79k|    return SCN_FWD(t);
  ------------------
  |  |  930|  3.79k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  3.79k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E5beginEv:
 3325|  1.76k|    {
 3326|  1.76k|        return m_iterator;
 3327|  1.76k|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.76k|    {
 2781|  1.76k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.76k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.76k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.76k|    {
 2763|  1.76k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.76k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.76k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E3endEv:
 3329|  1.76k|    {
 3330|  1.76k|        return m_sentinel;
 3331|  1.76k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_EC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESF_SA_:
 3310|  1.76k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.76k|    static_cast<    \
  |  |  929|  1.76k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.76k|    static_cast<    \
  |  |  929|  1.76k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  1.76k|    {
 3312|  1.76k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEcvbEv:
 1597|  4.50k|    {
 1598|  4.50k|        return has_value();
 1599|  4.50k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  9.00k|    {
  485|  9.00k|        return m_has_value;
  486|  9.00k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEE5errorEv:
 1603|    174|    {
 1604|    174|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    174|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    174|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    174|        return this->get_unexpected().error();
 1606|    174|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|    174|    {
  468|    174|        return m_unexpected;
  469|    174|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|  4.33k|    {
 1663|  4.33k|        return std::move(value());
 1664|  4.33k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|  4.33k|    {
 1627|  4.33k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.33k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.33k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.33k|        return this->get_value();
 1629|  4.33k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  4.33k|    {
  451|  4.33k|        return m_value;
  452|  4.33k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  23.6k|    {
 1177|  23.6k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|  23.6k|        : base(std::in_place, std::forward<U>(val)),
 1428|  23.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  23.6k|    {
 1430|  23.6k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  435|  23.6k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  23.6k|    {
  437|  23.6k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1597|  23.6k|    {
 1598|  23.6k|        return has_value();
 1599|  23.6k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  484|  47.2k|    {
  485|  47.2k|        return m_has_value;
  486|  47.2k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  23.6k|    {
 1663|  23.6k|        return std::move(value());
 1664|  23.6k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  23.6k|    {
 1627|  23.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  23.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  23.6k|        return this->get_value();
 1629|  23.6k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  450|  23.6k|    {
  451|  23.6k|        return m_value;
  452|  23.6k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  4.70k|        : base(unexpect, std::move(e.error())),
 1474|  4.70k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  4.70k|    {
 1476|  4.70k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|    588|        : base(unexpect, std::move(e.error())),
 1474|    588|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    588|    {
 1476|    588|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|    904|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    904|          m_has_value(false)
  446|    904|    {
  447|    904|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  6.72k|    {
 1177|  6.72k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2INS8_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S8_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|  4.30k|        : base(unexpect, std::move(e.error())),
 1474|  4.30k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  4.30k|    {
 1476|  4.30k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  4.30k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  4.30k|          m_has_value(false)
  446|  4.30k|    {
  447|  4.30k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEcvbEv:
 1597|  6.18k|    {
 1598|  6.18k|        return has_value();
 1599|  6.18k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9has_valueEv:
  484|  12.0k|    {
  485|  12.0k|        return m_has_value;
  486|  12.0k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1603|  2.23k|    {
 1604|  2.23k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.23k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.23k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.23k|        return this->get_unexpected().error();
 1606|  2.23k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  467|  3.04k|    {
  468|  3.04k|        return m_unexpected;
  469|  3.04k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1427|  1.10k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.10k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.10k|    {
 1430|  1.10k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  435|  1.10k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.10k|    {
  437|  1.10k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.10k|    {
 1177|  1.10k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  1.50k|    {
 1627|  1.50k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.50k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.50k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.50k|        return this->get_value();
 1629|  1.50k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9get_valueEv:
  450|  1.50k|    {
  451|  1.50k|        return m_value;
  452|  1.50k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1597|    828|    {
 1598|    828|        return has_value();
 1599|    828|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  484|  2.20k|    {
  485|  2.20k|        return m_has_value;
  486|  2.20k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    828|    {
 1177|    828|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1662|  1.10k|    {
 1663|  1.10k|        return std::move(value());
 1664|  1.10k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|  1.10k|    {
 1627|  1.10k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.10k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.10k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.10k|        return this->get_value();
 1629|  1.10k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  450|  1.10k|    {
  451|  1.10k|        return m_value;
  452|  1.10k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3329|  67.7k|    {
 3330|  67.7k|        return m_sentinel;
 3331|  67.7k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|  1.82k|    {
 1837|  1.82k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.82k|                                            std::forward<F>(f));
 1839|  1.82k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1322|  1.82k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.82k|    else {
 1333|  1.82k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.82k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.82k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.50k, False: 316]
  |  |  ------------------
  ------------------
 1335|  1.82k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.82k|                   : result(unexpect,
 1337|    316|                            trivial_invoke(std::forward<F>(f),
 1338|    316|                                           std::forward<Exp>(exp).error()));
 1339|  1.82k|    }
 1340|  1.82k|}
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1427|  1.50k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.50k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.50k|    {
 1430|  1.50k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  435|  1.50k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.50k|    {
  437|  1.50k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1483|    316|        : base(unexpect, std::forward<Args>(args)...),
 1484|    316|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|    316|    {
 1486|    316|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  1.50k|    {
 1663|  1.50k|        return std::move(value());
 1664|  1.50k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3325|  91.3k|    {
 3326|  91.3k|        return m_iterator;
 3327|  91.3k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1427|    828|        : base(std::in_place, std::forward<U>(val)),
 1428|    828|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    828|    {
 1430|    828|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  435|    828|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    828|    {
  437|    828|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1836|    828|    {
 1837|    828|        return detail::transform_error_impl(std::move(*this),
 1838|    828|                                            std::forward<F>(f));
 1839|    828|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSJ_OT0_:
 1322|    828|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    828|    else {
 1333|    828|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    828|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    828|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 828, False: 0]
  |  |  ------------------
  ------------------
 1335|    828|                   ? result(*std::forward<Exp>(exp))
 1336|    828|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    828|    }
 1340|    828|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  484|  1.65k|    {
  485|  1.65k|        return m_has_value;
  486|  1.65k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|    828|    {
 1663|    828|        return std::move(value());
 1664|    828|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|    828|    {
 1627|    828|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    828|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    828|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    828|        return this->get_value();
 1629|    828|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  450|    828|    {
  451|    828|        return m_value;
  452|    828|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1427|    828|        : base(std::in_place, std::forward<U>(val)),
 1428|    828|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    828|    {
 1430|    828|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  435|    828|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    828|    {
  437|    828|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    828|    {
 1177|    828|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEcvbEv:
 1597|    828|    {
 1598|    828|        return has_value();
 1599|    828|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.65k|    {
  485|  1.65k|        return m_has_value;
  486|  1.65k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|    828|    {
 1663|    828|        return std::move(value());
 1664|    828|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|    828|    {
 1627|    828|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    828|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    828|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    828|        return this->get_value();
 1629|    828|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    828|    {
  451|    828|        return m_value;
  452|    828|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|    808|    {
 1837|    808|        return detail::transform_error_impl(std::move(*this),
 1838|    808|                                            std::forward<F>(f));
 1839|    808|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1322|    808|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    808|    else {
 1333|    808|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    808|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    808|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 808]
  |  |  ------------------
  ------------------
 1335|    808|                   ? result(*std::forward<Exp>(exp))
 1336|    808|                   : result(unexpect,
 1337|    808|                            trivial_invoke(std::forward<F>(f),
 1338|    808|                                           std::forward<Exp>(exp).error()));
 1339|    808|    }
 1340|    808|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1613|    808|    {
 1614|    808|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    808|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    808|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    808|        return std::move(this->get_unexpected().error());
 1616|    808|    }
_ZN3scn2v313scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3642|  1.35k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|  1.35k|    static_cast<    \
  |  |  929|  1.35k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3643|  1.35k|    {
 3644|  1.35k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESK_SF_:
 3310|  35.5k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  35.5k|    static_cast<    \
  |  |  929|  35.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  35.5k|    static_cast<    \
  |  |  929|  35.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  35.5k|    {
 3312|  35.5k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEC2ISH_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|     20|        : base(unexpect, std::move(e.error())),
 1474|     20|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|     20|    {
 1476|     20|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  624|     20|        : m_has_value(false)
  625|     20|    {
  626|     20|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     20|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  688|     20|    {
  689|     20|        scn::detail::construct_at(unexpected_ptr(),
  690|     20|                                  std::forward<Args>(args)...);
  691|     20|        m_has_value = false;
  692|     20|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|     60|    {
  718|     60|        return reinterpret_cast<unexpected<E>*>(
  719|     60|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|     60|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|     60|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     20|    {
 1177|     20|    }
_ZNK3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEcvbEv:
 1597|     20|    {
 1598|     20|        return has_value();
 1599|     20|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE9has_valueEv:
  674|     60|    {
  675|     60|        return m_has_value;
  676|     60|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEE5errorEv:
 1603|     20|    {
 1604|     20|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     20|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     20|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     20|        return this->get_unexpected().error();
 1606|     20|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     20|    {
  658|     20|        return *unexpected_ptr();
  659|     20|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EED2Ev:
  630|     20|    {
  631|     20|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 20]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     20|        else {
  635|     20|            destroy_unexpected();
  636|     20|        }
  637|     20|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     20|    {
  700|     20|        scn::detail::destroy_at(unexpected_ptr());
  701|     20|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEcvbEv:
 1597|  9.26k|    {
 1598|  9.26k|        return has_value();
 1599|  9.26k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  17.9k|    {
  485|  17.9k|        return m_has_value;
  486|  17.9k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5errorEv:
 1603|  5.78k|    {
 1604|  5.78k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  5.78k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.78k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  5.78k|        return this->get_unexpected().error();
 1606|  5.78k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  5.78k|    {
  468|  5.78k|        return m_unexpected;
  469|  5.78k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  2.16k|    {
 1663|  2.16k|        return std::move(value());
 1664|  2.16k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  2.93k|    {
 1627|  2.93k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.93k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.93k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.93k|        return this->get_value();
 1629|  2.93k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.93k|    {
  451|  2.93k|        return m_value;
  452|  2.93k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  1.01k|        : base(unexpect, std::move(e.error())),
 1474|  1.01k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.01k|    {
 1476|  1.01k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  1.12k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.12k|          m_has_value(false)
  446|  1.12k|    {
  447|  1.12k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  14.2k|    {
 1177|  14.2k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  11.1k|        : base(unexpect, std::move(e.error())),
 1474|  11.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  11.1k|    {
 1476|  11.1k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  11.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  11.1k|          m_has_value(false)
  446|  11.1k|    {
  447|  11.1k|    }
_ZNK3scn2v38expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1597|  15.1k|    {
 1598|  15.1k|        return has_value();
 1599|  15.1k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  23.5k|    {
  485|  23.5k|        return m_has_value;
  486|  23.5k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1603|  5.57k|    {
 1604|  5.57k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  5.57k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.57k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  5.57k|        return this->get_unexpected().error();
 1606|  5.57k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  5.57k|    {
  468|  5.57k|        return m_unexpected;
  469|  5.57k|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1427|  3.62k|        : base(std::in_place, std::forward<U>(val)),
 1428|  3.62k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  3.62k|    {
 1430|  3.62k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|  3.62k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  3.62k|    {
  437|  3.62k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.62k|    {
 1177|  3.62k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  1.92k|    {
 1627|  1.92k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.92k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.92k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.92k|        return this->get_value();
 1629|  1.92k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  1.92k|    {
  451|  1.92k|        return m_value;
  452|  1.92k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  2.72k|    {
 1598|  2.72k|        return has_value();
 1599|  2.72k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  7.25k|    {
  485|  7.25k|        return m_has_value;
  486|  7.25k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.72k|    {
 1177|  2.72k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  3.62k|    {
 1663|  3.62k|        return std::move(value());
 1664|  3.62k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  3.62k|    {
 1627|  3.62k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.62k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.62k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.62k|        return this->get_value();
 1629|  3.62k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|  3.62k|    {
  451|  3.62k|        return m_value;
  452|  3.62k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3220|  50.0k|    {
 3221|  50.0k|        return detail::to_address(ranges::begin(derived()));
 3222|  50.0k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  50.0k|    {
 2724|  50.0k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  50.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  50.0k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  50.0k|    {
 2705|  50.0k|        return decay_copy(t.begin());
 2706|  50.0k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3179|  50.0k|    {
 3180|  50.0k|        return static_cast<D&>(*this);
 3181|  50.0k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1427|  1.92k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.92k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.92k|    {
 1430|  1.92k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  1.92k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.92k|    {
  437|  1.92k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1427|  2.72k|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.72k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.72k|    {
 1430|  2.72k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  435|  2.72k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.72k|    {
  437|  2.72k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  2.72k|    {
 1837|  2.72k|        return detail::transform_error_impl(std::move(*this),
 1838|  2.72k|                                            std::forward<F>(f));
 1839|  2.72k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1322|  2.72k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  2.72k|    else {
 1333|  2.72k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.72k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.72k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.72k, False: 0]
  |  |  ------------------
  ------------------
 1335|  2.72k|                   ? result(*std::forward<Exp>(exp))
 1336|  2.72k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  2.72k|    }
 1340|  2.72k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  484|  5.44k|    {
  485|  5.44k|        return m_has_value;
  486|  5.44k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  2.72k|    {
 1663|  2.72k|        return std::move(value());
 1664|  2.72k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  2.72k|    {
 1627|  2.72k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.72k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.72k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.72k|        return this->get_value();
 1629|  2.72k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  450|  2.72k|    {
  451|  2.72k|        return m_value;
  452|  2.72k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|  2.72k|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.72k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.72k|    {
 1430|  2.72k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  435|  2.72k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.72k|    {
  437|  2.72k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.72k|    {
 1177|  2.72k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1597|  2.72k|    {
 1598|  2.72k|        return has_value();
 1599|  2.72k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  484|  5.44k|    {
  485|  5.44k|        return m_has_value;
  486|  5.44k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  2.72k|    {
 1663|  2.72k|        return std::move(value());
 1664|  2.72k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  2.72k|    {
 1627|  2.72k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.72k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.72k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.72k|        return this->get_value();
 1629|  2.72k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.72k|    {
  451|  2.72k|        return m_value;
  452|  2.72k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISD_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SD_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1473|     40|        : base(unexpect, std::move(e.error())),
 1474|     40|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|     40|    {
 1476|     40|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  624|     40|        : m_has_value(false)
  625|     40|    {
  626|     40|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     40|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  688|     40|    {
  689|     40|        scn::detail::construct_at(unexpected_ptr(),
  690|     40|                                  std::forward<Args>(args)...);
  691|     40|        m_has_value = false;
  692|     40|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|    120|    {
  718|    120|        return reinterpret_cast<unexpected<E>*>(
  719|    120|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|    120|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|    120|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     40|    {
 1177|     40|    }
_ZNK3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1597|     40|    {
 1598|     40|        return has_value();
 1599|     40|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  674|    120|    {
  675|    120|        return m_has_value;
  676|    120|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1603|     40|    {
 1604|     40|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     40|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     40|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     40|        return this->get_unexpected().error();
 1606|     40|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     40|    {
  658|     40|        return *unexpected_ptr();
  659|     40|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  630|     40|    {
  631|     40|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 40]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     40|        else {
  635|     40|            destroy_unexpected();
  636|     40|        }
  637|     40|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     40|    {
  700|     40|        scn::detail::destroy_at(unexpected_ptr());
  701|     40|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  31.9k|    {
 2855|  31.9k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  31.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  31.9k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  31.9k|    {
 2836|  31.9k|        return t.data();
 2837|  31.9k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1473|   326k|        : base(unexpect, std::move(e.error())),
 1474|   326k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   326k|    {
 1476|   326k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  444|   326k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   326k|          m_has_value(false)
  446|   326k|    {
  447|   326k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   331k|    {
 1177|   331k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1427|  4.88k|        : base(std::in_place, std::forward<U>(val)),
 1428|  4.88k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  4.88k|    {
 1430|  4.88k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  435|  4.88k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  4.88k|    {
  437|  4.88k|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1210|  2.63k|{
 1211|  2.63k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  2.63k|}
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 1836|    272|    {
 1837|    272|        return detail::transform_error_impl(std::move(*this),
 1838|    272|                                            std::forward<F>(f));
 1839|    272|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESG_EEDaOSK_OT0_:
 1322|    272|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    272|    else {
 1333|    272|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    272|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    272|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 272, False: 0]
  |  |  ------------------
  ------------------
 1335|    272|                   ? result(*std::forward<Exp>(exp))
 1336|    272|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    272|    }
 1340|    272|}
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1427|    272|        : base(std::in_place, std::forward<U>(val)),
 1428|    272|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    272|    {
 1430|    272|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  435|    272|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    272|    {
  437|    272|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    272|    {
 1177|    272|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|    272|    {
 1598|    272|        return has_value();
 1599|    272|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|    544|    {
  485|    544|        return m_has_value;
  486|    544|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1662|    272|    {
 1663|    272|        return std::move(value());
 1664|    272|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|    272|    {
 1627|    272|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    272|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    272|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    272|        return this->get_value();
 1629|    272|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    272|    {
  451|    272|        return m_value;
  452|    272|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1822|    544|    {
 1823|    544|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|    544|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSI_OT0_:
 1322|    544|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    544|    else {
 1333|    544|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    544|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    544|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 544]
  |  |  ------------------
  ------------------
 1335|    544|                   ? result(*std::forward<Exp>(exp))
 1336|    544|                   : result(unexpect,
 1337|    544|                            trivial_invoke(std::forward<F>(f),
 1338|    544|                                           std::forward<Exp>(exp).error()));
 1339|    544|    }
 1340|    544|}
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1652|    768|    {
 1653|    768|        return value();
 1654|    768|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3663|      4|    auto&& SCN_TRY_TMP = (x);                          \
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|    268|    {
 2724|    268|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    268|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|    268|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|    268|    {
 2705|    268|        return decay_copy(t.begin());
 2706|    268|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3663|    250|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|    908|    {
 1837|    908|        return detail::transform_error_impl(std::move(*this),
 1838|    908|                                            std::forward<F>(f));
 1839|    908|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1322|    908|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    908|    else {
 1333|    908|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    908|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    908|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 908, False: 0]
  |  |  ------------------
  ------------------
 1335|    908|                   ? result(*std::forward<Exp>(exp))
 1336|    908|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    908|    }
 1340|    908|}
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|    908|        : base(std::in_place, std::forward<U>(val)),
 1428|    908|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    908|    {
 1430|    908|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|    908|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    908|    {
  437|    908|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    908|    {
 1177|    908|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|    908|    {
 1598|    908|        return has_value();
 1599|    908|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.81k|    {
  485|  1.81k|        return m_has_value;
  486|  1.81k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|    908|    {
 1663|    908|        return std::move(value());
 1664|    908|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|    908|    {
 1627|    908|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    908|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    908|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    908|        return this->get_value();
 1629|    908|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    908|    {
  451|    908|        return m_value;
  452|    908|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1822|    932|    {
 1823|    932|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|    932|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|    932|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    932|    else {
 1333|    932|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    932|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    932|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 932]
  |  |  ------------------
  ------------------
 1335|    932|                   ? result(*std::forward<Exp>(exp))
 1336|    932|                   : result(unexpect,
 1337|    932|                            trivial_invoke(std::forward<F>(f),
 1338|    932|                                           std::forward<Exp>(exp).error()));
 1339|    932|    }
 1340|    932|}
_ZN3scn2v313scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3642|    932|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|    932|    static_cast<    \
  |  |  929|    932|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3643|    932|    {
 3644|    932|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1652|  8.94k|    {
 1653|  8.94k|        return value();
 1654|  8.94k|    }
_ZN3scn2v36detail22parse_presentation_setIcRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
 6707|  3.03k|{
 6708|  3.03k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  3.03k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.03k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6709|  3.03k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  3.03k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.03k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6710|       |
 6711|  3.03k|    auto start = begin;
 6712|  3.03k|    ++begin;
 6713|       |
 6714|  3.03k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  3.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.03k]
  |  |  ------------------
  ------------------
 6715|       |        // clang-format off
 6716|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6717|       |        // clang-format on
 6718|      0|        return {};
 6719|      0|    }
 6720|  3.03k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6720:9): [True: 492, False: 2.53k]
  ------------------
 6721|    492|        handler.on_charset_inverted();
 6722|    492|        ++begin;
 6723|    492|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    492|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 492]
  |  |  ------------------
  ------------------
 6724|       |            // clang-format off
 6725|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6726|       |            // clang-format on
 6727|      0|            return {};
 6728|      0|        }
 6729|    492|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6729:13): [True: 6, False: 486]
  ------------------
 6730|      6|            handler.on_charset_single(char32_t{']'});
 6731|      6|            ++begin;
 6732|      6|        }
 6733|    492|    }
 6734|  2.53k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6734:14): [True: 0, False: 2.53k]
  ------------------
 6735|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6736|      0|    }
 6737|       |
 6738|   439k|    while (begin != end) {
  ------------------
  |  Branch (6738:12): [True: 439k, False: 0]
  ------------------
 6739|   439k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   439k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 439k]
  |  |  ------------------
  ------------------
 6740|      0|            break;
 6741|      0|        }
 6742|       |
 6743|   439k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6743:13): [True: 3.03k, False: 435k]
  ------------------
 6744|  3.03k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6745|  3.03k|        }
 6746|       |
 6747|   435k|        parse_presentation_set_literal(begin, end, handler);
 6748|   435k|    }
 6749|       |
 6750|      0|    SCN_UNLIKELY_ATTR
 6751|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6752|      0|    return {};
 6753|  3.03k|}
_ZN3scn2v36detail30parse_presentation_set_literalIcRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
 6671|   435k|{
 6672|   435k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   435k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   435k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6673|       |
 6674|   435k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6675|   435k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|   435k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 435k]
  |  |  ------------------
  ------------------
 6676|      0|        return;
 6677|      0|    }
 6678|       |
 6679|   435k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6679:9): [True: 435k, False: 0]
  |  Branch (6679:25): [True: 2.91k, False: 433k]
  |  Branch (6679:49): [True: 2.91k, False: 0]
  ------------------
 6680|   435k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6680:9): [True: 2.83k, False: 84]
  ------------------
 6681|  2.83k|        ++begin;
 6682|       |
 6683|  2.83k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6684|  2.83k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  2.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.83k]
  |  |  ------------------
  ------------------
 6685|      0|            return;
 6686|      0|        }
 6687|       |
 6688|  2.83k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  2.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.83k]
  |  |  ------------------
  ------------------
 6689|       |            // clang-format off
 6690|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6691|       |            // clang-format on
 6692|      0|            return;
 6693|      0|        }
 6694|       |
 6695|  2.83k|        handler.on_charset_range(cp_first, cp_second + 1);
 6696|  2.83k|        return;
 6697|  2.83k|    }
 6698|       |
 6699|   433k|    handler.on_charset_single(cp_first);
 6700|   433k|}
_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
 6647|   438k|{
 6648|   438k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   438k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   438k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6649|       |
 6650|   438k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6651|   438k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|   877k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 438k]
  |  |  |  Branch (859:45): [True: 0, False: 438k]
  |  |  |  Branch (859:45): [True: 0, False: 438k]
  |  |  ------------------
  ------------------
 6652|      0|        handler.on_error("Invalid encoding in format string");
 6653|      0|        return invalid_code_point;
 6654|      0|    }
 6655|       |
 6656|   438k|    const auto cp =
 6657|   438k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6658|   438k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   438k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 438k]
  |  |  ------------------
  ------------------
 6659|      0|        handler.on_error("Invalid encoding in format string");
 6660|      0|        return invalid_code_point;
 6661|      0|    }
 6662|       |
 6663|   438k|    begin += len;
 6664|   438k|    return cp;
 6665|   438k|}
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  20.4k|    {
 1177|  20.4k|    }
_ZN3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEC2IS4_vEEOT_:
 1427|  20.4k|        : base(std::in_place, std::forward<U>(val)),
 1428|  20.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  20.4k|    {
 1430|  20.4k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EEC2IJS5_EvEENS3_10in_place_tEDpOT_:
  435|  20.4k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  20.4k|    {
  437|  20.4k|    }
_ZNK3scn2v36detail12format_specs14charset_stringIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6261|  16.9k|    {
 6262|  16.9k|        return {reinterpret_cast<const CharT*>(charset_string_data),
 6263|  16.9k|                charset_string_size};
 6264|  16.9k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IRKS7_vEEOT_:
 1427|    768|        : base(std::in_place, std::forward<U>(val)),
 1428|    768|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    768|    {
 1430|    768|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJRKS8_EvEENSt3__110in_place_tEDpOT_:
  435|    768|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    768|    {
  437|    768|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1427|  1.76k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.76k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.76k|    {
 1430|  1.76k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  435|  1.76k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.76k|    {
  437|  1.76k|    }
_ZN3scn2v36detail34decode_code_point_exhaustive_validIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4028|   124k|{
 4029|   124k|    if constexpr (sizeof(CharT) == 1) {
 4030|   124k|        return decode_utf8_code_point_exhaustive_valid(input);
 4031|       |    }
 4032|       |    else if constexpr (sizeof(CharT) == 2) {
 4033|       |        return decode_utf16_code_point_exhaustive_valid(input);
 4034|       |    }
 4035|       |    else {
 4036|       |        SCN_EXPECT(input.size() == 1);
 4037|       |        return static_cast<char32_t>(input.front());
 4038|       |    }
 4039|   124k|}
_ZZN3scn2v36detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3906|  17.6k|    const auto is_trailing_code_unit = [](char ch) {
 3907|  17.6k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3908|  17.6k|    };
_ZNK3scn2v36detail9fill_type13get_code_unitIwEET_v:
 6196|  1.25k|    {
 6197|  1.25k|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  |  924|  1.25k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.25k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6198|  1.25k|        CharT r{};
 6199|  1.25k|        std::memcpy(&r, m_data, m_size);
 6200|  1.25k|        return r;
 6201|  1.25k|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3802|   367k|{
 3803|       |    if constexpr (sizeof(U) == 1) {
 3804|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|       |    }
 3806|       |    else if constexpr (sizeof(U) == 2) {
 3807|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|       |    }
 3809|   367k|    else {
 3810|       |        // utf-32
 3811|   367k|        static_assert(sizeof(U) == 4);
 3812|   367k|        SCN_UNUSED(ch);
  ------------------
  |  |  909|   367k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3813|   367k|        return 1;
 3814|   367k|    }
 3815|   367k|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|   316k|{
 4009|       |    if constexpr (sizeof(CharT) == 1) {
 4010|       |        return decode_utf8_code_point_exhaustive(input);
 4011|       |    }
 4012|       |    else if constexpr (sizeof(CharT) == 2) {
 4013|       |        return decode_utf16_code_point_exhaustive(input);
 4014|       |    }
 4015|   316k|    else {
 4016|   316k|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|   316k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   316k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4017|   316k|        auto cp = static_cast<char32_t>(input.front());
 4018|   316k|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 85.1k, False: 231k]
  |  |  ------------------
  ------------------
 4019|  85.1k|            return invalid_code_point;
 4020|  85.1k|        }
 4021|   231k|        return cp;
 4022|   316k|    }
 4023|   316k|}
_ZN3scn2v36detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3694|  59.3k|{
 3695|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3696|       |                                          decltype(first), decltype(last)> &&
 3697|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3698|       |        return {first, last};
 3699|       |    }
 3700|  59.3k|    else {
 3701|  59.3k|        return {to_address(first), static_cast<size_t>(std::distance(
 3702|  59.3k|                                       to_address(first), to_address(last)))};
 3703|  59.3k|    }
 3704|  59.3k|}
_ZN3scn2v36detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|   183k|{
  326|   183k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   183k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|   183k|}
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  303|   207k|{
  304|   207k|    return p;
  305|   207k|}
_ZN3scn2v36detail25make_string_view_iteratorIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3725|  7.39k|{
 3726|       |    if constexpr (std::is_constructible_v<
 3727|       |                      typename std::basic_string_view<CharT>::iterator,
 3728|       |                      decltype(it)> &&
 3729|  7.39k|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3730|  7.39k|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  7.39k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3731|  7.39k|        return it;
 3732|       |    }
 3733|       |    else {
 3734|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3735|       |    }
 3736|  7.39k|}
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  23.4k|{
  326|  23.4k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  23.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  23.4k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3341|  21.5k|    {
 3342|  21.5k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3343|  21.5k|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|    134|        : base(unexpect, std::move(e.error())),
 1474|    134|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    134|    {
 1476|    134|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|    134|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    134|          m_has_value(false)
  446|    134|    {
  447|    134|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  19.1k|    {
 1177|  19.1k|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1427|  18.9k|        : base(std::in_place, std::forward<U>(val)),
 1428|  18.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  18.9k|    {
 1430|  18.9k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  18.9k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  18.9k|    {
  437|  18.9k|    }
_ZNK3scn2v38expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1597|  5.25k|    {
 1598|  5.25k|        return has_value();
 1599|  5.25k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  33.0k|    {
  485|  33.0k|        return m_has_value;
  486|  33.0k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  13.7k|    {
 1627|  13.7k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  13.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  13.7k|        return this->get_value();
 1629|  13.7k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  13.7k|    {
  451|  13.7k|        return m_value;
  452|  13.7k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1427|  2.23k|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.23k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.23k|    {
 1430|  2.23k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  435|  2.23k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.23k|    {
  437|  2.23k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.39k|    {
 1177|  2.39k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|    154|        : base(unexpect, std::move(e.error())),
 1474|    154|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    154|    {
 1476|    154|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|    154|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    154|          m_has_value(false)
  446|    154|    {
  447|    154|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEcvbEv:
 1597|    978|    {
 1598|    978|        return has_value();
 1599|    978|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9has_valueEv:
  484|  3.80k|    {
  485|  3.80k|        return m_has_value;
  486|  3.80k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  1.26k|    {
 1627|  1.26k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.26k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.26k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.26k|        return this->get_value();
 1629|  1.26k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9get_valueEv:
  450|  1.26k|    {
  451|  1.26k|        return m_value;
  452|  1.26k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.05k|    {
 1177|  2.05k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|  2.05k|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.05k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.05k|    {
 1430|  2.05k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EEC2IJSB_EvEENS3_10in_place_tEDpOT_:
  435|  2.05k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.05k|    {
  437|  2.05k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|    352|    {
 1837|    352|        return detail::transform_error_impl(std::move(*this),
 1838|    352|                                            std::forward<F>(f));
 1839|    352|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1322|    352|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    352|    else {
 1333|    352|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    352|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    352|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 352, False: 0]
  |  |  ------------------
  ------------------
 1335|    352|                   ? result(*std::forward<Exp>(exp))
 1336|    352|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    352|    }
 1340|    352|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  1.26k|    {
 1663|  1.26k|        return std::move(value());
 1664|  1.26k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1427|    956|        : base(std::in_place, std::forward<U>(val)),
 1428|    956|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    956|    {
 1430|    956|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  435|    956|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    956|    {
  437|    956|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  4.01k|    {
 1177|  4.01k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5errorEv:
 1613|    154|    {
 1614|    154|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    154|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    154|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    154|        return std::move(this->get_unexpected().error());
 1616|    154|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  467|    154|    {
  468|    154|        return m_unexpected;
  469|    154|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1483|    726|        : base(unexpect, std::forward<Args>(args)...),
 1484|    726|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|    726|    {
 1486|    726|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|  2.81k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  2.81k|          m_has_value(false)
  446|  2.81k|    {
  447|  2.81k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|    678|    {
 2724|    678|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    678|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|    678|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|    678|    {
 2705|    678|        return decay_copy(t.begin());
 2706|    678|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEEu7__decayIT_EOSA_:
 1948|  1.49k|{
 1949|  1.49k|    return SCN_FWD(t);
  ------------------
  |  |  930|  1.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  1.49k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_E5beginEv:
 3325|    678|    {
 3326|    678|        return m_iterator;
 3327|    678|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|    678|    {
 2781|    678|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    678|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|    678|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|    678|    {
 2763|    678|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|    678|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|    678|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_E3endEv:
 3329|    678|    {
 3330|    678|        return m_sentinel;
 3331|    678|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_EC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESF_SA_:
 3310|    678|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|    678|    static_cast<    \
  |  |  929|    678|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|    678|    static_cast<    \
  |  |  929|    678|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|    678|    {
 3312|    678|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEcvbEv:
 1597|  2.05k|    {
 1598|  2.05k|        return has_value();
 1599|  2.05k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  4.10k|    {
  485|  4.10k|        return m_has_value;
  486|  4.10k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|  2.05k|    {
 1663|  2.05k|        return std::move(value());
 1664|  2.05k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|  2.05k|    {
 1627|  2.05k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.05k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.05k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.05k|        return this->get_value();
 1629|  2.05k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.05k|    {
  451|  2.05k|        return m_value;
  452|  2.05k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  12.9k|    {
 1177|  12.9k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|  12.9k|        : base(std::in_place, std::forward<U>(val)),
 1428|  12.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  12.9k|    {
 1430|  12.9k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  435|  12.9k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  12.9k|    {
  437|  12.9k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  8.57k|    {
 1837|  8.57k|        return detail::transform_error_impl(std::move(*this),
 1838|  8.57k|                                            std::forward<F>(f));
 1839|  8.57k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|  8.57k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  8.57k|    else {
 1333|  8.57k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  8.57k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  8.57k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 8.57k, False: 0]
  |  |  ------------------
  ------------------
 1335|  8.57k|                   ? result(*std::forward<Exp>(exp))
 1336|  8.57k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  8.57k|    }
 1340|  8.57k|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|  13.7k|    {
 1663|  13.7k|        return std::move(value());
 1664|  13.7k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1613|    134|    {
 1614|    134|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    134|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    134|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    134|        return std::move(this->get_unexpected().error());
 1616|    134|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|    134|    {
  468|    134|        return m_unexpected;
  469|    134|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1483|    868|        : base(unexpect, std::forward<Args>(args)...),
 1484|    868|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|    868|    {
 1486|    868|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1597|  12.9k|    {
 1598|  12.9k|        return has_value();
 1599|  12.9k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  484|  25.8k|    {
  485|  25.8k|        return m_has_value;
  486|  25.8k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  12.9k|    {
 1663|  12.9k|        return std::move(value());
 1664|  12.9k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  12.9k|    {
 1627|  12.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  12.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  12.9k|        return this->get_value();
 1629|  12.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  450|  12.9k|    {
  451|  12.9k|        return m_value;
  452|  12.9k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  2.08k|        : base(unexpect, std::move(e.error())),
 1474|  2.08k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  2.08k|    {
 1476|  2.08k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|    300|        : base(unexpect, std::move(e.error())),
 1474|    300|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    300|    {
 1476|    300|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|    454|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    454|          m_has_value(false)
  446|    454|    {
  447|    454|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.86k|    {
 1177|  3.86k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2INS8_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S8_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|  2.50k|        : base(unexpect, std::move(e.error())),
 1474|  2.50k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  2.50k|    {
 1476|  2.50k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  2.50k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  2.50k|          m_has_value(false)
  446|  2.50k|    {
  447|  2.50k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEcvbEv:
 1597|  3.57k|    {
 1598|  3.57k|        return has_value();
 1599|  3.57k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9has_valueEv:
  484|  6.85k|    {
  485|  6.85k|        return m_has_value;
  486|  6.85k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1603|  1.20k|    {
 1604|  1.20k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.20k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.20k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.20k|        return this->get_unexpected().error();
 1606|  1.20k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  467|  1.64k|    {
  468|  1.64k|        return m_unexpected;
  469|  1.64k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1427|    616|        : base(std::in_place, std::forward<U>(val)),
 1428|    616|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    616|    {
 1430|    616|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  435|    616|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    616|    {
  437|    616|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    616|    {
 1177|    616|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|    908|    {
 1627|    908|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    908|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    908|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    908|        return this->get_value();
 1629|    908|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9get_valueEv:
  450|    908|    {
  451|    908|        return m_value;
  452|    908|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1597|    470|    {
 1598|    470|        return has_value();
 1599|    470|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  484|  1.23k|    {
  485|  1.23k|        return m_has_value;
  486|  1.23k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    470|    {
 1177|    470|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1662|    616|    {
 1663|    616|        return std::move(value());
 1664|    616|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|    616|    {
 1627|    616|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    616|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    616|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    616|        return this->get_value();
 1629|    616|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  450|    616|    {
  451|    616|        return m_value;
  452|    616|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3329|  49.9k|    {
 3330|  49.9k|        return m_sentinel;
 3331|  49.9k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|  1.06k|    {
 1837|  1.06k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.06k|                                            std::forward<F>(f));
 1839|  1.06k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1322|  1.06k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.06k|    else {
 1333|  1.06k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.06k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.06k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 908, False: 154]
  |  |  ------------------
  ------------------
 1335|  1.06k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.06k|                   : result(unexpect,
 1337|    154|                            trivial_invoke(std::forward<F>(f),
 1338|    154|                                           std::forward<Exp>(exp).error()));
 1339|  1.06k|    }
 1340|  1.06k|}
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1427|    908|        : base(std::in_place, std::forward<U>(val)),
 1428|    908|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    908|    {
 1430|    908|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  435|    908|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    908|    {
  437|    908|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1483|    154|        : base(unexpect, std::forward<Args>(args)...),
 1484|    154|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|    154|    {
 1486|    154|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|    908|    {
 1663|    908|        return std::move(value());
 1664|    908|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3325|  54.7k|    {
 3326|  54.7k|        return m_iterator;
 3327|  54.7k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1427|    470|        : base(std::in_place, std::forward<U>(val)),
 1428|    470|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    470|    {
 1430|    470|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  435|    470|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    470|    {
  437|    470|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1836|    470|    {
 1837|    470|        return detail::transform_error_impl(std::move(*this),
 1838|    470|                                            std::forward<F>(f));
 1839|    470|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSJ_OT0_:
 1322|    470|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    470|    else {
 1333|    470|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    470|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    470|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 470, False: 0]
  |  |  ------------------
  ------------------
 1335|    470|                   ? result(*std::forward<Exp>(exp))
 1336|    470|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    470|    }
 1340|    470|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  484|    940|    {
  485|    940|        return m_has_value;
  486|    940|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|    470|    {
 1663|    470|        return std::move(value());
 1664|    470|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|    470|    {
 1627|    470|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    470|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    470|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    470|        return this->get_value();
 1629|    470|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  450|    470|    {
  451|    470|        return m_value;
  452|    470|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1427|    470|        : base(std::in_place, std::forward<U>(val)),
 1428|    470|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    470|    {
 1430|    470|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  435|    470|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    470|    {
  437|    470|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    470|    {
 1177|    470|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEcvbEv:
 1597|    470|    {
 1598|    470|        return has_value();
 1599|    470|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  484|    940|    {
  485|    940|        return m_has_value;
  486|    940|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|    470|    {
 1663|    470|        return std::move(value());
 1664|    470|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|    470|    {
 1627|    470|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    470|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    470|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    470|        return this->get_value();
 1629|    470|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    470|    {
  451|    470|        return m_value;
  452|    470|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1836|    434|    {
 1837|    434|        return detail::transform_error_impl(std::move(*this),
 1838|    434|                                            std::forward<F>(f));
 1839|    434|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSJ_OT0_:
 1322|    434|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    434|    else {
 1333|    434|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    434|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    434|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 434]
  |  |  ------------------
  ------------------
 1335|    434|                   ? result(*std::forward<Exp>(exp))
 1336|    434|                   : result(unexpect,
 1337|    434|                            trivial_invoke(std::forward<F>(f),
 1338|    434|                                           std::forward<Exp>(exp).error()));
 1339|    434|    }
 1340|    434|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1613|    434|    {
 1614|    434|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    434|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    434|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    434|        return std::move(this->get_unexpected().error());
 1616|    434|    }
_ZN3scn2v313scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3642|    726|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|    726|    static_cast<    \
  |  |  929|    726|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3643|    726|    {
 3644|    726|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESK_SF_:
 3310|  18.6k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  18.6k|    static_cast<    \
  |  |  929|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  18.6k|    static_cast<    \
  |  |  929|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  18.6k|    {
 3312|  18.6k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEC2ISK_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISK_OT_EEvE4typeELPv0ETnPNSN_IXsr3stdE16is_convertible_vISP_SK_EEvE4typeELST_0EEEONS0_10unexpectedISO_EE:
 1473|     36|        : base(unexpect, std::move(e.error())),
 1474|     36|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|     36|    {
 1476|     36|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EEC2IJSL_EvEENS0_10unexpect_tEDpOT_:
  624|     36|        : m_has_value(false)
  625|     36|    {
  626|     36|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     36|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESL_EEEvDpOT_:
  688|     36|    {
  689|     36|        scn::detail::construct_at(unexpected_ptr(),
  690|     36|                                  std::forward<Args>(args)...);
  691|     36|        m_has_value = false;
  692|     36|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|    108|    {
  718|    108|        return reinterpret_cast<unexpected<E>*>(
  719|    108|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|    108|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|    108|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     36|    {
 1177|     36|    }
_ZNK3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|     36|    {
 1598|     36|        return has_value();
 1599|     36|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|    108|    {
  675|    108|        return m_has_value;
  676|    108|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1603|     36|    {
 1604|     36|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     36|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     36|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     36|        return this->get_unexpected().error();
 1606|     36|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     36|    {
  658|     36|        return *unexpected_ptr();
  659|     36|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|     36|    {
  631|     36|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 36]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     36|        else {
  635|     36|            destroy_unexpected();
  636|     36|        }
  637|     36|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     36|    {
  700|     36|        scn::detail::destroy_at(unexpected_ptr());
  701|     36|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEcvbEv:
 1597|  4.15k|    {
 1598|  4.15k|        return has_value();
 1599|  4.15k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  8.02k|    {
  485|  8.02k|        return m_has_value;
  486|  8.02k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5errorEv:
 1603|  2.66k|    {
 1604|  2.66k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.66k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.66k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.66k|        return this->get_unexpected().error();
 1606|  2.66k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  2.66k|    {
  468|  2.66k|        return m_unexpected;
  469|  2.66k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|    956|    {
 1663|    956|        return std::move(value());
 1664|    956|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  1.19k|    {
 1627|  1.19k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.19k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.19k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.19k|        return this->get_value();
 1629|  1.19k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.19k|    {
  451|  1.19k|        return m_value;
  452|  1.19k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|    994|        : base(unexpect, std::move(e.error())),
 1474|    994|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    994|    {
 1476|    994|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  1.12k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.12k|          m_has_value(false)
  446|  1.12k|    {
  447|  1.12k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  16.7k|    {
 1177|  16.7k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  10.4k|        : base(unexpect, std::move(e.error())),
 1474|  10.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  10.4k|    {
 1476|  10.4k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  10.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  10.4k|          m_has_value(false)
  446|  10.4k|    {
  447|  10.4k|    }
_ZNK3scn2v38expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1597|  17.6k|    {
 1598|  17.6k|        return has_value();
 1599|  17.6k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  28.9k|    {
  485|  28.9k|        return m_has_value;
  486|  28.9k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1603|  5.33k|    {
 1604|  5.33k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  5.33k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.33k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  5.33k|        return this->get_unexpected().error();
 1606|  5.33k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  5.33k|    {
  468|  5.33k|        return m_unexpected;
  469|  5.33k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1427|  3.46k|        : base(std::in_place, std::forward<U>(val)),
 1428|  3.46k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  3.46k|    {
 1430|  3.46k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|  3.46k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  3.46k|    {
  437|  3.46k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.46k|    {
 1177|  3.46k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  5.16k|    {
 1627|  5.16k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  5.16k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.16k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  5.16k|        return this->get_value();
 1629|  5.16k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  5.16k|    {
  451|  5.16k|        return m_value;
  452|  5.16k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  2.60k|    {
 1598|  2.60k|        return has_value();
 1599|  2.60k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  6.93k|    {
  485|  6.93k|        return m_has_value;
  486|  6.93k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.60k|    {
 1177|  2.60k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  3.46k|    {
 1663|  3.46k|        return std::move(value());
 1664|  3.46k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  3.46k|    {
 1627|  3.46k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.46k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.46k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.46k|        return this->get_value();
 1629|  3.46k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|  3.46k|    {
  451|  3.46k|        return m_value;
  452|  3.46k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  5.30k|    {
 1837|  5.30k|        return detail::transform_error_impl(std::move(*this),
 1838|  5.30k|                                            std::forward<F>(f));
 1839|  5.30k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|  5.30k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  5.30k|    else {
 1333|  5.30k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  5.30k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  5.30k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 5.16k, False: 134]
  |  |  ------------------
  ------------------
 1335|  5.30k|                   ? result(*std::forward<Exp>(exp))
 1336|  5.30k|                   : result(unexpect,
 1337|    134|                            trivial_invoke(std::forward<F>(f),
 1338|    134|                                           std::forward<Exp>(exp).error()));
 1339|  5.30k|    }
 1340|  5.30k|}
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1427|  5.16k|        : base(std::in_place, std::forward<U>(val)),
 1428|  5.16k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  5.16k|    {
 1430|  5.16k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  5.16k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  5.16k|    {
  437|  5.16k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1483|    134|        : base(unexpect, std::forward<Args>(args)...),
 1484|    134|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|    134|    {
 1486|    134|    }
_ZNO3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|  5.16k|    {
 1663|  5.16k|        return std::move(value());
 1664|  5.16k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1427|  2.60k|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.60k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.60k|    {
 1430|  2.60k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  435|  2.60k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.60k|    {
  437|  2.60k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  2.60k|    {
 1837|  2.60k|        return detail::transform_error_impl(std::move(*this),
 1838|  2.60k|                                            std::forward<F>(f));
 1839|  2.60k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1322|  2.60k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  2.60k|    else {
 1333|  2.60k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.60k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.60k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.60k, False: 0]
  |  |  ------------------
  ------------------
 1335|  2.60k|                   ? result(*std::forward<Exp>(exp))
 1336|  2.60k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  2.60k|    }
 1340|  2.60k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  484|  5.21k|    {
  485|  5.21k|        return m_has_value;
  486|  5.21k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  2.60k|    {
 1663|  2.60k|        return std::move(value());
 1664|  2.60k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  2.60k|    {
 1627|  2.60k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.60k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.60k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.60k|        return this->get_value();
 1629|  2.60k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  450|  2.60k|    {
  451|  2.60k|        return m_value;
  452|  2.60k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|  2.60k|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.60k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.60k|    {
 1430|  2.60k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  435|  2.60k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.60k|    {
  437|  2.60k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.60k|    {
 1177|  2.60k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1597|  2.60k|    {
 1598|  2.60k|        return has_value();
 1599|  2.60k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  484|  5.21k|    {
  485|  5.21k|        return m_has_value;
  486|  5.21k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  2.60k|    {
 1663|  2.60k|        return std::move(value());
 1664|  2.60k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  2.60k|    {
 1627|  2.60k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.60k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.60k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.60k|        return this->get_value();
 1629|  2.60k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.60k|    {
  451|  2.60k|        return m_value;
  452|  2.60k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1473|     40|        : base(unexpect, std::move(e.error())),
 1474|     40|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|     40|    {
 1476|     40|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  624|     40|        : m_has_value(false)
  625|     40|    {
  626|     40|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     40|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  688|     40|    {
  689|     40|        scn::detail::construct_at(unexpected_ptr(),
  690|     40|                                  std::forward<Args>(args)...);
  691|     40|        m_has_value = false;
  692|     40|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|    120|    {
  718|    120|        return reinterpret_cast<unexpected<E>*>(
  719|    120|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|    120|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|    120|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     40|    {
 1177|     40|    }
_ZNK3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|     40|    {
 1598|     40|        return has_value();
 1599|     40|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|    120|    {
  675|    120|        return m_has_value;
  676|    120|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1603|     40|    {
 1604|     40|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     40|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     40|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     40|        return this->get_unexpected().error();
 1606|     40|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     40|    {
  658|     40|        return *unexpected_ptr();
  659|     40|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|     40|    {
  631|     40|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 40]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     40|        else {
  635|     40|            destroy_unexpected();
  636|     40|        }
  637|     40|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     40|    {
  700|     40|        scn::detail::destroy_at(unexpected_ptr());
  701|     40|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  11.9k|    {
 2855|  11.9k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  11.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  11.9k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  11.9k|    {
 2836|  11.9k|        return t.data();
 2837|  11.9k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3220|  21.9k|    {
 3221|  21.9k|        return detail::to_address(ranges::begin(derived()));
 3222|  21.9k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  21.9k|    {
 2724|  21.9k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  21.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  21.9k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  21.9k|    {
 2705|  21.9k|        return decay_copy(t.begin());
 2706|  21.9k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3179|  21.9k|    {
 3180|  21.9k|        return static_cast<D&>(*this);
 3181|  21.9k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 1836|    146|    {
 1837|    146|        return detail::transform_error_impl(std::move(*this),
 1838|    146|                                            std::forward<F>(f));
 1839|    146|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESG_EEDaOSK_OT0_:
 1322|    146|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    146|    else {
 1333|    146|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    146|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    146|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 146, False: 0]
  |  |  ------------------
  ------------------
 1335|    146|                   ? result(*std::forward<Exp>(exp))
 1336|    146|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    146|    }
 1340|    146|}
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1427|    146|        : base(std::in_place, std::forward<U>(val)),
 1428|    146|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    146|    {
 1430|    146|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  435|    146|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    146|    {
  437|    146|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    146|    {
 1177|    146|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|    146|    {
 1598|    146|        return has_value();
 1599|    146|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|    292|    {
  485|    292|        return m_has_value;
  486|    292|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1662|    146|    {
 1663|    146|        return std::move(value());
 1664|    146|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|    146|    {
 1627|    146|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    146|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    146|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    146|        return this->get_value();
 1629|    146|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    146|    {
  451|    146|        return m_value;
  452|    146|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1822|    292|    {
 1823|    292|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|    292|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSK_OT0_:
 1322|    292|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    292|    else {
 1333|    292|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    292|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    292|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 292]
  |  |  ------------------
  ------------------
 1335|    292|                   ? result(*std::forward<Exp>(exp))
 1336|    292|                   : result(unexpect,
 1337|    292|                            trivial_invoke(std::forward<F>(f),
 1338|    292|                                           std::forward<Exp>(exp).error()));
 1339|    292|    }
 1340|    292|}
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1652|    240|    {
 1653|    240|        return value();
 1654|    240|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3663|      6|    auto&& SCN_TRY_TMP = (x);                          \
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|    140|    {
 2724|    140|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    140|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|    140|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|    140|    {
 2705|    140|        return decay_copy(t.begin());
 2706|    140|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3663|    132|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|    860|    {
 1837|    860|        return detail::transform_error_impl(std::move(*this),
 1838|    860|                                            std::forward<F>(f));
 1839|    860|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1322|    860|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    860|    else {
 1333|    860|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    860|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    860|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 860, False: 0]
  |  |  ------------------
  ------------------
 1335|    860|                   ? result(*std::forward<Exp>(exp))
 1336|    860|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    860|    }
 1340|    860|}
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|    860|        : base(std::in_place, std::forward<U>(val)),
 1428|    860|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    860|    {
 1430|    860|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|    860|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    860|    {
  437|    860|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    860|    {
 1177|    860|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|    860|    {
 1598|    860|        return has_value();
 1599|    860|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.72k|    {
  485|  1.72k|        return m_has_value;
  486|  1.72k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|    860|    {
 1663|    860|        return std::move(value());
 1664|    860|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|    860|    {
 1627|    860|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    860|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    860|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    860|        return this->get_value();
 1629|    860|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    860|    {
  451|    860|        return m_value;
  452|    860|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1822|    868|    {
 1823|    868|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|    868|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1322|    868|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    868|    else {
 1333|    868|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    868|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    868|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 868]
  |  |  ------------------
  ------------------
 1335|    868|                   ? result(*std::forward<Exp>(exp))
 1336|    868|                   : result(unexpect,
 1337|    868|                            trivial_invoke(std::forward<F>(f),
 1338|    868|                                           std::forward<Exp>(exp).error()));
 1339|    868|    }
 1340|    868|}
_ZN3scn2v313scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3642|    868|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|    868|    static_cast<    \
  |  |  929|    868|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3643|    868|    {
 3644|    868|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1652|  4.07k|    {
 1653|  4.07k|        return value();
 1654|  4.07k|    }
_ZN3scn2v36detail22parse_presentation_setIwRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
 6707|    522|{
 6708|    522|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|    522|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    522|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6709|    522|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|    522|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    522|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6710|       |
 6711|    522|    auto start = begin;
 6712|    522|    ++begin;
 6713|       |
 6714|    522|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    522|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 522]
  |  |  ------------------
  ------------------
 6715|       |        // clang-format off
 6716|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6717|       |        // clang-format on
 6718|      0|        return {};
 6719|      0|    }
 6720|    522|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6720:9): [True: 252, False: 270]
  ------------------
 6721|    252|        handler.on_charset_inverted();
 6722|    252|        ++begin;
 6723|    252|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    252|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 252]
  |  |  ------------------
  ------------------
 6724|       |            // clang-format off
 6725|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6726|       |            // clang-format on
 6727|      0|            return {};
 6728|      0|        }
 6729|    252|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6729:13): [True: 6, False: 246]
  ------------------
 6730|      6|            handler.on_charset_single(char32_t{']'});
 6731|      6|            ++begin;
 6732|      6|        }
 6733|    252|    }
 6734|    270|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6734:14): [True: 0, False: 270]
  ------------------
 6735|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6736|      0|    }
 6737|       |
 6738|  5.03k|    while (begin != end) {
  ------------------
  |  Branch (6738:12): [True: 5.03k, False: 0]
  ------------------
 6739|  5.03k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  5.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.03k]
  |  |  ------------------
  ------------------
 6740|      0|            break;
 6741|      0|        }
 6742|       |
 6743|  5.03k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6743:13): [True: 522, False: 4.51k]
  ------------------
 6744|    522|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6745|    522|        }
 6746|       |
 6747|  4.51k|        parse_presentation_set_literal(begin, end, handler);
 6748|  4.51k|    }
 6749|       |
 6750|      0|    SCN_UNLIKELY_ATTR
 6751|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6752|      0|    return {};
 6753|    522|}
_ZN3scn2v36detail30parse_presentation_set_literalIwRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
 6671|  4.51k|{
 6672|  4.51k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  4.51k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.51k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6673|       |
 6674|  4.51k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6675|  4.51k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  4.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.51k]
  |  |  ------------------
  ------------------
 6676|      0|        return;
 6677|      0|    }
 6678|       |
 6679|  4.51k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6679:9): [True: 4.51k, False: 0]
  |  Branch (6679:25): [True: 384, False: 4.12k]
  |  Branch (6679:49): [True: 384, False: 0]
  ------------------
 6680|  4.51k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6680:9): [True: 378, False: 6]
  ------------------
 6681|    378|        ++begin;
 6682|       |
 6683|    378|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6684|    378|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|    378|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 378]
  |  |  ------------------
  ------------------
 6685|      0|            return;
 6686|      0|        }
 6687|       |
 6688|    378|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|    378|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 378]
  |  |  ------------------
  ------------------
 6689|       |            // clang-format off
 6690|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6691|       |            // clang-format on
 6692|      0|            return;
 6693|      0|        }
 6694|       |
 6695|    378|        handler.on_charset_range(cp_first, cp_second + 1);
 6696|    378|        return;
 6697|    378|    }
 6698|       |
 6699|  4.13k|    handler.on_charset_single(cp_first);
 6700|  4.13k|}
_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
 6647|  4.89k|{
 6648|  4.89k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  4.89k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.89k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6649|       |
 6650|  4.89k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6651|  4.89k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  9.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.89k]
  |  |  |  Branch (859:45): [True: 0, False: 4.89k]
  |  |  |  Branch (859:45): [True: 0, False: 4.89k]
  |  |  ------------------
  ------------------
 6652|      0|        handler.on_error("Invalid encoding in format string");
 6653|      0|        return invalid_code_point;
 6654|      0|    }
 6655|       |
 6656|  4.89k|    const auto cp =
 6657|  4.89k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6658|  4.89k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  4.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.89k]
  |  |  ------------------
  ------------------
 6659|      0|        handler.on_error("Invalid encoding in format string");
 6660|      0|        return invalid_code_point;
 6661|      0|    }
 6662|       |
 6663|  4.89k|    begin += len;
 6664|  4.89k|    return cp;
 6665|  4.89k|}
_ZNK3scn2v36detail12format_specs14charset_stringIwEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6261|  7.68k|    {
 6262|  7.68k|        return {reinterpret_cast<const CharT*>(charset_string_data),
 6263|  7.68k|                charset_string_size};
 6264|  7.68k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IRKS7_vEEOT_:
 1427|    240|        : base(std::in_place, std::forward<U>(val)),
 1428|    240|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    240|    {
 1430|    240|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJRKS8_EvEENSt3__110in_place_tEDpOT_:
  435|    240|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    240|    {
  437|    240|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1427|    378|        : base(std::in_place, std::forward<U>(val)),
 1428|    378|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    378|    {
 1430|    378|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  435|    378|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    378|    {
  437|    378|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
 3649|  1.73k|{
 3650|  1.73k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  1.73k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  7.33k|    {
 2855|  7.33k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  7.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  7.33k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  7.33k|    {
 2836|  7.33k|        return t.data();
 2837|  7.33k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5475|   109k|    {
 5476|   109k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 109k]
  |  |  ------------------
  ------------------
 5477|      0|            return max_size();
 5478|      0|        }
 5479|       |
 5480|   109k|        return static_cast<std::size_t>(m_desc &
 5481|   109k|                                        ((1 << detail::packed_arg_bits) - 1));
 5482|   109k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5500|   179k|    {
 5501|   179k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5502|   179k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5443|  70.0k|    {
 5444|  70.0k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  70.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 70.0k]
  |  |  ------------------
  ------------------
 5445|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5446|      0|                return m_args[id];
 5447|      0|            }
 5448|      0|            return {};
 5449|      0|        }
 5450|       |
 5451|  70.0k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  70.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 68, False: 70.0k]
  |  |  ------------------
  ------------------
 5452|     68|            return {};
 5453|     68|        }
 5454|       |
 5455|  70.0k|        const auto t = type(id);
 5456|  70.0k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  70.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.31k, False: 68.7k]
  |  |  ------------------
  ------------------
 5457|  1.31k|            return {};
 5458|  1.31k|        }
 5459|       |
 5460|  68.7k|        basic_scan_arg<Context> arg;
 5461|  68.7k|        arg.m_type = t;
 5462|  68.7k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5462:13): [True: 68.7k, False: 0]
  ------------------
 5463|  68.7k|            arg.m_value.ref_value = m_builtin_values[id];
 5464|  68.7k|        }
 5465|      0|        else {
 5466|      0|            arg.m_value = m_values[id];
 5467|      0|        }
 5468|  68.7k|        return arg;
 5469|  70.0k|    }
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5250|  70.0k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4906|   107k|    arg_value() = default;
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5509|  70.0k|    {
 5510|       |        // First (0th) index is size, types start after that
 5511|  70.0k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5512|  70.0k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5513|  70.0k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5514|  70.0k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5504|  68.7k|    {
 5505|  68.7k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5506|  68.7k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5256|   136k|    {
 5257|   136k|        return m_type != detail::arg_type::none_type;
 5258|   136k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|  5.67k|{
 8428|  5.67k|#define SCN_VISIT(Type)                                         \
 8429|  5.67k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|  5.67k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|  5.67k|    }                                                           \
 8432|  5.67k|    else {                                                      \
 8433|  5.67k|        return vis(monostate_val);                              \
 8434|  5.67k|    }
 8435|       |
 8436|  5.67k|    monostate monostate_val{};
 8437|       |
 8438|  5.67k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 5.67k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 5.67k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|    630|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 630, False: 5.04k]
  ------------------
 8444|    630|            SCN_VISIT(int);
  ------------------
  |  | 8429|    630|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|    630|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|    630|    }                                                           \
  |  | 8432|    630|    else {                                                      \
  |  | 8433|    630|        return vis(monostate_val);                              \
  |  | 8434|    630|    }
  ------------------
 8445|    630|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 5.67k]
  ------------------
 8446|    630|            SCN_VISIT(long);
  ------------------
  |  | 8429|    630|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|    630|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|    630|    }                                                           \
  |  | 8432|    630|    else {                                                      \
  |  | 8433|    630|        return vis(monostate_val);                              \
  |  | 8434|    630|    }
  ------------------
 8447|    630|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 5.67k]
  ------------------
 8448|    630|            SCN_VISIT(long long);
  ------------------
  |  | 8429|    630|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|    630|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|    630|    }                                                           \
  |  | 8432|    630|    else {                                                      \
  |  | 8433|    630|        return vis(monostate_val);                              \
  |  | 8434|    630|    }
  ------------------
 8449|    630|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 5.67k]
  ------------------
 8450|    630|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|    630|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|    630|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|    630|    }                                                           \
  |  | 8432|    630|    else {                                                      \
  |  | 8433|    630|        return vis(monostate_val);                              \
  |  | 8434|    630|    }
  ------------------
 8451|    630|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 5.67k]
  ------------------
 8452|    630|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|    630|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|    630|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|    630|    }                                                           \
  |  | 8432|    630|    else {                                                      \
  |  | 8433|    630|        return vis(monostate_val);                              \
  |  | 8434|    630|    }
  ------------------
 8453|  1.26k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 630, False: 5.04k]
  ------------------
 8454|  1.26k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|  1.26k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  1.26k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  1.26k|    }                                                           \
  |  | 8432|  1.26k|    else {                                                      \
  |  | 8433|  1.26k|        return vis(monostate_val);                              \
  |  | 8434|  1.26k|    }
  ------------------
 8455|  1.26k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 5.67k]
  ------------------
 8456|  1.26k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|  1.26k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  1.26k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  1.26k|    }                                                           \
  |  | 8432|  1.26k|    else {                                                      \
  |  | 8433|  1.26k|        return vis(monostate_val);                              \
  |  | 8434|  1.26k|    }
  ------------------
 8457|  1.26k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 5.67k]
  ------------------
 8458|  1.26k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|  1.26k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  1.26k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  1.26k|    }                                                           \
  |  | 8432|  1.26k|    else {                                                      \
  |  | 8433|  1.26k|        return vis(monostate_val);                              \
  |  | 8434|  1.26k|    }
  ------------------
 8459|  1.89k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 630, False: 5.04k]
  ------------------
 8460|  1.89k|            SCN_VISIT(void*);
  ------------------
  |  | 8429|  1.89k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  1.89k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  1.89k|    }                                                           \
  |  | 8432|  1.89k|    else {                                                      \
  |  | 8433|  1.89k|        return vis(monostate_val);                              \
  |  | 8434|  1.89k|    }
  ------------------
 8461|  2.52k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 630, False: 5.04k]
  ------------------
 8462|  2.52k|            SCN_VISIT(bool);
  ------------------
  |  | 8429|  2.52k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  2.52k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  2.52k|    }                                                           \
  |  | 8432|  2.52k|    else {                                                      \
  |  | 8433|  2.52k|        return vis(monostate_val);                              \
  |  | 8434|  2.52k|    }
  ------------------
 8463|  3.15k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 630, False: 5.04k]
  ------------------
 8464|  3.15k|            SCN_VISIT(char);
  ------------------
  |  | 8429|  3.15k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  3.15k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  3.15k|    }                                                           \
  |  | 8432|  3.15k|    else {                                                      \
  |  | 8433|  3.15k|        return vis(monostate_val);                              \
  |  | 8434|  3.15k|    }
  ------------------
 8465|  3.15k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 5.67k]
  ------------------
 8466|  3.15k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|  3.15k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  3.15k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  3.15k|    }                                                           \
  |  | 8432|  3.15k|    else {                                                      \
  |  | 8433|  3.15k|        return vis(monostate_val);                              \
  |  | 8434|  3.15k|    }
  ------------------
 8467|  3.15k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 5.67k]
  ------------------
 8468|  3.15k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|  3.15k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  3.15k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  3.15k|    }                                                           \
  |  | 8432|  3.15k|    else {                                                      \
  |  | 8433|  3.15k|        return vis(monostate_val);                              \
  |  | 8434|  3.15k|    }
  ------------------
 8469|  3.15k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 5.67k]
  ------------------
 8470|  3.15k|            SCN_VISIT(float);
  ------------------
  |  | 8429|  3.15k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  3.15k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  3.15k|    }                                                           \
  |  | 8432|  3.15k|    else {                                                      \
  |  | 8433|  3.15k|        return vis(monostate_val);                              \
  |  | 8434|  3.15k|    }
  ------------------
 8471|  3.78k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 630, False: 5.04k]
  ------------------
 8472|  3.78k|            SCN_VISIT(double);
  ------------------
  |  | 8429|  3.78k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  3.78k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  3.78k|    }                                                           \
  |  | 8432|  3.78k|    else {                                                      \
  |  | 8433|  3.78k|        return vis(monostate_val);                              \
  |  | 8434|  3.78k|    }
  ------------------
 8473|  3.78k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 5.67k]
  ------------------
 8474|  3.78k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|  3.78k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  3.78k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  3.78k|    }                                                           \
  |  | 8432|  3.78k|    else {                                                      \
  |  | 8433|  3.78k|        return vis(monostate_val);                              \
  |  | 8434|  3.78k|    }
  ------------------
 8475|  4.41k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 630, False: 5.04k]
  ------------------
 8476|  4.41k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|  4.41k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  4.41k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  4.41k|    }                                                           \
  |  | 8432|  4.41k|    else {                                                      \
  |  | 8433|  4.41k|        return vis(monostate_val);                              \
  |  | 8434|  4.41k|    }
  ------------------
 8477|  5.04k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 630, False: 5.04k]
  ------------------
 8478|  5.04k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|  5.04k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  5.04k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  5.04k|    }                                                           \
  |  | 8432|  5.04k|    else {                                                      \
  |  | 8433|  5.04k|        return vis(monostate_val);                              \
  |  | 8434|  5.04k|    }
  ------------------
 8479|  5.04k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 5.67k]
  ------------------
 8480|  5.04k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|  5.04k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  5.04k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  5.04k|    }                                                           \
  |  | 8432|  5.04k|    else {                                                      \
  |  | 8433|  5.04k|        return vis(monostate_val);                              \
  |  | 8434|  5.04k|    }
  ------------------
 8481|  5.67k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 630, False: 5.04k]
  ------------------
 8482|  5.67k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|  5.67k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  5.67k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  5.67k|    }                                                           \
  |  | 8432|  5.67k|    else {                                                      \
  |  | 8433|  5.67k|        return vis(monostate_val);                              \
  |  | 8434|  5.67k|    }
  ------------------
 8483|  5.67k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 5.67k]
  ------------------
 8484|  5.67k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|  5.67k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  5.67k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  5.67k|    }                                                           \
  |  | 8432|  5.67k|    else {                                                      \
  |  | 8433|  5.67k|        return vis(monostate_val);                              \
  |  | 8434|  5.67k|    }
  ------------------
 8485|  5.67k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 5.67k]
  ------------------
 8486|  5.67k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|  5.67k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  5.67k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  5.67k|    }                                                           \
  |  | 8432|  5.67k|    else {                                                      \
  |  | 8433|  5.67k|        return vis(monostate_val);                              \
  |  | 8434|  5.67k|    }
  ------------------
 8487|       |
 8488|  5.67k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 5.67k]
  ------------------
 8489|  5.67k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|  5.67k|            return vis(
 8491|  5.67k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 5.67k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 5.67k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|  5.67k|            SCN_CLANG_POP
 8506|  5.67k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  2.02k|    {
 1837|  2.02k|        return detail::transform_error_impl(std::move(*this),
 1838|  2.02k|                                            std::forward<F>(f));
 1839|  2.02k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|  2.02k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  2.02k|    else {
 1333|  2.02k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.02k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.02k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.92k, False: 102]
  |  |  ------------------
  ------------------
 1335|  2.02k|                   ? result(*std::forward<Exp>(exp))
 1336|  2.02k|                   : result(unexpect,
 1337|    102|                            trivial_invoke(std::forward<F>(f),
 1338|    102|                                           std::forward<Exp>(exp).error()));
 1339|  2.02k|    }
 1340|  2.02k|}
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1483|    102|        : base(unexpect, std::forward<Args>(args)...),
 1484|    102|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|    102|    {
 1486|    102|    }
_ZNO3scn2v38expectedIPKcNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|  1.92k|    {
 1663|  1.92k|        return std::move(value());
 1664|  1.92k|    }
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5553|   109k|        : m_format{format}, m_next_arg_id{next_arg_id}
 5554|   109k|    {
 5555|   109k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8065|   109k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   109k|    static_cast<    \
  |  |  929|   109k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   109k|    static_cast<    \
  |  |  929|   109k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8066|   109k|    {
 8067|   109k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7054|   109k|{
 7055|   109k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7056|   109k|    handler.check_args_exhausted();
 7057|   109k|    return handler.get_error();
 7058|   109k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7020|   109k|{
 7021|       |    // TODO: memchr fast path with a larger (> 32) format string
 7022|       |
 7023|   109k|    auto begin = format.data();
 7024|   109k|    auto it = begin;
 7025|   109k|    const auto end = format.data() + format.size();
 7026|       |
 7027|   263k|    while (it != end) {
  ------------------
  |  Branch (7027:12): [True: 256k, False: 7.44k]
  ------------------
 7028|   256k|        const auto ch = *it++;
 7029|   256k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7029:13): [True: 113k, False: 143k]
  ------------------
 7030|   113k|            handler.on_literal_text(begin, it - 1);
 7031|       |
 7032|   113k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7033|   113k|            if (!handler) {
  ------------------
  |  Branch (7033:17): [True: 100k, False: 12.3k]
  ------------------
 7034|   100k|                return;
 7035|   100k|            }
 7036|   113k|        }
 7037|   143k|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7037:18): [True: 2.27k, False: 140k]
  ------------------
 7038|  2.27k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|  4.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.10k, False: 1.17k]
  |  |  |  Branch (859:45): [True: 408, False: 1.87k]
  |  |  |  Branch (859:45): [True: 700, False: 1.17k]
  |  |  ------------------
  ------------------
 7039|  1.10k|                handler.on_error("Unmatched '}' in format string");
 7040|  1.10k|                return;
 7041|  1.10k|            }
 7042|       |
 7043|  1.17k|            handler.on_literal_text(begin, it);
 7044|  1.17k|            begin = ++it;
 7045|  1.17k|        }
 7046|   256k|    }
 7047|       |
 7048|  7.44k|    handler.on_literal_text(begin, end);
 7049|  7.44k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6952|   113k|{
 6953|   113k|    struct id_adapter {
 6954|   113k|        constexpr void operator()()
 6955|   113k|        {
 6956|   113k|            arg_id = handler.on_arg_id();
 6957|   113k|        }
 6958|   113k|        constexpr void operator()(std::size_t id)
 6959|   113k|        {
 6960|   113k|            arg_id = handler.on_arg_id(id);
 6961|   113k|        }
 6962|       |
 6963|   113k|        constexpr void on_error(const char* msg)
 6964|   113k|        {
 6965|   113k|            SCN_UNLIKELY_ATTR
 6966|   113k|            handler.on_error(msg);
 6967|   113k|        }
 6968|       |
 6969|   113k|        Handler& handler;
 6970|   113k|        std::size_t arg_id;
 6971|   113k|    };
 6972|       |
 6973|   113k|    ++begin;
 6974|   113k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 128, False: 113k]
  |  |  ------------------
  ------------------
 6975|    128|        handler.on_error("Unexpected end of replacement field");
 6976|    128|        return begin;
 6977|    128|    }
 6978|       |
 6979|   113k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:9): [True: 5.63k, False: 107k]
  ------------------
 6980|  5.63k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6981|  5.63k|    }
 6982|   107k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6982:14): [True: 5.31k, False: 102k]
  ------------------
 6983|  5.31k|        handler.on_literal_text(begin, begin + 1);
 6984|  5.31k|    }
 6985|   102k|    else {
 6986|   102k|        auto adapter = id_adapter{handler, 0};
 6987|   102k|        begin = parse_arg_id(begin, end, adapter);
 6988|       |
 6989|   102k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 110, False: 101k]
  |  |  ------------------
  ------------------
 6990|    110|            handler.on_error("Missing '}' in format string");
 6991|    110|            return begin;
 6992|    110|        }
 6993|       |
 6994|   101k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6994:13): [True: 140, False: 101k]
  ------------------
 6995|    140|            handler.on_replacement_field(adapter.arg_id, begin);
 6996|    140|        }
 6997|   101k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6997:18): [True: 64.3k, False: 37.4k]
  ------------------
 6998|  64.3k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  64.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74, False: 64.3k]
  |  |  ------------------
  ------------------
 6999|     74|                handler.on_error("Unexpected end of replacement field");
 7000|     74|                return begin;
 7001|     74|            }
 7002|  64.3k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7003|  64.3k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.23k, False: 61.0k]
  |  |  |  Branch (859:45): [True: 0, False: 64.3k]
  |  |  |  Branch (859:45): [True: 3.23k, False: 61.0k]
  |  |  ------------------
  ------------------
 7004|  3.23k|                handler.on_error("Unknown format specifier");
 7005|  3.23k|                return begin;
 7006|  3.23k|            }
 7007|  64.3k|        }
 7008|  37.4k|        else {
 7009|  37.4k|            SCN_UNLIKELY_ATTR
 7010|  37.4k|            handler.on_error("Missing '}' in format string");
 7011|  37.4k|            return begin;
 7012|  37.4k|        }
 7013|   101k|    }
 7014|  72.1k|    return begin + 1;
 7015|   113k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8049|  70.0k|    {
 8050|  70.0k|        return m_args.get(id);
 8051|  70.0k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE4argsEv:
 8054|  5.77k|    {
 8055|  5.77k|        return m_args;
 8056|  5.77k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8059|  66.5k|    {
 8060|  66.5k|        return m_locale;
 8061|  66.5k|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5575|  67.4k|    {
 5576|  67.4k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  67.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 67.4k]
  |  |  ------------------
  ------------------
 5577|     42|            on_error(
 5578|     42|                "Cannot switch from manual to automatic argument indexing");
 5579|     42|            return 0;
 5580|     42|        }
 5581|       |
 5582|  67.4k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5583|  67.4k|        do_check_arg_id(id);
 5584|  67.4k|        return id;
 5585|  67.4k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE8on_errorEPKc:
 5599|    112|    {
 5600|    112|        return detail::handle_error(
 5601|    112|            scan_error{scan_error::invalid_format_string, msg});
 5602|    112|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6063|  70.0k|{
 6064|  70.0k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6064:9): [Folded - Ignored]
  ------------------
 6065|  70.0k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6065:10): [Folded - Ignored]
  |  Branch (6065:22): [Folded - Ignored]
  ------------------
 6066|       |        // The cast below will cause an error on gcc pre-12
 6067|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6068|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6068:13): [True: 0, False: 0]
  ------------------
 6069|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6070|      0|            SCN_UNLIKELY_ATTR
 6071|      0|            on_error("Argument not found");
 6072|      0|        }
 6073|      0|    }
 6074|  70.0k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6453|   102k|{
 6454|   102k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   102k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   102k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6455|   102k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6455:9): [True: 102k, False: 0]
  |  Branch (6455:26): [True: 40.2k, False: 61.8k]
  ------------------
 6456|  40.2k|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|  40.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6457|  40.2k|    }
 6458|       |
 6459|  61.8k|    handler();
 6460|  61.8k|    return begin;
 6461|   102k|}
impl.cpp:_ZN3scn2v36detail15do_parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6423|  40.2k|{
 6424|  40.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  40.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  40.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6425|       |
 6426|  40.2k|    CharT c = *begin;
 6427|  40.2k|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (6427:9): [True: 37.2k, False: 3.07k]
  |  Branch (6427:27): [True: 130, False: 2.94k]
  ------------------
 6428|  37.3k|        handler.on_error("Invalid argument ID");
 6429|  37.3k|        return begin;
 6430|  37.3k|    }
 6431|       |
 6432|  2.94k|    int idx = 0;
 6433|  2.94k|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (6433:9): [True: 342, False: 2.59k]
  ------------------
 6434|    342|        idx = parse_simple_int(begin, end);
 6435|    342|    }
 6436|  2.59k|    else {
 6437|  2.59k|        ++begin;
 6438|  2.59k|    }
 6439|       |
 6440|  2.94k|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (6440:9): [True: 110, False: 2.83k]
  |  Branch (6440:26): [True: 2.69k, False: 140]
  |  Branch (6440:50): [True: 120, False: 2.57k]
  ------------------
 6441|    230|        handler.on_error("Invalid argument ID");
 6442|    230|        return begin;
 6443|    230|    }
 6444|  2.71k|    handler(idx);
 6445|       |
 6446|  2.71k|    return begin;
 6447|  2.94k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 6964|  37.5k|        {
 6965|  37.5k|            SCN_UNLIKELY_ATTR
 6966|  37.5k|            handler.on_error(msg);
 6967|  37.5k|        }
_ZN3scn2v36detail16parse_simple_intIcEEiRPKT_S5_:
 6402|  13.5k|{
 6403|  13.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  13.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6404|  13.5k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  13.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6405|       |
 6406|  13.5k|    unsigned long long value = 0;
 6407|  31.8k|    do {
 6408|  31.8k|        value *= 10;
 6409|  31.8k|        value += static_cast<unsigned long long>(*begin - '0');
 6410|  31.8k|        if (value >
  ------------------
  |  Branch (6410:13): [True: 116, False: 31.7k]
  ------------------
 6411|  31.8k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6412|    116|            return -1;
 6413|    116|        }
 6414|  31.7k|        ++begin;
 6415|  31.7k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6415:14): [True: 31.4k, False: 294]
  |  Branch (6415:30): [True: 27.4k, False: 3.94k]
  |  Branch (6415:47): [True: 18.2k, False: 9.17k]
  ------------------
 6416|  13.4k|    return static_cast<int>(value);
 6417|  13.5k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 6959|  2.71k|        {
 6960|  2.71k|            arg_id = handler.on_arg_id(id);
 6961|  2.71k|        }
_ZN3scn2v324basic_scan_parse_contextIcE12check_arg_idEm:
 5588|  2.71k|    {
 5589|  2.71k|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  859|  2.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70, False: 2.64k]
  |  |  ------------------
  ------------------
 5590|     70|            on_error(
 5591|     70|                "Cannot switch from manual to automatic argument indexing");
 5592|     70|            return;
 5593|     70|        }
 5594|  2.64k|        m_next_arg_id = -1;
 5595|  2.64k|        do_check_arg_id(id);
 5596|  2.64k|    }
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6955|  61.8k|        {
 6956|  61.8k|            arg_id = handler.on_arg_id();
 6957|  61.8k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5261|   128k|    {
 5262|   128k|        return m_type;
 5263|   128k|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5570|  60.7k|    {
 5571|  60.7k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5572|  60.7k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5559|   125k|    {
 5560|   125k|        return m_format.data();
 5561|   125k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7131|  64.3k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|  64.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7132|  64.3k|    {
 7133|  64.3k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  64.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  64.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7134|  64.3k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6868|  64.3k|{
 6869|  64.3k|    auto do_presentation = [&]() -> const CharT* {
 6870|  64.3k|        if (*begin == CharT{'['}) {
 6871|  64.3k|            auto set = parse_presentation_set(begin, end, handler);
 6872|  64.3k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6873|       |                // clang-format off
 6874|  64.3k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|  64.3k|                return begin;
 6877|  64.3k|            }
 6878|  64.3k|            handler.on_character_set_string(set);
 6879|  64.3k|            return begin;
 6880|  64.3k|        }
 6881|  64.3k|        if (*begin == CharT{'/'}) {
 6882|  64.3k|            return parse_presentation_regex(begin, end, handler);
 6883|  64.3k|        }
 6884|  64.3k|        presentation_type type = parse_presentation_type(*begin++);
 6885|  64.3k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6886|  64.3k|            handler.on_error("Invalid type specifier in format string");
 6887|  64.3k|            return begin;
 6888|  64.3k|        }
 6889|  64.3k|        handler.on_type(type);
 6890|  64.3k|        return begin;
 6891|  64.3k|    };
 6892|       |
 6893|  64.3k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6893:9): [True: 63.2k, False: 1.07k]
  |  Branch (6893:28): [True: 2.29k, False: 60.9k]
  ------------------
 6894|  64.3k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6894:9): [True: 896, False: 1.40k]
  |  Branch (6894:36): [True: 844, False: 52]
  ------------------
 6895|    844|        return do_presentation();
 6896|    844|    }
 6897|       |
 6898|  63.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  63.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 63.4k]
  |  |  ------------------
  ------------------
 6899|      0|        handler.on_error("Unexpected end of format string");
 6900|      0|        return begin;
 6901|      0|    }
 6902|       |
 6903|  63.4k|    begin = parse_align(begin, end, handler);
 6904|  63.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  63.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 126, False: 63.3k]
  |  |  ------------------
  ------------------
 6905|    126|        handler.on_error("Unexpected end of format string");
 6906|    126|        return begin;
 6907|    126|    }
 6908|       |
 6909|  63.3k|    begin = parse_width(begin, end, handler);
 6910|  63.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  63.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 102, False: 63.2k]
  |  |  ------------------
  ------------------
 6911|    102|        handler.on_error("Unexpected end of format string");
 6912|    102|        return begin;
 6913|    102|    }
 6914|       |
 6915|  63.2k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6915:9): [True: 9.16k, False: 54.0k]
  ------------------
 6916|  9.16k|        ++begin;
 6917|  9.16k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  9.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 9.13k]
  |  |  ------------------
  ------------------
 6918|     34|            handler.on_error("Unexpected end of format string");
 6919|     34|            return begin;
 6920|     34|        }
 6921|  9.13k|        begin = parse_precision(begin, end, handler);
 6922|  9.13k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  9.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 114, False: 9.02k]
  |  |  ------------------
  ------------------
 6923|    114|            handler.on_error("Unexpected end of format string");
 6924|    114|            return begin;
 6925|    114|        }
 6926|  9.13k|    }
 6927|       |
 6928|  63.0k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6928:9): [True: 554, False: 62.5k]
  ------------------
 6929|    554|        handler.on_localized();
 6930|    554|        ++begin;
 6931|    554|    }
 6932|  63.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  63.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52, False: 63.0k]
  |  |  ------------------
  ------------------
 6933|     52|        handler.on_error("Unexpected end of format string");
 6934|     52|        return begin;
 6935|     52|    }
 6936|       |
 6937|  63.0k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6937:9): [True: 63.0k, False: 0]
  |  Branch (6937:25): [True: 58.3k, False: 4.71k]
  ------------------
 6938|  58.3k|        do_presentation();
 6939|  58.3k|    }
 6940|  63.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  63.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.99k, False: 61.0k]
  |  |  ------------------
  ------------------
 6941|  1.99k|        handler.on_error("Unexpected end of format string");
 6942|  1.99k|        return begin;
 6943|  1.99k|    }
 6944|       |
 6945|  61.0k|    return begin;
 6946|  63.0k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6517|  2.29k|{
 6518|  2.29k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6518:13): [True: 842, False: 1.45k]
  |  Branch (6518:33): [True: 790, False: 52]
  ------------------
 6519|  2.29k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6519:13): [True: 304, False: 1.20k]
  |  Branch (6519:33): [True: 106, False: 198]
  ------------------
 6520|  2.29k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6869|  59.1k|    auto do_presentation = [&]() -> const CharT* {
 6870|  59.1k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6870:13): [True: 11.6k, False: 47.5k]
  ------------------
 6871|  11.6k|            auto set = parse_presentation_set(begin, end, handler);
 6872|  11.6k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 810, False: 10.8k]
  |  |  ------------------
  ------------------
 6873|       |                // clang-format off
 6874|    810|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|    810|                return begin;
 6877|    810|            }
 6878|  10.8k|            handler.on_character_set_string(set);
 6879|  10.8k|            return begin;
 6880|  11.6k|        }
 6881|  47.5k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6881:13): [True: 42.3k, False: 5.15k]
  ------------------
 6882|  42.3k|            return parse_presentation_regex(begin, end, handler);
 6883|  42.3k|        }
 6884|  5.15k|        presentation_type type = parse_presentation_type(*begin++);
 6885|  5.15k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  5.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 782, False: 4.37k]
  |  |  ------------------
  ------------------
 6886|    782|            handler.on_error("Invalid type specifier in format string");
 6887|    782|            return begin;
 6888|    782|        }
 6889|  4.37k|        handler.on_type(type);
 6890|  4.37k|        return begin;
 6891|  5.15k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6707|  11.6k|{
 6708|  11.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  11.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6709|  11.6k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  11.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6710|       |
 6711|  11.6k|    auto start = begin;
 6712|  11.6k|    ++begin;
 6713|       |
 6714|  11.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 11.6k]
  |  |  ------------------
  ------------------
 6715|       |        // clang-format off
 6716|     42|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6717|       |        // clang-format on
 6718|     42|        return {};
 6719|     42|    }
 6720|  11.6k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6720:9): [True: 2.33k, False: 9.27k]
  ------------------
 6721|  2.33k|        handler.on_charset_inverted();
 6722|  2.33k|        ++begin;
 6723|  2.33k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 2.30k]
  |  |  ------------------
  ------------------
 6724|       |            // clang-format off
 6725|     34|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6726|       |            // clang-format on
 6727|     34|            return {};
 6728|     34|        }
 6729|  2.30k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6729:13): [True: 52, False: 2.24k]
  ------------------
 6730|     52|            handler.on_charset_single(char32_t{']'});
 6731|     52|            ++begin;
 6732|     52|        }
 6733|  2.30k|    }
 6734|  9.27k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6734:14): [True: 34, False: 9.24k]
  ------------------
 6735|     34|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6736|     34|    }
 6737|       |
 6738|  1.32M|    while (begin != end) {
  ------------------
  |  Branch (6738:12): [True: 1.32M, False: 484]
  ------------------
 6739|  1.32M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 216, False: 1.32M]
  |  |  ------------------
  ------------------
 6740|    216|            break;
 6741|    216|        }
 6742|       |
 6743|  1.32M|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6743:13): [True: 10.8k, False: 1.31M]
  ------------------
 6744|  10.8k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6745|  10.8k|        }
 6746|       |
 6747|  1.31M|        parse_presentation_set_literal(begin, end, handler);
 6748|  1.31M|    }
 6749|       |
 6750|    700|    SCN_UNLIKELY_ATTR
 6751|    700|    handler.on_error("Invalid [character set] specifier in format string");
 6752|    700|    return {};
 6753|  11.5k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEvRPKT_SE_OT0_:
 6671|  1.31M|{
 6672|  1.31M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.31M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.31M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6673|       |
 6674|  1.31M|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6675|  1.31M|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  1.31M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 94, False: 1.31M]
  |  |  ------------------
  ------------------
 6676|     94|        return;
 6677|     94|    }
 6678|       |
 6679|  1.31M|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6679:9): [True: 1.31M, False: 188]
  |  Branch (6679:25): [True: 9.93k, False: 1.30M]
  |  Branch (6679:49): [True: 9.89k, False: 34]
  ------------------
 6680|  1.31M|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6680:9): [True: 9.61k, False: 286]
  ------------------
 6681|  9.61k|        ++begin;
 6682|       |
 6683|  9.61k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6684|  9.61k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  9.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70, False: 9.54k]
  |  |  ------------------
  ------------------
 6685|     70|            return;
 6686|     70|        }
 6687|       |
 6688|  9.54k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  9.54k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 9.50k]
  |  |  ------------------
  ------------------
 6689|       |            // clang-format off
 6690|     34|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6691|       |            // clang-format on
 6692|     34|            return;
 6693|     34|        }
 6694|       |
 6695|  9.50k|        handler.on_charset_range(cp_first, cp_second + 1);
 6696|  9.50k|        return;
 6697|  9.54k|    }
 6698|       |
 6699|  1.30M|    handler.on_charset_single(cp_first);
 6700|  1.30M|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEDiRPKT_SE_OT0_:
 6647|  1.32M|{
 6648|  1.32M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.32M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.32M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6649|       |
 6650|  1.32M|    auto len = code_point_length_by_starting_code_unit(*begin);
 6651|  1.32M|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  2.64M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 96, False: 1.32M]
  |  |  |  Branch (859:45): [True: 70, False: 1.32M]
  |  |  |  Branch (859:45): [True: 26, False: 1.32M]
  |  |  ------------------
  ------------------
 6652|     96|        handler.on_error("Invalid encoding in format string");
 6653|     96|        return invalid_code_point;
 6654|     96|    }
 6655|       |
 6656|  1.32M|    const auto cp =
 6657|  1.32M|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6658|  1.32M|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  1.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 68, False: 1.32M]
  |  |  ------------------
  ------------------
 6659|     68|        handler.on_error("Invalid encoding in format string");
 6660|     68|        return invalid_code_point;
 6661|     68|    }
 6662|       |
 6663|  1.32M|    begin += len;
 6664|  1.32M|    return cp;
 6665|  1.32M|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6356|  10.8k|    {
 6357|  10.8k|        m_specs.charset_string_data = fmt.data();
 6358|  10.8k|        m_specs.charset_string_size = fmt.size();
 6359|  10.8k|        on_type(presentation_type::string_set);
 6360|  10.8k|    }
impl.cpp:_ZN3scn2v36detail24parse_presentation_regexIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_RSE_SE_OT0_:
 6759|  42.3k|{
 6760|  42.3k|#if !SCN_DISABLE_REGEX
 6761|  42.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  42.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  42.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6762|  42.3k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  924|  42.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  42.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6763|       |
 6764|       |    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 6765|       |                  std::is_same_v<CharT, wchar_t>) {
 6766|       |        handler.on_error("Regex backend doesn't support wide strings as input");
 6767|       |        return begin;
 6768|       |    }
 6769|       |
 6770|  42.3k|    auto start = begin;
 6771|  42.3k|    ++begin;
 6772|       |
 6773|  42.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  42.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 42.3k]
  |  |  ------------------
  ------------------
 6774|     34|        handler.on_error("Unexpected end of regex in format string");
 6775|     34|        return begin;
 6776|     34|    }
 6777|       |
 6778|  42.3k|    handler.on_type(presentation_type::regex);
 6779|  9.12M|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6779:12): [True: 9.12M, False: 212]
  ------------------
 6780|  9.12M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6780:13): [True: 89.3k, False: 9.03M]
  ------------------
 6781|  89.3k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (6781:17): [True: 42.1k, False: 47.2k]
  ------------------
 6782|  42.1k|                break;
 6783|  42.1k|            }
 6784|  47.2k|            else {
 6785|  47.2k|                handler.on_type(presentation_type::regex_escaped);
 6786|  47.2k|            }
 6787|  89.3k|        }
 6788|  9.12M|    }
 6789|  42.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  42.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 212, False: 42.1k]
  |  |  ------------------
  ------------------
 6790|    212|        handler.on_error("Unexpected end of regex in format string");
 6791|    212|        return begin;
 6792|    212|    }
 6793|       |
 6794|  42.1k|    auto regex_end = begin;
 6795|  42.1k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 6796|  42.1k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  859|  42.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 42.0k]
  |  |  ------------------
  ------------------
 6797|     34|        handler.on_error("Invalid (empty) regex in format string");
 6798|     34|        return begin;
 6799|     34|    }
 6800|  42.0k|    handler.on_regex_pattern(regex_pattern);
 6801|  42.0k|    ++begin;
 6802|       |
 6803|  42.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  42.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 42.0k]
  |  |  ------------------
  ------------------
 6804|     34|        handler.on_error("Unexpected end of regex in format string");
 6805|     34|        return begin;
 6806|     34|    }
 6807|       |
 6808|  42.0k|    regex_flags flags{regex_flags::none};
 6809|  42.0k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 6810|  42.0k|        {{'m', regex_flags::multiline},
 6811|  42.0k|         {'s', regex_flags::singleline},
 6812|  42.0k|         {'i', regex_flags::nocase},
 6813|  42.0k|         {'n', regex_flags::nocapture}}};
 6814|  48.9k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6814:12): [True: 48.9k, False: 58]
  ------------------
 6815|  48.9k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6815:13): [True: 41.8k, False: 7.05k]
  ------------------
 6816|  41.8k|            break;
 6817|  41.8k|        }
 6818|  7.05k|        bool found_flag = false;
 6819|  18.7k|        for (auto flag : flag_map) {
  ------------------
  |  Branch (6819:24): [True: 18.7k, False: 88]
  ------------------
 6820|  18.7k|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (6820:17): [True: 11.7k, False: 6.96k]
  ------------------
 6821|  11.7k|                continue;
 6822|  11.7k|            }
 6823|  6.96k|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (6823:17): [True: 34, False: 6.93k]
  ------------------
 6824|     34|                handler.on_error("Flag set multiple times in regex");
 6825|     34|                return begin;
 6826|     34|            }
 6827|  6.93k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 6828|  6.93k|            if (*begin == CharT{'s'}) {
  ------------------
  |  Branch (6828:17): [True: 48, False: 6.88k]
  ------------------
 6829|       |                // clang-format off
 6830|     48|                handler.on_error("/s flag for regex isn't supported by regex backend");
 6831|       |                // clang-format on
 6832|     48|            }
 6833|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 6834|       |            if (*begin == CharT{'m'}) {
 6835|       |                // clang-format off
 6836|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 6837|       |                // clang-format on
 6838|       |            }
 6839|       |#endif
 6840|  6.93k|#endif
 6841|  6.93k|            flags |= flag.second;
 6842|  6.93k|            found_flag = true;
 6843|  6.93k|            break;
 6844|  6.96k|        }
 6845|  7.02k|        if (!found_flag) {
  ------------------
  |  Branch (6845:13): [True: 88, False: 6.93k]
  ------------------
 6846|     88|            handler.on_error("Invalid flag in regex");
 6847|     88|            return begin;
 6848|     88|        }
 6849|  7.02k|    }
 6850|  41.9k|    handler.on_regex_flags(flags);
 6851|       |
 6852|  41.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  41.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 58, False: 41.8k]
  |  |  ------------------
  ------------------
 6853|     58|        handler.on_error("Unexpected end of regex in format string");
 6854|     58|        return begin;
 6855|     58|    }
 6856|       |
 6857|  41.8k|    return begin;
 6858|       |#else
 6859|       |    handler.on_error("Regular expression support is disabled");
 6860|       |    return {};
 6861|       |#endif
 6862|  41.9k|}
_ZN3scn2v36detail12specs_setter16on_regex_patternIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6364|  42.0k|    {
 6365|  42.0k|        m_specs.charset_string_data = pattern.data();
 6366|  42.0k|        m_specs.charset_string_size = pattern.size();
 6367|  42.0k|    }
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6465|  5.15k|{
 6466|  5.15k|    switch (type) {
 6467|    106|        case 'b':
  ------------------
  |  Branch (6467:9): [True: 106, False: 5.04k]
  ------------------
 6468|    158|        case 'B':
  ------------------
  |  Branch (6468:9): [True: 52, False: 5.10k]
  ------------------
 6469|    158|            return presentation_type::int_binary;
 6470|    108|        case 'd':
  ------------------
  |  Branch (6470:9): [True: 108, False: 5.04k]
  ------------------
 6471|    108|            return presentation_type::int_decimal;
 6472|    178|        case 'i':
  ------------------
  |  Branch (6472:9): [True: 178, False: 4.97k]
  ------------------
 6473|    178|            return presentation_type::int_generic;
 6474|     70|        case 'u':
  ------------------
  |  Branch (6474:9): [True: 70, False: 5.08k]
  ------------------
 6475|     70|            return presentation_type::int_unsigned_decimal;
 6476|    250|        case 'o':
  ------------------
  |  Branch (6476:9): [True: 250, False: 4.90k]
  ------------------
 6477|    250|            return presentation_type::int_octal;
 6478|    116|        case 'x':
  ------------------
  |  Branch (6478:9): [True: 116, False: 5.03k]
  ------------------
 6479|    168|        case 'X':
  ------------------
  |  Branch (6479:9): [True: 52, False: 5.10k]
  ------------------
 6480|    168|            return presentation_type::int_hex;
 6481|     34|        case 'r':
  ------------------
  |  Branch (6481:9): [True: 34, False: 5.11k]
  ------------------
 6482|     68|        case 'R':
  ------------------
  |  Branch (6482:9): [True: 34, False: 5.11k]
  ------------------
 6483|     68|            return presentation_type::int_arbitrary_base;
 6484|    106|        case 'a':
  ------------------
  |  Branch (6484:9): [True: 106, False: 5.04k]
  ------------------
 6485|    194|        case 'A':
  ------------------
  |  Branch (6485:9): [True: 88, False: 5.06k]
  ------------------
 6486|    194|            return presentation_type::float_hex;
 6487|     70|        case 'e':
  ------------------
  |  Branch (6487:9): [True: 70, False: 5.08k]
  ------------------
 6488|    140|        case 'E':
  ------------------
  |  Branch (6488:9): [True: 70, False: 5.08k]
  ------------------
 6489|    140|            return presentation_type::float_scientific;
 6490|    232|        case 'f':
  ------------------
  |  Branch (6490:9): [True: 232, False: 4.92k]
  ------------------
 6491|    338|        case 'F':
  ------------------
  |  Branch (6491:9): [True: 106, False: 5.04k]
  ------------------
 6492|    338|            return presentation_type::float_fixed;
 6493|    132|        case 'g':
  ------------------
  |  Branch (6493:9): [True: 132, False: 5.02k]
  ------------------
 6494|    190|        case 'G':
  ------------------
  |  Branch (6494:9): [True: 58, False: 5.09k]
  ------------------
 6495|    190|            return presentation_type::float_general;
 6496|  2.07k|        case 's':
  ------------------
  |  Branch (6496:9): [True: 2.07k, False: 3.07k]
  ------------------
 6497|  2.07k|            return presentation_type::string;
 6498|    322|        case 'c':
  ------------------
  |  Branch (6498:9): [True: 322, False: 4.83k]
  ------------------
 6499|    322|            return presentation_type::character;
 6500|     34|        case '?':
  ------------------
  |  Branch (6500:9): [True: 34, False: 5.11k]
  ------------------
 6501|     34|            return presentation_type::escaped_character;
 6502|     78|        case 'p':
  ------------------
  |  Branch (6502:9): [True: 78, False: 5.07k]
  ------------------
 6503|     78|            return presentation_type::pointer;
 6504|      0|        case '[':
  ------------------
  |  Branch (6504:9): [True: 0, False: 5.15k]
  ------------------
 6505|      0|        case '/':
  ------------------
  |  Branch (6505:9): [True: 0, False: 5.15k]
  ------------------
 6506|       |            // Should be handled by parse_presentation_set and
 6507|       |            // parse_presentation_regex
 6508|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6509|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6510|    782|        default:
  ------------------
  |  Branch (6510:9): [True: 782, False: 4.37k]
  ------------------
 6511|    782|            return presentation_type::none;
 6512|  5.15k|    }
 6513|  5.15k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6542|  63.4k|{
 6543|  63.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  63.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  63.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6544|       |
 6545|  63.4k|    auto check_align = [](wchar_t ch) {
 6546|  63.4k|        switch (ch) {
 6547|  63.4k|            case L'<':
 6548|  63.4k|                return align_type::left;
 6549|  63.4k|            case L'>':
 6550|  63.4k|                return align_type::right;
 6551|  63.4k|            case L'^':
 6552|  63.4k|                return align_type::center;
 6553|  63.4k|            default:
 6554|  63.4k|                return align_type::none;
 6555|  63.4k|        }
 6556|  63.4k|    };
 6557|       |
 6558|  63.4k|    auto potential_fill_len = code_point_length(begin, end);
 6559|  63.4k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 63.4k]
  |  |  |  Branch (859:45): [True: 38, False: 63.4k]
  |  |  |  Branch (859:45): [True: 4, False: 63.4k]
  |  |  ------------------
  ------------------
 6560|  63.4k|                     std::distance(begin, end) < potential_fill_len)) {
 6561|     42|        handler.on_error("Invalid encoding in fill character");
 6562|     42|        return begin;
 6563|     42|    }
 6564|       |
 6565|  63.4k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6566|       |
 6567|  63.4k|    auto potential_fill = std::basic_string_view<CharT>{
 6568|  63.4k|        begin, static_cast<size_t>(potential_fill_len)};
 6569|  63.4k|    const auto begin_before_fill = begin;
 6570|  63.4k|    begin += potential_fill_len;
 6571|       |
 6572|  63.4k|    if (begin == end) {
  ------------------
  |  Branch (6572:9): [True: 1.03k, False: 62.3k]
  ------------------
 6573|  1.03k|        return begin_before_fill;
 6574|  1.03k|    }
 6575|       |
 6576|  62.3k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6577|  62.3k|    const auto begin_after_fill = begin;
 6578|  62.3k|    ++begin;
 6579|       |
 6580|  62.3k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6580:9): [True: 60.9k, False: 1.42k]
  ------------------
 6581|  60.9k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  60.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 60, False: 60.8k]
  |  |  ------------------
  ------------------
 6582|     60|            handler.on_error("Invalid fill character '{' in format string");
 6583|     60|            return begin;
 6584|     60|        }
 6585|  60.8k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6585:13): [True: 8.49k, False: 52.4k]
  ------------------
 6586|  8.49k|            return begin_before_fill;
 6587|  8.49k|        }
 6588|  60.8k|    }
 6589|       |
 6590|  53.8k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6590:9): [True: 48.3k, False: 5.45k]
  ------------------
 6591|  48.3k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6591:13): [True: 3.65k, False: 44.7k]
  ------------------
 6592|  3.65k|            handler.on_align(potential_align_on_fill);
 6593|  3.65k|            return begin_after_fill;
 6594|  3.65k|        }
 6595|  44.7k|        return begin_before_fill;
 6596|  48.3k|    }
 6597|       |
 6598|  5.45k|    handler.on_fill(potential_fill);
 6599|  5.45k|    handler.on_align(potential_align_after_fill);
 6600|  5.45k|    return begin;
 6601|  53.8k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6524|  63.4k|{
 6525|  63.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  63.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  63.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6526|       |    if constexpr (sizeof(CharT) != 1) {
 6527|       |        return 1;
 6528|       |    }
 6529|  63.4k|    else {
 6530|  63.4k|        const auto lengths =
 6531|  63.4k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6532|  63.4k|            "\3\4";
 6533|  63.4k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6534|  63.4k|        return len;
 6535|  63.4k|    }
 6536|  63.4k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6545|   125k|    auto check_align = [](wchar_t ch) {
 6546|   125k|        switch (ch) {
 6547|  1.33k|            case L'<':
  ------------------
  |  Branch (6547:13): [True: 1.33k, False: 124k]
  ------------------
 6548|  1.33k|                return align_type::left;
 6549|  1.15k|            case L'>':
  ------------------
  |  Branch (6549:13): [True: 1.15k, False: 124k]
  ------------------
 6550|  1.15k|                return align_type::right;
 6551|  7.62k|            case L'^':
  ------------------
  |  Branch (6551:13): [True: 7.62k, False: 118k]
  ------------------
 6552|  7.62k|                return align_type::center;
 6553|   115k|            default:
  ------------------
  |  Branch (6553:13): [True: 115k, False: 10.1k]
  ------------------
 6554|   115k|                return align_type::none;
 6555|   125k|        }
 6556|   125k|    };
_ZN3scn2v36detail12specs_setter7on_fillIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6277|  5.45k|    {
 6278|  5.45k|        m_specs.fill = fill;
 6279|  5.45k|    }
_ZN3scn2v36detail9fill_typeaSIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6158|  5.45k|    {
 6159|  5.45k|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  924|  5.45k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.45k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6160|  5.45k|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  924|  5.45k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.45k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6161|  5.45k|        if constexpr (sizeof(CharT) == 1) {
 6162|  13.1k|            for (size_t i = 0; i < s.size(); ++i) {
  ------------------
  |  Branch (6162:32): [True: 7.70k, False: 5.45k]
  ------------------
 6163|  7.70k|                SCN_GCC_PUSH
 6164|  7.70k|                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6165|  7.70k|                m_data[i] = s[i];
 6166|  7.70k|                SCN_GCC_POP
 6167|  7.70k|            }
 6168|  5.45k|            m_size = static_cast<unsigned char>(s.size());
 6169|       |        }
 6170|       |        else if constexpr (sizeof(CharT) == 2) {
 6171|       |            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6172|       |            m_data[1] =
 6173|       |                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6174|       |            if (s.size() == 1) {
 6175|       |                return;
 6176|       |            }
 6177|       |            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6178|       |            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6179|       |        }
 6180|       |        else {
 6181|       |            const auto front = static_cast<unsigned>(s.front());
 6182|       |            m_data[0] = static_cast<char>(front);
 6183|       |            m_data[1] = static_cast<char>(front >> 8);
 6184|       |            m_data[2] = static_cast<char>(front >> 16);
 6185|       |            m_data[3] = static_cast<char>(front >> 24);
 6186|       |        }
 6187|  5.45k|    }
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6607|  63.3k|{
 6608|  63.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  63.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  63.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6609|       |
 6610|  63.3k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6610:9): [True: 15.1k, False: 48.1k]
  |  Branch (6610:33): [True: 4.18k, False: 10.9k]
  ------------------
 6611|  4.18k|        int width = parse_simple_int(begin, end);
 6612|  4.18k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  4.18k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.14k, False: 34]
  |  |  ------------------
  ------------------
 6613|  4.14k|            handler.on_width(width);
 6614|  4.14k|        }
 6615|     34|        else {
 6616|     34|            handler.on_error("Invalid field width");
 6617|     34|            return begin;
 6618|     34|        }
 6619|  4.18k|    }
 6620|  63.2k|    return begin;
 6621|  63.3k|}
impl.cpp:_ZN3scn2v36detail15parse_precisionIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6627|  9.13k|{
 6628|  9.13k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  9.13k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.13k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6629|       |
 6630|  9.13k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6630:9): [True: 9.10k, False: 34]
  |  Branch (6630:33): [True: 9.01k, False: 88]
  ------------------
 6631|  9.01k|        int prec = parse_simple_int(begin, end);
 6632|  9.01k|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  |  858|  9.01k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 8.96k, False: 48]
  |  |  ------------------
  ------------------
 6633|  8.96k|            handler.on_precision(prec);
 6634|  8.96k|        }
 6635|     48|        else {
 6636|     48|            handler.on_error("Invalid field precision");
 6637|     48|            return begin;
 6638|     48|        }
 6639|  9.01k|    }
 6640|  9.08k|    return begin;
 6641|  9.13k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7137|    554|    {
 7138|    554|        const auto cat = get_category_for_arg_type(m_arg_type);
 7139|    554|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7139:13): [True: 498, False: 56]
  ------------------
 7140|    554|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7140:13): [True: 442, False: 56]
  ------------------
 7141|    554|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7141:13): [True: 386, False: 56]
  ------------------
 7142|    554|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7142:13): [True: 330, False: 56]
  ------------------
 7143|    330|            SCN_UNLIKELY_ATTR
 7144|       |            // clang-format off
 7145|    330|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7146|       |            // clang-format on
 7147|    330|        }
 7148|       |
 7149|    224|        Handler::on_localized();
 7150|    224|    }
_ZN3scn2v36detail12specs_setter12on_localizedILb1EEEvv:
 6282|    440|    {
 6283|    440|        if constexpr (!SCN_DISABLE_LOCALE) {
 6284|    440|            m_specs.localized = true;
 6285|       |        }
 6286|       |        else {
 6287|       |            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6288|       |        }
 6289|    440|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|  60.6k|{
 8428|  60.6k|#define SCN_VISIT(Type)                                         \
 8429|  60.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|  60.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|  60.6k|    }                                                           \
 8432|  60.6k|    else {                                                      \
 8433|  60.6k|        return vis(monostate_val);                              \
 8434|  60.6k|    }
 8435|       |
 8436|  60.6k|    monostate monostate_val{};
 8437|       |
 8438|  60.6k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 60.6k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 60.6k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|  6.76k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 6.76k, False: 53.9k]
  ------------------
 8444|  6.76k|            SCN_VISIT(int);
  ------------------
  |  | 8429|  6.76k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  6.76k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  6.76k|    }                                                           \
  |  | 8432|  6.76k|    else {                                                      \
  |  | 8433|  6.76k|        return vis(monostate_val);                              \
  |  | 8434|  6.76k|    }
  ------------------
 8445|  6.76k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 60.6k]
  ------------------
 8446|  6.76k|            SCN_VISIT(long);
  ------------------
  |  | 8429|  6.76k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  6.76k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  6.76k|    }                                                           \
  |  | 8432|  6.76k|    else {                                                      \
  |  | 8433|  6.76k|        return vis(monostate_val);                              \
  |  | 8434|  6.76k|    }
  ------------------
 8447|  6.76k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 60.6k]
  ------------------
 8448|  6.76k|            SCN_VISIT(long long);
  ------------------
  |  | 8429|  6.76k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  6.76k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  6.76k|    }                                                           \
  |  | 8432|  6.76k|    else {                                                      \
  |  | 8433|  6.76k|        return vis(monostate_val);                              \
  |  | 8434|  6.76k|    }
  ------------------
 8449|  6.76k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 60.6k]
  ------------------
 8450|  6.76k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|  6.76k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  6.76k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  6.76k|    }                                                           \
  |  | 8432|  6.76k|    else {                                                      \
  |  | 8433|  6.76k|        return vis(monostate_val);                              \
  |  | 8434|  6.76k|    }
  ------------------
 8451|  6.76k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 60.6k]
  ------------------
 8452|  6.76k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|  6.76k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  6.76k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  6.76k|    }                                                           \
  |  | 8432|  6.76k|    else {                                                      \
  |  | 8433|  6.76k|        return vis(monostate_val);                              \
  |  | 8434|  6.76k|    }
  ------------------
 8453|  13.5k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 6.76k, False: 53.9k]
  ------------------
 8454|  13.5k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|  13.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  13.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  13.5k|    }                                                           \
  |  | 8432|  13.5k|    else {                                                      \
  |  | 8433|  13.5k|        return vis(monostate_val);                              \
  |  | 8434|  13.5k|    }
  ------------------
 8455|  13.5k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 60.6k]
  ------------------
 8456|  13.5k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|  13.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  13.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  13.5k|    }                                                           \
  |  | 8432|  13.5k|    else {                                                      \
  |  | 8433|  13.5k|        return vis(monostate_val);                              \
  |  | 8434|  13.5k|    }
  ------------------
 8457|  13.5k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 60.6k]
  ------------------
 8458|  13.5k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|  13.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  13.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  13.5k|    }                                                           \
  |  | 8432|  13.5k|    else {                                                      \
  |  | 8433|  13.5k|        return vis(monostate_val);                              \
  |  | 8434|  13.5k|    }
  ------------------
 8459|  20.2k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 6.72k, False: 53.9k]
  ------------------
 8460|  20.2k|            SCN_VISIT(void*);
  ------------------
  |  | 8429|  20.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  20.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  20.2k|    }                                                           \
  |  | 8432|  20.2k|    else {                                                      \
  |  | 8433|  20.2k|        return vis(monostate_val);                              \
  |  | 8434|  20.2k|    }
  ------------------
 8461|  27.0k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 6.76k, False: 53.9k]
  ------------------
 8462|  27.0k|            SCN_VISIT(bool);
  ------------------
  |  | 8429|  27.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  27.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  27.0k|    }                                                           \
  |  | 8432|  27.0k|    else {                                                      \
  |  | 8433|  27.0k|        return vis(monostate_val);                              \
  |  | 8434|  27.0k|    }
  ------------------
 8463|  33.7k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 6.72k, False: 53.9k]
  ------------------
 8464|  33.7k|            SCN_VISIT(char);
  ------------------
  |  | 8429|  33.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  33.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  33.7k|    }                                                           \
  |  | 8432|  33.7k|    else {                                                      \
  |  | 8433|  33.7k|        return vis(monostate_val);                              \
  |  | 8434|  33.7k|    }
  ------------------
 8465|  33.7k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 60.6k]
  ------------------
 8466|  33.7k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|  33.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  33.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  33.7k|    }                                                           \
  |  | 8432|  33.7k|    else {                                                      \
  |  | 8433|  33.7k|        return vis(monostate_val);                              \
  |  | 8434|  33.7k|    }
  ------------------
 8467|  33.7k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 60.6k]
  ------------------
 8468|  33.7k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|  33.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  33.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  33.7k|    }                                                           \
  |  | 8432|  33.7k|    else {                                                      \
  |  | 8433|  33.7k|        return vis(monostate_val);                              \
  |  | 8434|  33.7k|    }
  ------------------
 8469|  33.7k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 60.6k]
  ------------------
 8470|  33.7k|            SCN_VISIT(float);
  ------------------
  |  | 8429|  33.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  33.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  33.7k|    }                                                           \
  |  | 8432|  33.7k|    else {                                                      \
  |  | 8433|  33.7k|        return vis(monostate_val);                              \
  |  | 8434|  33.7k|    }
  ------------------
 8471|  40.5k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 6.76k, False: 53.9k]
  ------------------
 8472|  40.5k|            SCN_VISIT(double);
  ------------------
  |  | 8429|  40.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  40.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  40.5k|    }                                                           \
  |  | 8432|  40.5k|    else {                                                      \
  |  | 8433|  40.5k|        return vis(monostate_val);                              \
  |  | 8434|  40.5k|    }
  ------------------
 8473|  40.5k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 60.6k]
  ------------------
 8474|  40.5k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|  40.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  40.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  40.5k|    }                                                           \
  |  | 8432|  40.5k|    else {                                                      \
  |  | 8433|  40.5k|        return vis(monostate_val);                              \
  |  | 8434|  40.5k|    }
  ------------------
 8475|  47.2k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 6.72k, False: 53.9k]
  ------------------
 8476|  47.2k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|  47.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  47.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  47.2k|    }                                                           \
  |  | 8432|  47.2k|    else {                                                      \
  |  | 8433|  47.2k|        return vis(monostate_val);                              \
  |  | 8434|  47.2k|    }
  ------------------
 8477|  53.9k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 6.72k, False: 53.9k]
  ------------------
 8478|  53.9k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|  53.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  53.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  53.9k|    }                                                           \
  |  | 8432|  53.9k|    else {                                                      \
  |  | 8433|  53.9k|        return vis(monostate_val);                              \
  |  | 8434|  53.9k|    }
  ------------------
 8479|  53.9k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 60.6k]
  ------------------
 8480|  53.9k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|  53.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  53.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  53.9k|    }                                                           \
  |  | 8432|  53.9k|    else {                                                      \
  |  | 8433|  53.9k|        return vis(monostate_val);                              \
  |  | 8434|  53.9k|    }
  ------------------
 8481|  60.6k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 6.72k, False: 53.9k]
  ------------------
 8482|  60.6k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|  60.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  60.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  60.6k|    }                                                           \
  |  | 8432|  60.6k|    else {                                                      \
  |  | 8433|  60.6k|        return vis(monostate_val);                              \
  |  | 8434|  60.6k|    }
  ------------------
 8483|  60.6k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 60.6k]
  ------------------
 8484|  60.6k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|  60.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  60.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  60.6k|    }                                                           \
  |  | 8432|  60.6k|    else {                                                      \
  |  | 8433|  60.6k|        return vis(monostate_val);                              \
  |  | 8434|  60.6k|    }
  ------------------
 8485|  60.6k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 60.6k]
  ------------------
 8486|  60.6k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|  60.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  60.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  60.6k|    }                                                           \
  |  | 8432|  60.6k|    else {                                                      \
  |  | 8433|  60.6k|        return vis(monostate_val);                              \
  |  | 8434|  60.6k|    }
  ------------------
 8487|       |
 8488|  60.6k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 60.6k]
  ------------------
 8489|  60.6k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|  60.6k|            return vis(
 8491|  60.6k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 60.6k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 60.6k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|  60.6k|            SCN_CLANG_POP
 8506|  60.6k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE5beginEv:
 3325|  11.3k|    {
 3326|  11.3k|        return m_iterator;
 3327|  11.3k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISH_vEEOT_:
 1427|  2.01k|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.01k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.01k|    {
 1430|  2.01k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  435|  2.01k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.01k|    {
  437|  2.01k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.24k|    {
 1177|  2.24k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE3endEv:
 3329|  6.64k|    {
 3330|  6.64k|        return m_sentinel;
 3331|  6.64k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISI_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSM_IXsr3stdE16is_convertible_vISO_SI_EEvE4typeELSS_0EEEONS0_10unexpectedISN_EE:
 1473|    226|        : base(unexpect, std::move(e.error())),
 1474|    226|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    226|    {
 1476|    226|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  444|    226|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    226|          m_has_value(false)
  446|    226|    {
  447|    226|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEEC2ISG_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SG_EEvE4typeELPv0EEESO_SJ_:
 3310|  5.28k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  5.28k|    static_cast<    \
  |  |  929|  5.28k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  5.28k|    static_cast<    \
  |  |  929|  5.28k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  5.28k|    {
 3312|  5.28k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEcvbEv:
 1597|    270|    {
 1598|    270|        return has_value();
 1599|    270|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9has_valueEv:
  484|  4.43k|    {
  485|  4.43k|        return m_has_value;
  486|  4.43k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1652|    218|    {
 1653|    218|        return value();
 1654|    218|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1626|  2.01k|    {
 1627|  2.01k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.01k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.01k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.01k|        return this->get_value();
 1629|  2.01k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9get_valueEv:
  450|  2.01k|    {
  451|  2.01k|        return m_value;
  452|  2.01k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESI_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSO_:
 1836|  1.97k|    {
 1837|  1.97k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.97k|                                            std::forward<F>(f));
 1839|  1.97k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS6_IPKcS8_EENS4_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEE8sentinelILb1EEEEENS4_9eof_errorEEERFNS0_10scan_errorESK_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESM_EEDaOSR_OT0_:
 1322|  1.97k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.97k|    else {
 1333|  1.97k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.97k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.97k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.79k, False: 174]
  |  |  ------------------
  ------------------
 1335|  1.97k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.97k|                   : result(unexpect,
 1337|    174|                            trivial_invoke(std::forward<F>(f),
 1338|    174|                                           std::forward<Exp>(exp).error()));
 1339|  1.97k|    }
 1340|  1.97k|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1662|  1.79k|    {
 1663|  1.79k|        return std::move(value());
 1664|  1.79k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1427|  1.79k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.79k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.79k|    {
 1430|  1.79k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  435|  1.79k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.79k|    {
  437|  1.79k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.97k|    {
 1177|  1.97k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5errorEv:
 1613|    174|    {
 1614|    174|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    174|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    174|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    174|        return std::move(this->get_unexpected().error());
 1616|    174|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE14get_unexpectedEv:
  467|    174|    {
  468|    174|        return m_unexpected;
  469|    174|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
 1483|    174|        : base(unexpect, std::forward<Args>(args)...),
 1484|    174|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|    174|    {
 1486|    174|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  444|    174|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    174|          m_has_value(false)
  446|    174|    {
  447|    174|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEcvbEv:
 1597|  1.97k|    {
 1598|  1.97k|        return has_value();
 1599|  1.97k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  3.94k|    {
  485|  3.94k|        return m_has_value;
  486|  3.94k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5errorEv:
 1603|    174|    {
 1604|    174|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    174|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    174|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    174|        return this->get_unexpected().error();
 1606|    174|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|    174|    {
  468|    174|        return m_unexpected;
  469|    174|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1662|  1.79k|    {
 1663|  1.79k|        return std::move(value());
 1664|  1.79k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1626|  1.79k|    {
 1627|  1.79k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.79k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.79k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.79k|        return this->get_value();
 1629|  1.79k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.79k|    {
  451|  1.79k|        return m_value;
  452|  1.79k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5475|   218k|    {
 5476|   218k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   218k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 218k]
  |  |  ------------------
  ------------------
 5477|      0|            return max_size();
 5478|      0|        }
 5479|       |
 5480|   218k|        return static_cast<std::size_t>(m_desc &
 5481|   218k|                                        ((1 << detail::packed_arg_bits) - 1));
 5482|   218k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5500|   256k|    {
 5501|   256k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5502|   256k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5443|  37.8k|    {
 5444|  37.8k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  37.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 37.8k]
  |  |  ------------------
  ------------------
 5445|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5446|      0|                return m_args[id];
 5447|      0|            }
 5448|      0|            return {};
 5449|      0|        }
 5450|       |
 5451|  37.8k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  37.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 68, False: 37.7k]
  |  |  ------------------
  ------------------
 5452|     68|            return {};
 5453|     68|        }
 5454|       |
 5455|  37.7k|        const auto t = type(id);
 5456|  37.7k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  37.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.18k, False: 36.5k]
  |  |  ------------------
  ------------------
 5457|  1.18k|            return {};
 5458|  1.18k|        }
 5459|       |
 5460|  36.5k|        basic_scan_arg<Context> arg;
 5461|  36.5k|        arg.m_type = t;
 5462|  36.5k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5462:13): [True: 36.5k, False: 0]
  ------------------
 5463|  36.5k|            arg.m_value.ref_value = m_builtin_values[id];
 5464|  36.5k|        }
 5465|      0|        else {
 5466|      0|            arg.m_value = m_values[id];
 5467|      0|        }
 5468|  36.5k|        return arg;
 5469|  37.7k|    }
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5250|  37.8k|    constexpr basic_scan_arg() = default;
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5509|  37.7k|    {
 5510|       |        // First (0th) index is size, types start after that
 5511|  37.7k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5512|  37.7k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5513|  37.7k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5514|  37.7k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5504|  36.5k|    {
 5505|  36.5k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5506|  36.5k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5256|  72.6k|    {
 5257|  72.6k|        return m_type != detail::arg_type::none_type;
 5258|  72.6k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|  4.78k|{
 8428|  4.78k|#define SCN_VISIT(Type)                                         \
 8429|  4.78k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|  4.78k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|  4.78k|    }                                                           \
 8432|  4.78k|    else {                                                      \
 8433|  4.78k|        return vis(monostate_val);                              \
 8434|  4.78k|    }
 8435|       |
 8436|  4.78k|    monostate monostate_val{};
 8437|       |
 8438|  4.78k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 4.78k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 4.78k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|    532|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 532, False: 4.25k]
  ------------------
 8444|    532|            SCN_VISIT(int);
  ------------------
  |  | 8429|    532|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|    532|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|    532|    }                                                           \
  |  | 8432|    532|    else {                                                      \
  |  | 8433|    532|        return vis(monostate_val);                              \
  |  | 8434|    532|    }
  ------------------
 8445|    532|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 4.78k]
  ------------------
 8446|    532|            SCN_VISIT(long);
  ------------------
  |  | 8429|    532|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|    532|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|    532|    }                                                           \
  |  | 8432|    532|    else {                                                      \
  |  | 8433|    532|        return vis(monostate_val);                              \
  |  | 8434|    532|    }
  ------------------
 8447|    532|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 4.78k]
  ------------------
 8448|    532|            SCN_VISIT(long long);
  ------------------
  |  | 8429|    532|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|    532|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|    532|    }                                                           \
  |  | 8432|    532|    else {                                                      \
  |  | 8433|    532|        return vis(monostate_val);                              \
  |  | 8434|    532|    }
  ------------------
 8449|    532|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 4.78k]
  ------------------
 8450|    532|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|    532|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|    532|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|    532|    }                                                           \
  |  | 8432|    532|    else {                                                      \
  |  | 8433|    532|        return vis(monostate_val);                              \
  |  | 8434|    532|    }
  ------------------
 8451|    532|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 4.78k]
  ------------------
 8452|    532|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|    532|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|    532|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|    532|    }                                                           \
  |  | 8432|    532|    else {                                                      \
  |  | 8433|    532|        return vis(monostate_val);                              \
  |  | 8434|    532|    }
  ------------------
 8453|  1.06k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 532, False: 4.25k]
  ------------------
 8454|  1.06k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|  1.06k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  1.06k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  1.06k|    }                                                           \
  |  | 8432|  1.06k|    else {                                                      \
  |  | 8433|  1.06k|        return vis(monostate_val);                              \
  |  | 8434|  1.06k|    }
  ------------------
 8455|  1.06k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 4.78k]
  ------------------
 8456|  1.06k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|  1.06k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  1.06k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  1.06k|    }                                                           \
  |  | 8432|  1.06k|    else {                                                      \
  |  | 8433|  1.06k|        return vis(monostate_val);                              \
  |  | 8434|  1.06k|    }
  ------------------
 8457|  1.06k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 4.78k]
  ------------------
 8458|  1.06k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|  1.06k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  1.06k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  1.06k|    }                                                           \
  |  | 8432|  1.06k|    else {                                                      \
  |  | 8433|  1.06k|        return vis(monostate_val);                              \
  |  | 8434|  1.06k|    }
  ------------------
 8459|  1.59k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 532, False: 4.25k]
  ------------------
 8460|  1.59k|            SCN_VISIT(void*);
  ------------------
  |  | 8429|  1.59k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  1.59k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  1.59k|    }                                                           \
  |  | 8432|  1.59k|    else {                                                      \
  |  | 8433|  1.59k|        return vis(monostate_val);                              \
  |  | 8434|  1.59k|    }
  ------------------
 8461|  2.12k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 532, False: 4.25k]
  ------------------
 8462|  2.12k|            SCN_VISIT(bool);
  ------------------
  |  | 8429|  2.12k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  2.12k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  2.12k|    }                                                           \
  |  | 8432|  2.12k|    else {                                                      \
  |  | 8433|  2.12k|        return vis(monostate_val);                              \
  |  | 8434|  2.12k|    }
  ------------------
 8463|  2.12k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 4.78k]
  ------------------
 8464|  2.12k|            SCN_VISIT(char);
  ------------------
  |  | 8429|  2.12k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  2.12k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  2.12k|    }                                                           \
  |  | 8432|  2.12k|    else {                                                      \
  |  | 8433|  2.12k|        return vis(monostate_val);                              \
  |  | 8434|  2.12k|    }
  ------------------
 8465|  2.66k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 532, False: 4.25k]
  ------------------
 8466|  2.66k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|  2.66k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  2.66k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  2.66k|    }                                                           \
  |  | 8432|  2.66k|    else {                                                      \
  |  | 8433|  2.66k|        return vis(monostate_val);                              \
  |  | 8434|  2.66k|    }
  ------------------
 8467|  2.66k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 4.78k]
  ------------------
 8468|  2.66k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|  2.66k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  2.66k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  2.66k|    }                                                           \
  |  | 8432|  2.66k|    else {                                                      \
  |  | 8433|  2.66k|        return vis(monostate_val);                              \
  |  | 8434|  2.66k|    }
  ------------------
 8469|  2.66k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 4.78k]
  ------------------
 8470|  2.66k|            SCN_VISIT(float);
  ------------------
  |  | 8429|  2.66k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  2.66k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  2.66k|    }                                                           \
  |  | 8432|  2.66k|    else {                                                      \
  |  | 8433|  2.66k|        return vis(monostate_val);                              \
  |  | 8434|  2.66k|    }
  ------------------
 8471|  3.19k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 532, False: 4.25k]
  ------------------
 8472|  3.19k|            SCN_VISIT(double);
  ------------------
  |  | 8429|  3.19k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  3.19k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  3.19k|    }                                                           \
  |  | 8432|  3.19k|    else {                                                      \
  |  | 8433|  3.19k|        return vis(monostate_val);                              \
  |  | 8434|  3.19k|    }
  ------------------
 8473|  3.19k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 4.78k]
  ------------------
 8474|  3.19k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|  3.19k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  3.19k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  3.19k|    }                                                           \
  |  | 8432|  3.19k|    else {                                                      \
  |  | 8433|  3.19k|        return vis(monostate_val);                              \
  |  | 8434|  3.19k|    }
  ------------------
 8475|  3.19k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 4.78k]
  ------------------
 8476|  3.19k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|  3.19k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  3.19k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  3.19k|    }                                                           \
  |  | 8432|  3.19k|    else {                                                      \
  |  | 8433|  3.19k|        return vis(monostate_val);                              \
  |  | 8434|  3.19k|    }
  ------------------
 8477|  3.72k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 532, False: 4.25k]
  ------------------
 8478|  3.72k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|  3.72k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  3.72k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  3.72k|    }                                                           \
  |  | 8432|  3.72k|    else {                                                      \
  |  | 8433|  3.72k|        return vis(monostate_val);                              \
  |  | 8434|  3.72k|    }
  ------------------
 8479|  4.25k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 532, False: 4.25k]
  ------------------
 8480|  4.25k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|  4.25k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  4.25k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  4.25k|    }                                                           \
  |  | 8432|  4.25k|    else {                                                      \
  |  | 8433|  4.25k|        return vis(monostate_val);                              \
  |  | 8434|  4.25k|    }
  ------------------
 8481|  4.78k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 532, False: 4.25k]
  ------------------
 8482|  4.78k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|  4.78k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  4.78k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  4.78k|    }                                                           \
  |  | 8432|  4.78k|    else {                                                      \
  |  | 8433|  4.78k|        return vis(monostate_val);                              \
  |  | 8434|  4.78k|    }
  ------------------
 8483|  4.78k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 4.78k]
  ------------------
 8484|  4.78k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|  4.78k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  4.78k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  4.78k|    }                                                           \
  |  | 8432|  4.78k|    else {                                                      \
  |  | 8433|  4.78k|        return vis(monostate_val);                              \
  |  | 8434|  4.78k|    }
  ------------------
 8485|  4.78k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 4.78k]
  ------------------
 8486|  4.78k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|  4.78k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  4.78k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  4.78k|    }                                                           \
  |  | 8432|  4.78k|    else {                                                      \
  |  | 8433|  4.78k|        return vis(monostate_val);                              \
  |  | 8434|  4.78k|    }
  ------------------
 8487|       |
 8488|  4.78k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 4.78k]
  ------------------
 8489|  4.78k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|  4.78k|            return vis(
 8491|  4.78k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 4.78k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 4.78k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|  4.78k|            SCN_CLANG_POP
 8506|  4.78k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5553|   218k|        : m_format{format}, m_next_arg_id{next_arg_id}
 5554|   218k|    {
 5555|   218k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8065|   218k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   218k|    static_cast<    \
  |  |  929|   218k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   218k|    static_cast<    \
  |  |  929|   218k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8066|   218k|    {
 8067|   218k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7054|   218k|{
 7055|   218k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7056|   218k|    handler.check_args_exhausted();
 7057|   218k|    return handler.get_error();
 7058|   218k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7020|   218k|{
 7021|       |    // TODO: memchr fast path with a larger (> 32) format string
 7022|       |
 7023|   218k|    auto begin = format.data();
 7024|   218k|    auto it = begin;
 7025|   218k|    const auto end = format.data() + format.size();
 7026|       |
 7027|   451M|    while (it != end) {
  ------------------
  |  Branch (7027:12): [True: 451M, False: 74.0k]
  ------------------
 7028|   451M|        const auto ch = *it++;
 7029|   451M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7029:13): [True: 38.5k, False: 451M]
  ------------------
 7030|  38.5k|            handler.on_literal_text(begin, it - 1);
 7031|       |
 7032|  38.5k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7033|  38.5k|            if (!handler) {
  ------------------
  |  Branch (7033:17): [True: 34.7k, False: 3.80k]
  ------------------
 7034|  34.7k|                return;
 7035|  34.7k|            }
 7036|  38.5k|        }
 7037|   451M|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7037:18): [True: 111k, False: 450M]
  ------------------
 7038|   111k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|   223k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 110k, False: 1.92k]
  |  |  |  Branch (859:45): [True: 358, False: 111k]
  |  |  |  Branch (859:45): [True: 109k, False: 1.92k]
  |  |  ------------------
  ------------------
 7039|   110k|                handler.on_error("Unmatched '}' in format string");
 7040|   110k|                return;
 7041|   110k|            }
 7042|       |
 7043|  1.92k|            handler.on_literal_text(begin, it);
 7044|  1.92k|            begin = ++it;
 7045|  1.92k|        }
 7046|   451M|    }
 7047|       |
 7048|  74.0k|    handler.on_literal_text(begin, end);
 7049|  74.0k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6952|  38.5k|{
 6953|  38.5k|    struct id_adapter {
 6954|  38.5k|        constexpr void operator()()
 6955|  38.5k|        {
 6956|  38.5k|            arg_id = handler.on_arg_id();
 6957|  38.5k|        }
 6958|  38.5k|        constexpr void operator()(std::size_t id)
 6959|  38.5k|        {
 6960|  38.5k|            arg_id = handler.on_arg_id(id);
 6961|  38.5k|        }
 6962|       |
 6963|  38.5k|        constexpr void on_error(const char* msg)
 6964|  38.5k|        {
 6965|  38.5k|            SCN_UNLIKELY_ATTR
 6966|  38.5k|            handler.on_error(msg);
 6967|  38.5k|        }
 6968|       |
 6969|  38.5k|        Handler& handler;
 6970|  38.5k|        std::size_t arg_id;
 6971|  38.5k|    };
 6972|       |
 6973|  38.5k|    ++begin;
 6974|  38.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  38.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52, False: 38.4k]
  |  |  ------------------
  ------------------
 6975|     52|        handler.on_error("Unexpected end of replacement field");
 6976|     52|        return begin;
 6977|     52|    }
 6978|       |
 6979|  38.4k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:9): [True: 4.76k, False: 33.7k]
  ------------------
 6980|  4.76k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6981|  4.76k|    }
 6982|  33.7k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6982:14): [True: 160, False: 33.5k]
  ------------------
 6983|    160|        handler.on_literal_text(begin, begin + 1);
 6984|    160|    }
 6985|  33.5k|    else {
 6986|  33.5k|        auto adapter = id_adapter{handler, 0};
 6987|  33.5k|        begin = parse_arg_id(begin, end, adapter);
 6988|       |
 6989|  33.5k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  33.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 120, False: 33.4k]
  |  |  ------------------
  ------------------
 6990|    120|            handler.on_error("Missing '}' in format string");
 6991|    120|            return begin;
 6992|    120|        }
 6993|       |
 6994|  33.4k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6994:13): [True: 134, False: 33.2k]
  ------------------
 6995|    134|            handler.on_replacement_field(adapter.arg_id, begin);
 6996|    134|        }
 6997|  33.2k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6997:18): [True: 32.9k, False: 352]
  ------------------
 6998|  32.9k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  32.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 50, False: 32.8k]
  |  |  ------------------
  ------------------
 6999|     50|                handler.on_error("Unexpected end of replacement field");
 7000|     50|                return begin;
 7001|     50|            }
 7002|  32.8k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7003|  32.8k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  65.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.35k, False: 30.5k]
  |  |  |  Branch (859:45): [True: 0, False: 32.8k]
  |  |  |  Branch (859:45): [True: 2.35k, False: 30.5k]
  |  |  ------------------
  ------------------
 7004|  2.35k|                handler.on_error("Unknown format specifier");
 7005|  2.35k|                return begin;
 7006|  2.35k|            }
 7007|  32.8k|        }
 7008|    352|        else {
 7009|    352|            SCN_UNLIKELY_ATTR
 7010|    352|            handler.on_error("Missing '}' in format string");
 7011|    352|            return begin;
 7012|    352|        }
 7013|  33.4k|    }
 7014|  35.5k|    return begin + 1;
 7015|  38.4k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8049|  37.7k|    {
 8050|  37.7k|        return m_args.get(id);
 8051|  37.7k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE4argsEv:
 8054|  4.90k|    {
 8055|  4.90k|        return m_args;
 8056|  4.90k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8059|  35.0k|    {
 8060|  35.0k|        return m_locale;
 8061|  35.0k|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5575|  37.5k|    {
 5576|  37.5k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  37.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40, False: 37.5k]
  |  |  ------------------
  ------------------
 5577|     40|            on_error(
 5578|     40|                "Cannot switch from manual to automatic argument indexing");
 5579|     40|            return 0;
 5580|     40|        }
 5581|       |
 5582|  37.5k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5583|  37.5k|        do_check_arg_id(id);
 5584|  37.5k|        return id;
 5585|  37.5k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE8on_errorEPKc:
 5599|    112|    {
 5600|    112|        return detail::handle_error(
 5601|    112|            scan_error{scan_error::invalid_format_string, msg});
 5602|    112|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6063|  37.7k|{
 6064|  37.7k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6064:9): [Folded - Ignored]
  ------------------
 6065|  37.7k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6065:10): [Folded - Ignored]
  |  Branch (6065:22): [Folded - Ignored]
  ------------------
 6066|       |        // The cast below will cause an error on gcc pre-12
 6067|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6068|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6068:13): [True: 0, False: 0]
  ------------------
 6069|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6070|      0|            SCN_UNLIKELY_ATTR
 6071|      0|            on_error("Argument not found");
 6072|      0|        }
 6073|      0|    }
 6074|  37.7k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6453|  33.5k|{
 6454|  33.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  33.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6455|  33.5k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6455:9): [True: 33.5k, False: 0]
  |  Branch (6455:26): [True: 742, False: 32.8k]
  ------------------
 6456|    742|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|    742|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6457|    742|    }
 6458|       |
 6459|  32.8k|    handler();
 6460|  32.8k|    return begin;
 6461|  33.5k|}
impl.cpp:_ZN3scn2v36detail15do_parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6423|    742|{
 6424|    742|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|    742|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    742|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6425|       |
 6426|    742|    CharT c = *begin;
 6427|    742|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (6427:9): [True: 108, False: 634]
  |  Branch (6427:27): [True: 178, False: 456]
  ------------------
 6428|    286|        handler.on_error("Invalid argument ID");
 6429|    286|        return begin;
 6430|    286|    }
 6431|       |
 6432|    456|    int idx = 0;
 6433|    456|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (6433:9): [True: 278, False: 178]
  ------------------
 6434|    278|        idx = parse_simple_int(begin, end);
 6435|    278|    }
 6436|    178|    else {
 6437|    178|        ++begin;
 6438|    178|    }
 6439|       |
 6440|    456|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (6440:9): [True: 120, False: 336]
  |  Branch (6440:26): [True: 202, False: 134]
  |  Branch (6440:50): [True: 66, False: 136]
  ------------------
 6441|    186|        handler.on_error("Invalid argument ID");
 6442|    186|        return begin;
 6443|    186|    }
 6444|    270|    handler(idx);
 6445|       |
 6446|    270|    return begin;
 6447|    456|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 6964|    472|        {
 6965|    472|            SCN_UNLIKELY_ATTR
 6966|    472|            handler.on_error(msg);
 6967|    472|        }
_ZN3scn2v36detail16parse_simple_intIwEEiRPKT_S5_:
 6402|  15.3k|{
 6403|  15.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  15.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6404|  15.3k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  15.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6405|       |
 6406|  15.3k|    unsigned long long value = 0;
 6407|  18.0k|    do {
 6408|  18.0k|        value *= 10;
 6409|  18.0k|        value += static_cast<unsigned long long>(*begin - '0');
 6410|  18.0k|        if (value >
  ------------------
  |  Branch (6410:13): [True: 62, False: 18.0k]
  ------------------
 6411|  18.0k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6412|     62|            return -1;
 6413|     62|        }
 6414|  18.0k|        ++begin;
 6415|  18.0k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6415:14): [True: 17.7k, False: 308]
  |  Branch (6415:30): [True: 9.17k, False: 8.54k]
  |  Branch (6415:47): [True: 2.78k, False: 6.39k]
  ------------------
 6416|  15.2k|    return static_cast<int>(value);
 6417|  15.3k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 6959|    270|        {
 6960|    270|            arg_id = handler.on_arg_id(id);
 6961|    270|        }
_ZN3scn2v324basic_scan_parse_contextIwE12check_arg_idEm:
 5588|    270|    {
 5589|    270|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  859|    270|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 72, False: 198]
  |  |  ------------------
  ------------------
 5590|     72|            on_error(
 5591|     72|                "Cannot switch from manual to automatic argument indexing");
 5592|     72|            return;
 5593|     72|        }
 5594|    198|        m_next_arg_id = -1;
 5595|    198|        do_check_arg_id(id);
 5596|    198|    }
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6955|  32.8k|        {
 6956|  32.8k|            arg_id = handler.on_arg_id();
 6957|  32.8k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5261|  65.7k|    {
 5262|  65.7k|        return m_type;
 5263|  65.7k|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5570|  30.1k|    {
 5571|  30.1k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5572|  30.1k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5559|  63.0k|    {
 5560|  63.0k|        return m_format.data();
 5561|  63.0k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7131|  32.8k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|  32.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7132|  32.8k|    {
 7133|  32.8k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  32.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  32.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7134|  32.8k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6868|  32.8k|{
 6869|  32.8k|    auto do_presentation = [&]() -> const CharT* {
 6870|  32.8k|        if (*begin == CharT{'['}) {
 6871|  32.8k|            auto set = parse_presentation_set(begin, end, handler);
 6872|  32.8k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6873|       |                // clang-format off
 6874|  32.8k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|  32.8k|                return begin;
 6877|  32.8k|            }
 6878|  32.8k|            handler.on_character_set_string(set);
 6879|  32.8k|            return begin;
 6880|  32.8k|        }
 6881|  32.8k|        if (*begin == CharT{'/'}) {
 6882|  32.8k|            return parse_presentation_regex(begin, end, handler);
 6883|  32.8k|        }
 6884|  32.8k|        presentation_type type = parse_presentation_type(*begin++);
 6885|  32.8k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6886|  32.8k|            handler.on_error("Invalid type specifier in format string");
 6887|  32.8k|            return begin;
 6888|  32.8k|        }
 6889|  32.8k|        handler.on_type(type);
 6890|  32.8k|        return begin;
 6891|  32.8k|    };
 6892|       |
 6893|  32.8k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6893:9): [True: 31.9k, False: 926]
  |  Branch (6893:28): [True: 2.50k, False: 29.4k]
  ------------------
 6894|  32.8k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6894:9): [True: 266, False: 2.23k]
  |  Branch (6894:36): [True: 232, False: 34]
  ------------------
 6895|    232|        return do_presentation();
 6896|    232|    }
 6897|       |
 6898|  32.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  32.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 32.6k]
  |  |  ------------------
  ------------------
 6899|      0|        handler.on_error("Unexpected end of format string");
 6900|      0|        return begin;
 6901|      0|    }
 6902|       |
 6903|  32.6k|    begin = parse_align(begin, end, handler);
 6904|  32.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  32.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 102, False: 32.5k]
  |  |  ------------------
  ------------------
 6905|    102|        handler.on_error("Unexpected end of format string");
 6906|    102|        return begin;
 6907|    102|    }
 6908|       |
 6909|  32.5k|    begin = parse_width(begin, end, handler);
 6910|  32.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  32.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 98, False: 32.4k]
  |  |  ------------------
  ------------------
 6911|     98|        handler.on_error("Unexpected end of format string");
 6912|     98|        return begin;
 6913|     98|    }
 6914|       |
 6915|  32.4k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6915:9): [True: 4.12k, False: 28.3k]
  ------------------
 6916|  4.12k|        ++begin;
 6917|  4.12k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  4.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 4.08k]
  |  |  ------------------
  ------------------
 6918|     34|            handler.on_error("Unexpected end of format string");
 6919|     34|            return begin;
 6920|     34|        }
 6921|  4.08k|        begin = parse_precision(begin, end, handler);
 6922|  4.08k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  4.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 116, False: 3.97k]
  |  |  ------------------
  ------------------
 6923|    116|            handler.on_error("Unexpected end of format string");
 6924|    116|            return begin;
 6925|    116|        }
 6926|  4.08k|    }
 6927|       |
 6928|  32.3k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6928:9): [True: 536, False: 31.7k]
  ------------------
 6929|    536|        handler.on_localized();
 6930|    536|        ++begin;
 6931|    536|    }
 6932|  32.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  32.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52, False: 32.2k]
  |  |  ------------------
  ------------------
 6933|     52|        handler.on_error("Unexpected end of format string");
 6934|     52|        return begin;
 6935|     52|    }
 6936|       |
 6937|  32.2k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6937:9): [True: 32.2k, False: 0]
  |  Branch (6937:25): [True: 28.1k, False: 4.05k]
  ------------------
 6938|  28.1k|        do_presentation();
 6939|  28.1k|    }
 6940|  32.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  32.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.63k, False: 30.6k]
  |  |  ------------------
  ------------------
 6941|  1.63k|        handler.on_error("Unexpected end of format string");
 6942|  1.63k|        return begin;
 6943|  1.63k|    }
 6944|       |
 6945|  30.6k|    return begin;
 6946|  32.2k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6517|  2.50k|{
 6518|  2.50k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6518:13): [True: 230, False: 2.27k]
  |  Branch (6518:33): [True: 196, False: 34]
  ------------------
 6519|  2.50k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6519:13): [True: 140, False: 2.16k]
  |  Branch (6519:33): [True: 70, False: 70]
  ------------------
 6520|  2.50k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6869|  28.4k|    auto do_presentation = [&]() -> const CharT* {
 6870|  28.4k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6870:13): [True: 2.74k, False: 25.6k]
  ------------------
 6871|  2.74k|            auto set = parse_presentation_set(begin, end, handler);
 6872|  2.74k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  2.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 580, False: 2.16k]
  |  |  ------------------
  ------------------
 6873|       |                // clang-format off
 6874|    580|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|    580|                return begin;
 6877|    580|            }
 6878|  2.16k|            handler.on_character_set_string(set);
 6879|  2.16k|            return begin;
 6880|  2.74k|        }
 6881|  25.6k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6881:13): [True: 21.8k, False: 3.79k]
  ------------------
 6882|  21.8k|            return parse_presentation_regex(begin, end, handler);
 6883|  21.8k|        }
 6884|  3.79k|        presentation_type type = parse_presentation_type(*begin++);
 6885|  3.79k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  3.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 372, False: 3.41k]
  |  |  ------------------
  ------------------
 6886|    372|            handler.on_error("Invalid type specifier in format string");
 6887|    372|            return begin;
 6888|    372|        }
 6889|  3.41k|        handler.on_type(type);
 6890|  3.41k|        return begin;
 6891|  3.79k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6707|  2.74k|{
 6708|  2.74k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.74k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.74k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6709|  2.74k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  2.74k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.74k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6710|       |
 6711|  2.74k|    auto start = begin;
 6712|  2.74k|    ++begin;
 6713|       |
 6714|  2.74k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 2.71k]
  |  |  ------------------
  ------------------
 6715|       |        // clang-format off
 6716|     34|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6717|       |        // clang-format on
 6718|     34|        return {};
 6719|     34|    }
 6720|  2.71k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6720:9): [True: 1.12k, False: 1.58k]
  ------------------
 6721|  1.12k|        handler.on_charset_inverted();
 6722|  1.12k|        ++begin;
 6723|  1.12k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 1.09k]
  |  |  ------------------
  ------------------
 6724|       |            // clang-format off
 6725|     34|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6726|       |            // clang-format on
 6727|     34|            return {};
 6728|     34|        }
 6729|  1.09k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6729:13): [True: 52, False: 1.04k]
  ------------------
 6730|     52|            handler.on_charset_single(char32_t{']'});
 6731|     52|            ++begin;
 6732|     52|        }
 6733|  1.09k|    }
 6734|  1.58k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6734:14): [True: 34, False: 1.55k]
  ------------------
 6735|     34|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6736|     34|    }
 6737|       |
 6738|  20.4k|    while (begin != end) {
  ------------------
  |  Branch (6738:12): [True: 20.0k, False: 314]
  ------------------
 6739|  20.0k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  20.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 164, False: 19.9k]
  |  |  ------------------
  ------------------
 6740|    164|            break;
 6741|    164|        }
 6742|       |
 6743|  19.9k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6743:13): [True: 2.16k, False: 17.7k]
  ------------------
 6744|  2.16k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6745|  2.16k|        }
 6746|       |
 6747|  17.7k|        parse_presentation_set_literal(begin, end, handler);
 6748|  17.7k|    }
 6749|       |
 6750|    478|    SCN_UNLIKELY_ATTR
 6751|    478|    handler.on_error("Invalid [character set] specifier in format string");
 6752|    478|    return {};
 6753|  2.64k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEvRPKT_SE_OT0_:
 6671|  17.7k|{
 6672|  17.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  17.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6673|       |
 6674|  17.7k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6675|  17.7k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  17.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 128, False: 17.6k]
  |  |  ------------------
  ------------------
 6676|    128|        return;
 6677|    128|    }
 6678|       |
 6679|  17.6k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6679:9): [True: 17.5k, False: 88]
  |  Branch (6679:25): [True: 1.66k, False: 15.8k]
  |  Branch (6679:49): [True: 1.62k, False: 34]
  ------------------
 6680|  17.6k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6680:9): [True: 1.57k, False: 52]
  ------------------
 6681|  1.57k|        ++begin;
 6682|       |
 6683|  1.57k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6684|  1.57k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  1.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 1.54k]
  |  |  ------------------
  ------------------
 6685|     34|            return;
 6686|     34|        }
 6687|       |
 6688|  1.54k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  1.54k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 1.50k]
  |  |  ------------------
  ------------------
 6689|       |            // clang-format off
 6690|     34|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6691|       |            // clang-format on
 6692|     34|            return;
 6693|     34|        }
 6694|       |
 6695|  1.50k|        handler.on_charset_range(cp_first, cp_second + 1);
 6696|  1.50k|        return;
 6697|  1.54k|    }
 6698|       |
 6699|  16.0k|    handler.on_charset_single(cp_first);
 6700|  16.0k|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEDiRPKT_SE_OT0_:
 6647|  19.3k|{
 6648|  19.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  19.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6649|       |
 6650|  19.3k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6651|  19.3k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  38.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 19.3k]
  |  |  |  Branch (859:45): [True: 0, False: 19.3k]
  |  |  |  Branch (859:45): [True: 0, False: 19.3k]
  |  |  ------------------
  ------------------
 6652|      0|        handler.on_error("Invalid encoding in format string");
 6653|      0|        return invalid_code_point;
 6654|      0|    }
 6655|       |
 6656|  19.3k|    const auto cp =
 6657|  19.3k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6658|  19.3k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  19.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 162, False: 19.1k]
  |  |  ------------------
  ------------------
 6659|    162|        handler.on_error("Invalid encoding in format string");
 6660|    162|        return invalid_code_point;
 6661|    162|    }
 6662|       |
 6663|  19.1k|    begin += len;
 6664|  19.1k|    return cp;
 6665|  19.3k|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6356|  2.16k|    {
 6357|  2.16k|        m_specs.charset_string_data = fmt.data();
 6358|  2.16k|        m_specs.charset_string_size = fmt.size();
 6359|  2.16k|        on_type(presentation_type::string_set);
 6360|  2.16k|    }
impl.cpp:_ZN3scn2v36detail24parse_presentation_regexIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_RSE_SE_OT0_:
 6759|  21.8k|{
 6760|  21.8k|#if !SCN_DISABLE_REGEX
 6761|  21.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  21.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6762|  21.8k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  924|  21.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6763|       |
 6764|       |    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 6765|       |                  std::is_same_v<CharT, wchar_t>) {
 6766|       |        handler.on_error("Regex backend doesn't support wide strings as input");
 6767|       |        return begin;
 6768|       |    }
 6769|       |
 6770|  21.8k|    auto start = begin;
 6771|  21.8k|    ++begin;
 6772|       |
 6773|  21.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  21.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 21.8k]
  |  |  ------------------
  ------------------
 6774|     34|        handler.on_error("Unexpected end of regex in format string");
 6775|     34|        return begin;
 6776|     34|    }
 6777|       |
 6778|  21.8k|    handler.on_type(presentation_type::regex);
 6779|  1.62M|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6779:12): [True: 1.62M, False: 124]
  ------------------
 6780|  1.62M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6780:13): [True: 28.9k, False: 1.59M]
  ------------------
 6781|  28.9k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (6781:17): [True: 21.7k, False: 7.20k]
  ------------------
 6782|  21.7k|                break;
 6783|  21.7k|            }
 6784|  7.20k|            else {
 6785|  7.20k|                handler.on_type(presentation_type::regex_escaped);
 6786|  7.20k|            }
 6787|  28.9k|        }
 6788|  1.62M|    }
 6789|  21.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  21.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 124, False: 21.7k]
  |  |  ------------------
  ------------------
 6790|    124|        handler.on_error("Unexpected end of regex in format string");
 6791|    124|        return begin;
 6792|    124|    }
 6793|       |
 6794|  21.7k|    auto regex_end = begin;
 6795|  21.7k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 6796|  21.7k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  859|  21.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 21.6k]
  |  |  ------------------
  ------------------
 6797|     34|        handler.on_error("Invalid (empty) regex in format string");
 6798|     34|        return begin;
 6799|     34|    }
 6800|  21.6k|    handler.on_regex_pattern(regex_pattern);
 6801|  21.6k|    ++begin;
 6802|       |
 6803|  21.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  21.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 21.6k]
  |  |  ------------------
  ------------------
 6804|     34|        handler.on_error("Unexpected end of regex in format string");
 6805|     34|        return begin;
 6806|     34|    }
 6807|       |
 6808|  21.6k|    regex_flags flags{regex_flags::none};
 6809|  21.6k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 6810|  21.6k|        {{'m', regex_flags::multiline},
 6811|  21.6k|         {'s', regex_flags::singleline},
 6812|  21.6k|         {'i', regex_flags::nocase},
 6813|  21.6k|         {'n', regex_flags::nocapture}}};
 6814|  24.7k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6814:12): [True: 24.7k, False: 44]
  ------------------
 6815|  24.7k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6815:13): [True: 21.5k, False: 3.22k]
  ------------------
 6816|  21.5k|            break;
 6817|  21.5k|        }
 6818|  3.22k|        bool found_flag = false;
 6819|  9.00k|        for (auto flag : flag_map) {
  ------------------
  |  Branch (6819:24): [True: 9.00k, False: 60]
  ------------------
 6820|  9.00k|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (6820:17): [True: 5.84k, False: 3.16k]
  ------------------
 6821|  5.84k|                continue;
 6822|  5.84k|            }
 6823|  3.16k|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (6823:17): [True: 34, False: 3.12k]
  ------------------
 6824|     34|                handler.on_error("Flag set multiple times in regex");
 6825|     34|                return begin;
 6826|     34|            }
 6827|  3.12k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 6828|  3.12k|            if (*begin == CharT{'s'}) {
  ------------------
  |  Branch (6828:17): [True: 40, False: 3.08k]
  ------------------
 6829|       |                // clang-format off
 6830|     40|                handler.on_error("/s flag for regex isn't supported by regex backend");
 6831|       |                // clang-format on
 6832|     40|            }
 6833|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 6834|       |            if (*begin == CharT{'m'}) {
 6835|       |                // clang-format off
 6836|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 6837|       |                // clang-format on
 6838|       |            }
 6839|       |#endif
 6840|  3.12k|#endif
 6841|  3.12k|            flags |= flag.second;
 6842|  3.12k|            found_flag = true;
 6843|  3.12k|            break;
 6844|  3.16k|        }
 6845|  3.18k|        if (!found_flag) {
  ------------------
  |  Branch (6845:13): [True: 60, False: 3.12k]
  ------------------
 6846|     60|            handler.on_error("Invalid flag in regex");
 6847|     60|            return begin;
 6848|     60|        }
 6849|  3.18k|    }
 6850|  21.5k|    handler.on_regex_flags(flags);
 6851|       |
 6852|  21.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  21.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 44, False: 21.5k]
  |  |  ------------------
  ------------------
 6853|     44|        handler.on_error("Unexpected end of regex in format string");
 6854|     44|        return begin;
 6855|     44|    }
 6856|       |
 6857|  21.5k|    return begin;
 6858|       |#else
 6859|       |    handler.on_error("Regular expression support is disabled");
 6860|       |    return {};
 6861|       |#endif
 6862|  21.5k|}
_ZN3scn2v36detail12specs_setter16on_regex_patternIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6364|  21.6k|    {
 6365|  21.6k|        m_specs.charset_string_data = pattern.data();
 6366|  21.6k|        m_specs.charset_string_size = pattern.size();
 6367|  21.6k|    }
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6465|  3.79k|{
 6466|  3.79k|    switch (type) {
 6467|     88|        case 'b':
  ------------------
  |  Branch (6467:9): [True: 88, False: 3.70k]
  ------------------
 6468|    122|        case 'B':
  ------------------
  |  Branch (6468:9): [True: 34, False: 3.75k]
  ------------------
 6469|    122|            return presentation_type::int_binary;
 6470|    106|        case 'd':
  ------------------
  |  Branch (6470:9): [True: 106, False: 3.68k]
  ------------------
 6471|    106|            return presentation_type::int_decimal;
 6472|    178|        case 'i':
  ------------------
  |  Branch (6472:9): [True: 178, False: 3.61k]
  ------------------
 6473|    178|            return presentation_type::int_generic;
 6474|    124|        case 'u':
  ------------------
  |  Branch (6474:9): [True: 124, False: 3.66k]
  ------------------
 6475|    124|            return presentation_type::int_unsigned_decimal;
 6476|    152|        case 'o':
  ------------------
  |  Branch (6476:9): [True: 152, False: 3.63k]
  ------------------
 6477|    152|            return presentation_type::int_octal;
 6478|    106|        case 'x':
  ------------------
  |  Branch (6478:9): [True: 106, False: 3.68k]
  ------------------
 6479|    158|        case 'X':
  ------------------
  |  Branch (6479:9): [True: 52, False: 3.73k]
  ------------------
 6480|    158|            return presentation_type::int_hex;
 6481|     34|        case 'r':
  ------------------
  |  Branch (6481:9): [True: 34, False: 3.75k]
  ------------------
 6482|     74|        case 'R':
  ------------------
  |  Branch (6482:9): [True: 40, False: 3.75k]
  ------------------
 6483|     74|            return presentation_type::int_arbitrary_base;
 6484|    150|        case 'a':
  ------------------
  |  Branch (6484:9): [True: 150, False: 3.64k]
  ------------------
 6485|    238|        case 'A':
  ------------------
  |  Branch (6485:9): [True: 88, False: 3.70k]
  ------------------
 6486|    238|            return presentation_type::float_hex;
 6487|     70|        case 'e':
  ------------------
  |  Branch (6487:9): [True: 70, False: 3.72k]
  ------------------
 6488|    104|        case 'E':
  ------------------
  |  Branch (6488:9): [True: 34, False: 3.75k]
  ------------------
 6489|    104|            return presentation_type::float_scientific;
 6490|     52|        case 'f':
  ------------------
  |  Branch (6490:9): [True: 52, False: 3.73k]
  ------------------
 6491|    140|        case 'F':
  ------------------
  |  Branch (6491:9): [True: 88, False: 3.70k]
  ------------------
 6492|    140|            return presentation_type::float_fixed;
 6493|     34|        case 'g':
  ------------------
  |  Branch (6493:9): [True: 34, False: 3.75k]
  ------------------
 6494|    104|        case 'G':
  ------------------
  |  Branch (6494:9): [True: 70, False: 3.72k]
  ------------------
 6495|    104|            return presentation_type::float_general;
 6496|  1.16k|        case 's':
  ------------------
  |  Branch (6496:9): [True: 1.16k, False: 2.62k]
  ------------------
 6497|  1.16k|            return presentation_type::string;
 6498|    610|        case 'c':
  ------------------
  |  Branch (6498:9): [True: 610, False: 3.18k]
  ------------------
 6499|    610|            return presentation_type::character;
 6500|     34|        case '?':
  ------------------
  |  Branch (6500:9): [True: 34, False: 3.75k]
  ------------------
 6501|     34|            return presentation_type::escaped_character;
 6502|    106|        case 'p':
  ------------------
  |  Branch (6502:9): [True: 106, False: 3.68k]
  ------------------
 6503|    106|            return presentation_type::pointer;
 6504|      0|        case '[':
  ------------------
  |  Branch (6504:9): [True: 0, False: 3.79k]
  ------------------
 6505|      0|        case '/':
  ------------------
  |  Branch (6505:9): [True: 0, False: 3.79k]
  ------------------
 6506|       |            // Should be handled by parse_presentation_set and
 6507|       |            // parse_presentation_regex
 6508|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6509|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6510|    372|        default:
  ------------------
  |  Branch (6510:9): [True: 372, False: 3.41k]
  ------------------
 6511|    372|            return presentation_type::none;
 6512|  3.79k|    }
 6513|  3.79k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6542|  32.6k|{
 6543|  32.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  32.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  32.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6544|       |
 6545|  32.6k|    auto check_align = [](wchar_t ch) {
 6546|  32.6k|        switch (ch) {
 6547|  32.6k|            case L'<':
 6548|  32.6k|                return align_type::left;
 6549|  32.6k|            case L'>':
 6550|  32.6k|                return align_type::right;
 6551|  32.6k|            case L'^':
 6552|  32.6k|                return align_type::center;
 6553|  32.6k|            default:
 6554|  32.6k|                return align_type::none;
 6555|  32.6k|        }
 6556|  32.6k|    };
 6557|       |
 6558|  32.6k|    auto potential_fill_len = code_point_length(begin, end);
 6559|  32.6k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  65.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 32.6k]
  |  |  |  Branch (859:45): [True: 0, False: 32.6k]
  |  |  |  Branch (859:45): [True: 0, False: 32.6k]
  |  |  ------------------
  ------------------
 6560|  32.6k|                     std::distance(begin, end) < potential_fill_len)) {
 6561|      0|        handler.on_error("Invalid encoding in fill character");
 6562|      0|        return begin;
 6563|      0|    }
 6564|       |
 6565|  32.6k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6566|       |
 6567|  32.6k|    auto potential_fill = std::basic_string_view<CharT>{
 6568|  32.6k|        begin, static_cast<size_t>(potential_fill_len)};
 6569|  32.6k|    const auto begin_before_fill = begin;
 6570|  32.6k|    begin += potential_fill_len;
 6571|       |
 6572|  32.6k|    if (begin == end) {
  ------------------
  |  Branch (6572:9): [True: 926, False: 31.7k]
  ------------------
 6573|    926|        return begin_before_fill;
 6574|    926|    }
 6575|       |
 6576|  31.7k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6577|  31.7k|    const auto begin_after_fill = begin;
 6578|  31.7k|    ++begin;
 6579|       |
 6580|  31.7k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6580:9): [True: 31.7k, False: 0]
  ------------------
 6581|  31.7k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  31.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 31.6k]
  |  |  ------------------
  ------------------
 6582|     42|            handler.on_error("Invalid fill character '{' in format string");
 6583|     42|            return begin;
 6584|     42|        }
 6585|  31.6k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6585:13): [True: 1.57k, False: 30.1k]
  ------------------
 6586|  1.57k|            return begin_before_fill;
 6587|  1.57k|        }
 6588|  31.6k|    }
 6589|       |
 6590|  30.1k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6590:9): [True: 29.2k, False: 888]
  ------------------
 6591|  29.2k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6591:13): [True: 1.52k, False: 27.6k]
  ------------------
 6592|  1.52k|            handler.on_align(potential_align_on_fill);
 6593|  1.52k|            return begin_after_fill;
 6594|  1.52k|        }
 6595|  27.6k|        return begin_before_fill;
 6596|  29.2k|    }
 6597|       |
 6598|    888|    handler.on_fill(potential_fill);
 6599|    888|    handler.on_align(potential_align_after_fill);
 6600|    888|    return begin;
 6601|  30.1k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6524|  32.6k|{
 6525|  32.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  32.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  32.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6526|  32.6k|    if constexpr (sizeof(CharT) != 1) {
 6527|  32.6k|        return 1;
 6528|       |    }
 6529|       |    else {
 6530|       |        const auto lengths =
 6531|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6532|       |            "\3\4";
 6533|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6534|       |        return len;
 6535|       |    }
 6536|  32.6k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6545|  64.3k|    auto check_align = [](wchar_t ch) {
 6546|  64.3k|        switch (ch) {
 6547|    842|            case L'<':
  ------------------
  |  Branch (6547:13): [True: 842, False: 63.5k]
  ------------------
 6548|    842|                return align_type::left;
 6549|    230|            case L'>':
  ------------------
  |  Branch (6549:13): [True: 230, False: 64.1k]
  ------------------
 6550|    230|                return align_type::right;
 6551|  1.76k|            case L'^':
  ------------------
  |  Branch (6551:13): [True: 1.76k, False: 62.6k]
  ------------------
 6552|  1.76k|                return align_type::center;
 6553|  61.5k|            default:
  ------------------
  |  Branch (6553:13): [True: 61.5k, False: 2.83k]
  ------------------
 6554|  61.5k|                return align_type::none;
 6555|  64.3k|        }
 6556|  64.3k|    };
_ZN3scn2v36detail12specs_setter7on_fillIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6277|    888|    {
 6278|    888|        m_specs.fill = fill;
 6279|    888|    }
_ZN3scn2v36detail9fill_typeaSIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6158|    888|    {
 6159|    888|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  924|    888|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    888|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6160|    888|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  924|    888|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    888|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6161|       |        if constexpr (sizeof(CharT) == 1) {
 6162|       |            for (size_t i = 0; i < s.size(); ++i) {
 6163|       |                SCN_GCC_PUSH
 6164|       |                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6165|       |                m_data[i] = s[i];
 6166|       |                SCN_GCC_POP
 6167|       |            }
 6168|       |            m_size = static_cast<unsigned char>(s.size());
 6169|       |        }
 6170|       |        else if constexpr (sizeof(CharT) == 2) {
 6171|       |            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6172|       |            m_data[1] =
 6173|       |                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6174|       |            if (s.size() == 1) {
 6175|       |                return;
 6176|       |            }
 6177|       |            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6178|       |            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6179|       |        }
 6180|    888|        else {
 6181|    888|            const auto front = static_cast<unsigned>(s.front());
 6182|    888|            m_data[0] = static_cast<char>(front);
 6183|    888|            m_data[1] = static_cast<char>(front >> 8);
 6184|    888|            m_data[2] = static_cast<char>(front >> 16);
 6185|    888|            m_data[3] = static_cast<char>(front >> 24);
 6186|    888|        }
 6187|    888|    }
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6607|  32.5k|{
 6608|  32.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  32.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  32.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6609|       |
 6610|  32.5k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6610:9): [True: 14.9k, False: 17.6k]
  |  Branch (6610:33): [True: 11.0k, False: 3.86k]
  ------------------
 6611|  11.0k|        int width = parse_simple_int(begin, end);
 6612|  11.0k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  11.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 11.0k, False: 34]
  |  |  ------------------
  ------------------
 6613|  11.0k|            handler.on_width(width);
 6614|  11.0k|        }
 6615|     34|        else {
 6616|     34|            handler.on_error("Invalid field width");
 6617|     34|            return begin;
 6618|     34|        }
 6619|  11.0k|    }
 6620|  32.5k|    return begin;
 6621|  32.5k|}
impl.cpp:_ZN3scn2v36detail15parse_precisionIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6627|  4.08k|{
 6628|  4.08k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  4.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6629|       |
 6630|  4.08k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6630:9): [True: 4.05k, False: 34]
  |  Branch (6630:33): [True: 3.98k, False: 70]
  ------------------
 6631|  3.98k|        int prec = parse_simple_int(begin, end);
 6632|  3.98k|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  |  858|  3.98k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.98k, False: 0]
  |  |  ------------------
  ------------------
 6633|  3.98k|            handler.on_precision(prec);
 6634|  3.98k|        }
 6635|      0|        else {
 6636|      0|            handler.on_error("Invalid field precision");
 6637|      0|            return begin;
 6638|      0|        }
 6639|  3.98k|    }
 6640|  4.08k|    return begin;
 6641|  4.08k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7137|    536|    {
 7138|    536|        const auto cat = get_category_for_arg_type(m_arg_type);
 7139|    536|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7139:13): [True: 482, False: 54]
  ------------------
 7140|    536|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7140:13): [True: 428, False: 54]
  ------------------
 7141|    536|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7141:13): [True: 374, False: 54]
  ------------------
 7142|    536|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7142:13): [True: 320, False: 54]
  ------------------
 7143|    320|            SCN_UNLIKELY_ATTR
 7144|       |            // clang-format off
 7145|    320|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7146|       |            // clang-format on
 7147|    320|        }
 7148|       |
 7149|    216|        Handler::on_localized();
 7150|    216|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|  30.0k|{
 8428|  30.0k|#define SCN_VISIT(Type)                                         \
 8429|  30.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|  30.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|  30.0k|    }                                                           \
 8432|  30.0k|    else {                                                      \
 8433|  30.0k|        return vis(monostate_val);                              \
 8434|  30.0k|    }
 8435|       |
 8436|  30.0k|    monostate monostate_val{};
 8437|       |
 8438|  30.0k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 30.0k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 30.0k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|  3.36k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 3.36k, False: 26.6k]
  ------------------
 8444|  3.36k|            SCN_VISIT(int);
  ------------------
  |  | 8429|  3.36k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  3.36k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  3.36k|    }                                                           \
  |  | 8432|  3.36k|    else {                                                      \
  |  | 8433|  3.36k|        return vis(monostate_val);                              \
  |  | 8434|  3.36k|    }
  ------------------
 8445|  3.36k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 30.0k]
  ------------------
 8446|  3.36k|            SCN_VISIT(long);
  ------------------
  |  | 8429|  3.36k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  3.36k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  3.36k|    }                                                           \
  |  | 8432|  3.36k|    else {                                                      \
  |  | 8433|  3.36k|        return vis(monostate_val);                              \
  |  | 8434|  3.36k|    }
  ------------------
 8447|  3.36k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 30.0k]
  ------------------
 8448|  3.36k|            SCN_VISIT(long long);
  ------------------
  |  | 8429|  3.36k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  3.36k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  3.36k|    }                                                           \
  |  | 8432|  3.36k|    else {                                                      \
  |  | 8433|  3.36k|        return vis(monostate_val);                              \
  |  | 8434|  3.36k|    }
  ------------------
 8449|  3.36k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 30.0k]
  ------------------
 8450|  3.36k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|  3.36k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  3.36k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  3.36k|    }                                                           \
  |  | 8432|  3.36k|    else {                                                      \
  |  | 8433|  3.36k|        return vis(monostate_val);                              \
  |  | 8434|  3.36k|    }
  ------------------
 8451|  3.36k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 30.0k]
  ------------------
 8452|  3.36k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|  3.36k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  3.36k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  3.36k|    }                                                           \
  |  | 8432|  3.36k|    else {                                                      \
  |  | 8433|  3.36k|        return vis(monostate_val);                              \
  |  | 8434|  3.36k|    }
  ------------------
 8453|  6.73k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 3.36k, False: 26.6k]
  ------------------
 8454|  6.73k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|  6.73k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  6.73k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  6.73k|    }                                                           \
  |  | 8432|  6.73k|    else {                                                      \
  |  | 8433|  6.73k|        return vis(monostate_val);                              \
  |  | 8434|  6.73k|    }
  ------------------
 8455|  6.73k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 30.0k]
  ------------------
 8456|  6.73k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|  6.73k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  6.73k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  6.73k|    }                                                           \
  |  | 8432|  6.73k|    else {                                                      \
  |  | 8433|  6.73k|        return vis(monostate_val);                              \
  |  | 8434|  6.73k|    }
  ------------------
 8457|  6.73k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 30.0k]
  ------------------
 8458|  6.73k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|  6.73k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  6.73k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  6.73k|    }                                                           \
  |  | 8432|  6.73k|    else {                                                      \
  |  | 8433|  6.73k|        return vis(monostate_val);                              \
  |  | 8434|  6.73k|    }
  ------------------
 8459|  10.0k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 3.31k, False: 26.7k]
  ------------------
 8460|  10.0k|            SCN_VISIT(void*);
  ------------------
  |  | 8429|  10.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  10.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  10.0k|    }                                                           \
  |  | 8432|  10.0k|    else {                                                      \
  |  | 8433|  10.0k|        return vis(monostate_val);                              \
  |  | 8434|  10.0k|    }
  ------------------
 8461|  13.4k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 3.36k, False: 26.6k]
  ------------------
 8462|  13.4k|            SCN_VISIT(bool);
  ------------------
  |  | 8429|  13.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  13.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  13.4k|    }                                                           \
  |  | 8432|  13.4k|    else {                                                      \
  |  | 8433|  13.4k|        return vis(monostate_val);                              \
  |  | 8434|  13.4k|    }
  ------------------
 8463|  13.4k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 30.0k]
  ------------------
 8464|  13.4k|            SCN_VISIT(char);
  ------------------
  |  | 8429|  13.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  13.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  13.4k|    }                                                           \
  |  | 8432|  13.4k|    else {                                                      \
  |  | 8433|  13.4k|        return vis(monostate_val);                              \
  |  | 8434|  13.4k|    }
  ------------------
 8465|  16.7k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 3.31k, False: 26.7k]
  ------------------
 8466|  16.7k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|  16.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  16.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  16.7k|    }                                                           \
  |  | 8432|  16.7k|    else {                                                      \
  |  | 8433|  16.7k|        return vis(monostate_val);                              \
  |  | 8434|  16.7k|    }
  ------------------
 8467|  16.7k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 30.0k]
  ------------------
 8468|  16.7k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|  16.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  16.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  16.7k|    }                                                           \
  |  | 8432|  16.7k|    else {                                                      \
  |  | 8433|  16.7k|        return vis(monostate_val);                              \
  |  | 8434|  16.7k|    }
  ------------------
 8469|  16.7k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 30.0k]
  ------------------
 8470|  16.7k|            SCN_VISIT(float);
  ------------------
  |  | 8429|  16.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  16.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  16.7k|    }                                                           \
  |  | 8432|  16.7k|    else {                                                      \
  |  | 8433|  16.7k|        return vis(monostate_val);                              \
  |  | 8434|  16.7k|    }
  ------------------
 8471|  20.0k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 3.36k, False: 26.6k]
  ------------------
 8472|  20.0k|            SCN_VISIT(double);
  ------------------
  |  | 8429|  20.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  20.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  20.0k|    }                                                           \
  |  | 8432|  20.0k|    else {                                                      \
  |  | 8433|  20.0k|        return vis(monostate_val);                              \
  |  | 8434|  20.0k|    }
  ------------------
 8473|  20.0k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 30.0k]
  ------------------
 8474|  20.0k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|  20.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  20.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  20.0k|    }                                                           \
  |  | 8432|  20.0k|    else {                                                      \
  |  | 8433|  20.0k|        return vis(monostate_val);                              \
  |  | 8434|  20.0k|    }
  ------------------
 8475|  20.0k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 30.0k]
  ------------------
 8476|  20.0k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|  20.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  20.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  20.0k|    }                                                           \
  |  | 8432|  20.0k|    else {                                                      \
  |  | 8433|  20.0k|        return vis(monostate_val);                              \
  |  | 8434|  20.0k|    }
  ------------------
 8477|  23.4k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 3.31k, False: 26.7k]
  ------------------
 8478|  23.4k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|  23.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  23.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  23.4k|    }                                                           \
  |  | 8432|  23.4k|    else {                                                      \
  |  | 8433|  23.4k|        return vis(monostate_val);                              \
  |  | 8434|  23.4k|    }
  ------------------
 8479|  26.7k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 3.31k, False: 26.7k]
  ------------------
 8480|  26.7k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|  26.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.7k|    }                                                           \
  |  | 8432|  26.7k|    else {                                                      \
  |  | 8433|  26.7k|        return vis(monostate_val);                              \
  |  | 8434|  26.7k|    }
  ------------------
 8481|  30.0k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 3.31k, False: 26.7k]
  ------------------
 8482|  30.0k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|  30.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  30.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  30.0k|    }                                                           \
  |  | 8432|  30.0k|    else {                                                      \
  |  | 8433|  30.0k|        return vis(monostate_val);                              \
  |  | 8434|  30.0k|    }
  ------------------
 8483|  30.0k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 30.0k]
  ------------------
 8484|  30.0k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|  30.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  30.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  30.0k|    }                                                           \
  |  | 8432|  30.0k|    else {                                                      \
  |  | 8433|  30.0k|        return vis(monostate_val);                              \
  |  | 8434|  30.0k|    }
  ------------------
 8485|  30.0k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 30.0k]
  ------------------
 8486|  30.0k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|  30.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  30.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  30.0k|    }                                                           \
  |  | 8432|  30.0k|    else {                                                      \
  |  | 8433|  30.0k|        return vis(monostate_val);                              \
  |  | 8434|  30.0k|    }
  ------------------
 8487|       |
 8488|  30.0k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 30.0k]
  ------------------
 8489|  30.0k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|  30.0k|            return vis(
 8491|  30.0k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 30.0k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 30.0k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|  30.0k|            SCN_CLANG_POP
 8506|  30.0k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE5beginEv:
 3325|  4.00k|    {
 3326|  4.00k|        return m_iterator;
 3327|  4.00k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISH_vEEOT_:
 1427|  1.00k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.00k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.00k|    {
 1430|  1.00k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  435|  1.00k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.00k|    {
  437|  1.00k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.00k|    {
 1177|  1.00k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE3endEv:
 3329|  2.00k|    {
 3330|  2.00k|        return m_sentinel;
 3331|  2.00k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEEC2ISG_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SG_EEvE4typeELPv0EEESO_SJ_:
 3310|  2.00k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  2.00k|    static_cast<    \
  |  |  929|  2.00k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  2.00k|    static_cast<    \
  |  |  929|  2.00k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  2.00k|    {
 3312|  2.00k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9has_valueEv:
  484|  2.00k|    {
  485|  2.00k|        return m_has_value;
  486|  2.00k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1626|  1.00k|    {
 1627|  1.00k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.00k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.00k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.00k|        return this->get_value();
 1629|  1.00k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9get_valueEv:
  450|  1.00k|    {
  451|  1.00k|        return m_value;
  452|  1.00k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESI_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSO_:
 1836|  1.00k|    {
 1837|  1.00k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.00k|                                            std::forward<F>(f));
 1839|  1.00k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS6_IPKwS8_EENS4_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEE8sentinelILb1EEEEENS4_9eof_errorEEERFNS0_10scan_errorESK_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESM_EEDaOSR_OT0_:
 1322|  1.00k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.00k|    else {
 1333|  1.00k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.00k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.00k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.00k, False: 0]
  |  |  ------------------
  ------------------
 1335|  1.00k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.00k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  1.00k|    }
 1340|  1.00k|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1662|  1.00k|    {
 1663|  1.00k|        return std::move(value());
 1664|  1.00k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1427|  1.00k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.00k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.00k|    {
 1430|  1.00k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  435|  1.00k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.00k|    {
  437|  1.00k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.00k|    {
 1177|  1.00k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEcvbEv:
 1597|  1.00k|    {
 1598|  1.00k|        return has_value();
 1599|  1.00k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.00k|    {
  485|  2.00k|        return m_has_value;
  486|  2.00k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1662|  1.00k|    {
 1663|  1.00k|        return std::move(value());
 1664|  1.00k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1626|  1.00k|    {
 1627|  1.00k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.00k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.00k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.00k|        return this->get_value();
 1629|  1.00k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.00k|    {
  451|  1.00k|        return m_value;
  452|  1.00k|    }

_ZN3scn2v34scanIJwERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  12.1k|{
   89|  12.1k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  12.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  12.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  12.1k|    static_cast<    \
  |  |  929|  12.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  12.1k|    static_cast<    \
  |  |  929|  12.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  12.1k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   109k|{
   44|   109k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   109k|}
_ZN3scn2v34scanIJwENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  126|  12.1k|{
  127|  12.1k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  12.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  12.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  12.1k|    static_cast<    \
  |  |  929|  12.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  12.1k|    static_cast<    \
  |  |  929|  12.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  12.1k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS2_6localeETnPvLPv0EEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   109k|{
   60|   109k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   109k|}
_ZN3scn2v34scanIJiERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  12.1k|{
   89|  12.1k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  12.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  12.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  12.1k|    static_cast<    \
  |  |  929|  12.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  12.1k|    static_cast<    \
  |  |  929|  12.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  12.1k|}
_ZN3scn2v34scanIJiENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  126|  12.1k|{
  127|  12.1k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  12.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  12.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  12.1k|    static_cast<    \
  |  |  929|  12.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  12.1k|    static_cast<    \
  |  |  929|  12.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  12.1k|}
_ZN3scn2v34scanIJjERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  12.1k|{
   89|  12.1k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  12.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  12.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  12.1k|    static_cast<    \
  |  |  929|  12.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  12.1k|    static_cast<    \
  |  |  929|  12.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  12.1k|}
_ZN3scn2v34scanIJjENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  126|  12.1k|{
  127|  12.1k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  12.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  12.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  12.1k|    static_cast<    \
  |  |  929|  12.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  12.1k|    static_cast<    \
  |  |  929|  12.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  12.1k|}
_ZN3scn2v34scanIJdERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  12.1k|{
   89|  12.1k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  12.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  12.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  12.1k|    static_cast<    \
  |  |  929|  12.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  12.1k|    static_cast<    \
  |  |  929|  12.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  12.1k|}
_ZN3scn2v34scanIJdENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  126|  12.1k|{
  127|  12.1k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  12.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  12.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  12.1k|    static_cast<    \
  |  |  929|  12.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  12.1k|    static_cast<    \
  |  |  929|  12.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  12.1k|}
_ZN3scn2v34scanIJbERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  12.1k|{
   89|  12.1k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  12.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  12.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  12.1k|    static_cast<    \
  |  |  929|  12.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  12.1k|    static_cast<    \
  |  |  929|  12.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  12.1k|}
_ZN3scn2v34scanIJbENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  126|  12.1k|{
  127|  12.1k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  12.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  12.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  12.1k|    static_cast<    \
  |  |  929|  12.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  12.1k|    static_cast<    \
  |  |  929|  12.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  12.1k|}
_ZN3scn2v34scanIJPvERNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEEOSA_NS0_24basic_scan_format_stringIwNSL_13type_identityISA_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  12.1k|{
   89|  12.1k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  12.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  12.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  12.1k|    static_cast<    \
  |  |  929|  12.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  12.1k|    static_cast<    \
  |  |  929|  12.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  12.1k|}
_ZN3scn2v34scanIJPvENSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELS2_0ETnPvLS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEERKT0_OSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNS12_IST_E4typeEEEE:
  126|  12.1k|{
  127|  12.1k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  12.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  12.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  12.1k|    static_cast<    \
  |  |  929|  12.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  12.1k|    static_cast<    \
  |  |  929|  12.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  12.1k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIwNS4_IwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISE_EEP8_IO_FILEEESP_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSQ_13type_identityISE_E4typeEJDpNS12_ISW_E4typeEEEE:
   88|  12.1k|{
   89|  12.1k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  12.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  12.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  12.1k|    static_cast<    \
  |  |  929|  12.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  12.1k|    static_cast<    \
  |  |  929|  12.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  12.1k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIwNS4_IwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSJ_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISF_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSS_13type_identityISF_E4typeEJDpNS17_ISY_E4typeEEEE:
  126|  12.1k|{
  127|  12.1k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  12.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  12.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  12.1k|    static_cast<    \
  |  |  929|  12.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  12.1k|    static_cast<    \
  |  |  929|  12.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  12.1k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIwS5_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISD_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIwNSP_13type_identityISD_E4typeEJDpNS11_ISV_E4typeEEEE:
   88|  12.1k|{
   89|  12.1k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  12.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  12.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  12.1k|    static_cast<    \
  |  |  929|  12.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  12.1k|    static_cast<    \
  |  |  929|  12.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  12.1k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIwS5_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSI_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISE_EEP8_IO_FILEEESQ_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIwNSR_13type_identityISE_E4typeEJDpNS16_ISX_E4typeEEEE:
  126|  12.1k|{
  127|  12.1k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  12.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  12.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  12.1k|    static_cast<    \
  |  |  929|  12.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  12.1k|    static_cast<    \
  |  |  929|  12.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  12.1k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEERS6_TnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  12.1k|{
   89|  12.1k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  12.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  12.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  12.1k|    static_cast<    \
  |  |  929|  12.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  12.1k|    static_cast<    \
  |  |  929|  12.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  12.1k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeERS6_TnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  126|  12.1k|{
  127|  12.1k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  12.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  12.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  12.1k|    static_cast<    \
  |  |  929|  12.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  12.1k|    static_cast<    \
  |  |  929|  12.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  12.1k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  652|   164k|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  653|   164k|{
  654|   164k|    static_assert(std::is_same_v<Locale, std::locale>);
  655|   164k|}
_ZNK3scn2v36detail10locale_ref3getINSt3__16localeEEET_v:
  659|    216|{
  660|    216|    static_assert(std::is_same_v<Locale, std::locale>);
  661|    216|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (661:12): [True: 108, False: 108]
  ------------------
  662|    216|                    : std::locale{};
  663|    216|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1221|    884|{
 1222|    884|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1223|    884|                                  m_nan_payload_buffer, value);
 1224|    884|    value = this->setsign(value);
 1225|    884|    return n;
 1226|    884|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1221|    852|{
 1222|    852|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1223|    852|                                  m_nan_payload_buffer, value);
 1224|    852|    value = this->setsign(value);
 1225|    852|    return n;
 1226|    852|}
_ZN3scn2v34impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1461|     22|{
 1462|     22|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|     22|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|     22|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|     22|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1466|       |
 1467|     22|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1467:9): [True: 22, False: 0]
  ------------------
 1468|     22|        SCN_UNLIKELY_ATTR
 1469|     22|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1470|     22|                                     "Invalid integer value");
 1471|     22|    }
 1472|       |
 1473|       |    // Skip leading zeroes
 1474|      0|    auto start = source.data();
 1475|      0|    const auto end = source.data() + source.size();
 1476|      0|    {
 1477|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1477:16): [True: 0, False: 0]
  ------------------
 1478|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1478:17): [True: 0, False: 0]
  ------------------
 1479|      0|                break;
 1480|      0|            }
 1481|      0|        }
 1482|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1483|      0|            value = 0;
 1484|      0|            return ranges::next(source.begin(),
 1485|      0|                                ranges::distance(source.data(), start));
 1486|      0|        }
 1487|      0|    }
 1488|       |
 1489|      0|    if constexpr (std::is_same_v<CharT, char>) {
 1490|      0|        if (base == 10) {
  ------------------
  |  Branch (1490:13): [True: 0, False: 0]
  ------------------
 1491|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1492|      0|                             detail::make_string_view_from_pointers(start, end),
 1493|      0|                             value, sign == sign_type::minus_sign));
 1494|      0|            return ranges::next(source.begin(),
 1495|      0|                                ranges::distance(source.data(), ptr));
 1496|      0|        }
 1497|      0|    }
 1498|       |
 1499|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1500|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1501|      0|                     base, sign == sign_type::minus_sign));
 1502|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1503|      0|}
_ZN3scn2v34impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1461|    892|{
 1462|    892|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    892|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    892|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    892|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    892|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    892|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    892|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    892|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    892|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|    892|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    892|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    892|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1466|       |
 1467|    892|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1467:9): [True: 892, False: 0]
  ------------------
 1468|    892|        SCN_UNLIKELY_ATTR
 1469|    892|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1470|    892|                                     "Invalid integer value");
 1471|    892|    }
 1472|       |
 1473|       |    // Skip leading zeroes
 1474|      0|    auto start = source.data();
 1475|      0|    const auto end = source.data() + source.size();
 1476|      0|    {
 1477|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1477:16): [True: 0, False: 0]
  ------------------
 1478|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1478:17): [True: 0, False: 0]
  ------------------
 1479|      0|                break;
 1480|      0|            }
 1481|      0|        }
 1482|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1483|      0|            value = 0;
 1484|      0|            return ranges::next(source.begin(),
 1485|      0|                                ranges::distance(source.data(), start));
 1486|      0|        }
 1487|      0|    }
 1488|       |
 1489|      0|    if constexpr (std::is_same_v<CharT, char>) {
 1490|      0|        if (base == 10) {
  ------------------
  |  Branch (1490:13): [True: 0, False: 0]
  ------------------
 1491|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1492|      0|                             detail::make_string_view_from_pointers(start, end),
 1493|      0|                             value, sign == sign_type::minus_sign));
 1494|      0|            return ranges::next(source.begin(),
 1495|      0|                                ranges::distance(source.data(), ptr));
 1496|      0|        }
 1497|      0|    }
 1498|       |
 1499|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1500|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1501|      0|                     base, sign == sign_type::minus_sign));
 1502|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1503|      0|}
_ZN3scn2v34impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1461|    874|{
 1462|    874|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    874|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    874|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    874|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    874|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    874|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    874|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    874|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    874|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|    874|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    874|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    874|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1466|       |
 1467|    874|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1467:9): [True: 874, False: 0]
  ------------------
 1468|    874|        SCN_UNLIKELY_ATTR
 1469|    874|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1470|    874|                                     "Invalid integer value");
 1471|    874|    }
 1472|       |
 1473|       |    // Skip leading zeroes
 1474|      0|    auto start = source.data();
 1475|      0|    const auto end = source.data() + source.size();
 1476|      0|    {
 1477|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1477:16): [True: 0, False: 0]
  ------------------
 1478|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1478:17): [True: 0, False: 0]
  ------------------
 1479|      0|                break;
 1480|      0|            }
 1481|      0|        }
 1482|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1483|      0|            value = 0;
 1484|      0|            return ranges::next(source.begin(),
 1485|      0|                                ranges::distance(source.data(), start));
 1486|      0|        }
 1487|      0|    }
 1488|       |
 1489|       |    if constexpr (std::is_same_v<CharT, char>) {
 1490|       |        if (base == 10) {
 1491|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1492|       |                             detail::make_string_view_from_pointers(start, end),
 1493|       |                             value, sign == sign_type::minus_sign));
 1494|       |            return ranges::next(source.begin(),
 1495|       |                                ranges::distance(source.data(), ptr));
 1496|       |        }
 1497|       |    }
 1498|       |
 1499|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1500|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1501|      0|                     base, sign == sign_type::minus_sign));
 1502|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1503|      0|}
_ZN3scn2v34impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1461|    892|{
 1462|    892|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    892|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    892|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    892|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    892|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    892|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    892|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    892|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    892|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|    892|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    892|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    892|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1466|       |
 1467|    892|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1467:9): [True: 892, False: 0]
  ------------------
 1468|    892|        SCN_UNLIKELY_ATTR
 1469|    892|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1470|    892|                                     "Invalid integer value");
 1471|    892|    }
 1472|       |
 1473|       |    // Skip leading zeroes
 1474|      0|    auto start = source.data();
 1475|      0|    const auto end = source.data() + source.size();
 1476|      0|    {
 1477|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1477:16): [True: 0, False: 0]
  ------------------
 1478|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1478:17): [True: 0, False: 0]
  ------------------
 1479|      0|                break;
 1480|      0|            }
 1481|      0|        }
 1482|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1483|      0|            value = 0;
 1484|      0|            return ranges::next(source.begin(),
 1485|      0|                                ranges::distance(source.data(), start));
 1486|      0|        }
 1487|      0|    }
 1488|       |
 1489|      0|    if constexpr (std::is_same_v<CharT, char>) {
 1490|      0|        if (base == 10) {
  ------------------
  |  Branch (1490:13): [True: 0, False: 0]
  ------------------
 1491|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1492|      0|                             detail::make_string_view_from_pointers(start, end),
 1493|      0|                             value, sign == sign_type::minus_sign));
 1494|      0|            return ranges::next(source.begin(),
 1495|      0|                                ranges::distance(source.data(), ptr));
 1496|      0|        }
 1497|      0|    }
 1498|       |
 1499|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1500|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1501|      0|                     base, sign == sign_type::minus_sign));
 1502|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1503|      0|}
_ZN3scn2v34impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1461|    854|{
 1462|    854|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    854|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    854|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    854|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    854|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    854|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    854|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    854|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    854|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|    854|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    854|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    854|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1466|       |
 1467|    854|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1467:9): [True: 854, False: 0]
  ------------------
 1468|    854|        SCN_UNLIKELY_ATTR
 1469|    854|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1470|    854|                                     "Invalid integer value");
 1471|    854|    }
 1472|       |
 1473|       |    // Skip leading zeroes
 1474|      0|    auto start = source.data();
 1475|      0|    const auto end = source.data() + source.size();
 1476|      0|    {
 1477|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1477:16): [True: 0, False: 0]
  ------------------
 1478|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1478:17): [True: 0, False: 0]
  ------------------
 1479|      0|                break;
 1480|      0|            }
 1481|      0|        }
 1482|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1483|      0|            value = 0;
 1484|      0|            return ranges::next(source.begin(),
 1485|      0|                                ranges::distance(source.data(), start));
 1486|      0|        }
 1487|      0|    }
 1488|       |
 1489|       |    if constexpr (std::is_same_v<CharT, char>) {
 1490|       |        if (base == 10) {
 1491|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1492|       |                             detail::make_string_view_from_pointers(start, end),
 1493|       |                             value, sign == sign_type::minus_sign));
 1494|       |            return ranges::next(source.begin(),
 1495|       |                                ranges::distance(source.data(), ptr));
 1496|       |        }
 1497|       |    }
 1498|       |
 1499|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1500|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1501|      0|                     base, sign == sign_type::minus_sign));
 1502|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1503|      0|}
_ZN3scn2v34impl19parse_integer_valueIcmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1461|    874|{
 1462|    874|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    874|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    874|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    874|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    874|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    874|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    874|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    874|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    874|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|    874|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    874|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    874|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1466|       |
 1467|    874|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1467:9): [True: 874, False: 0]
  ------------------
 1468|    874|        SCN_UNLIKELY_ATTR
 1469|    874|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1470|    874|                                     "Invalid integer value");
 1471|    874|    }
 1472|       |
 1473|       |    // Skip leading zeroes
 1474|      0|    auto start = source.data();
 1475|      0|    const auto end = source.data() + source.size();
 1476|      0|    {
 1477|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1477:16): [True: 0, False: 0]
  ------------------
 1478|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1478:17): [True: 0, False: 0]
  ------------------
 1479|      0|                break;
 1480|      0|            }
 1481|      0|        }
 1482|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1483|      0|            value = 0;
 1484|      0|            return ranges::next(source.begin(),
 1485|      0|                                ranges::distance(source.data(), start));
 1486|      0|        }
 1487|      0|    }
 1488|       |
 1489|      0|    if constexpr (std::is_same_v<CharT, char>) {
 1490|      0|        if (base == 10) {
  ------------------
  |  Branch (1490:13): [True: 0, False: 0]
  ------------------
 1491|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1492|      0|                             detail::make_string_view_from_pointers(start, end),
 1493|      0|                             value, sign == sign_type::minus_sign));
 1494|      0|            return ranges::next(source.begin(),
 1495|      0|                                ranges::distance(source.data(), ptr));
 1496|      0|        }
 1497|      0|    }
 1498|       |
 1499|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1500|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1501|      0|                     base, sign == sign_type::minus_sign));
 1502|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1503|      0|}
_ZN3scn2v34impl19parse_integer_valueIwmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1461|    840|{
 1462|    840|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    840|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    840|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    840|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    840|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    840|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    840|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    840|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    840|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|    840|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    840|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    840|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1466|       |
 1467|    840|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1467:9): [True: 840, False: 0]
  ------------------
 1468|    840|        SCN_UNLIKELY_ATTR
 1469|    840|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1470|    840|                                     "Invalid integer value");
 1471|    840|    }
 1472|       |
 1473|       |    // Skip leading zeroes
 1474|      0|    auto start = source.data();
 1475|      0|    const auto end = source.data() + source.size();
 1476|      0|    {
 1477|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1477:16): [True: 0, False: 0]
  ------------------
 1478|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1478:17): [True: 0, False: 0]
  ------------------
 1479|      0|                break;
 1480|      0|            }
 1481|      0|        }
 1482|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1483|      0|            value = 0;
 1484|      0|            return ranges::next(source.begin(),
 1485|      0|                                ranges::distance(source.data(), start));
 1486|      0|        }
 1487|      0|    }
 1488|       |
 1489|       |    if constexpr (std::is_same_v<CharT, char>) {
 1490|       |        if (base == 10) {
 1491|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1492|       |                             detail::make_string_view_from_pointers(start, end),
 1493|       |                             value, sign == sign_type::minus_sign));
 1494|       |            return ranges::next(source.begin(),
 1495|       |                                ranges::distance(source.data(), ptr));
 1496|       |        }
 1497|       |    }
 1498|       |
 1499|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1500|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1501|      0|                     base, sign == sign_type::minus_sign));
 1502|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1503|      0|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2184|  54.6k|{
 2185|  54.6k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2186|  54.6k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2208|   109k|{
 2209|   109k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2210|   109k|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  194|  3.55k|{
  195|  3.55k|    return find_classic_impl(
  196|  3.55k|        source, [](char ch) { return is_ascii_space(ch); },
  197|  3.55k|        [](char32_t cp) { return detail::is_cp_space(cp); });
  198|  3.55k|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  202|  23.9k|{
  203|  23.9k|    return find_classic_impl(
  204|  23.9k|        source, [](char ch) { return !is_ascii_space(ch); },
  205|  23.9k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  206|  23.9k|}
_ZN3scn2v36detail12handle_errorENS0_10scan_errorE:
  673|    224|{
  674|    224|    return e;
  675|    224|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2141|  54.6k|{
 2142|  54.6k|    return vscan_internal(source, format, args);
 2143|  54.6k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2161|   109k|{
 2162|   109k|    return vscan_internal(source, format, args);
 2163|   109k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  118|  3.55k|{
  119|  3.55k|    auto it = source.begin();
  120|       |
  121|  11.8k|    while (it != source.end()) {
  ------------------
  |  Branch (121:12): [True: 9.07k, False: 2.82k]
  ------------------
  122|  9.07k|        auto sv =
  123|  9.07k|            detail::make_string_view_from_iterators<char>(it, source.end())
  124|  9.07k|                .substr(0, 8);
  125|       |
  126|  9.07k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (126:13): [True: 2.73k, False: 6.33k]
  ------------------
  127|  2.73k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  128|  2.73k|            it = detail::make_string_view_iterator(source, tmp_it);
  129|  2.73k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (129:17): [True: 438, False: 2.29k]
  ------------------
  130|    438|                break;
  131|    438|            }
  132|  2.29k|            continue;
  133|  2.73k|        }
  134|       |
  135|  25.0k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (135:28): [True: 19.0k, False: 6.03k]
  ------------------
  136|  19.0k|            auto tmp =
  137|  19.0k|                detail::make_string_view_from_iterators<char>(it, source.end());
  138|  19.0k|            auto res = get_next_code_point(tmp);
  139|  19.0k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (139:17): [True: 300, False: 18.7k]
  ------------------
  140|    300|                return it;
  141|    300|            }
  142|  18.7k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  143|  18.7k|            it = detail::make_string_view_iterator(source, res.iterator);
  144|  18.7k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  18.7k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  145|  18.7k|        }
  146|  6.33k|    }
  147|       |
  148|  3.25k|    return detail::make_string_view_iterator(source, it);
  149|  3.55k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  105|  32.0k|{
  106|  32.0k|    static_assert(sizeof(*source.data()) == 1);
  107|  32.0k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  32.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  32.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  108|  32.0k|    uint64_t word{};
  109|  32.0k|    std::memcpy(&word, source.data(), source.size());
  110|       |
  111|  32.0k|    return has_byte_greater(word, 127) != 0;
  112|  32.0k|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  196|  15.7k|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  197|  19.0k|        [](char32_t cp) { return detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  118|  23.9k|{
  119|  23.9k|    auto it = source.begin();
  120|       |
  121|  29.7k|    while (it != source.end()) {
  ------------------
  |  Branch (121:12): [True: 23.0k, False: 6.72k]
  ------------------
  122|  23.0k|        auto sv =
  123|  23.0k|            detail::make_string_view_from_iterators<char>(it, source.end())
  124|  23.0k|                .substr(0, 8);
  125|       |
  126|  23.0k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (126:13): [True: 10.0k, False: 12.9k]
  ------------------
  127|  10.0k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  128|  10.0k|            it = detail::make_string_view_iterator(source, tmp_it);
  129|  10.0k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (129:17): [True: 8.16k, False: 1.85k]
  ------------------
  130|  8.16k|                break;
  131|  8.16k|            }
  132|  1.85k|            continue;
  133|  10.0k|        }
  134|       |
  135|  24.1k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (135:28): [True: 20.2k, False: 3.87k]
  ------------------
  136|  20.2k|            auto tmp =
  137|  20.2k|                detail::make_string_view_from_iterators<char>(it, source.end());
  138|  20.2k|            auto res = get_next_code_point(tmp);
  139|  20.2k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (139:17): [True: 9.11k, False: 11.1k]
  ------------------
  140|  9.11k|                return it;
  141|  9.11k|            }
  142|  11.1k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  143|  11.1k|            it = detail::make_string_view_iterator(source, res.iterator);
  144|  11.1k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  11.1k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  145|  11.1k|        }
  146|  12.9k|    }
  147|       |
  148|  14.8k|    return detail::make_string_view_iterator(source, it);
  149|  23.9k|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  204|  19.8k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  205|  20.2k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1138|    884|{
 1139|    884|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1139:9): [True: 0, False: 884]
  ------------------
 1140|      0|        value = std::numeric_limits<T>::infinity();
 1141|      0|        return 3;
 1142|      0|    }
 1143|    884|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1143:9): [True: 0, False: 884]
  ------------------
 1144|      0|        value = std::numeric_limits<T>::infinity();
 1145|      0|        return 8;
 1146|      0|    }
 1147|    884|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1147:9): [True: 0, False: 884]
  ------------------
 1148|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1149|      0|        return 3;
 1150|      0|    }
 1151|    884|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1151:9): [True: 0, False: 884]
  ------------------
 1152|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1153|       |
 1154|       |        // TODO: use payload
 1155|       |#if 0
 1156|       |                    {
 1157|       |                        auto reader = integer_reader<CharT>{
 1158|       |                            integer_reader_base::only_unsigned, 0};
 1159|       |                        if (auto r = reader.read_source(
 1160|       |                                detail::tag_type<unsigned long long>{},
 1161|       |                                nan_payload.view());
 1162|       |                            SCN_UNLIKELY(!r)) {
 1163|       |                            return unexpected(r.error());
 1164|       |                        }
 1165|       |
 1166|       |                        unsigned long long payload;
 1167|       |                        if (auto r = reader.parse_value(payload);
 1168|       |                            SCN_UNLIKELY(!r)) {
 1169|       |                            return unexpected(r.error());
 1170|       |                        }
 1171|       |
 1172|       |                        constexpr auto mantissa_payload_len =
 1173|       |                            std::numeric_limits<T>::digits - 2;
 1174|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1175|       |
 1176|       |
 1177|       |                    }
 1178|       |#endif
 1179|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1180|       |
 1181|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1182|      0|    }
 1183|       |
 1184|    884|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|    884|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    884|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1185|    884|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1185:9): [True: 8, False: 876]
  ------------------
 1186|      8|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 0]
  |  |  ------------------
  ------------------
 1187|      8|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1188|      8|                                         "Invalid floating-point digit");
 1189|      8|        }
 1190|      8|    }
 1191|    876|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|    876|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 876, False: 0]
  |  |  ------------------
  ------------------
 1192|    876|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1193|    876|                                     "Invalid floating-point digit");
 1194|    876|    }
 1195|       |
 1196|       |    if constexpr (std::is_same_v<T, long double>) {
 1197|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1198|       |            // If double == long double (true on Windows),
 1199|       |            // use fast_float with double
 1200|       |            double tmp{};
 1201|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1202|       |            value = tmp;
 1203|       |            return ret;
 1204|       |        }
 1205|       |        else {
 1206|       |            // long doubles aren't supported by fast_float ->
 1207|       |            // fall back to from_chars or strtod
 1208|       |            return fast_float_fallback(data, value);
 1209|       |        }
 1210|       |    }
 1211|      0|    else {
 1212|       |        // Default to fast_float
 1213|      0|        return fast_float_impl<CharT, T>{data}(value);
 1214|      0|    }
 1215|      0|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1138|    852|{
 1139|    852|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1139:9): [True: 0, False: 852]
  ------------------
 1140|      0|        value = std::numeric_limits<T>::infinity();
 1141|      0|        return 3;
 1142|      0|    }
 1143|    852|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1143:9): [True: 0, False: 852]
  ------------------
 1144|      0|        value = std::numeric_limits<T>::infinity();
 1145|      0|        return 8;
 1146|      0|    }
 1147|    852|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1147:9): [True: 0, False: 852]
  ------------------
 1148|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1149|      0|        return 3;
 1150|      0|    }
 1151|    852|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1151:9): [True: 0, False: 852]
  ------------------
 1152|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1153|       |
 1154|       |        // TODO: use payload
 1155|       |#if 0
 1156|       |                    {
 1157|       |                        auto reader = integer_reader<CharT>{
 1158|       |                            integer_reader_base::only_unsigned, 0};
 1159|       |                        if (auto r = reader.read_source(
 1160|       |                                detail::tag_type<unsigned long long>{},
 1161|       |                                nan_payload.view());
 1162|       |                            SCN_UNLIKELY(!r)) {
 1163|       |                            return unexpected(r.error());
 1164|       |                        }
 1165|       |
 1166|       |                        unsigned long long payload;
 1167|       |                        if (auto r = reader.parse_value(payload);
 1168|       |                            SCN_UNLIKELY(!r)) {
 1169|       |                            return unexpected(r.error());
 1170|       |                        }
 1171|       |
 1172|       |                        constexpr auto mantissa_payload_len =
 1173|       |                            std::numeric_limits<T>::digits - 2;
 1174|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1175|       |
 1176|       |
 1177|       |                    }
 1178|       |#endif
 1179|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1180|       |
 1181|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1182|      0|    }
 1183|       |
 1184|    852|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|    852|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    852|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1185|    852|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1185:9): [True: 12, False: 840]
  ------------------
 1186|     12|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 0]
  |  |  ------------------
  ------------------
 1187|     12|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1188|     12|                                         "Invalid floating-point digit");
 1189|     12|        }
 1190|     12|    }
 1191|    840|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|    840|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 840, False: 0]
  |  |  ------------------
  ------------------
 1192|    840|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1193|    840|                                     "Invalid floating-point digit");
 1194|    840|    }
 1195|       |
 1196|       |    if constexpr (std::is_same_v<T, long double>) {
 1197|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1198|       |            // If double == long double (true on Windows),
 1199|       |            // use fast_float with double
 1200|       |            double tmp{};
 1201|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1202|       |            value = tmp;
 1203|       |            return ret;
 1204|       |        }
 1205|       |        else {
 1206|       |            // long doubles aren't supported by fast_float ->
 1207|       |            // fall back to from_chars or strtod
 1208|       |            return fast_float_fallback(data, value);
 1209|       |        }
 1210|       |    }
 1211|      0|    else {
 1212|       |        // Default to fast_float
 1213|      0|        return fast_float_impl<CharT, T>{data}(value);
 1214|      0|    }
 1215|      0|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1625|   109k|{
 1626|   109k|    if (format.size() != 2) {
  ------------------
  |  Branch (1626:9): [True: 109k, False: 378]
  ------------------
 1627|   109k|        return false;
 1628|   109k|    }
 1629|    378|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1629:12): [True: 126, False: 252]
  |  Branch (1629:39): [True: 18, False: 108]
  ------------------
 1630|   109k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1900|   109k|        : format_handler_base{argcount},
 1901|   109k|          parse_ctx{format},
 1902|   109k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   109k|    static_cast<    \
  |  |  929|   109k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   109k|    static_cast<    \
  |  |  929|   109k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1903|   109k|    {
 1904|   109k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1721|   328k|    format_handler_base(size_t argcount) : args_count(argcount)
 1722|   328k|    {
 1723|   328k|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|   328k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 328k]
  |  |  ------------------
  ------------------
 1724|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1725|      0|        }
 1726|   328k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1852|   109k|        : contiguous_ctx(source, args, loc)
 1853|   109k|    {
 1854|   109k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2038|   109k|{
 2039|   109k|    const auto beg = handler.get_ctx().begin();
 2040|   109k|    detail::parse_format_string<false>(format, handler);
 2041|   109k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 106k, False: 3.34k]
  |  |  ------------------
  ------------------
 2042|   106k|        return unexpected(handler.error);
 2043|   106k|    }
 2044|  3.34k|    return ranges::distance(beg, handler.get_ctx().begin());
 2045|   109k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2022|   570k|    {
 2023|   570k|        return ctx.get();
 2024|   570k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1857|   570k|    {
 1858|   570k|        return contiguous_ctx;
 1859|   570k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1907|   127k|    {
 1908|   180k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1908:16): [True: 58.2k, False: 122k]
  ------------------
 1909|  58.2k|            auto it = get_ctx().begin();
 1910|  58.2k|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1910:17): [True: 1.05k, False: 57.1k]
  ------------------
 1911|  1.05k|                SCN_UNLIKELY_ATTR
 1912|  1.05k|                return on_error("Unexpected end of source");
 1913|  1.05k|            }
 1914|       |
 1915|  57.1k|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1916|  57.1k|                    detail::make_string_view_from_pointers(begin, end));
 1917|  57.1k|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1917:17): [True: 2.57k, False: 54.5k]
  ------------------
 1918|  2.57k|                SCN_UNLIKELY_ATTR
 1919|  2.57k|                return on_error("Invalid encoding in format string");
 1920|  2.57k|            }
 1921|  54.5k|            else if (is_space) {
  ------------------
  |  Branch (1921:22): [True: 7.33k, False: 47.2k]
  ------------------
 1922|       |                // Skip all whitespace in input
 1923|  7.33k|                get_ctx().advance_to(
 1924|  7.33k|                    impl::read_while_classic_space(get_ctx().range()));
 1925|       |                // And, skip all whitespace in the format string
 1926|  7.33k|                auto begin_it = impl::read_while_classic_space(
 1927|  7.33k|                    detail::make_string_view_from_pointers(
 1928|  7.33k|                        detail::to_address(after_space_it),
 1929|  7.33k|                        detail::to_address(end)));
 1930|       |                // (-1 because of the for loop ++begin)
 1931|  7.33k|                begin = detail::to_address(begin_it) - 1;
 1932|  7.33k|                continue;
 1933|  7.33k|            }
 1934|       |
 1935|  47.2k|            if (*it != *begin) {
  ------------------
  |  Branch (1935:17): [True: 1.10k, False: 46.1k]
  ------------------
 1936|  1.10k|                SCN_UNLIKELY_ATTR
 1937|  1.10k|                return on_error("Unexpected literal character in source");
 1938|  1.10k|            }
 1939|  46.1k|            get_ctx().advance_to(ranges::next(it));
 1940|  46.1k|        }
 1941|   127k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE20on_replacement_fieldEmPKc:
 1972|  5.77k|    {
 1973|  5.77k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1974|  5.77k|        set_arg_as_visited(arg_id);
 1975|       |
 1976|  5.77k|        on_visit_scan_arg(
 1977|  5.77k|            impl::default_arg_reader<context_type>{
 1978|  5.77k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 1979|  5.77k|            arg);
 1980|  5.77k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1681|  70.0k|{
 1682|  70.0k|    auto arg = ctx.arg(id);
 1683|  70.0k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  70.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.38k, False: 68.6k]
  |  |  ------------------
  ------------------
 1684|  1.38k|        handler.on_error("Failed to find argument with ID");
 1685|  1.38k|    }
 1686|  70.0k|    return arg;
 1687|  70.0k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1797|   107k|    {
 1798|   107k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.63k, False: 105k]
  |  |  ------------------
  ------------------
 1799|  2.63k|            on_error("Invalid out-of-range argument ID");
 1800|  2.63k|            return;
 1801|  2.63k|        }
 1802|       |
 1803|   105k|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 110, False: 105k]
  |  |  ------------------
  ------------------
 1804|    110|            return on_error("Argument with this ID has already been scanned");
 1805|    110|        }
 1806|       |
 1807|   105k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|   105k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 105k, False: 0]
  |  |  ------------------
  ------------------
 1808|   105k|            visited_args_lower64 |= (1ull << id);
 1809|   105k|            return;
 1810|   105k|        }
 1811|       |
 1812|      0|        id -= 64;
 1813|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1814|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1782|   105k|    {
 1783|   105k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 105k]
  |  |  ------------------
  ------------------
 1784|      0|            on_error("Invalid out-of-range argument ID");
 1785|      0|            return false;
 1786|      0|        }
 1787|       |
 1788|   105k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|   105k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 105k, False: 0]
  |  |  ------------------
  ------------------
 1789|   105k|            return (visited_args_lower64 >> id) & 1ull;
 1790|   105k|        }
 1791|       |
 1792|      0|        id -= 64;
 1793|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1794|   105k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl18default_arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1956|  5.77k|    {
 1957|  5.77k|        if (!*this || !arg) {
  ------------------
  |  Branch (1957:13): [True: 126, False: 5.65k]
  |  Branch (1957:23): [True: 0, False: 5.65k]
  ------------------
 1958|    126|            SCN_UNLIKELY_ATTR
 1959|    126|            return;
 1960|    126|        }
 1961|       |
 1962|  5.65k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  5.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1963|  5.65k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  5.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.90k, False: 1.74k]
  |  |  ------------------
  ------------------
 1964|  3.90k|            on_error(r.error());
 1965|  3.90k|        }
 1966|  1.74k|        else {
 1967|  1.74k|            get_ctx().advance_to(*r);
 1968|  1.74k|        }
 1969|  5.65k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1766|  90.2k|    {
 1767|  90.2k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|  90.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 90.2k, False: 0]
  |  |  ------------------
  ------------------
 1768|  90.2k|            error = err;
 1769|  90.2k|        }
 1770|  90.2k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1944|  67.4k|    {
 1945|  67.4k|        return parse_ctx.next_arg_id();
 1946|  67.4k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEm:
 1948|  2.71k|    {
 1949|  2.71k|        parse_ctx.check_arg_id(id);
 1950|  2.71k|        return id;
 1951|  2.71k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1985|  64.3k|    {
 1986|  64.3k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1987|  64.3k|        set_arg_as_visited(arg_id);
 1988|       |
 1989|  64.3k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1989:13): [True: 0, False: 64.3k]
  ------------------
 1990|      0|            parse_ctx.advance_to(begin);
 1991|      0|            on_visit_scan_arg(
 1992|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1993|      0|                    parse_ctx, get_custom_ctx()},
 1994|      0|                arg);
 1995|      0|            return parse_ctx.begin();
 1996|      0|        }
 1997|       |
 1998|  64.3k|        auto specs = detail::format_specs{};
 1999|  64.3k|        detail::specs_checker<specs_handler<context_type>> handler{
 2000|  64.3k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2001|  64.3k|            arg.type()};
 2002|       |
 2003|  64.3k|        begin = detail::parse_format_specs(begin, end, handler);
 2004|  64.3k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2004:13): [True: 2.41k, False: 61.8k]
  |  Branch (2004:29): [True: 828, False: 61.0k]
  ------------------
 2005|  3.24k|            SCN_UNLIKELY_ATTR
 2006|  3.24k|            on_error("Missing '}' in format string");
 2007|  3.24k|            return parse_ctx.begin();
 2008|  3.24k|        }
 2009|  61.0k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  61.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 280, False: 60.7k]
  |  |  ------------------
  ------------------
 2010|    280|            return parse_ctx.begin();
 2011|    280|        }
 2012|  60.7k|        parse_ctx.advance_to(begin);
 2013|       |
 2014|  60.7k|        on_visit_scan_arg(
 2015|  60.7k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2016|  60.7k|                                           get_ctx().locale()},
 2017|  60.7k|            arg);
 2018|  60.7k|        return parse_ctx.begin();
 2019|  61.0k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1700|  64.3k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1701|  64.3k|    {
 1702|  64.3k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1956|  60.7k|    {
 1957|  60.7k|        if (!*this || !arg) {
  ------------------
  |  Branch (1957:13): [True: 102, False: 60.6k]
  |  Branch (1957:23): [True: 0, False: 60.6k]
  ------------------
 1958|    102|            SCN_UNLIKELY_ATTR
 1959|    102|            return;
 1960|    102|        }
 1961|       |
 1962|  60.6k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  60.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1963|  60.6k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  60.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 55.2k, False: 5.43k]
  |  |  ------------------
  ------------------
 1964|  55.2k|            on_error(r.error());
 1965|  55.2k|        }
 1966|  5.43k|        else {
 1967|  5.43k|            get_ctx().advance_to(*r);
 1968|  5.43k|        }
 1969|  60.6k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1761|   505k|    {
 1762|   505k|        SCN_UNLIKELY_ATTR
 1763|   505k|        error = scan_error{scan_error::invalid_format_string, msg};
 1764|   505k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1729|   328k|    {
 1730|   328k|        {
 1731|   328k|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1731:45): [True: 0, False: 328k]
  ------------------
 1732|   328k|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1732:35): [True: 0, False: 328k]
  ------------------
 1733|   328k|                                      ? std::numeric_limits<uint64_t>::max()
 1734|   328k|                                      : (1ull << args_count_lower64) - 1;
 1735|       |
 1736|   328k|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1736:17): [True: 223k, False: 105k]
  ------------------
 1737|   223k|                return on_error("Argument list not exhausted");
 1738|   223k|            }
 1739|   328k|        }
 1740|       |
 1741|   105k|        if (args_count < 64) {
  ------------------
  |  Branch (1741:13): [True: 105k, False: 0]
  ------------------
 1742|   105k|            return;
 1743|   105k|        }
 1744|       |
 1745|      0|        auto last_args_count = args_count - 64;
 1746|      0|        for (auto it = visited_args_upper.begin();
 1747|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1747:14): [True: 0, False: 0]
  ------------------
 1748|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1748:17): [True: 0, False: 0]
  ------------------
 1749|      0|                return on_error("Argument list not exhausted");
 1750|      0|            }
 1751|      0|            last_args_count -= 8;
 1752|      0|        }
 1753|       |
 1754|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1755|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1755:13): [True: 0, False: 0]
  ------------------
 1756|      0|            return on_error("Argument list not exhausted");
 1757|      0|        }
 1758|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1777|   328k|    {
 1778|   328k|        return error;
 1779|   328k|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1773|   581k|    {
 1774|   581k|        return static_cast<bool>(error);
 1775|   581k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2053|   109k|{
 2054|   109k|    const auto argcount = args.size();
 2055|   109k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2055:9): [True: 18, False: 109k]
  |  Branch (2055:60): [True: 18, False: 0]
  ------------------
 2056|     18|        auto arg = args.get(0);
 2057|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2058|     18|    }
 2059|       |
 2060|   109k|    auto handler = format_handler<true, CharT>{
 2061|   109k|        ranges::subrange<const CharT*>{source.data(),
 2062|   109k|                                       source.data() + source.size()},
 2063|   109k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   109k|    static_cast<    \
  |  |  929|   109k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   109k|    static_cast<    \
  |  |  929|   109k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2064|   109k|    return vscan_parse_format_string(format, handler);
 2065|   109k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1638|     18|{
 1639|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 1640|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1641|      0|                                     "Argument #0 not found");
 1642|      0|    }
 1643|       |
 1644|     18|    auto reader =
 1645|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1646|     18|            ranges::subrange<const CharT*>{source.data(),
 1647|     18|                                           source.data() + source.size()},
 1648|     18|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1649|     18|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     10|    }                                                  \
  |  |  |  | 3667|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1650|      8|    return ranges::distance(source.data(), it);
 1651|     18|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2053|   218k|{
 2054|   218k|    const auto argcount = args.size();
 2055|   218k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2055:9): [True: 18, False: 218k]
  |  Branch (2055:60): [True: 18, False: 0]
  ------------------
 2056|     18|        auto arg = args.get(0);
 2057|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2058|     18|    }
 2059|       |
 2060|   218k|    auto handler = format_handler<true, CharT>{
 2061|   218k|        ranges::subrange<const CharT*>{source.data(),
 2062|   218k|                                       source.data() + source.size()},
 2063|   218k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   218k|    static_cast<    \
  |  |  929|   218k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   218k|    static_cast<    \
  |  |  929|   218k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2064|   218k|    return vscan_parse_format_string(format, handler);
 2065|   218k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1625|   218k|{
 1626|   218k|    if (format.size() != 2) {
  ------------------
  |  Branch (1626:9): [True: 207k, False: 11.5k]
  ------------------
 1627|   207k|        return false;
 1628|   207k|    }
 1629|  11.5k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1629:12): [True: 126, False: 11.3k]
  |  Branch (1629:39): [True: 18, False: 108]
  ------------------
 1630|   218k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1638|     18|{
 1639|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 1640|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1641|      0|                                     "Argument #0 not found");
 1642|      0|    }
 1643|       |
 1644|     18|    auto reader =
 1645|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1646|     18|            ranges::subrange<const CharT*>{source.data(),
 1647|     18|                                           source.data() + source.size()},
 1648|     18|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1649|     18|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     10|    }                                                  \
  |  |  |  | 3667|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1650|      8|    return ranges::distance(source.data(), it);
 1651|     18|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1900|   218k|        : format_handler_base{argcount},
 1901|   218k|          parse_ctx{format},
 1902|   218k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   218k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   218k|    static_cast<    \
  |  |  929|   218k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   218k|    static_cast<    \
  |  |  929|   218k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1903|   218k|    {
 1904|   218k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1852|   218k|        : contiguous_ctx(source, args, loc)
 1853|   218k|    {
 1854|   218k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2038|   218k|{
 2039|   218k|    const auto beg = handler.get_ctx().begin();
 2040|   218k|    detail::parse_format_string<false>(format, handler);
 2041|   218k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   218k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 217k, False: 1.51k]
  |  |  ------------------
  ------------------
 2042|   217k|        return unexpected(handler.error);
 2043|   217k|    }
 2044|  1.51k|    return ranges::distance(beg, handler.get_ctx().begin());
 2045|   218k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2022|   807k|    {
 2023|   807k|        return ctx.get();
 2024|   807k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1857|   807k|    {
 1858|   807k|        return contiguous_ctx;
 1859|   807k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1907|   114k|    {
 1908|   210k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1908:16): [True: 169k, False: 41.0k]
  ------------------
 1909|   169k|            auto it = get_ctx().begin();
 1910|   169k|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1910:17): [True: 414, False: 169k]
  ------------------
 1911|    414|                SCN_UNLIKELY_ATTR
 1912|    414|                return on_error("Unexpected end of source");
 1913|    414|            }
 1914|       |
 1915|   169k|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1916|   169k|                    detail::make_string_view_from_pointers(begin, end));
 1917|   169k|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1917:17): [True: 72.1k, False: 97.1k]
  ------------------
 1918|  72.1k|                SCN_UNLIKELY_ATTR
 1919|  72.1k|                return on_error("Invalid encoding in format string");
 1920|  72.1k|            }
 1921|  97.1k|            else if (is_space) {
  ------------------
  |  Branch (1921:22): [True: 1.99k, False: 95.1k]
  ------------------
 1922|       |                // Skip all whitespace in input
 1923|  1.99k|                get_ctx().advance_to(
 1924|  1.99k|                    impl::read_while_classic_space(get_ctx().range()));
 1925|       |                // And, skip all whitespace in the format string
 1926|  1.99k|                auto begin_it = impl::read_while_classic_space(
 1927|  1.99k|                    detail::make_string_view_from_pointers(
 1928|  1.99k|                        detail::to_address(after_space_it),
 1929|  1.99k|                        detail::to_address(end)));
 1930|       |                // (-1 because of the for loop ++begin)
 1931|  1.99k|                begin = detail::to_address(begin_it) - 1;
 1932|  1.99k|                continue;
 1933|  1.99k|            }
 1934|       |
 1935|  95.1k|            if (*it != *begin) {
  ------------------
  |  Branch (1935:17): [True: 958, False: 94.1k]
  ------------------
 1936|    958|                SCN_UNLIKELY_ATTR
 1937|    958|                return on_error("Unexpected literal character in source");
 1938|    958|            }
 1939|  94.1k|            get_ctx().advance_to(ranges::next(it));
 1940|  94.1k|        }
 1941|   114k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE20on_replacement_fieldEmPKw:
 1972|  4.90k|    {
 1973|  4.90k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1974|  4.90k|        set_arg_as_visited(arg_id);
 1975|       |
 1976|  4.90k|        on_visit_scan_arg(
 1977|  4.90k|            impl::default_arg_reader<context_type>{
 1978|  4.90k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 1979|  4.90k|            arg);
 1980|  4.90k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1681|  37.7k|{
 1682|  37.7k|    auto arg = ctx.arg(id);
 1683|  37.7k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  37.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.25k, False: 36.5k]
  |  |  ------------------
  ------------------
 1684|  1.25k|        handler.on_error("Failed to find argument with ID");
 1685|  1.25k|    }
 1686|  37.7k|    return arg;
 1687|  37.7k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl18default_arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1956|  4.90k|    {
 1957|  4.90k|        if (!*this || !arg) {
  ------------------
  |  Branch (1957:13): [True: 130, False: 4.77k]
  |  Branch (1957:23): [True: 0, False: 4.77k]
  ------------------
 1958|    130|            SCN_UNLIKELY_ATTR
 1959|    130|            return;
 1960|    130|        }
 1961|       |
 1962|  4.77k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  4.77k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1963|  4.77k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  4.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.48k, False: 1.28k]
  |  |  ------------------
  ------------------
 1964|  3.48k|            on_error(r.error());
 1965|  3.48k|        }
 1966|  1.28k|        else {
 1967|  1.28k|            get_ctx().advance_to(*r);
 1968|  1.28k|        }
 1969|  4.77k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1944|  37.5k|    {
 1945|  37.5k|        return parse_ctx.next_arg_id();
 1946|  37.5k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEm:
 1948|    270|    {
 1949|    270|        parse_ctx.check_arg_id(id);
 1950|    270|        return id;
 1951|    270|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1985|  32.8k|    {
 1986|  32.8k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1987|  32.8k|        set_arg_as_visited(arg_id);
 1988|       |
 1989|  32.8k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1989:13): [True: 0, False: 32.8k]
  ------------------
 1990|      0|            parse_ctx.advance_to(begin);
 1991|      0|            on_visit_scan_arg(
 1992|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1993|      0|                    parse_ctx, get_custom_ctx()},
 1994|      0|                arg);
 1995|      0|            return parse_ctx.begin();
 1996|      0|        }
 1997|       |
 1998|  32.8k|        auto specs = detail::format_specs{};
 1999|  32.8k|        detail::specs_checker<specs_handler<context_type>> handler{
 2000|  32.8k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2001|  32.8k|            arg.type()};
 2002|       |
 2003|  32.8k|        begin = detail::parse_format_specs(begin, end, handler);
 2004|  32.8k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2004:13): [True: 2.03k, False: 30.8k]
  |  Branch (2004:29): [True: 400, False: 30.4k]
  ------------------
 2005|  2.43k|            SCN_UNLIKELY_ATTR
 2006|  2.43k|            on_error("Missing '}' in format string");
 2007|  2.43k|            return parse_ctx.begin();
 2008|  2.43k|        }
 2009|  30.4k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  30.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 304, False: 30.1k]
  |  |  ------------------
  ------------------
 2010|    304|            return parse_ctx.begin();
 2011|    304|        }
 2012|  30.1k|        parse_ctx.advance_to(begin);
 2013|       |
 2014|  30.1k|        on_visit_scan_arg(
 2015|  30.1k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2016|  30.1k|                                           get_ctx().locale()},
 2017|  30.1k|            arg);
 2018|  30.1k|        return parse_ctx.begin();
 2019|  30.4k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1700|  32.8k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1701|  32.8k|    {
 1702|  32.8k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1956|  30.1k|    {
 1957|  30.1k|        if (!*this || !arg) {
  ------------------
  |  Branch (1957:13): [True: 114, False: 30.0k]
  |  Branch (1957:23): [True: 0, False: 30.0k]
  ------------------
 1958|    114|            SCN_UNLIKELY_ATTR
 1959|    114|            return;
 1960|    114|        }
 1961|       |
 1962|  30.0k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  30.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1963|  30.0k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  30.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 27.6k, False: 2.40k]
  |  |  ------------------
  ------------------
 1964|  27.6k|            on_error(r.error());
 1965|  27.6k|        }
 1966|  2.40k|        else {
 1967|  2.40k|            get_ctx().advance_to(*r);
 1968|  2.40k|        }
 1969|  30.0k|    }

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1350|  6.07k|{
 1351|  6.07k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1352|       |
 1353|  6.07k|    if constexpr (sizeof(SourceCharT) == 1) {
 1354|       |        if constexpr (sizeof(DestCharT) == 2) {
 1355|       |            std::u32string tmp;
 1356|       |            transcode_to_string_impl_to32(src, tmp);
 1357|       |            return transcode_to_string_impl_32to16<false>(
 1358|       |                std::u32string_view{tmp}, dest);
 1359|       |        }
 1360|  6.07k|        else if constexpr (sizeof(DestCharT) == 4) {
 1361|  6.07k|            return transcode_to_string_impl_to32(src, dest);
 1362|  6.07k|        }
 1363|       |    }
 1364|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1365|       |        if constexpr (sizeof(DestCharT) == 1) {
 1366|       |            std::u32string tmp;
 1367|       |            transcode_to_string_impl_to32(src, tmp);
 1368|       |            return transcode_to_string_impl_32to8<false>(
 1369|       |                std::u32string_view{tmp}, dest);
 1370|       |        }
 1371|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1372|       |            return trasncode_to_string_impl_to32(src, dest);
 1373|       |        }
 1374|       |    }
 1375|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1376|       |        if constexpr (sizeof(DestCharT) == 1) {
 1377|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1378|       |        }
 1379|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1380|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1381|       |        }
 1382|       |    }
 1383|       |
 1384|  6.07k|    SCN_EXPECT(false);
  ------------------
  |  |  924|  6.07k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.07k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1385|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1386|  6.07k|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1243|  6.07k|{
 1244|  6.07k|    static_assert(sizeof(DestCharT) == 4);
 1245|       |
 1246|  6.07k|    auto it = src.begin();
 1247|  1.03M|    while (it != src.end()) {
  ------------------
  |  Branch (1247:12): [True: 1.02M, False: 6.07k]
  ------------------
 1248|  1.02M|        auto res = get_next_code_point(
 1249|  1.02M|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1250|  1.02M|                                                                 src.end()));
 1251|  1.02M|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 30.0k, False: 998k]
  |  |  ------------------
  ------------------
 1252|  30.0k|            dest.push_back(DestCharT{0xfffd});
 1253|  30.0k|        }
 1254|   998k|        else {
 1255|   998k|            dest.push_back(res.value);
 1256|   998k|        }
 1257|  1.02M|        it = detail::make_string_view_iterator(src, res.iterator);
 1258|  1.02M|    }
 1259|  6.07k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|  1.16M|{
 1169|  1.16M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|  1.16M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.16M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|  1.16M|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|  1.16M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.16M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22.3k, False: 1.13M]
  |  |  ------------------
  ------------------
 1173|  22.3k|        return {get_start_for_next_code_point(input),
 1174|  22.3k|                detail::invalid_code_point};
 1175|  22.3k|    }
 1176|  1.13M|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|  1.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 947, False: 1.13M]
  |  |  ------------------
  ------------------
 1177|    947|        return {input.end(), detail::invalid_code_point};
 1178|    947|    }
 1179|       |
 1180|  1.13M|    return {input.begin() + len,
 1181|  1.13M|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|  1.13M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  22.3k|{
 1155|  22.3k|    auto it = input.begin();
 1156|  80.8k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 79.2k, False: 1.56k]
  ------------------
 1157|  79.2k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 20.7k, False: 58.4k]
  ------------------
 1158|  20.7k|            break;
 1159|  20.7k|        }
 1160|  79.2k|    }
 1161|  22.3k|    return it;
 1162|  22.3k|}
_ZN3scn2v34impl11parse_errorC2ENS2_4codeE:
  807|  45.7k|    constexpr parse_error(code c) : m_code(c)
  808|  45.7k|    {
  809|  45.7k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  45.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  45.7k|    }
_ZN3scn2v34impleqENS1_11parse_errorES2_:
  822|  16.5k|    {
  823|  16.5k|        return a.m_code == b.m_code;
  824|  16.5k|    }
_ZN3scn2v34impl20reader_error_handler8on_errorEPKc:
 2919|  54.5k|    {
 2920|  54.5k|        SCN_UNLIKELY_ATTR
 2921|  54.5k|        m_msg = msg;
 2922|  54.5k|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2924|  90.7k|    {
 2925|  90.7k|        return m_msg == nullptr;
 2926|  90.7k|    }
_ZN3scn2v34impl17float_reader_baseC2Ej:
 3633|  1.02k|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl22nonascii_specs_handler17on_charset_singleEDi:
 4978|   437k|    {
 4979|   437k|        on_charset_range(cp, cp + 1);
 4980|   437k|    }
_ZN3scn2v34impl22nonascii_specs_handler16on_charset_rangeEDiDi:
 4983|   440k|    {
 4984|   440k|        if (end <= 127) {
  ------------------
  |  Branch (4984:13): [True: 233k, False: 206k]
  ------------------
 4985|   233k|            return;
 4986|   233k|        }
 4987|       |
 4988|  35.8M|        for (auto& elem : extra_ranges) {
  ------------------
  |  Branch (4988:25): [True: 35.8M, False: 204k]
  ------------------
 4989|       |            // TODO: check for overlap
 4990|  35.8M|            if (elem.first == end) {
  ------------------
  |  Branch (4990:17): [True: 528, False: 35.8M]
  ------------------
 4991|    528|                elem.first = begin;
 4992|    528|                return;
 4993|    528|            }
 4994|       |
 4995|  35.8M|            if (elem.second == begin) {
  ------------------
  |  Branch (4995:17): [True: 1.84k, False: 35.8M]
  ------------------
 4996|  1.84k|                elem.second = end;
 4997|  1.84k|                return;
 4998|  1.84k|            }
 4999|  35.8M|        }
 5000|       |
 5001|   204k|        extra_ranges.push_back(std::make_pair(begin, end));
 5002|   204k|    }
_ZNK3scn2v34impl22nonascii_specs_handler19on_charset_invertedEv:
 5005|    744|    {
 5006|       |        // no-op
 5007|    744|    }
_ZNK3scn2v34impl22nonascii_specs_handlercvbEv:
 5020|   447k|    {
 5021|   447k|        return static_cast<bool>(err);
 5022|   447k|    }
_ZN3scn2v34impl16bool_reader_baseC2Ej:
 5338|  1.41k|    constexpr bool_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  35.5k|{
  458|  35.5k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  35.5k|        static_cast<unsigned char>(ch))];
  460|  35.5k|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|   311k|{
  469|   311k|    return static_cast<unsigned char>(ch) <= 127;
  470|   311k|}
_ZN3scn2v34impl13is_ascii_charEw:
  473|  1.54k|{
  474|  1.54k|#if WCHAR_MIN < 0
  475|  1.54k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (475:12): [True: 1.53k, False: 12]
  |  Branch (475:23): [True: 1.53k, False: 0]
  ------------------
  476|       |#else
  477|       |    return ch <= 127;
  478|       |#endif
  479|  1.54k|}
_ZN3scn2v34impl13is_ascii_charEDi:
  482|   343k|{
  483|   343k|    return cp <= 127;
  484|   343k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  32.0k|{
  539|  32.0k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  32.0k|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  47.4k|{
  784|  47.4k|    return e != eof_error::good;
  785|  47.4k|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|    174|{
  798|    174|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|    174|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    174|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|    174|    return scan_error{scan_error::end_of_range, "EOF"};
  800|    174|}
_ZN3scn2v34impl20make_eof_parse_errorENS1_9eof_errorE:
  844|    714|{
  845|    714|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|    714|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    714|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|    714|    return parse_error::eof;
  847|    714|}
_ZN3scn2v34impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  3.87k|{
  854|  3.87k|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 3.87k]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  3.87k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 76, False: 3.80k]
  ------------------
  859|     76|        return scan_error{scan_error::end_of_range, "EOF"};
  860|     76|    }
  861|       |
  862|  3.80k|    return scan_error{code, msg};
  863|  3.87k|}
_ZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  3.87k|{
  868|  3.87k|    return [code, msg](parse_error err) {
  869|  3.87k|        return make_scan_error_from_parse_error(err, code, msg);
  870|  3.87k|    };
  871|  3.87k|}
_ZN3scn2v34impl17fast_streq_nocaseEPKcS3_m:
 2208|  3.67k|{
 2209|  3.67k|    unsigned char running_diff{0};
 2210|  12.8k|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2210:24): [True: 9.15k, False: 3.67k]
  ------------------
 2211|  9.15k|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2212|  9.15k|    }
 2213|  3.67k|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2213:12): [True: 0, False: 3.67k]
  |  Branch (2213:33): [True: 0, False: 3.67k]
  ------------------
 2214|  3.67k|}
_ZN3scn2v34impl32calculate_text_width_for_fmt_v10EDi:
 2291|   149k|{
 2292|   149k|    if (cp >= 0x1100 &&
  ------------------
  |  Branch (2292:9): [True: 36.0k, False: 113k]
  ------------------
 2293|   149k|        (cp <= 0x115f ||  // Hangul Jamo init. consonants
  ------------------
  |  Branch (2293:10): [True: 90, False: 35.9k]
  ------------------
 2294|  36.0k|         cp == 0x2329 ||  // LEFT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2294:10): [True: 108, False: 35.8k]
  ------------------
 2295|  36.0k|         cp == 0x232a ||  // RIGHT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2295:10): [True: 72, False: 35.7k]
  ------------------
 2296|       |         // CJK ... Yi except IDEOGRAPHIC HALF FILL SPACE:
 2297|  36.0k|         (cp >= 0x2e80 && cp <= 0xa4cf && cp != 0x303f) ||
  ------------------
  |  Branch (2297:11): [True: 23.5k, False: 12.1k]
  |  Branch (2297:27): [True: 4.49k, False: 19.0k]
  |  Branch (2297:43): [True: 3.66k, False: 834]
  ------------------
 2298|  36.0k|         (cp >= 0xac00 && cp <= 0xd7a3) ||    // Hangul Syllables
  ------------------
  |  Branch (2298:11): [True: 19.0k, False: 13.0k]
  |  Branch (2298:27): [True: 226, False: 18.8k]
  ------------------
 2299|  36.0k|         (cp >= 0xf900 && cp <= 0xfaff) ||    // CJK Compatibility Ideographs
  ------------------
  |  Branch (2299:11): [True: 18.8k, False: 13.0k]
  |  Branch (2299:27): [True: 174, False: 18.6k]
  ------------------
 2300|  36.0k|         (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms
  ------------------
  |  Branch (2300:11): [True: 18.6k, False: 13.0k]
  |  Branch (2300:27): [True: 462, False: 18.1k]
  ------------------
 2301|  36.0k|         (cp >= 0xfe30 && cp <= 0xfe6f) ||    // CJK Compatibility Forms
  ------------------
  |  Branch (2301:11): [True: 18.1k, False: 13.0k]
  |  Branch (2301:27): [True: 82, False: 18.0k]
  ------------------
 2302|  36.0k|         (cp >= 0xff00 && cp <= 0xff60) ||    // Fullwidth Forms
  ------------------
  |  Branch (2302:11): [True: 18.0k, False: 13.0k]
  |  Branch (2302:27): [True: 236, False: 17.8k]
  ------------------
 2303|  36.0k|         (cp >= 0xffe0 && cp <= 0xffe6) ||    // Fullwidth Forms
  ------------------
  |  Branch (2303:11): [True: 17.8k, False: 13.0k]
  |  Branch (2303:27): [True: 80, False: 17.7k]
  ------------------
 2304|  36.0k|         (cp >= 0x20000 && cp <= 0x2fffd) ||  // CJK
  ------------------
  |  Branch (2304:11): [True: 17.3k, False: 13.4k]
  |  Branch (2304:28): [True: 442, False: 16.9k]
  ------------------
 2305|  36.0k|         (cp >= 0x30000 && cp <= 0x3fffd) ||
  ------------------
  |  Branch (2305:11): [True: 16.9k, False: 13.4k]
  |  Branch (2305:28): [True: 506, False: 16.4k]
  ------------------
 2306|       |         // Miscellaneous Symbols and Pictographs + Emoticons:
 2307|  36.0k|         (cp >= 0x1f300 && cp <= 0x1f64f) ||
  ------------------
  |  Branch (2307:11): [True: 16.5k, False: 13.2k]
  |  Branch (2307:28): [True: 78, False: 16.5k]
  ------------------
 2308|       |         // Supplemental Symbols and Pictographs:
 2309|  36.0k|         (cp >= 0x1f900 && cp <= 0x1f9ff))) {
  ------------------
  |  Branch (2309:11): [True: 16.5k, False: 13.2k]
  |  Branch (2309:28): [True: 72, False: 16.4k]
  ------------------
 2310|  6.28k|        return 2;
 2311|  6.28k|    }
 2312|   143k|    return 1;
 2313|   149k|}
_ZN3scn2v34impl26calculate_valid_text_widthEDi:
 2316|   105k|{
 2317|   105k|    return calculate_text_width_for_fmt_v10(cp);
 2318|   105k|}
_ZN3scn2v34impl20calculate_text_widthEDi:
 2331|    208|{
 2332|    208|    return calculate_text_width_for_fmt_v10(cp);
 2333|    208|}
_ZN3scn2v34impl11char_to_intEc:
 3111|  15.4k|{
 3112|  15.4k|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3113|  15.4k|}
_ZN3scn2v34impl11char_to_intEw:
 3115|  7.16k|{
 3116|  7.16k|#if WCHAR_MIN < 0
 3117|  7.16k|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3117:9): [True: 7.16k, False: 0]
  |  Branch (3117:20): [True: 7.16k, False: 0]
  ------------------
 3118|       |#else
 3119|       |    if (ch <= 255) {
 3120|       |#endif
 3121|  7.16k|        return char_to_int(static_cast<char>(ch));
 3122|  7.16k|    }
 3123|      0|    return 255;
 3124|  7.16k|}
_ZN3scn2v34impl16make_regex_flagsENS0_6detail11regex_flagsE:
 4259|  20.4k|{
 4260|  20.4k|    std::regex_constants::syntax_option_type result{};
 4261|  20.4k|    if ((flags & detail::regex_flags::multiline) != detail::regex_flags::none) {
  ------------------
  |  Branch (4261:9): [True: 504, False: 19.9k]
  ------------------
 4262|    504|#if SCN_HAS_STD_REGEX_MULTILINE
 4263|    504|        result |= std::regex_constants::multiline;
 4264|       |#else
 4265|       |        return unexpected_scan_error(
 4266|       |            scan_error::invalid_format_string,
 4267|       |            "/m flag for regex isn't supported by regex backend");
 4268|       |#endif
 4269|    504|    }
 4270|  20.4k|    if ((flags & detail::regex_flags::singleline) !=
  ------------------
  |  Branch (4270:9): [True: 0, False: 20.4k]
  ------------------
 4271|  20.4k|        detail::regex_flags::none) {
 4272|      0|        return unexpected_scan_error(
 4273|      0|            scan_error::invalid_format_string,
 4274|      0|            "/s flag for regex isn't supported by regex backend");
 4275|      0|    }
 4276|  20.4k|    if ((flags & detail::regex_flags::nocase) != detail::regex_flags::none) {
  ------------------
  |  Branch (4276:9): [True: 2.74k, False: 17.6k]
  ------------------
 4277|  2.74k|        result |= std::regex_constants::icase;
 4278|  2.74k|    }
 4279|  20.4k|    if ((flags & detail::regex_flags::nocapture) != detail::regex_flags::none) {
  ------------------
  |  Branch (4279:9): [True: 12, False: 20.3k]
  ------------------
 4280|     12|        result |= std::regex_constants::nosubs;
 4281|     12|    }
 4282|  20.4k|    return result;
 4283|  20.4k|}
_ZN3scn2v34impl27get_unescaped_regex_patternENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4626|  1.84k|{
 4627|  1.84k|    std::string result{pattern};
 4628|  17.5k|    for (size_t n = 0; (n = result.find("\\/", n)) != std::string::npos;) {
  ------------------
  |  Branch (4628:24): [True: 15.6k, False: 1.84k]
  ------------------
 4629|  15.6k|        result.replace(n, 2, "/");
 4630|  15.6k|        ++n;
 4631|  15.6k|    }
 4632|  1.84k|    return result;
 4633|  1.84k|}
_ZN3scn2v34impl27get_unescaped_regex_patternENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEE:
 4635|    192|{
 4636|    192|    std::wstring result{pattern};
 4637|  2.35k|    for (size_t n = 0; (n = result.find(L"\\/", n)) != std::wstring::npos;) {
  ------------------
  |  Branch (4637:24): [True: 2.16k, False: 192]
  ------------------
 4638|  2.16k|        result.replace(n, 2, L"/");
 4639|  2.16k|        ++n;
 4640|  2.16k|    }
 4641|    192|    return result;
 4642|    192|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 5996|  9.04k|{
 5997|  9.04k|    if (specs.width != 0) {
  ------------------
  |  Branch (5997:9): [True: 2.23k, False: 6.81k]
  ------------------
 5998|  2.23k|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (5998:13): [True: 1.10k, False: 1.12k]
  ------------------
 5999|  1.10k|            return {scan_error::invalid_scanned_value,
 6000|  1.10k|                    "Scanned value too narrow, width did not exceed what "
 6001|  1.10k|                    "was specified in the format string"};
 6002|  1.10k|        }
 6003|  2.23k|    }
 6004|  7.94k|    if (specs.precision != 0) {
  ------------------
  |  Branch (6004:9): [True: 2.02k, False: 5.92k]
  ------------------
 6005|  2.02k|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6005:13): [True: 96, False: 1.92k]
  ------------------
 6006|     96|            return {scan_error::invalid_scanned_value,
 6007|     96|                    "Scanned value too wide, width exceeded the specified "
 6008|     96|                    "precision"};
 6009|     96|        }
 6010|  2.02k|    }
 6011|  7.84k|    return {};
 6012|  7.94k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  47.9k|    {
  304|  47.9k|        ranges::advance(x, n);
  305|  47.9k|        return x;
  306|  47.9k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  47.9k|    {
  268|  47.9k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  47.9k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  93.4k|    {
  151|  93.4k|        i += n;
  152|  93.4k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  61.8k|    {
  108|  61.8k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  61.8k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  61.8k|    {
   87|  61.8k|        return s - i;
   88|  61.8k|    }
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  6.50k|    {
  304|  6.50k|        ranges::advance(x, n);
  305|  6.50k|        return x;
  306|  6.50k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  6.50k|    {
  268|  6.50k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  6.50k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  6.50k|    {
  151|  6.50k|        i += n;
  152|  6.50k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  4.26k|    {
  108|  4.26k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  4.26k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  4.26k|    {
   87|  4.26k|        return s - i;
   88|  4.26k|    }
_ZN3scn2v34impl16char_reader_baseIcE11check_specsERKNS0_6detail12format_specsE:
 5612|  6.72k|    {
 5613|  6.72k|        reader_error_handler eh{};
 5614|       |        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
 5615|       |            detail::check_code_point_type_specs(specs, eh);
 5616|       |        }
 5617|  6.72k|        else {
 5618|  6.72k|            detail::check_char_type_specs(specs, eh);
 5619|  6.72k|        }
 5620|  6.72k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  6.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.16k, False: 558]
  |  |  ------------------
  ------------------
 5621|  6.16k|            return {scan_error::invalid_format_string, eh.m_msg};
 5622|  6.16k|        }
 5623|    558|        return {};
 5624|  6.72k|    }
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  28.4k|    {
  763|  28.4k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  28.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  28.4k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  4.21k|        : m_fptr([](storage fn,
  743|  4.21k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.21k|              cvref<T> obj = *get<T>(fn);
  745|  4.21k|              if constexpr (std::is_void_v<R>) {
  746|  4.21k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.21k|              }
  748|  4.21k|              else {
  749|  4.21k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.21k|              }
  751|  4.21k|          }),
  752|  4.21k|          m_storage(std::addressof(f))
  753|  4.21k|    {
  754|  4.21k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  8.06k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  8.06k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  8.06k|              else {
  749|  8.06k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  8.06k|              }
  751|  8.06k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  8.06k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  8.06k|        else if constexpr (std::is_object_v<T>) {
  688|  8.06k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  8.06k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  4.21k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  4.21k|        {
  662|  4.21k|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|   761k|    {
  763|   761k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   761k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   761k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  17.7k|        : m_fptr([](storage fn,
  743|  17.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  17.7k|              cvref<T> obj = *get<T>(fn);
  745|  17.7k|              if constexpr (std::is_void_v<R>) {
  746|  17.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  17.7k|              }
  748|  17.7k|              else {
  749|  17.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  17.7k|              }
  751|  17.7k|          }),
  752|  17.7k|          m_storage(std::addressof(f))
  753|  17.7k|    {
  754|  17.7k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|   348k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   348k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   348k|              else {
  749|   348k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   348k|              }
  751|   348k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|   348k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   348k|        else if constexpr (std::is_object_v<T>) {
  688|   348k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   348k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  17.7k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  17.7k|        {
  662|  17.7k|        }
_ZNK3scn2v34impl16char_reader_baseIcE19skip_ws_before_readEv:
 5607|  1.68k|    {
 5608|  1.68k|        return false;
 5609|  1.68k|    }
_ZZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  3.87k|    return [code, msg](parse_error err) {
  869|  3.87k|        return make_scan_error_from_parse_error(err, code, msg);
  870|  3.87k|    };
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1767|     76|    {
 1768|     76|        auto stdloc = loc.get<std::locale>();
 1769|     76|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1770|     76|        grouping = numpunct.grouping();
 1771|     76|        thousands_sep =
 1772|     76|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1772:13): [True: 0, False: 76]
  ------------------
 1773|     76|        decimal_point = numpunct.decimal_point();
 1774|     76|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1704|    100|{
 1705|    100|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1705:9): [True: 100, False: 0]
  ------------------
 1706|    100|        return std::use_facet<Facet>(stdloc);
 1707|    100|    }
 1708|      0|    stdloc = std::locale(stdloc, new Facet{});
 1709|      0|    return std::use_facet<Facet>(stdloc);
 1710|    100|}
_ZN3scn2v34impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2337|  23.6k|{
 2338|  23.6k|    size_t count{0};
 2339|  23.6k|    for_each_code_point(input, [&count](char32_t cp) {
 2340|  23.6k|        count += calculate_text_width_for_fmt_v10(cp);
 2341|  23.6k|    });
 2342|  23.6k|    return count;
 2343|  23.6k|}
_ZN3scn2v34impl19for_each_code_pointIcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1433|  23.6k|{
 1434|       |    // TODO: Could be optimized by being eager
 1435|  23.6k|    auto it = input.begin();
 1436|  60.2k|    while (it != input.end()) {
  ------------------
  |  Branch (1436:12): [True: 36.5k, False: 23.6k]
  ------------------
 1437|  36.5k|        auto res = get_next_code_point(
 1438|  36.5k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1439|  36.5k|        cb(res.value);
 1440|  36.5k|        it = detail::make_string_view_iterator(input, res.iterator);
 1441|  36.5k|    }
 1442|  23.6k|}
_ZNK3scn2v34impl12function_refIFvDiES3_EclEDi:
  762|  43.9k|    {
  763|  43.9k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  43.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  43.9k|    }
_ZN3scn2v34impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_:
  742|  23.6k|        : m_fptr([](storage fn,
  743|  23.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  23.6k|              cvref<T> obj = *get<T>(fn);
  745|  23.6k|              if constexpr (std::is_void_v<R>) {
  746|  23.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  23.6k|              }
  748|  23.6k|              else {
  749|  23.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  23.6k|              }
  751|  23.6k|          }),
  752|  23.6k|          m_storage(std::addressof(f))
  753|  23.6k|    {
  754|  23.6k|    }
_ZZN3scn2v34impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  743|  36.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  36.5k|              cvref<T> obj = *get<T>(fn);
  745|  36.5k|              if constexpr (std::is_void_v<R>) {
  746|  36.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|       |              else {
  749|       |                  return obj(static_cast<decltype(args)>(args)...);
  750|       |              }
  751|  36.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|  36.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  36.5k|        else if constexpr (std::is_object_v<T>) {
  688|  36.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  36.5k|    }
_ZZN3scn2v34impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2339|  36.5k|    for_each_code_point(input, [&count](char32_t cp) {
 2340|  36.5k|        count += calculate_text_width_for_fmt_v10(cp);
 2341|  36.5k|    });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vIS9_EEvE4typeELPv0EEEPS9_:
  660|  23.6k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  23.6k|        {
  662|  23.6k|        }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1569|  3.91k|    {
 1570|  3.91k|        return m_view;
 1571|  3.91k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1559|  4.12k|    ~contiguous_range_factory() = default;
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E14multibyte_leftEv:
 2409|  3.54k|    {
 2410|  3.54k|        return m_multibyte_left;
 2411|  3.54k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
 2414|   125k|    {
 2415|   125k|        return *m_current;
 2416|   125k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EppEv:
 2423|   135k|    {
 2424|   135k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|   135k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   135k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2425|   135k|        _increment_current();
 2426|   135k|        return *this;
 2427|   135k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E18_increment_currentEv:
 2656|   135k|    {
 2657|   135k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2657:13): [True: 72.0k, False: 63.0k]
  ------------------
 2658|  72.0k|            auto cplen = _get_cp_length_at_current();
 2659|  72.0k|            m_multibyte_left = cplen - 1;
 2660|  72.0k|            m_count -= _get_width_at_current_cp_start(cplen);
 2661|  72.0k|        }
 2662|  63.0k|        else {
 2663|  63.0k|            --m_multibyte_left;
 2664|  63.0k|        }
 2665|       |
 2666|   135k|        ++m_current;
 2667|   135k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E25_get_cp_length_at_currentEv:
 2627|  72.0k|    {
 2628|  72.0k|        return static_cast<difference_type>(
 2629|  72.0k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2630|  72.0k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E30_get_width_at_current_cp_startEl:
 2633|  72.0k|    {
 2634|  72.0k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|  72.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 824, False: 71.2k]
  |  |  ------------------
  ------------------
 2635|    824|            return 0;
 2636|    824|        }
 2637|       |
 2638|  71.2k|        if (cplen == 1) {
  ------------------
  |  Branch (2638:13): [True: 51.6k, False: 19.5k]
  ------------------
 2639|  51.6k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  51.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2640|  51.6k|            auto cp = static_cast<char32_t>(*m_current);
 2641|  51.6k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2642|  51.6k|        }
 2643|       |
 2644|  19.5k|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2645|  19.5k|                                           cplen);
 2646|  19.5k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  19.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 320, False: 19.2k]
  |  |  ------------------
  ------------------
 2647|    320|            return 0;
 2648|    320|        }
 2649|       |
 2650|  19.2k|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2651|  19.2k|        return static_cast<difference_type>(
 2652|  19.2k|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2653|  19.5k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1844|  21.9k|{
 1845|  21.9k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  21.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1846|       |
 1847|  21.9k|    if constexpr (ranges::sized_range<Range>) {
 1848|  21.9k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1849|  21.9k|        if (sz < count) {
  ------------------
  |  Branch (1849:13): [True: 428, False: 21.5k]
  ------------------
 1850|    428|            return unexpected(eof_error::eof);
 1851|    428|        }
 1852|       |
 1853|  21.5k|        return ranges::next(range.begin(), count);
 1854|       |    }
 1855|       |    else {
 1856|       |        auto it = range.begin();
 1857|       |        if (guaranteed_minimum_size(range) >= count) {
 1858|       |            return ranges::next(it, count);
 1859|       |        }
 1860|       |
 1861|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1862|       |            if (it == range.end()) {
 1863|       |                return unexpected(eof_error::eof);
 1864|       |            }
 1865|       |        }
 1866|       |
 1867|       |        return it;
 1868|       |    }
 1869|  21.9k|}
_ZN3scn2v34impl27counted_width_iterator_implneIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2519|  79.2k|    {
 2520|  79.2k|        return !(a == b);
 2521|  79.2k|    }
_ZN3scn2v34impl27counted_width_iterator_impleqIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2511|  86.9k|    {
 2512|  86.9k|        return a.m_current == b.m_current;
 2513|  86.9k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
 2418|  8.42k|    {
 2419|  8.42k|        return *m_current;
 2420|  8.42k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeE:
  267|  1.23k|    {
  268|  1.23k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.23k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISE_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|  1.23k|    {
  161|  1.23k|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|  1.23k|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 0, False: 1.23k]
  ------------------
  164|      0|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 0, False: 0]
  ------------------
  165|      0|                ++i;
  166|      0|            }
  167|      0|        }
  168|  1.23k|        else {
  169|  1.23k|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 1.23k]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|  1.23k|        }
  173|  1.23k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEcE8is_validEv:
 1877|  27.2k|    {
 1878|  27.2k|        return !codepoint.empty();
 1879|  27.2k|    }
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EESB_EEEEDaOT_:
 1670|  1.76k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|       |                  ranges::sized_range<Range>) {
 1674|       |        return string_view_wrapper{SCN_FWD(range)};
 1675|       |    }
 1676|  1.76k|    else {
 1677|  1.76k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|  1.76k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1678|  1.76k|    }
 1679|  1.76k|}
_ZN3scn2v34impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSH_:
 1524|  1.76k|    {
 1525|  1.76k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  1.76k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1526|  1.76k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEvOT_:
 1608|  1.76k|    {
 1609|  1.76k|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|       |                      ranges::sized_range<Range>) {
 1614|       |            m_storage.reset();
 1615|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|       |                                          std::basic_string<CharT>>) {
 1619|       |            m_storage.emplace(SCN_FWD(range));
 1620|       |            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|       |                           ranges::common_range<Range>) {
 1626|       |            auto beg_seg = range.begin().contiguous_segment();
 1627|       |            auto end_seg = range.end().contiguous_segment();
 1628|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1629|       |                             detail::to_address(end_seg.end()))) {
 1630|       |                auto& str = m_storage.emplace();
 1631|       |                str.reserve(range.end().position() - range.begin().position());
 1632|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|       |                m_view = string_view_type{str};
 1634|       |                return;
 1635|       |            }
 1636|       |
 1637|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|       |                                                            end_seg.data());
 1639|       |            m_storage.reset();
 1640|       |        }
 1641|  1.76k|        else {
 1642|  1.76k|            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|  1.76k|            if constexpr (ranges::common_range<Range>) {
 1647|  1.76k|                std::copy(ranges::begin(range), ranges::end(range),
 1648|  1.76k|                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|  1.76k|            m_view = string_view_type{str};
 1657|  1.76k|        }
 1658|  1.76k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EC2ES5_S5_l:
 2369|  21.4k|        : m_current(x), m_end(s), m_count(n)
 2370|  21.4k|    {
 2371|  21.4k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E4baseEv:
 2401|   131k|    {
 2402|   131k|        return m_current;
 2403|   131k|    }
_ZNK3scn2v34impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2820|  9.58k|    {
 2821|  9.58k|        return take_width_view{r, n};
 2822|  9.58k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2ERKS9_l:
 2788|  9.58k|        : m_base(base), m_count(count)
 2789|  9.58k|    {
 2790|  9.58k|    }
_ZN3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEC2ERKS9_:
 2702|  9.58k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl20reader_impl_for_charIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERcNSN_10locale_refE:
 5651|    290|    {
 5652|    290|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5652:13): [True: 258, False: 32]
  ------------------
 5653|    290|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5653:13): [True: 0, False: 32]
  ------------------
 5654|    258|            return read_default(range, value, loc);
 5655|    258|        }
 5656|       |
 5657|     32|        reader_impl_for_int<CharT> reader{};
 5658|     32|        signed char tmp_value{};
 5659|     32|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5660|     32|        value = static_cast<signed char>(value);
 5661|     32|        return ret;
 5662|    290|    }
_ZN3scn2v34impl20reader_impl_for_charIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RcNS0_6detail10locale_refE:
 5633|    258|    {
 5634|    258|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    258|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5635|    258|        if constexpr (std::is_same_v<CharT, char>) {
 5636|    258|            return code_unit_reader<char>{}.read(range, value);
 5637|       |        }
 5638|       |        else {
 5639|       |            SCN_UNUSED(range);
 5640|       |            SCN_EXPECT(false);
 5641|       |            SCN_UNREACHABLE;
 5642|       |        }
 5643|    258|    }
_ZN3scn2v34impl16code_unit_readerIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rc:
 5552|    258|    {
 5553|    258|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3668|    258|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    258|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    258|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    258|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 258]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    258|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    258|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5554|    258|        ch = *range.begin();
 5555|    258|        return it;
 5556|    258|    }
_ZN3scn2v34impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1833|  1.91k|{
 1834|  1.91k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.91k]
  |  |  ------------------
  ------------------
 1835|      0|        return unexpected(e);
 1836|      0|    }
 1837|       |
 1838|  1.91k|    return ranges::next(range.begin());
 1839|  1.91k|}
_ZN3scn2v34impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_9eof_errorET_:
  949|  1.91k|{
  950|  1.91k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.91k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  1.91k|    return eof_error::good;
  954|  1.91k|}
_ZN3scn2v34impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  943|  1.91k|{
  944|  1.91k|    return is_range_eof(r.begin(), r.end());
  945|  1.91k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  927|  29.2k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  29.2k|    {
  937|  29.2k|        return begin == end;
  938|  29.2k|    }
  939|  29.2k|}
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2758|   124k|        {
 2759|   124k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2759:21): [True: 3.54k, False: 120k]
  |  Branch (2759:39): [True: 838, False: 2.70k]
  ------------------
 2760|   124k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2760:20): [True: 1.17k, False: 122k]
  ------------------
 2761|   124k|        }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE3endEv:
 2804|  72.6k|    {
 2805|  72.6k|        return sentinel<true>{m_base.get().end()};
 2806|  72.6k|    }
_ZNK3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvE3getEv:
 2705|   115k|    {
 2706|   115k|        return view;
 2707|   115k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE8sentinelILb1EEC2ES8_:
 2739|  72.6k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  |  928|  72.6k|    static_cast<    \
  |  |  929|  72.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|  1.94k|    {
  296|  1.94k|        ++x;
  297|  1.94k|        return x;
  298|  1.94k|    }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 2798|  21.4k|    {
 2799|  21.4k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2800|  21.4k|                                      m_count};
 2801|  21.4k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEaEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3527|     32|    {
 3528|     32|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 32]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     32|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|     32|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|     32|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 0, False: 32]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|      0|            else {
 3539|      0|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 0]
  ------------------
 3540|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|      0|            }
 3546|      0|        }
 3547|       |
 3548|     32|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 0, False: 32]
  ------------------
 3549|      0|            value = T{0};
 3550|      0|            return std::next(prefix_result.iterator);
 3551|      0|        }
 3552|       |
 3553|     32|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|     32|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 32, False: 0]
  |  |  ------------------
  ------------------
 3554|     32|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     32|    }                                                  \
  |  |  |  | 3667|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|      0|                    parse_integer_digits_without_thsep(
 3556|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|      0|                        prefix_result.parsed_base));
 3558|       |
 3559|      0|            auto buf = make_contiguous_buffer(
 3560|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|      0|                                        prefix_result.parsed_base));
 3564|       |
 3565|      0|            return ranges::next(
 3566|      0|                prefix_result.iterator,
 3567|      0|                ranges::distance(buf.view().begin(), result_it));
 3568|      0|        }
 3569|       |
 3570|      0|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|      0|            localized_number_formatting_options<CharT>{loc};
 3575|      0|#endif
 3576|       |
 3577|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|      0|                parse_integer_digits_with_thsep(
 3579|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|      0|                    prefix_result.parsed_base, locale_options));
 3581|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|      0|            parse_digits_result;
 3583|       |
 3584|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 0, False: 0]
  ------------------
 3585|      0|            if (auto e = check_thsep_grouping(
 3586|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|      0|                    thsep_indices, locale_options.grouping);
 3588|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3589|      0|                return unexpected(e);
 3590|      0|            }
 3591|      0|        }
 3592|       |
 3593|      0|        auto nothsep_source_view =
 3594|      0|            std::basic_string_view<CharT>{nothsep_source};
 3595|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|      0|            nothsep_source_it,
 3597|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|      0|                                prefix_result.parsed_base));
 3599|       |
 3600|      0|        return ranges::next(
 3601|      0|            prefix_result.iterator,
 3602|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|      0|                ranges::ssize(thsep_indices));
 3604|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3314|    828|{
 3315|    828|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3668|    828|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    828|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    828|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    828|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 828]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    828|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    828|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3316|    828|    auto [base_prefix_begin_it, sign] = sign_result;
 3317|       |
 3318|    828|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3319|    828|        parse_integer_base_prefix(
 3320|    828|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3321|       |
 3322|    828|    if (parsed_zero) {
  ------------------
  |  Branch (3322:9): [True: 0, False: 828]
  ------------------
 3323|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3323:13): [True: 0, False: 0]
  |  Branch (3323:13): [True: 0, False: 0]
  ------------------
 3324|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3324:13): [True: 0, False: 0]
  ------------------
 3325|      0|            digits_begin_it = base_prefix_begin_it;
 3326|      0|        }
 3327|      0|        else {
 3328|      0|            parsed_zero = false;
 3329|      0|        }
 3330|      0|    }
 3331|    828|    else {
 3332|    828|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3332:13): [True: 0, False: 828]
  |  Branch (3332:13): [True: 828, False: 0]
  ------------------
 3333|    828|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3333:13): [True: 828, False: 0]
  ------------------
 3334|    828|            digits_begin_it = base_prefix_begin_it;
 3335|    828|        }
 3336|    828|    }
 3337|       |
 3338|    828|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3338:9): [True: 828, False: 0]
  ------------------
 3339|    828|        sign = sign_type::plus_sign;
 3340|    828|    }
 3341|    828|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3342|    828|        digits_begin_it, parsed_base, sign, parsed_zero};
 3343|    828|}
_ZN3scn2v34impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3129|  1.10k|{
 3130|  1.10k|    auto r = read_one_of_code_unit(range, "+-");
 3131|  1.10k|    if (!r) {
  ------------------
  |  Branch (3131:9): [True: 1.10k, False: 0]
  ------------------
 3132|  1.10k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3132:13): [True: 1.10k, False: 0]
  ------------------
 3133|  1.10k|            return std::pair{range.begin(), sign_type::default_sign};
 3134|  1.10k|        }
 3135|      0|        return unexpected(eof_error::eof);
 3136|  1.10k|    }
 3137|       |
 3138|      0|    auto& it = *r;
 3139|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3139:9): [True: 0, False: 0]
  ------------------
 3140|      0|        return std::pair{it, sign_type::minus_sign};
 3141|      0|    }
 3142|      0|    return std::pair{it, sign_type::plus_sign};
 3143|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2260|  1.10k|{
 2261|  1.10k|    auto it = read_code_unit(range);
 2262|  1.10k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.10k]
  |  |  ------------------
  ------------------
 2263|      0|        return unexpected(make_eof_parse_error(it.error()));
 2264|      0|    }
 2265|       |
 2266|  2.20k|    for (auto ch : str) {
  ------------------
  |  Branch (2266:18): [True: 2.20k, False: 1.10k]
  ------------------
 2267|  2.20k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2267:13): [True: 0, False: 2.20k]
  ------------------
 2268|      0|            return *it;
 2269|      0|        }
 2270|  2.20k|    }
 2271|       |
 2272|  1.10k|    return unexpected(parse_error::error);
 2273|  1.10k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3281|    828|{
 3282|    828|    switch (base) {
 3283|     14|        case 2:
  ------------------
  |  Branch (3283:9): [True: 14, False: 814]
  ------------------
 3284|       |            // allow 0b/0B
 3285|     14|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3286|     14|                    false};
 3287|       |
 3288|     14|        case 8: {
  ------------------
  |  Branch (3288:9): [True: 14, False: 814]
  ------------------
 3289|       |            // allow 0o/0O/0
 3290|     14|            bool zero_parsed = false;
 3291|     14|            auto it = apply_opt(
 3292|     14|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3293|     14|            return {it, 8, zero_parsed};
 3294|      0|        }
 3295|       |
 3296|    266|        case 16:
  ------------------
  |  Branch (3296:9): [True: 266, False: 562]
  ------------------
 3297|       |            // allow 0x/0X
 3298|    266|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3299|    266|                    false};
 3300|       |
 3301|     20|        case 0:
  ------------------
  |  Branch (3301:9): [True: 20, False: 808]
  ------------------
 3302|       |            // detect base
 3303|     20|            return parse_integer_base_prefix_for_detection(range);
 3304|       |
 3305|    514|        default:
  ------------------
  |  Branch (3305:9): [True: 514, False: 314]
  ------------------
 3306|       |            // no base prefix allowed
 3307|    514|            return {range.begin(), base, false};
 3308|    828|    }
 3309|    828|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2279|    294|{
 2280|    294|    if (!result) {
  ------------------
  |  Branch (2280:9): [True: 294, False: 0]
  ------------------
 2281|    294|        return range.begin();
 2282|    294|    }
 2283|      0|    return *result;
 2284|    294|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3232|     34|{
 3233|     34|    return read_matching_string_classic_nocase(range, "0b");
 3234|     34|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2219|  1.15k|{
 2220|  1.15k|    using char_type = detail::char_t<Range>;
 2221|       |
 2222|       |    if constexpr (ranges::contiguous_range<Range> &&
 2223|       |                  std::is_same_v<char_type, char>) {
 2224|       |        if (range.size() < str.size()) {
 2225|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2226|       |        }
 2227|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2228|       |            return unexpected(parse_error::error);
 2229|       |        }
 2230|       |        return ranges::next(range.begin(), str.size());
 2231|       |    }
 2232|  1.15k|    else {
 2233|  1.15k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|  1.15k|            if (ch < 'A' || ch > 'Z') {
 2235|  1.15k|                return ch;
 2236|  1.15k|            }
 2237|  1.15k|            return static_cast<char_type>(ch +
 2238|  1.15k|                                          static_cast<char_type>('a' - 'A'));
 2239|  1.15k|        };
 2240|       |
 2241|  1.15k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|  1.15k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.15k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.15k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 182, False: 970]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    182|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    182|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    182|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    182|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    182|    }                                                  \
  |  |  |  | 3667|  1.15k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    970|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2242|    970|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2243|    970|                        .transform_error(make_eof_parse_error));
 2244|       |
 2245|    970|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|    970|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 970, False: 0]
  |  |  ------------------
  ------------------
 2246|    970|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2247|    970|                    return ascii_tolower(a) ==
 2248|    970|                           static_cast<detail::char_t<Range>>(b);
 2249|    970|                }))) {
 2250|    970|            return unexpected(parse_error::error);
 2251|    970|        }
 2252|       |
 2253|      0|        return it;
 2254|    970|    }
 2255|  1.15k|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1844|  3.82k|{
 1845|  3.82k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  3.82k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.82k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1846|       |
 1847|       |    if constexpr (ranges::sized_range<Range>) {
 1848|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1849|       |        if (sz < count) {
 1850|       |            return unexpected(eof_error::eof);
 1851|       |        }
 1852|       |
 1853|       |        return ranges::next(range.begin(), count);
 1854|       |    }
 1855|  3.82k|    else {
 1856|  3.82k|        auto it = range.begin();
 1857|  3.82k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1857:13): [True: 0, False: 3.82k]
  ------------------
 1858|      0|            return ranges::next(it, count);
 1859|      0|        }
 1860|       |
 1861|  14.1k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1861:36): [True: 10.5k, False: 3.61k]
  ------------------
 1862|  10.5k|            if (it == range.end()) {
  ------------------
  |  Branch (1862:17): [True: 210, False: 10.3k]
  ------------------
 1863|    210|                return unexpected(eof_error::eof);
 1864|    210|            }
 1865|  10.5k|        }
 1866|       |
 1867|  3.61k|        return it;
 1868|  3.82k|    }
 1869|  3.82k|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1094|  3.82k|{
 1095|       |    if constexpr (ranges::sized_range<Range>) {
 1096|       |        return r.size();
 1097|       |    }
 1098|       |    else if constexpr (std::is_same_v<
 1099|       |                           ranges::const_iterator_t<Range>,
 1100|       |                           typename detail::basic_scan_buffer<
 1101|       |                               detail::char_t<Range>>::forward_iterator>) {
 1102|       |        if constexpr (ranges::common_range<Range>) {
 1103|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|       |        }
 1105|       |        else {
 1106|       |            if (r.begin().stores_parent()) {
 1107|       |                return static_cast<size_t>(
 1108|       |                    r.begin().parent()->chars_available() -
 1109|       |                    r.begin().position());
 1110|       |            }
 1111|       |            return r.begin().contiguous_segment().size();
 1112|       |        }
 1113|       |    }
 1114|  3.82k|    else {
 1115|  3.82k|        return 0;
 1116|  3.82k|    }
 1117|  3.82k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlcE_clEc:
 2233|    970|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|    970|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2234:17): [True: 42, False: 928]
  |  Branch (2234:29): [True: 928, False: 0]
  ------------------
 2235|    970|                return ch;
 2236|    970|            }
 2237|      0|            return static_cast<char_type>(ch +
 2238|      0|                                          static_cast<char_type>('a' - 'A'));
 2239|    970|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_Rb:
 3246|     34|{
 3247|     34|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3247:14): [True: 0, False: 34]
  ------------------
 3248|      0|        return *r;
 3249|      0|    }
 3250|       |
 3251|     34|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3251:14): [True: 0, False: 34]
  ------------------
 3252|      0|        zero_parsed = true;
 3253|      0|        return *r;
 3254|      0|    }
 3255|       |
 3256|     34|    return unexpected(parse_error::error);
 3257|     34|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NDTcl4implISL_EEE4typeE:
 2134|     34|{
 2135|     34|    auto it = read_code_unit(range);
 2136|     34|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
 2137|      0|        return unexpected(make_eof_parse_error(it.error()));
 2138|      0|    }
 2139|       |
 2140|     34|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 0]
  |  |  ------------------
  ------------------
 2141|     34|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|     34|        return unexpected(parse_error::error);
 2143|     34|    }
 2144|       |
 2145|      0|    return *it;
 2146|     34|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 1833|     34|{
 1834|     34|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
 1835|      0|        return unexpected(e);
 1836|      0|    }
 1837|       |
 1838|     34|    return ranges::next(range.begin());
 1839|     34|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|     34|{
  950|     34|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|     34|    return eof_error::good;
  954|     34|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  943|  27.3k|{
  944|  27.3k|    return is_range_eof(r.begin(), r.end());
  945|  27.3k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3239|    286|{
 3240|    286|    return read_matching_string_classic_nocase(range, "0x");
 3241|    286|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_:
 3262|     20|{
 3263|     20|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3263:14): [True: 0, False: 20]
  ------------------
 3264|      0|        return {*r, 16, false};
 3265|      0|    }
 3266|     20|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3266:14): [True: 0, False: 20]
  ------------------
 3267|      0|        return {*r, 2, false};
 3268|      0|    }
 3269|     20|    {
 3270|     20|        bool zero_parsed{false};
 3271|     20|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3271:18): [True: 0, False: 20]
  ------------------
 3272|      0|            return {*r, 8, zero_parsed};
 3273|      0|        }
 3274|     20|    }
 3275|     20|    return {range.begin(), 10, false};
 3276|     20|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3348|    808|{
 3349|    808|    using char_type = detail::char_t<Range>;
 3350|       |
 3351|       |    if constexpr (ranges::contiguous_range<Range>) {
 3352|       |        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3353|       |            return unexpected_scan_error(
 3354|       |                scan_error::invalid_scanned_value,
 3355|       |                "Failed to parse integer: No digits found");
 3356|       |        }
 3357|       |        return range.end();
 3358|       |    }
 3359|    808|    else {
 3360|    808|        return read_while1_code_unit(range,
 3361|    808|                                     [&](char_type ch) noexcept {
 3362|    808|                                         return char_to_int(ch) < base;
 3363|    808|                                     })
 3364|    808|            .transform_error(map_parse_error_to_scan_error(
 3365|    808|                scan_error::invalid_scanned_value,
 3366|    808|                "Failed to parse integer: No digits found"));
 3367|    808|    }
 3368|    808|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 1983|  1.08k|{
 1984|  1.08k|    auto it = read_while_code_unit(range, pred);
 1985|  1.08k|    if (it == range.begin()) {
  ------------------
  |  Branch (1985:9): [True: 1.08k, False: 0]
  ------------------
 1986|  1.08k|        return unexpected(parse_error::error);
 1987|  1.08k|    }
 1988|      0|    return it;
 1989|  1.08k|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1963|  1.08k|{
 1964|  1.08k|    return read_until_code_unit(range, std::not_fn(pred));
 1965|  1.08k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1944|  1.08k|{
 1945|       |    if constexpr (ranges::common_range<Range>) {
 1946|       |        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|  1.08k|    else {
 1949|  1.08k|        auto first = range.begin();
 1950|  1.08k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1950:16): [True: 1.08k, False: 0]
  ------------------
 1951|  1.08k|            if (pred(*first)) {
  ------------------
  |  Branch (1951:17): [True: 1.08k, False: 0]
  ------------------
 1952|  1.08k|                return first;
 1953|  1.08k|            }
 1954|  1.08k|        }
 1955|      0|        return first;
 1956|  1.08k|    }
 1957|  1.08k|}
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2769|  67.9k|        {
 2770|  67.9k|            return !(y == x);
 2771|  67.9k|        }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_:
  742|    808|        : m_fptr([](storage fn,
  743|    808|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    808|              cvref<T> obj = *get<T>(fn);
  745|    808|              if constexpr (std::is_void_v<R>) {
  746|    808|                  obj(static_cast<decltype(args)>(args)...);
  747|    808|              }
  748|    808|              else {
  749|    808|                  return obj(static_cast<decltype(args)>(args)...);
  750|    808|              }
  751|    808|          }),
  752|    808|          m_storage(std::addressof(f))
  753|    808|    {
  754|    808|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|    808|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    808|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    808|              else {
  749|    808|                  return obj(static_cast<decltype(args)>(args)...);
  750|    808|              }
  751|    808|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlcE_EEDaNS3_7storageE:
  683|    808|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    808|        else if constexpr (std::is_object_v<T>) {
  688|    808|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    808|    }
_ZZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlcE_clEc:
 3361|    808|                                     [&](char_type ch) noexcept {
 3362|    808|                                         return char_to_int(ch) < base;
 3363|    808|                                     })
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_TnPNSN_9enable_ifIXsr3stdE11is_object_vISP_EEvE4typeELPv0EEEPSP_:
  660|    808|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    808|        {
  662|    808|        }
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEENSJ_12basic_stringIT0_NSJ_11char_traitsISS_EENSJ_9allocatorISS_EEEENSR_IcNST_IcEENSV_IcEEEEEEEEESM_iRKNS1_35localized_number_formatting_optionsISS_EE:
 3378|     20|{
 3379|     20|    std::basic_string<CharT> output;
 3380|     20|    std::string thsep_indices;
 3381|     20|    auto it = range.begin();
 3382|     20|    bool digit_matched = false;
 3383|     20|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3383:12): [True: 20, False: 0]
  ------------------
 3384|     20|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3384:13): [True: 0, False: 20]
  ------------------
 3385|      0|            thsep_indices.push_back(
 3386|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3387|      0|        }
 3388|     20|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3388:18): [True: 20, False: 0]
  ------------------
 3389|     20|            break;
 3390|     20|        }
 3391|      0|        else {
 3392|      0|            output.push_back(*it);
 3393|      0|            digit_matched = true;
 3394|      0|        }
 3395|     20|    }
 3396|     20|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20, False: 0]
  |  |  ------------------
  ------------------
 3397|     20|        return unexpected_scan_error(
 3398|     20|            scan_error::invalid_scanned_value,
 3399|     20|            "Failed to parse integer: No digits found");
 3400|     20|    }
 3401|      0|    return std::tuple{it, output, thsep_indices};
 3402|     20|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E5countEv:
 2405|   126k|    {
 2406|   126k|        return m_count;
 2407|   126k|    }
_ZN3scn2v34impl20reader_impl_for_charIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERcNSL_10locale_refE:
 5651|    262|    {
 5652|    262|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5652:13): [True: 240, False: 22]
  ------------------
 5653|    262|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5653:13): [True: 0, False: 22]
  ------------------
 5654|    240|            return read_default(range, value, loc);
 5655|    240|        }
 5656|       |
 5657|     22|        reader_impl_for_int<CharT> reader{};
 5658|     22|        signed char tmp_value{};
 5659|     22|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5660|     22|        value = static_cast<signed char>(value);
 5661|     22|        return ret;
 5662|    262|    }
_ZN3scn2v34impl20reader_impl_for_charIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RcNS0_6detail10locale_refE:
 5633|    870|    {
 5634|    870|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    870|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5635|    870|        if constexpr (std::is_same_v<CharT, char>) {
 5636|    870|            return code_unit_reader<char>{}.read(range, value);
 5637|       |        }
 5638|       |        else {
 5639|       |            SCN_UNUSED(range);
 5640|       |            SCN_EXPECT(false);
 5641|       |            SCN_UNREACHABLE;
 5642|       |        }
 5643|    870|    }
_ZN3scn2v34impl16code_unit_readerIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rc:
 5552|    870|    {
 5553|    870|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3668|    870|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    870|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    870|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    870|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 870]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    870|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    870|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5554|    870|        ch = *range.begin();
 5555|    870|        return it;
 5556|    870|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1833|  6.38k|{
 1834|  6.38k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.38k]
  |  |  ------------------
  ------------------
 1835|      0|        return unexpected(e);
 1836|      0|    }
 1837|       |
 1838|  6.38k|    return ranges::next(range.begin());
 1839|  6.38k|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|  21.4k|{
  950|  21.4k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  21.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 21.4k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  21.4k|    return eof_error::good;
  954|  21.4k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|   344k|{
  944|   344k|    return is_range_eof(r.begin(), r.end());
  945|   344k|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|   402k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   402k|    {
  937|   402k|        return begin == end;
  938|   402k|    }
  939|   402k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  52.5k|    {
  296|  52.5k|        ++x;
  297|  52.5k|        return x;
  298|  52.5k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|     22|    {
 3528|     22|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|     22|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|     22|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 0, False: 22]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|      0|            else {
 3539|      0|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 0]
  ------------------
 3540|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|      0|            }
 3546|      0|        }
 3547|       |
 3548|     22|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 0, False: 22]
  ------------------
 3549|      0|            value = T{0};
 3550|      0|            return std::next(prefix_result.iterator);
 3551|      0|        }
 3552|       |
 3553|     22|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|     22|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 22, False: 0]
  |  |  ------------------
  ------------------
 3554|     22|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|     22|                    parse_integer_digits_without_thsep(
 3556|     22|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|     22|                        prefix_result.parsed_base));
 3558|       |
 3559|     22|            auto buf = make_contiguous_buffer(
 3560|     22|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|     22|            SCN_TRY(result_it,
  ------------------
  |  | 3668|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 22, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     22|    }                                                  \
  |  |  |  | 3667|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|      0|                                        prefix_result.parsed_base));
 3564|       |
 3565|      0|            return ranges::next(
 3566|      0|                prefix_result.iterator,
 3567|      0|                ranges::distance(buf.view().begin(), result_it));
 3568|     22|        }
 3569|       |
 3570|      0|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|      0|            localized_number_formatting_options<CharT>{loc};
 3575|      0|#endif
 3576|       |
 3577|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|      0|                parse_integer_digits_with_thsep(
 3579|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|      0|                    prefix_result.parsed_base, locale_options));
 3581|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|      0|            parse_digits_result;
 3583|       |
 3584|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 0, False: 0]
  ------------------
 3585|      0|            if (auto e = check_thsep_grouping(
 3586|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|      0|                    thsep_indices, locale_options.grouping);
 3588|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3589|      0|                return unexpected(e);
 3590|      0|            }
 3591|      0|        }
 3592|       |
 3593|      0|        auto nothsep_source_view =
 3594|      0|            std::basic_string_view<CharT>{nothsep_source};
 3595|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|      0|            nothsep_source_it,
 3597|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|      0|                                prefix_result.parsed_base));
 3599|       |
 3600|      0|        return ranges::next(
 3601|      0|            prefix_result.iterator,
 3602|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|      0|                ranges::ssize(thsep_indices));
 3604|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3314|  2.72k|{
 3315|  2.72k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3668|  2.72k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.72k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.72k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.72k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  2.72k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.72k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3316|  2.72k|    auto [base_prefix_begin_it, sign] = sign_result;
 3317|       |
 3318|  2.72k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3319|  2.72k|        parse_integer_base_prefix(
 3320|  2.72k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3321|       |
 3322|  2.72k|    if (parsed_zero) {
  ------------------
  |  Branch (3322:9): [True: 0, False: 2.72k]
  ------------------
 3323|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3323:13): [True: 0, False: 0]
  ------------------
 3324|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3324:13): [True: 0, False: 0]
  ------------------
 3325|      0|            digits_begin_it = base_prefix_begin_it;
 3326|      0|        }
 3327|      0|        else {
 3328|      0|            parsed_zero = false;
 3329|      0|        }
 3330|      0|    }
 3331|  2.72k|    else {
 3332|  2.72k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3332:13): [True: 0, False: 2.72k]
  ------------------
 3333|  2.72k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3333:13): [True: 2.72k, False: 0]
  ------------------
 3334|  2.72k|            digits_begin_it = base_prefix_begin_it;
 3335|  2.72k|        }
 3336|  2.72k|    }
 3337|       |
 3338|  2.72k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3338:9): [True: 2.72k, False: 0]
  ------------------
 3339|  2.72k|        sign = sign_type::plus_sign;
 3340|  2.72k|    }
 3341|  2.72k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3342|  2.72k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3343|  2.72k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3129|  3.62k|{
 3130|  3.62k|    auto r = read_one_of_code_unit(range, "+-");
 3131|  3.62k|    if (!r) {
  ------------------
  |  Branch (3131:9): [True: 3.62k, False: 0]
  ------------------
 3132|  3.62k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3132:13): [True: 3.62k, False: 0]
  ------------------
 3133|  3.62k|            return std::pair{range.begin(), sign_type::default_sign};
 3134|  3.62k|        }
 3135|      0|        return unexpected(eof_error::eof);
 3136|  3.62k|    }
 3137|       |
 3138|      0|    auto& it = *r;
 3139|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3139:9): [True: 0, False: 0]
  ------------------
 3140|      0|        return std::pair{it, sign_type::minus_sign};
 3141|      0|    }
 3142|      0|    return std::pair{it, sign_type::plus_sign};
 3143|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2260|  3.62k|{
 2261|  3.62k|    auto it = read_code_unit(range);
 2262|  3.62k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.62k]
  |  |  ------------------
  ------------------
 2263|      0|        return unexpected(make_eof_parse_error(it.error()));
 2264|      0|    }
 2265|       |
 2266|  7.25k|    for (auto ch : str) {
  ------------------
  |  Branch (2266:18): [True: 7.25k, False: 3.62k]
  ------------------
 2267|  7.25k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2267:13): [True: 0, False: 7.25k]
  ------------------
 2268|      0|            return *it;
 2269|      0|        }
 2270|  7.25k|    }
 2271|       |
 2272|  3.62k|    return unexpected(parse_error::error);
 2273|  3.62k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3281|  2.72k|{
 3282|  2.72k|    switch (base) {
 3283|      6|        case 2:
  ------------------
  |  Branch (3283:9): [True: 6, False: 2.71k]
  ------------------
 3284|       |            // allow 0b/0B
 3285|      6|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3286|      6|                    false};
 3287|       |
 3288|     42|        case 8: {
  ------------------
  |  Branch (3288:9): [True: 42, False: 2.67k]
  ------------------
 3289|       |            // allow 0o/0O/0
 3290|     42|            bool zero_parsed = false;
 3291|     42|            auto it = apply_opt(
 3292|     42|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3293|     42|            return {it, 8, zero_parsed};
 3294|      0|        }
 3295|       |
 3296|    886|        case 16:
  ------------------
  |  Branch (3296:9): [True: 886, False: 1.83k]
  ------------------
 3297|       |            // allow 0x/0X
 3298|    886|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3299|    886|                    false};
 3300|       |
 3301|     16|        case 0:
  ------------------
  |  Branch (3301:9): [True: 16, False: 2.70k]
  ------------------
 3302|       |            // detect base
 3303|     16|            return parse_integer_base_prefix_for_detection(range);
 3304|       |
 3305|  1.77k|        default:
  ------------------
  |  Branch (3305:9): [True: 1.77k, False: 950]
  ------------------
 3306|       |            // no base prefix allowed
 3307|  1.77k|            return {range.begin(), base, false};
 3308|  2.72k|    }
 3309|  2.72k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2279|    934|{
 2280|    934|    if (!result) {
  ------------------
  |  Branch (2280:9): [True: 934, False: 0]
  ------------------
 2281|    934|        return range.begin();
 2282|    934|    }
 2283|      0|    return *result;
 2284|    934|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3232|     22|{
 3233|     22|    return read_matching_string_classic_nocase(range, "0b");
 3234|     22|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2219|  3.68k|{
 2220|  3.68k|    using char_type = detail::char_t<Range>;
 2221|       |
 2222|       |    if constexpr (ranges::contiguous_range<Range> &&
 2223|  3.68k|                  std::is_same_v<char_type, char>) {
 2224|  3.68k|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2224:13): [True: 8, False: 3.67k]
  ------------------
 2225|      8|            return unexpected(make_eof_parse_error(eof_error::eof));
 2226|      8|        }
 2227|  3.67k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2227:13): [True: 3.67k, False: 0]
  ------------------
 2228|  3.67k|            return unexpected(parse_error::error);
 2229|  3.67k|        }
 2230|      0|        return ranges::next(range.begin(), str.size());
 2231|       |    }
 2232|       |    else {
 2233|       |        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|       |            if (ch < 'A' || ch > 'Z') {
 2235|       |                return ch;
 2236|       |            }
 2237|       |            return static_cast<char_type>(ch +
 2238|       |                                          static_cast<char_type>('a' - 'A'));
 2239|       |        };
 2240|       |
 2241|       |        SCN_TRY(it, read_exactly_n_code_units(
 2242|       |                        range, static_cast<std::ptrdiff_t>(str.size()))
 2243|       |                        .transform_error(make_eof_parse_error));
 2244|       |
 2245|       |        if (SCN_UNLIKELY(!std::equal(
 2246|       |                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2247|       |                    return ascii_tolower(a) ==
 2248|       |                           static_cast<detail::char_t<Range>>(b);
 2249|       |                }))) {
 2250|       |            return unexpected(parse_error::error);
 2251|       |        }
 2252|       |
 2253|       |        return it;
 2254|       |    }
 2255|  3.68k|}
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3246|     58|{
 3247|     58|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3247:14): [True: 0, False: 58]
  ------------------
 3248|      0|        return *r;
 3249|      0|    }
 3250|       |
 3251|     58|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3251:14): [True: 0, False: 58]
  ------------------
 3252|      0|        zero_parsed = true;
 3253|      0|        return *r;
 3254|      0|    }
 3255|       |
 3256|     58|    return unexpected(parse_error::error);
 3257|     58|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2134|  1.88k|{
 2135|  1.88k|    auto it = read_code_unit(range);
 2136|  1.88k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.88k]
  |  |  ------------------
  ------------------
 2137|      0|        return unexpected(make_eof_parse_error(it.error()));
 2138|      0|    }
 2139|       |
 2140|  1.88k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  1.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.88k, False: 0]
  |  |  ------------------
  ------------------
 2141|  1.88k|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|  1.88k|        return unexpected(parse_error::error);
 2143|  1.88k|    }
 2144|       |
 2145|      0|    return *it;
 2146|  1.88k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3239|    902|{
 3240|    902|    return read_matching_string_classic_nocase(range, "0x");
 3241|    902|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3262|     16|{
 3263|     16|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3263:14): [True: 0, False: 16]
  ------------------
 3264|      0|        return {*r, 16, false};
 3265|      0|    }
 3266|     16|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3266:14): [True: 0, False: 16]
  ------------------
 3267|      0|        return {*r, 2, false};
 3268|      0|    }
 3269|     16|    {
 3270|     16|        bool zero_parsed{false};
 3271|     16|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3271:18): [True: 0, False: 16]
  ------------------
 3272|      0|            return {*r, 8, zero_parsed};
 3273|      0|        }
 3274|     16|    }
 3275|     16|    return {range.begin(), 10, false};
 3276|     16|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3348|  2.68k|{
 3349|  2.68k|    using char_type = detail::char_t<Range>;
 3350|       |
 3351|  2.68k|    if constexpr (ranges::contiguous_range<Range>) {
 3352|  2.68k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.68k]
  |  |  ------------------
  ------------------
 3353|      0|            return unexpected_scan_error(
 3354|      0|                scan_error::invalid_scanned_value,
 3355|      0|                "Failed to parse integer: No digits found");
 3356|      0|        }
 3357|  2.68k|        return range.end();
 3358|       |    }
 3359|       |    else {
 3360|       |        return read_while1_code_unit(range,
 3361|       |                                     [&](char_type ch) noexcept {
 3362|       |                                         return char_to_int(ch) < base;
 3363|       |                                     })
 3364|       |            .transform_error(map_parse_error_to_scan_error(
 3365|       |                scan_error::invalid_scanned_value,
 3366|       |                "Failed to parse integer: No digits found"));
 3367|       |    }
 3368|  2.68k|}
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3378|     40|{
 3379|     40|    std::basic_string<CharT> output;
 3380|     40|    std::string thsep_indices;
 3381|     40|    auto it = range.begin();
 3382|     40|    bool digit_matched = false;
 3383|     40|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3383:12): [True: 40, False: 0]
  ------------------
 3384|     40|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3384:13): [True: 0, False: 40]
  ------------------
 3385|      0|            thsep_indices.push_back(
 3386|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3387|      0|        }
 3388|     40|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3388:18): [True: 40, False: 0]
  ------------------
 3389|     40|            break;
 3390|     40|        }
 3391|      0|        else {
 3392|      0|            output.push_back(*it);
 3393|      0|            digit_matched = true;
 3394|      0|        }
 3395|     40|    }
 3396|     40|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     40|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40, False: 0]
  |  |  ------------------
  ------------------
 3397|     40|        return unexpected_scan_error(
 3398|     40|            scan_error::invalid_scanned_value,
 3399|     40|            "Failed to parse integer: No digits found");
 3400|     40|    }
 3401|      0|    return std::tuple{it, output, thsep_indices};
 3402|     40|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1670|  14.0k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|  14.0k|                  ranges::sized_range<Range>) {
 1674|  14.0k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1675|       |    }
 1676|       |    else {
 1677|       |        return contiguous_range_factory{SCN_FWD(range)};
 1678|       |    }
 1679|  14.0k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1476|  14.0k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1477|  14.0k|    {
 1478|  14.0k|    }
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1490|  66.3k|    {
 1491|  66.3k|        return sv;
 1492|  66.3k|    }
_ZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 5939|  2.72k|{
 5940|  2.72k|    using char_type = detail::char_t<Range>;
 5941|  2.72k|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5942|       |
 5943|  2.72k|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5943:9): [True: 2.31k, False: 408]
  ------------------
 5944|  2.31k|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5945|  2.31k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5946|       |
 5947|  2.31k|        if (max_width == 0) {
  ------------------
  |  Branch (5947:13): [True: 2.19k, False: 116]
  ------------------
 5948|  2.19k|            auto it = read_while_code_unit(range, pred);
 5949|       |
 5950|  2.19k|            if (want_skipped_width) {
  ------------------
  |  Branch (5950:17): [True: 142, False: 2.05k]
  ------------------
 5951|    142|                auto prefix_width =
 5952|    142|                    static_cast<std::ptrdiff_t>(
 5953|    142|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5954|    142|                    ranges::distance(range.begin(), it);
 5955|    142|                return result_type{it, prefix_width};
 5956|    142|            }
 5957|  2.05k|            return result_type{it, 0};
 5958|  2.19k|        }
 5959|       |
 5960|    116|        auto max_width_view = take_width(range, max_width);
 5961|    116|        auto w_it = read_while_code_unit(max_width_view, pred);
 5962|       |
 5963|    116|        if (want_skipped_width) {
  ------------------
  |  Branch (5963:13): [True: 116, False: 0]
  ------------------
 5964|    116|            return result_type{w_it.base(), max_width - w_it.count()};
 5965|    116|        }
 5966|      0|        return result_type{w_it.base(), 0};
 5967|    116|    }
 5968|       |
 5969|    408|    const auto fill_chars = fill.template get_code_units<char_type>();
 5970|    408|    if (max_width == 0) {
  ------------------
  |  Branch (5970:9): [True: 212, False: 196]
  ------------------
 5971|    212|        auto it = read_while_code_units(range, fill_chars);
 5972|       |
 5973|    212|        if (want_skipped_width) {
  ------------------
  |  Branch (5973:13): [True: 52, False: 160]
  ------------------
 5974|     52|            auto prefix_width =
 5975|     52|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5976|     52|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5977|     52|            return result_type{it, prefix_width};
 5978|     52|        }
 5979|    160|        return result_type{it, 0};
 5980|    212|    }
 5981|       |
 5982|    196|    auto max_width_view = take_width(range, max_width);
 5983|    196|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5984|       |
 5985|    196|    if (want_skipped_width) {
  ------------------
  |  Branch (5985:9): [True: 196, False: 0]
  ------------------
 5986|    196|        return result_type{w_it.base(), max_width - w_it.count()};
 5987|    196|    }
 5988|      0|    return result_type{w_it.base(), 0};
 5989|    196|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1963|  2.37k|{
 1964|  2.37k|    return read_until_code_unit(range, std::not_fn(pred));
 1965|  2.37k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1944|  2.57k|{
 1945|  2.57k|    if constexpr (ranges::common_range<Range>) {
 1946|  2.57k|        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|       |    else {
 1949|       |        auto first = range.begin();
 1950|       |        for (; first != range.end(); ++first) {
 1951|       |            if (pred(*first)) {
 1952|       |                return first;
 1953|       |            }
 1954|       |        }
 1955|       |        return first;
 1956|       |    }
 1957|  2.57k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_:
  742|  2.31k|        : m_fptr([](storage fn,
  743|  2.31k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.31k|              cvref<T> obj = *get<T>(fn);
  745|  2.31k|              if constexpr (std::is_void_v<R>) {
  746|  2.31k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.31k|              }
  748|  2.31k|              else {
  749|  2.31k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.31k|              }
  751|  2.31k|          }),
  752|  2.31k|          m_storage(std::addressof(f))
  753|  2.31k|    {
  754|  2.31k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  2.73k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.73k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.73k|              else {
  749|  2.73k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.73k|              }
  751|  2.73k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlcE_EEDaNS3_7storageE:
  683|  2.73k|    {
  684|  2.73k|        if constexpr (std::is_const_v<T>) {
  685|  2.73k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.73k|    }
_ZZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlcE_clEc:
 5945|  2.73k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_TnPNSF_9enable_ifIXsr3stdE11is_object_vISH_EEvE4typeELPv0EEEPKSH_:
  665|  2.31k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  2.31k|        {
  667|  2.31k|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1963|    272|{
 1964|    272|    return read_until_code_unit(range, std::not_fn(pred));
 1965|    272|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1944|    548|{
 1945|       |    if constexpr (ranges::common_range<Range>) {
 1946|       |        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|    548|    else {
 1949|    548|        auto first = range.begin();
 1950|  11.0k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1950:16): [True: 10.7k, False: 298]
  ------------------
 1951|  10.7k|            if (pred(*first)) {
  ------------------
  |  Branch (1951:17): [True: 250, False: 10.4k]
  ------------------
 1952|    250|                return first;
 1953|    250|            }
 1954|  10.7k|        }
 1955|    298|        return first;
 1956|    548|    }
 1957|    548|}
_ZN3scn2v34impl21read_while_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 2024|    212|{
 2025|    212|    static_assert(ranges::common_range<CodeUnits>);
 2026|       |
 2027|    212|    auto it = range.begin();
 2028|    376|    while (it != range.end()) {
  ------------------
  |  Branch (2028:12): [True: 376, False: 0]
  ------------------
 2029|    376|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2030|    376|                                           needle.size());
 2031|    376|        if (!r) {
  ------------------
  |  Branch (2031:13): [True: 6, False: 370]
  ------------------
 2032|      6|            return it;
 2033|      6|        }
 2034|    370|        static_assert(
 2035|    370|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2036|    370|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2036:13): [True: 206, False: 164]
  ------------------
 2037|    206|            return it;
 2038|    206|        }
 2039|    164|        it = *r;
 2040|    164|    }
 2041|      0|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2042|      0|    return it;
 2043|      0|}
_ZN3scn2v34impl21read_while_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEESI_RKT0_:
 2024|    196|{
 2025|    196|    static_assert(ranges::common_range<CodeUnits>);
 2026|       |
 2027|    196|    auto it = range.begin();
 2028|    360|    while (it != range.end()) {
  ------------------
  |  Branch (2028:12): [True: 330, False: 30]
  ------------------
 2029|    330|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2030|    330|                                           needle.size());
 2031|    330|        if (!r) {
  ------------------
  |  Branch (2031:13): [True: 28, False: 302]
  ------------------
 2032|     28|            return it;
 2033|     28|        }
 2034|    302|        static_assert(
 2035|    302|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2036|    302|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2036:13): [True: 138, False: 164]
  ------------------
 2037|    138|            return it;
 2038|    138|        }
 2039|    164|        it = *r;
 2040|    164|    }
 2041|     30|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|     30|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|     30|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2042|     30|    return it;
 2043|     30|}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 2939|    490|{
 2940|    490|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 0, False: 490]
  ------------------
 2941|      0|        auto it = read_while_classic_space(range);
 2942|      0|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|      0|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2944|      0|            return unexpected(e);
 2945|      0|        }
 2946|       |
 2947|      0|        return it;
 2948|      0|    }
 2949|       |
 2950|    490|    return read_while_classic_space(range);
 2951|    490|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2104|    490|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|    490|    else {
 2114|    490|        auto it = range.begin();
 2115|       |
 2116|    490|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|    490|            auto seg = get_contiguous_beginning(range);
 2118|    490|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|    490|                seg_it != seg.end()) {
  ------------------
  |  Branch (2119:17): [True: 0, False: 490]
  ------------------
 2120|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|      0|            }
 2122|    490|            ranges::advance(it, seg.size());
 2123|    490|        }
 2124|       |
 2125|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|    490|            return detail::is_cp_space(cp);
 2127|    490|        });
 2128|    490|    }
 2129|    490|}
_ZN3scn2v34impl24get_contiguous_beginningINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDaT_:
 1038|  1.23k|{
 1039|       |    if constexpr (ranges::contiguous_range<Range> &&
 1040|       |                  ranges::sized_range<Range>) {
 1041|       |        return r;
 1042|       |    }
 1043|       |    else if constexpr (std::is_same_v<
 1044|       |                           ranges::const_iterator_t<Range>,
 1045|       |                           typename detail::basic_scan_buffer<
 1046|       |                               detail::char_t<Range>>::forward_iterator>) {
 1047|       |        if constexpr (ranges::common_range<Range>) {
 1048|       |            auto seg = r.begin().contiguous_segment();
 1049|       |            auto dist =
 1050|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|       |            return seg.substr(0, std::min(seg.size(), dist));
 1052|       |        }
 1053|       |        else {
 1054|       |            return r.begin().contiguous_segment();
 1055|       |        }
 1056|       |    }
 1057|  1.23k|    else {
 1058|  1.23k|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|  1.23k|    }
 1060|  1.23k|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2069|    706|{
 2070|    706|    return read_until_code_point(range, std::not_fn(pred));
 2071|    706|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2048|    994|{
 2049|    994|    auto it = range.begin();
 2050|  18.7k|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 18.3k, False: 388]
  ------------------
 2051|  18.3k|        const auto val =
 2052|  18.3k|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  18.3k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  18.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 16.9k, False: 1.34k]
  |  |  ------------------
  ------------------
 2054|  16.9k|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  16.9k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  16.9k|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 606, False: 16.3k]
  ------------------
 2057|    606|                return it;
 2058|    606|            }
 2059|  16.9k|        }
 2060|  17.7k|        it = val.iterator;
 2061|  17.7k|    }
 2062|       |
 2063|    388|    return it;
 2064|    994|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 1886|  27.2k|{
 1887|  27.2k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  27.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|  27.2k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|  27.2k|    auto it = range.begin();
 1891|  27.2k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|  27.2k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  27.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.66k, False: 24.6k]
  |  |  ------------------
  ------------------
 1894|  2.66k|        ++it;
 1895|  2.66k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|  2.66k|        return {it, {}};
 1897|  2.66k|    }
 1898|       |
 1899|  24.6k|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 20.7k, False: 3.91k]
  ------------------
 1900|  20.7k|        ++it;
 1901|  20.7k|        return {it, string_type(1, *range.begin())};
 1902|  20.7k|    }
 1903|       |
 1904|  3.91k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|  3.91k|    return {it, string_type{range.begin(), it}};
 1906|  24.6k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_:
 1154|  2.66k|{
 1155|  2.66k|    auto it = input.begin();
 1156|  3.45k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 3.30k, False: 144]
  ------------------
 1157|  3.30k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 2.52k, False: 784]
  ------------------
 1158|  2.52k|            break;
 1159|  2.52k|        }
 1160|  3.30k|    }
 1161|  2.66k|    return it;
 1162|  2.66k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  282|  3.91k|    {
  283|  3.91k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  3.91k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  226|  3.91k|    {
  227|  3.91k|        constexpr iter_difference_t<I> zero{0};
  228|  3.91k|        iter_difference_t<I> counter{0};
  229|       |
  230|  3.91k|        if (n < zero) {
  ------------------
  |  Branch (230:13): [True: 0, False: 3.91k]
  ------------------
  231|      0|            do {
  232|      0|                --i;
  233|      0|                --counter;  // Yes, really
  234|      0|            } while (++n < zero && i != bound);
  ------------------
  |  Branch (234:22): [True: 0, False: 0]
  |  Branch (234:36): [True: 0, False: 0]
  ------------------
  235|      0|        }
  236|  3.91k|        else {
  237|  12.9k|            while (n-- > zero && i != bound) {
  ------------------
  |  Branch (237:20): [True: 9.11k, False: 3.83k]
  |  Branch (237:34): [True: 9.03k, False: 84]
  ------------------
  238|  9.03k|                ++i;
  239|  9.03k|                ++counter;
  240|  9.03k|            }
  241|  3.91k|        }
  242|       |
  243|  3.91k|        return counter;
  244|  3.91k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  742|    490|        : m_fptr([](storage fn,
  743|    490|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    490|              cvref<T> obj = *get<T>(fn);
  745|    490|              if constexpr (std::is_void_v<R>) {
  746|    490|                  obj(static_cast<decltype(args)>(args)...);
  747|    490|              }
  748|    490|              else {
  749|    490|                  return obj(static_cast<decltype(args)>(args)...);
  750|    490|              }
  751|    490|          }),
  752|    490|          m_storage(std::addressof(f))
  753|    490|    {
  754|    490|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  743|  1.24k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.24k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.24k|              else {
  749|  1.24k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.24k|              }
  751|  1.24k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  1.24k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.24k|        else if constexpr (std::is_object_v<T>) {
  688|  1.24k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.24k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2125|  1.24k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  1.24k|            return detail::is_cp_space(cp);
 2127|  1.24k|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|    490|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    490|        {
  662|    490|        }
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2939|  6.86k|{
 2940|  6.86k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 6.67k, False: 184]
  ------------------
 2941|  6.67k|        auto it = read_while_classic_space(range);
 2942|  6.67k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|  6.67k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.67k]
  |  |  ------------------
  ------------------
 2944|      0|            return unexpected(e);
 2945|      0|        }
 2946|       |
 2947|  6.67k|        return it;
 2948|  6.67k|    }
 2949|       |
 2950|    184|    return read_while_classic_space(range);
 2951|  6.86k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2104|  14.1k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|  14.1k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|  14.1k|        auto buf = make_contiguous_buffer(range);
 2109|  14.1k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|  14.1k|        return ranges::next(range.begin(),
 2111|  14.1k|                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|       |    else {
 2114|       |        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|       |            return detail::is_cp_space(cp);
 2127|       |        });
 2128|       |    }
 2129|  14.1k|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1670|  17.0k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|  17.0k|                  ranges::sized_range<Range>) {
 1674|  17.0k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  17.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1675|       |    }
 1676|       |    else {
 1677|       |        return contiguous_range_factory{SCN_FWD(range)};
 1678|       |    }
 1679|  17.0k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1476|  17.0k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1477|  17.0k|    {
 1478|  17.0k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3028|  13.5k|    {
 3029|  13.5k|        reader_error_handler eh{};
 3030|  13.5k|        get_derived().check_specs_impl(specs, eh);
 3031|  13.5k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  13.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.3k, False: 1.17k]
  |  |  ------------------
  ------------------
 3032|  12.3k|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|  12.3k|        }
 3034|  1.17k|        return {};
 3035|  13.5k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
 3039|  13.5k|    {
 3040|  13.5k|        return static_cast<Derived&>(*this);
 3041|  13.5k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3473|  13.5k|    {
 3474|  13.5k|        detail::check_int_type_specs(specs, eh);
 3475|  13.5k|    }
_ZNK3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
 3023|  2.43k|    {
 3024|  2.43k|        return true;
 3025|  2.43k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3527|    276|    {
 3528|    276|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    276|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    276|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    276|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    276|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 276]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    276|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    276|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    276|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|    276|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 0, False: 276]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|      0|            else {
 3539|      0|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 0]
  ------------------
 3540|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|      0|            }
 3546|      0|        }
 3547|       |
 3548|    276|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 0, False: 276]
  ------------------
 3549|      0|            value = T{0};
 3550|      0|            return std::next(prefix_result.iterator);
 3551|      0|        }
 3552|       |
 3553|    276|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    276|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 266, False: 10]
  |  |  ------------------
  ------------------
 3554|    266|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    266|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    266|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    266|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    266|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 266, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    266|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    266|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    266|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    266|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    266|    }                                                  \
  |  |  |  | 3667|    266|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|      0|                    parse_integer_digits_without_thsep(
 3556|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|      0|                        prefix_result.parsed_base));
 3558|       |
 3559|      0|            auto buf = make_contiguous_buffer(
 3560|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|      0|                                        prefix_result.parsed_base));
 3564|       |
 3565|      0|            return ranges::next(
 3566|      0|                prefix_result.iterator,
 3567|      0|                ranges::distance(buf.view().begin(), result_it));
 3568|      0|        }
 3569|       |
 3570|     10|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|     10|            localized_number_formatting_options<CharT>{loc};
 3575|     10|#endif
 3576|       |
 3577|     10|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|     10|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     10|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     10|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     10|    }                                                  \
  |  |  |  | 3667|     10|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|      0|                parse_integer_digits_with_thsep(
 3579|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|      0|                    prefix_result.parsed_base, locale_options));
 3581|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|      0|            parse_digits_result;
 3583|       |
 3584|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 0, False: 0]
  ------------------
 3585|      0|            if (auto e = check_thsep_grouping(
 3586|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|      0|                    thsep_indices, locale_options.grouping);
 3588|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3589|      0|                return unexpected(e);
 3590|      0|            }
 3591|      0|        }
 3592|       |
 3593|      0|        auto nothsep_source_view =
 3594|      0|            std::basic_string_view<CharT>{nothsep_source};
 3595|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|      0|            nothsep_source_it,
 3597|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|      0|                                prefix_result.parsed_base));
 3599|       |
 3600|      0|        return ranges::next(
 3601|      0|            prefix_result.iterator,
 3602|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|      0|                ranges::ssize(thsep_indices));
 3604|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|    282|    {
 3528|    282|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    282|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    282|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    282|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    282|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 282]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    282|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    282|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    282|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|    282|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 0, False: 282]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|      0|            else {
 3539|      0|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 0]
  ------------------
 3540|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|      0|            }
 3546|      0|        }
 3547|       |
 3548|    282|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 0, False: 282]
  ------------------
 3549|      0|            value = T{0};
 3550|      0|            return std::next(prefix_result.iterator);
 3551|      0|        }
 3552|       |
 3553|    282|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    282|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 262, False: 20]
  |  |  ------------------
  ------------------
 3554|    262|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    262|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    262|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    262|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    262|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 262]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    262|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    262|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|    262|                    parse_integer_digits_without_thsep(
 3556|    262|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|    262|                        prefix_result.parsed_base));
 3558|       |
 3559|    262|            auto buf = make_contiguous_buffer(
 3560|    262|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|    262|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    262|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    262|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    262|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    262|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 262, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    262|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    262|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    262|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    262|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    262|    }                                                  \
  |  |  |  | 3667|    262|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|      0|                                        prefix_result.parsed_base));
 3564|       |
 3565|      0|            return ranges::next(
 3566|      0|                prefix_result.iterator,
 3567|      0|                ranges::distance(buf.view().begin(), result_it));
 3568|    262|        }
 3569|       |
 3570|     20|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|     20|            localized_number_formatting_options<CharT>{loc};
 3575|     20|#endif
 3576|       |
 3577|     20|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     20|    }                                                  \
  |  |  |  | 3667|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|      0|                parse_integer_digits_with_thsep(
 3579|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|      0|                    prefix_result.parsed_base, locale_options));
 3581|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|      0|            parse_digits_result;
 3583|       |
 3584|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 0, False: 0]
  ------------------
 3585|      0|            if (auto e = check_thsep_grouping(
 3586|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|      0|                    thsep_indices, locale_options.grouping);
 3588|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3589|      0|                return unexpected(e);
 3590|      0|            }
 3591|      0|        }
 3592|       |
 3593|      0|        auto nothsep_source_view =
 3594|      0|            std::basic_string_view<CharT>{nothsep_source};
 3595|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|      0|            nothsep_source_it,
 3597|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|      0|                                prefix_result.parsed_base));
 3599|       |
 3600|      0|        return ranges::next(
 3601|      0|            prefix_result.iterator,
 3602|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|      0|                ranges::ssize(thsep_indices));
 3604|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3527|    276|    {
 3528|    276|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    276|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    276|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    276|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    276|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 276]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    276|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    276|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    276|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|    276|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 0, False: 276]
  ------------------
 3532|      0|            if constexpr (!std::is_signed_v<T>) {
 3533|      0|                return unexpected_scan_error(
 3534|      0|                    scan_error::invalid_scanned_value,
 3535|      0|                    "Unexpected '-' sign when parsing an "
 3536|      0|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|      0|        }
 3547|       |
 3548|    276|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 0, False: 276]
  ------------------
 3549|      0|            value = T{0};
 3550|      0|            return std::next(prefix_result.iterator);
 3551|      0|        }
 3552|       |
 3553|    276|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    276|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 266, False: 10]
  |  |  ------------------
  ------------------
 3554|    266|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    266|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    266|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    266|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    266|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 266, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    266|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    266|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    266|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    266|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    266|    }                                                  \
  |  |  |  | 3667|    266|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|      0|                    parse_integer_digits_without_thsep(
 3556|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|      0|                        prefix_result.parsed_base));
 3558|       |
 3559|      0|            auto buf = make_contiguous_buffer(
 3560|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|      0|                                        prefix_result.parsed_base));
 3564|       |
 3565|      0|            return ranges::next(
 3566|      0|                prefix_result.iterator,
 3567|      0|                ranges::distance(buf.view().begin(), result_it));
 3568|      0|        }
 3569|       |
 3570|     10|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|     10|            localized_number_formatting_options<CharT>{loc};
 3575|     10|#endif
 3576|       |
 3577|     10|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|     10|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     10|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     10|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     10|    }                                                  \
  |  |  |  | 3667|     10|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|      0|                parse_integer_digits_with_thsep(
 3579|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|      0|                    prefix_result.parsed_base, locale_options));
 3581|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|      0|            parse_digits_result;
 3583|       |
 3584|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 0, False: 0]
  ------------------
 3585|      0|            if (auto e = check_thsep_grouping(
 3586|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|      0|                    thsep_indices, locale_options.grouping);
 3588|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3589|      0|                return unexpected(e);
 3590|      0|            }
 3591|      0|        }
 3592|       |
 3593|      0|        auto nothsep_source_view =
 3594|      0|            std::basic_string_view<CharT>{nothsep_source};
 3595|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|      0|            nothsep_source_it,
 3597|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|      0|                                prefix_result.parsed_base));
 3599|       |
 3600|      0|        return ranges::next(
 3601|      0|            prefix_result.iterator,
 3602|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|      0|                ranges::ssize(thsep_indices));
 3604|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|    282|    {
 3528|    282|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    282|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    282|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    282|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    282|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 282]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    282|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    282|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    282|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|    282|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 0, False: 282]
  ------------------
 3532|      0|            if constexpr (!std::is_signed_v<T>) {
 3533|      0|                return unexpected_scan_error(
 3534|      0|                    scan_error::invalid_scanned_value,
 3535|      0|                    "Unexpected '-' sign when parsing an "
 3536|      0|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|      0|        }
 3547|       |
 3548|    282|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 0, False: 282]
  ------------------
 3549|      0|            value = T{0};
 3550|      0|            return std::next(prefix_result.iterator);
 3551|      0|        }
 3552|       |
 3553|    282|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    282|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 262, False: 20]
  |  |  ------------------
  ------------------
 3554|    262|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    262|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    262|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    262|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    262|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 262]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    262|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    262|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|    262|                    parse_integer_digits_without_thsep(
 3556|    262|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|    262|                        prefix_result.parsed_base));
 3558|       |
 3559|    262|            auto buf = make_contiguous_buffer(
 3560|    262|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|    262|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    262|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    262|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    262|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    262|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 262, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    262|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    262|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    262|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    262|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    262|    }                                                  \
  |  |  |  | 3667|    262|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|      0|                                        prefix_result.parsed_base));
 3564|       |
 3565|      0|            return ranges::next(
 3566|      0|                prefix_result.iterator,
 3567|      0|                ranges::distance(buf.view().begin(), result_it));
 3568|    262|        }
 3569|       |
 3570|     20|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|     20|            localized_number_formatting_options<CharT>{loc};
 3575|     20|#endif
 3576|       |
 3577|     20|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     20|    }                                                  \
  |  |  |  | 3667|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|      0|                parse_integer_digits_with_thsep(
 3579|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|      0|                    prefix_result.parsed_base, locale_options));
 3581|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|      0|            parse_digits_result;
 3583|       |
 3584|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 0, False: 0]
  ------------------
 3585|      0|            if (auto e = check_thsep_grouping(
 3586|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|      0|                    thsep_indices, locale_options.grouping);
 3588|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3589|      0|                return unexpected(e);
 3590|      0|            }
 3591|      0|        }
 3592|       |
 3593|      0|        auto nothsep_source_view =
 3594|      0|            std::basic_string_view<CharT>{nothsep_source};
 3595|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|      0|            nothsep_source_it,
 3597|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|      0|                                prefix_result.parsed_base));
 3599|       |
 3600|      0|        return ranges::next(
 3601|      0|            prefix_result.iterator,
 3602|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|      0|                ranges::ssize(thsep_indices));
 3604|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3527|    244|    {
 3528|    244|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    244|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    244|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    244|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    244|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 244]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    244|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    244|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    244|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|    244|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 0, False: 244]
  ------------------
 3532|      0|            if constexpr (!std::is_signed_v<T>) {
 3533|      0|                return unexpected_scan_error(
 3534|      0|                    scan_error::invalid_scanned_value,
 3535|      0|                    "Unexpected '-' sign when parsing an "
 3536|      0|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|      0|        }
 3547|       |
 3548|    244|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 0, False: 244]
  ------------------
 3549|      0|            value = T{0};
 3550|      0|            return std::next(prefix_result.iterator);
 3551|      0|        }
 3552|       |
 3553|    244|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    244|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 244, False: 0]
  |  |  ------------------
  ------------------
 3554|    244|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    244|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    244|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    244|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    244|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 244, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    244|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    244|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    244|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    244|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    244|    }                                                  \
  |  |  |  | 3667|    244|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|      0|                    parse_integer_digits_without_thsep(
 3556|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|      0|                        prefix_result.parsed_base));
 3558|       |
 3559|      0|            auto buf = make_contiguous_buffer(
 3560|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|      0|                                        prefix_result.parsed_base));
 3564|       |
 3565|      0|            return ranges::next(
 3566|      0|                prefix_result.iterator,
 3567|      0|                ranges::distance(buf.view().begin(), result_it));
 3568|      0|        }
 3569|       |
 3570|      0|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|      0|            localized_number_formatting_options<CharT>{loc};
 3575|      0|#endif
 3576|       |
 3577|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|      0|                parse_integer_digits_with_thsep(
 3579|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|      0|                    prefix_result.parsed_base, locale_options));
 3581|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|      0|            parse_digits_result;
 3583|       |
 3584|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 0, False: 0]
  ------------------
 3585|      0|            if (auto e = check_thsep_grouping(
 3586|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|      0|                    thsep_indices, locale_options.grouping);
 3588|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3589|      0|                return unexpected(e);
 3590|      0|            }
 3591|      0|        }
 3592|       |
 3593|      0|        auto nothsep_source_view =
 3594|      0|            std::basic_string_view<CharT>{nothsep_source};
 3595|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|      0|            nothsep_source_it,
 3597|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|      0|                                prefix_result.parsed_base));
 3599|       |
 3600|      0|        return ranges::next(
 3601|      0|            prefix_result.iterator,
 3602|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|      0|                ranges::ssize(thsep_indices));
 3604|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|    874|    {
 3528|    874|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    874|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    874|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    874|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    874|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 874]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    874|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    874|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    874|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|    874|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 0, False: 874]
  ------------------
 3532|      0|            if constexpr (!std::is_signed_v<T>) {
 3533|      0|                return unexpected_scan_error(
 3534|      0|                    scan_error::invalid_scanned_value,
 3535|      0|                    "Unexpected '-' sign when parsing an "
 3536|      0|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|      0|        }
 3547|       |
 3548|    874|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 0, False: 874]
  ------------------
 3549|      0|            value = T{0};
 3550|      0|            return std::next(prefix_result.iterator);
 3551|      0|        }
 3552|       |
 3553|    874|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    874|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 874, False: 0]
  |  |  ------------------
  ------------------
 3554|    874|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    874|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    874|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    874|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    874|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 874]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    874|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    874|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|    874|                    parse_integer_digits_without_thsep(
 3556|    874|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|    874|                        prefix_result.parsed_base));
 3558|       |
 3559|    874|            auto buf = make_contiguous_buffer(
 3560|    874|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|    874|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    874|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    874|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    874|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    874|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 874, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    874|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    874|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    874|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    874|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    874|    }                                                  \
  |  |  |  | 3667|    874|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|      0|                                        prefix_result.parsed_base));
 3564|       |
 3565|      0|            return ranges::next(
 3566|      0|                prefix_result.iterator,
 3567|      0|                ranges::distance(buf.view().begin(), result_it));
 3568|    874|        }
 3569|       |
 3570|      0|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|      0|            localized_number_formatting_options<CharT>{loc};
 3575|      0|#endif
 3576|       |
 3577|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|      0|                parse_integer_digits_with_thsep(
 3579|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|      0|                    prefix_result.parsed_base, locale_options));
 3581|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|      0|            parse_digits_result;
 3583|       |
 3584|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 0, False: 0]
  ------------------
 3585|      0|            if (auto e = check_thsep_grouping(
 3586|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|      0|                    thsep_indices, locale_options.grouping);
 3588|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3589|      0|                return unexpected(e);
 3590|      0|            }
 3591|      0|        }
 3592|       |
 3593|      0|        auto nothsep_source_view =
 3594|      0|            std::basic_string_view<CharT>{nothsep_source};
 3595|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|      0|            nothsep_source_it,
 3597|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|      0|                                prefix_result.parsed_base));
 3599|       |
 3600|      0|        return ranges::next(
 3601|      0|            prefix_result.iterator,
 3602|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|      0|                ranges::ssize(thsep_indices));
 3604|      0|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3028|  6.76k|    {
 3029|  6.76k|        reader_error_handler eh{};
 3030|  6.76k|        get_derived().check_specs_impl(specs, eh);
 3031|  6.76k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  6.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.18k, False: 580]
  |  |  ------------------
  ------------------
 3032|  6.18k|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|  6.18k|        }
 3034|    580|        return {};
 3035|  6.76k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3039|  6.76k|    {
 3040|  6.76k|        return static_cast<Derived&>(*this);
 3041|  6.76k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4133|  6.76k|    {
 4134|  6.76k|        detail::check_float_type_specs(specs, eh);
 4135|  6.76k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3023|  1.21k|    {
 3024|  1.21k|        return true;
 3025|  1.21k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4205|    550|    {
 4206|    550|        unsigned options{};
 4207|    550|        if (specs.localized) {
  ------------------
  |  Branch (4207:13): [True: 16, False: 534]
  ------------------
 4208|     16|            options |= float_reader_base::allow_thsep;
 4209|     16|        }
 4210|       |
 4211|    550|        SCN_GCC_COMPAT_PUSH
 4212|    550|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4213|       |
 4214|    550|        switch (specs.type) {
 4215|     30|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4215:13): [True: 30, False: 520]
  ------------------
 4216|     30|                return options | float_reader_base::allow_fixed;
 4217|       |
 4218|      4|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4218:13): [True: 4, False: 546]
  ------------------
 4219|      4|                return options | float_reader_base::allow_scientific;
 4220|       |
 4221|     12|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4221:13): [True: 12, False: 538]
  ------------------
 4222|     12|                return options | float_reader_base::allow_hex;
 4223|       |
 4224|      8|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4224:13): [True: 8, False: 542]
  ------------------
 4225|      8|                return options | float_reader_base::allow_scientific |
 4226|      8|                       float_reader_base::allow_fixed;
 4227|       |
 4228|    496|            case detail::presentation_type::none:
  ------------------
  |  Branch (4228:13): [True: 496, False: 54]
  ------------------
 4229|    496|                return options | float_reader_base::allow_scientific |
 4230|    496|                       float_reader_base::allow_fixed |
 4231|    496|                       float_reader_base::allow_hex;
 4232|       |
 4233|      0|            default:
  ------------------
  |  Branch (4233:13): [True: 0, False: 550]
  ------------------
 4234|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4235|    550|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4236|    550|        }
 4237|       |
 4238|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4239|    550|    }
_ZN3scn2v34impl12float_readerIcEC2Ej:
 3648|    550|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2Ev:
 1758|  1.18k|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIcEC2Ev:
 1519|  2.36k|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIcE17handle_separatorsEv:
 4045|    884|    {
 4046|    884|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4046:13): [True: 884, False: 0]
  ------------------
 4047|    884|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4047:13): [True: 884, False: 0]
  ------------------
 4048|    884|            return;
 4049|    884|        }
 4050|       |
 4051|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4052|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4052:13): [True: 0, False: 0]
  ------------------
 4053|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4053:27): [True: 0, False: 0]
  ------------------
 4054|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4054:21): [True: 0, False: 0]
  ------------------
 4055|      0|                    ch = CharT{'.'};
 4056|      0|                }
 4057|      0|            }
 4058|      0|        }
 4059|       |
 4060|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4060:13): [True: 0, False: 0]
  ------------------
 4061|      0|            return;
 4062|      0|        }
 4063|       |
 4064|      0|        auto first =
 4065|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4066|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4066:13): [True: 0, False: 0]
  ------------------
 4067|      0|            return;
 4068|      0|        }
 4069|       |
 4070|      0|        m_thsep_indices.push_back(
 4071|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4072|       |
 4073|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4073:31): [True: 0, False: 0]
  ------------------
 4074|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4074:17): [True: 0, False: 0]
  ------------------
 4075|      0|                *first++ = std::move(*it);
 4076|      0|            }
 4077|      0|            else {
 4078|      0|                m_thsep_indices.push_back(
 4079|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4080|      0|            }
 4081|      0|        }
 4082|       |
 4083|      0|        str.erase(first, str.end());
 4084|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1574|    772|    {
 1575|    772|        return m_storage.has_value();
 1576|    772|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1579|    386|    {
 1580|    386|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|    386|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    386|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1581|    386|        return *m_storage;
 1582|    386|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  762|    272|    {
  763|    272|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    272|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    272|    }
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3667|      8|    {
 3668|      8|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3669|      8|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|      8|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 8]
  |  |  ------------------
  ------------------
 3670|      0|            m_locale_options.thousands_sep = CharT{0};
 3671|      0|        }
 3672|       |
 3673|      8|        return read_source_impl(range);
 3674|      8|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3693|    272|    {
 3694|    272|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|    272|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    272|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    272|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    272|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 272]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    272|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    272|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3695|    272|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3696|    272|        auto it = sign_result.first;
 3697|    272|        m_sign = sign_result.second;
 3698|       |
 3699|    272|        auto digits_begin = it;
 3700|    272|        auto r = ranges::subrange{it, range.end()};
 3701|       |        if constexpr (ranges::contiguous_range<Range> &&
 3702|       |                      ranges::sized_range<Range>) {
 3703|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3704|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3705|       |                SCN_TRY_ASSIGN(
 3706|       |                    it,
 3707|       |                    do_read_source_impl(
 3708|       |                        r,
 3709|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3710|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3711|       |            }
 3712|       |            else {
 3713|       |                auto cb = [&](const auto& rr)
 3714|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3715|       |                    auto res = read_all(rr);
 3716|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3717|       |                        return unexpected_scan_error(
 3718|       |                            scan_error::invalid_scanned_value,
 3719|       |                            "Invalid float value");
 3720|       |                    }
 3721|       |                    return res;
 3722|       |                };
 3723|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3724|       |            }
 3725|       |        }
 3726|    272|        else {
 3727|    272|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|    272|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    272|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    272|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 272, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    272|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    272|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    272|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    272|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    272|    }                                                  \
  |  | 3667|    272|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    272|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3728|      0|                it,
 3729|      0|                do_read_source_impl(
 3730|      0|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3731|      0|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3732|      0|        }
 3733|       |
 3734|    272|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    272|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    272|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3735|       |
 3736|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3736:13): [True: 0, False: 0]
  |  Branch (3736:48): [True: 0, False: 0]
  ------------------
 3737|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3737:13): [True: 0, False: 0]
  ------------------
 3738|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3738:13): [True: 0, False: 0]
  ------------------
 3739|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3740|      0|        }
 3741|       |
 3742|      0|        handle_separators();
 3743|       |
 3744|      0|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3744:13): [True: 0, False: 0]
  ------------------
 3745|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|      0|            if (auto e = check_thsep_grouping(
 3747|      0|                    ranges::subrange{
 3748|      0|                        digits_begin,
 3749|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3750|      0|                    m_thsep_indices, m_locale_options.grouping);
 3751|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3752|      0|                return unexpected(e);
 3753|      0|            }
 3754|      0|        }
 3755|       |
 3756|      0|        return it;
 3757|      0|    }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 3988|    272|    {
 3989|    272|        const bool allowed_hex = (m_options & allow_hex) != 0;
 3990|    272|        const bool allowed_nonhex =
 3991|    272|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 3992|    272|             ~static_cast<unsigned>(allow_hex)) != 0;
 3993|       |
 3994|    272|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (3994:39): [True: 272, False: 0]
  |  Branch (3994:45): [True: 0, False: 272]
  ------------------
 3995|      0|            return r.transform_error(map_parse_error_to_scan_error(
 3996|      0|                scan_error::invalid_scanned_value,
 3997|      0|                "Invalid infinite floating-point value"));
 3998|      0|        }
 3999|    272|        else if (r) {
  ------------------
  |  Branch (3999:18): [True: 0, False: 272]
  ------------------
 4000|      0|            return *r;
 4001|      0|        }
 4002|       |
 4003|    272|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4003:39): [True: 272, False: 0]
  |  Branch (4003:45): [True: 0, False: 272]
  ------------------
 4004|      0|            return unexpected(r.error());
 4005|      0|        }
 4006|    272|        else if (r) {
  ------------------
  |  Branch (4006:18): [True: 0, False: 272]
  ------------------
 4007|      0|            return *r;
 4008|      0|        }
 4009|       |
 4010|    272|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4010:13): [True: 254, False: 18]
  |  Branch (4010:28): [True: 4, False: 250]
  ------------------
 4011|       |            // only hex allowed:
 4012|       |            // prefix "0x" allowed, not required
 4013|      4|            auto it = range.begin();
 4014|       |
 4015|      4|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4015:22): [True: 0, False: 4]
  ------------------
 4016|      0|                m_kind = float_kind::hex_with_prefix;
 4017|      0|                it = *r;
 4018|      0|            }
 4019|      4|            else {
 4020|      4|                m_kind = float_kind::hex_without_prefix;
 4021|      4|            }
 4022|       |
 4023|      4|            return read_hex(ranges::subrange{it, range.end()});
 4024|      4|        }
 4025|    268|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4025:13): [True: 18, False: 250]
  |  Branch (4025:29): [True: 18, False: 0]
  ------------------
 4026|       |            // only nonhex allowed:
 4027|       |            // no prefix allowed
 4028|     18|            m_kind = float_kind::generic;
 4029|     18|            return read_regular_float(range);
 4030|     18|        }
 4031|       |        // both hex and nonhex allowed:
 4032|       |        // check for "0x" prefix -> hex,
 4033|       |        // regular otherwise
 4034|       |
 4035|    250|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    250|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 250]
  |  |  ------------------
  ------------------
 4036|      0|            m_kind = float_kind::hex_with_prefix;
 4037|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4038|      0|        }
 4039|       |
 4040|    250|        m_kind = float_kind::generic;
 4041|    250|        return read_regular(range);
 4042|    250|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3799|    272|    {
 3800|    272|        auto it = range.begin();
 3801|    272|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3801:73): [True: 272, False: 0]
  ------------------
 3802|    272|            return unexpected(r.error());
 3803|    272|        }
 3804|      0|        else {
 3805|      0|            it = *r;
 3806|      0|        }
 3807|       |
 3808|      0|        if (auto r = read_matching_string_classic_nocase(
 3809|      0|                ranges::subrange{it, range.end()}, "inity");
 3810|      0|            !r) {
  ------------------
  |  Branch (3810:13): [True: 0, False: 0]
  ------------------
 3811|      0|            m_kind = float_kind::inf_short;
 3812|      0|            return it;
 3813|      0|        }
 3814|      0|        else {
 3815|      0|            m_kind = float_kind::inf_long;
 3816|      0|            return *r;
 3817|      0|        }
 3818|      0|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3822|    272|    {
 3823|    272|        auto it = range.begin();
 3824|    272|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3824:73): [True: 272, False: 0]
  ------------------
 3825|    272|            return r.transform_error(map_parse_error_to_scan_error(
 3826|    272|                scan_error::invalid_scanned_value,
 3827|    272|                "Invalid floating-point NaN value"));
 3828|    272|        }
 3829|      0|        else {
 3830|      0|            it = *r;
 3831|      0|        }
 3832|       |
 3833|      0|        if (auto r =
 3834|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3835|      0|            !r) {
  ------------------
  |  Branch (3835:13): [True: 0, False: 0]
  ------------------
 3836|      0|            m_kind = float_kind::nan_simple;
 3837|      0|            return it;
 3838|      0|        }
 3839|      0|        else {
 3840|      0|            it = *r;
 3841|      0|        }
 3842|       |
 3843|      0|        auto payload_beg_it = it;
 3844|      0|        it = read_while_code_unit(
 3845|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3846|      0|                return is_ascii_char(ch) &&
 3847|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3848|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3849|      0|            });
 3850|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3851|       |
 3852|      0|        m_kind = float_kind::nan_with_payload;
 3853|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3853:18): [True: 0, False: 0]
  ------------------
 3854|      0|                                             ')')) {
 3855|      0|            return *r;
 3856|      0|        }
 3857|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3858|      0|                                     "Invalid floating-point NaN payload");
 3859|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3792|    254|    {
 3793|    254|        return read_matching_string_classic_nocase(range, "0x");
 3794|    254|    }
_ZN3scn2v34impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3892|      4|    {
 3893|      4|        auto it = range.begin();
 3894|       |
 3895|      4|        std::ptrdiff_t digits_count = 0;
 3896|      4|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3897|      4|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4, False: 0]
  |  |  ------------------
  ------------------
 3898|      4|            return r.transform_error(map_parse_error_to_scan_error(
 3899|      4|                scan_error::invalid_scanned_value,
 3900|      4|                "Invalid hexadecimal floating-point value"));
 3901|      4|        }
 3902|      0|        else {
 3903|      0|            digits_count += ranges::distance(it, *r);
 3904|      0|            it = *r;
 3905|      0|        }
 3906|       |
 3907|      0|        m_integral_part_length = digits_count;
 3908|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3908:18): [True: 0, False: 0]
  ------------------
 3909|      0|                                             m_locale_options.decimal_point)) {
 3910|      0|            it = *r;
 3911|      0|        }
 3912|       |
 3913|      0|        if (auto r =
  ------------------
  |  Branch (3913:18): [True: 0, False: 0]
  ------------------
 3914|      0|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3915|      0|            digits_count += ranges::distance(it, *r);
 3916|      0|            it = *r;
 3917|      0|        }
 3918|       |
 3919|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3920|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3921|      0|                                         "No significand digits in hexfloat");
 3922|      0|        }
 3923|       |
 3924|      0|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3925|       |
 3926|      0|        return it;
 3927|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3777|      4|    {
 3778|      4|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4]
  |  |  |  Branch (859:45): [True: 0, False: 4]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3779|      4|                         thsep_allowed)) {
 3780|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3781|      0|                return char_to_int(ch) < 16 ||
 3782|      0|                       ch == m_locale_options.thousands_sep;
 3783|      0|            });
 3784|      0|        }
 3785|       |
 3786|      4|        return read_while1_code_unit(
 3787|      4|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3788|      4|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_:
  742|      4|        : m_fptr([](storage fn,
  743|      4|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      4|              cvref<T> obj = *get<T>(fn);
  745|      4|              if constexpr (std::is_void_v<R>) {
  746|      4|                  obj(static_cast<decltype(args)>(args)...);
  747|      4|              }
  748|      4|              else {
  749|      4|                  return obj(static_cast<decltype(args)>(args)...);
  750|      4|              }
  751|      4|          }),
  752|      4|          m_storage(std::addressof(f))
  753|      4|    {
  754|      4|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES18_c:
  743|      4|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      4|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      4|              else {
  749|      4|                  return obj(static_cast<decltype(args)>(args)...);
  750|      4|              }
  751|      4|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|      4|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      4|        else if constexpr (std::is_object_v<T>) {
  688|      4|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      4|    }
_ZZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3787|      4|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_TnPNSP_9enable_ifIXsr3stdE11is_object_vISR_EEvE4typeELPv0EEEPSR_:
  660|      4|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      4|        {
  662|      4|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3932|    268|    {
 3933|    268|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3934|    268|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3934:35): [True: 254, False: 14]
  |  Branch (3934:50): [True: 0, False: 254]
  ------------------
 3935|       |
 3936|    268|        auto it = ranges::begin(range);
 3937|    268|        std::ptrdiff_t digits_count = 0;
 3938|       |
 3939|    268|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3940|    268|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    268|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 268, False: 0]
  |  |  ------------------
  ------------------
 3941|    268|            return r.transform_error(
 3942|    268|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3943|    268|                                              "Invalid floating-point value"));
 3944|    268|        }
 3945|      0|        else {
 3946|      0|            digits_count += ranges::distance(it, *r);
 3947|      0|            it = *r;
 3948|      0|        }
 3949|       |
 3950|      0|        m_integral_part_length = digits_count;
 3951|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3951:18): [True: 0, False: 0]
  ------------------
 3952|      0|                                             m_locale_options.decimal_point)) {
 3953|      0|            it = *r;
 3954|      0|        }
 3955|       |
 3956|      0|        if (auto r =
  ------------------
  |  Branch (3956:18): [True: 0, False: 0]
  ------------------
 3957|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3958|      0|            digits_count += ranges::distance(it, *r);
 3959|      0|            it = *r;
 3960|      0|        }
 3961|       |
 3962|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3963|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3964|      0|                                         "No significand digits in float");
 3965|      0|        }
 3966|       |
 3967|      0|        auto beg_exp_it = it;
 3968|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3968:13): [True: 0, False: 0]
  ------------------
 3969|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3970|      0|        }
 3971|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3971:13): [True: 0, False: 0]
  |  Branch (3971:29): [True: 0, False: 0]
  ------------------
 3972|      0|            return unexpected_scan_error(
 3973|      0|                scan_error::invalid_scanned_value,
 3974|      0|                "No exponent given to scientific float");
 3975|      0|        }
 3976|       |
 3977|      0|        m_kind =
 3978|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3978:13): [True: 0, False: 0]
  ------------------
 3979|       |
 3980|      0|        return it;
 3981|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3762|    268|    {
 3763|    268|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|    268|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 268]
  |  |  |  Branch (859:45): [True: 0, False: 268]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|    268|                         thsep_allowed)) {
 3765|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3766|      0|                return char_to_int(ch) < 10 ||
 3767|      0|                       ch == m_locale_options.thousands_sep;
 3768|      0|            });
 3769|      0|        }
 3770|       |
 3771|    268|        return read_while1_code_unit(
 3772|    268|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3773|    268|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_:
  742|    268|        : m_fptr([](storage fn,
  743|    268|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    268|              cvref<T> obj = *get<T>(fn);
  745|    268|              if constexpr (std::is_void_v<R>) {
  746|    268|                  obj(static_cast<decltype(args)>(args)...);
  747|    268|              }
  748|    268|              else {
  749|    268|                  return obj(static_cast<decltype(args)>(args)...);
  750|    268|              }
  751|    268|          }),
  752|    268|          m_storage(std::addressof(f))
  753|    268|    {
  754|    268|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES18_c:
  743|    268|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    268|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    268|              else {
  749|    268|                  return obj(static_cast<decltype(args)>(args)...);
  750|    268|              }
  751|    268|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|    268|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    268|        else if constexpr (std::is_object_v<T>) {
  688|    268|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    268|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3772|    268|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_TnPNSP_9enable_ifIXsr3stdE11is_object_vISR_EEvE4typeELPv0EEEPSR_:
  660|    268|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    268|        {
  662|    268|        }
_ZN3scn2v34impl12float_readerIcE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3653|    264|    {
 3654|    264|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 264]
  |  |  ------------------
  ------------------
 3655|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3656|      0|                classic_with_thsep_tag{}};
 3657|      0|        }
 3658|       |
 3659|    264|        return read_source_impl(range);
 3660|    264|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|    908|    {
  763|    908|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    908|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    908|    }
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3667|      8|    {
 3668|      8|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3669|      8|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|      8|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 8]
  |  |  ------------------
  ------------------
 3670|      0|            m_locale_options.thousands_sep = CharT{0};
 3671|      0|        }
 3672|       |
 3673|      8|        return read_source_impl(range);
 3674|      8|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3693|    908|    {
 3694|    908|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|    908|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    908|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    908|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    908|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 908]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    908|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    908|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3695|    908|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3696|    908|        auto it = sign_result.first;
 3697|    908|        m_sign = sign_result.second;
 3698|       |
 3699|    908|        auto digits_begin = it;
 3700|    908|        auto r = ranges::subrange{it, range.end()};
 3701|       |        if constexpr (ranges::contiguous_range<Range> &&
 3702|    908|                      ranges::sized_range<Range>) {
 3703|    908|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  1.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 908]
  |  |  |  Branch (859:45): [True: 0, False: 908]
  |  |  |  Branch (859:45): [True: 0, False: 908]
  |  |  ------------------
  ------------------
 3704|    908|                             m_locale_options.decimal_point != CharT{'.'})) {
 3705|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|      0|    }                                                  \
  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3706|      0|                    it,
 3707|      0|                    do_read_source_impl(
 3708|      0|                        r,
 3709|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3710|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3711|      0|            }
 3712|    908|            else {
 3713|    908|                auto cb = [&](const auto& rr)
 3714|    908|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3715|    908|                    auto res = read_all(rr);
 3716|    908|                    if (SCN_UNLIKELY(res == r.begin())) {
 3717|    908|                        return unexpected_scan_error(
 3718|    908|                            scan_error::invalid_scanned_value,
 3719|    908|                            "Invalid float value");
 3720|    908|                    }
 3721|    908|                    return res;
 3722|    908|                };
 3723|    908|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3663|    908|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    908|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    908|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 24, False: 884]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|     24|    }                                                  \
  |  | 3667|    908|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    908|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3724|    884|            }
 3725|       |        }
 3726|       |        else {
 3727|       |            SCN_TRY_ASSIGN(
 3728|       |                it,
 3729|       |                do_read_source_impl(
 3730|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3731|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3732|       |        }
 3733|       |
 3734|    908|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    908|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    908|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3735|       |
 3736|    884|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3736:13): [True: 884, False: 0]
  |  Branch (3736:48): [True: 884, False: 0]
  ------------------
 3737|    884|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3737:13): [True: 884, False: 0]
  ------------------
 3738|    884|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3738:13): [True: 884, False: 0]
  ------------------
 3739|    884|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3740|    884|        }
 3741|       |
 3742|    884|        handle_separators();
 3743|       |
 3744|    884|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3744:13): [True: 0, False: 884]
  ------------------
 3745|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|      0|            if (auto e = check_thsep_grouping(
 3747|      0|                    ranges::subrange{
 3748|      0|                        digits_begin,
 3749|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3750|      0|                    m_thsep_indices, m_locale_options.grouping);
 3751|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3752|      0|                return unexpected(e);
 3753|      0|            }
 3754|      0|        }
 3755|       |
 3756|    884|        return it;
 3757|    884|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3799|    908|    {
 3800|    908|        auto it = range.begin();
 3801|    908|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3801:73): [True: 908, False: 0]
  ------------------
 3802|    908|            return unexpected(r.error());
 3803|    908|        }
 3804|      0|        else {
 3805|      0|            it = *r;
 3806|      0|        }
 3807|       |
 3808|      0|        if (auto r = read_matching_string_classic_nocase(
 3809|      0|                ranges::subrange{it, range.end()}, "inity");
 3810|      0|            !r) {
  ------------------
  |  Branch (3810:13): [True: 0, False: 0]
  ------------------
 3811|      0|            m_kind = float_kind::inf_short;
 3812|      0|            return it;
 3813|      0|        }
 3814|      0|        else {
 3815|      0|            m_kind = float_kind::inf_long;
 3816|      0|            return *r;
 3817|      0|        }
 3818|      0|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3822|    908|    {
 3823|    908|        auto it = range.begin();
 3824|    908|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3824:73): [True: 908, False: 0]
  ------------------
 3825|    908|            return r.transform_error(map_parse_error_to_scan_error(
 3826|    908|                scan_error::invalid_scanned_value,
 3827|    908|                "Invalid floating-point NaN value"));
 3828|    908|        }
 3829|      0|        else {
 3830|      0|            it = *r;
 3831|      0|        }
 3832|       |
 3833|      0|        if (auto r =
 3834|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3835|      0|            !r) {
  ------------------
  |  Branch (3835:13): [True: 0, False: 0]
  ------------------
 3836|      0|            m_kind = float_kind::nan_simple;
 3837|      0|            return it;
 3838|      0|        }
 3839|      0|        else {
 3840|      0|            it = *r;
 3841|      0|        }
 3842|       |
 3843|      0|        auto payload_beg_it = it;
 3844|      0|        it = read_while_code_unit(
 3845|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3846|      0|                return is_ascii_char(ch) &&
 3847|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3848|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3849|      0|            });
 3850|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3851|       |
 3852|      0|        m_kind = float_kind::nan_with_payload;
 3853|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3853:18): [True: 0, False: 0]
  ------------------
 3854|      0|                                             ')')) {
 3855|      0|            return *r;
 3856|      0|        }
 3857|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3858|      0|                                     "Invalid floating-point NaN payload");
 3859|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3792|    884|    {
 3793|    884|        return read_matching_string_classic_nocase(range, "0x");
 3794|    884|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1983|     24|{
 1984|     24|    auto it = read_while_code_unit(range, pred);
 1985|     24|    if (it == range.begin()) {
  ------------------
  |  Branch (1985:9): [True: 24, False: 0]
  ------------------
 1986|     24|        return unexpected(parse_error::error);
 1987|     24|    }
 1988|      0|    return it;
 1989|     24|}
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3932|     24|    {
 3933|     24|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3934|     24|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3934:35): [True: 8, False: 16]
  |  Branch (3934:50): [True: 4, False: 4]
  ------------------
 3935|       |
 3936|     24|        auto it = ranges::begin(range);
 3937|     24|        std::ptrdiff_t digits_count = 0;
 3938|       |
 3939|     24|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3940|     24|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24, False: 0]
  |  |  ------------------
  ------------------
 3941|     24|            return r.transform_error(
 3942|     24|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3943|     24|                                              "Invalid floating-point value"));
 3944|     24|        }
 3945|      0|        else {
 3946|      0|            digits_count += ranges::distance(it, *r);
 3947|      0|            it = *r;
 3948|      0|        }
 3949|       |
 3950|      0|        m_integral_part_length = digits_count;
 3951|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3951:18): [True: 0, False: 0]
  ------------------
 3952|      0|                                             m_locale_options.decimal_point)) {
 3953|      0|            it = *r;
 3954|      0|        }
 3955|       |
 3956|      0|        if (auto r =
  ------------------
  |  Branch (3956:18): [True: 0, False: 0]
  ------------------
 3957|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3958|      0|            digits_count += ranges::distance(it, *r);
 3959|      0|            it = *r;
 3960|      0|        }
 3961|       |
 3962|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3963|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3964|      0|                                         "No significand digits in float");
 3965|      0|        }
 3966|       |
 3967|      0|        auto beg_exp_it = it;
 3968|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3968:13): [True: 0, False: 0]
  ------------------
 3969|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3970|      0|        }
 3971|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3971:13): [True: 0, False: 0]
  |  Branch (3971:29): [True: 0, False: 0]
  ------------------
 3972|      0|            return unexpected_scan_error(
 3973|      0|                scan_error::invalid_scanned_value,
 3974|      0|                "No exponent given to scientific float");
 3975|      0|        }
 3976|       |
 3977|      0|        m_kind =
 3978|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3978:13): [True: 0, False: 0]
  ------------------
 3979|       |
 3980|      0|        return it;
 3981|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3762|     24|    {
 3763|     24|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 24]
  |  |  |  Branch (859:45): [True: 0, False: 24]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|     24|                         thsep_allowed)) {
 3765|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3766|      0|                return char_to_int(ch) < 10 ||
 3767|      0|                       ch == m_locale_options.thousands_sep;
 3768|      0|            });
 3769|      0|        }
 3770|       |
 3771|     24|        return read_while1_code_unit(
 3772|     24|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3773|     24|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|     24|        : m_fptr([](storage fn,
  743|     24|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     24|              cvref<T> obj = *get<T>(fn);
  745|     24|              if constexpr (std::is_void_v<R>) {
  746|     24|                  obj(static_cast<decltype(args)>(args)...);
  747|     24|              }
  748|     24|              else {
  749|     24|                  return obj(static_cast<decltype(args)>(args)...);
  750|     24|              }
  751|     24|          }),
  752|     24|          m_storage(std::addressof(f))
  753|     24|    {
  754|     24|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|     24|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     24|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     24|              else {
  749|     24|                  return obj(static_cast<decltype(args)>(args)...);
  750|     24|              }
  751|     24|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|     24|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     24|        else if constexpr (std::is_object_v<T>) {
  688|     24|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     24|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3772|     24|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     24|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     24|        {
  662|     24|        }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3988|    908|    {
 3989|    908|        const bool allowed_hex = (m_options & allow_hex) != 0;
 3990|    908|        const bool allowed_nonhex =
 3991|    908|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 3992|    908|             ~static_cast<unsigned>(allow_hex)) != 0;
 3993|       |
 3994|    908|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (3994:39): [True: 908, False: 0]
  |  Branch (3994:45): [True: 0, False: 908]
  ------------------
 3995|      0|            return r.transform_error(map_parse_error_to_scan_error(
 3996|      0|                scan_error::invalid_scanned_value,
 3997|      0|                "Invalid infinite floating-point value"));
 3998|      0|        }
 3999|    908|        else if (r) {
  ------------------
  |  Branch (3999:18): [True: 0, False: 908]
  ------------------
 4000|      0|            return *r;
 4001|      0|        }
 4002|       |
 4003|    908|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4003:39): [True: 908, False: 0]
  |  Branch (4003:45): [True: 0, False: 908]
  ------------------
 4004|      0|            return unexpected(r.error());
 4005|      0|        }
 4006|    908|        else if (r) {
  ------------------
  |  Branch (4006:18): [True: 0, False: 908]
  ------------------
 4007|      0|            return *r;
 4008|      0|        }
 4009|       |
 4010|    908|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4010:13): [True: 884, False: 24]
  |  Branch (4010:28): [True: 8, False: 876]
  ------------------
 4011|       |            // only hex allowed:
 4012|       |            // prefix "0x" allowed, not required
 4013|      8|            auto it = range.begin();
 4014|       |
 4015|      8|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4015:22): [True: 0, False: 8]
  ------------------
 4016|      0|                m_kind = float_kind::hex_with_prefix;
 4017|      0|                it = *r;
 4018|      0|            }
 4019|      8|            else {
 4020|      8|                m_kind = float_kind::hex_without_prefix;
 4021|      8|            }
 4022|       |
 4023|      8|            return read_hex(ranges::subrange{it, range.end()});
 4024|      8|        }
 4025|    900|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4025:13): [True: 24, False: 876]
  |  Branch (4025:29): [True: 24, False: 0]
  ------------------
 4026|       |            // only nonhex allowed:
 4027|       |            // no prefix allowed
 4028|     24|            m_kind = float_kind::generic;
 4029|     24|            return read_regular_float(range);
 4030|     24|        }
 4031|       |        // both hex and nonhex allowed:
 4032|       |        // check for "0x" prefix -> hex,
 4033|       |        // regular otherwise
 4034|       |
 4035|    876|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    876|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 876]
  |  |  ------------------
  ------------------
 4036|      0|            m_kind = float_kind::hex_with_prefix;
 4037|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4038|      0|        }
 4039|       |
 4040|    876|        m_kind = float_kind::generic;
 4041|    876|        return read_regular(range);
 4042|    876|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3714|    884|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3715|    884|                    auto res = read_all(rr);
 3716|    884|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|    884|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 884]
  |  |  ------------------
  ------------------
 3717|      0|                        return unexpected_scan_error(
 3718|      0|                            scan_error::invalid_scanned_value,
 3719|      0|                            "Invalid float value");
 3720|      0|                    }
 3721|    884|                    return res;
 3722|    884|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1826|    884|{
 1827|    884|    return ranges::next(range.begin(), range.end());
 1828|    884|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|    884|    {
  313|    884|        ranges::advance(x, bound);
  314|    884|        return x;
  315|    884|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|    884|    {
  275|    884|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    884|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|    950|    {
  190|    950|        i = std::move(bound);
  191|    950|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1564|    884|    {
 1565|    884|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|    884|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1566|    884|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1608|    884|    {
 1609|    884|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|    884|                      ranges::sized_range<Range>) {
 1614|    884|            m_storage.reset();
 1615|    884|            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|       |                                          std::basic_string<CharT>>) {
 1619|       |            m_storage.emplace(SCN_FWD(range));
 1620|       |            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|       |                           ranges::common_range<Range>) {
 1626|       |            auto beg_seg = range.begin().contiguous_segment();
 1627|       |            auto end_seg = range.end().contiguous_segment();
 1628|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1629|       |                             detail::to_address(end_seg.end()))) {
 1630|       |                auto& str = m_storage.emplace();
 1631|       |                str.reserve(range.end().position() - range.begin().position());
 1632|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|       |                m_view = string_view_type{str};
 1634|       |                return;
 1635|       |            }
 1636|       |
 1637|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|       |                                                            end_seg.data());
 1639|       |            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|    884|    }
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3653|    900|    {
 3654|    900|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    900|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 900]
  |  |  ------------------
  ------------------
 3655|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3656|      0|                classic_with_thsep_tag{}};
 3657|      0|        }
 3658|       |
 3659|    900|        return read_source_impl(range);
 3660|    900|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3679|    884|    {
 3680|    884|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    884|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    884|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3681|       |
 3682|    884|        const std::ptrdiff_t sign_len =
 3683|    884|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3683:13): [True: 0, False: 884]
  ------------------
 3684|       |
 3685|    884|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|    884|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    884|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    884|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    884|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 884, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    884|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    884|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    884|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    884|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    884|    }                                                  \
  |  |  |  | 3667|    884|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3686|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3687|    884|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4158|    272|    {
 4159|    272|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|    272|#if !SCN_DISABLE_LOCALE
 4162|    272|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 8, False: 264]
  ------------------
 4163|      8|            return read_impl<Range>(
 4164|      8|                range, rd,
 4165|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4166|      8|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|      8|                },
 4168|      8|                value, loc);
 4169|      8|        }
 4170|    264|#endif
 4171|       |
 4172|    264|        return read_impl<Range>(
 4173|    264|            range, rd,
 4174|    264|            [](float_reader<CharT>& r, auto&&... args) {
 4175|    264|                return r.read_source(SCN_FWD(args)...);
 4176|    264|            },
 4177|    264|            value);
 4178|    272|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIcEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4194|    272|    {
 4195|    272|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|    272|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    272|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 272, False: 0]
  |  |  ------------------
  ------------------
 4197|    272|            return unexpected(r.error());
 4198|    272|        }
 4199|       |
 4200|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|      0|        return ranges::next(range.begin(), n);
 4202|      0|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_:
  742|      8|        : m_fptr([](storage fn,
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|      8|              if constexpr (std::is_void_v<R>) {
  746|      8|                  obj(static_cast<decltype(args)>(args)...);
  747|      8|              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
  752|      8|          m_storage(std::addressof(f))
  753|      8|    {
  754|      8|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1H_SC_SJ_SL_:
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|      8|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      8|        else if constexpr (std::is_object_v<T>) {
  688|      8|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      8|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSD_ST_EEEDaSW_SZ_:
 4165|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4166|      8|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|      8|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|      8|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      8|        {
  662|      8|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_:
  742|    264|        : m_fptr([](storage fn,
  743|    264|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    264|              cvref<T> obj = *get<T>(fn);
  745|    264|              if constexpr (std::is_void_v<R>) {
  746|    264|                  obj(static_cast<decltype(args)>(args)...);
  747|    264|              }
  748|    264|              else {
  749|    264|                  return obj(static_cast<decltype(args)>(args)...);
  750|    264|              }
  751|    264|          }),
  752|    264|          m_storage(std::addressof(f))
  753|    264|    {
  754|    264|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1H_SC_SJ_SL_:
  743|    264|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    264|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    264|              else {
  749|    264|                  return obj(static_cast<decltype(args)>(args)...);
  750|    264|              }
  751|    264|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|    264|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    264|        else if constexpr (std::is_object_v<T>) {
  688|    264|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    264|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4174|    264|            [](float_reader<CharT>& r, auto&&... args) {
 4175|    264|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    264|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|    264|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|    264|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    264|        {
  662|    264|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4158|    278|    {
 4159|    278|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|    278|#if !SCN_DISABLE_LOCALE
 4162|    278|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 8, False: 270]
  ------------------
 4163|      8|            return read_impl<Range>(
 4164|      8|                range, rd,
 4165|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4166|      8|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|      8|                },
 4168|      8|                value, loc);
 4169|      8|        }
 4170|    270|#endif
 4171|       |
 4172|    270|        return read_impl<Range>(
 4173|    270|            range, rd,
 4174|    270|            [](float_reader<CharT>& r, auto&&... args) {
 4175|    270|                return r.read_source(SCN_FWD(args)...);
 4176|    270|            },
 4177|    270|            value);
 4178|    278|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4194|    908|    {
 4195|    908|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|    908|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    908|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24, False: 884]
  |  |  ------------------
  ------------------
 4197|     24|            return unexpected(r.error());
 4198|     24|        }
 4199|       |
 4200|    884|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|    884|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    884|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    884|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    884|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 884, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    884|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    884|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    884|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    884|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    884|    }                                                  \
  |  |  |  | 3667|    884|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|      0|        return ranges::next(range.begin(), n);
 4202|    884|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|      8|        : m_fptr([](storage fn,
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|      8|              if constexpr (std::is_void_v<R>) {
  746|      8|                  obj(static_cast<decltype(args)>(args)...);
  747|      8|              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
  752|      8|          m_storage(std::addressof(f))
  753|      8|    {
  754|      8|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|      8|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      8|        else if constexpr (std::is_object_v<T>) {
  688|      8|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      8|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4165|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4166|      8|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|      8|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|      8|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      8|        {
  662|      8|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|    270|        : m_fptr([](storage fn,
  743|    270|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    270|              cvref<T> obj = *get<T>(fn);
  745|    270|              if constexpr (std::is_void_v<R>) {
  746|    270|                  obj(static_cast<decltype(args)>(args)...);
  747|    270|              }
  748|    270|              else {
  749|    270|                  return obj(static_cast<decltype(args)>(args)...);
  750|    270|              }
  751|    270|          }),
  752|    270|          m_storage(std::addressof(f))
  753|    270|    {
  754|    270|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|    270|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    270|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    270|              else {
  749|    270|                  return obj(static_cast<decltype(args)>(args)...);
  750|    270|              }
  751|    270|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|    270|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    270|        else if constexpr (std::is_object_v<T>) {
  688|    270|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    270|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4174|    270|            [](float_reader<CharT>& r, auto&&... args) {
 4175|    270|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    270|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|    270|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|    270|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    270|        {
  662|    270|        }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5797|  7.35k|{
 5798|       |    if constexpr (std::is_same_v<T, bool>) {
 5799|       |        return reader_impl_for_bool<CharT>{};
 5800|       |    }
 5801|       |    else if constexpr (std::is_same_v<T, char>) {
 5802|       |        return reader_impl_for_char<CharT>{};
 5803|       |    }
 5804|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5805|       |        return reader_impl_for_wchar<CharT>{};
 5806|       |    }
 5807|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5808|       |        return reader_impl_for_code_point<CharT>{};
 5809|       |    }
 5810|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5811|       |                       std::is_same_v<T, std::wstring_view>) {
 5812|       |        return reader_impl_for_string<CharT>{};
 5813|       |    }
 5814|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5815|  7.35k|                       std::is_same_v<T, std::wstring>) {
 5816|  7.35k|        return reader_impl_for_string<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5819|       |                       std::is_same_v<T, wregex_matches>) {
 5820|       |        return reader_impl_for_regex_matches<CharT>{};
 5821|       |    }
 5822|       |    else if constexpr (std::is_same_v<T, void*>) {
 5823|       |        return reader_impl_for_voidptr<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_floating_point_v<T>) {
 5826|       |        return reader_impl_for_float<CharT>{};
 5827|       |    }
 5828|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5829|       |                       !std::is_same_v<T, wchar_t> &&
 5830|       |                       !std::is_same_v<T, char32_t> &&
 5831|       |                       !std::is_same_v<T, bool>) {
 5832|       |        return reader_impl_for_int<CharT>{};
 5833|       |    }
 5834|       |    else {
 5835|       |        return reader_impl_for_monostate<CharT>{};
 5836|       |    }
 5837|  7.35k|}
_ZN3scn2v34impl13string_readerIcEC2Ev:
 5194|  22.0k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3028|  20.1k|    {
 3029|  20.1k|        reader_error_handler eh{};
 3030|  20.1k|        get_derived().check_specs_impl(specs, eh);
 3031|  20.1k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  20.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 378, False: 19.7k]
  |  |  ------------------
  ------------------
 3032|    378|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|    378|        }
 3034|  19.7k|        return {};
 3035|  20.1k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3039|  20.1k|    {
 3040|  20.1k|        return static_cast<Derived&>(*this);
 3041|  20.1k|    }
_ZN3scn2v34impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5198|  20.1k|    {
 5199|  20.1k|        detail::check_string_type_specs(specs, eh);
 5200|       |
 5201|  20.1k|        SCN_GCC_PUSH
 5202|  20.1k|        SCN_GCC_IGNORE("-Wswitch")
 5203|  20.1k|        SCN_GCC_IGNORE("-Wswitch-default")
 5204|       |
 5205|  20.1k|        SCN_CLANG_PUSH
 5206|  20.1k|        SCN_CLANG_IGNORE("-Wswitch")
 5207|  20.1k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5208|       |
 5209|  20.1k|        switch (specs.type) {
  ------------------
  |  Branch (5209:17): [True: 372, False: 19.7k]
  ------------------
 5210|  1.50k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5210:13): [True: 1.50k, False: 18.6k]
  ------------------
 5211|  1.50k|                m_type = reader_type::word;
 5212|  1.50k|                break;
 5213|       |
 5214|    648|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5214:13): [True: 648, False: 19.5k]
  ------------------
 5215|    648|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5215:21): [True: 126, False: 522]
  ------------------
 5216|    648|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5216:21): [True: 288, False: 234]
  ------------------
 5217|    414|                    m_type = reader_type::custom_word;
 5218|    414|                }
 5219|    234|                else {
 5220|    234|                    m_type = reader_type::word;
 5221|    234|                }
 5222|    648|                break;
 5223|      0|            }
 5224|       |
 5225|     96|            case detail::presentation_type::character:
  ------------------
  |  Branch (5225:13): [True: 96, False: 20.0k]
  ------------------
 5226|     96|                m_type = reader_type::character;
 5227|     96|                break;
 5228|       |
 5229|  3.60k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5229:13): [True: 3.60k, False: 16.5k]
  ------------------
 5230|  3.60k|                m_type = reader_type::character_set;
 5231|  3.60k|                break;
 5232|       |
 5233|  12.1k|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5233:13): [True: 12.1k, False: 8.06k]
  ------------------
 5234|  12.1k|                m_type = reader_type::regex;
 5235|  12.1k|                break;
 5236|       |
 5237|  1.84k|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5237:13): [True: 1.84k, False: 18.3k]
  ------------------
 5238|  1.84k|                m_type = reader_type::regex_escaped;
 5239|  1.84k|                break;
 5240|  20.1k|        }
 5241|       |
 5242|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5243|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5244|  20.1k|    }
_ZNK3scn2v34impl13string_readerIcE19skip_ws_before_readEv:
 5247|  25.8k|    {
 5248|  25.8k|        return m_type == reader_type::word;
 5249|  25.8k|    }
_ZN3scn2v34impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  10.8k|{
 1132|  10.8k|    auto it = src.begin();
 1133|   528k|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 520k, False: 8.72k]
  ------------------
 1134|   520k|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|   520k|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 1.42k, False: 518k]
  ------------------
 1136|  1.42k|            return false;
 1137|  1.42k|        }
 1138|   518k|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 240, False: 518k]
  ------------------
 1139|    240|            return false;
 1140|    240|        }
 1141|   518k|        const auto cp = detail::decode_code_point_exhaustive(
 1142|   518k|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|   518k|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 432, False: 518k]
  ------------------
 1144|    432|            return false;
 1145|    432|        }
 1146|   518k|        it += len;
 1147|   518k|    }
 1148|  8.72k|    return true;
 1149|  10.8k|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2981|    386|{
 2982|    386|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 2983|    386|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2983:13): [True: 386, False: 0]
  ------------------
 2984|    386|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|    386|    static_cast<    \
  |  |  929|    386|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2985|    386|        }
 2986|      0|        else {
 2987|      0|            dest.assign(source.view());
 2988|      0|        }
 2989|       |    }
 2990|       |    else {
 2991|       |        return transcode_impl(source.view(), dest);
 2992|       |    }
 2993|       |
 2994|    386|    return {};
 2995|    386|}
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5091|  3.59k|        {
 5092|  3.59k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5092:17): [True: 564, False: 3.03k]
  ------------------
 5093|    564|                return {};
 5094|    564|            }
 5095|       |
 5096|  3.03k|            auto charset_string = specs.charset_string<SourceCharT>();
 5097|  3.03k|            auto it = detail::to_address(charset_string.begin());
 5098|  3.03k|            auto set = detail::parse_presentation_set(
 5099|  3.03k|                it, detail::to_address(charset_string.end()), nonascii);
 5100|  3.03k|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|  3.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.03k]
  |  |  ------------------
  ------------------
 5101|      0|                return nonascii.err;
 5102|      0|            }
 5103|  3.03k|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|  3.03k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.03k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5104|  3.03k|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|  3.03k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.03k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5105|       |
 5106|  3.03k|            std::sort(nonascii.extra_ranges.begin(),
 5107|  3.03k|                      nonascii.extra_ranges.end());
 5108|  3.03k|            return {};
 5109|  3.03k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback28on_classic_with_extra_rangesEDi:
 5126|   337k|        {
 5127|   337k|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (5127:17): [True: 47.9k, False: 289k]
  ------------------
 5128|  47.9k|                return helper.is_char_set_in_extra_literals(cp);
 5129|  47.9k|            }
 5130|       |
 5131|   289k|            return helper.is_char_set_in_literals(static_cast<char>(cp));
 5132|   337k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDi:
 5074|  47.9k|        {
 5075|       |            // TODO: binary search?
 5076|  47.9k|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (5076:17): [True: 0, False: 47.9k]
  ------------------
 5077|      0|                return false;
 5078|      0|            }
 5079|       |
 5080|  47.9k|            const auto cp_val = static_cast<uint32_t>(cp);
 5081|  47.9k|            return std::find_if(
 5082|  47.9k|                       nonascii.extra_ranges.begin(),
 5083|  47.9k|                       nonascii.extra_ranges.end(),
 5084|  47.9k|                       [cp_val](const auto& pair) noexcept {
 5085|  47.9k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
 5086|  47.9k|                                  static_cast<uint32_t>(pair.second) > cp_val;
 5087|  47.9k|                       }) != nonascii.extra_ranges.end();
 5088|  47.9k|        }
_ZZNK3scn2v34impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
 5084|  9.11M|                       [cp_val](const auto& pair) noexcept {
 5085|  9.11M|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (5085:35): [True: 9.11M, False: 2.30k]
  ------------------
 5086|  9.11M|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (5086:35): [True: 46.0k, False: 9.06M]
  ------------------
 5087|  9.11M|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5064|   296k|        {
 5065|   296k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|   296k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   296k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5066|   296k|            const auto val =
 5067|   296k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5068|   296k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5069|   296k|                    (val % 8)) &
 5070|   296k|                   1u;
 5071|   296k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5117|  8.79k|        {
 5118|  8.79k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5118:17): [True: 1.65k, False: 7.14k]
  ------------------
 5119|  1.65k|                return false;
 5120|  1.65k|            }
 5121|       |
 5122|  7.14k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5123|  8.79k|        }
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5061|  3.59k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5265|    852|    {
 5266|    852|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    852|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    852|        return read_impl(range, specs, value);
 5268|    852|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5283|    852|    {
 5284|    852|        SCN_CLANG_PUSH
 5285|    852|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|    852|        switch (m_type) {
 5288|    248|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 248, False: 604]
  ------------------
 5289|    248|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|     78|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 78, False: 774]
  ------------------
 5292|     78|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|     78|                                                                   value);
 5294|       |
 5295|     30|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 30, False: 822]
  ------------------
 5296|     30|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|    268|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 268, False: 584]
  ------------------
 5299|    268|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|    268|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      2|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 2, False: 850]
  ------------------
 5304|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      2|                    range, specs.charset_string<SourceCharT>(),
 5306|      2|                    specs.regexp_flags, value);
 5307|       |
 5308|    226|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 226, False: 626]
  ------------------
 5309|    226|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|    226|                    range,
 5311|    226|                    get_unescaped_regex_pattern(
 5312|    226|                        specs.charset_string<SourceCharT>()),
 5313|    226|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 852]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|    852|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|    852|        }
 5320|       |
 5321|    852|        SCN_CLANG_POP
 5322|    852|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4808|    248|    {
 4809|    248|        return read_string_impl(range, read_until_classic_space(range), value);
 4810|    248|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4740|    356|{
 4741|    356|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|    356|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|    356|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 130, False: 226]
  ------------------
 4745|    130|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|    130|                                     "Invalid encoding in scanned string");
 4747|    130|    }
 4748|    226|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    226|    static_cast<    \
  |  |  929|    226|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    226|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    226|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 226]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    226|    return SCN_MOVE(result);
  ------------------
  |  |  928|    226|    static_cast<    \
  |  |  929|    226|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    226|}
_ZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2075|    744|{
 2076|       |    if constexpr (ranges::contiguous_range<Range> &&
 2077|       |                  ranges::sized_range<Range> &&
 2078|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2079|       |        auto buf = make_contiguous_buffer(range);
 2080|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2081|       |        return ranges::next(range.begin(),
 2082|       |                            ranges::distance(buf.view().begin(), it));
 2083|       |    }
 2084|    744|    else {
 2085|    744|        auto it = range.begin();
 2086|       |
 2087|    744|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2088|    744|            auto seg = get_contiguous_beginning(range);
 2089|    744|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2090|    744|                seg_it != seg.end()) {
  ------------------
  |  Branch (2090:17): [True: 0, False: 744]
  ------------------
 2091|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2092|      0|            }
 2093|    744|            ranges::advance(it, seg.size());
 2094|    744|        }
 2095|       |
 2096|      0|        return read_until_code_point(
 2097|    744|            ranges::subrange{it, range.end()},
 2098|    744|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2099|    744|    }
 2100|    744|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2048|    744|{
 2049|    744|    auto it = range.begin();
 2050|  9.52k|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 8.95k, False: 576]
  ------------------
 2051|  8.95k|        const auto val =
 2052|  8.95k|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  8.95k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  8.95k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 7.63k, False: 1.32k]
  |  |  ------------------
  ------------------
 2054|  7.63k|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  7.63k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  7.63k|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 168, False: 7.46k]
  ------------------
 2057|    168|                return it;
 2058|    168|            }
 2059|  7.63k|        }
 2060|  8.78k|        it = val.iterator;
 2061|  8.78k|    }
 2062|       |
 2063|    576|    return it;
 2064|    744|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  742|    744|        : m_fptr([](storage fn,
  743|    744|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    744|              cvref<T> obj = *get<T>(fn);
  745|    744|              if constexpr (std::is_void_v<R>) {
  746|    744|                  obj(static_cast<decltype(args)>(args)...);
  747|    744|              }
  748|    744|              else {
  749|    744|                  return obj(static_cast<decltype(args)>(args)...);
  750|    744|              }
  751|    744|          }),
  752|    744|          m_storage(std::addressof(f))
  753|    744|    {
  754|    744|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  743|  7.63k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.63k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  7.63k|              else {
  749|  7.63k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.63k|              }
  751|  7.63k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  7.63k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  7.63k|        else if constexpr (std::is_object_v<T>) {
  688|  7.63k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  7.63k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2098|  7.63k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|    744|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    744|        {
  662|    744|        }
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4829|     78|    {
 4830|     78|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4830:13): [True: 44, False: 34]
  ------------------
 4831|     44|            return read_string_impl(
 4832|     44|                range,
 4833|     44|                read_until_code_unit(
 4834|     44|                    range,
 4835|     44|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4836|     44|                        SourceCharT ch) { return ch == until; }),
 4837|     44|                value);
 4838|     44|        }
 4839|     34|        return read_string_impl(
 4840|     34|            range,
 4841|     34|            read_until_code_units(
 4842|     34|                range, specs.fill.template get_code_units<SourceCharT>()),
 4843|     34|            value);
 4844|     78|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     44|        : m_fptr([](storage fn,
  743|     44|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     44|              cvref<T> obj = *get<T>(fn);
  745|     44|              if constexpr (std::is_void_v<R>) {
  746|     44|                  obj(static_cast<decltype(args)>(args)...);
  747|     44|              }
  748|     44|              else {
  749|     44|                  return obj(static_cast<decltype(args)>(args)...);
  750|     44|              }
  751|     44|          }),
  752|     44|          m_storage(std::addressof(f))
  753|     44|    {
  754|     44|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES1D_c:
  743|  1.66k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.66k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.66k|              else {
  749|  1.66k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.66k|              }
  751|  1.66k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|  1.66k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.66k|        else if constexpr (std::is_object_v<T>) {
  688|  1.66k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.66k|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlcE_clEc:
 4836|  1.66k|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     44|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     44|        {
  662|     44|        }
_ZN3scn2v34impl21read_until_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEESI_RKT0_:
 1994|    102|{
 1995|    102|    static_assert(ranges::common_range<CodeUnits>);
 1996|       |
 1997|       |    if constexpr (ranges::common_range<Range>) {
 1998|       |        return std::search(range.begin(), range.end(), needle.begin(),
 1999|       |                           needle.end());
 2000|       |    }
 2001|    102|    else {
 2002|    102|        auto first = range.begin();
 2003|  1.14k|        while (true) {
  ------------------
  |  Branch (2003:16): [Folded - Ignored]
  ------------------
 2004|  1.14k|            auto it = first;
 2005|  1.40k|            for (auto needle_it = needle.begin();; ++it, (void)++needle_it) {
 2006|  1.40k|                if (needle_it == needle.end()) {
  ------------------
  |  Branch (2006:21): [True: 72, False: 1.33k]
  ------------------
 2007|     72|                    return first;
 2008|     72|                }
 2009|  1.33k|                if (it == range.end()) {
  ------------------
  |  Branch (2009:21): [True: 30, False: 1.30k]
  ------------------
 2010|     30|                    return it;
 2011|     30|                }
 2012|  1.30k|                if (*it != *needle_it) {
  ------------------
  |  Branch (2012:21): [True: 1.04k, False: 258]
  ------------------
 2013|  1.04k|                    break;
 2014|  1.04k|                }
 2015|  1.30k|            }
 2016|  1.04k|            ++first;
 2017|  1.04k|        }
 2018|    102|    }
 2019|    102|}
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4935|     30|    {
 4936|     30|        return read_impl(
 4937|     30|            range,
 4938|     30|            [&](const auto& rng) {
 4939|     30|                return read_string_impl(rng, read_all(rng), value);
 4940|     30|            },
 4941|     30|            detail::priority_tag<1>{});
 4942|     30|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4962|     30|    {
 4963|     30|        return read_cb(range);
 4964|     30|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4938|     30|            [&](const auto& rng) {
 4939|     30|                return read_string_impl(rng, read_all(rng), value);
 4940|     30|            },
_ZN3scn2v34impl8read_allINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 1826|     90|{
 1827|     90|    return ranges::next(range.begin(), range.end());
 1828|     90|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS1_6detail9subrange_8subrangeIS9_S9_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EESL_E4typeESL_SM_:
  312|     90|    {
  313|     90|        ranges::advance(x, bound);
  314|     90|        return x;
  315|     90|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EEvE4typeERSL_SM_:
  274|     90|    {
  275|     90|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|     90|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEvRT_T0_NS0_6detail12priority_tagILm0EEE:
  202|     90|    {
  203|  1.93k|        while (i != bound) {
  ------------------
  |  Branch (203:16): [True: 1.84k, False: 90]
  ------------------
  204|  1.84k|            ++i;
  205|  1.84k|        }
  206|     90|    }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5036|    268|    {
 5037|    268|        auto it = read_source_impl(range, {specs});
 5038|    268|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    268|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 256]
  |  |  ------------------
  ------------------
 5039|     12|            return unexpected(it.error());
 5040|     12|        }
 5041|       |
 5042|    256|        return read_string_impl(range, *it, value);
 5043|    268|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperE:
 5141|    804|    {
 5142|    804|        const bool is_inverted = helper.specs.charset_is_inverted;
 5143|    804|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5144|       |
 5145|    804|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    804|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 804]
  |  |  ------------------
  ------------------
 5146|      0|            return unexpected(e);
 5147|      0|        }
 5148|       |
 5149|    804|        read_source_callback cb_wrapper{helper};
 5150|       |
 5151|    804|        if (accepts_nonascii) {
  ------------------
  |  Branch (5151:13): [True: 504, False: 300]
  ------------------
 5152|    504|            const auto cb = [&](char32_t cp) {
 5153|    504|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5154|    504|            };
 5155|       |
 5156|    504|            if (is_inverted) {
  ------------------
  |  Branch (5156:17): [True: 288, False: 216]
  ------------------
 5157|    288|                auto it = read_until_code_point(range, cb);
 5158|    288|                return check_nonempty(it, range);
 5159|    288|            }
 5160|    216|            auto it = read_while_code_point(range, cb);
 5161|    216|            return check_nonempty(it, range);
 5162|    504|        }
 5163|       |
 5164|    300|        const auto cb = [&](SourceCharT ch) {
 5165|    300|            return cb_wrapper.on_ascii_only(ch);
 5166|    300|        };
 5167|       |
 5168|    300|        if (is_inverted) {
  ------------------
  |  Branch (5168:13): [True: 144, False: 156]
  ------------------
 5169|    144|            auto it = read_until_code_unit(range, cb);
 5170|    144|            return check_nonempty(it, range);
 5171|    144|        }
 5172|    156|        auto it = read_while_code_unit(range, cb);
 5173|    156|        return check_nonempty(it, range);
 5174|    300|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|    504|        : m_fptr([](storage fn,
  743|    504|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    504|              cvref<T> obj = *get<T>(fn);
  745|    504|              if constexpr (std::is_void_v<R>) {
  746|    504|                  obj(static_cast<decltype(args)>(args)...);
  747|    504|              }
  748|    504|              else {
  749|    504|                  return obj(static_cast<decltype(args)>(args)...);
  750|    504|              }
  751|    504|          }),
  752|    504|          m_storage(std::addressof(f))
  753|    504|    {
  754|    504|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEDiE_clES15_Di:
  743|  15.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  15.7k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  15.7k|              else {
  749|  15.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  15.7k|              }
  751|  15.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  15.7k|    {
  684|  15.7k|        if constexpr (std::is_const_v<T>) {
  685|  15.7k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  15.7k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlDiE_clEDi:
 5152|  15.7k|            const auto cb = [&](char32_t cp) {
 5153|  15.7k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5154|  15.7k|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPKSL_:
  665|    504|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    504|        {
  667|    504|        }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEEEEENS0_13scan_expectedIT_EERKSI_T0_:
 5179|    804|    {
 5180|    804|        if (it == range.begin()) {
  ------------------
  |  Branch (5180:13): [True: 36, False: 768]
  ------------------
 5181|     36|            return unexpected_scan_error(
 5182|     36|                scan_error::invalid_scanned_value,
 5183|     36|                "No characters matched in [character set]");
 5184|     36|        }
 5185|       |
 5186|    768|        return it;
 5187|    804|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|    300|        : m_fptr([](storage fn,
  743|    300|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    300|              cvref<T> obj = *get<T>(fn);
  745|    300|              if constexpr (std::is_void_v<R>) {
  746|    300|                  obj(static_cast<decltype(args)>(args)...);
  747|    300|              }
  748|    300|              else {
  749|    300|                  return obj(static_cast<decltype(args)>(args)...);
  750|    300|              }
  751|    300|          }),
  752|    300|          m_storage(std::addressof(f))
  753|    300|    {
  754|    300|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES15_c:
  743|  5.41k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.41k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  5.41k|              else {
  749|  5.41k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.41k|              }
  751|  5.41k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  5.41k|    {
  684|  5.41k|        if constexpr (std::is_const_v<T>) {
  685|  5.41k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  5.41k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlcE_clEc:
 5164|  5.41k|        const auto cb = [&](SourceCharT ch) {
 5165|  5.41k|            return cb_wrapper.on_ascii_only(ch);
 5166|  5.41k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPKSL_:
  665|    300|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    300|        {
  667|    300|        }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4740|    256|{
 4741|    256|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|    256|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|    256|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 96, False: 160]
  ------------------
 4745|     96|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|     96|                                     "Invalid encoding in scanned string");
 4747|     96|    }
 4748|    160|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    160|    static_cast<    \
  |  |  929|    160|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    160|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    160|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 160]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    160|    return SCN_MOVE(result);
  ------------------
  |  |  928|    160|    static_cast<    \
  |  |  929|    160|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    160|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4879|    228|    {
 4880|    228|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|    228|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    228|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    228|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    228|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 228, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    228|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    228|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    228|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    228|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    228|    }                                                  \
  |  |  |  | 3667|    228|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4881|      0|        return read_string_impl(range, it, value);
 4882|    228|    }
_ZN3scn2v34impl24regex_string_reader_implIcE4implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 4901|    684|    {
 4902|       |        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 4903|       |                      !std::is_same_v<SourceCharT, char>) {
 4904|       |            return unexpected_scan_error(
 4905|       |                scan_error::invalid_scanned_value,
 4906|       |                "Regex backend doesn't support wide strings as input");
 4907|       |        }
 4908|    684|        else {
 4909|    684|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4909:17): [True: 684, False: 0]
  ------------------
 4910|    684|                return unexpected_scan_error(
 4911|    684|                    scan_error::invalid_scanned_value,
 4912|    684|                    "Cannot use regex with a non-contiguous source "
 4913|    684|                    "range");
 4914|    684|            }
 4915|       |
 4916|      0|            auto input = get_as_contiguous(range);
 4917|      0|            SCN_TRY(it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4918|      0|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4919|      0|            return ranges::next(range.begin(),
 4920|      0|                                ranges::distance(input.begin(), it));
 4921|      0|        }
 4922|    684|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  958|    684|{
  959|       |    if constexpr (ranges::contiguous_range<Range> &&
  960|       |                  ranges::sized_range<Range>) {
  961|       |        return true;
  962|       |    }
  963|       |    else if constexpr (std::is_same_v<
  964|       |                           ranges::const_iterator_t<Range>,
  965|       |                           typename detail::basic_scan_buffer<
  966|       |                               detail::char_t<Range>>::forward_iterator>) {
  967|       |        auto beg = r.begin();
  968|       |        if (!beg.stores_parent()) {
  969|       |            return true;
  970|       |        }
  971|       |        return beg.parent()->is_contiguous();
  972|       |    }
  973|    684|    else {
  974|    684|        return false;
  975|    684|    }
  976|    684|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5265|  5.71k|    {
 5266|  5.71k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  5.71k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  5.71k|        return read_impl(range, specs, value);
 5268|  5.71k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5283|  5.71k|    {
 5284|  5.71k|        SCN_CLANG_PUSH
 5285|  5.71k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|  5.71k|        switch (m_type) {
 5288|    308|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 308, False: 5.41k]
  ------------------
 5289|    308|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|     60|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 60, False: 5.65k]
  ------------------
 5292|     60|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|     60|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 5.71k]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|    930|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 930, False: 4.78k]
  ------------------
 5299|    930|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|    930|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|  4.03k|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 4.03k, False: 1.68k]
  ------------------
 5304|  4.03k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|  4.03k|                    range, specs.charset_string<SourceCharT>(),
 5306|  4.03k|                    specs.regexp_flags, value);
 5307|       |
 5308|    388|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 388, False: 5.33k]
  ------------------
 5309|    388|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|    388|                    range,
 5311|    388|                    get_unescaped_regex_pattern(
 5312|    388|                        specs.charset_string<SourceCharT>()),
 5313|    388|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 5.71k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|  5.71k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|  5.71k|        }
 5320|       |
 5321|  5.71k|        SCN_CLANG_POP
 5322|  5.71k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4808|    938|    {
 4809|    938|        return read_string_impl(range, read_until_classic_space(range), value);
 4810|    938|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4740|    998|{
 4741|    998|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|    998|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|    998|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 326, False: 672]
  ------------------
 4745|    326|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|    326|                                     "Invalid encoding in scanned string");
 4747|    326|    }
 4748|    672|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    672|    static_cast<    \
  |  |  929|    672|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    672|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    672|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 672]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    672|    return SCN_MOVE(result);
  ------------------
  |  |  928|    672|    static_cast<    \
  |  |  929|    672|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    672|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3000|  1.79k|{
 3001|  1.79k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3002|  1.79k|        dest.assign(source.view());
 3003|       |    }
 3004|       |    else {
 3005|       |        return transcode_impl(source.view(), dest);
 3006|       |    }
 3007|       |
 3008|  1.79k|    return {};
 3009|  1.79k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2075|  2.81k|{
 2076|       |    if constexpr (ranges::contiguous_range<Range> &&
 2077|       |                  ranges::sized_range<Range> &&
 2078|  2.81k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2079|  2.81k|        auto buf = make_contiguous_buffer(range);
 2080|  2.81k|        auto it = find_classic_space_narrow_fast(buf.view());
 2081|  2.81k|        return ranges::next(range.begin(),
 2082|  2.81k|                            ranges::distance(buf.view().begin(), it));
 2083|       |    }
 2084|       |    else {
 2085|       |        auto it = range.begin();
 2086|       |
 2087|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2088|       |            auto seg = get_contiguous_beginning(range);
 2089|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2090|       |                seg_it != seg.end()) {
 2091|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2092|       |            }
 2093|       |            ranges::advance(it, seg.size());
 2094|       |        }
 2095|       |
 2096|       |        return read_until_code_point(
 2097|       |            ranges::subrange{it, range.end()},
 2098|       |            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2099|       |    }
 2100|  2.81k|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4829|     60|    {
 4830|     60|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4830:13): [True: 30, False: 30]
  ------------------
 4831|     30|            return read_string_impl(
 4832|     30|                range,
 4833|     30|                read_until_code_unit(
 4834|     30|                    range,
 4835|     30|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4836|     30|                        SourceCharT ch) { return ch == until; }),
 4837|     30|                value);
 4838|     30|        }
 4839|     30|        return read_string_impl(
 4840|     30|            range,
 4841|     30|            read_until_code_units(
 4842|     30|                range, specs.fill.template get_code_units<SourceCharT>()),
 4843|     30|            value);
 4844|     60|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     30|        : m_fptr([](storage fn,
  743|     30|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     30|              cvref<T> obj = *get<T>(fn);
  745|     30|              if constexpr (std::is_void_v<R>) {
  746|     30|                  obj(static_cast<decltype(args)>(args)...);
  747|     30|              }
  748|     30|              else {
  749|     30|                  return obj(static_cast<decltype(args)>(args)...);
  750|     30|              }
  751|     30|          }),
  752|     30|          m_storage(std::addressof(f))
  753|     30|    {
  754|     30|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES1B_c:
  743|    698|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    698|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    698|              else {
  749|    698|                  return obj(static_cast<decltype(args)>(args)...);
  750|    698|              }
  751|    698|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    698|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    698|        else if constexpr (std::is_object_v<T>) {
  688|    698|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    698|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlcE_clEc:
 4836|    698|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     30|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     30|        {
  662|     30|        }
_ZN3scn2v34impl21read_until_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 1994|     90|{
 1995|     90|    static_assert(ranges::common_range<CodeUnits>);
 1996|       |
 1997|     90|    if constexpr (ranges::common_range<Range>) {
 1998|     90|        return std::search(range.begin(), range.end(), needle.begin(),
 1999|     90|                           needle.end());
 2000|       |    }
 2001|       |    else {
 2002|       |        auto first = range.begin();
 2003|       |        while (true) {
 2004|       |            auto it = first;
 2005|       |            for (auto needle_it = needle.begin();; ++it, (void)++needle_it) {
 2006|       |                if (needle_it == needle.end()) {
 2007|       |                    return first;
 2008|       |                }
 2009|       |                if (it == range.end()) {
 2010|       |                    return it;
 2011|       |                }
 2012|       |                if (*it != *needle_it) {
 2013|       |                    break;
 2014|       |                }
 2015|       |            }
 2016|       |            ++first;
 2017|       |        }
 2018|       |    }
 2019|     90|}
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5036|    930|    {
 5037|    930|        auto it = read_source_impl(range, {specs});
 5038|    930|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    930|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 342, False: 588]
  |  |  ------------------
  ------------------
 5039|    342|            return unexpected(it.error());
 5040|    342|        }
 5041|       |
 5042|    588|        return read_string_impl(range, *it, value);
 5043|    930|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5141|  2.79k|    {
 5142|  2.79k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5143|  2.79k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5144|       |
 5145|  2.79k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.79k]
  |  |  ------------------
  ------------------
 5146|      0|            return unexpected(e);
 5147|      0|        }
 5148|       |
 5149|  2.79k|        read_source_callback cb_wrapper{helper};
 5150|       |
 5151|  2.79k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5151:13): [True: 2.52k, False: 264]
  ------------------
 5152|  2.52k|            const auto cb = [&](char32_t cp) {
 5153|  2.52k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5154|  2.52k|            };
 5155|       |
 5156|  2.52k|            if (is_inverted) {
  ------------------
  |  Branch (5156:17): [True: 204, False: 2.32k]
  ------------------
 5157|    204|                auto it = read_until_code_point(range, cb);
 5158|    204|                return check_nonempty(it, range);
 5159|    204|            }
 5160|  2.32k|            auto it = read_while_code_point(range, cb);
 5161|  2.32k|            return check_nonempty(it, range);
 5162|  2.52k|        }
 5163|       |
 5164|    264|        const auto cb = [&](SourceCharT ch) {
 5165|    264|            return cb_wrapper.on_ascii_only(ch);
 5166|    264|        };
 5167|       |
 5168|    264|        if (is_inverted) {
  ------------------
  |  Branch (5168:13): [True: 114, False: 150]
  ------------------
 5169|    114|            auto it = read_until_code_unit(range, cb);
 5170|    114|            return check_nonempty(it, range);
 5171|    114|        }
 5172|    150|        auto it = read_while_code_unit(range, cb);
 5173|    150|        return check_nonempty(it, range);
 5174|    264|    }
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2048|  2.52k|{
 2049|  2.52k|    auto it = range.begin();
 2050|   323k|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 323k, False: 168]
  ------------------
 2051|   323k|        const auto val =
 2052|   323k|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|   323k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   323k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 321k, False: 1.34k]
  |  |  ------------------
  ------------------
 2054|   321k|            const auto cp = detail::decode_code_point_exhaustive(
 2055|   321k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|   321k|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 2.35k, False: 319k]
  ------------------
 2057|  2.35k|                return it;
 2058|  2.35k|            }
 2059|   321k|        }
 2060|   320k|        it = val.iterator;
 2061|   320k|    }
 2062|       |
 2063|    168|    return it;
 2064|  2.52k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1886|   323k|{
 1887|   323k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   323k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   323k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|   323k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|   323k|    auto it = range.begin();
 1891|   323k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|   323k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   323k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.34k, False: 321k]
  |  |  ------------------
  ------------------
 1894|  1.34k|        ++it;
 1895|  1.34k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|  1.34k|        return {it, {}};
 1897|  1.34k|    }
 1898|       |
 1899|   321k|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 276k, False: 45.5k]
  ------------------
 1900|   276k|        ++it;
 1901|   276k|        return {it, string_type(1, *range.begin())};
 1902|   276k|    }
 1903|       |
 1904|  45.5k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|  45.5k|    return {it, string_type{range.begin(), it}};
 1906|   321k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1154|  1.34k|{
 1155|  1.34k|    auto it = input.begin();
 1156|  1.87k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 1.81k, False: 60]
  ------------------
 1157|  1.81k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 1.28k, False: 534]
  ------------------
 1158|  1.28k|            break;
 1159|  1.28k|        }
 1160|  1.81k|    }
 1161|  1.34k|    return it;
 1162|  1.34k|}
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeERSA_SE_SB_:
  282|  45.5k|    {
  283|  45.5k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  45.5k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeERSB_SE_SA_:
  211|  45.5k|    {
  212|  45.5k|        if (fn::abs(n) >= fn::abs(bound - i)) {
  ------------------
  |  Branch (212:13): [True: 66, False: 45.5k]
  ------------------
  213|     66|            auto dist = bound - i;
  214|     66|            fn::impl_i_s(i, bound, priority_tag<2>{});
  215|     66|            return dist;
  216|     66|        }
  217|  45.5k|        fn::impl_i_n(i, n, priority_tag<1>{});
  218|  45.5k|        return n;
  219|  45.5k|    }
_ZN3scn2v36ranges6detail8advance_2fn3absIlEET_S6_:
  131|  91.1k|    {
  132|  91.1k|        if (t < T{0}) {
  ------------------
  |  Branch (132:13): [True: 0, False: 91.1k]
  ------------------
  133|      0|            return -t;
  134|      0|        }
  135|  91.1k|        return t;
  136|  91.1k|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKccE8is_validEv:
 1877|   323k|    {
 1878|   323k|        return !codepoint.empty();
 1879|   323k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|  2.52k|        : m_fptr([](storage fn,
  743|  2.52k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.52k|              cvref<T> obj = *get<T>(fn);
  745|  2.52k|              if constexpr (std::is_void_v<R>) {
  746|  2.52k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.52k|              }
  748|  2.52k|              else {
  749|  2.52k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.52k|              }
  751|  2.52k|          }),
  752|  2.52k|          m_storage(std::addressof(f))
  753|  2.52k|    {
  754|  2.52k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clES13_Di:
  743|   321k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   321k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   321k|              else {
  749|   321k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   321k|              }
  751|   321k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|   321k|    {
  684|   321k|        if constexpr (std::is_const_v<T>) {
  685|   321k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   321k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlDiE_clEDi:
 5152|   321k|            const auto cb = [&](char32_t cp) {
 5153|   321k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5154|   321k|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|  2.52k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  2.52k|        {
  667|  2.52k|        }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5179|  2.79k|    {
 5180|  2.79k|        if (it == range.begin()) {
  ------------------
  |  Branch (5180:13): [True: 1.02k, False: 1.76k]
  ------------------
 5181|  1.02k|            return unexpected_scan_error(
 5182|  1.02k|                scan_error::invalid_scanned_value,
 5183|  1.02k|                "No characters matched in [character set]");
 5184|  1.02k|        }
 5185|       |
 5186|  1.76k|        return it;
 5187|  2.79k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2069|  2.32k|{
 2070|  2.32k|    return read_until_code_point(range, std::not_fn(pred));
 2071|  2.32k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|    264|        : m_fptr([](storage fn,
  743|    264|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    264|              cvref<T> obj = *get<T>(fn);
  745|    264|              if constexpr (std::is_void_v<R>) {
  746|    264|                  obj(static_cast<decltype(args)>(args)...);
  747|    264|              }
  748|    264|              else {
  749|    264|                  return obj(static_cast<decltype(args)>(args)...);
  750|    264|              }
  751|    264|          }),
  752|    264|          m_storage(std::addressof(f))
  753|    264|    {
  754|    264|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  3.38k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.38k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.38k|              else {
  749|  3.38k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.38k|              }
  751|  3.38k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  3.38k|    {
  684|  3.38k|        if constexpr (std::is_const_v<T>) {
  685|  3.38k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.38k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5164|  3.38k|        const auto cb = [&](SourceCharT ch) {
 5165|  3.38k|            return cb_wrapper.on_ascii_only(ch);
 5166|  3.38k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|    264|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    264|        {
  667|    264|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4740|  1.26k|{
 4741|  1.26k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|  1.26k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|  1.26k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 146, False: 1.12k]
  ------------------
 4745|    146|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|    146|                                     "Invalid encoding in scanned string");
 4747|    146|    }
 4748|  1.12k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  1.12k|    static_cast<    \
  |  |  929|  1.12k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|  1.12k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.12k]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|  1.12k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  1.12k|    static_cast<    \
  |  |  929|  1.12k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|  1.12k|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4879|  4.42k|    {
 4880|  4.42k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|  4.42k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.42k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.42k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.74k, False: 680]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.74k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.74k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.74k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.74k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.74k|    }                                                  \
  |  |  |  | 3667|  4.42k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    680|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4881|    680|        return read_string_impl(range, it, value);
 4882|  4.42k|    }
_ZN3scn2v34impl24regex_string_reader_implIcE4implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 4901|  13.2k|    {
 4902|       |        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 4903|       |                      !std::is_same_v<SourceCharT, char>) {
 4904|       |            return unexpected_scan_error(
 4905|       |                scan_error::invalid_scanned_value,
 4906|       |                "Regex backend doesn't support wide strings as input");
 4907|       |        }
 4908|  13.2k|        else {
 4909|  13.2k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4909:17): [True: 0, False: 13.2k]
  ------------------
 4910|      0|                return unexpected_scan_error(
 4911|      0|                    scan_error::invalid_scanned_value,
 4912|      0|                    "Cannot use regex with a non-contiguous source "
 4913|      0|                    "range");
 4914|      0|            }
 4915|       |
 4916|  13.2k|            auto input = get_as_contiguous(range);
 4917|  13.2k|            SCN_TRY(it,
  ------------------
  |  | 3668|  13.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  13.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  13.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 11.2k, False: 2.04k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  11.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  11.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  11.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  11.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  11.2k|    }                                                  \
  |  |  |  | 3667|  13.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4918|  2.04k|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4919|  2.04k|            return ranges::next(range.begin(),
 4920|  2.04k|                                ranges::distance(input.begin(), it));
 4921|  13.2k|        }
 4922|  13.2k|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  958|  13.2k|{
  959|       |    if constexpr (ranges::contiguous_range<Range> &&
  960|  13.2k|                  ranges::sized_range<Range>) {
  961|  13.2k|        return true;
  962|       |    }
  963|       |    else if constexpr (std::is_same_v<
  964|       |                           ranges::const_iterator_t<Range>,
  965|       |                           typename detail::basic_scan_buffer<
  966|       |                               detail::char_t<Range>>::forward_iterator>) {
  967|       |        auto beg = r.begin();
  968|       |        if (!beg.stores_parent()) {
  969|       |            return true;
  970|       |        }
  971|       |        return beg.parent()->is_contiguous();
  972|       |    }
  973|       |    else {
  974|       |        return false;
  975|       |    }
  976|  13.2k|}
_ZN3scn2v34impl17get_as_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaT_:
 1064|  13.2k|{
 1065|  13.2k|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  |  924|  13.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1066|       |
 1067|       |    if constexpr (ranges::contiguous_range<Range> &&
 1068|  13.2k|                  ranges::sized_range<Range>) {
 1069|  13.2k|        return r;
 1070|       |    }
 1071|       |    else if constexpr (std::is_same_v<
 1072|       |                           ranges::const_iterator_t<Range>,
 1073|       |                           typename detail::basic_scan_buffer<
 1074|       |                               detail::char_t<Range>>::forward_iterator>) {
 1075|       |        if constexpr (ranges::common_range<Range>) {
 1076|       |            return detail::make_string_view_from_pointers(
 1077|       |                r.begin().to_contiguous_segment_iterator(),
 1078|       |                r.end().to_contiguous_segment_iterator());
 1079|       |        }
 1080|       |        else {
 1081|       |            return r.begin().contiguous_segment();
 1082|       |        }
 1083|       |    }
 1084|       |    else {
 1085|       |        SCN_EXPECT(false);
 1086|       |        SCN_UNREACHABLE;
 1087|       |        // for return type deduction
 1088|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1089|       |    }
 1090|  13.2k|}
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  980|  13.2k|{
  981|       |    if constexpr (ranges::contiguous_range<Range> &&
  982|  13.2k|                  ranges::sized_range<Range>) {
  983|  13.2k|        return true;
  984|       |    }
  985|       |    else if constexpr (std::is_same_v<
  986|       |                           ranges::const_iterator_t<Range>,
  987|       |                           typename detail::basic_scan_buffer<
  988|       |                               detail::char_t<Range>>::forward_iterator>) {
  989|       |        auto beg = r.begin();
  990|       |        if (beg.contiguous_segment().empty()) {
  991|       |            return false;
  992|       |        }
  993|       |        if constexpr (ranges::common_range<Range>) {
  994|       |            return beg.contiguous_segment().end() ==
  995|       |                   ranges::end(r).contiguous_segment().end();
  996|       |        }
  997|       |        else {
  998|       |            if (beg.stores_parent()) {
  999|       |                return beg.contiguous_segment().end() ==
 1000|       |                       beg.parent()->current_view().end();
 1001|       |            }
 1002|       |            return true;
 1003|       |        }
 1004|       |    }
 1005|       |    else {
 1006|       |        return false;
 1007|       |    }
 1008|  13.2k|}
_ZN3scn2v34impl22read_regex_string_implIcNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_:
 4334|  13.2k|{
 4335|  13.2k|    static_assert(ranges::contiguous_range<Input> &&
 4336|  13.2k|                  ranges::borrowed_range<Input> &&
 4337|  13.2k|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
 4338|       |
 4339|  13.2k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 4340|  13.2k|    std::basic_regex<CharT> re{};
 4341|  13.2k|    try {
 4342|  13.2k|        SCN_TRY(re_flags, make_regex_flags(flags));
  ------------------
  |  | 3668|  13.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  13.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  13.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 13.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  13.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  13.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4343|  13.2k|        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
 4344|  13.2k|                                     re_flags | std::regex_constants::nosubs};
 4345|  13.2k|    }
 4346|  13.2k|    catch (const std::regex_error& err) {
 4347|  7.07k|        return unexpected_scan_error(scan_error::invalid_format_string,
 4348|  7.07k|                                     "Invalid regex");
 4349|  7.07k|    }
 4350|       |
 4351|  6.18k|    std::match_results<const CharT*> matches{};
 4352|  6.18k|    try {
 4353|  6.18k|        bool found = std::regex_search(input.data(),
 4354|  6.18k|                                       input.data() + input.size(), matches, re,
 4355|  6.18k|                                       std::regex_constants::match_continuous);
 4356|  6.18k|        if (!found || matches.prefix().matched) {
  ------------------
  |  Branch (4356:13): [True: 4.14k, False: 2.04k]
  |  Branch (4356:23): [True: 0, False: 2.04k]
  ------------------
 4357|  3.92k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4358|  3.92k|                                         "Regular expression didn't match");
 4359|  3.92k|        }
 4360|  6.18k|    }
 4361|  6.18k|    catch (const std::regex_error& err) {
 4362|    222|        return unexpected_scan_error(scan_error::invalid_format_string,
 4363|    222|                                     "Regex matching failed with an error");
 4364|    222|    }
 4365|       |
 4366|  2.04k|    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4367|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
 4368|       |    auto re =
 4369|       |#if SCN_REGEX_BOOST_USE_ICU
 4370|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
 4371|       |                             make_regex_flags(flags) |
 4372|       |                                 boost::regex_constants::no_except |
 4373|       |                                 boost::regex_constants::nosubs);
 4374|       |#else
 4375|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
 4376|       |                                  make_regex_flags(flags) |
 4377|       |                                      boost::regex_constants::no_except |
 4378|       |                                      boost::regex_constants::nosubs};
 4379|       |#endif
 4380|       |    if (re.status() != 0) {
 4381|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4382|       |                                     "Invalid regex");
 4383|       |    }
 4384|       |
 4385|       |    boost::match_results<const CharT*> matches{};
 4386|       |    try {
 4387|       |        bool found =
 4388|       |#if SCN_REGEX_BOOST_USE_ICU
 4389|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
 4390|       |                                   matches, re,
 4391|       |                                   boost::regex_constants::match_continuous);
 4392|       |#else
 4393|       |            boost::regex_search(input.data(), input.data() + input.size(),
 4394|       |                                matches, re,
 4395|       |                                boost::regex_constants::match_continuous);
 4396|       |#endif
 4397|       |        if (!found || matches.prefix().matched) {
 4398|       |            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4399|       |                                         "Regular expression didn't match");
 4400|       |        }
 4401|       |    }
 4402|       |    catch (const std::runtime_error& err) {
 4403|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4404|       |                                     "Regex matching failed with an error");
 4405|       |    }
 4406|       |
 4407|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4408|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
 4409|       |    static_assert(std::is_same_v<CharT, char>);
 4410|       |    std::string flagged_pattern{};
 4411|       |    auto re = [&]() {
 4412|       |        auto [opts, flagstr] = make_regex_flags(flags);
 4413|       |        opts.set_never_capture(true);
 4414|       |        if (flagstr.empty()) {
 4415|       |            return re2::RE2{pattern, opts};
 4416|       |        }
 4417|       |        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4418|       |        flagged_pattern.append(flagstr);
 4419|       |        flagged_pattern.append(pattern);
 4420|       |        return re2::RE2{flagged_pattern, opts};
 4421|       |    }();
 4422|       |    if (!re.ok()) {
 4423|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4424|       |                                     "Failed to parse regular expression");
 4425|       |    }
 4426|       |
 4427|       |    auto new_input = detail::make_string_view_from_pointers(
 4428|       |        detail::to_address(input.begin()), detail::to_address(input.end()));
 4429|       |    bool found = re2::RE2::Consume(&new_input, re);
 4430|       |    if (!found) {
 4431|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4432|       |                                     "Regular expression didn't match");
 4433|       |    }
 4434|       |    return input.begin() + ranges::distance(input.data(), new_input.data());
 4435|       |#endif  // SCN_REGEX_BACKEND == ...
 4436|  6.18k|}
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEcEEDav:
 5797|  7.35k|{
 5798|       |    if constexpr (std::is_same_v<T, bool>) {
 5799|       |        return reader_impl_for_bool<CharT>{};
 5800|       |    }
 5801|       |    else if constexpr (std::is_same_v<T, char>) {
 5802|       |        return reader_impl_for_char<CharT>{};
 5803|       |    }
 5804|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5805|       |        return reader_impl_for_wchar<CharT>{};
 5806|       |    }
 5807|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5808|       |        return reader_impl_for_code_point<CharT>{};
 5809|       |    }
 5810|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5811|       |                       std::is_same_v<T, std::wstring_view>) {
 5812|       |        return reader_impl_for_string<CharT>{};
 5813|       |    }
 5814|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5815|  7.35k|                       std::is_same_v<T, std::wstring>) {
 5816|  7.35k|        return reader_impl_for_string<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5819|       |                       std::is_same_v<T, wregex_matches>) {
 5820|       |        return reader_impl_for_regex_matches<CharT>{};
 5821|       |    }
 5822|       |    else if constexpr (std::is_same_v<T, void*>) {
 5823|       |        return reader_impl_for_voidptr<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_floating_point_v<T>) {
 5826|       |        return reader_impl_for_float<CharT>{};
 5827|       |    }
 5828|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5829|       |                       !std::is_same_v<T, wchar_t> &&
 5830|       |                       !std::is_same_v<T, char32_t> &&
 5831|       |                       !std::is_same_v<T, bool>) {
 5832|       |        return reader_impl_for_int<CharT>{};
 5833|       |    }
 5834|       |    else {
 5835|       |        return reader_impl_for_monostate<CharT>{};
 5836|       |    }
 5837|  7.35k|}
_ZN3scn2v34impl22transcode_if_necessaryIcwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2981|    386|{
 2982|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 2983|       |        if (source.stores_allocated_string()) {
 2984|       |            dest.assign(SCN_MOVE(source.get_allocated_string()));
 2985|       |        }
 2986|       |        else {
 2987|       |            dest.assign(source.view());
 2988|       |        }
 2989|       |    }
 2990|    386|    else {
 2991|    386|        return transcode_impl(source.view(), dest);
 2992|    386|    }
 2993|       |
 2994|      0|    return {};
 2995|    386|}
_ZN3scn2v34impl14transcode_implIcwEENS0_10scan_errorENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEERNS4_12basic_stringIT0_NS7_ISB_EENS4_9allocatorISB_EEEE:
 2956|  2.18k|{
 2957|  2.18k|    dst.clear();
 2958|  2.18k|    transcode_valid_to_string(src, dst);
 2959|  2.18k|    return {};
 2960|  2.18k|}
_ZN3scn2v34impl25transcode_valid_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1390|  2.18k|{
 1391|  2.18k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1392|       |
 1393|  2.18k|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  |  924|  2.18k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.18k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1394|  2.18k|    if constexpr (sizeof(SourceCharT) == 1) {
 1395|       |        if constexpr (sizeof(DestCharT) == 2) {
 1396|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1397|       |            std::u32string tmp;
 1398|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1399|       |            return transcode_to_string_impl_32to16<true>(
 1400|       |                std::u32string_view{tmp}, dest);
 1401|       |        }
 1402|  2.18k|        else if constexpr (sizeof(DestCharT) == 4) {
 1403|  2.18k|            return transcode_valid_to_string_impl_to32(src, dest);
 1404|  2.18k|        }
 1405|       |    }
 1406|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1407|       |        if constexpr (sizeof(DestCharT) == 1) {
 1408|       |            std::u32string tmp;
 1409|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1410|       |            return transcode_to_string_impl_32to8<true>(
 1411|       |                std::u32string_view{tmp}, dest);
 1412|       |        }
 1413|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1414|       |            return trasncode_valid_to_string_impl_to32(src, dest);
 1415|       |        }
 1416|       |    }
 1417|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1418|       |        if constexpr (sizeof(DestCharT) == 1) {
 1419|       |            return transcode_to_string_impl_32to8<true>(src, dest);
 1420|       |        }
 1421|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1422|       |            return transcode_to_string_impl_32to16<true>(src, dest);
 1423|       |        }
 1424|       |    }
 1425|       |
 1426|  2.18k|    SCN_EXPECT(false);
  ------------------
  |  |  924|  2.18k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.18k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1427|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1428|  2.18k|}
_ZN3scn2v34impl35transcode_valid_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1264|  2.18k|{
 1265|  2.18k|    static_assert(sizeof(DestCharT) == 4);
 1266|       |
 1267|  2.18k|    auto it = src.begin();
 1268|   127k|    while (it != src.end()) {
  ------------------
  |  Branch (1268:12): [True: 124k, False: 2.18k]
  ------------------
 1269|   124k|        auto res = get_next_code_point_valid(
 1270|   124k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1271|   124k|                                                                 src.end()));
 1272|   124k|        SCN_EXPECT(res.value < detail::invalid_code_point);
  ------------------
  |  |  924|   124k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   124k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1273|   124k|        dest.push_back(res.value);
 1274|   124k|        it = detail::make_string_view_iterator(src, res.iterator);
 1275|   124k|    }
 1276|  2.18k|}
_ZN3scn2v34impl25get_next_code_point_validIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1188|   124k|{
 1189|   124k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   124k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   124k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1190|       |
 1191|   124k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1192|   124k|    SCN_EXPECT(len <= input.size());
  ------------------
  |  |  924|   124k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   124k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1193|       |
 1194|   124k|    return {input.begin() + len,
 1195|   124k|            detail::decode_code_point_exhaustive_valid(input.substr(0, len))};
 1196|   124k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5265|    852|    {
 5266|    852|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    852|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    852|        return read_impl(range, specs, value);
 5268|    852|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5283|    852|    {
 5284|    852|        SCN_CLANG_PUSH
 5285|    852|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|    852|        switch (m_type) {
 5288|    248|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 248, False: 604]
  ------------------
 5289|    248|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|     78|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 78, False: 774]
  ------------------
 5292|     78|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|     78|                                                                   value);
 5294|       |
 5295|     30|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 30, False: 822]
  ------------------
 5296|     30|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|    268|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 268, False: 584]
  ------------------
 5299|    268|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|    268|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      2|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 2, False: 850]
  ------------------
 5304|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      2|                    range, specs.charset_string<SourceCharT>(),
 5306|      2|                    specs.regexp_flags, value);
 5307|       |
 5308|    226|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 226, False: 626]
  ------------------
 5309|    226|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|    226|                    range,
 5311|    226|                    get_unescaped_regex_pattern(
 5312|    226|                        specs.charset_string<SourceCharT>()),
 5313|    226|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 852]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|    852|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|    852|        }
 5320|       |
 5321|    852|        SCN_CLANG_POP
 5322|    852|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4808|    248|    {
 4809|    248|        return read_string_impl(range, read_until_classic_space(range), value);
 4810|    248|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4740|    356|{
 4741|    356|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|    356|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|    356|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 130, False: 226]
  ------------------
 4745|    130|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|    130|                                     "Invalid encoding in scanned string");
 4747|    130|    }
 4748|    226|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    226|    static_cast<    \
  |  |  929|    226|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    226|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    226|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 226]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    226|    return SCN_MOVE(result);
  ------------------
  |  |  928|    226|    static_cast<    \
  |  |  929|    226|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    226|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4829|     78|    {
 4830|     78|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4830:13): [True: 44, False: 34]
  ------------------
 4831|     44|            return read_string_impl(
 4832|     44|                range,
 4833|     44|                read_until_code_unit(
 4834|     44|                    range,
 4835|     44|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4836|     44|                        SourceCharT ch) { return ch == until; }),
 4837|     44|                value);
 4838|     44|        }
 4839|     34|        return read_string_impl(
 4840|     34|            range,
 4841|     34|            read_until_code_units(
 4842|     34|                range, specs.fill.template get_code_units<SourceCharT>()),
 4843|     34|            value);
 4844|     78|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     44|        : m_fptr([](storage fn,
  743|     44|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     44|              cvref<T> obj = *get<T>(fn);
  745|     44|              if constexpr (std::is_void_v<R>) {
  746|     44|                  obj(static_cast<decltype(args)>(args)...);
  747|     44|              }
  748|     44|              else {
  749|     44|                  return obj(static_cast<decltype(args)>(args)...);
  750|     44|              }
  751|     44|          }),
  752|     44|          m_storage(std::addressof(f))
  753|     44|    {
  754|     44|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES1D_c:
  743|  1.66k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.66k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.66k|              else {
  749|  1.66k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.66k|              }
  751|  1.66k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|  1.66k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.66k|        else if constexpr (std::is_object_v<T>) {
  688|  1.66k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.66k|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlcE_clEc:
 4836|  1.66k|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     44|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     44|        {
  662|     44|        }
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4935|     30|    {
 4936|     30|        return read_impl(
 4937|     30|            range,
 4938|     30|            [&](const auto& rng) {
 4939|     30|                return read_string_impl(rng, read_all(rng), value);
 4940|     30|            },
 4941|     30|            detail::priority_tag<1>{});
 4942|     30|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4962|     30|    {
 4963|     30|        return read_cb(range);
 4964|     30|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4938|     30|            [&](const auto& rng) {
 4939|     30|                return read_string_impl(rng, read_all(rng), value);
 4940|     30|            },
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5036|    268|    {
 5037|    268|        auto it = read_source_impl(range, {specs});
 5038|    268|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    268|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 256]
  |  |  ------------------
  ------------------
 5039|     12|            return unexpected(it.error());
 5040|     12|        }
 5041|       |
 5042|    256|        return read_string_impl(range, *it, value);
 5043|    268|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4740|    256|{
 4741|    256|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|    256|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|    256|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 96, False: 160]
  ------------------
 4745|     96|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|     96|                                     "Invalid encoding in scanned string");
 4747|     96|    }
 4748|    160|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    160|    static_cast<    \
  |  |  929|    160|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    160|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    160|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 160]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    160|    return SCN_MOVE(result);
  ------------------
  |  |  928|    160|    static_cast<    \
  |  |  929|    160|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    160|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4879|    228|    {
 4880|    228|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|    228|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    228|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    228|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    228|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 228, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    228|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    228|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    228|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    228|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    228|    }                                                  \
  |  |  |  | 3667|    228|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4881|      0|        return read_string_impl(range, it, value);
 4882|    228|    }
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5265|  5.71k|    {
 5266|  5.71k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  5.71k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  5.71k|        return read_impl(range, specs, value);
 5268|  5.71k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5283|  5.71k|    {
 5284|  5.71k|        SCN_CLANG_PUSH
 5285|  5.71k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|  5.71k|        switch (m_type) {
 5288|    308|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 308, False: 5.41k]
  ------------------
 5289|    308|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|     60|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 60, False: 5.65k]
  ------------------
 5292|     60|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|     60|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 5.71k]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|    930|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 930, False: 4.78k]
  ------------------
 5299|    930|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|    930|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|  4.03k|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 4.03k, False: 1.68k]
  ------------------
 5304|  4.03k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|  4.03k|                    range, specs.charset_string<SourceCharT>(),
 5306|  4.03k|                    specs.regexp_flags, value);
 5307|       |
 5308|    388|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 388, False: 5.33k]
  ------------------
 5309|    388|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|    388|                    range,
 5311|    388|                    get_unescaped_regex_pattern(
 5312|    388|                        specs.charset_string<SourceCharT>()),
 5313|    388|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 5.71k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|  5.71k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|  5.71k|        }
 5320|       |
 5321|  5.71k|        SCN_CLANG_POP
 5322|  5.71k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4808|    938|    {
 4809|    938|        return read_string_impl(range, read_until_classic_space(range), value);
 4810|    938|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4740|    998|{
 4741|    998|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|    998|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|    998|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 326, False: 672]
  ------------------
 4745|    326|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|    326|                                     "Invalid encoding in scanned string");
 4747|    326|    }
 4748|    672|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    672|    static_cast<    \
  |  |  929|    672|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    672|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    672|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 672]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    672|    return SCN_MOVE(result);
  ------------------
  |  |  928|    672|    static_cast<    \
  |  |  929|    672|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    672|}
_ZN3scn2v34impl22transcode_if_necessaryIcwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3000|  1.79k|{
 3001|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3002|       |        dest.assign(source.view());
 3003|       |    }
 3004|  1.79k|    else {
 3005|  1.79k|        return transcode_impl(source.view(), dest);
 3006|  1.79k|    }
 3007|       |
 3008|      0|    return {};
 3009|  1.79k|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4829|     60|    {
 4830|     60|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4830:13): [True: 30, False: 30]
  ------------------
 4831|     30|            return read_string_impl(
 4832|     30|                range,
 4833|     30|                read_until_code_unit(
 4834|     30|                    range,
 4835|     30|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4836|     30|                        SourceCharT ch) { return ch == until; }),
 4837|     30|                value);
 4838|     30|        }
 4839|     30|        return read_string_impl(
 4840|     30|            range,
 4841|     30|            read_until_code_units(
 4842|     30|                range, specs.fill.template get_code_units<SourceCharT>()),
 4843|     30|            value);
 4844|     60|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     30|        : m_fptr([](storage fn,
  743|     30|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     30|              cvref<T> obj = *get<T>(fn);
  745|     30|              if constexpr (std::is_void_v<R>) {
  746|     30|                  obj(static_cast<decltype(args)>(args)...);
  747|     30|              }
  748|     30|              else {
  749|     30|                  return obj(static_cast<decltype(args)>(args)...);
  750|     30|              }
  751|     30|          }),
  752|     30|          m_storage(std::addressof(f))
  753|     30|    {
  754|     30|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES1B_c:
  743|    698|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    698|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    698|              else {
  749|    698|                  return obj(static_cast<decltype(args)>(args)...);
  750|    698|              }
  751|    698|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    698|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    698|        else if constexpr (std::is_object_v<T>) {
  688|    698|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    698|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlcE_clEc:
 4836|    698|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     30|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     30|        {
  662|     30|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5036|    930|    {
 5037|    930|        auto it = read_source_impl(range, {specs});
 5038|    930|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    930|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 342, False: 588]
  |  |  ------------------
  ------------------
 5039|    342|            return unexpected(it.error());
 5040|    342|        }
 5041|       |
 5042|    588|        return read_string_impl(range, *it, value);
 5043|    930|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4740|  1.26k|{
 4741|  1.26k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|  1.26k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|  1.26k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 146, False: 1.12k]
  ------------------
 4745|    146|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|    146|                                     "Invalid encoding in scanned string");
 4747|    146|    }
 4748|  1.12k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  1.12k|    static_cast<    \
  |  |  929|  1.12k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|  1.12k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.12k]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|  1.12k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  1.12k|    static_cast<    \
  |  |  929|  1.12k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|  1.12k|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4879|  4.42k|    {
 4880|  4.42k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|  4.42k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.42k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.42k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.74k, False: 680]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.74k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.74k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.74k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.74k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.74k|    }                                                  \
  |  |  |  | 3667|  4.42k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    680|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4881|    680|        return read_string_impl(range, it, value);
 4882|  4.42k|    }
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5797|  7.35k|{
 5798|       |    if constexpr (std::is_same_v<T, bool>) {
 5799|       |        return reader_impl_for_bool<CharT>{};
 5800|       |    }
 5801|       |    else if constexpr (std::is_same_v<T, char>) {
 5802|       |        return reader_impl_for_char<CharT>{};
 5803|       |    }
 5804|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5805|       |        return reader_impl_for_wchar<CharT>{};
 5806|       |    }
 5807|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5808|       |        return reader_impl_for_code_point<CharT>{};
 5809|       |    }
 5810|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5811|  7.35k|                       std::is_same_v<T, std::wstring_view>) {
 5812|  7.35k|        return reader_impl_for_string<CharT>{};
 5813|       |    }
 5814|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5815|       |                       std::is_same_v<T, std::wstring>) {
 5816|       |        return reader_impl_for_string<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5819|       |                       std::is_same_v<T, wregex_matches>) {
 5820|       |        return reader_impl_for_regex_matches<CharT>{};
 5821|       |    }
 5822|       |    else if constexpr (std::is_same_v<T, void*>) {
 5823|       |        return reader_impl_for_voidptr<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_floating_point_v<T>) {
 5826|       |        return reader_impl_for_float<CharT>{};
 5827|       |    }
 5828|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5829|       |                       !std::is_same_v<T, wchar_t> &&
 5830|       |                       !std::is_same_v<T, char32_t> &&
 5831|       |                       !std::is_same_v<T, bool>) {
 5832|       |        return reader_impl_for_int<CharT>{};
 5833|       |    }
 5834|       |    else {
 5835|       |        return reader_impl_for_monostate<CharT>{};
 5836|       |    }
 5837|  7.35k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5265|    852|    {
 5266|    852|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    852|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    852|        return read_impl(range, specs, value);
 5268|    852|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5283|    852|    {
 5284|    852|        SCN_CLANG_PUSH
 5285|    852|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|    852|        switch (m_type) {
 5288|    248|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 248, False: 604]
  ------------------
 5289|    248|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|     78|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 78, False: 774]
  ------------------
 5292|     78|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|     78|                                                                   value);
 5294|       |
 5295|     30|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 30, False: 822]
  ------------------
 5296|     30|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|    268|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 268, False: 584]
  ------------------
 5299|    268|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|    268|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      2|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 2, False: 850]
  ------------------
 5304|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      2|                    range, specs.charset_string<SourceCharT>(),
 5306|      2|                    specs.regexp_flags, value);
 5307|       |
 5308|    226|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 226, False: 626]
  ------------------
 5309|    226|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|    226|                    range,
 5311|    226|                    get_unescaped_regex_pattern(
 5312|    226|                        specs.charset_string<SourceCharT>()),
 5313|    226|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 852]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|    852|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|    852|        }
 5320|       |
 5321|    852|        SCN_CLANG_POP
 5322|    852|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4815|    248|    {
 4816|    248|        return read_string_view_impl(range, read_until_classic_space(range),
 4817|    248|                                     value);
 4818|    248|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4761|    356|{
 4762|    356|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4763|       |
 4764|    356|    auto src = [&]() {
 4765|    356|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|    356|            return make_contiguous_buffer(
 4767|    356|                ranges::subrange{range.begin().base(), result.base()});
 4768|    356|        }
 4769|    356|        else {
 4770|    356|            return make_contiguous_buffer(
 4771|    356|                ranges::subrange{range.begin(), result});
 4772|    356|        }
 4773|    356|    }();
 4774|    356|    using src_type = decltype(src);
 4775|       |
 4776|    356|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4776:9): [Folded - Ignored]
  ------------------
 4777|      0|        return unexpected_scan_error(
 4778|      0|            scan_error::invalid_scanned_value,
 4779|      0|            "Cannot read a string_view from this source range (not "
 4780|      0|            "contiguous)");
 4781|      0|    }
 4782|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4783|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4784|       |                                     "Cannot read a string_view from "
 4785|       |                                     "this source range (would require "
 4786|       |                                     "transcoding)");
 4787|       |    }
 4788|    356|    else {
 4789|    356|        const auto view = src.view();
 4790|    356|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4791|       |
 4792|    356|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4792:13): [True: 130, False: 226]
  ------------------
 4793|    130|            return unexpected_scan_error(
 4794|    130|                scan_error::invalid_scanned_value,
 4795|    130|                "Invalid encoding in scanned string_view");
 4796|    130|        }
 4797|       |
 4798|    226|        return SCN_MOVE(result);
  ------------------
  |  |  928|    226|    static_cast<    \
  |  |  929|    226|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4799|    356|    }
 4800|    356|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4764|    356|    auto src = [&]() {
 4765|    356|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|    356|            return make_contiguous_buffer(
 4767|    356|                ranges::subrange{range.begin().base(), result.base()});
 4768|       |        }
 4769|       |        else {
 4770|       |            return make_contiguous_buffer(
 4771|       |                ranges::subrange{range.begin(), result});
 4772|       |        }
 4773|    356|    }();
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 4851|     78|    {
 4852|     78|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4852:13): [True: 44, False: 34]
  ------------------
 4853|     44|            return read_string_view_impl(
 4854|     44|                range,
 4855|     44|                read_until_code_unit(
 4856|     44|                    range,
 4857|     44|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4858|     44|                        SourceCharT ch) { return ch == until; }),
 4859|     44|                value);
 4860|     44|        }
 4861|     34|        return read_string_view_impl(
 4862|     34|            range,
 4863|     34|            read_until_code_units(
 4864|     34|                range, specs.fill.template get_code_units<SourceCharT>()),
 4865|     34|            value);
 4866|     78|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_S11_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     44|        : m_fptr([](storage fn,
  743|     44|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     44|              cvref<T> obj = *get<T>(fn);
  745|     44|              if constexpr (std::is_void_v<R>) {
  746|     44|                  obj(static_cast<decltype(args)>(args)...);
  747|     44|              }
  748|     44|              else {
  749|     44|                  return obj(static_cast<decltype(args)>(args)...);
  750|     44|              }
  751|     44|          }),
  752|     44|          m_storage(std::addressof(f))
  753|     44|    {
  754|     44|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_S11_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES1B_c:
  743|  1.66k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.66k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.66k|              else {
  749|  1.66k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.66k|              }
  751|  1.66k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_17basic_string_viewIT0_NSI_11char_traitsISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|  1.66k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.66k|        else if constexpr (std::is_object_v<T>) {
  688|  1.66k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.66k|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEEENKUlcE_clEc:
 4858|  1.66k|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     44|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     44|        {
  662|     44|        }
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4947|     30|    {
 4948|     30|        return read_impl(
 4949|     30|            range,
 4950|     30|            [&](const auto& rng) {
 4951|     30|                return read_string_view_impl(rng, read_all(rng), value);
 4952|     30|            },
 4953|     30|            detail::priority_tag<1>{});
 4954|     30|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_17basic_string_viewIT0_NSG_11char_traitsISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSX_OSP_NS0_6detail12priority_tagILm1EEE:
 4962|     30|    {
 4963|     30|        return read_cb(range);
 4964|     30|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEEENKUlRKSH_E_clISD_EEDaSU_:
 4950|     30|            [&](const auto& rng) {
 4951|     30|                return read_string_view_impl(rng, read_all(rng), value);
 4952|     30|            },
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 5050|    268|    {
 5051|    268|        auto it = read_source_impl(range, {specs});
 5052|    268|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    268|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 256]
  |  |  ------------------
  ------------------
 5053|     12|            return unexpected(it.error());
 5054|     12|        }
 5055|       |
 5056|    256|        return read_string_view_impl(range, *it, value);
 5057|    268|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEE:
 4761|    256|{
 4762|    256|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4763|       |
 4764|    256|    auto src = [&]() {
 4765|    256|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|    256|            return make_contiguous_buffer(
 4767|    256|                ranges::subrange{range.begin().base(), result.base()});
 4768|    256|        }
 4769|    256|        else {
 4770|    256|            return make_contiguous_buffer(
 4771|    256|                ranges::subrange{range.begin(), result});
 4772|    256|        }
 4773|    256|    }();
 4774|    256|    using src_type = decltype(src);
 4775|       |
 4776|    256|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4776:9): [Folded - Ignored]
  ------------------
 4777|      0|        return unexpected_scan_error(
 4778|      0|            scan_error::invalid_scanned_value,
 4779|      0|            "Cannot read a string_view from this source range (not "
 4780|      0|            "contiguous)");
 4781|      0|    }
 4782|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4783|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4784|       |                                     "Cannot read a string_view from "
 4785|       |                                     "this source range (would require "
 4786|       |                                     "transcoding)");
 4787|       |    }
 4788|    256|    else {
 4789|    256|        const auto view = src.view();
 4790|    256|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4791|       |
 4792|    256|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4792:13): [True: 96, False: 160]
  ------------------
 4793|     96|            return unexpected_scan_error(
 4794|     96|                scan_error::invalid_scanned_value,
 4795|     96|                "Invalid encoding in scanned string_view");
 4796|     96|        }
 4797|       |
 4798|    160|        return SCN_MOVE(result);
  ------------------
  |  |  928|    160|    static_cast<    \
  |  |  929|    160|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4799|    256|    }
 4800|    256|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEEENKUlvE_clEv:
 4764|    256|    auto src = [&]() {
 4765|    256|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|    256|            return make_contiguous_buffer(
 4767|    256|                ranges::subrange{range.begin().base(), result.base()});
 4768|       |        }
 4769|       |        else {
 4770|       |            return make_contiguous_buffer(
 4771|       |                ranges::subrange{range.begin(), result});
 4772|       |        }
 4773|    256|    }();
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSN_IT0_NSO_IST_EEEE:
 4890|    228|    {
 4891|    228|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|    228|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    228|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    228|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    228|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 228, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    228|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    228|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    228|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    228|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    228|    }                                                  \
  |  |  |  | 3667|    228|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_view_impl(range, it, value);
 4893|    228|    }
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5265|  5.71k|    {
 5266|  5.71k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  5.71k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  5.71k|        return read_impl(range, specs, value);
 5268|  5.71k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5283|  5.71k|    {
 5284|  5.71k|        SCN_CLANG_PUSH
 5285|  5.71k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|  5.71k|        switch (m_type) {
 5288|    308|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 308, False: 5.41k]
  ------------------
 5289|    308|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|     60|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 60, False: 5.65k]
  ------------------
 5292|     60|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|     60|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 5.71k]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|    930|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 930, False: 4.78k]
  ------------------
 5299|    930|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|    930|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|  4.03k|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 4.03k, False: 1.68k]
  ------------------
 5304|  4.03k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|  4.03k|                    range, specs.charset_string<SourceCharT>(),
 5306|  4.03k|                    specs.regexp_flags, value);
 5307|       |
 5308|    388|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 388, False: 5.33k]
  ------------------
 5309|    388|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|    388|                    range,
 5311|    388|                    get_unescaped_regex_pattern(
 5312|    388|                        specs.charset_string<SourceCharT>()),
 5313|    388|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 5.71k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|  5.71k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|  5.71k|        }
 5320|       |
 5321|  5.71k|        SCN_CLANG_POP
 5322|  5.71k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4815|    938|    {
 4816|    938|        return read_string_view_impl(range, read_until_classic_space(range),
 4817|    938|                                     value);
 4818|    938|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4761|    998|{
 4762|    998|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4763|       |
 4764|    998|    auto src = [&]() {
 4765|    998|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|    998|            return make_contiguous_buffer(
 4767|    998|                ranges::subrange{range.begin().base(), result.base()});
 4768|    998|        }
 4769|    998|        else {
 4770|    998|            return make_contiguous_buffer(
 4771|    998|                ranges::subrange{range.begin(), result});
 4772|    998|        }
 4773|    998|    }();
 4774|    998|    using src_type = decltype(src);
 4775|       |
 4776|    998|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4776:9): [Folded - Ignored]
  ------------------
 4777|      0|        return unexpected_scan_error(
 4778|      0|            scan_error::invalid_scanned_value,
 4779|      0|            "Cannot read a string_view from this source range (not "
 4780|      0|            "contiguous)");
 4781|      0|    }
 4782|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4783|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4784|       |                                     "Cannot read a string_view from "
 4785|       |                                     "this source range (would require "
 4786|       |                                     "transcoding)");
 4787|       |    }
 4788|    998|    else {
 4789|    998|        const auto view = src.view();
 4790|    998|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4791|       |
 4792|    998|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4792:13): [True: 326, False: 672]
  ------------------
 4793|    326|            return unexpected_scan_error(
 4794|    326|                scan_error::invalid_scanned_value,
 4795|    326|                "Invalid encoding in scanned string_view");
 4796|    326|        }
 4797|       |
 4798|    672|        return SCN_MOVE(result);
  ------------------
  |  |  928|    672|    static_cast<    \
  |  |  929|    672|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4799|    998|    }
 4800|    998|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4764|    998|    auto src = [&]() {
 4765|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|       |            return make_contiguous_buffer(
 4767|       |                ranges::subrange{range.begin().base(), result.base()});
 4768|       |        }
 4769|    998|        else {
 4770|    998|            return make_contiguous_buffer(
 4771|    998|                ranges::subrange{range.begin(), result});
 4772|    998|        }
 4773|    998|    }();
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4851|     60|    {
 4852|     60|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4852:13): [True: 30, False: 30]
  ------------------
 4853|     30|            return read_string_view_impl(
 4854|     30|                range,
 4855|     30|                read_until_code_unit(
 4856|     30|                    range,
 4857|     30|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4858|     30|                        SourceCharT ch) { return ch == until; }),
 4859|     30|                value);
 4860|     30|        }
 4861|     30|        return read_string_view_impl(
 4862|     30|            range,
 4863|     30|            read_until_code_units(
 4864|     30|                range, specs.fill.template get_code_units<SourceCharT>()),
 4865|     30|            value);
 4866|     60|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_SZ_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     30|        : m_fptr([](storage fn,
  743|     30|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     30|              cvref<T> obj = *get<T>(fn);
  745|     30|              if constexpr (std::is_void_v<R>) {
  746|     30|                  obj(static_cast<decltype(args)>(args)...);
  747|     30|              }
  748|     30|              else {
  749|     30|                  return obj(static_cast<decltype(args)>(args)...);
  750|     30|              }
  751|     30|          }),
  752|     30|          m_storage(std::addressof(f))
  753|     30|    {
  754|     30|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_SZ_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES19_c:
  743|    698|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    698|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    698|              else {
  749|    698|                  return obj(static_cast<decltype(args)>(args)...);
  750|    698|              }
  751|    698|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_17basic_string_viewIT0_NSG_11char_traitsIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    698|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    698|        else if constexpr (std::is_object_v<T>) {
  688|    698|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    698|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEEENKUlcE_clEc:
 4858|    698|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     30|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     30|        {
  662|     30|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5050|    930|    {
 5051|    930|        auto it = read_source_impl(range, {specs});
 5052|    930|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    930|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 342, False: 588]
  |  |  ------------------
  ------------------
 5053|    342|            return unexpected(it.error());
 5054|    342|        }
 5055|       |
 5056|    588|        return read_string_view_impl(range, *it, value);
 5057|    930|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4761|  1.26k|{
 4762|  1.26k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4763|       |
 4764|  1.26k|    auto src = [&]() {
 4765|  1.26k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|  1.26k|            return make_contiguous_buffer(
 4767|  1.26k|                ranges::subrange{range.begin().base(), result.base()});
 4768|  1.26k|        }
 4769|  1.26k|        else {
 4770|  1.26k|            return make_contiguous_buffer(
 4771|  1.26k|                ranges::subrange{range.begin(), result});
 4772|  1.26k|        }
 4773|  1.26k|    }();
 4774|  1.26k|    using src_type = decltype(src);
 4775|       |
 4776|  1.26k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4776:9): [Folded - Ignored]
  ------------------
 4777|      0|        return unexpected_scan_error(
 4778|      0|            scan_error::invalid_scanned_value,
 4779|      0|            "Cannot read a string_view from this source range (not "
 4780|      0|            "contiguous)");
 4781|      0|    }
 4782|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4783|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4784|       |                                     "Cannot read a string_view from "
 4785|       |                                     "this source range (would require "
 4786|       |                                     "transcoding)");
 4787|       |    }
 4788|  1.26k|    else {
 4789|  1.26k|        const auto view = src.view();
 4790|  1.26k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4791|       |
 4792|  1.26k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4792:13): [True: 146, False: 1.12k]
  ------------------
 4793|    146|            return unexpected_scan_error(
 4794|    146|                scan_error::invalid_scanned_value,
 4795|    146|                "Invalid encoding in scanned string_view");
 4796|    146|        }
 4797|       |
 4798|  1.12k|        return SCN_MOVE(result);
  ------------------
  |  |  928|  1.12k|    static_cast<    \
  |  |  929|  1.12k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4799|  1.26k|    }
 4800|  1.26k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4764|  1.26k|    auto src = [&]() {
 4765|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|       |            return make_contiguous_buffer(
 4767|       |                ranges::subrange{range.begin().base(), result.base()});
 4768|       |        }
 4769|  1.26k|        else {
 4770|  1.26k|            return make_contiguous_buffer(
 4771|  1.26k|                ranges::subrange{range.begin(), result});
 4772|  1.26k|        }
 4773|  1.26k|    }();
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSL_IT0_NSM_ISR_EEEE:
 4890|  4.42k|    {
 4891|  4.42k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|  4.42k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.42k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.42k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.74k, False: 680]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.74k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.74k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.74k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.74k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.74k|    }                                                  \
  |  |  |  | 3667|  4.42k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    680|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|    680|        return read_string_view_impl(range, it, value);
 4893|  4.42k|    }
_ZN3scn2v34impl16char_reader_baseIwE11check_specsERKNS0_6detail12format_specsE:
 5612|  3.31k|    {
 5613|  3.31k|        reader_error_handler eh{};
 5614|       |        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
 5615|       |            detail::check_code_point_type_specs(specs, eh);
 5616|       |        }
 5617|  3.31k|        else {
 5618|  3.31k|            detail::check_char_type_specs(specs, eh);
 5619|  3.31k|        }
 5620|  3.31k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  3.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.84k, False: 468]
  |  |  ------------------
  ------------------
 5621|  2.84k|            return {scan_error::invalid_format_string, eh.m_msg};
 5622|  2.84k|        }
 5623|    468|        return {};
 5624|  3.31k|    }
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  13.5k|    {
  763|  13.5k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  13.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  13.5k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  1.62k|        : m_fptr([](storage fn,
  743|  1.62k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.62k|              cvref<T> obj = *get<T>(fn);
  745|  1.62k|              if constexpr (std::is_void_v<R>) {
  746|  1.62k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.62k|              }
  748|  1.62k|              else {
  749|  1.62k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.62k|              }
  751|  1.62k|          }),
  752|  1.62k|          m_storage(std::addressof(f))
  753|  1.62k|    {
  754|  1.62k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|  3.17k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.17k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.17k|              else {
  749|  3.17k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.17k|              }
  751|  3.17k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  3.17k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  3.17k|        else if constexpr (std::is_object_v<T>) {
  688|  3.17k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.17k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  1.62k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.62k|        {
  662|  1.62k|        }
_ZNK3scn2v34impl16char_reader_baseIwE19skip_ws_before_readEv:
 5607|  1.42k|    {
 5608|  1.42k|        return false;
 5609|  1.42k|    }
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1767|     94|    {
 1768|     94|        auto stdloc = loc.get<std::locale>();
 1769|     94|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1770|     94|        grouping = numpunct.grouping();
 1771|     94|        thousands_sep =
 1772|     94|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1772:13): [True: 0, False: 94]
  ------------------
 1773|     94|        decimal_point = numpunct.decimal_point();
 1774|     94|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1704|    116|{
 1705|    116|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1705:9): [True: 116, False: 0]
  ------------------
 1706|    116|        return std::use_facet<Facet>(stdloc);
 1707|    116|    }
 1708|      0|    stdloc = std::locale(stdloc, new Facet{});
 1709|      0|    return std::use_facet<Facet>(stdloc);
 1710|    116|}
_ZN3scn2v34impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2337|  3.82k|{
 2338|  3.82k|    size_t count{0};
 2339|  3.82k|    for_each_code_point(input, [&count](char32_t cp) {
 2340|  3.82k|        count += calculate_text_width_for_fmt_v10(cp);
 2341|  3.82k|    });
 2342|  3.82k|    return count;
 2343|  3.82k|}
_ZN3scn2v34impl19for_each_code_pointIwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1433|  3.82k|{
 1434|       |    // TODO: Could be optimized by being eager
 1435|  3.82k|    auto it = input.begin();
 1436|  11.2k|    while (it != input.end()) {
  ------------------
  |  Branch (1436:12): [True: 7.39k, False: 3.82k]
  ------------------
 1437|  7.39k|        auto res = get_next_code_point(
 1438|  7.39k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1439|  7.39k|        cb(res.value);
 1440|  7.39k|        it = detail::make_string_view_iterator(input, res.iterator);
 1441|  7.39k|    }
 1442|  3.82k|}
_ZN3scn2v34impl19get_next_code_pointIwEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|   176k|{
 1169|   176k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   176k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   176k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|   176k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|   176k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   176k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 176k]
  |  |  ------------------
  ------------------
 1173|      0|        return {get_start_for_next_code_point(input),
 1174|      0|                detail::invalid_code_point};
 1175|      0|    }
 1176|   176k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|   176k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 176k]
  |  |  ------------------
  ------------------
 1177|      0|        return {input.end(), detail::invalid_code_point};
 1178|      0|    }
 1179|       |
 1180|   176k|    return {input.begin() + len,
 1181|   176k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|   176k|}
_ZN3scn2v34impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_:
  742|  3.82k|        : m_fptr([](storage fn,
  743|  3.82k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.82k|              cvref<T> obj = *get<T>(fn);
  745|  3.82k|              if constexpr (std::is_void_v<R>) {
  746|  3.82k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.82k|              }
  748|  3.82k|              else {
  749|  3.82k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.82k|              }
  751|  3.82k|          }),
  752|  3.82k|          m_storage(std::addressof(f))
  753|  3.82k|    {
  754|  3.82k|    }
_ZZN3scn2v34impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  743|  7.39k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.39k|              cvref<T> obj = *get<T>(fn);
  745|  7.39k|              if constexpr (std::is_void_v<R>) {
  746|  7.39k|                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|       |              else {
  749|       |                  return obj(static_cast<decltype(args)>(args)...);
  750|       |              }
  751|  7.39k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|  7.39k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  7.39k|        else if constexpr (std::is_object_v<T>) {
  688|  7.39k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  7.39k|    }
_ZZN3scn2v34impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2339|  7.39k|    for_each_code_point(input, [&count](char32_t cp) {
 2340|  7.39k|        count += calculate_text_width_for_fmt_v10(cp);
 2341|  7.39k|    });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vIS9_EEvE4typeELPv0EEEPS9_:
  660|  3.82k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  3.82k|        {
  662|  3.82k|        }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1569|  2.54k|    {
 1570|  2.54k|        return m_view;
 1571|  2.54k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1559|  2.69k|    ~contiguous_range_factory() = default;
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E14multibyte_leftEv:
 2409|    468|    {
 2410|    468|        return m_multibyte_left;
 2411|    468|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EdeEv:
 2414|  63.4k|    {
 2415|  63.4k|        return *m_current;
 2416|  63.4k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EppEv:
 2423|  49.5k|    {
 2424|  49.5k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  49.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  49.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2425|  49.5k|        _increment_current();
 2426|  49.5k|        return *this;
 2427|  49.5k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E18_increment_currentEv:
 2656|  49.5k|    {
 2657|  49.5k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2657:13): [True: 49.5k, False: 0]
  ------------------
 2658|  49.5k|            auto cplen = _get_cp_length_at_current();
 2659|  49.5k|            m_multibyte_left = cplen - 1;
 2660|  49.5k|            m_count -= _get_width_at_current_cp_start(cplen);
 2661|  49.5k|        }
 2662|      0|        else {
 2663|      0|            --m_multibyte_left;
 2664|      0|        }
 2665|       |
 2666|  49.5k|        ++m_current;
 2667|  49.5k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E25_get_cp_length_at_currentEv:
 2627|  49.5k|    {
 2628|  49.5k|        return static_cast<difference_type>(
 2629|  49.5k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2630|  49.5k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E30_get_width_at_current_cp_startEl:
 2633|  49.5k|    {
 2634|  49.5k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|  49.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 49.5k]
  |  |  ------------------
  ------------------
 2635|      0|            return 0;
 2636|      0|        }
 2637|       |
 2638|  49.5k|        if (cplen == 1) {
  ------------------
  |  Branch (2638:13): [True: 49.5k, False: 0]
  ------------------
 2639|  49.5k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  49.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  49.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2640|  49.5k|            auto cp = static_cast<char32_t>(*m_current);
 2641|  49.5k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2642|  49.5k|        }
 2643|       |
 2644|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2645|      0|                                           cplen);
 2646|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2647|      0|            return 0;
 2648|      0|        }
 2649|       |
 2650|      0|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2651|      0|        return static_cast<difference_type>(
 2652|      0|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2653|      0|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1844|  5.30k|{
 1845|  5.30k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  5.30k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.30k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1846|       |
 1847|  5.30k|    if constexpr (ranges::sized_range<Range>) {
 1848|  5.30k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1849|  5.30k|        if (sz < count) {
  ------------------
  |  Branch (1849:13): [True: 134, False: 5.16k]
  ------------------
 1850|    134|            return unexpected(eof_error::eof);
 1851|    134|        }
 1852|       |
 1853|  5.16k|        return ranges::next(range.begin(), count);
 1854|       |    }
 1855|       |    else {
 1856|       |        auto it = range.begin();
 1857|       |        if (guaranteed_minimum_size(range) >= count) {
 1858|       |            return ranges::next(it, count);
 1859|       |        }
 1860|       |
 1861|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1862|       |            if (it == range.end()) {
 1863|       |                return unexpected(eof_error::eof);
 1864|       |            }
 1865|       |        }
 1866|       |
 1867|       |        return it;
 1868|       |    }
 1869|  5.30k|}
_ZN3scn2v34impl27counted_width_iterator_implneIPKwS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2519|  18.6k|    {
 2520|  18.6k|        return !(a == b);
 2521|  18.6k|    }
_ZN3scn2v34impl27counted_width_iterator_impleqIPKwS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2511|  19.4k|    {
 2512|  19.4k|        return a.m_current == b.m_current;
 2513|  19.4k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EdeEv:
 2418|  2.16k|    {
 2419|  2.16k|        return *m_current;
 2420|  2.16k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEwE8is_validEv:
 1877|  16.9k|    {
 1878|  16.9k|        return !codepoint.empty();
 1879|  16.9k|    }
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EESB_EEEEDaOT_:
 1670|    678|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|       |                  ranges::sized_range<Range>) {
 1674|       |        return string_view_wrapper{SCN_FWD(range)};
 1675|       |    }
 1676|    678|    else {
 1677|    678|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|    678|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1678|    678|    }
 1679|    678|}
_ZN3scn2v34impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSH_:
 1524|    678|    {
 1525|    678|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|    678|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1526|    678|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEvOT_:
 1608|    678|    {
 1609|    678|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|       |                      ranges::sized_range<Range>) {
 1614|       |            m_storage.reset();
 1615|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|       |                                          std::basic_string<CharT>>) {
 1619|       |            m_storage.emplace(SCN_FWD(range));
 1620|       |            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|       |                           ranges::common_range<Range>) {
 1626|       |            auto beg_seg = range.begin().contiguous_segment();
 1627|       |            auto end_seg = range.end().contiguous_segment();
 1628|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1629|       |                             detail::to_address(end_seg.end()))) {
 1630|       |                auto& str = m_storage.emplace();
 1631|       |                str.reserve(range.end().position() - range.begin().position());
 1632|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|       |                m_view = string_view_type{str};
 1634|       |                return;
 1635|       |            }
 1636|       |
 1637|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|       |                                                            end_seg.data());
 1639|       |            m_storage.reset();
 1640|       |        }
 1641|    678|        else {
 1642|    678|            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|    678|            if constexpr (ranges::common_range<Range>) {
 1647|    678|                std::copy(ranges::begin(range), ranges::end(range),
 1648|    678|                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|    678|            m_view = string_view_type{str};
 1657|    678|        }
 1658|    678|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EC2ES5_S5_l:
 2369|  11.0k|        : m_current(x), m_end(s), m_count(n)
 2370|  11.0k|    {
 2371|  11.0k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E4baseEv:
 2401|  58.9k|    {
 2402|  58.9k|        return m_current;
 2403|  58.9k|    }
_ZN3scn2v34impl24read_while_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2104|  1.99k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|  1.99k|    else {
 2114|  1.99k|        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|  1.99k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  1.99k|            return detail::is_cp_space(cp);
 2127|  1.99k|        });
 2128|  1.99k|    }
 2129|  1.99k|}
_ZN3scn2v34impl21read_while_code_pointINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_NS1_12function_refIFbDiESG_EE:
 2069|  1.99k|{
 2070|  1.99k|    return read_until_code_point(range, std::not_fn(pred));
 2071|  1.99k|}
_ZN3scn2v34impl21read_until_code_pointINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_NS1_12function_refIFbDiESG_EE:
 2048|  1.99k|{
 2049|  1.99k|    auto it = range.begin();
 2050|  3.06k|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 2.14k, False: 920]
  ------------------
 2051|  2.14k|        const auto val =
 2052|  2.14k|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  2.14k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  2.14k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.14k, False: 0]
  |  |  ------------------
  ------------------
 2054|  2.14k|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  2.14k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  2.14k|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 1.07k, False: 1.06k]
  ------------------
 2057|  1.07k|                return it;
 2058|  1.07k|            }
 2059|  2.14k|        }
 2060|  1.06k|        it = val.iterator;
 2061|  1.06k|    }
 2062|       |
 2063|    920|    return it;
 2064|  1.99k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1886|  45.5k|{
 1887|  45.5k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  45.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  45.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|  45.5k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|  45.5k|    auto it = range.begin();
 1891|  45.5k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|  45.5k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  45.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 45.5k]
  |  |  ------------------
  ------------------
 1894|      0|        ++it;
 1895|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|      0|        return {it, {}};
 1897|      0|    }
 1898|       |
 1899|  45.5k|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 45.5k, False: 0]
  ------------------
 1900|  45.5k|        ++it;
 1901|  45.5k|        return {it, string_type(1, *range.begin())};
 1902|  45.5k|    }
 1903|       |
 1904|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|      0|    return {it, string_type{range.begin(), it}};
 1906|  45.5k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|  65.6k|{
  944|  65.6k|    return is_range_eof(r.begin(), r.end());
  945|  65.6k|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|   235k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   235k|    {
  937|   235k|        return begin == end;
  938|   235k|    }
  939|   235k|}
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|    852|    {
  190|    852|        i = std::move(bound);
  191|    852|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1877|  45.5k|    {
 1878|  45.5k|        return !codepoint.empty();
 1879|  45.5k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_:
  742|  1.99k|        : m_fptr([](storage fn,
  743|  1.99k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.99k|              cvref<T> obj = *get<T>(fn);
  745|  1.99k|              if constexpr (std::is_void_v<R>) {
  746|  1.99k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.99k|              }
  748|  1.99k|              else {
  749|  1.99k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.99k|              }
  751|  1.99k|          }),
  752|  1.99k|          m_storage(std::addressof(f))
  753|  1.99k|    {
  754|  1.99k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESU_Di:
  743|  2.14k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.14k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.14k|              else {
  749|  2.14k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.14k|              }
  751|  2.14k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|  2.14k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.14k|        else if constexpr (std::is_object_v<T>) {
  688|  2.14k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.14k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2125|  2.14k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  2.14k|            return detail::is_cp_space(cp);
 2127|  2.14k|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vISE_EEvE4typeELPv0EEEPSE_:
  660|  1.99k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.99k|        {
  662|  1.99k|        }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|  20.0k|{
  950|  20.0k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  20.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 20.0k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  20.0k|    return eof_error::good;
  954|  20.0k|}
_ZNK3scn2v34impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2820|  4.35k|    {
 2821|  4.35k|        return take_width_view{r, n};
 2822|  4.35k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2ERKS9_l:
 2788|  4.35k|        : m_base(base), m_count(count)
 2789|  4.35k|    {
 2790|  4.35k|    }
_ZN3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEvEC2ERKS9_:
 2702|  4.35k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl21reader_impl_for_wcharIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERwNSN_10locale_refE:
 5687|    144|    {
 5688|    144|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5688:13): [True: 124, False: 20]
  ------------------
 5689|    144|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5689:13): [True: 0, False: 20]
  ------------------
 5690|    124|            return read_default(range, value, loc);
 5691|    124|        }
 5692|       |
 5693|     20|        reader_impl_for_int<CharT> reader{};
 5694|     20|        using integer_type =
 5695|     20|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5696|     20|        integer_type tmp_value{};
 5697|     20|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5698|     20|        value = static_cast<integer_type>(value);
 5699|     20|        return ret;
 5700|    144|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RwNS0_6detail10locale_refE:
 5671|    124|    {
 5672|    124|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    124|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5673|       |        if constexpr (std::is_same_v<CharT, char>) {
 5674|       |            return code_point_reader<wchar_t>{}.read(range, value);
 5675|       |        }
 5676|    124|        else {
 5677|    124|            return code_unit_reader<wchar_t>{}.read(range, value);
 5678|    124|        }
 5679|    124|    }
_ZN3scn2v34impl16code_unit_readerIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rw:
 5552|    124|    {
 5553|    124|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3668|    124|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    124|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    124|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    124|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 124]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    124|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    124|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5554|    124|        ch = *range.begin();
 5555|    124|        return it;
 5556|    124|    }
_ZN3scn2v34impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1833|  1.06k|{
 1834|  1.06k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.06k]
  |  |  ------------------
  ------------------
 1835|      0|        return unexpected(e);
 1836|      0|    }
 1837|       |
 1838|  1.06k|    return ranges::next(range.begin());
 1839|  1.06k|}
_ZN3scn2v34impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_9eof_errorET_:
  949|  1.06k|{
  950|  1.06k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.06k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  1.06k|    return eof_error::good;
  954|  1.06k|}
_ZN3scn2v34impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEbT_:
  943|  1.06k|{
  944|  1.06k|    return is_range_eof(r.begin(), r.end());
  945|  1.06k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  927|  18.0k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  18.0k|    {
  937|  18.0k|        return begin == end;
  938|  18.0k|    }
  939|  18.0k|}
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2758|  55.8k|        {
 2759|  55.8k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2759:21): [True: 468, False: 55.3k]
  |  Branch (2759:39): [True: 468, False: 0]
  ------------------
 2760|  55.8k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2760:20): [True: 516, False: 54.8k]
  ------------------
 2761|  55.8k|        }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE3endEv:
 2804|  20.7k|    {
 2805|  20.7k|        return sentinel<true>{m_base.get().end()};
 2806|  20.7k|    }
_ZNK3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEvE3getEv:
 2705|  42.8k|    {
 2706|  42.8k|        return view;
 2707|  42.8k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE8sentinelILb1EEC2ES8_:
 2739|  20.7k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  |  928|  20.7k|    static_cast<    \
  |  |  929|  20.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|  1.10k|    {
  296|  1.10k|        ++x;
  297|  1.10k|        return x;
  298|  1.10k|    }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 2798|  11.0k|    {
 2799|  11.0k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2800|  11.0k|                                      m_count};
 2801|  11.0k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3527|    182|    {
 3528|    182|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    182|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    182|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    182|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    182|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 182]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    182|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    182|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    182|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|    182|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 0, False: 182]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|      0|            else {
 3539|      0|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 0]
  ------------------
 3540|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|      0|            }
 3546|      0|        }
 3547|       |
 3548|    182|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 0, False: 182]
  ------------------
 3549|      0|            value = T{0};
 3550|      0|            return std::next(prefix_result.iterator);
 3551|      0|        }
 3552|       |
 3553|    182|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    182|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 164, False: 18]
  |  |  ------------------
  ------------------
 3554|    164|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    164|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    164|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    164|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    164|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 164, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    164|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    164|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    164|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    164|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    164|    }                                                  \
  |  |  |  | 3667|    164|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|      0|                    parse_integer_digits_without_thsep(
 3556|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|      0|                        prefix_result.parsed_base));
 3558|       |
 3559|      0|            auto buf = make_contiguous_buffer(
 3560|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|      0|                                        prefix_result.parsed_base));
 3564|       |
 3565|      0|            return ranges::next(
 3566|      0|                prefix_result.iterator,
 3567|      0|                ranges::distance(buf.view().begin(), result_it));
 3568|      0|        }
 3569|       |
 3570|     18|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|     18|            localized_number_formatting_options<CharT>{loc};
 3575|     18|#endif
 3576|       |
 3577|     18|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     18|    }                                                  \
  |  |  |  | 3667|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|      0|                parse_integer_digits_with_thsep(
 3579|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|      0|                    prefix_result.parsed_base, locale_options));
 3581|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|      0|            parse_digits_result;
 3583|       |
 3584|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 0, False: 0]
  ------------------
 3585|      0|            if (auto e = check_thsep_grouping(
 3586|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|      0|                    thsep_indices, locale_options.grouping);
 3588|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3589|      0|                return unexpected(e);
 3590|      0|            }
 3591|      0|        }
 3592|       |
 3593|      0|        auto nothsep_source_view =
 3594|      0|            std::basic_string_view<CharT>{nothsep_source};
 3595|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|      0|            nothsep_source_it,
 3597|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|      0|                                prefix_result.parsed_base));
 3599|       |
 3600|      0|        return ranges::next(
 3601|      0|            prefix_result.iterator,
 3602|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|      0|                ranges::ssize(thsep_indices));
 3604|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3314|    470|{
 3315|    470|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3668|    470|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    470|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    470|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    470|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 470]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    470|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    470|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3316|    470|    auto [base_prefix_begin_it, sign] = sign_result;
 3317|       |
 3318|    470|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3319|    470|        parse_integer_base_prefix(
 3320|    470|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3321|       |
 3322|    470|    if (parsed_zero) {
  ------------------
  |  Branch (3322:9): [True: 0, False: 470]
  ------------------
 3323|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3323:13): [True: 0, False: 0]
  |  Branch (3323:13): [True: 0, False: 0]
  ------------------
 3324|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3324:13): [True: 0, False: 0]
  ------------------
 3325|      0|            digits_begin_it = base_prefix_begin_it;
 3326|      0|        }
 3327|      0|        else {
 3328|      0|            parsed_zero = false;
 3329|      0|        }
 3330|      0|    }
 3331|    470|    else {
 3332|    470|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3332:13): [True: 0, False: 470]
  |  Branch (3332:13): [True: 470, False: 0]
  ------------------
 3333|    470|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3333:13): [True: 470, False: 0]
  ------------------
 3334|    470|            digits_begin_it = base_prefix_begin_it;
 3335|    470|        }
 3336|    470|    }
 3337|       |
 3338|    470|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3338:9): [True: 470, False: 0]
  ------------------
 3339|    470|        sign = sign_type::plus_sign;
 3340|    470|    }
 3341|    470|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3342|    470|        digits_begin_it, parsed_base, sign, parsed_zero};
 3343|    470|}
_ZN3scn2v34impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3129|    616|{
 3130|    616|    auto r = read_one_of_code_unit(range, "+-");
 3131|    616|    if (!r) {
  ------------------
  |  Branch (3131:9): [True: 616, False: 0]
  ------------------
 3132|    616|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3132:13): [True: 616, False: 0]
  ------------------
 3133|    616|            return std::pair{range.begin(), sign_type::default_sign};
 3134|    616|        }
 3135|      0|        return unexpected(eof_error::eof);
 3136|    616|    }
 3137|       |
 3138|      0|    auto& it = *r;
 3139|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3139:9): [True: 0, False: 0]
  ------------------
 3140|      0|        return std::pair{it, sign_type::minus_sign};
 3141|      0|    }
 3142|      0|    return std::pair{it, sign_type::plus_sign};
 3143|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2260|    616|{
 2261|    616|    auto it = read_code_unit(range);
 2262|    616|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    616|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 616]
  |  |  ------------------
  ------------------
 2263|      0|        return unexpected(make_eof_parse_error(it.error()));
 2264|      0|    }
 2265|       |
 2266|  1.23k|    for (auto ch : str) {
  ------------------
  |  Branch (2266:18): [True: 1.23k, False: 616]
  ------------------
 2267|  1.23k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2267:13): [True: 0, False: 1.23k]
  ------------------
 2268|      0|            return *it;
 2269|      0|        }
 2270|  1.23k|    }
 2271|       |
 2272|    616|    return unexpected(parse_error::error);
 2273|    616|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3281|    470|{
 3282|    470|    switch (base) {
 3283|      6|        case 2:
  ------------------
  |  Branch (3283:9): [True: 6, False: 464]
  ------------------
 3284|       |            // allow 0b/0B
 3285|      6|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3286|      6|                    false};
 3287|       |
 3288|     16|        case 8: {
  ------------------
  |  Branch (3288:9): [True: 16, False: 454]
  ------------------
 3289|       |            // allow 0o/0O/0
 3290|     16|            bool zero_parsed = false;
 3291|     16|            auto it = apply_opt(
 3292|     16|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3293|     16|            return {it, 8, zero_parsed};
 3294|      0|        }
 3295|       |
 3296|    136|        case 16:
  ------------------
  |  Branch (3296:9): [True: 136, False: 334]
  ------------------
 3297|       |            // allow 0x/0X
 3298|    136|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3299|    136|                    false};
 3300|       |
 3301|     22|        case 0:
  ------------------
  |  Branch (3301:9): [True: 22, False: 448]
  ------------------
 3302|       |            // detect base
 3303|     22|            return parse_integer_base_prefix_for_detection(range);
 3304|       |
 3305|    290|        default:
  ------------------
  |  Branch (3305:9): [True: 290, False: 180]
  ------------------
 3306|       |            // no base prefix allowed
 3307|    290|            return {range.begin(), base, false};
 3308|    470|    }
 3309|    470|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2279|    158|{
 2280|    158|    if (!result) {
  ------------------
  |  Branch (2280:9): [True: 158, False: 0]
  ------------------
 2281|    158|        return range.begin();
 2282|    158|    }
 2283|      0|    return *result;
 2284|    158|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3232|     28|{
 3233|     28|    return read_matching_string_classic_nocase(range, "0b");
 3234|     28|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2219|    654|{
 2220|    654|    using char_type = detail::char_t<Range>;
 2221|       |
 2222|       |    if constexpr (ranges::contiguous_range<Range> &&
 2223|       |                  std::is_same_v<char_type, char>) {
 2224|       |        if (range.size() < str.size()) {
 2225|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2226|       |        }
 2227|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2228|       |            return unexpected(parse_error::error);
 2229|       |        }
 2230|       |        return ranges::next(range.begin(), str.size());
 2231|       |    }
 2232|    654|    else {
 2233|    654|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|    654|            if (ch < 'A' || ch > 'Z') {
 2235|    654|                return ch;
 2236|    654|            }
 2237|    654|            return static_cast<char_type>(ch +
 2238|    654|                                          static_cast<char_type>('a' - 'A'));
 2239|    654|        };
 2240|       |
 2241|    654|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|    654|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    654|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    654|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    654|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 92, False: 562]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     92|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     92|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     92|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     92|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     92|    }                                                  \
  |  |  |  | 3667|    654|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    562|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2242|    562|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2243|    562|                        .transform_error(make_eof_parse_error));
 2244|       |
 2245|    562|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|    562|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 562, False: 0]
  |  |  ------------------
  ------------------
 2246|    562|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2247|    562|                    return ascii_tolower(a) ==
 2248|    562|                           static_cast<detail::char_t<Range>>(b);
 2249|    562|                }))) {
 2250|    562|            return unexpected(parse_error::error);
 2251|    562|        }
 2252|       |
 2253|      0|        return it;
 2254|    562|    }
 2255|    654|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1844|    654|{
 1845|    654|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    654|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    654|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1846|       |
 1847|       |    if constexpr (ranges::sized_range<Range>) {
 1848|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1849|       |        if (sz < count) {
 1850|       |            return unexpected(eof_error::eof);
 1851|       |        }
 1852|       |
 1853|       |        return ranges::next(range.begin(), count);
 1854|       |    }
 1855|    654|    else {
 1856|    654|        auto it = range.begin();
 1857|    654|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1857:13): [True: 0, False: 654]
  ------------------
 1858|      0|            return ranges::next(it, count);
 1859|      0|        }
 1860|       |
 1861|  2.14k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1861:36): [True: 1.58k, False: 562]
  ------------------
 1862|  1.58k|            if (it == range.end()) {
  ------------------
  |  Branch (1862:17): [True: 92, False: 1.48k]
  ------------------
 1863|     92|                return unexpected(eof_error::eof);
 1864|     92|            }
 1865|  1.58k|        }
 1866|       |
 1867|    562|        return it;
 1868|    654|    }
 1869|    654|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1094|    654|{
 1095|       |    if constexpr (ranges::sized_range<Range>) {
 1096|       |        return r.size();
 1097|       |    }
 1098|       |    else if constexpr (std::is_same_v<
 1099|       |                           ranges::const_iterator_t<Range>,
 1100|       |                           typename detail::basic_scan_buffer<
 1101|       |                               detail::char_t<Range>>::forward_iterator>) {
 1102|       |        if constexpr (ranges::common_range<Range>) {
 1103|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|       |        }
 1105|       |        else {
 1106|       |            if (r.begin().stores_parent()) {
 1107|       |                return static_cast<size_t>(
 1108|       |                    r.begin().parent()->chars_available() -
 1109|       |                    r.begin().position());
 1110|       |            }
 1111|       |            return r.begin().contiguous_segment().size();
 1112|       |        }
 1113|       |    }
 1114|    654|    else {
 1115|    654|        return 0;
 1116|    654|    }
 1117|    654|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlwE_clEw:
 2233|    562|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|    562|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2234:17): [True: 32, False: 530]
  |  Branch (2234:29): [True: 530, False: 0]
  ------------------
 2235|    562|                return ch;
 2236|    562|            }
 2237|      0|            return static_cast<char_type>(ch +
 2238|      0|                                          static_cast<char_type>('a' - 'A'));
 2239|    562|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_Rb:
 3246|     38|{
 3247|     38|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3247:14): [True: 0, False: 38]
  ------------------
 3248|      0|        return *r;
 3249|      0|    }
 3250|       |
 3251|     38|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3251:14): [True: 0, False: 38]
  ------------------
 3252|      0|        zero_parsed = true;
 3253|      0|        return *r;
 3254|      0|    }
 3255|       |
 3256|     38|    return unexpected(parse_error::error);
 3257|     38|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NDTcl4implISL_EEE4typeE:
 2134|     38|{
 2135|     38|    auto it = read_code_unit(range);
 2136|     38|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 38]
  |  |  ------------------
  ------------------
 2137|      0|        return unexpected(make_eof_parse_error(it.error()));
 2138|      0|    }
 2139|       |
 2140|     38|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38, False: 0]
  |  |  ------------------
  ------------------
 2141|     38|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|     38|        return unexpected(parse_error::error);
 2143|     38|    }
 2144|       |
 2145|      0|    return *it;
 2146|     38|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 1833|     38|{
 1834|     38|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 38]
  |  |  ------------------
  ------------------
 1835|      0|        return unexpected(e);
 1836|      0|    }
 1837|       |
 1838|     38|    return ranges::next(range.begin());
 1839|     38|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|     38|{
  950|     38|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 38]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|     38|    return eof_error::good;
  954|     38|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  943|  17.0k|{
  944|  17.0k|    return is_range_eof(r.begin(), r.end());
  945|  17.0k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3239|    158|{
 3240|    158|    return read_matching_string_classic_nocase(range, "0x");
 3241|    158|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_:
 3262|     22|{
 3263|     22|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3263:14): [True: 0, False: 22]
  ------------------
 3264|      0|        return {*r, 16, false};
 3265|      0|    }
 3266|     22|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3266:14): [True: 0, False: 22]
  ------------------
 3267|      0|        return {*r, 2, false};
 3268|      0|    }
 3269|     22|    {
 3270|     22|        bool zero_parsed{false};
 3271|     22|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3271:18): [True: 0, False: 22]
  ------------------
 3272|      0|            return {*r, 8, zero_parsed};
 3273|      0|        }
 3274|     22|    }
 3275|     22|    return {range.begin(), 10, false};
 3276|     22|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3348|    434|{
 3349|    434|    using char_type = detail::char_t<Range>;
 3350|       |
 3351|       |    if constexpr (ranges::contiguous_range<Range>) {
 3352|       |        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3353|       |            return unexpected_scan_error(
 3354|       |                scan_error::invalid_scanned_value,
 3355|       |                "Failed to parse integer: No digits found");
 3356|       |        }
 3357|       |        return range.end();
 3358|       |    }
 3359|    434|    else {
 3360|    434|        return read_while1_code_unit(range,
 3361|    434|                                     [&](char_type ch) noexcept {
 3362|    434|                                         return char_to_int(ch) < base;
 3363|    434|                                     })
 3364|    434|            .transform_error(map_parse_error_to_scan_error(
 3365|    434|                scan_error::invalid_scanned_value,
 3366|    434|                "Failed to parse integer: No digits found"));
 3367|    434|    }
 3368|    434|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 1983|    580|{
 1984|    580|    auto it = read_while_code_unit(range, pred);
 1985|    580|    if (it == range.begin()) {
  ------------------
  |  Branch (1985:9): [True: 580, False: 0]
  ------------------
 1986|    580|        return unexpected(parse_error::error);
 1987|    580|    }
 1988|      0|    return it;
 1989|    580|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1963|    580|{
 1964|    580|    return read_until_code_unit(range, std::not_fn(pred));
 1965|    580|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1944|    580|{
 1945|       |    if constexpr (ranges::common_range<Range>) {
 1946|       |        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|    580|    else {
 1949|    580|        auto first = range.begin();
 1950|    580|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1950:16): [True: 580, False: 0]
  ------------------
 1951|    580|            if (pred(*first)) {
  ------------------
  |  Branch (1951:17): [True: 580, False: 0]
  ------------------
 1952|    580|                return first;
 1953|    580|            }
 1954|    580|        }
 1955|      0|        return first;
 1956|    580|    }
 1957|    580|}
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2769|  30.4k|        {
 2770|  30.4k|            return !(y == x);
 2771|  30.4k|        }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_:
  742|    434|        : m_fptr([](storage fn,
  743|    434|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    434|              cvref<T> obj = *get<T>(fn);
  745|    434|              if constexpr (std::is_void_v<R>) {
  746|    434|                  obj(static_cast<decltype(args)>(args)...);
  747|    434|              }
  748|    434|              else {
  749|    434|                  return obj(static_cast<decltype(args)>(args)...);
  750|    434|              }
  751|    434|          }),
  752|    434|          m_storage(std::addressof(f))
  753|    434|    {
  754|    434|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|    434|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    434|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    434|              else {
  749|    434|                  return obj(static_cast<decltype(args)>(args)...);
  750|    434|              }
  751|    434|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlwE_EEDaNS3_7storageE:
  683|    434|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    434|        else if constexpr (std::is_object_v<T>) {
  688|    434|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    434|    }
_ZZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlwE_clEw:
 3361|    434|                                     [&](char_type ch) noexcept {
 3362|    434|                                         return char_to_int(ch) < base;
 3363|    434|                                     })
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_TnPNSN_9enable_ifIXsr3stdE11is_object_vISP_EEvE4typeELPv0EEEPSP_:
  660|    434|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    434|        {
  662|    434|        }
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEENSJ_12basic_stringIT0_NSJ_11char_traitsISS_EENSJ_9allocatorISS_EEEENSR_IcNST_IcEENSV_IcEEEEEEEEESM_iRKNS1_35localized_number_formatting_optionsISS_EE:
 3378|     36|{
 3379|     36|    std::basic_string<CharT> output;
 3380|     36|    std::string thsep_indices;
 3381|     36|    auto it = range.begin();
 3382|     36|    bool digit_matched = false;
 3383|     36|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3383:12): [True: 36, False: 0]
  ------------------
 3384|     36|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3384:13): [True: 0, False: 36]
  ------------------
 3385|      0|            thsep_indices.push_back(
 3386|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3387|      0|        }
 3388|     36|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3388:18): [True: 36, False: 0]
  ------------------
 3389|     36|            break;
 3390|     36|        }
 3391|      0|        else {
 3392|      0|            output.push_back(*it);
 3393|      0|            digit_matched = true;
 3394|      0|        }
 3395|     36|    }
 3396|     36|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     36|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36, False: 0]
  |  |  ------------------
  ------------------
 3397|     36|        return unexpected_scan_error(
 3398|     36|            scan_error::invalid_scanned_value,
 3399|     36|            "Failed to parse integer: No digits found");
 3400|     36|    }
 3401|      0|    return std::tuple{it, output, thsep_indices};
 3402|     36|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E5countEv:
 2405|  56.7k|    {
 2406|  56.7k|        return m_count;
 2407|  56.7k|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERwNSL_10locale_refE:
 5687|    322|    {
 5688|    322|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5688:13): [True: 302, False: 20]
  ------------------
 5689|    322|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5689:13): [True: 0, False: 20]
  ------------------
 5690|    302|            return read_default(range, value, loc);
 5691|    302|        }
 5692|       |
 5693|     20|        reader_impl_for_int<CharT> reader{};
 5694|     20|        using integer_type =
 5695|     20|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5696|     20|        integer_type tmp_value{};
 5697|     20|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5698|     20|        value = static_cast<integer_type>(value);
 5699|     20|        return ret;
 5700|    322|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RwNS0_6detail10locale_refE:
 5671|    834|    {
 5672|    834|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    834|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5673|       |        if constexpr (std::is_same_v<CharT, char>) {
 5674|       |            return code_point_reader<wchar_t>{}.read(range, value);
 5675|       |        }
 5676|    834|        else {
 5677|    834|            return code_unit_reader<wchar_t>{}.read(range, value);
 5678|    834|        }
 5679|    834|    }
_ZN3scn2v34impl16code_unit_readerIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rw:
 5552|    834|    {
 5553|    834|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3668|    834|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    834|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    834|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    834|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 834]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    834|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    834|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5554|    834|        ch = *range.begin();
 5555|    834|        return it;
 5556|    834|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1833|  6.08k|{
 1834|  6.08k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.08k]
  |  |  ------------------
  ------------------
 1835|      0|        return unexpected(e);
 1836|      0|    }
 1837|       |
 1838|  6.08k|    return ranges::next(range.begin());
 1839|  6.08k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   100k|    {
  296|   100k|        ++x;
  297|   100k|        return x;
  298|   100k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|    362|    {
 3528|    362|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    362|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    362|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    362|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    362|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 362]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    362|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    362|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    362|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|    362|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 0, False: 362]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|      0|            else {
 3539|      0|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 0]
  ------------------
 3540|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|      0|            }
 3546|      0|        }
 3547|       |
 3548|    362|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 0, False: 362]
  ------------------
 3549|      0|            value = T{0};
 3550|      0|            return std::next(prefix_result.iterator);
 3551|      0|        }
 3552|       |
 3553|    362|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    362|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 342, False: 20]
  |  |  ------------------
  ------------------
 3554|    342|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    342|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    342|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    342|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    342|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 342]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    342|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    342|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|    342|                    parse_integer_digits_without_thsep(
 3556|    342|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|    342|                        prefix_result.parsed_base));
 3558|       |
 3559|    342|            auto buf = make_contiguous_buffer(
 3560|    342|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|    342|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    342|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    342|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    342|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    342|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 342, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    342|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    342|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    342|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    342|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    342|    }                                                  \
  |  |  |  | 3667|    342|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|      0|                                        prefix_result.parsed_base));
 3564|       |
 3565|      0|            return ranges::next(
 3566|      0|                prefix_result.iterator,
 3567|      0|                ranges::distance(buf.view().begin(), result_it));
 3568|    342|        }
 3569|       |
 3570|     20|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|     20|            localized_number_formatting_options<CharT>{loc};
 3575|     20|#endif
 3576|       |
 3577|     20|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     20|    }                                                  \
  |  |  |  | 3667|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|      0|                parse_integer_digits_with_thsep(
 3579|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|      0|                    prefix_result.parsed_base, locale_options));
 3581|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|      0|            parse_digits_result;
 3583|       |
 3584|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 0, False: 0]
  ------------------
 3585|      0|            if (auto e = check_thsep_grouping(
 3586|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|      0|                    thsep_indices, locale_options.grouping);
 3588|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3589|      0|                return unexpected(e);
 3590|      0|            }
 3591|      0|        }
 3592|       |
 3593|      0|        auto nothsep_source_view =
 3594|      0|            std::basic_string_view<CharT>{nothsep_source};
 3595|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|      0|            nothsep_source_it,
 3597|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|      0|                                prefix_result.parsed_base));
 3599|       |
 3600|      0|        return ranges::next(
 3601|      0|            prefix_result.iterator,
 3602|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|      0|                ranges::ssize(thsep_indices));
 3604|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3314|  2.60k|{
 3315|  2.60k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3668|  2.60k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.60k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.60k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.60k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  2.60k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.60k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3316|  2.60k|    auto [base_prefix_begin_it, sign] = sign_result;
 3317|       |
 3318|  2.60k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3319|  2.60k|        parse_integer_base_prefix(
 3320|  2.60k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3321|       |
 3322|  2.60k|    if (parsed_zero) {
  ------------------
  |  Branch (3322:9): [True: 0, False: 2.60k]
  ------------------
 3323|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3323:13): [True: 0, False: 0]
  ------------------
 3324|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3324:13): [True: 0, False: 0]
  ------------------
 3325|      0|            digits_begin_it = base_prefix_begin_it;
 3326|      0|        }
 3327|      0|        else {
 3328|      0|            parsed_zero = false;
 3329|      0|        }
 3330|      0|    }
 3331|  2.60k|    else {
 3332|  2.60k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3332:13): [True: 0, False: 2.60k]
  ------------------
 3333|  2.60k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3333:13): [True: 2.60k, False: 0]
  ------------------
 3334|  2.60k|            digits_begin_it = base_prefix_begin_it;
 3335|  2.60k|        }
 3336|  2.60k|    }
 3337|       |
 3338|  2.60k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3338:9): [True: 2.60k, False: 0]
  ------------------
 3339|  2.60k|        sign = sign_type::plus_sign;
 3340|  2.60k|    }
 3341|  2.60k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3342|  2.60k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3343|  2.60k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3129|  3.46k|{
 3130|  3.46k|    auto r = read_one_of_code_unit(range, "+-");
 3131|  3.46k|    if (!r) {
  ------------------
  |  Branch (3131:9): [True: 3.46k, False: 0]
  ------------------
 3132|  3.46k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3132:13): [True: 3.46k, False: 0]
  ------------------
 3133|  3.46k|            return std::pair{range.begin(), sign_type::default_sign};
 3134|  3.46k|        }
 3135|      0|        return unexpected(eof_error::eof);
 3136|  3.46k|    }
 3137|       |
 3138|      0|    auto& it = *r;
 3139|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3139:9): [True: 0, False: 0]
  ------------------
 3140|      0|        return std::pair{it, sign_type::minus_sign};
 3141|      0|    }
 3142|      0|    return std::pair{it, sign_type::plus_sign};
 3143|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2260|  3.46k|{
 2261|  3.46k|    auto it = read_code_unit(range);
 2262|  3.46k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.46k]
  |  |  ------------------
  ------------------
 2263|      0|        return unexpected(make_eof_parse_error(it.error()));
 2264|      0|    }
 2265|       |
 2266|  6.93k|    for (auto ch : str) {
  ------------------
  |  Branch (2266:18): [True: 6.93k, False: 3.46k]
  ------------------
 2267|  6.93k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2267:13): [True: 0, False: 6.93k]
  ------------------
 2268|      0|            return *it;
 2269|      0|        }
 2270|  6.93k|    }
 2271|       |
 2272|  3.46k|    return unexpected(parse_error::error);
 2273|  3.46k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3281|  2.60k|{
 3282|  2.60k|    switch (base) {
 3283|     12|        case 2:
  ------------------
  |  Branch (3283:9): [True: 12, False: 2.59k]
  ------------------
 3284|       |            // allow 0b/0B
 3285|     12|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3286|     12|                    false};
 3287|       |
 3288|     10|        case 8: {
  ------------------
  |  Branch (3288:9): [True: 10, False: 2.59k]
  ------------------
 3289|       |            // allow 0o/0O/0
 3290|     10|            bool zero_parsed = false;
 3291|     10|            auto it = apply_opt(
 3292|     10|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3293|     10|            return {it, 8, zero_parsed};
 3294|      0|        }
 3295|       |
 3296|    860|        case 16:
  ------------------
  |  Branch (3296:9): [True: 860, False: 1.74k]
  ------------------
 3297|       |            // allow 0x/0X
 3298|    860|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3299|    860|                    false};
 3300|       |
 3301|     20|        case 0:
  ------------------
  |  Branch (3301:9): [True: 20, False: 2.58k]
  ------------------
 3302|       |            // detect base
 3303|     20|            return parse_integer_base_prefix_for_detection(range);
 3304|       |
 3305|  1.70k|        default:
  ------------------
  |  Branch (3305:9): [True: 1.70k, False: 902]
  ------------------
 3306|       |            // no base prefix allowed
 3307|  1.70k|            return {range.begin(), base, false};
 3308|  2.60k|    }
 3309|  2.60k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2279|    882|{
 2280|    882|    if (!result) {
  ------------------
  |  Branch (2280:9): [True: 882, False: 0]
  ------------------
 2281|    882|        return range.begin();
 2282|    882|    }
 2283|      0|    return *result;
 2284|    882|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3232|     32|{
 3233|     32|    return read_matching_string_classic_nocase(range, "0b");
 3234|     32|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2219|  3.51k|{
 2220|  3.51k|    using char_type = detail::char_t<Range>;
 2221|       |
 2222|       |    if constexpr (ranges::contiguous_range<Range> &&
 2223|       |                  std::is_same_v<char_type, char>) {
 2224|       |        if (range.size() < str.size()) {
 2225|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2226|       |        }
 2227|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2228|       |            return unexpected(parse_error::error);
 2229|       |        }
 2230|       |        return ranges::next(range.begin(), str.size());
 2231|       |    }
 2232|  3.51k|    else {
 2233|  3.51k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|  3.51k|            if (ch < 'A' || ch > 'Z') {
 2235|  3.51k|                return ch;
 2236|  3.51k|            }
 2237|  3.51k|            return static_cast<char_type>(ch +
 2238|  3.51k|                                          static_cast<char_type>('a' - 'A'));
 2239|  3.51k|        };
 2240|       |
 2241|  3.51k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|  3.51k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.51k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.51k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4, False: 3.51k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      4|    }                                                  \
  |  |  |  | 3667|  3.51k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.51k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2242|  3.51k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2243|  3.51k|                        .transform_error(make_eof_parse_error));
 2244|       |
 2245|  3.51k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  3.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.51k, False: 0]
  |  |  ------------------
  ------------------
 2246|  3.51k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2247|  3.51k|                    return ascii_tolower(a) ==
 2248|  3.51k|                           static_cast<detail::char_t<Range>>(b);
 2249|  3.51k|                }))) {
 2250|  3.51k|            return unexpected(parse_error::error);
 2251|  3.51k|        }
 2252|       |
 2253|      0|        return it;
 2254|  3.51k|    }
 2255|  3.51k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2233|  3.51k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|  3.51k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2234:17): [True: 48, False: 3.46k]
  |  Branch (2234:29): [True: 3.46k, False: 0]
  ------------------
 2235|  3.51k|                return ch;
 2236|  3.51k|            }
 2237|      0|            return static_cast<char_type>(ch +
 2238|      0|                                          static_cast<char_type>('a' - 'A'));
 2239|  3.51k|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3246|     30|{
 3247|     30|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3247:14): [True: 0, False: 30]
  ------------------
 3248|      0|        return *r;
 3249|      0|    }
 3250|       |
 3251|     30|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3251:14): [True: 0, False: 30]
  ------------------
 3252|      0|        zero_parsed = true;
 3253|      0|        return *r;
 3254|      0|    }
 3255|       |
 3256|     30|    return unexpected(parse_error::error);
 3257|     30|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2134|  1.78k|{
 2135|  1.78k|    auto it = read_code_unit(range);
 2136|  1.78k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.78k]
  |  |  ------------------
  ------------------
 2137|      0|        return unexpected(make_eof_parse_error(it.error()));
 2138|      0|    }
 2139|       |
 2140|  1.78k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  1.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.78k, False: 0]
  |  |  ------------------
  ------------------
 2141|  1.78k|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|  1.78k|        return unexpected(parse_error::error);
 2143|  1.78k|    }
 2144|       |
 2145|      0|    return *it;
 2146|  1.78k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3239|    880|{
 3240|    880|    return read_matching_string_classic_nocase(range, "0x");
 3241|    880|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3262|     20|{
 3263|     20|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3263:14): [True: 0, False: 20]
  ------------------
 3264|      0|        return {*r, 16, false};
 3265|      0|    }
 3266|     20|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3266:14): [True: 0, False: 20]
  ------------------
 3267|      0|        return {*r, 2, false};
 3268|      0|    }
 3269|     20|    {
 3270|     20|        bool zero_parsed{false};
 3271|     20|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3271:18): [True: 0, False: 20]
  ------------------
 3272|      0|            return {*r, 8, zero_parsed};
 3273|      0|        }
 3274|     20|    }
 3275|     20|    return {range.begin(), 10, false};
 3276|     20|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3348|  2.56k|{
 3349|  2.56k|    using char_type = detail::char_t<Range>;
 3350|       |
 3351|  2.56k|    if constexpr (ranges::contiguous_range<Range>) {
 3352|  2.56k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.56k]
  |  |  ------------------
  ------------------
 3353|      0|            return unexpected_scan_error(
 3354|      0|                scan_error::invalid_scanned_value,
 3355|      0|                "Failed to parse integer: No digits found");
 3356|      0|        }
 3357|  2.56k|        return range.end();
 3358|       |    }
 3359|       |    else {
 3360|       |        return read_while1_code_unit(range,
 3361|       |                                     [&](char_type ch) noexcept {
 3362|       |                                         return char_to_int(ch) < base;
 3363|       |                                     })
 3364|       |            .transform_error(map_parse_error_to_scan_error(
 3365|       |                scan_error::invalid_scanned_value,
 3366|       |                "Failed to parse integer: No digits found"));
 3367|       |    }
 3368|  2.56k|}
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3378|     40|{
 3379|     40|    std::basic_string<CharT> output;
 3380|     40|    std::string thsep_indices;
 3381|     40|    auto it = range.begin();
 3382|     40|    bool digit_matched = false;
 3383|     40|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3383:12): [True: 40, False: 0]
  ------------------
 3384|     40|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3384:13): [True: 0, False: 40]
  ------------------
 3385|      0|            thsep_indices.push_back(
 3386|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3387|      0|        }
 3388|     40|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3388:18): [True: 40, False: 0]
  ------------------
 3389|     40|            break;
 3390|     40|        }
 3391|      0|        else {
 3392|      0|            output.push_back(*it);
 3393|      0|            digit_matched = true;
 3394|      0|        }
 3395|     40|    }
 3396|     40|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     40|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40, False: 0]
  |  |  ------------------
  ------------------
 3397|     40|        return unexpected_scan_error(
 3398|     40|            scan_error::invalid_scanned_value,
 3399|     40|            "Failed to parse integer: No digits found");
 3400|     40|    }
 3401|      0|    return std::tuple{it, output, thsep_indices};
 3402|     40|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1670|  11.1k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|  11.1k|                  ranges::sized_range<Range>) {
 1674|  11.1k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  11.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1675|       |    }
 1676|       |    else {
 1677|       |        return contiguous_range_factory{SCN_FWD(range)};
 1678|       |    }
 1679|  11.1k|}
_ZN3scn2v34impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1476|  11.1k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1477|  11.1k|    {
 1478|  11.1k|    }
_ZNK3scn2v34impl19string_view_wrapperIwE4viewEv:
 1490|  13.1k|    {
 1491|  13.1k|        return sv;
 1492|  13.1k|    }
_ZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 5939|    518|{
 5940|    518|    using char_type = detail::char_t<Range>;
 5941|    518|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5942|       |
 5943|    518|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5943:9): [True: 518, False: 0]
  ------------------
 5944|    518|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5945|    518|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5946|       |
 5947|    518|        if (max_width == 0) {
  ------------------
  |  Branch (5947:13): [True: 460, False: 58]
  ------------------
 5948|    460|            auto it = read_while_code_unit(range, pred);
 5949|       |
 5950|    460|            if (want_skipped_width) {
  ------------------
  |  Branch (5950:17): [True: 66, False: 394]
  ------------------
 5951|     66|                auto prefix_width =
 5952|     66|                    static_cast<std::ptrdiff_t>(
 5953|     66|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5954|     66|                    ranges::distance(range.begin(), it);
 5955|     66|                return result_type{it, prefix_width};
 5956|     66|            }
 5957|    394|            return result_type{it, 0};
 5958|    460|        }
 5959|       |
 5960|     58|        auto max_width_view = take_width(range, max_width);
 5961|     58|        auto w_it = read_while_code_unit(max_width_view, pred);
 5962|       |
 5963|     58|        if (want_skipped_width) {
  ------------------
  |  Branch (5963:13): [True: 58, False: 0]
  ------------------
 5964|     58|            return result_type{w_it.base(), max_width - w_it.count()};
 5965|     58|        }
 5966|      0|        return result_type{w_it.base(), 0};
 5967|     58|    }
 5968|       |
 5969|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 5970|      0|    if (max_width == 0) {
  ------------------
  |  Branch (5970:9): [True: 0, False: 0]
  ------------------
 5971|      0|        auto it = read_while_code_units(range, fill_chars);
 5972|       |
 5973|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5973:13): [True: 0, False: 0]
  ------------------
 5974|      0|            auto prefix_width =
 5975|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5976|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5977|      0|            return result_type{it, prefix_width};
 5978|      0|        }
 5979|      0|        return result_type{it, 0};
 5980|      0|    }
 5981|       |
 5982|      0|    auto max_width_view = take_width(range, max_width);
 5983|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5984|       |
 5985|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (5985:9): [True: 0, False: 0]
  ------------------
 5986|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 5987|      0|    }
 5988|      0|    return result_type{w_it.base(), 0};
 5989|      0|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1963|    522|{
 1964|    522|    return read_until_code_unit(range, std::not_fn(pred));
 1965|    522|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1944|    672|{
 1945|    672|    if constexpr (ranges::common_range<Range>) {
 1946|    672|        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|       |    else {
 1949|       |        auto first = range.begin();
 1950|       |        for (; first != range.end(); ++first) {
 1951|       |            if (pred(*first)) {
 1952|       |                return first;
 1953|       |            }
 1954|       |        }
 1955|       |        return first;
 1956|       |    }
 1957|    672|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_:
  742|    518|        : m_fptr([](storage fn,
  743|    518|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    518|              cvref<T> obj = *get<T>(fn);
  745|    518|              if constexpr (std::is_void_v<R>) {
  746|    518|                  obj(static_cast<decltype(args)>(args)...);
  747|    518|              }
  748|    518|              else {
  749|    518|                  return obj(static_cast<decltype(args)>(args)...);
  750|    518|              }
  751|    518|          }),
  752|    518|          m_storage(std::addressof(f))
  753|    518|    {
  754|    518|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|    970|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    970|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    970|              else {
  749|    970|                  return obj(static_cast<decltype(args)>(args)...);
  750|    970|              }
  751|    970|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlwE_EEDaNS3_7storageE:
  683|    970|    {
  684|    970|        if constexpr (std::is_const_v<T>) {
  685|    970|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    970|    }
_ZZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlwE_clEw:
 5945|    970|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_TnPNSF_9enable_ifIXsr3stdE11is_object_vISH_EEvE4typeELPv0EEEPKSH_:
  665|    518|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    518|        {
  667|    518|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1963|     94|{
 1964|     94|    return read_until_code_unit(range, std::not_fn(pred));
 1965|     94|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1944|    340|{
 1945|       |    if constexpr (ranges::common_range<Range>) {
 1946|       |        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|    340|    else {
 1949|    340|        auto first = range.begin();
 1950|  6.11k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1950:16): [True: 5.85k, False: 254]
  ------------------
 1951|  5.85k|            if (pred(*first)) {
  ------------------
  |  Branch (1951:17): [True: 86, False: 5.77k]
  ------------------
 1952|     86|                return first;
 1953|     86|            }
 1954|  5.85k|        }
 1955|    254|        return first;
 1956|    340|    }
 1957|    340|}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 2939|    228|{
 2940|    228|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 0, False: 228]
  ------------------
 2941|      0|        auto it = read_while_classic_space(range);
 2942|      0|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|      0|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2944|      0|            return unexpected(e);
 2945|      0|        }
 2946|       |
 2947|      0|        return it;
 2948|      0|    }
 2949|       |
 2950|    228|    return read_while_classic_space(range);
 2951|    228|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2104|    228|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|    228|    else {
 2114|    228|        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|    228|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|    228|            return detail::is_cp_space(cp);
 2127|    228|        });
 2128|    228|    }
 2129|    228|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2069|    306|{
 2070|    306|    return read_until_code_point(range, std::not_fn(pred));
 2071|    306|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2048|    408|{
 2049|    408|    auto it = range.begin();
 2050|  1.92k|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 1.87k, False: 48]
  ------------------
 2051|  1.87k|        const auto val =
 2052|  1.87k|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  1.87k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  1.87k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.87k, False: 0]
  |  |  ------------------
  ------------------
 2054|  1.87k|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  1.87k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  1.87k|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 360, False: 1.51k]
  ------------------
 2057|    360|                return it;
 2058|    360|            }
 2059|  1.87k|        }
 2060|  1.51k|        it = val.iterator;
 2061|  1.51k|    }
 2062|       |
 2063|     48|    return it;
 2064|    408|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 1886|  16.9k|{
 1887|  16.9k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  16.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|  16.9k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|  16.9k|    auto it = range.begin();
 1891|  16.9k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|  16.9k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  16.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.9k]
  |  |  ------------------
  ------------------
 1894|      0|        ++it;
 1895|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|      0|        return {it, {}};
 1897|      0|    }
 1898|       |
 1899|  16.9k|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 16.9k, False: 0]
  ------------------
 1900|  16.9k|        ++it;
 1901|  16.9k|        return {it, string_type(1, *range.begin())};
 1902|  16.9k|    }
 1903|       |
 1904|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|      0|    return {it, string_type{range.begin(), it}};
 1906|  16.9k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  742|    228|        : m_fptr([](storage fn,
  743|    228|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    228|              cvref<T> obj = *get<T>(fn);
  745|    228|              if constexpr (std::is_void_v<R>) {
  746|    228|                  obj(static_cast<decltype(args)>(args)...);
  747|    228|              }
  748|    228|              else {
  749|    228|                  return obj(static_cast<decltype(args)>(args)...);
  750|    228|              }
  751|    228|          }),
  752|    228|          m_storage(std::addressof(f))
  753|    228|    {
  754|    228|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  743|    330|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    330|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    330|              else {
  749|    330|                  return obj(static_cast<decltype(args)>(args)...);
  750|    330|              }
  751|    330|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|    330|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    330|        else if constexpr (std::is_object_v<T>) {
  688|    330|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    330|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2125|    330|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|    330|            return detail::is_cp_space(cp);
 2127|    330|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|    228|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    228|        {
  662|    228|        }
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2939|  7.20k|{
 2940|  7.20k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 6.59k, False: 612]
  ------------------
 2941|  6.59k|        auto it = read_while_classic_space(range);
 2942|  6.59k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|  6.59k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.59k]
  |  |  ------------------
  ------------------
 2944|      0|            return unexpected(e);
 2945|      0|        }
 2946|       |
 2947|  6.59k|        return it;
 2948|  6.59k|    }
 2949|       |
 2950|    612|    return read_while_classic_space(range);
 2951|  7.20k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2104|  9.20k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|  9.20k|    else {
 2114|  9.20k|        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|  9.20k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  9.20k|            return detail::is_cp_space(cp);
 2127|  9.20k|        });
 2128|  9.20k|    }
 2129|  9.20k|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2069|  9.39k|{
 2070|  9.39k|    return read_until_code_point(range, std::not_fn(pred));
 2071|  9.39k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2048|  12.0k|{
 2049|  12.0k|    auto it = range.begin();
 2050|  46.2k|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 43.4k, False: 2.83k]
  ------------------
 2051|  43.4k|        const auto val =
 2052|  43.4k|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  43.4k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  43.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 43.4k, False: 0]
  |  |  ------------------
  ------------------
 2054|  43.4k|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  43.4k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  43.4k|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 9.25k, False: 34.1k]
  ------------------
 2057|  9.25k|                return it;
 2058|  9.25k|            }
 2059|  43.4k|        }
 2060|  34.1k|        it = val.iterator;
 2061|  34.1k|    }
 2062|       |
 2063|  2.83k|    return it;
 2064|  12.0k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  9.20k|        : m_fptr([](storage fn,
  743|  9.20k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  9.20k|              cvref<T> obj = *get<T>(fn);
  745|  9.20k|              if constexpr (std::is_void_v<R>) {
  746|  9.20k|                  obj(static_cast<decltype(args)>(args)...);
  747|  9.20k|              }
  748|  9.20k|              else {
  749|  9.20k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  9.20k|              }
  751|  9.20k|          }),
  752|  9.20k|          m_storage(std::addressof(f))
  753|  9.20k|    {
  754|  9.20k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  10.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  10.7k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  10.7k|              else {
  749|  10.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  10.7k|              }
  751|  10.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  10.7k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  10.7k|        else if constexpr (std::is_object_v<T>) {
  688|  10.7k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  10.7k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2125|  10.7k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  10.7k|            return detail::is_cp_space(cp);
 2127|  10.7k|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  9.20k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  9.20k|        {
  662|  9.20k|        }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3028|  6.73k|    {
 3029|  6.73k|        reader_error_handler eh{};
 3030|  6.73k|        get_derived().check_specs_impl(specs, eh);
 3031|  6.73k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  6.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.72k, False: 1.01k]
  |  |  ------------------
  ------------------
 3032|  5.72k|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|  5.72k|        }
 3034|  1.01k|        return {};
 3035|  6.73k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
 3039|  6.73k|    {
 3040|  6.73k|        return static_cast<Derived&>(*this);
 3041|  6.73k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3473|  6.73k|    {
 3474|  6.73k|        detail::check_int_type_specs(specs, eh);
 3475|  6.73k|    }
_ZNK3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
 3023|  2.07k|    {
 3024|  2.07k|        return true;
 3025|  2.07k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3527|    162|    {
 3528|    162|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    162|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    162|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    162|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    162|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 162]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    162|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    162|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    162|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|    162|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 0, False: 162]
  ------------------
 3532|      0|            if constexpr (!std::is_signed_v<T>) {
 3533|      0|                return unexpected_scan_error(
 3534|      0|                    scan_error::invalid_scanned_value,
 3535|      0|                    "Unexpected '-' sign when parsing an "
 3536|      0|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|      0|        }
 3547|       |
 3548|    162|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 0, False: 162]
  ------------------
 3549|      0|            value = T{0};
 3550|      0|            return std::next(prefix_result.iterator);
 3551|      0|        }
 3552|       |
 3553|    162|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    162|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 144, False: 18]
  |  |  ------------------
  ------------------
 3554|    144|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    144|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    144|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    144|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    144|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 144, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    144|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    144|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    144|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    144|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    144|    }                                                  \
  |  |  |  | 3667|    144|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|      0|                    parse_integer_digits_without_thsep(
 3556|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|      0|                        prefix_result.parsed_base));
 3558|       |
 3559|      0|            auto buf = make_contiguous_buffer(
 3560|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|      0|                                        prefix_result.parsed_base));
 3564|       |
 3565|      0|            return ranges::next(
 3566|      0|                prefix_result.iterator,
 3567|      0|                ranges::distance(buf.view().begin(), result_it));
 3568|      0|        }
 3569|       |
 3570|     18|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|     18|            localized_number_formatting_options<CharT>{loc};
 3575|     18|#endif
 3576|       |
 3577|     18|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     18|    }                                                  \
  |  |  |  | 3667|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|      0|                parse_integer_digits_with_thsep(
 3579|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|      0|                    prefix_result.parsed_base, locale_options));
 3581|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|      0|            parse_digits_result;
 3583|       |
 3584|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 0, False: 0]
  ------------------
 3585|      0|            if (auto e = check_thsep_grouping(
 3586|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|      0|                    thsep_indices, locale_options.grouping);
 3588|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3589|      0|                return unexpected(e);
 3590|      0|            }
 3591|      0|        }
 3592|       |
 3593|      0|        auto nothsep_source_view =
 3594|      0|            std::basic_string_view<CharT>{nothsep_source};
 3595|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|      0|            nothsep_source_it,
 3597|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|      0|                                prefix_result.parsed_base));
 3599|       |
 3600|      0|        return ranges::next(
 3601|      0|            prefix_result.iterator,
 3602|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|      0|                ranges::ssize(thsep_indices));
 3604|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|    342|    {
 3528|    342|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    342|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    342|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    342|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    342|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 342]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    342|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    342|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    342|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|    342|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 0, False: 342]
  ------------------
 3532|      0|            if constexpr (!std::is_signed_v<T>) {
 3533|      0|                return unexpected_scan_error(
 3534|      0|                    scan_error::invalid_scanned_value,
 3535|      0|                    "Unexpected '-' sign when parsing an "
 3536|      0|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|      0|        }
 3547|       |
 3548|    342|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 0, False: 342]
  ------------------
 3549|      0|            value = T{0};
 3550|      0|            return std::next(prefix_result.iterator);
 3551|      0|        }
 3552|       |
 3553|    342|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    342|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 322, False: 20]
  |  |  ------------------
  ------------------
 3554|    322|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    322|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    322|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    322|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    322|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 322]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    322|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    322|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|    322|                    parse_integer_digits_without_thsep(
 3556|    322|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|    322|                        prefix_result.parsed_base));
 3558|       |
 3559|    322|            auto buf = make_contiguous_buffer(
 3560|    322|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|    322|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    322|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    322|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    322|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    322|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 322, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    322|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    322|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    322|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    322|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    322|    }                                                  \
  |  |  |  | 3667|    322|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|      0|                                        prefix_result.parsed_base));
 3564|       |
 3565|      0|            return ranges::next(
 3566|      0|                prefix_result.iterator,
 3567|      0|                ranges::distance(buf.view().begin(), result_it));
 3568|    322|        }
 3569|       |
 3570|     20|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|     20|            localized_number_formatting_options<CharT>{loc};
 3575|     20|#endif
 3576|       |
 3577|     20|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     20|    }                                                  \
  |  |  |  | 3667|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|      0|                parse_integer_digits_with_thsep(
 3579|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|      0|                    prefix_result.parsed_base, locale_options));
 3581|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|      0|            parse_digits_result;
 3583|       |
 3584|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 0, False: 0]
  ------------------
 3585|      0|            if (auto e = check_thsep_grouping(
 3586|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|      0|                    thsep_indices, locale_options.grouping);
 3588|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3589|      0|                return unexpected(e);
 3590|      0|            }
 3591|      0|        }
 3592|       |
 3593|      0|        auto nothsep_source_view =
 3594|      0|            std::basic_string_view<CharT>{nothsep_source};
 3595|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|      0|            nothsep_source_it,
 3597|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|      0|                                prefix_result.parsed_base));
 3599|       |
 3600|      0|        return ranges::next(
 3601|      0|            prefix_result.iterator,
 3602|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|      0|                ranges::ssize(thsep_indices));
 3604|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3527|    126|    {
 3528|    126|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    126|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    126|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    126|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    126|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 126]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    126|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    126|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    126|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|    126|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 0, False: 126]
  ------------------
 3532|      0|            if constexpr (!std::is_signed_v<T>) {
 3533|      0|                return unexpected_scan_error(
 3534|      0|                    scan_error::invalid_scanned_value,
 3535|      0|                    "Unexpected '-' sign when parsing an "
 3536|      0|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|      0|        }
 3547|       |
 3548|    126|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 0, False: 126]
  ------------------
 3549|      0|            value = T{0};
 3550|      0|            return std::next(prefix_result.iterator);
 3551|      0|        }
 3552|       |
 3553|    126|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    126|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 126, False: 0]
  |  |  ------------------
  ------------------
 3554|    126|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    126|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    126|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    126|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    126|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 126, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    126|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    126|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    126|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    126|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    126|    }                                                  \
  |  |  |  | 3667|    126|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|      0|                    parse_integer_digits_without_thsep(
 3556|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|      0|                        prefix_result.parsed_base));
 3558|       |
 3559|      0|            auto buf = make_contiguous_buffer(
 3560|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|      0|                                        prefix_result.parsed_base));
 3564|       |
 3565|      0|            return ranges::next(
 3566|      0|                prefix_result.iterator,
 3567|      0|                ranges::distance(buf.view().begin(), result_it));
 3568|      0|        }
 3569|       |
 3570|      0|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|      0|            localized_number_formatting_options<CharT>{loc};
 3575|      0|#endif
 3576|       |
 3577|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|      0|                parse_integer_digits_with_thsep(
 3579|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|      0|                    prefix_result.parsed_base, locale_options));
 3581|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|      0|            parse_digits_result;
 3583|       |
 3584|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 0, False: 0]
  ------------------
 3585|      0|            if (auto e = check_thsep_grouping(
 3586|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|      0|                    thsep_indices, locale_options.grouping);
 3588|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3589|      0|                return unexpected(e);
 3590|      0|            }
 3591|      0|        }
 3592|       |
 3593|      0|        auto nothsep_source_view =
 3594|      0|            std::basic_string_view<CharT>{nothsep_source};
 3595|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|      0|            nothsep_source_it,
 3597|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|      0|                                prefix_result.parsed_base));
 3599|       |
 3600|      0|        return ranges::next(
 3601|      0|            prefix_result.iterator,
 3602|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|      0|                ranges::ssize(thsep_indices));
 3604|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|    840|    {
 3528|    840|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    840|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    840|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    840|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    840|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 840]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    840|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    840|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    840|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|    840|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 0, False: 840]
  ------------------
 3532|      0|            if constexpr (!std::is_signed_v<T>) {
 3533|      0|                return unexpected_scan_error(
 3534|      0|                    scan_error::invalid_scanned_value,
 3535|      0|                    "Unexpected '-' sign when parsing an "
 3536|      0|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|      0|        }
 3547|       |
 3548|    840|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 0, False: 840]
  ------------------
 3549|      0|            value = T{0};
 3550|      0|            return std::next(prefix_result.iterator);
 3551|      0|        }
 3552|       |
 3553|    840|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    840|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 840, False: 0]
  |  |  ------------------
  ------------------
 3554|    840|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    840|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    840|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    840|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    840|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 840]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    840|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    840|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|    840|                    parse_integer_digits_without_thsep(
 3556|    840|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|    840|                        prefix_result.parsed_base));
 3558|       |
 3559|    840|            auto buf = make_contiguous_buffer(
 3560|    840|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|    840|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    840|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    840|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    840|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    840|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 840, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    840|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    840|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    840|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    840|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    840|    }                                                  \
  |  |  |  | 3667|    840|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|      0|                                        prefix_result.parsed_base));
 3564|       |
 3565|      0|            return ranges::next(
 3566|      0|                prefix_result.iterator,
 3567|      0|                ranges::distance(buf.view().begin(), result_it));
 3568|    840|        }
 3569|       |
 3570|      0|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|      0|            localized_number_formatting_options<CharT>{loc};
 3575|      0|#endif
 3576|       |
 3577|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|      0|                parse_integer_digits_with_thsep(
 3579|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|      0|                    prefix_result.parsed_base, locale_options));
 3581|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|      0|            parse_digits_result;
 3583|       |
 3584|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 0, False: 0]
  ------------------
 3585|      0|            if (auto e = check_thsep_grouping(
 3586|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|      0|                    thsep_indices, locale_options.grouping);
 3588|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3589|      0|                return unexpected(e);
 3590|      0|            }
 3591|      0|        }
 3592|       |
 3593|      0|        auto nothsep_source_view =
 3594|      0|            std::basic_string_view<CharT>{nothsep_source};
 3595|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|      0|            nothsep_source_it,
 3597|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|      0|                                prefix_result.parsed_base));
 3599|       |
 3600|      0|        return ranges::next(
 3601|      0|            prefix_result.iterator,
 3602|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|      0|                ranges::ssize(thsep_indices));
 3604|      0|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3028|  3.36k|    {
 3029|  3.36k|        reader_error_handler eh{};
 3030|  3.36k|        get_derived().check_specs_impl(specs, eh);
 3031|  3.36k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  3.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.88k, False: 478]
  |  |  ------------------
  ------------------
 3032|  2.88k|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|  2.88k|        }
 3034|    478|        return {};
 3035|  3.36k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3039|  3.36k|    {
 3040|  3.36k|        return static_cast<Derived&>(*this);
 3041|  3.36k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4133|  3.36k|    {
 4134|  3.36k|        detail::check_float_type_specs(specs, eh);
 4135|  3.36k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3023|  1.01k|    {
 3024|  1.01k|        return true;
 3025|  1.01k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4205|    474|    {
 4206|    474|        unsigned options{};
 4207|    474|        if (specs.localized) {
  ------------------
  |  Branch (4207:13): [True: 18, False: 456]
  ------------------
 4208|     18|            options |= float_reader_base::allow_thsep;
 4209|     18|        }
 4210|       |
 4211|    474|        SCN_GCC_COMPAT_PUSH
 4212|    474|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4213|       |
 4214|    474|        switch (specs.type) {
 4215|      8|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4215:13): [True: 8, False: 466]
  ------------------
 4216|      8|                return options | float_reader_base::allow_fixed;
 4217|       |
 4218|      4|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4218:13): [True: 4, False: 470]
  ------------------
 4219|      4|                return options | float_reader_base::allow_scientific;
 4220|       |
 4221|     18|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4221:13): [True: 18, False: 456]
  ------------------
 4222|     18|                return options | float_reader_base::allow_hex;
 4223|       |
 4224|      4|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4224:13): [True: 4, False: 470]
  ------------------
 4225|      4|                return options | float_reader_base::allow_scientific |
 4226|      4|                       float_reader_base::allow_fixed;
 4227|       |
 4228|    440|            case detail::presentation_type::none:
  ------------------
  |  Branch (4228:13): [True: 440, False: 34]
  ------------------
 4229|    440|                return options | float_reader_base::allow_scientific |
 4230|    440|                       float_reader_base::allow_fixed |
 4231|    440|                       float_reader_base::allow_hex;
 4232|       |
 4233|      0|            default:
  ------------------
  |  Branch (4233:13): [True: 0, False: 474]
  ------------------
 4234|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4235|    474|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4236|    474|        }
 4237|       |
 4238|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4239|    474|    }
_ZN3scn2v34impl12float_readerIwEC2Ej:
 3648|    474|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2Ev:
 1758|  1.00k|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIwEC2Ev:
 1519|  2.01k|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIwE17handle_separatorsEv:
 4045|    852|    {
 4046|    852|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4046:13): [True: 852, False: 0]
  ------------------
 4047|    852|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4047:13): [True: 852, False: 0]
  ------------------
 4048|    852|            return;
 4049|    852|        }
 4050|       |
 4051|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4052|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4052:13): [True: 0, False: 0]
  ------------------
 4053|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4053:27): [True: 0, False: 0]
  ------------------
 4054|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4054:21): [True: 0, False: 0]
  ------------------
 4055|      0|                    ch = CharT{'.'};
 4056|      0|                }
 4057|      0|            }
 4058|      0|        }
 4059|       |
 4060|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4060:13): [True: 0, False: 0]
  ------------------
 4061|      0|            return;
 4062|      0|        }
 4063|       |
 4064|      0|        auto first =
 4065|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4066|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4066:13): [True: 0, False: 0]
  ------------------
 4067|      0|            return;
 4068|      0|        }
 4069|       |
 4070|      0|        m_thsep_indices.push_back(
 4071|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4072|       |
 4073|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4073:31): [True: 0, False: 0]
  ------------------
 4074|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4074:17): [True: 0, False: 0]
  ------------------
 4075|      0|                *first++ = std::move(*it);
 4076|      0|            }
 4077|      0|            else {
 4078|      0|                m_thsep_indices.push_back(
 4079|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4080|      0|            }
 4081|      0|        }
 4082|       |
 4083|      0|        str.erase(first, str.end());
 4084|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1574|    320|    {
 1575|    320|        return m_storage.has_value();
 1576|    320|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1579|    160|    {
 1580|    160|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|    160|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    160|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1581|    160|        return *m_storage;
 1582|    160|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  762|    146|    {
  763|    146|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    146|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    146|    }
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3667|      8|    {
 3668|      8|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3669|      8|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|      8|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 8]
  |  |  ------------------
  ------------------
 3670|      0|            m_locale_options.thousands_sep = CharT{0};
 3671|      0|        }
 3672|       |
 3673|      8|        return read_source_impl(range);
 3674|      8|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3693|    146|    {
 3694|    146|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|    146|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    146|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    146|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    146|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 146]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    146|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    146|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3695|    146|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3696|    146|        auto it = sign_result.first;
 3697|    146|        m_sign = sign_result.second;
 3698|       |
 3699|    146|        auto digits_begin = it;
 3700|    146|        auto r = ranges::subrange{it, range.end()};
 3701|       |        if constexpr (ranges::contiguous_range<Range> &&
 3702|       |                      ranges::sized_range<Range>) {
 3703|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3704|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3705|       |                SCN_TRY_ASSIGN(
 3706|       |                    it,
 3707|       |                    do_read_source_impl(
 3708|       |                        r,
 3709|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3710|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3711|       |            }
 3712|       |            else {
 3713|       |                auto cb = [&](const auto& rr)
 3714|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3715|       |                    auto res = read_all(rr);
 3716|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3717|       |                        return unexpected_scan_error(
 3718|       |                            scan_error::invalid_scanned_value,
 3719|       |                            "Invalid float value");
 3720|       |                    }
 3721|       |                    return res;
 3722|       |                };
 3723|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3724|       |            }
 3725|       |        }
 3726|    146|        else {
 3727|    146|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|    146|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    146|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    146|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 146, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    146|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    146|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    146|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    146|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    146|    }                                                  \
  |  | 3667|    146|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    146|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3728|      0|                it,
 3729|      0|                do_read_source_impl(
 3730|      0|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3731|      0|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3732|      0|        }
 3733|       |
 3734|    146|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    146|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    146|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3735|       |
 3736|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3736:13): [True: 0, False: 0]
  |  Branch (3736:48): [True: 0, False: 0]
  ------------------
 3737|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3737:13): [True: 0, False: 0]
  ------------------
 3738|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3738:13): [True: 0, False: 0]
  ------------------
 3739|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3740|      0|        }
 3741|       |
 3742|      0|        handle_separators();
 3743|       |
 3744|      0|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3744:13): [True: 0, False: 0]
  ------------------
 3745|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|      0|            if (auto e = check_thsep_grouping(
 3747|      0|                    ranges::subrange{
 3748|      0|                        digits_begin,
 3749|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3750|      0|                    m_thsep_indices, m_locale_options.grouping);
 3751|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3752|      0|                return unexpected(e);
 3753|      0|            }
 3754|      0|        }
 3755|       |
 3756|      0|        return it;
 3757|      0|    }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 3988|    146|    {
 3989|    146|        const bool allowed_hex = (m_options & allow_hex) != 0;
 3990|    146|        const bool allowed_nonhex =
 3991|    146|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 3992|    146|             ~static_cast<unsigned>(allow_hex)) != 0;
 3993|       |
 3994|    146|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (3994:39): [True: 146, False: 0]
  |  Branch (3994:45): [True: 0, False: 146]
  ------------------
 3995|      0|            return r.transform_error(map_parse_error_to_scan_error(
 3996|      0|                scan_error::invalid_scanned_value,
 3997|      0|                "Invalid infinite floating-point value"));
 3998|      0|        }
 3999|    146|        else if (r) {
  ------------------
  |  Branch (3999:18): [True: 0, False: 146]
  ------------------
 4000|      0|            return *r;
 4001|      0|        }
 4002|       |
 4003|    146|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4003:39): [True: 146, False: 0]
  |  Branch (4003:45): [True: 0, False: 146]
  ------------------
 4004|      0|            return unexpected(r.error());
 4005|      0|        }
 4006|    146|        else if (r) {
  ------------------
  |  Branch (4006:18): [True: 0, False: 146]
  ------------------
 4007|      0|            return *r;
 4008|      0|        }
 4009|       |
 4010|    146|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4010:13): [True: 138, False: 8]
  |  Branch (4010:28): [True: 6, False: 132]
  ------------------
 4011|       |            // only hex allowed:
 4012|       |            // prefix "0x" allowed, not required
 4013|      6|            auto it = range.begin();
 4014|       |
 4015|      6|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4015:22): [True: 0, False: 6]
  ------------------
 4016|      0|                m_kind = float_kind::hex_with_prefix;
 4017|      0|                it = *r;
 4018|      0|            }
 4019|      6|            else {
 4020|      6|                m_kind = float_kind::hex_without_prefix;
 4021|      6|            }
 4022|       |
 4023|      6|            return read_hex(ranges::subrange{it, range.end()});
 4024|      6|        }
 4025|    140|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4025:13): [True: 8, False: 132]
  |  Branch (4025:29): [True: 8, False: 0]
  ------------------
 4026|       |            // only nonhex allowed:
 4027|       |            // no prefix allowed
 4028|      8|            m_kind = float_kind::generic;
 4029|      8|            return read_regular_float(range);
 4030|      8|        }
 4031|       |        // both hex and nonhex allowed:
 4032|       |        // check for "0x" prefix -> hex,
 4033|       |        // regular otherwise
 4034|       |
 4035|    132|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    132|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 132]
  |  |  ------------------
  ------------------
 4036|      0|            m_kind = float_kind::hex_with_prefix;
 4037|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4038|      0|        }
 4039|       |
 4040|    132|        m_kind = float_kind::generic;
 4041|    132|        return read_regular(range);
 4042|    132|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3799|    146|    {
 3800|    146|        auto it = range.begin();
 3801|    146|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3801:73): [True: 146, False: 0]
  ------------------
 3802|    146|            return unexpected(r.error());
 3803|    146|        }
 3804|      0|        else {
 3805|      0|            it = *r;
 3806|      0|        }
 3807|       |
 3808|      0|        if (auto r = read_matching_string_classic_nocase(
 3809|      0|                ranges::subrange{it, range.end()}, "inity");
 3810|      0|            !r) {
  ------------------
  |  Branch (3810:13): [True: 0, False: 0]
  ------------------
 3811|      0|            m_kind = float_kind::inf_short;
 3812|      0|            return it;
 3813|      0|        }
 3814|      0|        else {
 3815|      0|            m_kind = float_kind::inf_long;
 3816|      0|            return *r;
 3817|      0|        }
 3818|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3822|    146|    {
 3823|    146|        auto it = range.begin();
 3824|    146|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3824:73): [True: 146, False: 0]
  ------------------
 3825|    146|            return r.transform_error(map_parse_error_to_scan_error(
 3826|    146|                scan_error::invalid_scanned_value,
 3827|    146|                "Invalid floating-point NaN value"));
 3828|    146|        }
 3829|      0|        else {
 3830|      0|            it = *r;
 3831|      0|        }
 3832|       |
 3833|      0|        if (auto r =
 3834|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3835|      0|            !r) {
  ------------------
  |  Branch (3835:13): [True: 0, False: 0]
  ------------------
 3836|      0|            m_kind = float_kind::nan_simple;
 3837|      0|            return it;
 3838|      0|        }
 3839|      0|        else {
 3840|      0|            it = *r;
 3841|      0|        }
 3842|       |
 3843|      0|        auto payload_beg_it = it;
 3844|      0|        it = read_while_code_unit(
 3845|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3846|      0|                return is_ascii_char(ch) &&
 3847|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3848|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3849|      0|            });
 3850|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3851|       |
 3852|      0|        m_kind = float_kind::nan_with_payload;
 3853|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3853:18): [True: 0, False: 0]
  ------------------
 3854|      0|                                             ')')) {
 3855|      0|            return *r;
 3856|      0|        }
 3857|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3858|      0|                                     "Invalid floating-point NaN payload");
 3859|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3792|    138|    {
 3793|    138|        return read_matching_string_classic_nocase(range, "0x");
 3794|    138|    }
_ZN3scn2v34impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3892|      6|    {
 3893|      6|        auto it = range.begin();
 3894|       |
 3895|      6|        std::ptrdiff_t digits_count = 0;
 3896|      6|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3897|      6|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  ------------------
  ------------------
 3898|      6|            return r.transform_error(map_parse_error_to_scan_error(
 3899|      6|                scan_error::invalid_scanned_value,
 3900|      6|                "Invalid hexadecimal floating-point value"));
 3901|      6|        }
 3902|      0|        else {
 3903|      0|            digits_count += ranges::distance(it, *r);
 3904|      0|            it = *r;
 3905|      0|        }
 3906|       |
 3907|      0|        m_integral_part_length = digits_count;
 3908|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3908:18): [True: 0, False: 0]
  ------------------
 3909|      0|                                             m_locale_options.decimal_point)) {
 3910|      0|            it = *r;
 3911|      0|        }
 3912|       |
 3913|      0|        if (auto r =
  ------------------
  |  Branch (3913:18): [True: 0, False: 0]
  ------------------
 3914|      0|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3915|      0|            digits_count += ranges::distance(it, *r);
 3916|      0|            it = *r;
 3917|      0|        }
 3918|       |
 3919|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3920|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3921|      0|                                         "No significand digits in hexfloat");
 3922|      0|        }
 3923|       |
 3924|      0|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3925|       |
 3926|      0|        return it;
 3927|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3777|      6|    {
 3778|      6|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6]
  |  |  |  Branch (859:45): [True: 0, False: 6]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3779|      6|                         thsep_allowed)) {
 3780|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3781|      0|                return char_to_int(ch) < 16 ||
 3782|      0|                       ch == m_locale_options.thousands_sep;
 3783|      0|            });
 3784|      0|        }
 3785|       |
 3786|      6|        return read_while1_code_unit(
 3787|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3788|      6|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_:
  742|      6|        : m_fptr([](storage fn,
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|      6|              if constexpr (std::is_void_v<R>) {
  746|      6|                  obj(static_cast<decltype(args)>(args)...);
  747|      6|              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
  752|      6|          m_storage(std::addressof(f))
  753|      6|    {
  754|      6|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEwE_clES18_w:
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlwE0_EEDaNS3_7storageE:
  683|      6|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      6|        else if constexpr (std::is_object_v<T>) {
  688|      6|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      6|    }
_ZZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlwE0_clEw:
 3787|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_TnPNSP_9enable_ifIXsr3stdE11is_object_vISR_EEvE4typeELPv0EEEPSR_:
  660|      6|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      6|        {
  662|      6|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3932|    140|    {
 3933|    140|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3934|    140|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3934:35): [True: 134, False: 6]
  |  Branch (3934:50): [True: 2, False: 132]
  ------------------
 3935|       |
 3936|    140|        auto it = ranges::begin(range);
 3937|    140|        std::ptrdiff_t digits_count = 0;
 3938|       |
 3939|    140|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3940|    140|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    140|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 140, False: 0]
  |  |  ------------------
  ------------------
 3941|    140|            return r.transform_error(
 3942|    140|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3943|    140|                                              "Invalid floating-point value"));
 3944|    140|        }
 3945|      0|        else {
 3946|      0|            digits_count += ranges::distance(it, *r);
 3947|      0|            it = *r;
 3948|      0|        }
 3949|       |
 3950|      0|        m_integral_part_length = digits_count;
 3951|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3951:18): [True: 0, False: 0]
  ------------------
 3952|      0|                                             m_locale_options.decimal_point)) {
 3953|      0|            it = *r;
 3954|      0|        }
 3955|       |
 3956|      0|        if (auto r =
  ------------------
  |  Branch (3956:18): [True: 0, False: 0]
  ------------------
 3957|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3958|      0|            digits_count += ranges::distance(it, *r);
 3959|      0|            it = *r;
 3960|      0|        }
 3961|       |
 3962|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3963|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3964|      0|                                         "No significand digits in float");
 3965|      0|        }
 3966|       |
 3967|      0|        auto beg_exp_it = it;
 3968|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3968:13): [True: 0, False: 0]
  ------------------
 3969|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3970|      0|        }
 3971|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3971:13): [True: 0, False: 0]
  |  Branch (3971:29): [True: 0, False: 0]
  ------------------
 3972|      0|            return unexpected_scan_error(
 3973|      0|                scan_error::invalid_scanned_value,
 3974|      0|                "No exponent given to scientific float");
 3975|      0|        }
 3976|       |
 3977|      0|        m_kind =
 3978|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3978:13): [True: 0, False: 0]
  ------------------
 3979|       |
 3980|      0|        return it;
 3981|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3762|    140|    {
 3763|    140|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|    140|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 140]
  |  |  |  Branch (859:45): [True: 0, False: 140]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|    140|                         thsep_allowed)) {
 3765|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3766|      0|                return char_to_int(ch) < 10 ||
 3767|      0|                       ch == m_locale_options.thousands_sep;
 3768|      0|            });
 3769|      0|        }
 3770|       |
 3771|    140|        return read_while1_code_unit(
 3772|    140|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3773|    140|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_:
  742|    140|        : m_fptr([](storage fn,
  743|    140|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    140|              cvref<T> obj = *get<T>(fn);
  745|    140|              if constexpr (std::is_void_v<R>) {
  746|    140|                  obj(static_cast<decltype(args)>(args)...);
  747|    140|              }
  748|    140|              else {
  749|    140|                  return obj(static_cast<decltype(args)>(args)...);
  750|    140|              }
  751|    140|          }),
  752|    140|          m_storage(std::addressof(f))
  753|    140|    {
  754|    140|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEwE_clES18_w:
  743|    140|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    140|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    140|              else {
  749|    140|                  return obj(static_cast<decltype(args)>(args)...);
  750|    140|              }
  751|    140|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlwE0_EEDaNS3_7storageE:
  683|    140|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    140|        else if constexpr (std::is_object_v<T>) {
  688|    140|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    140|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlwE0_clEw:
 3772|    140|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_TnPNSP_9enable_ifIXsr3stdE11is_object_vISR_EEvE4typeELPv0EEEPSR_:
  660|    140|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    140|        {
  662|    140|        }
_ZN3scn2v34impl12float_readerIwE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3653|    138|    {
 3654|    138|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    138|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 138]
  |  |  ------------------
  ------------------
 3655|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3656|      0|                classic_with_thsep_tag{}};
 3657|      0|        }
 3658|       |
 3659|    138|        return read_source_impl(range);
 3660|    138|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|    860|    {
  763|    860|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    860|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    860|    }
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3667|     10|    {
 3668|     10|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3669|     10|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|     10|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 10]
  |  |  ------------------
  ------------------
 3670|      0|            m_locale_options.thousands_sep = CharT{0};
 3671|      0|        }
 3672|       |
 3673|     10|        return read_source_impl(range);
 3674|     10|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3693|    860|    {
 3694|    860|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|    860|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    860|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    860|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    860|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 860]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    860|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    860|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3695|    860|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3696|    860|        auto it = sign_result.first;
 3697|    860|        m_sign = sign_result.second;
 3698|       |
 3699|    860|        auto digits_begin = it;
 3700|    860|        auto r = ranges::subrange{it, range.end()};
 3701|       |        if constexpr (ranges::contiguous_range<Range> &&
 3702|    860|                      ranges::sized_range<Range>) {
 3703|    860|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  1.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 860]
  |  |  |  Branch (859:45): [True: 0, False: 860]
  |  |  |  Branch (859:45): [True: 0, False: 860]
  |  |  ------------------
  ------------------
 3704|    860|                             m_locale_options.decimal_point != CharT{'.'})) {
 3705|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|      0|    }                                                  \
  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3706|      0|                    it,
 3707|      0|                    do_read_source_impl(
 3708|      0|                        r,
 3709|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3710|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3711|      0|            }
 3712|    860|            else {
 3713|    860|                auto cb = [&](const auto& rr)
 3714|    860|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3715|    860|                    auto res = read_all(rr);
 3716|    860|                    if (SCN_UNLIKELY(res == r.begin())) {
 3717|    860|                        return unexpected_scan_error(
 3718|    860|                            scan_error::invalid_scanned_value,
 3719|    860|                            "Invalid float value");
 3720|    860|                    }
 3721|    860|                    return res;
 3722|    860|                };
 3723|    860|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3663|    860|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    860|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    860|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 8, False: 852]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|      8|    }                                                  \
  |  | 3667|    860|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    860|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3724|    852|            }
 3725|       |        }
 3726|       |        else {
 3727|       |            SCN_TRY_ASSIGN(
 3728|       |                it,
 3729|       |                do_read_source_impl(
 3730|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3731|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3732|       |        }
 3733|       |
 3734|    860|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    860|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    860|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3735|       |
 3736|    852|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3736:13): [True: 852, False: 0]
  |  Branch (3736:48): [True: 852, False: 0]
  ------------------
 3737|    852|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3737:13): [True: 852, False: 0]
  ------------------
 3738|    852|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3738:13): [True: 852, False: 0]
  ------------------
 3739|    852|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3740|    852|        }
 3741|       |
 3742|    852|        handle_separators();
 3743|       |
 3744|    852|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3744:13): [True: 0, False: 852]
  ------------------
 3745|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|      0|            if (auto e = check_thsep_grouping(
 3747|      0|                    ranges::subrange{
 3748|      0|                        digits_begin,
 3749|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3750|      0|                    m_thsep_indices, m_locale_options.grouping);
 3751|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3752|      0|                return unexpected(e);
 3753|      0|            }
 3754|      0|        }
 3755|       |
 3756|    852|        return it;
 3757|    852|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3799|    860|    {
 3800|    860|        auto it = range.begin();
 3801|    860|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3801:73): [True: 860, False: 0]
  ------------------
 3802|    860|            return unexpected(r.error());
 3803|    860|        }
 3804|      0|        else {
 3805|      0|            it = *r;
 3806|      0|        }
 3807|       |
 3808|      0|        if (auto r = read_matching_string_classic_nocase(
 3809|      0|                ranges::subrange{it, range.end()}, "inity");
 3810|      0|            !r) {
  ------------------
  |  Branch (3810:13): [True: 0, False: 0]
  ------------------
 3811|      0|            m_kind = float_kind::inf_short;
 3812|      0|            return it;
 3813|      0|        }
 3814|      0|        else {
 3815|      0|            m_kind = float_kind::inf_long;
 3816|      0|            return *r;
 3817|      0|        }
 3818|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3822|    860|    {
 3823|    860|        auto it = range.begin();
 3824|    860|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3824:73): [True: 860, False: 0]
  ------------------
 3825|    860|            return r.transform_error(map_parse_error_to_scan_error(
 3826|    860|                scan_error::invalid_scanned_value,
 3827|    860|                "Invalid floating-point NaN value"));
 3828|    860|        }
 3829|      0|        else {
 3830|      0|            it = *r;
 3831|      0|        }
 3832|       |
 3833|      0|        if (auto r =
 3834|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3835|      0|            !r) {
  ------------------
  |  Branch (3835:13): [True: 0, False: 0]
  ------------------
 3836|      0|            m_kind = float_kind::nan_simple;
 3837|      0|            return it;
 3838|      0|        }
 3839|      0|        else {
 3840|      0|            it = *r;
 3841|      0|        }
 3842|       |
 3843|      0|        auto payload_beg_it = it;
 3844|      0|        it = read_while_code_unit(
 3845|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3846|      0|                return is_ascii_char(ch) &&
 3847|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3848|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3849|      0|            });
 3850|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3851|       |
 3852|      0|        m_kind = float_kind::nan_with_payload;
 3853|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3853:18): [True: 0, False: 0]
  ------------------
 3854|      0|                                             ')')) {
 3855|      0|            return *r;
 3856|      0|        }
 3857|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3858|      0|                                     "Invalid floating-point NaN payload");
 3859|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3792|    852|    {
 3793|    852|        return read_matching_string_classic_nocase(range, "0x");
 3794|    852|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1983|      8|{
 1984|      8|    auto it = read_while_code_unit(range, pred);
 1985|      8|    if (it == range.begin()) {
  ------------------
  |  Branch (1985:9): [True: 8, False: 0]
  ------------------
 1986|      8|        return unexpected(parse_error::error);
 1987|      8|    }
 1988|      0|    return it;
 1989|      8|}
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3932|      8|    {
 3933|      8|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3934|      8|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3934:35): [True: 6, False: 2]
  |  Branch (3934:50): [True: 2, False: 4]
  ------------------
 3935|       |
 3936|      8|        auto it = ranges::begin(range);
 3937|      8|        std::ptrdiff_t digits_count = 0;
 3938|       |
 3939|      8|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3940|      8|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 0]
  |  |  ------------------
  ------------------
 3941|      8|            return r.transform_error(
 3942|      8|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3943|      8|                                              "Invalid floating-point value"));
 3944|      8|        }
 3945|      0|        else {
 3946|      0|            digits_count += ranges::distance(it, *r);
 3947|      0|            it = *r;
 3948|      0|        }
 3949|       |
 3950|      0|        m_integral_part_length = digits_count;
 3951|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3951:18): [True: 0, False: 0]
  ------------------
 3952|      0|                                             m_locale_options.decimal_point)) {
 3953|      0|            it = *r;
 3954|      0|        }
 3955|       |
 3956|      0|        if (auto r =
  ------------------
  |  Branch (3956:18): [True: 0, False: 0]
  ------------------
 3957|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3958|      0|            digits_count += ranges::distance(it, *r);
 3959|      0|            it = *r;
 3960|      0|        }
 3961|       |
 3962|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3963|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3964|      0|                                         "No significand digits in float");
 3965|      0|        }
 3966|       |
 3967|      0|        auto beg_exp_it = it;
 3968|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3968:13): [True: 0, False: 0]
  ------------------
 3969|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3970|      0|        }
 3971|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3971:13): [True: 0, False: 0]
  |  Branch (3971:29): [True: 0, False: 0]
  ------------------
 3972|      0|            return unexpected_scan_error(
 3973|      0|                scan_error::invalid_scanned_value,
 3974|      0|                "No exponent given to scientific float");
 3975|      0|        }
 3976|       |
 3977|      0|        m_kind =
 3978|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3978:13): [True: 0, False: 0]
  ------------------
 3979|       |
 3980|      0|        return it;
 3981|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3762|      8|    {
 3763|      8|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8]
  |  |  |  Branch (859:45): [True: 0, False: 8]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|      8|                         thsep_allowed)) {
 3765|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3766|      0|                return char_to_int(ch) < 10 ||
 3767|      0|                       ch == m_locale_options.thousands_sep;
 3768|      0|            });
 3769|      0|        }
 3770|       |
 3771|      8|        return read_while1_code_unit(
 3772|      8|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3773|      8|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|      8|        : m_fptr([](storage fn,
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|      8|              if constexpr (std::is_void_v<R>) {
  746|      8|                  obj(static_cast<decltype(args)>(args)...);
  747|      8|              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
  752|      8|          m_storage(std::addressof(f))
  753|      8|    {
  754|      8|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|      8|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      8|        else if constexpr (std::is_object_v<T>) {
  688|      8|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      8|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3772|      8|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|      8|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      8|        {
  662|      8|        }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3988|    860|    {
 3989|    860|        const bool allowed_hex = (m_options & allow_hex) != 0;
 3990|    860|        const bool allowed_nonhex =
 3991|    860|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 3992|    860|             ~static_cast<unsigned>(allow_hex)) != 0;
 3993|       |
 3994|    860|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (3994:39): [True: 860, False: 0]
  |  Branch (3994:45): [True: 0, False: 860]
  ------------------
 3995|      0|            return r.transform_error(map_parse_error_to_scan_error(
 3996|      0|                scan_error::invalid_scanned_value,
 3997|      0|                "Invalid infinite floating-point value"));
 3998|      0|        }
 3999|    860|        else if (r) {
  ------------------
  |  Branch (3999:18): [True: 0, False: 860]
  ------------------
 4000|      0|            return *r;
 4001|      0|        }
 4002|       |
 4003|    860|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4003:39): [True: 860, False: 0]
  |  Branch (4003:45): [True: 0, False: 860]
  ------------------
 4004|      0|            return unexpected(r.error());
 4005|      0|        }
 4006|    860|        else if (r) {
  ------------------
  |  Branch (4006:18): [True: 0, False: 860]
  ------------------
 4007|      0|            return *r;
 4008|      0|        }
 4009|       |
 4010|    860|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4010:13): [True: 852, False: 8]
  |  Branch (4010:28): [True: 12, False: 840]
  ------------------
 4011|       |            // only hex allowed:
 4012|       |            // prefix "0x" allowed, not required
 4013|     12|            auto it = range.begin();
 4014|       |
 4015|     12|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4015:22): [True: 0, False: 12]
  ------------------
 4016|      0|                m_kind = float_kind::hex_with_prefix;
 4017|      0|                it = *r;
 4018|      0|            }
 4019|     12|            else {
 4020|     12|                m_kind = float_kind::hex_without_prefix;
 4021|     12|            }
 4022|       |
 4023|     12|            return read_hex(ranges::subrange{it, range.end()});
 4024|     12|        }
 4025|    848|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4025:13): [True: 8, False: 840]
  |  Branch (4025:29): [True: 8, False: 0]
  ------------------
 4026|       |            // only nonhex allowed:
 4027|       |            // no prefix allowed
 4028|      8|            m_kind = float_kind::generic;
 4029|      8|            return read_regular_float(range);
 4030|      8|        }
 4031|       |        // both hex and nonhex allowed:
 4032|       |        // check for "0x" prefix -> hex,
 4033|       |        // regular otherwise
 4034|       |
 4035|    840|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    840|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 840]
  |  |  ------------------
  ------------------
 4036|      0|            m_kind = float_kind::hex_with_prefix;
 4037|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4038|      0|        }
 4039|       |
 4040|    840|        m_kind = float_kind::generic;
 4041|    840|        return read_regular(range);
 4042|    840|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3714|    852|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3715|    852|                    auto res = read_all(rr);
 3716|    852|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|    852|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 852]
  |  |  ------------------
  ------------------
 3717|      0|                        return unexpected_scan_error(
 3718|      0|                            scan_error::invalid_scanned_value,
 3719|      0|                            "Invalid float value");
 3720|      0|                    }
 3721|    852|                    return res;
 3722|    852|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1826|    852|{
 1827|    852|    return ranges::next(range.begin(), range.end());
 1828|    852|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|    852|    {
  313|    852|        ranges::advance(x, bound);
  314|    852|        return x;
  315|    852|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|    852|    {
  275|    852|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    852|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1564|    852|    {
 1565|    852|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|    852|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1566|    852|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1608|    852|    {
 1609|    852|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|    852|                      ranges::sized_range<Range>) {
 1614|    852|            m_storage.reset();
 1615|    852|            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|       |                                          std::basic_string<CharT>>) {
 1619|       |            m_storage.emplace(SCN_FWD(range));
 1620|       |            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|       |                           ranges::common_range<Range>) {
 1626|       |            auto beg_seg = range.begin().contiguous_segment();
 1627|       |            auto end_seg = range.end().contiguous_segment();
 1628|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1629|       |                             detail::to_address(end_seg.end()))) {
 1630|       |                auto& str = m_storage.emplace();
 1631|       |                str.reserve(range.end().position() - range.begin().position());
 1632|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|       |                m_view = string_view_type{str};
 1634|       |                return;
 1635|       |            }
 1636|       |
 1637|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|       |                                                            end_seg.data());
 1639|       |            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|    852|    }
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3653|    850|    {
 3654|    850|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    850|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 850]
  |  |  ------------------
  ------------------
 3655|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3656|      0|                classic_with_thsep_tag{}};
 3657|      0|        }
 3658|       |
 3659|    850|        return read_source_impl(range);
 3660|    850|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3679|    852|    {
 3680|    852|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    852|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    852|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3681|       |
 3682|    852|        const std::ptrdiff_t sign_len =
 3683|    852|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3683:13): [True: 0, False: 852]
  ------------------
 3684|       |
 3685|    852|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|    852|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    852|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    852|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    852|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 852, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    852|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    852|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    852|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    852|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    852|    }                                                  \
  |  |  |  | 3667|    852|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3686|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3687|    852|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4158|    146|    {
 4159|    146|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|    146|#if !SCN_DISABLE_LOCALE
 4162|    146|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 8, False: 138]
  ------------------
 4163|      8|            return read_impl<Range>(
 4164|      8|                range, rd,
 4165|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4166|      8|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|      8|                },
 4168|      8|                value, loc);
 4169|      8|        }
 4170|    138|#endif
 4171|       |
 4172|    138|        return read_impl<Range>(
 4173|    138|            range, rd,
 4174|    138|            [](float_reader<CharT>& r, auto&&... args) {
 4175|    138|                return r.read_source(SCN_FWD(args)...);
 4176|    138|            },
 4177|    138|            value);
 4178|    146|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIwEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4194|    146|    {
 4195|    146|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|    146|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    146|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 146, False: 0]
  |  |  ------------------
  ------------------
 4197|    146|            return unexpected(r.error());
 4198|    146|        }
 4199|       |
 4200|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|      0|        return ranges::next(range.begin(), n);
 4202|      0|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_:
  742|      8|        : m_fptr([](storage fn,
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|      8|              if constexpr (std::is_void_v<R>) {
  746|      8|                  obj(static_cast<decltype(args)>(args)...);
  747|      8|              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
  752|      8|          m_storage(std::addressof(f))
  753|      8|    {
  754|      8|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1H_SC_SJ_SL_:
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|      8|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      8|        else if constexpr (std::is_object_v<T>) {
  688|      8|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      8|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSD_ST_EEEDaSW_SZ_:
 4165|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4166|      8|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|      8|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|      8|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      8|        {
  662|      8|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_:
  742|    138|        : m_fptr([](storage fn,
  743|    138|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    138|              cvref<T> obj = *get<T>(fn);
  745|    138|              if constexpr (std::is_void_v<R>) {
  746|    138|                  obj(static_cast<decltype(args)>(args)...);
  747|    138|              }
  748|    138|              else {
  749|    138|                  return obj(static_cast<decltype(args)>(args)...);
  750|    138|              }
  751|    138|          }),
  752|    138|          m_storage(std::addressof(f))
  753|    138|    {
  754|    138|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1H_SC_SJ_SL_:
  743|    138|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    138|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    138|              else {
  749|    138|                  return obj(static_cast<decltype(args)>(args)...);
  750|    138|              }
  751|    138|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|    138|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    138|        else if constexpr (std::is_object_v<T>) {
  688|    138|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    138|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4174|    138|            [](float_reader<CharT>& r, auto&&... args) {
 4175|    138|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    138|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|    138|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|    138|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    138|        {
  662|    138|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4158|    328|    {
 4159|    328|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|    328|#if !SCN_DISABLE_LOCALE
 4162|    328|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 10, False: 318]
  ------------------
 4163|     10|            return read_impl<Range>(
 4164|     10|                range, rd,
 4165|     10|                [](float_reader<CharT>& r, auto&&... args) {
 4166|     10|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|     10|                },
 4168|     10|                value, loc);
 4169|     10|        }
 4170|    318|#endif
 4171|       |
 4172|    318|        return read_impl<Range>(
 4173|    318|            range, rd,
 4174|    318|            [](float_reader<CharT>& r, auto&&... args) {
 4175|    318|                return r.read_source(SCN_FWD(args)...);
 4176|    318|            },
 4177|    318|            value);
 4178|    328|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4194|    860|    {
 4195|    860|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|    860|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    860|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 852]
  |  |  ------------------
  ------------------
 4197|      8|            return unexpected(r.error());
 4198|      8|        }
 4199|       |
 4200|    852|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|    852|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    852|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    852|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    852|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 852, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    852|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    852|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    852|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    852|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    852|    }                                                  \
  |  |  |  | 3667|    852|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|      0|        return ranges::next(range.begin(), n);
 4202|    852|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|     10|        : m_fptr([](storage fn,
  743|     10|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     10|              cvref<T> obj = *get<T>(fn);
  745|     10|              if constexpr (std::is_void_v<R>) {
  746|     10|                  obj(static_cast<decltype(args)>(args)...);
  747|     10|              }
  748|     10|              else {
  749|     10|                  return obj(static_cast<decltype(args)>(args)...);
  750|     10|              }
  751|     10|          }),
  752|     10|          m_storage(std::addressof(f))
  753|     10|    {
  754|     10|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|     10|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     10|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     10|              else {
  749|     10|                  return obj(static_cast<decltype(args)>(args)...);
  750|     10|              }
  751|     10|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|     10|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     10|        else if constexpr (std::is_object_v<T>) {
  688|     10|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     10|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4165|     10|                [](float_reader<CharT>& r, auto&&... args) {
 4166|     10|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|     10|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     10|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     10|        {
  662|     10|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|    318|        : m_fptr([](storage fn,
  743|    318|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    318|              cvref<T> obj = *get<T>(fn);
  745|    318|              if constexpr (std::is_void_v<R>) {
  746|    318|                  obj(static_cast<decltype(args)>(args)...);
  747|    318|              }
  748|    318|              else {
  749|    318|                  return obj(static_cast<decltype(args)>(args)...);
  750|    318|              }
  751|    318|          }),
  752|    318|          m_storage(std::addressof(f))
  753|    318|    {
  754|    318|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|    318|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    318|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    318|              else {
  749|    318|                  return obj(static_cast<decltype(args)>(args)...);
  750|    318|              }
  751|    318|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|    318|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    318|        else if constexpr (std::is_object_v<T>) {
  688|    318|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    318|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4174|    318|            [](float_reader<CharT>& r, auto&&... args) {
 4175|    318|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    318|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|    318|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|    318|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    318|        {
  662|    318|        }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEwEEDav:
 5797|  3.84k|{
 5798|       |    if constexpr (std::is_same_v<T, bool>) {
 5799|       |        return reader_impl_for_bool<CharT>{};
 5800|       |    }
 5801|       |    else if constexpr (std::is_same_v<T, char>) {
 5802|       |        return reader_impl_for_char<CharT>{};
 5803|       |    }
 5804|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5805|       |        return reader_impl_for_wchar<CharT>{};
 5806|       |    }
 5807|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5808|       |        return reader_impl_for_code_point<CharT>{};
 5809|       |    }
 5810|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5811|       |                       std::is_same_v<T, std::wstring_view>) {
 5812|       |        return reader_impl_for_string<CharT>{};
 5813|       |    }
 5814|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5815|  3.84k|                       std::is_same_v<T, std::wstring>) {
 5816|  3.84k|        return reader_impl_for_string<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5819|       |                       std::is_same_v<T, wregex_matches>) {
 5820|       |        return reader_impl_for_regex_matches<CharT>{};
 5821|       |    }
 5822|       |    else if constexpr (std::is_same_v<T, void*>) {
 5823|       |        return reader_impl_for_voidptr<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_floating_point_v<T>) {
 5826|       |        return reader_impl_for_float<CharT>{};
 5827|       |    }
 5828|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5829|       |                       !std::is_same_v<T, wchar_t> &&
 5830|       |                       !std::is_same_v<T, char32_t> &&
 5831|       |                       !std::is_same_v<T, bool>) {
 5832|       |        return reader_impl_for_int<CharT>{};
 5833|       |    }
 5834|       |    else {
 5835|       |        return reader_impl_for_monostate<CharT>{};
 5836|       |    }
 5837|  3.84k|}
_ZN3scn2v34impl13string_readerIwEC2Ev:
 5194|  11.5k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3028|  9.94k|    {
 3029|  9.94k|        reader_error_handler eh{};
 3030|  9.94k|        get_derived().check_specs_impl(specs, eh);
 3031|  9.94k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  9.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 246, False: 9.69k]
  |  |  ------------------
  ------------------
 3032|    246|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|    246|        }
 3034|  9.69k|        return {};
 3035|  9.94k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3039|  9.94k|    {
 3040|  9.94k|        return static_cast<Derived&>(*this);
 3041|  9.94k|    }
_ZN3scn2v34impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5198|  9.94k|    {
 5199|  9.94k|        detail::check_string_type_specs(specs, eh);
 5200|       |
 5201|  9.94k|        SCN_GCC_PUSH
 5202|  9.94k|        SCN_GCC_IGNORE("-Wswitch")
 5203|  9.94k|        SCN_GCC_IGNORE("-Wswitch-default")
 5204|       |
 5205|  9.94k|        SCN_CLANG_PUSH
 5206|  9.94k|        SCN_CLANG_IGNORE("-Wswitch")
 5207|  9.94k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5208|       |
 5209|  9.94k|        switch (specs.type) {
  ------------------
  |  Branch (5209:17): [True: 240, False: 9.70k]
  ------------------
 5210|  1.28k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5210:13): [True: 1.28k, False: 8.65k]
  ------------------
 5211|  1.28k|                m_type = reader_type::word;
 5212|  1.28k|                break;
 5213|       |
 5214|    360|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5214:13): [True: 360, False: 9.58k]
  ------------------
 5215|    360|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5215:21): [True: 66, False: 294]
  ------------------
 5216|    360|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5216:21): [True: 246, False: 48]
  ------------------
 5217|    312|                    m_type = reader_type::custom_word;
 5218|    312|                }
 5219|     48|                else {
 5220|     48|                    m_type = reader_type::word;
 5221|     48|                }
 5222|    360|                break;
 5223|      0|            }
 5224|       |
 5225|    192|            case detail::presentation_type::character:
  ------------------
  |  Branch (5225:13): [True: 192, False: 9.75k]
  ------------------
 5226|    192|                m_type = reader_type::character;
 5227|    192|                break;
 5228|       |
 5229|    702|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5229:13): [True: 702, False: 9.24k]
  ------------------
 5230|    702|                m_type = reader_type::character_set;
 5231|    702|                break;
 5232|       |
 5233|  6.97k|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5233:13): [True: 6.97k, False: 2.97k]
  ------------------
 5234|  6.97k|                m_type = reader_type::regex;
 5235|  6.97k|                break;
 5236|       |
 5237|    192|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5237:13): [True: 192, False: 9.75k]
  ------------------
 5238|    192|                m_type = reader_type::regex_escaped;
 5239|    192|                break;
 5240|  9.94k|        }
 5241|       |
 5242|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5243|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5244|  9.94k|    }
_ZNK3scn2v34impl13string_readerIwE19skip_ws_before_readEv:
 5247|  13.1k|    {
 5248|  13.1k|        return m_type == reader_type::word;
 5249|  13.1k|    }
_ZN3scn2v34impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  6.52k|{
 1132|  6.52k|    auto it = src.begin();
 1133|  56.5k|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 51.9k, False: 4.62k]
  ------------------
 1134|  51.9k|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|  51.9k|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 0, False: 51.9k]
  ------------------
 1136|      0|            return false;
 1137|      0|        }
 1138|  51.9k|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 0, False: 51.9k]
  ------------------
 1139|      0|            return false;
 1140|      0|        }
 1141|  51.9k|        const auto cp = detail::decode_code_point_exhaustive(
 1142|  51.9k|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|  51.9k|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 1.90k, False: 50.0k]
  ------------------
 1144|  1.90k|            return false;
 1145|  1.90k|        }
 1146|  50.0k|        it += len;
 1147|  50.0k|    }
 1148|  4.62k|    return true;
 1149|  6.52k|}
_ZN3scn2v34impl22transcode_if_necessaryIwcEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2981|    160|{
 2982|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 2983|       |        if (source.stores_allocated_string()) {
 2984|       |            dest.assign(SCN_MOVE(source.get_allocated_string()));
 2985|       |        }
 2986|       |        else {
 2987|       |            dest.assign(source.view());
 2988|       |        }
 2989|       |    }
 2990|    160|    else {
 2991|    160|        return transcode_impl(source.view(), dest);
 2992|    160|    }
 2993|       |
 2994|      0|    return {};
 2995|    160|}
_ZN3scn2v34impl14transcode_implIwcEENS0_10scan_errorENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEERNS4_12basic_stringIT0_NS7_ISB_EENS4_9allocatorISB_EEEE:
 2956|  1.15k|{
 2957|  1.15k|    dst.clear();
 2958|  1.15k|    transcode_valid_to_string(src, dst);
 2959|  1.15k|    return {};
 2960|  1.15k|}
_ZN3scn2v34impl25transcode_valid_to_stringIwcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1390|  1.15k|{
 1391|  1.15k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1392|       |
 1393|  1.15k|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  |  924|  1.15k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.15k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1394|       |    if constexpr (sizeof(SourceCharT) == 1) {
 1395|       |        if constexpr (sizeof(DestCharT) == 2) {
 1396|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1397|       |            std::u32string tmp;
 1398|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1399|       |            return transcode_to_string_impl_32to16<true>(
 1400|       |                std::u32string_view{tmp}, dest);
 1401|       |        }
 1402|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1403|       |            return transcode_valid_to_string_impl_to32(src, dest);
 1404|       |        }
 1405|       |    }
 1406|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1407|       |        if constexpr (sizeof(DestCharT) == 1) {
 1408|       |            std::u32string tmp;
 1409|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1410|       |            return transcode_to_string_impl_32to8<true>(
 1411|       |                std::u32string_view{tmp}, dest);
 1412|       |        }
 1413|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1414|       |            return trasncode_valid_to_string_impl_to32(src, dest);
 1415|       |        }
 1416|       |    }
 1417|  1.15k|    else if constexpr (sizeof(SourceCharT) == 4) {
 1418|  1.15k|        if constexpr (sizeof(DestCharT) == 1) {
 1419|  1.15k|            return transcode_to_string_impl_32to8<true>(src, dest);
 1420|       |        }
 1421|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1422|       |            return transcode_to_string_impl_32to16<true>(src, dest);
 1423|       |        }
 1424|  1.15k|    }
 1425|       |
 1426|  1.15k|    SCN_EXPECT(false);
  ------------------
  |  |  924|  1.15k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.15k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1427|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1428|  1.15k|}
_ZN3scn2v34impl30transcode_to_string_impl_32to8ILb1EwcEEvNSt3__117basic_string_viewIT0_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT1_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1281|  1.15k|{
 1282|  1.15k|    static_assert(sizeof(SourceCharT) == 4);
 1283|  1.15k|    static_assert(sizeof(DestCharT) == 1);
 1284|       |
 1285|  8.80k|    for (auto cp : src) {
  ------------------
  |  Branch (1285:18): [True: 8.80k, False: 1.15k]
  ------------------
 1286|  8.80k|        const auto u32cp = static_cast<uint32_t>(cp);
 1287|  8.80k|        if (SCN_UNLIKELY(!VerifiedValid && cp >= detail::invalid_code_point)) {
  ------------------
  |  |  859|  8.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [Folded - Ignored]
  |  |  |  Branch (859:45): [Folded - Ignored]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1288|       |            // Replacement character
 1289|      0|            dest.push_back(static_cast<char>(0xef));
 1290|      0|            dest.push_back(static_cast<char>(0xbf));
 1291|      0|            dest.push_back(static_cast<char>(0xbd));
 1292|      0|        }
 1293|  8.80k|        else if (cp < 128) {
  ------------------
  |  Branch (1293:18): [True: 7.15k, False: 1.65k]
  ------------------
 1294|  7.15k|            dest.push_back(static_cast<char>(cp));
 1295|  7.15k|        }
 1296|  1.65k|        else if (cp < 2048) {
  ------------------
  |  Branch (1296:18): [True: 144, False: 1.50k]
  ------------------
 1297|    144|            dest.push_back(
 1298|    144|                static_cast<char>(0xc0 | (static_cast<char>(u32cp >> 6))));
 1299|    144|            dest.push_back(
 1300|    144|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1301|    144|        }
 1302|  1.50k|        else if (cp < 65536) {
  ------------------
  |  Branch (1302:18): [True: 1.04k, False: 466]
  ------------------
 1303|  1.04k|            dest.push_back(
 1304|  1.04k|                static_cast<char>(0xe0 | (static_cast<char>(u32cp >> 12))));
 1305|  1.04k|            dest.push_back(static_cast<char>(
 1306|  1.04k|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1307|  1.04k|            dest.push_back(
 1308|  1.04k|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1309|  1.04k|        }
 1310|    466|        else {
 1311|    466|            dest.push_back(
 1312|    466|                static_cast<char>(0xf0 | (static_cast<char>(u32cp >> 18))));
 1313|    466|            dest.push_back(static_cast<char>(
 1314|    466|                0x80 | (static_cast<char>(u32cp >> 12) & 0x3f)));
 1315|    466|            dest.push_back(static_cast<char>(
 1316|    466|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1317|    466|            dest.push_back(
 1318|    466|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1319|    466|        }
 1320|  8.80k|    }
 1321|  1.15k|}
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helper15handle_nonasciiEv:
 5091|    702|        {
 5092|    702|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5092:17): [True: 180, False: 522]
  ------------------
 5093|    180|                return {};
 5094|    180|            }
 5095|       |
 5096|    522|            auto charset_string = specs.charset_string<SourceCharT>();
 5097|    522|            auto it = detail::to_address(charset_string.begin());
 5098|    522|            auto set = detail::parse_presentation_set(
 5099|    522|                it, detail::to_address(charset_string.end()), nonascii);
 5100|    522|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|    522|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 522]
  |  |  ------------------
  ------------------
 5101|      0|                return nonascii.err;
 5102|      0|            }
 5103|    522|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|    522|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|    522|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5104|    522|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|    522|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|    522|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5105|       |
 5106|    522|            std::sort(nonascii.extra_ranges.begin(),
 5107|    522|                      nonascii.extra_ranges.end());
 5108|    522|            return {};
 5109|    522|        }
_ZNK3scn2v34impl25character_set_reader_implIwE20read_source_callback28on_classic_with_extra_rangesEDi:
 5126|  6.12k|        {
 5127|  6.12k|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (5127:17): [True: 1.64k, False: 4.48k]
  ------------------
 5128|  1.64k|                return helper.is_char_set_in_extra_literals(cp);
 5129|  1.64k|            }
 5130|       |
 5131|  4.48k|            return helper.is_char_set_in_literals(static_cast<char>(cp));
 5132|  6.12k|        }
_ZNK3scn2v34impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDi:
 5074|  1.64k|        {
 5075|       |            // TODO: binary search?
 5076|  1.64k|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (5076:17): [True: 0, False: 1.64k]
  ------------------
 5077|      0|                return false;
 5078|      0|            }
 5079|       |
 5080|  1.64k|            const auto cp_val = static_cast<uint32_t>(cp);
 5081|  1.64k|            return std::find_if(
 5082|  1.64k|                       nonascii.extra_ranges.begin(),
 5083|  1.64k|                       nonascii.extra_ranges.end(),
 5084|  1.64k|                       [cp_val](const auto& pair) noexcept {
 5085|  1.64k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
 5086|  1.64k|                                  static_cast<uint32_t>(pair.second) > cp_val;
 5087|  1.64k|                       }) != nonascii.extra_ranges.end();
 5088|  1.64k|        }
_ZZNK3scn2v34impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
 5084|  15.4k|                       [cp_val](const auto& pair) noexcept {
 5085|  15.4k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (5085:35): [True: 15.2k, False: 180]
  ------------------
 5086|  15.4k|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (5086:35): [True: 1.57k, False: 13.6k]
  ------------------
 5087|  15.4k|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v34impl25character_set_reader_implIwE12specs_helper23is_char_set_in_literalsEc:
 5064|  6.01k|        {
 5065|  6.01k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|  6.01k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.01k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5066|  6.01k|            const auto val =
 5067|  6.01k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5068|  6.01k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5069|  6.01k|                    (val % 8)) &
 5070|  6.01k|                   1u;
 5071|  6.01k|        }
_ZNK3scn2v34impl25character_set_reader_implIwE20read_source_callback13on_ascii_onlyEw:
 5117|  1.54k|        {
 5118|  1.54k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5118:17): [True: 12, False: 1.53k]
  ------------------
 5119|     12|                return false;
 5120|     12|            }
 5121|       |
 5122|  1.53k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5123|  1.54k|        }
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helperC2ERKNS0_6detail12format_specsE:
 5061|    702|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5265|    348|    {
 5266|    348|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    348|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    348|        return read_impl(range, specs, value);
 5268|    348|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5283|    348|    {
 5284|    348|        SCN_CLANG_PUSH
 5285|    348|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|    348|        switch (m_type) {
 5288|    128|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 128, False: 220]
  ------------------
 5289|    128|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|     66|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 66, False: 282]
  ------------------
 5292|     66|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|     66|                                                                   value);
 5294|       |
 5295|     62|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 62, False: 286]
  ------------------
 5296|     62|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|     88|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 88, False: 260]
  ------------------
 5299|     88|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|     88|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      2|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 2, False: 346]
  ------------------
 5304|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      2|                    range, specs.charset_string<SourceCharT>(),
 5306|      2|                    specs.regexp_flags, value);
 5307|       |
 5308|      2|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 2, False: 346]
  ------------------
 5309|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|      2|                    range,
 5311|      2|                    get_unescaped_regex_pattern(
 5312|      2|                        specs.charset_string<SourceCharT>()),
 5313|      2|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 348]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|    348|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|    348|        }
 5320|       |
 5321|    348|        SCN_CLANG_POP
 5322|    348|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4808|    128|    {
 4809|    128|        return read_string_impl(range, read_until_classic_space(range), value);
 4810|    128|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4740|    256|{
 4741|    256|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|    256|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|    256|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 176, False: 80]
  ------------------
 4745|    176|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|    176|                                     "Invalid encoding in scanned string");
 4747|    176|    }
 4748|     80|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     80|    static_cast<    \
  |  |  929|     80|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|     80|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     80|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 80]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|     80|    return SCN_MOVE(result);
  ------------------
  |  |  928|     80|    static_cast<    \
  |  |  929|     80|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|     80|}
_ZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2075|    384|{
 2076|       |    if constexpr (ranges::contiguous_range<Range> &&
 2077|       |                  ranges::sized_range<Range> &&
 2078|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2079|       |        auto buf = make_contiguous_buffer(range);
 2080|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2081|       |        return ranges::next(range.begin(),
 2082|       |                            ranges::distance(buf.view().begin(), it));
 2083|       |    }
 2084|    384|    else {
 2085|    384|        auto it = range.begin();
 2086|       |
 2087|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2088|       |            auto seg = get_contiguous_beginning(range);
 2089|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2090|       |                seg_it != seg.end()) {
 2091|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2092|       |            }
 2093|       |            ranges::advance(it, seg.size());
 2094|       |        }
 2095|       |
 2096|    384|        return read_until_code_point(
 2097|    384|            ranges::subrange{it, range.end()},
 2098|    384|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2099|    384|    }
 2100|    384|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2048|    384|{
 2049|    384|    auto it = range.begin();
 2050|  15.4k|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 15.1k, False: 342]
  ------------------
 2051|  15.1k|        const auto val =
 2052|  15.1k|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  15.1k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  15.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 15.1k, False: 0]
  |  |  ------------------
  ------------------
 2054|  15.1k|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  15.1k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  15.1k|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 42, False: 15.0k]
  ------------------
 2057|     42|                return it;
 2058|     42|            }
 2059|  15.1k|        }
 2060|  15.0k|        it = val.iterator;
 2061|  15.0k|    }
 2062|       |
 2063|    342|    return it;
 2064|    384|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  742|    384|        : m_fptr([](storage fn,
  743|    384|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    384|              cvref<T> obj = *get<T>(fn);
  745|    384|              if constexpr (std::is_void_v<R>) {
  746|    384|                  obj(static_cast<decltype(args)>(args)...);
  747|    384|              }
  748|    384|              else {
  749|    384|                  return obj(static_cast<decltype(args)>(args)...);
  750|    384|              }
  751|    384|          }),
  752|    384|          m_storage(std::addressof(f))
  753|    384|    {
  754|    384|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  743|  15.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  15.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  15.1k|              else {
  749|  15.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  15.1k|              }
  751|  15.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  15.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  15.1k|        else if constexpr (std::is_object_v<T>) {
  688|  15.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  15.1k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2098|  15.1k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|    384|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    384|        {
  662|    384|        }
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4829|     66|    {
 4830|     66|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4830:13): [True: 66, False: 0]
  ------------------
 4831|     66|            return read_string_impl(
 4832|     66|                range,
 4833|     66|                read_until_code_unit(
 4834|     66|                    range,
 4835|     66|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4836|     66|                        SourceCharT ch) { return ch == until; }),
 4837|     66|                value);
 4838|     66|        }
 4839|      0|        return read_string_impl(
 4840|      0|            range,
 4841|      0|            read_until_code_units(
 4842|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4843|      0|            value);
 4844|     66|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     66|        : m_fptr([](storage fn,
  743|     66|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     66|              cvref<T> obj = *get<T>(fn);
  745|     66|              if constexpr (std::is_void_v<R>) {
  746|     66|                  obj(static_cast<decltype(args)>(args)...);
  747|     66|              }
  748|     66|              else {
  749|     66|                  return obj(static_cast<decltype(args)>(args)...);
  750|     66|              }
  751|     66|          }),
  752|     66|          m_storage(std::addressof(f))
  753|     66|    {
  754|     66|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES1D_w:
  743|  1.78k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.78k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.78k|              else {
  749|  1.78k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.78k|              }
  751|  1.78k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|  1.78k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.78k|        else if constexpr (std::is_object_v<T>) {
  688|  1.78k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.78k|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlwE_clEw:
 4836|  1.78k|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     66|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     66|        {
  662|     66|        }
_ZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4935|     62|    {
 4936|     62|        return read_impl(
 4937|     62|            range,
 4938|     62|            [&](const auto& rng) {
 4939|     62|                return read_string_impl(rng, read_all(rng), value);
 4940|     62|            },
 4941|     62|            detail::priority_tag<1>{});
 4942|     62|    }
_ZN3scn2v34impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4962|     62|    {
 4963|     62|        return read_cb(range);
 4964|     62|    }
_ZZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4938|     62|            [&](const auto& rng) {
 4939|     62|                return read_string_impl(rng, read_all(rng), value);
 4940|     62|            },
_ZN3scn2v34impl8read_allINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 1826|    186|{
 1827|    186|    return ranges::next(range.begin(), range.end());
 1828|    186|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS1_6detail9subrange_8subrangeIS9_S9_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EESL_E4typeESL_SM_:
  312|    186|    {
  313|    186|        ranges::advance(x, bound);
  314|    186|        return x;
  315|    186|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EEvE4typeERSL_SM_:
  274|    186|    {
  275|    186|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    186|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEvRT_T0_NS0_6detail12priority_tagILm0EEE:
  202|    186|    {
  203|  4.23k|        while (i != bound) {
  ------------------
  |  Branch (203:16): [True: 4.05k, False: 186]
  ------------------
  204|  4.05k|            ++i;
  205|  4.05k|        }
  206|    186|    }
_ZN3scn2v34impl25character_set_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5036|     88|    {
 5037|     88|        auto it = read_source_impl(range, {specs});
 5038|     88|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|     88|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 80]
  |  |  ------------------
  ------------------
 5039|      8|            return unexpected(it.error());
 5040|      8|        }
 5041|       |
 5042|     80|        return read_string_impl(range, *it, value);
 5043|     88|    }
_ZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperE:
 5141|    264|    {
 5142|    264|        const bool is_inverted = helper.specs.charset_is_inverted;
 5143|    264|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5144|       |
 5145|    264|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 264]
  |  |  ------------------
  ------------------
 5146|      0|            return unexpected(e);
 5147|      0|        }
 5148|       |
 5149|    264|        read_source_callback cb_wrapper{helper};
 5150|       |
 5151|    264|        if (accepts_nonascii) {
  ------------------
  |  Branch (5151:13): [True: 180, False: 84]
  ------------------
 5152|    180|            const auto cb = [&](char32_t cp) {
 5153|    180|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5154|    180|            };
 5155|       |
 5156|    180|            if (is_inverted) {
  ------------------
  |  Branch (5156:17): [True: 102, False: 78]
  ------------------
 5157|    102|                auto it = read_until_code_point(range, cb);
 5158|    102|                return check_nonempty(it, range);
 5159|    102|            }
 5160|     78|            auto it = read_while_code_point(range, cb);
 5161|     78|            return check_nonempty(it, range);
 5162|    180|        }
 5163|       |
 5164|     84|        const auto cb = [&](SourceCharT ch) {
 5165|     84|            return cb_wrapper.on_ascii_only(ch);
 5166|     84|        };
 5167|       |
 5168|     84|        if (is_inverted) {
  ------------------
  |  Branch (5168:13): [True: 48, False: 36]
  ------------------
 5169|     48|            auto it = read_until_code_unit(range, cb);
 5170|     48|            return check_nonempty(it, range);
 5171|     48|        }
 5172|     36|        auto it = read_while_code_unit(range, cb);
 5173|     36|        return check_nonempty(it, range);
 5174|     84|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|    180|        : m_fptr([](storage fn,
  743|    180|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    180|              cvref<T> obj = *get<T>(fn);
  745|    180|              if constexpr (std::is_void_v<R>) {
  746|    180|                  obj(static_cast<decltype(args)>(args)...);
  747|    180|              }
  748|    180|              else {
  749|    180|                  return obj(static_cast<decltype(args)>(args)...);
  750|    180|              }
  751|    180|          }),
  752|    180|          m_storage(std::addressof(f))
  753|    180|    {
  754|    180|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEDiE_clES15_Di:
  743|  1.54k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.54k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.54k|              else {
  749|  1.54k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.54k|              }
  751|  1.54k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  1.54k|    {
  684|  1.54k|        if constexpr (std::is_const_v<T>) {
  685|  1.54k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.54k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlDiE_clEDi:
 5152|  1.54k|            const auto cb = [&](char32_t cp) {
 5153|  1.54k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5154|  1.54k|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPKSL_:
  665|    180|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    180|        {
  667|    180|        }
_ZN3scn2v34impl25character_set_reader_implIwE14check_nonemptyINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEEEEENS0_13scan_expectedIT_EERKSI_T0_:
 5179|    264|    {
 5180|    264|        if (it == range.begin()) {
  ------------------
  |  Branch (5180:13): [True: 24, False: 240]
  ------------------
 5181|     24|            return unexpected_scan_error(
 5182|     24|                scan_error::invalid_scanned_value,
 5183|     24|                "No characters matched in [character set]");
 5184|     24|        }
 5185|       |
 5186|    240|        return it;
 5187|    264|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlwE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     84|        : m_fptr([](storage fn,
  743|     84|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     84|              cvref<T> obj = *get<T>(fn);
  745|     84|              if constexpr (std::is_void_v<R>) {
  746|     84|                  obj(static_cast<decltype(args)>(args)...);
  747|     84|              }
  748|     84|              else {
  749|     84|                  return obj(static_cast<decltype(args)>(args)...);
  750|     84|              }
  751|     84|          }),
  752|     84|          m_storage(std::addressof(f))
  753|     84|    {
  754|     84|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlwE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES15_w:
  743|    270|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    270|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    270|              else {
  749|    270|                  return obj(static_cast<decltype(args)>(args)...);
  750|    270|              }
  751|    270|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|    270|    {
  684|    270|        if constexpr (std::is_const_v<T>) {
  685|    270|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    270|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlwE_clEw:
 5164|    270|        const auto cb = [&](SourceCharT ch) {
 5165|    270|            return cb_wrapper.on_ascii_only(ch);
 5166|    270|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPKSL_:
  665|     84|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|     84|        {
  667|     84|        }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4740|     80|{
 4741|     80|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|     80|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|     80|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 0, False: 80]
  ------------------
 4745|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|      0|                                     "Invalid encoding in scanned string");
 4747|      0|    }
 4748|     80|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     80|    static_cast<    \
  |  |  929|     80|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|     80|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     80|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 80]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|     80|    return SCN_MOVE(result);
  ------------------
  |  |  928|     80|    static_cast<    \
  |  |  929|     80|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|     80|}
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4879|      4|    {
 4880|      4|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|      4|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      4|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      4|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      4|    }                                                  \
  |  |  |  | 3667|      4|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4881|      0|        return read_string_impl(range, it, value);
 4882|      4|    }
_ZN3scn2v34impl24regex_string_reader_implIwE4implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsE:
 4901|     12|    {
 4902|       |        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 4903|       |                      !std::is_same_v<SourceCharT, char>) {
 4904|       |            return unexpected_scan_error(
 4905|       |                scan_error::invalid_scanned_value,
 4906|       |                "Regex backend doesn't support wide strings as input");
 4907|       |        }
 4908|     12|        else {
 4909|     12|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4909:17): [True: 12, False: 0]
  ------------------
 4910|     12|                return unexpected_scan_error(
 4911|     12|                    scan_error::invalid_scanned_value,
 4912|     12|                    "Cannot use regex with a non-contiguous source "
 4913|     12|                    "range");
 4914|     12|            }
 4915|       |
 4916|      0|            auto input = get_as_contiguous(range);
 4917|      0|            SCN_TRY(it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4918|      0|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4919|      0|            return ranges::next(range.begin(),
 4920|      0|                                ranges::distance(input.begin(), it));
 4921|      0|        }
 4922|     12|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEbT_:
  958|     12|{
  959|       |    if constexpr (ranges::contiguous_range<Range> &&
  960|       |                  ranges::sized_range<Range>) {
  961|       |        return true;
  962|       |    }
  963|       |    else if constexpr (std::is_same_v<
  964|       |                           ranges::const_iterator_t<Range>,
  965|       |                           typename detail::basic_scan_buffer<
  966|       |                               detail::char_t<Range>>::forward_iterator>) {
  967|       |        auto beg = r.begin();
  968|       |        if (!beg.stores_parent()) {
  969|       |            return true;
  970|       |        }
  971|       |        return beg.parent()->is_contiguous();
  972|       |    }
  973|     12|    else {
  974|     12|        return false;
  975|     12|    }
  976|     12|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5265|  2.87k|    {
 5266|  2.87k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  2.87k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  2.87k|        return read_impl(range, specs, value);
 5268|  2.87k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5283|  2.87k|    {
 5284|  2.87k|        SCN_CLANG_PUSH
 5285|  2.87k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|  2.87k|        switch (m_type) {
 5288|    314|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 314, False: 2.56k]
  ------------------
 5289|    314|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|     36|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 36, False: 2.84k]
  ------------------
 5292|     36|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|     36|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 2.87k]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|    146|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 146, False: 2.73k]
  ------------------
 5299|    146|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|    146|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|  2.32k|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 2.32k, False: 558]
  ------------------
 5304|  2.32k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|  2.32k|                    range, specs.charset_string<SourceCharT>(),
 5306|  2.32k|                    specs.regexp_flags, value);
 5307|       |
 5308|     62|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 62, False: 2.81k]
  ------------------
 5309|     62|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|     62|                    range,
 5311|     62|                    get_unescaped_regex_pattern(
 5312|     62|                        specs.charset_string<SourceCharT>()),
 5313|     62|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 2.87k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|  2.87k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|  2.87k|        }
 5320|       |
 5321|  2.87k|        SCN_CLANG_POP
 5322|  2.87k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4808|    846|    {
 4809|    846|        return read_string_impl(range, read_until_classic_space(range), value);
 4810|    846|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4740|    882|{
 4741|    882|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|    882|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|    882|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 318, False: 564]
  ------------------
 4745|    318|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|    318|                                     "Invalid encoding in scanned string");
 4747|    318|    }
 4748|    564|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    564|    static_cast<    \
  |  |  929|    564|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    564|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    564|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 564]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    564|    return SCN_MOVE(result);
  ------------------
  |  |  928|    564|    static_cast<    \
  |  |  929|    564|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    564|}
_ZN3scn2v34impl22transcode_if_necessaryIwcEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3000|    996|{
 3001|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3002|       |        dest.assign(source.view());
 3003|       |    }
 3004|    996|    else {
 3005|    996|        return transcode_impl(source.view(), dest);
 3006|    996|    }
 3007|       |
 3008|      0|    return {};
 3009|    996|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2075|  2.53k|{
 2076|       |    if constexpr (ranges::contiguous_range<Range> &&
 2077|       |                  ranges::sized_range<Range> &&
 2078|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2079|       |        auto buf = make_contiguous_buffer(range);
 2080|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2081|       |        return ranges::next(range.begin(),
 2082|       |                            ranges::distance(buf.view().begin(), it));
 2083|       |    }
 2084|  2.53k|    else {
 2085|  2.53k|        auto it = range.begin();
 2086|       |
 2087|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2088|       |            auto seg = get_contiguous_beginning(range);
 2089|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2090|       |                seg_it != seg.end()) {
 2091|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2092|       |            }
 2093|       |            ranges::advance(it, seg.size());
 2094|       |        }
 2095|       |
 2096|  2.53k|        return read_until_code_point(
 2097|  2.53k|            ranges::subrange{it, range.end()},
 2098|  2.53k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2099|  2.53k|    }
 2100|  2.53k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  2.53k|        : m_fptr([](storage fn,
  743|  2.53k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.53k|              cvref<T> obj = *get<T>(fn);
  745|  2.53k|              if constexpr (std::is_void_v<R>) {
  746|  2.53k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.53k|              }
  748|  2.53k|              else {
  749|  2.53k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.53k|              }
  751|  2.53k|          }),
  752|  2.53k|          m_storage(std::addressof(f))
  753|  2.53k|    {
  754|  2.53k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  28.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  28.0k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  28.0k|              else {
  749|  28.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  28.0k|              }
  751|  28.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  28.0k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  28.0k|        else if constexpr (std::is_object_v<T>) {
  688|  28.0k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  28.0k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2098|  28.0k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  2.53k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.53k|        {
  662|  2.53k|        }
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4829|     36|    {
 4830|     36|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4830:13): [True: 36, False: 0]
  ------------------
 4831|     36|            return read_string_impl(
 4832|     36|                range,
 4833|     36|                read_until_code_unit(
 4834|     36|                    range,
 4835|     36|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4836|     36|                        SourceCharT ch) { return ch == until; }),
 4837|     36|                value);
 4838|     36|        }
 4839|      0|        return read_string_impl(
 4840|      0|            range,
 4841|      0|            read_until_code_units(
 4842|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4843|      0|            value);
 4844|     36|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     36|        : m_fptr([](storage fn,
  743|     36|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     36|              cvref<T> obj = *get<T>(fn);
  745|     36|              if constexpr (std::is_void_v<R>) {
  746|     36|                  obj(static_cast<decltype(args)>(args)...);
  747|     36|              }
  748|     36|              else {
  749|     36|                  return obj(static_cast<decltype(args)>(args)...);
  750|     36|              }
  751|     36|          }),
  752|     36|          m_storage(std::addressof(f))
  753|     36|    {
  754|     36|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES1B_w:
  743|    486|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    486|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    486|              else {
  749|    486|                  return obj(static_cast<decltype(args)>(args)...);
  750|    486|              }
  751|    486|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    486|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    486|        else if constexpr (std::is_object_v<T>) {
  688|    486|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    486|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlwE_clEw:
 4836|    486|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     36|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     36|        {
  662|     36|        }
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5036|    146|    {
 5037|    146|        auto it = read_source_impl(range, {specs});
 5038|    146|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    146|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20, False: 126]
  |  |  ------------------
  ------------------
 5039|     20|            return unexpected(it.error());
 5040|     20|        }
 5041|       |
 5042|    126|        return read_string_impl(range, *it, value);
 5043|    146|    }
_ZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5141|    438|    {
 5142|    438|        const bool is_inverted = helper.specs.charset_is_inverted;
 5143|    438|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5144|       |
 5145|    438|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    438|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 438]
  |  |  ------------------
  ------------------
 5146|      0|            return unexpected(e);
 5147|      0|        }
 5148|       |
 5149|    438|        read_source_callback cb_wrapper{helper};
 5150|       |
 5151|    438|        if (accepts_nonascii) {
  ------------------
  |  Branch (5151:13): [True: 342, False: 96]
  ------------------
 5152|    342|            const auto cb = [&](char32_t cp) {
 5153|    342|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5154|    342|            };
 5155|       |
 5156|    342|            if (is_inverted) {
  ------------------
  |  Branch (5156:17): [True: 150, False: 192]
  ------------------
 5157|    150|                auto it = read_until_code_point(range, cb);
 5158|    150|                return check_nonempty(it, range);
 5159|    150|            }
 5160|    192|            auto it = read_while_code_point(range, cb);
 5161|    192|            return check_nonempty(it, range);
 5162|    342|        }
 5163|       |
 5164|     96|        const auto cb = [&](SourceCharT ch) {
 5165|     96|            return cb_wrapper.on_ascii_only(ch);
 5166|     96|        };
 5167|       |
 5168|     96|        if (is_inverted) {
  ------------------
  |  Branch (5168:13): [True: 42, False: 54]
  ------------------
 5169|     42|            auto it = read_until_code_unit(range, cb);
 5170|     42|            return check_nonempty(it, range);
 5171|     42|        }
 5172|     54|        auto it = read_while_code_unit(range, cb);
 5173|     54|        return check_nonempty(it, range);
 5174|     96|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|    342|        : m_fptr([](storage fn,
  743|    342|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    342|              cvref<T> obj = *get<T>(fn);
  745|    342|              if constexpr (std::is_void_v<R>) {
  746|    342|                  obj(static_cast<decltype(args)>(args)...);
  747|    342|              }
  748|    342|              else {
  749|    342|                  return obj(static_cast<decltype(args)>(args)...);
  750|    342|              }
  751|    342|          }),
  752|    342|          m_storage(std::addressof(f))
  753|    342|    {
  754|    342|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clES13_Di:
  743|  4.58k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.58k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  4.58k|              else {
  749|  4.58k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.58k|              }
  751|  4.58k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  4.58k|    {
  684|  4.58k|        if constexpr (std::is_const_v<T>) {
  685|  4.58k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  4.58k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlDiE_clEDi:
 5152|  4.58k|            const auto cb = [&](char32_t cp) {
 5153|  4.58k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5154|  4.58k|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|    342|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    342|        {
  667|    342|        }
_ZN3scn2v34impl25character_set_reader_implIwE14check_nonemptyIPKwNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5179|    438|    {
 5180|    438|        if (it == range.begin()) {
  ------------------
  |  Branch (5180:13): [True: 60, False: 378]
  ------------------
 5181|     60|            return unexpected_scan_error(
 5182|     60|                scan_error::invalid_scanned_value,
 5183|     60|                "No characters matched in [character set]");
 5184|     60|        }
 5185|       |
 5186|    378|        return it;
 5187|    438|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     96|        : m_fptr([](storage fn,
  743|     96|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     96|              cvref<T> obj = *get<T>(fn);
  745|     96|              if constexpr (std::is_void_v<R>) {
  746|     96|                  obj(static_cast<decltype(args)>(args)...);
  747|     96|              }
  748|     96|              else {
  749|     96|                  return obj(static_cast<decltype(args)>(args)...);
  750|     96|              }
  751|     96|          }),
  752|     96|          m_storage(std::addressof(f))
  753|     96|    {
  754|     96|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|  1.27k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.27k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.27k|              else {
  749|  1.27k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.27k|              }
  751|  1.27k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  1.27k|    {
  684|  1.27k|        if constexpr (std::is_const_v<T>) {
  685|  1.27k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.27k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlwE_clEw:
 5164|  1.27k|        const auto cb = [&](SourceCharT ch) {
 5165|  1.27k|            return cb_wrapper.on_ascii_only(ch);
 5166|  1.27k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|     96|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|     96|        {
  667|     96|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4740|    572|{
 4741|    572|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|    572|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|    572|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 140, False: 432]
  ------------------
 4745|    140|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|    140|                                     "Invalid encoding in scanned string");
 4747|    140|    }
 4748|    432|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    432|    static_cast<    \
  |  |  929|    432|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    432|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    432|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 432]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    432|    return SCN_MOVE(result);
  ------------------
  |  |  928|    432|    static_cast<    \
  |  |  929|    432|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    432|}
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4879|  2.38k|    {
 4880|  2.38k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|  2.38k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.38k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.38k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.93k, False: 446]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.93k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.93k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.93k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.93k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.93k|    }                                                  \
  |  |  |  | 3667|  2.38k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    446|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4881|    446|        return read_string_impl(range, it, value);
 4882|  2.38k|    }
_ZN3scn2v34impl24regex_string_reader_implIwE4implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsE:
 4901|  7.14k|    {
 4902|       |        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 4903|       |                      !std::is_same_v<SourceCharT, char>) {
 4904|       |            return unexpected_scan_error(
 4905|       |                scan_error::invalid_scanned_value,
 4906|       |                "Regex backend doesn't support wide strings as input");
 4907|       |        }
 4908|  7.14k|        else {
 4909|  7.14k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4909:17): [True: 0, False: 7.14k]
  ------------------
 4910|      0|                return unexpected_scan_error(
 4911|      0|                    scan_error::invalid_scanned_value,
 4912|      0|                    "Cannot use regex with a non-contiguous source "
 4913|      0|                    "range");
 4914|      0|            }
 4915|       |
 4916|  7.14k|            auto input = get_as_contiguous(range);
 4917|  7.14k|            SCN_TRY(it,
  ------------------
  |  | 3668|  7.14k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  7.14k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  7.14k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  7.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.80k, False: 1.33k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  5.80k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  5.80k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  5.80k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  5.80k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  5.80k|    }                                                  \
  |  |  |  | 3667|  7.14k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4918|  1.33k|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4919|  1.33k|            return ranges::next(range.begin(),
 4920|  1.33k|                                ranges::distance(input.begin(), it));
 4921|  7.14k|        }
 4922|  7.14k|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  958|  7.14k|{
  959|       |    if constexpr (ranges::contiguous_range<Range> &&
  960|  7.14k|                  ranges::sized_range<Range>) {
  961|  7.14k|        return true;
  962|       |    }
  963|       |    else if constexpr (std::is_same_v<
  964|       |                           ranges::const_iterator_t<Range>,
  965|       |                           typename detail::basic_scan_buffer<
  966|       |                               detail::char_t<Range>>::forward_iterator>) {
  967|       |        auto beg = r.begin();
  968|       |        if (!beg.stores_parent()) {
  969|       |            return true;
  970|       |        }
  971|       |        return beg.parent()->is_contiguous();
  972|       |    }
  973|       |    else {
  974|       |        return false;
  975|       |    }
  976|  7.14k|}
_ZN3scn2v34impl17get_as_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaT_:
 1064|  7.14k|{
 1065|  7.14k|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  |  924|  7.14k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.14k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1066|       |
 1067|       |    if constexpr (ranges::contiguous_range<Range> &&
 1068|  7.14k|                  ranges::sized_range<Range>) {
 1069|  7.14k|        return r;
 1070|       |    }
 1071|       |    else if constexpr (std::is_same_v<
 1072|       |                           ranges::const_iterator_t<Range>,
 1073|       |                           typename detail::basic_scan_buffer<
 1074|       |                               detail::char_t<Range>>::forward_iterator>) {
 1075|       |        if constexpr (ranges::common_range<Range>) {
 1076|       |            return detail::make_string_view_from_pointers(
 1077|       |                r.begin().to_contiguous_segment_iterator(),
 1078|       |                r.end().to_contiguous_segment_iterator());
 1079|       |        }
 1080|       |        else {
 1081|       |            return r.begin().contiguous_segment();
 1082|       |        }
 1083|       |    }
 1084|       |    else {
 1085|       |        SCN_EXPECT(false);
 1086|       |        SCN_UNREACHABLE;
 1087|       |        // for return type deduction
 1088|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1089|       |    }
 1090|  7.14k|}
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  980|  7.14k|{
  981|       |    if constexpr (ranges::contiguous_range<Range> &&
  982|  7.14k|                  ranges::sized_range<Range>) {
  983|  7.14k|        return true;
  984|       |    }
  985|       |    else if constexpr (std::is_same_v<
  986|       |                           ranges::const_iterator_t<Range>,
  987|       |                           typename detail::basic_scan_buffer<
  988|       |                               detail::char_t<Range>>::forward_iterator>) {
  989|       |        auto beg = r.begin();
  990|       |        if (beg.contiguous_segment().empty()) {
  991|       |            return false;
  992|       |        }
  993|       |        if constexpr (ranges::common_range<Range>) {
  994|       |            return beg.contiguous_segment().end() ==
  995|       |                   ranges::end(r).contiguous_segment().end();
  996|       |        }
  997|       |        else {
  998|       |            if (beg.stores_parent()) {
  999|       |                return beg.contiguous_segment().end() ==
 1000|       |                       beg.parent()->current_view().end();
 1001|       |            }
 1002|       |            return true;
 1003|       |        }
 1004|       |    }
 1005|       |    else {
 1006|       |        return false;
 1007|       |    }
 1008|  7.14k|}
_ZN3scn2v34impl22read_regex_string_implIwNS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_:
 4334|  7.14k|{
 4335|  7.14k|    static_assert(ranges::contiguous_range<Input> &&
 4336|  7.14k|                  ranges::borrowed_range<Input> &&
 4337|  7.14k|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
 4338|       |
 4339|  7.14k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 4340|  7.14k|    std::basic_regex<CharT> re{};
 4341|  7.14k|    try {
 4342|  7.14k|        SCN_TRY(re_flags, make_regex_flags(flags));
  ------------------
  |  | 3668|  7.14k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  7.14k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  7.14k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  7.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 7.14k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  7.14k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  7.14k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4343|  7.14k|        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
 4344|  7.14k|                                     re_flags | std::regex_constants::nosubs};
 4345|  7.14k|    }
 4346|  7.14k|    catch (const std::regex_error& err) {
 4347|  2.84k|        return unexpected_scan_error(scan_error::invalid_format_string,
 4348|  2.84k|                                     "Invalid regex");
 4349|  2.84k|    }
 4350|       |
 4351|  4.30k|    std::match_results<const CharT*> matches{};
 4352|  4.30k|    try {
 4353|  4.30k|        bool found = std::regex_search(input.data(),
 4354|  4.30k|                                       input.data() + input.size(), matches, re,
 4355|  4.30k|                                       std::regex_constants::match_continuous);
 4356|  4.30k|        if (!found || matches.prefix().matched) {
  ------------------
  |  Branch (4356:13): [True: 2.96k, False: 1.33k]
  |  Branch (4356:23): [True: 0, False: 1.33k]
  ------------------
 4357|  2.90k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4358|  2.90k|                                         "Regular expression didn't match");
 4359|  2.90k|        }
 4360|  4.30k|    }
 4361|  4.30k|    catch (const std::regex_error& err) {
 4362|     60|        return unexpected_scan_error(scan_error::invalid_format_string,
 4363|     60|                                     "Regex matching failed with an error");
 4364|     60|    }
 4365|       |
 4366|  1.33k|    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4367|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
 4368|       |    auto re =
 4369|       |#if SCN_REGEX_BOOST_USE_ICU
 4370|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
 4371|       |                             make_regex_flags(flags) |
 4372|       |                                 boost::regex_constants::no_except |
 4373|       |                                 boost::regex_constants::nosubs);
 4374|       |#else
 4375|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
 4376|       |                                  make_regex_flags(flags) |
 4377|       |                                      boost::regex_constants::no_except |
 4378|       |                                      boost::regex_constants::nosubs};
 4379|       |#endif
 4380|       |    if (re.status() != 0) {
 4381|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4382|       |                                     "Invalid regex");
 4383|       |    }
 4384|       |
 4385|       |    boost::match_results<const CharT*> matches{};
 4386|       |    try {
 4387|       |        bool found =
 4388|       |#if SCN_REGEX_BOOST_USE_ICU
 4389|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
 4390|       |                                   matches, re,
 4391|       |                                   boost::regex_constants::match_continuous);
 4392|       |#else
 4393|       |            boost::regex_search(input.data(), input.data() + input.size(),
 4394|       |                                matches, re,
 4395|       |                                boost::regex_constants::match_continuous);
 4396|       |#endif
 4397|       |        if (!found || matches.prefix().matched) {
 4398|       |            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4399|       |                                         "Regular expression didn't match");
 4400|       |        }
 4401|       |    }
 4402|       |    catch (const std::runtime_error& err) {
 4403|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4404|       |                                     "Regex matching failed with an error");
 4405|       |    }
 4406|       |
 4407|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4408|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
 4409|       |    static_assert(std::is_same_v<CharT, char>);
 4410|       |    std::string flagged_pattern{};
 4411|       |    auto re = [&]() {
 4412|       |        auto [opts, flagstr] = make_regex_flags(flags);
 4413|       |        opts.set_never_capture(true);
 4414|       |        if (flagstr.empty()) {
 4415|       |            return re2::RE2{pattern, opts};
 4416|       |        }
 4417|       |        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4418|       |        flagged_pattern.append(flagstr);
 4419|       |        flagged_pattern.append(pattern);
 4420|       |        return re2::RE2{flagged_pattern, opts};
 4421|       |    }();
 4422|       |    if (!re.ok()) {
 4423|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4424|       |                                     "Failed to parse regular expression");
 4425|       |    }
 4426|       |
 4427|       |    auto new_input = detail::make_string_view_from_pointers(
 4428|       |        detail::to_address(input.begin()), detail::to_address(input.end()));
 4429|       |    bool found = re2::RE2::Consume(&new_input, re);
 4430|       |    if (!found) {
 4431|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4432|       |                                     "Regular expression didn't match");
 4433|       |    }
 4434|       |    return input.begin() + ranges::distance(input.data(), new_input.data());
 4435|       |#endif  // SCN_REGEX_BACKEND == ...
 4436|  4.30k|}
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5797|  3.84k|{
 5798|       |    if constexpr (std::is_same_v<T, bool>) {
 5799|       |        return reader_impl_for_bool<CharT>{};
 5800|       |    }
 5801|       |    else if constexpr (std::is_same_v<T, char>) {
 5802|       |        return reader_impl_for_char<CharT>{};
 5803|       |    }
 5804|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5805|       |        return reader_impl_for_wchar<CharT>{};
 5806|       |    }
 5807|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5808|       |        return reader_impl_for_code_point<CharT>{};
 5809|       |    }
 5810|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5811|       |                       std::is_same_v<T, std::wstring_view>) {
 5812|       |        return reader_impl_for_string<CharT>{};
 5813|       |    }
 5814|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5815|  3.84k|                       std::is_same_v<T, std::wstring>) {
 5816|  3.84k|        return reader_impl_for_string<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5819|       |                       std::is_same_v<T, wregex_matches>) {
 5820|       |        return reader_impl_for_regex_matches<CharT>{};
 5821|       |    }
 5822|       |    else if constexpr (std::is_same_v<T, void*>) {
 5823|       |        return reader_impl_for_voidptr<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_floating_point_v<T>) {
 5826|       |        return reader_impl_for_float<CharT>{};
 5827|       |    }
 5828|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5829|       |                       !std::is_same_v<T, wchar_t> &&
 5830|       |                       !std::is_same_v<T, char32_t> &&
 5831|       |                       !std::is_same_v<T, bool>) {
 5832|       |        return reader_impl_for_int<CharT>{};
 5833|       |    }
 5834|       |    else {
 5835|       |        return reader_impl_for_monostate<CharT>{};
 5836|       |    }
 5837|  3.84k|}
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2981|    160|{
 2982|    160|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 2983|    160|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2983:13): [True: 160, False: 0]
  ------------------
 2984|    160|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|    160|    static_cast<    \
  |  |  929|    160|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2985|    160|        }
 2986|      0|        else {
 2987|      0|            dest.assign(source.view());
 2988|      0|        }
 2989|       |    }
 2990|       |    else {
 2991|       |        return transcode_impl(source.view(), dest);
 2992|       |    }
 2993|       |
 2994|    160|    return {};
 2995|    160|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5265|    348|    {
 5266|    348|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    348|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    348|        return read_impl(range, specs, value);
 5268|    348|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5283|    348|    {
 5284|    348|        SCN_CLANG_PUSH
 5285|    348|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|    348|        switch (m_type) {
 5288|    128|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 128, False: 220]
  ------------------
 5289|    128|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|     66|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 66, False: 282]
  ------------------
 5292|     66|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|     66|                                                                   value);
 5294|       |
 5295|     62|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 62, False: 286]
  ------------------
 5296|     62|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|     88|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 88, False: 260]
  ------------------
 5299|     88|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|     88|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      2|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 2, False: 346]
  ------------------
 5304|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      2|                    range, specs.charset_string<SourceCharT>(),
 5306|      2|                    specs.regexp_flags, value);
 5307|       |
 5308|      2|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 2, False: 346]
  ------------------
 5309|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|      2|                    range,
 5311|      2|                    get_unescaped_regex_pattern(
 5312|      2|                        specs.charset_string<SourceCharT>()),
 5313|      2|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 348]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|    348|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|    348|        }
 5320|       |
 5321|    348|        SCN_CLANG_POP
 5322|    348|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4808|    128|    {
 4809|    128|        return read_string_impl(range, read_until_classic_space(range), value);
 4810|    128|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4740|    256|{
 4741|    256|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|    256|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|    256|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 176, False: 80]
  ------------------
 4745|    176|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|    176|                                     "Invalid encoding in scanned string");
 4747|    176|    }
 4748|     80|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     80|    static_cast<    \
  |  |  929|     80|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|     80|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     80|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 80]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|     80|    return SCN_MOVE(result);
  ------------------
  |  |  928|     80|    static_cast<    \
  |  |  929|     80|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|     80|}
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4829|     66|    {
 4830|     66|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4830:13): [True: 66, False: 0]
  ------------------
 4831|     66|            return read_string_impl(
 4832|     66|                range,
 4833|     66|                read_until_code_unit(
 4834|     66|                    range,
 4835|     66|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4836|     66|                        SourceCharT ch) { return ch == until; }),
 4837|     66|                value);
 4838|     66|        }
 4839|      0|        return read_string_impl(
 4840|      0|            range,
 4841|      0|            read_until_code_units(
 4842|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4843|      0|            value);
 4844|     66|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     66|        : m_fptr([](storage fn,
  743|     66|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     66|              cvref<T> obj = *get<T>(fn);
  745|     66|              if constexpr (std::is_void_v<R>) {
  746|     66|                  obj(static_cast<decltype(args)>(args)...);
  747|     66|              }
  748|     66|              else {
  749|     66|                  return obj(static_cast<decltype(args)>(args)...);
  750|     66|              }
  751|     66|          }),
  752|     66|          m_storage(std::addressof(f))
  753|     66|    {
  754|     66|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES1D_w:
  743|  1.78k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.78k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.78k|              else {
  749|  1.78k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.78k|              }
  751|  1.78k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|  1.78k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.78k|        else if constexpr (std::is_object_v<T>) {
  688|  1.78k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.78k|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlwE_clEw:
 4836|  1.78k|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     66|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     66|        {
  662|     66|        }
_ZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4935|     62|    {
 4936|     62|        return read_impl(
 4937|     62|            range,
 4938|     62|            [&](const auto& rng) {
 4939|     62|                return read_string_impl(rng, read_all(rng), value);
 4940|     62|            },
 4941|     62|            detail::priority_tag<1>{});
 4942|     62|    }
_ZN3scn2v34impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4962|     62|    {
 4963|     62|        return read_cb(range);
 4964|     62|    }
_ZZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4938|     62|            [&](const auto& rng) {
 4939|     62|                return read_string_impl(rng, read_all(rng), value);
 4940|     62|            },
_ZN3scn2v34impl25character_set_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5036|     88|    {
 5037|     88|        auto it = read_source_impl(range, {specs});
 5038|     88|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|     88|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 80]
  |  |  ------------------
  ------------------
 5039|      8|            return unexpected(it.error());
 5040|      8|        }
 5041|       |
 5042|     80|        return read_string_impl(range, *it, value);
 5043|     88|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4740|     80|{
 4741|     80|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|     80|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|     80|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 0, False: 80]
  ------------------
 4745|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|      0|                                     "Invalid encoding in scanned string");
 4747|      0|    }
 4748|     80|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     80|    static_cast<    \
  |  |  929|     80|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|     80|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     80|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 80]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|     80|    return SCN_MOVE(result);
  ------------------
  |  |  928|     80|    static_cast<    \
  |  |  929|     80|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|     80|}
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4879|      4|    {
 4880|      4|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|      4|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      4|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      4|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      4|    }                                                  \
  |  |  |  | 3667|      4|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4881|      0|        return read_string_impl(range, it, value);
 4882|      4|    }
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5265|  2.87k|    {
 5266|  2.87k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  2.87k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  2.87k|        return read_impl(range, specs, value);
 5268|  2.87k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5283|  2.87k|    {
 5284|  2.87k|        SCN_CLANG_PUSH
 5285|  2.87k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|  2.87k|        switch (m_type) {
 5288|    314|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 314, False: 2.56k]
  ------------------
 5289|    314|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|     36|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 36, False: 2.84k]
  ------------------
 5292|     36|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|     36|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 2.87k]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|    146|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 146, False: 2.73k]
  ------------------
 5299|    146|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|    146|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|  2.32k|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 2.32k, False: 558]
  ------------------
 5304|  2.32k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|  2.32k|                    range, specs.charset_string<SourceCharT>(),
 5306|  2.32k|                    specs.regexp_flags, value);
 5307|       |
 5308|     62|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 62, False: 2.81k]
  ------------------
 5309|     62|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|     62|                    range,
 5311|     62|                    get_unescaped_regex_pattern(
 5312|     62|                        specs.charset_string<SourceCharT>()),
 5313|     62|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 2.87k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|  2.87k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|  2.87k|        }
 5320|       |
 5321|  2.87k|        SCN_CLANG_POP
 5322|  2.87k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4808|    846|    {
 4809|    846|        return read_string_impl(range, read_until_classic_space(range), value);
 4810|    846|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4740|    882|{
 4741|    882|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|    882|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|    882|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 318, False: 564]
  ------------------
 4745|    318|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|    318|                                     "Invalid encoding in scanned string");
 4747|    318|    }
 4748|    564|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    564|    static_cast<    \
  |  |  929|    564|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    564|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    564|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 564]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    564|    return SCN_MOVE(result);
  ------------------
  |  |  928|    564|    static_cast<    \
  |  |  929|    564|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    564|}
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3000|    996|{
 3001|    996|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3002|    996|        dest.assign(source.view());
 3003|       |    }
 3004|       |    else {
 3005|       |        return transcode_impl(source.view(), dest);
 3006|       |    }
 3007|       |
 3008|    996|    return {};
 3009|    996|}
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4829|     36|    {
 4830|     36|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4830:13): [True: 36, False: 0]
  ------------------
 4831|     36|            return read_string_impl(
 4832|     36|                range,
 4833|     36|                read_until_code_unit(
 4834|     36|                    range,
 4835|     36|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4836|     36|                        SourceCharT ch) { return ch == until; }),
 4837|     36|                value);
 4838|     36|        }
 4839|      0|        return read_string_impl(
 4840|      0|            range,
 4841|      0|            read_until_code_units(
 4842|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4843|      0|            value);
 4844|     36|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     36|        : m_fptr([](storage fn,
  743|     36|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     36|              cvref<T> obj = *get<T>(fn);
  745|     36|              if constexpr (std::is_void_v<R>) {
  746|     36|                  obj(static_cast<decltype(args)>(args)...);
  747|     36|              }
  748|     36|              else {
  749|     36|                  return obj(static_cast<decltype(args)>(args)...);
  750|     36|              }
  751|     36|          }),
  752|     36|          m_storage(std::addressof(f))
  753|     36|    {
  754|     36|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES1B_w:
  743|    486|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    486|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    486|              else {
  749|    486|                  return obj(static_cast<decltype(args)>(args)...);
  750|    486|              }
  751|    486|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    486|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    486|        else if constexpr (std::is_object_v<T>) {
  688|    486|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    486|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlwE_clEw:
 4836|    486|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     36|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     36|        {
  662|     36|        }
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5036|    146|    {
 5037|    146|        auto it = read_source_impl(range, {specs});
 5038|    146|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    146|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20, False: 126]
  |  |  ------------------
  ------------------
 5039|     20|            return unexpected(it.error());
 5040|     20|        }
 5041|       |
 5042|    126|        return read_string_impl(range, *it, value);
 5043|    146|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4740|    572|{
 4741|    572|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|    572|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|    572|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 140, False: 432]
  ------------------
 4745|    140|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|    140|                                     "Invalid encoding in scanned string");
 4747|    140|    }
 4748|    432|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    432|    static_cast<    \
  |  |  929|    432|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    432|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    432|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 432]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    432|    return SCN_MOVE(result);
  ------------------
  |  |  928|    432|    static_cast<    \
  |  |  929|    432|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    432|}
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4879|  2.38k|    {
 4880|  2.38k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|  2.38k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.38k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.38k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.93k, False: 446]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.93k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.93k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.93k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.93k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.93k|    }                                                  \
  |  |  |  | 3667|  2.38k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    446|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4881|    446|        return read_string_impl(range, it, value);
 4882|  2.38k|    }
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5797|  3.84k|{
 5798|       |    if constexpr (std::is_same_v<T, bool>) {
 5799|       |        return reader_impl_for_bool<CharT>{};
 5800|       |    }
 5801|       |    else if constexpr (std::is_same_v<T, char>) {
 5802|       |        return reader_impl_for_char<CharT>{};
 5803|       |    }
 5804|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5805|       |        return reader_impl_for_wchar<CharT>{};
 5806|       |    }
 5807|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5808|       |        return reader_impl_for_code_point<CharT>{};
 5809|       |    }
 5810|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5811|  3.84k|                       std::is_same_v<T, std::wstring_view>) {
 5812|  3.84k|        return reader_impl_for_string<CharT>{};
 5813|       |    }
 5814|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5815|       |                       std::is_same_v<T, std::wstring>) {
 5816|       |        return reader_impl_for_string<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5819|       |                       std::is_same_v<T, wregex_matches>) {
 5820|       |        return reader_impl_for_regex_matches<CharT>{};
 5821|       |    }
 5822|       |    else if constexpr (std::is_same_v<T, void*>) {
 5823|       |        return reader_impl_for_voidptr<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_floating_point_v<T>) {
 5826|       |        return reader_impl_for_float<CharT>{};
 5827|       |    }
 5828|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5829|       |                       !std::is_same_v<T, wchar_t> &&
 5830|       |                       !std::is_same_v<T, char32_t> &&
 5831|       |                       !std::is_same_v<T, bool>) {
 5832|       |        return reader_impl_for_int<CharT>{};
 5833|       |    }
 5834|       |    else {
 5835|       |        return reader_impl_for_monostate<CharT>{};
 5836|       |    }
 5837|  3.84k|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5265|    348|    {
 5266|    348|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    348|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    348|        return read_impl(range, specs, value);
 5268|    348|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5283|    348|    {
 5284|    348|        SCN_CLANG_PUSH
 5285|    348|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|    348|        switch (m_type) {
 5288|    128|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 128, False: 220]
  ------------------
 5289|    128|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|     66|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 66, False: 282]
  ------------------
 5292|     66|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|     66|                                                                   value);
 5294|       |
 5295|     62|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 62, False: 286]
  ------------------
 5296|     62|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|     88|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 88, False: 260]
  ------------------
 5299|     88|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|     88|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      2|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 2, False: 346]
  ------------------
 5304|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      2|                    range, specs.charset_string<SourceCharT>(),
 5306|      2|                    specs.regexp_flags, value);
 5307|       |
 5308|      2|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 2, False: 346]
  ------------------
 5309|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|      2|                    range,
 5311|      2|                    get_unescaped_regex_pattern(
 5312|      2|                        specs.charset_string<SourceCharT>()),
 5313|      2|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 348]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|    348|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|    348|        }
 5320|       |
 5321|    348|        SCN_CLANG_POP
 5322|    348|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4815|    128|    {
 4816|    128|        return read_string_view_impl(range, read_until_classic_space(range),
 4817|    128|                                     value);
 4818|    128|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4761|    256|{
 4762|    256|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4763|       |
 4764|    256|    auto src = [&]() {
 4765|    256|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|    256|            return make_contiguous_buffer(
 4767|    256|                ranges::subrange{range.begin().base(), result.base()});
 4768|    256|        }
 4769|    256|        else {
 4770|    256|            return make_contiguous_buffer(
 4771|    256|                ranges::subrange{range.begin(), result});
 4772|    256|        }
 4773|    256|    }();
 4774|    256|    using src_type = decltype(src);
 4775|       |
 4776|    256|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4776:9): [Folded - Ignored]
  ------------------
 4777|      0|        return unexpected_scan_error(
 4778|      0|            scan_error::invalid_scanned_value,
 4779|      0|            "Cannot read a string_view from this source range (not "
 4780|      0|            "contiguous)");
 4781|      0|    }
 4782|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4783|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4784|       |                                     "Cannot read a string_view from "
 4785|       |                                     "this source range (would require "
 4786|       |                                     "transcoding)");
 4787|       |    }
 4788|    256|    else {
 4789|    256|        const auto view = src.view();
 4790|    256|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4791|       |
 4792|    256|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4792:13): [True: 176, False: 80]
  ------------------
 4793|    176|            return unexpected_scan_error(
 4794|    176|                scan_error::invalid_scanned_value,
 4795|    176|                "Invalid encoding in scanned string_view");
 4796|    176|        }
 4797|       |
 4798|     80|        return SCN_MOVE(result);
  ------------------
  |  |  928|     80|    static_cast<    \
  |  |  929|     80|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4799|    256|    }
 4800|    256|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4764|    256|    auto src = [&]() {
 4765|    256|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|    256|            return make_contiguous_buffer(
 4767|    256|                ranges::subrange{range.begin().base(), result.base()});
 4768|       |        }
 4769|       |        else {
 4770|       |            return make_contiguous_buffer(
 4771|       |                ranges::subrange{range.begin(), result});
 4772|       |        }
 4773|    256|    }();
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 4851|     66|    {
 4852|     66|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4852:13): [True: 66, False: 0]
  ------------------
 4853|     66|            return read_string_view_impl(
 4854|     66|                range,
 4855|     66|                read_until_code_unit(
 4856|     66|                    range,
 4857|     66|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4858|     66|                        SourceCharT ch) { return ch == until; }),
 4859|     66|                value);
 4860|     66|        }
 4861|      0|        return read_string_view_impl(
 4862|      0|            range,
 4863|      0|            read_until_code_units(
 4864|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4865|      0|            value);
 4866|     66|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_S11_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     66|        : m_fptr([](storage fn,
  743|     66|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     66|              cvref<T> obj = *get<T>(fn);
  745|     66|              if constexpr (std::is_void_v<R>) {
  746|     66|                  obj(static_cast<decltype(args)>(args)...);
  747|     66|              }
  748|     66|              else {
  749|     66|                  return obj(static_cast<decltype(args)>(args)...);
  750|     66|              }
  751|     66|          }),
  752|     66|          m_storage(std::addressof(f))
  753|     66|    {
  754|     66|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_S11_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES1B_w:
  743|  1.78k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.78k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.78k|              else {
  749|  1.78k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.78k|              }
  751|  1.78k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_17basic_string_viewIT0_NSI_11char_traitsISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|  1.78k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.78k|        else if constexpr (std::is_object_v<T>) {
  688|  1.78k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.78k|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEEENKUlwE_clEw:
 4858|  1.78k|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     66|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     66|        {
  662|     66|        }
_ZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4947|     62|    {
 4948|     62|        return read_impl(
 4949|     62|            range,
 4950|     62|            [&](const auto& rng) {
 4951|     62|                return read_string_view_impl(rng, read_all(rng), value);
 4952|     62|            },
 4953|     62|            detail::priority_tag<1>{});
 4954|     62|    }
_ZN3scn2v34impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_17basic_string_viewIT0_NSG_11char_traitsISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSX_OSP_NS0_6detail12priority_tagILm1EEE:
 4962|     62|    {
 4963|     62|        return read_cb(range);
 4964|     62|    }
_ZZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEEENKUlRKSH_E_clISD_EEDaSU_:
 4950|     62|            [&](const auto& rng) {
 4951|     62|                return read_string_view_impl(rng, read_all(rng), value);
 4952|     62|            },
_ZN3scn2v34impl25character_set_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 5050|     88|    {
 5051|     88|        auto it = read_source_impl(range, {specs});
 5052|     88|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|     88|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 80]
  |  |  ------------------
  ------------------
 5053|      8|            return unexpected(it.error());
 5054|      8|        }
 5055|       |
 5056|     80|        return read_string_view_impl(range, *it, value);
 5057|     88|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEE:
 4761|     80|{
 4762|     80|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4763|       |
 4764|     80|    auto src = [&]() {
 4765|     80|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|     80|            return make_contiguous_buffer(
 4767|     80|                ranges::subrange{range.begin().base(), result.base()});
 4768|     80|        }
 4769|     80|        else {
 4770|     80|            return make_contiguous_buffer(
 4771|     80|                ranges::subrange{range.begin(), result});
 4772|     80|        }
 4773|     80|    }();
 4774|     80|    using src_type = decltype(src);
 4775|       |
 4776|     80|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4776:9): [Folded - Ignored]
  ------------------
 4777|      0|        return unexpected_scan_error(
 4778|      0|            scan_error::invalid_scanned_value,
 4779|      0|            "Cannot read a string_view from this source range (not "
 4780|      0|            "contiguous)");
 4781|      0|    }
 4782|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4783|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4784|       |                                     "Cannot read a string_view from "
 4785|       |                                     "this source range (would require "
 4786|       |                                     "transcoding)");
 4787|       |    }
 4788|     80|    else {
 4789|     80|        const auto view = src.view();
 4790|     80|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4791|       |
 4792|     80|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4792:13): [True: 0, False: 80]
  ------------------
 4793|      0|            return unexpected_scan_error(
 4794|      0|                scan_error::invalid_scanned_value,
 4795|      0|                "Invalid encoding in scanned string_view");
 4796|      0|        }
 4797|       |
 4798|     80|        return SCN_MOVE(result);
  ------------------
  |  |  928|     80|    static_cast<    \
  |  |  929|     80|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4799|     80|    }
 4800|     80|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEEENKUlvE_clEv:
 4764|     80|    auto src = [&]() {
 4765|     80|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|     80|            return make_contiguous_buffer(
 4767|     80|                ranges::subrange{range.begin().base(), result.base()});
 4768|       |        }
 4769|       |        else {
 4770|       |            return make_contiguous_buffer(
 4771|       |                ranges::subrange{range.begin(), result});
 4772|       |        }
 4773|     80|    }();
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSN_IT0_NSO_IST_EEEE:
 4890|      4|    {
 4891|      4|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|      4|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      4|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      4|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      4|    }                                                  \
  |  |  |  | 3667|      4|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_view_impl(range, it, value);
 4893|      4|    }
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5265|  2.87k|    {
 5266|  2.87k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  2.87k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  2.87k|        return read_impl(range, specs, value);
 5268|  2.87k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5283|  2.87k|    {
 5284|  2.87k|        SCN_CLANG_PUSH
 5285|  2.87k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|  2.87k|        switch (m_type) {
 5288|    314|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 314, False: 2.56k]
  ------------------
 5289|    314|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|     36|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 36, False: 2.84k]
  ------------------
 5292|     36|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|     36|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 2.87k]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|    146|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 146, False: 2.73k]
  ------------------
 5299|    146|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|    146|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|  2.32k|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 2.32k, False: 558]
  ------------------
 5304|  2.32k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|  2.32k|                    range, specs.charset_string<SourceCharT>(),
 5306|  2.32k|                    specs.regexp_flags, value);
 5307|       |
 5308|     62|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 62, False: 2.81k]
  ------------------
 5309|     62|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|     62|                    range,
 5311|     62|                    get_unescaped_regex_pattern(
 5312|     62|                        specs.charset_string<SourceCharT>()),
 5313|     62|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 2.87k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|  2.87k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|  2.87k|        }
 5320|       |
 5321|  2.87k|        SCN_CLANG_POP
 5322|  2.87k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4815|    846|    {
 4816|    846|        return read_string_view_impl(range, read_until_classic_space(range),
 4817|    846|                                     value);
 4818|    846|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4761|    882|{
 4762|    882|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4763|       |
 4764|    882|    auto src = [&]() {
 4765|    882|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|    882|            return make_contiguous_buffer(
 4767|    882|                ranges::subrange{range.begin().base(), result.base()});
 4768|    882|        }
 4769|    882|        else {
 4770|    882|            return make_contiguous_buffer(
 4771|    882|                ranges::subrange{range.begin(), result});
 4772|    882|        }
 4773|    882|    }();
 4774|    882|    using src_type = decltype(src);
 4775|       |
 4776|    882|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4776:9): [Folded - Ignored]
  ------------------
 4777|      0|        return unexpected_scan_error(
 4778|      0|            scan_error::invalid_scanned_value,
 4779|      0|            "Cannot read a string_view from this source range (not "
 4780|      0|            "contiguous)");
 4781|      0|    }
 4782|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4783|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4784|       |                                     "Cannot read a string_view from "
 4785|       |                                     "this source range (would require "
 4786|       |                                     "transcoding)");
 4787|       |    }
 4788|    882|    else {
 4789|    882|        const auto view = src.view();
 4790|    882|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4791|       |
 4792|    882|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4792:13): [True: 318, False: 564]
  ------------------
 4793|    318|            return unexpected_scan_error(
 4794|    318|                scan_error::invalid_scanned_value,
 4795|    318|                "Invalid encoding in scanned string_view");
 4796|    318|        }
 4797|       |
 4798|    564|        return SCN_MOVE(result);
  ------------------
  |  |  928|    564|    static_cast<    \
  |  |  929|    564|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4799|    882|    }
 4800|    882|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4764|    882|    auto src = [&]() {
 4765|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|       |            return make_contiguous_buffer(
 4767|       |                ranges::subrange{range.begin().base(), result.base()});
 4768|       |        }
 4769|    882|        else {
 4770|    882|            return make_contiguous_buffer(
 4771|    882|                ranges::subrange{range.begin(), result});
 4772|    882|        }
 4773|    882|    }();
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4851|     36|    {
 4852|     36|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4852:13): [True: 36, False: 0]
  ------------------
 4853|     36|            return read_string_view_impl(
 4854|     36|                range,
 4855|     36|                read_until_code_unit(
 4856|     36|                    range,
 4857|     36|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4858|     36|                        SourceCharT ch) { return ch == until; }),
 4859|     36|                value);
 4860|     36|        }
 4861|      0|        return read_string_view_impl(
 4862|      0|            range,
 4863|      0|            read_until_code_units(
 4864|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4865|      0|            value);
 4866|     36|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_SZ_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     36|        : m_fptr([](storage fn,
  743|     36|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     36|              cvref<T> obj = *get<T>(fn);
  745|     36|              if constexpr (std::is_void_v<R>) {
  746|     36|                  obj(static_cast<decltype(args)>(args)...);
  747|     36|              }
  748|     36|              else {
  749|     36|                  return obj(static_cast<decltype(args)>(args)...);
  750|     36|              }
  751|     36|          }),
  752|     36|          m_storage(std::addressof(f))
  753|     36|    {
  754|     36|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_SZ_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES19_w:
  743|    486|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    486|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    486|              else {
  749|    486|                  return obj(static_cast<decltype(args)>(args)...);
  750|    486|              }
  751|    486|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_17basic_string_viewIT0_NSG_11char_traitsIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    486|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    486|        else if constexpr (std::is_object_v<T>) {
  688|    486|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    486|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEEENKUlwE_clEw:
 4858|    486|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     36|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     36|        {
  662|     36|        }
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5050|    146|    {
 5051|    146|        auto it = read_source_impl(range, {specs});
 5052|    146|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    146|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20, False: 126]
  |  |  ------------------
  ------------------
 5053|     20|            return unexpected(it.error());
 5054|     20|        }
 5055|       |
 5056|    126|        return read_string_view_impl(range, *it, value);
 5057|    146|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4761|    572|{
 4762|    572|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4763|       |
 4764|    572|    auto src = [&]() {
 4765|    572|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|    572|            return make_contiguous_buffer(
 4767|    572|                ranges::subrange{range.begin().base(), result.base()});
 4768|    572|        }
 4769|    572|        else {
 4770|    572|            return make_contiguous_buffer(
 4771|    572|                ranges::subrange{range.begin(), result});
 4772|    572|        }
 4773|    572|    }();
 4774|    572|    using src_type = decltype(src);
 4775|       |
 4776|    572|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4776:9): [Folded - Ignored]
  ------------------
 4777|      0|        return unexpected_scan_error(
 4778|      0|            scan_error::invalid_scanned_value,
 4779|      0|            "Cannot read a string_view from this source range (not "
 4780|      0|            "contiguous)");
 4781|      0|    }
 4782|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4783|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4784|       |                                     "Cannot read a string_view from "
 4785|       |                                     "this source range (would require "
 4786|       |                                     "transcoding)");
 4787|       |    }
 4788|    572|    else {
 4789|    572|        const auto view = src.view();
 4790|    572|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4791|       |
 4792|    572|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4792:13): [True: 140, False: 432]
  ------------------
 4793|    140|            return unexpected_scan_error(
 4794|    140|                scan_error::invalid_scanned_value,
 4795|    140|                "Invalid encoding in scanned string_view");
 4796|    140|        }
 4797|       |
 4798|    432|        return SCN_MOVE(result);
  ------------------
  |  |  928|    432|    static_cast<    \
  |  |  929|    432|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4799|    572|    }
 4800|    572|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4764|    572|    auto src = [&]() {
 4765|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|       |            return make_contiguous_buffer(
 4767|       |                ranges::subrange{range.begin().base(), result.base()});
 4768|       |        }
 4769|    572|        else {
 4770|    572|            return make_contiguous_buffer(
 4771|    572|                ranges::subrange{range.begin(), result});
 4772|    572|        }
 4773|    572|    }();
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSL_IT0_NSM_ISR_EEEE:
 4890|  2.38k|    {
 4891|  2.38k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|  2.38k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.38k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.38k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.93k, False: 446]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.93k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.93k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.93k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.93k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.93k|    }                                                  \
  |  |  |  | 3667|  2.38k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    446|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|    446|        return read_string_view_impl(range, it, value);
 4893|  2.38k|    }
_ZN3scn2v34impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1670|  7.33k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|  7.33k|                  ranges::sized_range<Range>) {
 1674|  7.33k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  7.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1675|       |    }
 1676|       |    else {
 1677|       |        return contiguous_range_factory{SCN_FWD(range)};
 1678|       |    }
 1679|  7.33k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEETnPNS5_9enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISC_Esr6rangesE11sized_rangeISC_EEvE4typeELPv0EEEOSC_:
 1476|  7.33k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1477|  7.33k|    {
 1478|  7.33k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIdEET_S5_:
 4088|    884|    {
 4089|    884|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4089:13): [True: 0, False: 884]
  ------------------
 4090|      0|            return std::copysign(value, T{-1.0});
 4091|      0|        }
 4092|    884|        return std::copysign(value, T{1.0});
 4093|    884|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIdEET_S5_:
 4088|    852|    {
 4089|    852|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4089:13): [True: 0, False: 852]
  ------------------
 4090|      0|            return std::copysign(value, T{-1.0});
 4091|      0|        }
 4092|    852|        return std::copysign(value, T{1.0});
 4093|    852|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5783|  5.67k|{
 5784|  5.67k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.67k]
  |  |  ------------------
  ------------------
 5785|      0|        return unexpected(e);
 5786|      0|    }
 5787|       |
 5788|  5.67k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 630, False: 5.04k]
  ------------------
 5789|    630|        return range.begin();
 5790|    630|    }
 5791|       |
 5792|  5.04k|    return skip_classic_whitespace(range);
 5793|  5.67k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
 5859|    630|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    630|                          basic_contiguous_scan_context<char_type>>) {
 5864|    630|            auto rd = make_reader<T, char_type>();
 5865|    630|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    630|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|    630|    {
 5852|    630|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    630|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    630|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    630|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    630|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 630]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    630|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    630|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    630|                        .transform_error(make_eof_scan_error));
 5854|    630|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    630|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|    630|    {
 3517|    630|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    630|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|    630|        return read_default_with_base(range, value, 10);
 3519|    630|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
 5859|    630|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    630|                          basic_contiguous_scan_context<char_type>>) {
 5864|    630|            auto rd = make_reader<T, char_type>();
 5865|    630|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    630|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|    630|    {
 5852|    630|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    630|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    630|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    630|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    630|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 630]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    630|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    630|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    630|                        .transform_error(make_eof_scan_error));
 5854|    630|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    630|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|    630|    {
 3517|    630|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    630|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|    630|        return read_default_with_base(range, value, 10);
 3519|    630|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIPvEENS0_13scan_expectedIPKcEERT_:
 5859|    630|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    630|                          basic_contiguous_scan_context<char_type>>) {
 5864|    630|            auto rd = make_reader<T, char_type>();
 5865|    630|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    630|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_23reader_impl_for_voidptrIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5851|    630|    {
 5852|    630|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    630|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    630|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    630|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    630|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 630]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    630|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    630|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    630|                        .transform_error(make_eof_scan_error));
 5854|    630|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    630|    }
_ZNK3scn2v34impl23reader_impl_for_voidptrIcE19skip_ws_before_readEv:
 5736|  1.13k|    {
 5737|  1.13k|        return true;
 5738|  1.13k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5753|    874|    {
 5754|    874|        detail::format_specs specs{};
 5755|    874|        specs.type = detail::presentation_type::int_hex;
 5756|       |
 5757|    874|        std::uintptr_t intvalue{};
 5758|    874|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3668|    874|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    874|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    874|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    874|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 874, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    874|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    874|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    874|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    874|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    874|    }                                                  \
  |  |  |  | 3667|    874|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5759|      0|                                                                intvalue, loc));
 5760|      0|        value = reinterpret_cast<void*>(intvalue);
 5761|      0|        return result;
 5762|    874|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIbEENS0_13scan_expectedIPKcEERT_:
 5859|    630|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    630|                          basic_contiguous_scan_context<char_type>>) {
 5864|    630|            auto rd = make_reader<T, char_type>();
 5865|    630|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    630|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_boolIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|    630|    {
 5852|    630|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    630|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    630|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    630|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    630|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 630]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    630|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    630|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    630|                        .transform_error(make_eof_scan_error));
 5854|    630|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    630|    }
_ZNK3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE19skip_ws_before_readEv:
 3023|  1.44k|    {
 3024|  1.44k|        return true;
 3025|  1.44k|    }
_ZNK3scn2v34impl20reader_impl_for_boolIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5492|    630|    {
 5493|    630|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    630|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5494|       |
 5495|    630|        return bool_reader<CharT>{}.read_classic(range, value);
 5496|    630|    }
_ZN3scn2v34impl16bool_reader_baseC2Ev:
 5337|  1.16k|    constexpr bool_reader_base() = default;
_ZNK3scn2v34impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5343|  1.02k|    {
 5344|  1.02k|        scan_error err{scan_error::invalid_scanned_value,
 5345|  1.02k|                       "Failed to read boolean"};
 5346|       |
 5347|  1.02k|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5347:13): [True: 892, False: 128]
  ------------------
 5348|    892|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5348:22): [True: 0, False: 892]
  ------------------
 5349|      0|                return *r;
 5350|      0|            }
 5351|    892|            else {
 5352|    892|                err = r.error();
 5353|    892|            }
 5354|    892|        }
 5355|       |
 5356|  1.02k|        if (m_options & allow_text) {
  ------------------
  |  Branch (5356:13): [True: 998, False: 22]
  ------------------
 5357|    998|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5357:22): [True: 0, False: 998]
  ------------------
 5358|      0|                return *r;
 5359|      0|            }
 5360|    998|            else {
 5361|    998|                err = r.error();
 5362|    998|            }
 5363|    998|        }
 5364|       |
 5365|  1.02k|        return unexpected(err);
 5366|  1.02k|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5372|    914|    {
 5373|    914|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5373:18): [True: 0, False: 914]
  ------------------
 5374|      0|            value = false;
 5375|      0|            return *r;
 5376|      0|        }
 5377|    914|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5377:18): [True: 0, False: 914]
  ------------------
 5378|      0|            value = true;
 5379|      0|            return *r;
 5380|      0|        }
 5381|       |
 5382|    914|        return unexpected_scan_error(
 5383|    914|            scan_error::invalid_scanned_value,
 5384|    914|            "Failed to read numeric boolean value: No match");
 5385|    914|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5390|    998|    {
 5391|    998|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5391:18): [True: 0, False: 998]
  ------------------
 5392|      0|            value = true;
 5393|      0|            return *r;
 5394|      0|        }
 5395|    998|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5395:18): [True: 0, False: 998]
  ------------------
 5396|      0|            value = false;
 5397|      0|            return *r;
 5398|      0|        }
 5399|       |
 5400|    998|        return unexpected_scan_error(
 5401|    998|            scan_error::invalid_scanned_value,
 5402|    998|            "Failed to read textual boolean value: No match");
 5403|    998|    }
_ZN3scn2v34impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2182|  1.99k|{
 2183|  1.99k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|  1.99k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.99k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.99k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 100, False: 1.89k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    100|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    100|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    100|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    100|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    100|    }                                                  \
  |  |  |  | 3667|  1.99k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.89k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2184|  1.89k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2185|  1.89k|                    .transform_error(make_eof_parse_error));
 2186|       |
 2187|  1.89k|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2188|  1.89k|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2189|  1.89k|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|  1.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.89k, False: 0]
  |  |  ------------------
  ------------------
 2190|  1.89k|            return unexpected(parse_error::error);
 2191|  1.89k|        }
 2192|      0|        return it;
 2193|       |    }
 2194|       |    else {
 2195|       |        auto range_it = range.begin();
 2196|       |        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2197|       |            if (SCN_UNLIKELY(*range_it !=
 2198|       |                             static_cast<detail::char_t<Range>>(str[i]))) {
 2199|       |                return unexpected(parse_error::error);
 2200|       |            }
 2201|       |        }
 2202|       |        return it;
 2203|       |    }
 2204|  1.89k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIcEENS0_13scan_expectedIPKcEERT_:
 5859|    630|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    630|                          basic_contiguous_scan_context<char_type>>) {
 5864|    630|            auto rd = make_reader<T, char_type>();
 5865|    630|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    630|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_charIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|    630|    {
 5852|    630|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    630|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    630|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    630|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    630|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 630]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    630|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    630|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    630|                        .transform_error(make_eof_scan_error));
 5854|    630|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    630|    }
_ZN3scn2v34impl12float_readerIcEC2Ev:
 3646|    630|    constexpr float_reader() = default;
_ZN3scn2v34impl17float_reader_baseC2Ev:
 3632|  1.16k|    constexpr float_reader_base() = default;
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 5859|    630|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    630|                          basic_contiguous_scan_context<char_type>>) {
 5864|    630|            auto rd = make_reader<T, char_type>();
 5865|    630|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    630|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|    630|    {
 5852|    630|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    630|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    630|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    630|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    630|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 630]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    630|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    630|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    630|                        .transform_error(make_eof_scan_error));
 5854|    630|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    630|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4140|    630|    {
 4141|    630|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    630|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|    630|        float_reader<CharT> rd{};
 4144|    630|        return read_impl<Range>(
 4145|    630|            range, rd,
 4146|    630|            [](float_reader<CharT>& r, auto&&... args) {
 4147|    630|                return r.read_source(SCN_FWD(args)...);
 4148|    630|            },
 4149|    630|            value);
 4150|    630|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|    630|        : m_fptr([](storage fn,
  743|    630|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    630|              cvref<T> obj = *get<T>(fn);
  745|    630|              if constexpr (std::is_void_v<R>) {
  746|    630|                  obj(static_cast<decltype(args)>(args)...);
  747|    630|              }
  748|    630|              else {
  749|    630|                  return obj(static_cast<decltype(args)>(args)...);
  750|    630|              }
  751|    630|          }),
  752|    630|          m_storage(std::addressof(f))
  753|    630|    {
  754|    630|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|    630|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    630|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    630|              else {
  749|    630|                  return obj(static_cast<decltype(args)>(args)...);
  750|    630|              }
  751|    630|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|    630|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    630|        else if constexpr (std::is_object_v<T>) {
  688|    630|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    630|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4146|    630|            [](float_reader<CharT>& r, auto&&... args) {
 4147|    630|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    630|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|    630|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|    630|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    630|        {
  662|    630|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5859|    630|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    630|                          basic_contiguous_scan_context<char_type>>) {
 5864|    630|            auto rd = make_reader<T, char_type>();
 5865|    630|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    630|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5851|    630|    {
 5852|    630|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    630|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    630|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    630|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    630|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 630]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    630|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    630|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    630|                        .transform_error(make_eof_scan_error));
 5854|    630|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    630|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5254|    630|    {
 5255|    630|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    630|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|    630|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|    630|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5859|    630|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    630|                          basic_contiguous_scan_context<char_type>>) {
 5864|    630|            auto rd = make_reader<T, char_type>();
 5865|    630|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    630|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5851|    630|    {
 5852|    630|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    630|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    630|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    630|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    630|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 630]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    630|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    630|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    630|                        .transform_error(make_eof_scan_error));
 5854|    630|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    630|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5254|    630|    {
 5255|    630|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    630|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|    630|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|    630|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKcEERT_:
 5859|    630|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    630|                          basic_contiguous_scan_context<char_type>>) {
 5864|    630|            auto rd = make_reader<T, char_type>();
 5865|    630|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    630|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5851|    630|    {
 5852|    630|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    630|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    630|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    630|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    630|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 630]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    630|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    630|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    630|                        .transform_error(make_eof_scan_error));
 5854|    630|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    630|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5254|    630|    {
 5255|    630|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    630|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|    630|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|    630|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISF_EEvE4typeELPv0EEEOSF_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2864|   109k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  928|   109k|    static_cast<    \
  |  |  929|   109k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2865|   109k|          m_range(SCN_FWD(r)),
  ------------------
  |  |  930|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2866|   109k|          m_current(m_range.begin())
 2867|   109k|    {
 2868|   109k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2871|   244k|    {
 2872|   244k|        return m_current;
 2873|   244k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2876|   192k|    {
 2877|   192k|        return m_range.end();
 2878|   192k|    }
_ZN3scn2v34impl19is_first_char_spaceIcEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1208|  57.1k|{
 1209|       |    // TODO: optimize
 1210|  57.1k|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  924|  57.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  57.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1211|  57.1k|    auto res = get_next_code_point(str);
 1212|  57.1k|    return {res.iterator, res.value, detail::is_cp_space(res.value)};
 1213|  57.1k|}
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2891|  60.6k|    {
 2892|  60.6k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  60.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  60.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2893|  60.6k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2894|  60.6k|            if (it == nullptr) {
  ------------------
  |  Branch (2894:17): [True: 0, False: 60.6k]
  ------------------
 2895|      0|                it = end();
 2896|      0|            }
 2897|  60.6k|        }
 2898|  60.6k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  60.6k|    static_cast<    \
  |  |  929|  60.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2899|  60.6k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2881|  73.8k|    {
 2882|  73.8k|        return ranges::subrange{begin(), end()};
 2883|  73.8k|    }
_ZN3scn2v34impl24read_while_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2104|  7.33k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|  7.33k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|  7.33k|        auto buf = make_contiguous_buffer(range);
 2109|  7.33k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|  7.33k|        return ranges::next(range.begin(),
 2111|  7.33k|                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|       |    else {
 2114|       |        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|       |            return detail::is_cp_space(cp);
 2127|       |        });
 2128|       |    }
 2129|  7.33k|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_b:
 6025|  4.50k|    {
 6026|  4.50k|        const bool need_skipped_width =
 6027|  4.50k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 106, False: 4.39k]
  |  Branch (6027:33): [True: 4.39k, False: 0]
  ------------------
 6028|  4.50k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|  4.50k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 172, False: 4.33k]
  ------------------
 6032|  4.50k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 584, False: 3.74k]
  ------------------
 6033|    756|            return skip_fill(rng, specs.precision, specs.fill,
 6034|    756|                             need_skipped_width);
 6035|    756|        }
 6036|  3.74k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 3.63k, False: 112]
  |  Branch (6036:56): [True: 1.97k, False: 1.66k]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|  1.97k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 1.97k, False: 0]
  ------------------
 6040|  1.97k|                auto max_width_view = take_width(rng, specs.precision);
 6041|  1.97k|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|  1.97k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.97k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.97k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 174, False: 1.79k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    174|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    174|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    174|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    174|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    174|    }                                                  \
  |  |  |  | 3667|  1.97k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.79k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|  1.79k|                                  .transform_error(make_eof_scan_error));
 6043|  1.79k|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|  1.97k|            }
 6045|      0|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|      0|                            make_eof_scan_error));
 6047|       |
 6048|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 0]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|      0|            return result_type{it, 0};
 6056|      0|        }
 6057|       |
 6058|  1.77k|        return result_type{rng.begin(), 0};
 6059|  3.74k|    }
_ZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEb:
 5939|    756|{
 5940|    756|    using char_type = detail::char_t<Range>;
 5941|    756|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5942|       |
 5943|    756|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5943:9): [True: 486, False: 270]
  ------------------
 5944|    486|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5945|    486|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5946|       |
 5947|    486|        if (max_width == 0) {
  ------------------
  |  Branch (5947:13): [True: 0, False: 486]
  ------------------
 5948|      0|            auto it = read_while_code_unit(range, pred);
 5949|       |
 5950|      0|            if (want_skipped_width) {
  ------------------
  |  Branch (5950:17): [True: 0, False: 0]
  ------------------
 5951|      0|                auto prefix_width =
 5952|      0|                    static_cast<std::ptrdiff_t>(
 5953|      0|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5954|      0|                    ranges::distance(range.begin(), it);
 5955|      0|                return result_type{it, prefix_width};
 5956|      0|            }
 5957|      0|            return result_type{it, 0};
 5958|      0|        }
 5959|       |
 5960|    486|        auto max_width_view = take_width(range, max_width);
 5961|    486|        auto w_it = read_while_code_unit(max_width_view, pred);
 5962|       |
 5963|    486|        if (want_skipped_width) {
  ------------------
  |  Branch (5963:13): [True: 486, False: 0]
  ------------------
 5964|    486|            return result_type{w_it.base(), max_width - w_it.count()};
 5965|    486|        }
 5966|      0|        return result_type{w_it.base(), 0};
 5967|    486|    }
 5968|       |
 5969|    270|    const auto fill_chars = fill.template get_code_units<char_type>();
 5970|    270|    if (max_width == 0) {
  ------------------
  |  Branch (5970:9): [True: 0, False: 270]
  ------------------
 5971|      0|        auto it = read_while_code_units(range, fill_chars);
 5972|       |
 5973|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5973:13): [True: 0, False: 0]
  ------------------
 5974|      0|            auto prefix_width =
 5975|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5976|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5977|      0|            return result_type{it, prefix_width};
 5978|      0|        }
 5979|      0|        return result_type{it, 0};
 5980|      0|    }
 5981|       |
 5982|    270|    auto max_width_view = take_width(range, max_width);
 5983|    270|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5984|       |
 5985|    270|    if (want_skipped_width) {
  ------------------
  |  Branch (5985:9): [True: 270, False: 0]
  ------------------
 5986|    270|        return result_type{w_it.base(), max_width - w_it.count()};
 5987|    270|    }
 5988|      0|    return result_type{w_it.base(), 0};
 5989|    270|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_ST_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSJ_:
  742|    486|        : m_fptr([](storage fn,
  743|    486|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    486|              cvref<T> obj = *get<T>(fn);
  745|    486|              if constexpr (std::is_void_v<R>) {
  746|    486|                  obj(static_cast<decltype(args)>(args)...);
  747|    486|              }
  748|    486|              else {
  749|    486|                  return obj(static_cast<decltype(args)>(args)...);
  750|    486|              }
  751|    486|          }),
  752|    486|          m_storage(std::addressof(f))
  753|    486|    {
  754|    486|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_ST_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES15_c:
  743|    668|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    668|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    668|              else {
  749|    668|                  return obj(static_cast<decltype(args)>(args)...);
  750|    668|              }
  751|    668|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESI_lRKNS0_6detail9fill_typeEbEUlcE_EEDaNS3_7storageE:
  683|    668|    {
  684|    668|        if constexpr (std::is_const_v<T>) {
  685|    668|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    668|    }
_ZZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEbENKUlcE_clEc:
 5945|    668|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|    486|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    486|        {
  667|    486|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1963|    486|{
 1964|    486|    return read_until_code_unit(range, std::not_fn(pred));
 1965|    486|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1944|    486|{
 1945|       |    if constexpr (ranges::common_range<Range>) {
 1946|       |        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|    486|    else {
 1949|    486|        auto first = range.begin();
 1950|    722|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1950:16): [True: 668, False: 54]
  ------------------
 1951|    668|            if (pred(*first)) {
  ------------------
  |  Branch (1951:17): [True: 432, False: 236]
  ------------------
 1952|    432|                return first;
 1953|    432|            }
 1954|    668|        }
 1955|     54|        return first;
 1956|    486|    }
 1957|    486|}
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE5beginEv:
 2798|  4.70k|    {
 2799|  4.70k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2800|  4.70k|                                      m_count};
 2801|  4.70k|    }
_ZNK3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEvE3getEv:
 2705|  18.9k|    {
 2706|  18.9k|        return view;
 2707|  18.9k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEC2ES6_SF_l:
 2369|  4.70k|        : m_current(x), m_end(s), m_count(n)
 2370|  4.70k|    {
 2371|  4.70k|    }
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2769|  6.30k|        {
 2770|  6.30k|            return !(y == x);
 2771|  6.30k|        }
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2758|  12.2k|        {
 2759|  12.2k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2759:21): [True: 784, False: 11.4k]
  |  Branch (2759:39): [True: 454, False: 330]
  ------------------
 2760|  12.2k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2760:20): [True: 0, False: 11.7k]
  ------------------
 2761|  12.2k|        }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE14multibyte_leftEv:
 2409|    784|    {
 2410|    784|        return m_multibyte_left;
 2411|    784|    }
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE3endEv:
 2804|  9.50k|    {
 2805|  9.50k|        return sentinel<true>{m_base.get().end()};
 2806|  9.50k|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE8sentinelILb1EEC2ENSA_8sentinelILb1EEE:
 2739|  9.50k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  |  928|  9.50k|    static_cast<    \
  |  |  929|  9.50k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEdeEv:
 2414|  8.34k|    {
 2415|  8.34k|        return *m_current;
 2416|  8.34k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEppEv:
 2423|  9.66k|    {
 2424|  9.66k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  9.66k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.66k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2425|  9.66k|        _increment_current();
 2426|  9.66k|        return *this;
 2427|  9.66k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE18_increment_currentEv:
 2656|  9.66k|    {
 2657|  9.66k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2657:13): [True: 5.38k, False: 4.28k]
  ------------------
 2658|  5.38k|            auto cplen = _get_cp_length_at_current();
 2659|  5.38k|            m_multibyte_left = cplen - 1;
 2660|  5.38k|            m_count -= _get_width_at_current_cp_start(cplen);
 2661|  5.38k|        }
 2662|  4.28k|        else {
 2663|  4.28k|            --m_multibyte_left;
 2664|  4.28k|        }
 2665|       |
 2666|  9.66k|        ++m_current;
 2667|  9.66k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE25_get_cp_length_at_currentEv:
 2627|  5.38k|    {
 2628|  5.38k|        return static_cast<difference_type>(
 2629|  5.38k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2630|  5.38k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE30_get_width_at_current_cp_startEl:
 2633|  5.38k|    {
 2634|  5.38k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|  5.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.38k]
  |  |  ------------------
  ------------------
 2635|      0|            return 0;
 2636|      0|        }
 2637|       |
 2638|  5.38k|        if (cplen == 1) {
  ------------------
  |  Branch (2638:13): [True: 3.04k, False: 2.34k]
  ------------------
 2639|  3.04k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  3.04k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.04k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2640|  3.04k|            auto cp = static_cast<char32_t>(*m_current);
 2641|  3.04k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2642|  3.04k|        }
 2643|       |
 2644|  2.34k|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2645|  2.34k|                                           cplen);
 2646|  2.34k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  2.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.34k]
  |  |  ------------------
  ------------------
 2647|      0|            return 0;
 2648|      0|        }
 2649|       |
 2650|  2.34k|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2651|  2.34k|        return static_cast<difference_type>(
 2652|  2.34k|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2653|  2.34k|    }
_ZN3scn2v34impl21read_while_code_unitsINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENSt3__117basic_string_viewIcNSD_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEESJ_RKT0_:
 2024|    270|{
 2025|    270|    static_assert(ranges::common_range<CodeUnits>);
 2026|       |
 2027|    270|    auto it = range.begin();
 2028|    270|    while (it != range.end()) {
  ------------------
  |  Branch (2028:12): [True: 270, False: 0]
  ------------------
 2029|    270|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2030|    270|                                           needle.size());
 2031|    270|        if (!r) {
  ------------------
  |  Branch (2031:13): [True: 52, False: 218]
  ------------------
 2032|     52|            return it;
 2033|     52|        }
 2034|    218|        static_assert(
 2035|    218|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2036|    218|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2036:13): [True: 218, False: 0]
  ------------------
 2037|    218|            return it;
 2038|    218|        }
 2039|      0|        it = *r;
 2040|      0|    }
 2041|      0|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2042|      0|    return it;
 2043|      0|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_l:
 1844|    270|{
 1845|    270|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    270|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    270|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1846|       |
 1847|       |    if constexpr (ranges::sized_range<Range>) {
 1848|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1849|       |        if (sz < count) {
 1850|       |            return unexpected(eof_error::eof);
 1851|       |        }
 1852|       |
 1853|       |        return ranges::next(range.begin(), count);
 1854|       |    }
 1855|    270|    else {
 1856|    270|        auto it = range.begin();
 1857|    270|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1857:13): [True: 0, False: 270]
  ------------------
 1858|      0|            return ranges::next(it, count);
 1859|      0|        }
 1860|       |
 1861|  1.11k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1861:36): [True: 898, False: 218]
  ------------------
 1862|    898|            if (it == range.end()) {
  ------------------
  |  Branch (1862:17): [True: 52, False: 846]
  ------------------
 1863|     52|                return unexpected(eof_error::eof);
 1864|     52|            }
 1865|    898|        }
 1866|       |
 1867|    218|        return it;
 1868|    270|    }
 1869|    270|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEmT_:
 1094|    270|{
 1095|       |    if constexpr (ranges::sized_range<Range>) {
 1096|       |        return r.size();
 1097|       |    }
 1098|       |    else if constexpr (std::is_same_v<
 1099|       |                           ranges::const_iterator_t<Range>,
 1100|       |                           typename detail::basic_scan_buffer<
 1101|       |                               detail::char_t<Range>>::forward_iterator>) {
 1102|       |        if constexpr (ranges::common_range<Range>) {
 1103|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|       |        }
 1105|       |        else {
 1106|       |            if (r.begin().stores_parent()) {
 1107|       |                return static_cast<size_t>(
 1108|       |                    r.begin().parent()->chars_available() -
 1109|       |                    r.begin().position());
 1110|       |            }
 1111|       |            return r.begin().contiguous_segment().size();
 1112|       |        }
 1113|       |    }
 1114|    270|    else {
 1115|    270|        return 0;
 1116|    270|    }
 1117|    270|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSM_NS1_20incrementable_traitsISM_E15difference_typeE:
  267|  1.97k|    {
  268|  1.97k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.97k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISM_EEvE4typeERSM_NS1_20incrementable_traitsISM_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|  1.97k|    {
  161|  1.97k|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|  1.97k|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 0, False: 1.97k]
  ------------------
  164|      0|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 0, False: 0]
  ------------------
  165|      0|                ++i;
  166|      0|            }
  167|      0|        }
  168|  1.97k|        else {
  169|  1.97k|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 1.97k]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|  1.97k|        }
  173|  1.97k|    }
_ZN3scn2v34impl27counted_width_iterator_implneINS2_22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEDTeqclscPFRKS7_vELDnEEclscPFRKT_vELDnEEERKNS4_IS7_SG_EERKNS4_ISL_T0_EE:
 2519|  5.84k|    {
 2520|  5.84k|        return !(a == b);
 2521|  5.84k|    }
_ZN3scn2v34impl27counted_width_iterator_impleqINS2_22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEDTeqclscPFRKS7_vELDnEEclscPFRKT_vELDnEEERKNS4_IS7_SG_EERKNS4_ISL_T0_EE:
 2511|  5.84k|    {
 2512|  5.84k|        return a.m_current == b.m_current;
 2513|  5.84k|    }
_ZNK3scn2v34impl14_take_width_fnclINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEEDTtlS4_fp_fp0_EERKT_l:
 2820|  2.72k|    {
 2821|  2.72k|        return take_width_view{r, n};
 2822|  2.72k|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEEC2ERKSA_l:
 2788|  2.72k|        : m_base(base), m_count(count)
 2789|  2.72k|    {
 2790|  2.72k|    }
_ZN3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEvEC2ERKSB_:
 2702|  2.72k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2939|  1.97k|{
 2940|  1.97k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 1.97k, False: 0]
  ------------------
 2941|  1.97k|        auto it = read_while_classic_space(range);
 2942|  1.97k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|  1.97k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 174, False: 1.79k]
  |  |  ------------------
  ------------------
 2944|    174|            return unexpected(e);
 2945|    174|        }
 2946|       |
 2947|  1.79k|        return it;
 2948|  1.97k|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|  1.97k|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2104|  1.97k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|  1.97k|    else {
 2114|  1.97k|        auto it = range.begin();
 2115|       |
 2116|  1.97k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|  1.97k|            auto seg = get_contiguous_beginning(range);
 2118|  1.97k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|  1.97k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2119:17): [True: 0, False: 1.97k]
  ------------------
 2120|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|      0|            }
 2122|  1.97k|            ranges::advance(it, seg.size());
 2123|  1.97k|        }
 2124|       |
 2125|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  1.97k|            return detail::is_cp_space(cp);
 2127|  1.97k|        });
 2128|  1.97k|    }
 2129|  1.97k|}
_ZN3scn2v34impl24get_contiguous_beginningINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDaT_:
 1038|  1.97k|{
 1039|       |    if constexpr (ranges::contiguous_range<Range> &&
 1040|       |                  ranges::sized_range<Range>) {
 1041|       |        return r;
 1042|       |    }
 1043|       |    else if constexpr (std::is_same_v<
 1044|       |                           ranges::const_iterator_t<Range>,
 1045|       |                           typename detail::basic_scan_buffer<
 1046|       |                               detail::char_t<Range>>::forward_iterator>) {
 1047|       |        if constexpr (ranges::common_range<Range>) {
 1048|       |            auto seg = r.begin().contiguous_segment();
 1049|       |            auto dist =
 1050|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|       |            return seg.substr(0, std::min(seg.size(), dist));
 1052|       |        }
 1053|       |        else {
 1054|       |            return r.begin().contiguous_segment();
 1055|       |        }
 1056|       |    }
 1057|  1.97k|    else {
 1058|  1.97k|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|  1.97k|    }
 1060|  1.97k|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2069|  1.97k|{
 2070|  1.97k|    return read_until_code_point(range, std::not_fn(pred));
 2071|  1.97k|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2048|  1.97k|{
 2049|  1.97k|    auto it = range.begin();
 2050|  3.22k|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 3.04k, False: 174]
  ------------------
 2051|  3.04k|        const auto val =
 2052|  3.04k|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  3.04k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  3.04k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.04k, False: 0]
  |  |  ------------------
  ------------------
 2054|  3.04k|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  3.04k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  3.04k|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 1.79k, False: 1.24k]
  ------------------
 2057|  1.79k|                return it;
 2058|  1.79k|            }
 2059|  3.04k|        }
 2060|  1.24k|        it = val.iterator;
 2061|  1.24k|    }
 2062|       |
 2063|    174|    return it;
 2064|  1.97k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISP_EEE4typeEEESP_:
 1886|  3.04k|{
 1887|  3.04k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  3.04k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.04k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|  3.04k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|  3.04k|    auto it = range.begin();
 1891|  3.04k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|  3.04k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  3.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.04k]
  |  |  ------------------
  ------------------
 1894|      0|        ++it;
 1895|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|      0|        return {it, {}};
 1897|      0|    }
 1898|       |
 1899|  3.04k|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 2.32k, False: 724]
  ------------------
 1900|  2.32k|        ++it;
 1901|  2.32k|        return {it, string_type(1, *range.begin())};
 1902|  2.32k|    }
 1903|       |
 1904|    724|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|    724|    return {it, string_type{range.begin(), it}};
 1906|  3.04k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEbT_:
  943|  5.01k|{
  944|  5.01k|    return is_range_eof(r.begin(), r.end());
  945|  5.01k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS8_ISE_E8sentinelILb1EEEEEbT_T0_:
  927|  5.01k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  5.01k|    {
  937|  5.01k|        return begin == end;
  938|  5.01k|    }
  939|  5.01k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSC_ISG_E8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SP_EENS1_20incrementable_traitsISP_E15difference_typeEE4typeERSP_ST_SQ_:
  282|    724|    {
  283|    724|        return n - fn::impl_i_n_s(i, n, bound);
  284|    724|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSC_ISG_E8sentinelILb1EEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SP_EENS1_20incrementable_traitsISP_E15difference_typeEE4typeERSP_ST_SQ_:
  226|    724|    {
  227|    724|        constexpr iter_difference_t<I> zero{0};
  228|    724|        iter_difference_t<I> counter{0};
  229|       |
  230|    724|        if (n < zero) {
  ------------------
  |  Branch (230:13): [True: 0, False: 724]
  ------------------
  231|      0|            do {
  232|      0|                --i;
  233|      0|                --counter;  // Yes, really
  234|      0|            } while (++n < zero && i != bound);
  ------------------
  |  Branch (234:22): [True: 0, False: 0]
  |  Branch (234:36): [True: 0, False: 0]
  ------------------
  235|      0|        }
  236|    724|        else {
  237|  2.81k|            while (n-- > zero && i != bound) {
  ------------------
  |  Branch (237:20): [True: 2.08k, False: 724]
  |  Branch (237:34): [True: 2.08k, False: 0]
  ------------------
  238|  2.08k|                ++i;
  239|  2.08k|                ++counter;
  240|  2.08k|            }
  241|    724|        }
  242|       |
  243|    724|        return counter;
  244|    724|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEcE8is_validEv:
 1877|  3.04k|    {
 1878|  3.04k|        return !codepoint.empty();
 1879|  3.04k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  1.97k|        : m_fptr([](storage fn,
  743|  1.97k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.97k|              cvref<T> obj = *get<T>(fn);
  745|  1.97k|              if constexpr (std::is_void_v<R>) {
  746|  1.97k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.97k|              }
  748|  1.97k|              else {
  749|  1.97k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.97k|              }
  751|  1.97k|          }),
  752|  1.97k|          m_storage(std::addressof(f))
  753|  1.97k|    {
  754|  1.97k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  3.04k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.04k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.04k|              else {
  749|  3.04k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.04k|              }
  751|  3.04k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS6_INS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  3.04k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  3.04k|        else if constexpr (std::is_object_v<T>) {
  688|  3.04k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.04k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2125|  3.04k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  3.04k|            return detail::is_cp_space(cp);
 2127|  3.04k|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  1.97k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.97k|        {
  662|  1.97k|        }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|  1.97k|{
  950|  1.97k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 174, False: 1.79k]
  |  |  ------------------
  ------------------
  951|    174|        return eof_error::eof;
  952|    174|    }
  953|  1.79k|    return eof_error::good;
  954|  1.97k|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE4baseEv:
 2401|  14.3k|    {
 2402|  14.3k|        return m_current;
 2403|  14.3k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE5countEv:
 2405|  14.7k|    {
 2406|  14.7k|        return m_count;
 2407|  14.7k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6025|  18.9k|    {
 6026|  18.9k|        const bool need_skipped_width =
 6027|  18.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 1.86k, False: 17.0k]
  |  Branch (6027:33): [True: 0, False: 17.0k]
  ------------------
 6028|  18.9k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|  18.9k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 188, False: 18.7k]
  ------------------
 6032|  18.9k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 1.99k, False: 16.7k]
  ------------------
 6033|  2.18k|            return skip_fill(rng, specs.precision, specs.fill,
 6034|  2.18k|                             need_skipped_width);
 6035|  2.18k|        }
 6036|  16.7k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 16.0k, False: 716]
  |  Branch (6036:56): [True: 1.63k, False: 14.3k]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|  1.63k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 1.63k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|  3.27k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|  1.63k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.63k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.63k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.63k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  1.63k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.63k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|  3.27k|                            make_eof_scan_error));
 6047|       |
 6048|  3.27k|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 1.03k, False: 604]
  ------------------
 6049|  1.03k|                return result_type{
 6050|  1.03k|                    it,
 6051|  1.03k|                    calculate_text_width(make_contiguous_buffer(
 6052|  1.03k|                                             ranges::subrange{rng.begin(), it})
 6053|  1.03k|                                             .view())};
 6054|  1.03k|            }
 6055|    604|            return result_type{it, 0};
 6056|  3.27k|        }
 6057|       |
 6058|  15.1k|        return result_type{rng.begin(), 0};
 6059|  16.7k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6067|  4.68k|    {
 6068|  4.68k|        const bool need_skipped_width =
 6069|  4.68k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 470, False: 4.21k]
  |  Branch (6069:33): [True: 1.10k, False: 3.11k]
  ------------------
 6070|  4.68k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|  4.68k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 310, False: 4.37k]
  ------------------
 6073|  4.68k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 322, False: 4.05k]
  ------------------
 6074|    632|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 248, False: 384]
  ------------------
 6075|    632|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 92, False: 156]
  ------------------
 6076|     92|                return result_type{rng.begin(), 0};
 6077|     92|            }
 6078|    540|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|    540|                             specs.fill, need_skipped_width);
 6080|    632|        }
 6081|  4.05k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 3.93k, False: 122]
  ------------------
 6082|  4.05k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 3.62k, False: 312]
  ------------------
 6083|  4.05k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 226, False: 3.39k]
  |  Branch (6083:35): [True: 184, False: 42]
  ------------------
 6084|  3.62k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 590, False: 2.84k]
  ------------------
 6085|  3.43k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 490, False: 100]
  ------------------
 6086|    674|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 490, False: 184]
  ------------------
 6087|    490|                const auto initial_width =
 6088|    490|                    specs.precision - prefix_width - value_width;
 6089|    490|                auto max_width_view = take_width(rng, initial_width);
 6090|    490|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|    490|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    490|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    490|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    490|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 490]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    490|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    490|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|    490|                                  .transform_error(make_eof_scan_error));
 6092|    490|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|    490|            }
 6094|    368|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|    184|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    184|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    184|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    184|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 184]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    184|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    184|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|    368|                            make_eof_scan_error));
 6096|       |
 6097|    368|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 184, False: 0]
  ------------------
 6098|    184|                return result_type{
 6099|    184|                    it,
 6100|    184|                    calculate_text_width(make_contiguous_buffer(
 6101|    184|                                             ranges::subrange{rng.begin(), it})
 6102|    184|                                             .view())};
 6103|    184|            }
 6104|      0|            return result_type{it, 0};
 6105|    368|        }
 6106|  3.38k|        return result_type{rng.begin(), 0};
 6107|  4.05k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
 6181|  6.76k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  6.76k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  6.76k|            auto rd = make_reader<T, char_type>();
 6187|  6.76k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.17k, False: 588]
  |  |  ------------------
  ------------------
 6188|  6.17k|                return unexpected(e);
 6189|  6.17k|            }
 6190|       |
 6191|    588|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  6.76k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|    588|    {
 6113|    588|        const bool need_skipped_width =
 6114|    588|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 198, False: 390]
  |  Branch (6114:33): [True: 298, False: 92]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|    588|        auto it = rng.begin();
 6118|    588|        std::ptrdiff_t prefix_width = 0;
 6119|    588|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 306, False: 282]
  ------------------
 6120|    306|            auto max_width_view = take_width(rng, specs.precision);
 6121|    306|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    306|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    306|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    306|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    306|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 24, False: 282]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     24|    }                                                  \
  |  |  |  | 3667|    306|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    282|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    282|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    282|            it = prefix_result.first.base();
 6124|    282|            prefix_width = prefix_result.second;
 6125|    282|        }
 6126|    282|        else {
 6127|    282|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    282|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    282|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    282|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    282|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 282]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    282|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    282|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|    282|            std::tie(it, prefix_width) = prefix_result;
 6129|    282|        }
 6130|    564|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|    564|        std::ptrdiff_t value_width = 0;
 6134|    564|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 282, False: 282]
  ------------------
 6135|    282|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 6, False: 276]
  ------------------
 6136|      6|                return unexpected_scan_error(
 6137|      6|                    scan_error::invalid_scanned_value,
 6138|      6|                    "Too many fill characters before value, "
 6139|      6|                    "precision exceeded before reading value");
 6140|      6|            }
 6141|       |
 6142|    276|            const auto initial_width = specs.precision - prefix_width;
 6143|    276|            auto max_width_view =
 6144|    276|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    276|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    276|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    276|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    276|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    276|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 276, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    276|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    276|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    276|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    276|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    276|    }                                                  \
  |  |  |  | 3667|    276|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|    282|        else {
 6150|    282|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    282|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    282|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    282|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 282, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    282|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    282|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    282|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    282|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    282|    }                                                  \
  |  | 3667|    282|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    282|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|      0|                                             specs, value, loc));
 6152|       |
 6153|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 0]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|      0|        }
 6159|       |
 6160|       |        // Read postfix
 6161|      0|        std::ptrdiff_t postfix_width = 0;
 6162|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 0, False: 0]
  ------------------
 6163|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6166|      0|                                 value_width));
 6167|      0|            std::tie(it, postfix_width) = postfix_result;
 6168|      0|        }
 6169|       |
 6170|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|      0|                                                 value_width, postfix_width);
 6172|      0|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 0]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|      0|        return it;
 6177|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
 6181|  6.76k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  6.76k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  6.76k|            auto rd = make_reader<T, char_type>();
 6187|  6.76k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.17k, False: 588]
  |  |  ------------------
  ------------------
 6188|  6.17k|                return unexpected(e);
 6189|  6.17k|            }
 6190|       |
 6191|    588|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  6.76k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|    588|    {
 6113|    588|        const bool need_skipped_width =
 6114|    588|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 198, False: 390]
  |  Branch (6114:33): [True: 298, False: 92]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|    588|        auto it = rng.begin();
 6118|    588|        std::ptrdiff_t prefix_width = 0;
 6119|    588|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 306, False: 282]
  ------------------
 6120|    306|            auto max_width_view = take_width(rng, specs.precision);
 6121|    306|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    306|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    306|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    306|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    306|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 24, False: 282]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     24|    }                                                  \
  |  |  |  | 3667|    306|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    282|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    282|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    282|            it = prefix_result.first.base();
 6124|    282|            prefix_width = prefix_result.second;
 6125|    282|        }
 6126|    282|        else {
 6127|    282|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    282|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    282|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    282|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    282|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 282]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    282|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    282|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|    282|            std::tie(it, prefix_width) = prefix_result;
 6129|    282|        }
 6130|    564|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|    564|        std::ptrdiff_t value_width = 0;
 6134|    564|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 282, False: 282]
  ------------------
 6135|    282|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 6, False: 276]
  ------------------
 6136|      6|                return unexpected_scan_error(
 6137|      6|                    scan_error::invalid_scanned_value,
 6138|      6|                    "Too many fill characters before value, "
 6139|      6|                    "precision exceeded before reading value");
 6140|      6|            }
 6141|       |
 6142|    276|            const auto initial_width = specs.precision - prefix_width;
 6143|    276|            auto max_width_view =
 6144|    276|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    276|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    276|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    276|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    276|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    276|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 276, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    276|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    276|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    276|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    276|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    276|    }                                                  \
  |  |  |  | 3667|    276|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|    282|        else {
 6150|    282|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    282|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    282|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    282|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 282, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    282|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    282|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    282|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    282|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    282|    }                                                  \
  |  | 3667|    282|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    282|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|      0|                                             specs, value, loc));
 6152|       |
 6153|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 0]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|      0|        }
 6159|       |
 6160|       |        // Read postfix
 6161|      0|        std::ptrdiff_t postfix_width = 0;
 6162|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 0, False: 0]
  ------------------
 6163|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6166|      0|                                 value_width));
 6167|      0|            std::tie(it, postfix_width) = postfix_result;
 6168|      0|        }
 6169|       |
 6170|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|      0|                                                 value_width, postfix_width);
 6172|      0|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 0]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|      0|        return it;
 6177|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIPvEENS0_13scan_expectedIPKcEERT_:
 6181|  6.72k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  6.72k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  6.72k|            auto rd = make_reader<T, char_type>();
 6187|  6.72k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.21k, False: 508]
  |  |  ------------------
  ------------------
 6188|  6.21k|                return unexpected(e);
 6189|  6.21k|            }
 6190|       |
 6191|    508|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  6.72k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE11check_specsERKNS0_6detail12format_specsE:
 5741|  6.72k|    {
 5742|  6.72k|        reader_error_handler eh{};
 5743|  6.72k|        detail::check_pointer_type_specs(specs, eh);
 5744|  6.72k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  6.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.21k, False: 508]
  |  |  ------------------
  ------------------
 5745|  6.21k|            return {scan_error::invalid_format_string, eh.m_msg};
 5746|  6.21k|        }
 5747|    508|        return {};
 5748|  6.72k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_23reader_impl_for_voidptrIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6112|    508|    {
 6113|    508|        const bool need_skipped_width =
 6114|    508|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 184, False: 324]
  |  Branch (6114:33): [True: 256, False: 68]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|    508|        auto it = rng.begin();
 6118|    508|        std::ptrdiff_t prefix_width = 0;
 6119|    508|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 264, False: 244]
  ------------------
 6120|    264|            auto max_width_view = take_width(rng, specs.precision);
 6121|    264|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    264|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    264|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    264|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16, False: 248]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     16|    }                                                  \
  |  |  |  | 3667|    264|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    248|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    248|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    248|            it = prefix_result.first.base();
 6124|    248|            prefix_width = prefix_result.second;
 6125|    248|        }
 6126|    244|        else {
 6127|    244|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    244|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    244|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    244|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    244|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 244]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    244|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    244|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|    244|            std::tie(it, prefix_width) = prefix_result;
 6129|    244|        }
 6130|    492|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|    492|        std::ptrdiff_t value_width = 0;
 6134|    492|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 248, False: 244]
  ------------------
 6135|    248|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 4, False: 244]
  ------------------
 6136|      4|                return unexpected_scan_error(
 6137|      4|                    scan_error::invalid_scanned_value,
 6138|      4|                    "Too many fill characters before value, "
 6139|      4|                    "precision exceeded before reading value");
 6140|      4|            }
 6141|       |
 6142|    244|            const auto initial_width = specs.precision - prefix_width;
 6143|    244|            auto max_width_view =
 6144|    244|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    244|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    244|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    244|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    244|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    244|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 244, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    244|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    244|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    244|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    244|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    244|    }                                                  \
  |  |  |  | 3667|    244|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|    244|        else {
 6150|    244|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    244|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    244|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    244|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 244, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    244|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    244|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    244|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    244|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    244|    }                                                  \
  |  | 3667|    244|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    244|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|      0|                                             specs, value, loc));
 6152|       |
 6153|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 0]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|      0|        }
 6159|       |
 6160|       |        // Read postfix
 6161|      0|        std::ptrdiff_t postfix_width = 0;
 6162|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 0, False: 0]
  ------------------
 6163|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6166|      0|                                 value_width));
 6167|      0|            std::tie(it, postfix_width) = postfix_result;
 6168|      0|        }
 6169|       |
 6170|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|      0|                                                 value_width, postfix_width);
 6172|      0|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 0]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|      0|        return it;
 6177|      0|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5770|    244|    {
 5771|    244|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    244|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5772|    244|        return read_default(range, value, loc);
 5773|    244|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5753|    244|    {
 5754|    244|        detail::format_specs specs{};
 5755|    244|        specs.type = detail::presentation_type::int_hex;
 5756|       |
 5757|    244|        std::uintptr_t intvalue{};
 5758|    244|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3668|    244|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    244|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    244|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    244|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 244, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    244|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    244|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    244|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    244|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    244|    }                                                  \
  |  |  |  | 3667|    244|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5759|      0|                                                                intvalue, loc));
 5760|      0|        value = reinterpret_cast<void*>(intvalue);
 5761|      0|        return result;
 5762|    244|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5770|    244|    {
 5771|    244|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    244|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5772|    244|        return read_default(range, value, loc);
 5773|    244|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIbEENS0_13scan_expectedIPKcEERT_:
 6181|  6.76k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  6.76k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  6.76k|            auto rd = make_reader<T, char_type>();
 6187|  6.76k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.95k, False: 816]
  |  |  ------------------
  ------------------
 6188|  5.95k|                return unexpected(e);
 6189|  5.95k|            }
 6190|       |
 6191|    816|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  6.76k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3028|  6.76k|    {
 3029|  6.76k|        reader_error_handler eh{};
 3030|  6.76k|        get_derived().check_specs_impl(specs, eh);
 3031|  6.76k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  6.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.95k, False: 816]
  |  |  ------------------
  ------------------
 3032|  5.95k|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|  5.95k|        }
 3034|    816|        return {};
 3035|  6.76k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11get_derivedEv:
 3039|  6.76k|    {
 3040|  6.76k|        return static_cast<Derived&>(*this);
 3041|  6.76k|    }
_ZN3scn2v34impl20reader_impl_for_boolIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5485|  6.76k|    {
 5486|  6.76k|        detail::check_bool_type_specs(specs, eh);
 5487|  6.76k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_boolIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|    816|    {
 6113|    816|        const bool need_skipped_width =
 6114|    816|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 212, False: 604]
  |  Branch (6114:33): [True: 386, False: 218]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|    816|        auto it = rng.begin();
 6118|    816|        std::ptrdiff_t prefix_width = 0;
 6119|    816|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 396, False: 420]
  ------------------
 6120|    396|            auto max_width_view = take_width(rng, specs.precision);
 6121|    396|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    396|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    396|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    396|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    396|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 28, False: 368]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     28|    }                                                  \
  |  |  |  | 3667|    396|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    368|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    368|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    368|            it = prefix_result.first.base();
 6124|    368|            prefix_width = prefix_result.second;
 6125|    368|        }
 6126|    420|        else {
 6127|    420|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    420|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    420|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    420|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    420|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 420]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    420|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    420|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|    420|            std::tie(it, prefix_width) = prefix_result;
 6129|    420|        }
 6130|    788|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|    788|        std::ptrdiff_t value_width = 0;
 6134|    788|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 368, False: 420]
  ------------------
 6135|    368|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 6, False: 362]
  ------------------
 6136|      6|                return unexpected_scan_error(
 6137|      6|                    scan_error::invalid_scanned_value,
 6138|      6|                    "Too many fill characters before value, "
 6139|      6|                    "precision exceeded before reading value");
 6140|      6|            }
 6141|       |
 6142|    362|            const auto initial_width = specs.precision - prefix_width;
 6143|    362|            auto max_width_view =
 6144|    362|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    362|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    362|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    362|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    362|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    362|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 362, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    362|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    362|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    362|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    362|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    362|    }                                                  \
  |  |  |  | 3667|    362|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|    420|        else {
 6150|    420|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    420|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    420|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    420|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 420, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    420|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    420|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    420|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    420|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    420|    }                                                  \
  |  | 3667|    420|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    420|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|      0|                                             specs, value, loc));
 6152|       |
 6153|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 0]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|      0|        }
 6159|       |
 6160|       |        // Read postfix
 6161|      0|        std::ptrdiff_t postfix_width = 0;
 6162|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 0, False: 0]
  ------------------
 6163|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6166|      0|                                 value_width));
 6167|      0|            std::tie(it, postfix_width) = postfix_result;
 6168|      0|        }
 6169|       |
 6170|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|      0|                                                 value_width, postfix_width);
 6172|      0|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 0]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|      0|        return it;
 6177|      0|    }
_ZNK3scn2v34impl20reader_impl_for_boolIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5504|    362|    {
 5505|    362|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5506|       |
 5507|    362|#if !SCN_DISABLE_LOCALE
 5508|    362|        if (specs.localized) {
  ------------------
  |  Branch (5508:13): [True: 12, False: 350]
  ------------------
 5509|     12|            return rd.read_localized(range, loc, value);
 5510|     12|        }
 5511|    350|#endif
 5512|       |
 5513|    350|        return rd.read_classic(range, value);
 5514|    362|    }
_ZN3scn2v34impl20reader_impl_for_boolIcE11get_optionsERKNS0_6detail12format_specsE:
 5517|    782|    {
 5518|    782|        SCN_GCC_COMPAT_PUSH
 5519|    782|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5520|       |
 5521|    782|        switch (specs.type) {
 5522|    222|            case detail::presentation_type::string:
  ------------------
  |  Branch (5522:13): [True: 222, False: 560]
  ------------------
 5523|    222|                return bool_reader_base::allow_text;
 5524|       |
 5525|     12|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5525:13): [True: 12, False: 770]
  ------------------
 5526|     20|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5526:13): [True: 8, False: 774]
  ------------------
 5527|     26|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5527:13): [True: 6, False: 776]
  ------------------
 5528|     38|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5528:13): [True: 12, False: 770]
  ------------------
 5529|     60|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5529:13): [True: 22, False: 760]
  ------------------
 5530|     64|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5530:13): [True: 4, False: 778]
  ------------------
 5531|     64|                return bool_reader_base::allow_numeric;
 5532|       |
 5533|    496|            default:
  ------------------
  |  Branch (5533:13): [True: 496, False: 286]
  ------------------
 5534|    496|                return bool_reader_base::allow_text |
 5535|    496|                       bool_reader_base::allow_numeric;
 5536|    782|        }
 5537|       |
 5538|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5539|    782|    }
_ZNK3scn2v34impl11bool_readerIcE14read_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refERb:
 5416|     12|    {
 5417|     12|        scan_error err{scan_error::invalid_scanned_value,
 5418|     12|                       "Failed to read boolean"};
 5419|       |
 5420|     12|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5420:13): [True: 10, False: 2]
  ------------------
 5421|     10|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5421:22): [True: 0, False: 10]
  ------------------
 5422|      0|                return *r;
 5423|      0|            }
 5424|     10|            else {
 5425|     10|                err = r.error();
 5426|     10|            }
 5427|     10|        }
 5428|       |
 5429|     12|        if (m_options & allow_text) {
  ------------------
  |  Branch (5429:13): [True: 10, False: 2]
  ------------------
 5430|     10|            auto stdloc = loc.get<std::locale>();
 5431|     10|            const auto& numpunct =
 5432|     10|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5433|     10|            const auto truename = numpunct.truename();
 5434|     10|            const auto falsename = numpunct.falsename();
 5435|       |
 5436|     10|            if (auto r =
  ------------------
  |  Branch (5436:22): [True: 0, False: 10]
  ------------------
 5437|     10|                    read_textual_custom(range, value, truename, falsename)) {
 5438|      0|                return *r;
 5439|      0|            }
 5440|     10|            else {
 5441|     10|                err = r.error();
 5442|     10|            }
 5443|     10|        }
 5444|       |
 5445|     12|        return unexpected(err);
 5446|     12|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5372|    276|    {
 5373|    276|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5373:18): [True: 0, False: 276]
  ------------------
 5374|      0|            value = false;
 5375|      0|            return *r;
 5376|      0|        }
 5377|    276|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5377:18): [True: 0, False: 276]
  ------------------
 5378|      0|            value = true;
 5379|      0|            return *r;
 5380|      0|        }
 5381|       |
 5382|    276|        return unexpected_scan_error(
 5383|    276|            scan_error::invalid_scanned_value,
 5384|    276|            "Failed to read numeric boolean value: No match");
 5385|    276|    }
_ZN3scn2v34impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2134|    552|{
 2135|    552|    auto it = read_code_unit(range);
 2136|    552|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    552|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 552]
  |  |  ------------------
  ------------------
 2137|      0|        return unexpected(make_eof_parse_error(it.error()));
 2138|      0|    }
 2139|       |
 2140|    552|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|    552|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 552, False: 0]
  |  |  ------------------
  ------------------
 2141|    552|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|    552|        return unexpected(parse_error::error);
 2143|    552|    }
 2144|       |
 2145|      0|    return *it;
 2146|    552|}
_ZNK3scn2v34impl11bool_readerIcE19read_textual_customINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RbNSF_17basic_string_viewIcNSF_11char_traitsIcEEEESR_:
 5456|     10|    {
 5457|     10|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5458|     10|        const auto shorter = std::pair{
 5459|     10|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5459:13): [True: 10, False: 0]
  ------------------
 5460|     10|        const auto longer = std::pair{
 5461|     10|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5461:13): [True: 0, False: 10]
  ------------------
 5462|       |
 5463|     10|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5463:18): [True: 0, False: 10]
  ------------------
 5464|      0|            value = shorter.second;
 5465|      0|            return *r;
 5466|      0|        }
 5467|     10|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5467:18): [True: 0, False: 10]
  ------------------
 5468|      0|            value = longer.second;
 5469|      0|            return *r;
 5470|      0|        }
 5471|       |
 5472|     10|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5473|     10|                                     "read_textual: No match");
 5474|     10|    }
_ZN3scn2v34impl20read_matching_stringINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewINDTcl4implISF_EEE4typeENSD_11char_traitsISN_EEEE:
 2167|     20|{
 2168|     20|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 10]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     10|    }                                                  \
  |  |  |  | 3667|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2169|     10|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2170|     10|                    .transform_error(make_eof_parse_error));
 2171|       |
 2172|     10|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2173|     10|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10, False: 0]
  |  |  ------------------
  ------------------
 2174|     10|        return unexpected(parse_error::error);
 2175|     10|    }
 2176|      0|    return it;
 2177|     10|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1844|    672|{
 1845|    672|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    672|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    672|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1846|       |
 1847|       |    if constexpr (ranges::sized_range<Range>) {
 1848|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1849|       |        if (sz < count) {
 1850|       |            return unexpected(eof_error::eof);
 1851|       |        }
 1852|       |
 1853|       |        return ranges::next(range.begin(), count);
 1854|       |    }
 1855|    672|    else {
 1856|    672|        auto it = range.begin();
 1857|    672|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1857:13): [True: 0, False: 672]
  ------------------
 1858|      0|            return ranges::next(it, count);
 1859|      0|        }
 1860|       |
 1861|  3.35k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1861:36): [True: 2.81k, False: 538]
  ------------------
 1862|  2.81k|            if (it == range.end()) {
  ------------------
  |  Branch (1862:17): [True: 134, False: 2.68k]
  ------------------
 1863|    134|                return unexpected(eof_error::eof);
 1864|    134|            }
 1865|  2.81k|        }
 1866|       |
 1867|    538|        return it;
 1868|    672|    }
 1869|    672|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEmT_:
 1094|    672|{
 1095|       |    if constexpr (ranges::sized_range<Range>) {
 1096|       |        return r.size();
 1097|       |    }
 1098|       |    else if constexpr (std::is_same_v<
 1099|       |                           ranges::const_iterator_t<Range>,
 1100|       |                           typename detail::basic_scan_buffer<
 1101|       |                               detail::char_t<Range>>::forward_iterator>) {
 1102|       |        if constexpr (ranges::common_range<Range>) {
 1103|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|       |        }
 1105|       |        else {
 1106|       |            if (r.begin().stores_parent()) {
 1107|       |                return static_cast<size_t>(
 1108|       |                    r.begin().parent()->chars_available() -
 1109|       |                    r.begin().position());
 1110|       |            }
 1111|       |            return r.begin().contiguous_segment().size();
 1112|       |        }
 1113|       |    }
 1114|    672|    else {
 1115|    672|        return 0;
 1116|    672|    }
 1117|    672|}
_ZNK3scn2v34impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5343|    350|    {
 5344|    350|        scan_error err{scan_error::invalid_scanned_value,
 5345|    350|                       "Failed to read boolean"};
 5346|       |
 5347|    350|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5347:13): [True: 266, False: 84]
  ------------------
 5348|    266|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5348:22): [True: 0, False: 266]
  ------------------
 5349|      0|                return *r;
 5350|      0|            }
 5351|    266|            else {
 5352|    266|                err = r.error();
 5353|    266|            }
 5354|    266|        }
 5355|       |
 5356|    350|        if (m_options & allow_text) {
  ------------------
  |  Branch (5356:13): [True: 326, False: 24]
  ------------------
 5357|    326|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5357:22): [True: 0, False: 326]
  ------------------
 5358|      0|                return *r;
 5359|      0|            }
 5360|    326|            else {
 5361|    326|                err = r.error();
 5362|    326|            }
 5363|    326|        }
 5364|       |
 5365|    350|        return unexpected(err);
 5366|    350|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5390|    326|    {
 5391|    326|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5391:18): [True: 0, False: 326]
  ------------------
 5392|      0|            value = true;
 5393|      0|            return *r;
 5394|      0|        }
 5395|    326|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5395:18): [True: 0, False: 326]
  ------------------
 5396|      0|            value = false;
 5397|      0|            return *r;
 5398|      0|        }
 5399|       |
 5400|    326|        return unexpected_scan_error(
 5401|    326|            scan_error::invalid_scanned_value,
 5402|    326|            "Failed to read textual boolean value: No match");
 5403|    326|    }
_ZN3scn2v34impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2182|    652|{
 2183|    652|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|    652|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    652|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    652|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    652|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 124, False: 528]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    124|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    124|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    124|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    124|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    124|    }                                                  \
  |  |  |  | 3667|    652|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    528|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2184|    528|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2185|    528|                    .transform_error(make_eof_parse_error));
 2186|       |
 2187|    528|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2188|    528|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2189|    528|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|    528|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 528, False: 0]
  |  |  ------------------
  ------------------
 2190|    528|            return unexpected(parse_error::error);
 2191|    528|        }
 2192|      0|        return it;
 2193|       |    }
 2194|       |    else {
 2195|       |        auto range_it = range.begin();
 2196|       |        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2197|       |            if (SCN_UNLIKELY(*range_it !=
 2198|       |                             static_cast<detail::char_t<Range>>(str[i]))) {
 2199|       |                return unexpected(parse_error::error);
 2200|       |            }
 2201|       |        }
 2202|       |        return it;
 2203|       |    }
 2204|    528|}
_ZNK3scn2v34impl20reader_impl_for_boolIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5504|    420|    {
 5505|    420|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5506|       |
 5507|    420|#if !SCN_DISABLE_LOCALE
 5508|    420|        if (specs.localized) {
  ------------------
  |  Branch (5508:13): [True: 30, False: 390]
  ------------------
 5509|     30|            return rd.read_localized(range, loc, value);
 5510|     30|        }
 5511|    390|#endif
 5512|       |
 5513|    390|        return rd.read_classic(range, value);
 5514|    420|    }
_ZNK3scn2v34impl11bool_readerIcE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5416|     30|    {
 5417|     30|        scan_error err{scan_error::invalid_scanned_value,
 5418|     30|                       "Failed to read boolean"};
 5419|       |
 5420|     30|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5420:13): [True: 22, False: 8]
  ------------------
 5421|     22|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5421:22): [True: 0, False: 22]
  ------------------
 5422|      0|                return *r;
 5423|      0|            }
 5424|     22|            else {
 5425|     22|                err = r.error();
 5426|     22|            }
 5427|     22|        }
 5428|       |
 5429|     30|        if (m_options & allow_text) {
  ------------------
  |  Branch (5429:13): [True: 14, False: 16]
  ------------------
 5430|     14|            auto stdloc = loc.get<std::locale>();
 5431|     14|            const auto& numpunct =
 5432|     14|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5433|     14|            const auto truename = numpunct.truename();
 5434|     14|            const auto falsename = numpunct.falsename();
 5435|       |
 5436|     14|            if (auto r =
  ------------------
  |  Branch (5436:22): [True: 0, False: 14]
  ------------------
 5437|     14|                    read_textual_custom(range, value, truename, falsename)) {
 5438|      0|                return *r;
 5439|      0|            }
 5440|     14|            else {
 5441|     14|                err = r.error();
 5442|     14|            }
 5443|     14|        }
 5444|       |
 5445|     30|        return unexpected(err);
 5446|     30|    }
_ZNK3scn2v34impl11bool_readerIcE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIcNSD_11char_traitsIcEEEESP_:
 5456|     14|    {
 5457|     14|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5458|     14|        const auto shorter = std::pair{
 5459|     14|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5459:13): [True: 14, False: 0]
  ------------------
 5460|     14|        const auto longer = std::pair{
 5461|     14|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5461:13): [True: 0, False: 14]
  ------------------
 5462|       |
 5463|     14|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5463:18): [True: 0, False: 14]
  ------------------
 5464|      0|            value = shorter.second;
 5465|      0|            return *r;
 5466|      0|        }
 5467|     14|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5467:18): [True: 0, False: 14]
  ------------------
 5468|      0|            value = longer.second;
 5469|      0|            return *r;
 5470|      0|        }
 5471|       |
 5472|     14|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5473|     14|                                     "read_textual: No match");
 5474|     14|    }
_ZN3scn2v34impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2167|     28|{
 2168|     28|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|     28|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     28|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     28|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     28|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2, False: 26]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      2|    }                                                  \
  |  |  |  | 3667|     28|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     26|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2169|     26|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2170|     26|                    .transform_error(make_eof_parse_error));
 2171|       |
 2172|     26|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2173|     26|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26, False: 0]
  |  |  ------------------
  ------------------
 2174|     26|        return unexpected(parse_error::error);
 2175|     26|    }
 2176|      0|    return it;
 2177|     26|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIcEENS0_13scan_expectedIPKcEERT_:
 6181|  6.72k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  6.72k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  6.72k|            auto rd = make_reader<T, char_type>();
 6187|  6.72k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.16k, False: 558]
  |  |  ------------------
  ------------------
 6188|  6.16k|                return unexpected(e);
 6189|  6.16k|            }
 6190|       |
 6191|    558|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  6.72k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_charIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|    558|    {
 6113|    558|        const bool need_skipped_width =
 6114|    558|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 186, False: 372]
  |  Branch (6114:33): [True: 288, False: 84]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|    558|        auto it = rng.begin();
 6118|    558|        std::ptrdiff_t prefix_width = 0;
 6119|    558|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 296, False: 262]
  ------------------
 6120|    296|            auto max_width_view = take_width(rng, specs.precision);
 6121|    296|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    296|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    296|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    296|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    296|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 296]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    296|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    296|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    296|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    296|            it = prefix_result.first.base();
 6124|    296|            prefix_width = prefix_result.second;
 6125|    296|        }
 6126|    262|        else {
 6127|    262|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    262|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    262|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    262|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    262|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 262]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    262|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    262|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|    262|            std::tie(it, prefix_width) = prefix_result;
 6129|    262|        }
 6130|    558|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|    558|        std::ptrdiff_t value_width = 0;
 6134|    558|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 296, False: 262]
  ------------------
 6135|    296|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 6, False: 290]
  ------------------
 6136|      6|                return unexpected_scan_error(
 6137|      6|                    scan_error::invalid_scanned_value,
 6138|      6|                    "Too many fill characters before value, "
 6139|      6|                    "precision exceeded before reading value");
 6140|      6|            }
 6141|       |
 6142|    290|            const auto initial_width = specs.precision - prefix_width;
 6143|    290|            auto max_width_view =
 6144|    290|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    290|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    290|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    290|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    290|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    290|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32, False: 258]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     32|    }                                                  \
  |  |  |  | 3667|    290|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    258|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|    258|            it = w_it.base();
 6147|    258|            value_width = initial_width - w_it.count();
 6148|    258|        }
 6149|    262|        else {
 6150|    262|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    262|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    262|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    262|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 22, False: 240]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|     22|    }                                                  \
  |  | 3667|    262|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    262|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    240|                                             specs, value, loc));
 6152|       |
 6153|    240|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 174, False: 66]
  ------------------
 6154|    174|                value_width = calculate_text_width(
 6155|    174|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|    174|                        .view());
 6157|    174|            }
 6158|    240|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    498|        std::ptrdiff_t postfix_width = 0;
 6162|    498|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 498, False: 0]
  ------------------
 6163|    498|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    498|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    498|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    498|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    498|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 498]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    498|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    498|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    498|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    498|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    498|                                 value_width));
 6167|    498|            std::tie(it, postfix_width) = postfix_result;
 6168|    498|        }
 6169|       |
 6170|    498|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    498|                                                 value_width, postfix_width);
 6172|    498|            !e) {
  ------------------
  |  Branch (6172:13): [True: 154, False: 344]
  ------------------
 6173|    154|            return unexpected(e);
 6174|    154|        }
 6175|       |
 6176|    344|        return it;
 6177|    498|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 6181|  6.76k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  6.76k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  6.76k|            auto rd = make_reader<T, char_type>();
 6187|  6.76k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.18k, False: 580]
  |  |  ------------------
  ------------------
 6188|  6.18k|                return unexpected(e);
 6189|  6.18k|            }
 6190|       |
 6191|    580|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  6.76k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|    580|    {
 6113|    580|        const bool need_skipped_width =
 6114|    580|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 192, False: 388]
  |  Branch (6114:33): [True: 292, False: 96]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|    580|        auto it = rng.begin();
 6118|    580|        std::ptrdiff_t prefix_width = 0;
 6119|    580|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 302, False: 278]
  ------------------
 6120|    302|            auto max_width_view = take_width(rng, specs.precision);
 6121|    302|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    302|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    302|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    302|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    302|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 22, False: 280]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     22|    }                                                  \
  |  |  |  | 3667|    302|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    280|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    280|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    280|            it = prefix_result.first.base();
 6124|    280|            prefix_width = prefix_result.second;
 6125|    280|        }
 6126|    278|        else {
 6127|    278|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    278|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    278|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    278|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    278|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 278]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    278|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    278|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|    278|            std::tie(it, prefix_width) = prefix_result;
 6129|    278|        }
 6130|    558|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|    558|        std::ptrdiff_t value_width = 0;
 6134|    558|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 280, False: 278]
  ------------------
 6135|    280|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 8, False: 272]
  ------------------
 6136|      8|                return unexpected_scan_error(
 6137|      8|                    scan_error::invalid_scanned_value,
 6138|      8|                    "Too many fill characters before value, "
 6139|      8|                    "precision exceeded before reading value");
 6140|      8|            }
 6141|       |
 6142|    272|            const auto initial_width = specs.precision - prefix_width;
 6143|    272|            auto max_width_view =
 6144|    272|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    272|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    272|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    272|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    272|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    272|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 272, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    272|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    272|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    272|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    272|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    272|    }                                                  \
  |  |  |  | 3667|    272|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|    278|        else {
 6150|    278|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    278|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    278|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    278|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 278, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    278|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    278|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    278|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    278|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    278|    }                                                  \
  |  | 3667|    278|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    278|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|      0|                                             specs, value, loc));
 6152|       |
 6153|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 0]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|      0|        }
 6159|       |
 6160|       |        // Read postfix
 6161|      0|        std::ptrdiff_t postfix_width = 0;
 6162|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 0, False: 0]
  ------------------
 6163|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6166|      0|                                 value_width));
 6167|      0|            std::tie(it, postfix_width) = postfix_result;
 6168|      0|        }
 6169|       |
 6170|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|      0|                                                 value_width, postfix_width);
 6172|      0|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 0]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|      0|        return it;
 6177|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6181|  6.72k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  6.72k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  6.72k|            auto rd = make_reader<T, char_type>();
 6187|  6.72k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 126, False: 6.59k]
  |  |  ------------------
  ------------------
 6188|    126|                return unexpected(e);
 6189|    126|            }
 6190|       |
 6191|  6.59k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  6.72k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6112|  6.59k|    {
 6113|  6.59k|        const bool need_skipped_width =
 6114|  6.59k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 266, False: 6.33k]
  |  Branch (6114:33): [True: 860, False: 5.47k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  6.59k|        auto it = rng.begin();
 6118|  6.59k|        std::ptrdiff_t prefix_width = 0;
 6119|  6.59k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 878, False: 5.71k]
  ------------------
 6120|    878|            auto max_width_view = take_width(rng, specs.precision);
 6121|    878|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    878|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    878|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    878|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    878|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 858]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     20|    }                                                  \
  |  |  |  | 3667|    878|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    858|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    858|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    858|            it = prefix_result.first.base();
 6124|    858|            prefix_width = prefix_result.second;
 6125|    858|        }
 6126|  5.71k|        else {
 6127|  5.71k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  5.71k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  5.71k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  5.71k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 5.71k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  5.71k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.71k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  5.71k|            std::tie(it, prefix_width) = prefix_result;
 6129|  5.71k|        }
 6130|  6.57k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  6.57k|        std::ptrdiff_t value_width = 0;
 6134|  6.57k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 858, False: 5.71k]
  ------------------
 6135|    858|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 6, False: 852]
  ------------------
 6136|      6|                return unexpected_scan_error(
 6137|      6|                    scan_error::invalid_scanned_value,
 6138|      6|                    "Too many fill characters before value, "
 6139|      6|                    "precision exceeded before reading value");
 6140|      6|            }
 6141|       |
 6142|    852|            const auto initial_width = specs.precision - prefix_width;
 6143|    852|            auto max_width_view =
 6144|    852|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    852|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    852|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    852|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    852|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    852|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 466, False: 386]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    466|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    466|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    466|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    466|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    466|    }                                                  \
  |  |  |  | 3667|    852|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    386|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|    386|            it = w_it.base();
 6147|    386|            value_width = initial_width - w_it.count();
 6148|    386|        }
 6149|  5.71k|        else {
 6150|  5.71k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  5.71k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  5.71k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  5.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 4.29k, False: 1.42k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  4.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  4.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  4.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  4.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  4.29k|    }                                                  \
  |  | 3667|  5.71k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  5.71k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  1.42k|                                             specs, value, loc));
 6152|       |
 6153|  1.42k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 210, False: 1.21k]
  ------------------
 6154|    210|                value_width = calculate_text_width(
 6155|    210|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|    210|                        .view());
 6157|    210|            }
 6158|  1.42k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  1.80k|        std::ptrdiff_t postfix_width = 0;
 6162|  1.80k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 1.39k, False: 410]
  ------------------
 6163|  1.39k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  1.39k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.39k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.39k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.39k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  1.39k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.39k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  1.39k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  1.39k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  1.39k|                                 value_width));
 6167|  1.39k|            std::tie(it, postfix_width) = postfix_result;
 6168|  1.39k|        }
 6169|       |
 6170|  1.80k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  1.80k|                                                 value_width, postfix_width);
 6172|  1.80k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 108, False: 1.69k]
  ------------------
 6173|    108|            return unexpected(e);
 6174|    108|        }
 6175|       |
 6176|  1.69k|        return it;
 6177|  1.80k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6181|  6.72k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  6.72k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  6.72k|            auto rd = make_reader<T, char_type>();
 6187|  6.72k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 126, False: 6.59k]
  |  |  ------------------
  ------------------
 6188|    126|                return unexpected(e);
 6189|    126|            }
 6190|       |
 6191|  6.59k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  6.72k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6112|  6.59k|    {
 6113|  6.59k|        const bool need_skipped_width =
 6114|  6.59k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 266, False: 6.33k]
  |  Branch (6114:33): [True: 860, False: 5.47k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  6.59k|        auto it = rng.begin();
 6118|  6.59k|        std::ptrdiff_t prefix_width = 0;
 6119|  6.59k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 878, False: 5.71k]
  ------------------
 6120|    878|            auto max_width_view = take_width(rng, specs.precision);
 6121|    878|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    878|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    878|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    878|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    878|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 858]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     20|    }                                                  \
  |  |  |  | 3667|    878|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    858|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    858|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    858|            it = prefix_result.first.base();
 6124|    858|            prefix_width = prefix_result.second;
 6125|    858|        }
 6126|  5.71k|        else {
 6127|  5.71k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  5.71k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  5.71k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  5.71k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 5.71k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  5.71k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.71k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  5.71k|            std::tie(it, prefix_width) = prefix_result;
 6129|  5.71k|        }
 6130|  6.57k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  6.57k|        std::ptrdiff_t value_width = 0;
 6134|  6.57k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 858, False: 5.71k]
  ------------------
 6135|    858|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 6, False: 852]
  ------------------
 6136|      6|                return unexpected_scan_error(
 6137|      6|                    scan_error::invalid_scanned_value,
 6138|      6|                    "Too many fill characters before value, "
 6139|      6|                    "precision exceeded before reading value");
 6140|      6|            }
 6141|       |
 6142|    852|            const auto initial_width = specs.precision - prefix_width;
 6143|    852|            auto max_width_view =
 6144|    852|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    852|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    852|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    852|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    852|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    852|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 466, False: 386]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    466|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    466|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    466|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    466|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    466|    }                                                  \
  |  |  |  | 3667|    852|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    386|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|    386|            it = w_it.base();
 6147|    386|            value_width = initial_width - w_it.count();
 6148|    386|        }
 6149|  5.71k|        else {
 6150|  5.71k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  5.71k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  5.71k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  5.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 4.29k, False: 1.42k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  4.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  4.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  4.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  4.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  4.29k|    }                                                  \
  |  | 3667|  5.71k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  5.71k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  1.42k|                                             specs, value, loc));
 6152|       |
 6153|  1.42k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 210, False: 1.21k]
  ------------------
 6154|    210|                value_width = calculate_text_width(
 6155|    210|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|    210|                        .view());
 6157|    210|            }
 6158|  1.42k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  1.80k|        std::ptrdiff_t postfix_width = 0;
 6162|  1.80k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 1.39k, False: 410]
  ------------------
 6163|  1.39k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  1.39k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.39k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.39k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.39k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  1.39k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.39k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  1.39k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  1.39k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  1.39k|                                 value_width));
 6167|  1.39k|            std::tie(it, postfix_width) = postfix_result;
 6168|  1.39k|        }
 6169|       |
 6170|  1.80k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  1.80k|                                                 value_width, postfix_width);
 6172|  1.80k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 108, False: 1.69k]
  ------------------
 6173|    108|            return unexpected(e);
 6174|    108|        }
 6175|       |
 6176|  1.69k|        return it;
 6177|  1.80k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKcEERT_:
 6181|  6.72k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  6.72k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  6.72k|            auto rd = make_reader<T, char_type>();
 6187|  6.72k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 126, False: 6.59k]
  |  |  ------------------
  ------------------
 6188|    126|                return unexpected(e);
 6189|    126|            }
 6190|       |
 6191|  6.59k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  6.72k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6112|  6.59k|    {
 6113|  6.59k|        const bool need_skipped_width =
 6114|  6.59k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 266, False: 6.33k]
  |  Branch (6114:33): [True: 860, False: 5.47k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  6.59k|        auto it = rng.begin();
 6118|  6.59k|        std::ptrdiff_t prefix_width = 0;
 6119|  6.59k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 878, False: 5.71k]
  ------------------
 6120|    878|            auto max_width_view = take_width(rng, specs.precision);
 6121|    878|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    878|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    878|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    878|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    878|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 858]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     20|    }                                                  \
  |  |  |  | 3667|    878|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    858|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    858|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    858|            it = prefix_result.first.base();
 6124|    858|            prefix_width = prefix_result.second;
 6125|    858|        }
 6126|  5.71k|        else {
 6127|  5.71k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  5.71k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  5.71k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  5.71k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 5.71k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  5.71k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.71k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  5.71k|            std::tie(it, prefix_width) = prefix_result;
 6129|  5.71k|        }
 6130|  6.57k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  6.57k|        std::ptrdiff_t value_width = 0;
 6134|  6.57k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 858, False: 5.71k]
  ------------------
 6135|    858|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 6, False: 852]
  ------------------
 6136|      6|                return unexpected_scan_error(
 6137|      6|                    scan_error::invalid_scanned_value,
 6138|      6|                    "Too many fill characters before value, "
 6139|      6|                    "precision exceeded before reading value");
 6140|      6|            }
 6141|       |
 6142|    852|            const auto initial_width = specs.precision - prefix_width;
 6143|    852|            auto max_width_view =
 6144|    852|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    852|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    852|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    852|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    852|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    852|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 466, False: 386]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    466|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    466|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    466|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    466|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    466|    }                                                  \
  |  |  |  | 3667|    852|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    386|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|    386|            it = w_it.base();
 6147|    386|            value_width = initial_width - w_it.count();
 6148|    386|        }
 6149|  5.71k|        else {
 6150|  5.71k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  5.71k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  5.71k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  5.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 4.29k, False: 1.42k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  4.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  4.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  4.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  4.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  4.29k|    }                                                  \
  |  | 3667|  5.71k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  5.71k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  1.42k|                                             specs, value, loc));
 6152|       |
 6153|  1.42k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 210, False: 1.21k]
  ------------------
 6154|    210|                value_width = calculate_text_width(
 6155|    210|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|    210|                        .view());
 6157|    210|            }
 6158|  1.42k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  1.80k|        std::ptrdiff_t postfix_width = 0;
 6162|  1.80k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 1.39k, False: 410]
  ------------------
 6163|  1.39k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  1.39k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.39k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.39k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.39k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  1.39k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.39k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  1.39k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  1.39k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  1.39k|                                 value_width));
 6167|  1.39k|            std::tie(it, postfix_width) = postfix_result;
 6168|  1.39k|        }
 6169|       |
 6170|  1.80k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  1.80k|                                                 value_width, postfix_width);
 6172|  1.80k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 108, False: 1.69k]
  ------------------
 6173|    108|            return unexpected(e);
 6174|    108|        }
 6175|       |
 6176|  1.69k|        return it;
 6177|  1.80k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5783|  4.78k|{
 5784|  4.78k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.78k]
  |  |  ------------------
  ------------------
 5785|      0|        return unexpected(e);
 5786|      0|    }
 5787|       |
 5788|  4.78k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 532, False: 4.25k]
  ------------------
 5789|    532|        return range.begin();
 5790|    532|    }
 5791|       |
 5792|  4.25k|    return skip_classic_whitespace(range);
 5793|  4.78k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
 5859|    532|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    532|                          basic_contiguous_scan_context<char_type>>) {
 5864|    532|            auto rd = make_reader<T, char_type>();
 5865|    532|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    532|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|    532|    {
 5852|    532|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    532|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    532|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    532|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    532|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 532]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    532|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    532|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    532|                        .transform_error(make_eof_scan_error));
 5854|    532|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    532|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|    532|    {
 3517|    532|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    532|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|    532|        return read_default_with_base(range, value, 10);
 3519|    532|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|    532|    {
 3481|    532|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|    532|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    532|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    532|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    532|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 532]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    532|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    532|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|    532|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|       |        if constexpr (!std::is_signed_v<T>) {
 3485|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3486|       |                return unexpected_scan_error(
 3487|       |                    scan_error::invalid_scanned_value,
 3488|       |                    "Unexpected '-' sign when parsing an "
 3489|       |                    "unsigned value");
 3490|       |            }
 3491|       |        }
 3492|       |
 3493|    532|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 532]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  1.06k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    532|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    532|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    532|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    532|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 532]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    532|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    532|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  1.06k|                parse_integer_digits_without_thsep(
 3500|  1.06k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  1.06k|                    prefix_result.parsed_base));
 3502|       |
 3503|  1.06k|        auto buf = make_contiguous_buffer(
 3504|  1.06k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  1.06k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    532|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    532|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    532|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    532|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 532, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    532|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    532|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    532|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    532|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    532|    }                                                  \
  |  |  |  | 3667|    532|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|      0|                                    prefix_result.parsed_base));
 3508|       |
 3509|      0|        return ranges::next(prefix_result.iterator,
 3510|      0|                            ranges::distance(buf.view().begin(), result_it));
 3511|  1.06k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
 5859|    532|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    532|                          basic_contiguous_scan_context<char_type>>) {
 5864|    532|            auto rd = make_reader<T, char_type>();
 5865|    532|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    532|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|    532|    {
 5852|    532|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    532|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    532|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    532|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    532|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 532]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    532|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    532|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    532|                        .transform_error(make_eof_scan_error));
 5854|    532|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    532|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|    532|    {
 3517|    532|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    532|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|    532|        return read_default_with_base(range, value, 10);
 3519|    532|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|    532|    {
 3481|    532|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|    532|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    532|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    532|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    532|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 532]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    532|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    532|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|    532|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|    532|        if constexpr (!std::is_signed_v<T>) {
 3485|    532|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3485:17): [True: 0, False: 532]
  ------------------
 3486|      0|                return unexpected_scan_error(
 3487|      0|                    scan_error::invalid_scanned_value,
 3488|      0|                    "Unexpected '-' sign when parsing an "
 3489|      0|                    "unsigned value");
 3490|      0|            }
 3491|    532|        }
 3492|       |
 3493|    532|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 532]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  1.06k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    532|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    532|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    532|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    532|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 532]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    532|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    532|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  1.06k|                parse_integer_digits_without_thsep(
 3500|  1.06k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  1.06k|                    prefix_result.parsed_base));
 3502|       |
 3503|  1.06k|        auto buf = make_contiguous_buffer(
 3504|  1.06k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  1.06k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    532|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    532|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    532|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    532|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 532, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    532|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    532|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    532|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    532|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    532|    }                                                  \
  |  |  |  | 3667|    532|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|      0|                                    prefix_result.parsed_base));
 3508|       |
 3509|      0|        return ranges::next(prefix_result.iterator,
 3510|      0|                            ranges::distance(buf.view().begin(), result_it));
 3511|  1.06k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIPvEENS0_13scan_expectedIPKwEERT_:
 5859|    532|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    532|                          basic_contiguous_scan_context<char_type>>) {
 5864|    532|            auto rd = make_reader<T, char_type>();
 5865|    532|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    532|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_23reader_impl_for_voidptrIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5851|    532|    {
 5852|    532|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    532|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    532|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    532|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    532|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 532]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    532|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    532|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    532|                        .transform_error(make_eof_scan_error));
 5854|    532|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    532|    }
_ZNK3scn2v34impl23reader_impl_for_voidptrIwE19skip_ws_before_readEv:
 5736|    968|    {
 5737|    968|        return true;
 5738|    968|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5753|    840|    {
 5754|    840|        detail::format_specs specs{};
 5755|    840|        specs.type = detail::presentation_type::int_hex;
 5756|       |
 5757|    840|        std::uintptr_t intvalue{};
 5758|    840|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3668|    840|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    840|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    840|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    840|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 840, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    840|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    840|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    840|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    840|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    840|    }                                                  \
  |  |  |  | 3667|    840|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5759|      0|                                                                intvalue, loc));
 5760|      0|        value = reinterpret_cast<void*>(intvalue);
 5761|      0|        return result;
 5762|    840|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIbEENS0_13scan_expectedIPKwEERT_:
 5859|    532|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    532|                          basic_contiguous_scan_context<char_type>>) {
 5864|    532|            auto rd = make_reader<T, char_type>();
 5865|    532|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    532|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_20reader_impl_for_boolIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|    532|    {
 5852|    532|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    532|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    532|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    532|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    532|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 532]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    532|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    532|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    532|                        .transform_error(make_eof_scan_error));
 5854|    532|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    532|    }
_ZNK3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE19skip_ws_before_readEv:
 3023|  1.16k|    {
 3024|  1.16k|        return true;
 3025|  1.16k|    }
_ZNK3scn2v34impl20reader_impl_for_boolIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5492|    532|    {
 5493|    532|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    532|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5494|       |
 5495|    532|        return bool_reader<CharT>{}.read_classic(range, value);
 5496|    532|    }
_ZNK3scn2v34impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5343|    902|    {
 5344|    902|        scan_error err{scan_error::invalid_scanned_value,
 5345|    902|                       "Failed to read boolean"};
 5346|       |
 5347|    902|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5347:13): [True: 854, False: 48]
  ------------------
 5348|    854|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5348:22): [True: 0, False: 854]
  ------------------
 5349|      0|                return *r;
 5350|      0|            }
 5351|    854|            else {
 5352|    854|                err = r.error();
 5353|    854|            }
 5354|    854|        }
 5355|       |
 5356|    902|        if (m_options & allow_text) {
  ------------------
  |  Branch (5356:13): [True: 882, False: 20]
  ------------------
 5357|    882|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5357:22): [True: 0, False: 882]
  ------------------
 5358|      0|                return *r;
 5359|      0|            }
 5360|    882|            else {
 5361|    882|                err = r.error();
 5362|    882|            }
 5363|    882|        }
 5364|       |
 5365|    902|        return unexpected(err);
 5366|    902|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5372|    876|    {
 5373|    876|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5373:18): [True: 0, False: 876]
  ------------------
 5374|      0|            value = false;
 5375|      0|            return *r;
 5376|      0|        }
 5377|    876|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5377:18): [True: 0, False: 876]
  ------------------
 5378|      0|            value = true;
 5379|      0|            return *r;
 5380|      0|        }
 5381|       |
 5382|    876|        return unexpected_scan_error(
 5383|    876|            scan_error::invalid_scanned_value,
 5384|    876|            "Failed to read numeric boolean value: No match");
 5385|    876|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5390|    882|    {
 5391|    882|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5391:18): [True: 0, False: 882]
  ------------------
 5392|      0|            value = true;
 5393|      0|            return *r;
 5394|      0|        }
 5395|    882|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5395:18): [True: 0, False: 882]
  ------------------
 5396|      0|            value = false;
 5397|      0|            return *r;
 5398|      0|        }
 5399|       |
 5400|    882|        return unexpected_scan_error(
 5401|    882|            scan_error::invalid_scanned_value,
 5402|    882|            "Failed to read textual boolean value: No match");
 5403|    882|    }
_ZN3scn2v34impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2182|  1.76k|{
 2183|  1.76k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|  1.76k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.76k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.76k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 128, False: 1.63k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    128|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    128|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    128|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    128|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    128|    }                                                  \
  |  |  |  | 3667|  1.76k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.63k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2184|  1.63k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2185|  1.63k|                    .transform_error(make_eof_parse_error));
 2186|       |
 2187|       |    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2188|       |        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2189|       |        if (SCN_UNLIKELY(sv.view() != str)) {
 2190|       |            return unexpected(parse_error::error);
 2191|       |        }
 2192|       |        return it;
 2193|       |    }
 2194|  1.63k|    else {
 2195|  1.63k|        auto range_it = range.begin();
 2196|  1.63k|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2196:28): [True: 1.63k, False: 0]
  ------------------
 2197|  1.63k|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  859|  1.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.63k, False: 0]
  |  |  ------------------
  ------------------
 2198|  1.63k|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2199|  1.63k|                return unexpected(parse_error::error);
 2200|  1.63k|            }
 2201|  1.63k|        }
 2202|      0|        return it;
 2203|  1.63k|    }
 2204|  1.63k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIwEENS0_13scan_expectedIPKwEERT_:
 5859|    532|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    532|                          basic_contiguous_scan_context<char_type>>) {
 5864|    532|            auto rd = make_reader<T, char_type>();
 5865|    532|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    532|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_wcharIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|    532|    {
 5852|    532|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    532|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    532|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    532|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    532|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 532]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    532|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    532|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    532|                        .transform_error(make_eof_scan_error));
 5854|    532|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    532|    }
_ZN3scn2v34impl12float_readerIwEC2Ev:
 3646|    532|    constexpr float_reader() = default;
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 5859|    532|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    532|                          basic_contiguous_scan_context<char_type>>) {
 5864|    532|            auto rd = make_reader<T, char_type>();
 5865|    532|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    532|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|    532|    {
 5852|    532|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    532|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    532|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    532|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    532|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 532]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    532|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    532|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    532|                        .transform_error(make_eof_scan_error));
 5854|    532|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    532|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4140|    532|    {
 4141|    532|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    532|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|    532|        float_reader<CharT> rd{};
 4144|    532|        return read_impl<Range>(
 4145|    532|            range, rd,
 4146|    532|            [](float_reader<CharT>& r, auto&&... args) {
 4147|    532|                return r.read_source(SCN_FWD(args)...);
 4148|    532|            },
 4149|    532|            value);
 4150|    532|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|    532|        : m_fptr([](storage fn,
  743|    532|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    532|              cvref<T> obj = *get<T>(fn);
  745|    532|              if constexpr (std::is_void_v<R>) {
  746|    532|                  obj(static_cast<decltype(args)>(args)...);
  747|    532|              }
  748|    532|              else {
  749|    532|                  return obj(static_cast<decltype(args)>(args)...);
  750|    532|              }
  751|    532|          }),
  752|    532|          m_storage(std::addressof(f))
  753|    532|    {
  754|    532|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|    532|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    532|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    532|              else {
  749|    532|                  return obj(static_cast<decltype(args)>(args)...);
  750|    532|              }
  751|    532|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|    532|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    532|        else if constexpr (std::is_object_v<T>) {
  688|    532|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    532|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4146|    532|            [](float_reader<CharT>& r, auto&&... args) {
 4147|    532|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    532|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|    532|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|    532|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    532|        {
  662|    532|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKwEERT_:
 5859|    532|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    532|                          basic_contiguous_scan_context<char_type>>) {
 5864|    532|            auto rd = make_reader<T, char_type>();
 5865|    532|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    532|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5851|    532|    {
 5852|    532|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    532|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    532|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    532|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    532|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 532]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    532|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    532|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    532|                        .transform_error(make_eof_scan_error));
 5854|    532|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    532|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5254|    532|    {
 5255|    532|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    532|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|    532|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|    532|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5859|    532|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    532|                          basic_contiguous_scan_context<char_type>>) {
 5864|    532|            auto rd = make_reader<T, char_type>();
 5865|    532|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    532|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5851|    532|    {
 5852|    532|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    532|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    532|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    532|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    532|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 532]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    532|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    532|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    532|                        .transform_error(make_eof_scan_error));
 5854|    532|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    532|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5254|    532|    {
 5255|    532|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    532|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|    532|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|    532|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5859|    532|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    532|                          basic_contiguous_scan_context<char_type>>) {
 5864|    532|            auto rd = make_reader<T, char_type>();
 5865|    532|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    532|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5851|    532|    {
 5852|    532|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    532|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    532|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    532|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    532|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 532]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    532|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    532|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    532|                        .transform_error(make_eof_scan_error));
 5854|    532|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    532|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5254|    532|    {
 5255|    532|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    532|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|    532|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|    532|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISF_EEvE4typeELPv0EEEOSF_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2864|   218k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  928|   218k|    static_cast<    \
  |  |  929|   218k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2865|   218k|          m_range(SCN_FWD(r)),
  ------------------
  |  |  930|   218k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2866|   218k|          m_current(m_range.begin())
 2867|   218k|    {
 2868|   218k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2871|   427k|    {
 2872|   427k|        return m_current;
 2873|   427k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2876|   306k|    {
 2877|   306k|        return m_range.end();
 2878|   306k|    }
_ZN3scn2v34impl19is_first_char_spaceIwEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1208|   169k|{
 1209|       |    // TODO: optimize
 1210|   169k|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  924|   169k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   169k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1211|   169k|    auto res = get_next_code_point(str);
 1212|   169k|    return {res.iterator, res.value, detail::is_cp_space(res.value)};
 1213|   169k|}
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2891|  99.8k|    {
 2892|  99.8k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  99.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  99.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2893|  99.8k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2894|  99.8k|            if (it == nullptr) {
  ------------------
  |  Branch (2894:17): [True: 0, False: 99.8k]
  ------------------
 2895|      0|                it = end();
 2896|      0|            }
 2897|  99.8k|        }
 2898|  99.8k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  99.8k|    static_cast<    \
  |  |  929|  99.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2899|  99.8k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2881|  37.0k|    {
 2882|  37.0k|        return ranges::subrange{begin(), end()};
 2883|  37.0k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_b:
 6025|  2.05k|    {
 6026|  2.05k|        const bool need_skipped_width =
 6027|  2.05k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 34, False: 2.01k]
  |  Branch (6027:33): [True: 2.01k, False: 0]
  ------------------
 6028|  2.05k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|  2.05k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 36, False: 2.01k]
  ------------------
 6032|  2.05k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 390, False: 1.62k]
  ------------------
 6033|    426|            return skip_fill(rng, specs.precision, specs.fill,
 6034|    426|                             need_skipped_width);
 6035|    426|        }
 6036|  1.62k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 1.58k, False: 44]
  |  Branch (6036:56): [True: 1.00k, False: 580]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|  1.00k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 1.00k, False: 0]
  ------------------
 6040|  1.00k|                auto max_width_view = take_width(rng, specs.precision);
 6041|  1.00k|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|  1.00k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.00k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.00k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.00k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  1.00k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.00k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|  1.00k|                                  .transform_error(make_eof_scan_error));
 6043|  1.00k|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|  1.00k|            }
 6045|      0|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|      0|                            make_eof_scan_error));
 6047|       |
 6048|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 0]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|      0|            return result_type{it, 0};
 6056|      0|        }
 6057|       |
 6058|    624|        return result_type{rng.begin(), 0};
 6059|  1.62k|    }
_ZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEb:
 5939|    426|{
 5940|    426|    using char_type = detail::char_t<Range>;
 5941|    426|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5942|       |
 5943|    426|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5943:9): [True: 426, False: 0]
  ------------------
 5944|    426|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5945|    426|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5946|       |
 5947|    426|        if (max_width == 0) {
  ------------------
  |  Branch (5947:13): [True: 0, False: 426]
  ------------------
 5948|      0|            auto it = read_while_code_unit(range, pred);
 5949|       |
 5950|      0|            if (want_skipped_width) {
  ------------------
  |  Branch (5950:17): [True: 0, False: 0]
  ------------------
 5951|      0|                auto prefix_width =
 5952|      0|                    static_cast<std::ptrdiff_t>(
 5953|      0|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5954|      0|                    ranges::distance(range.begin(), it);
 5955|      0|                return result_type{it, prefix_width};
 5956|      0|            }
 5957|      0|            return result_type{it, 0};
 5958|      0|        }
 5959|       |
 5960|    426|        auto max_width_view = take_width(range, max_width);
 5961|    426|        auto w_it = read_while_code_unit(max_width_view, pred);
 5962|       |
 5963|    426|        if (want_skipped_width) {
  ------------------
  |  Branch (5963:13): [True: 426, False: 0]
  ------------------
 5964|    426|            return result_type{w_it.base(), max_width - w_it.count()};
 5965|    426|        }
 5966|      0|        return result_type{w_it.base(), 0};
 5967|    426|    }
 5968|       |
 5969|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 5970|      0|    if (max_width == 0) {
  ------------------
  |  Branch (5970:9): [True: 0, False: 0]
  ------------------
 5971|      0|        auto it = read_while_code_units(range, fill_chars);
 5972|       |
 5973|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5973:13): [True: 0, False: 0]
  ------------------
 5974|      0|            auto prefix_width =
 5975|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5976|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5977|      0|            return result_type{it, prefix_width};
 5978|      0|        }
 5979|      0|        return result_type{it, 0};
 5980|      0|    }
 5981|       |
 5982|      0|    auto max_width_view = take_width(range, max_width);
 5983|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5984|       |
 5985|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (5985:9): [True: 0, False: 0]
  ------------------
 5986|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 5987|      0|    }
 5988|      0|    return result_type{w_it.base(), 0};
 5989|      0|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_ST_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSJ_:
  742|    426|        : m_fptr([](storage fn,
  743|    426|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    426|              cvref<T> obj = *get<T>(fn);
  745|    426|              if constexpr (std::is_void_v<R>) {
  746|    426|                  obj(static_cast<decltype(args)>(args)...);
  747|    426|              }
  748|    426|              else {
  749|    426|                  return obj(static_cast<decltype(args)>(args)...);
  750|    426|              }
  751|    426|          }),
  752|    426|          m_storage(std::addressof(f))
  753|    426|    {
  754|    426|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_ST_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES15_w:
  743|    472|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    472|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    472|              else {
  749|    472|                  return obj(static_cast<decltype(args)>(args)...);
  750|    472|              }
  751|    472|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESI_lRKNS0_6detail9fill_typeEbEUlwE_EEDaNS3_7storageE:
  683|    472|    {
  684|    472|        if constexpr (std::is_const_v<T>) {
  685|    472|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    472|    }
_ZZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEbENKUlwE_clEw:
 5945|    472|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|    426|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    426|        {
  667|    426|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1963|    426|{
 1964|    426|    return read_until_code_unit(range, std::not_fn(pred));
 1965|    426|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1944|    426|{
 1945|       |    if constexpr (ranges::common_range<Range>) {
 1946|       |        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|    426|    else {
 1949|    426|        auto first = range.begin();
 1950|    506|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1950:16): [True: 472, False: 34]
  ------------------
 1951|    472|            if (pred(*first)) {
  ------------------
  |  Branch (1951:17): [True: 392, False: 80]
  ------------------
 1952|    392|                return first;
 1953|    392|            }
 1954|    472|        }
 1955|     34|        return first;
 1956|    426|    }
 1957|    426|}
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE5beginEv:
 2798|  2.43k|    {
 2799|  2.43k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2800|  2.43k|                                      m_count};
 2801|  2.43k|    }
_ZNK3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEvE3getEv:
 2705|  8.37k|    {
 2706|  8.37k|        return view;
 2707|  8.37k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEC2ES6_SF_l:
 2369|  2.43k|        : m_current(x), m_end(s), m_count(n)
 2370|  2.43k|    {
 2371|  2.43k|    }
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2769|  1.50k|        {
 2770|  1.50k|            return !(y == x);
 2771|  1.50k|        }
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2758|  3.51k|        {
 2759|  3.51k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2759:21): [True: 34, False: 3.47k]
  |  Branch (2759:39): [True: 34, False: 0]
  ------------------
 2760|  3.51k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2760:20): [True: 0, False: 3.47k]
  ------------------
 2761|  3.51k|        }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE14multibyte_leftEv:
 2409|     34|    {
 2410|     34|        return m_multibyte_left;
 2411|     34|    }
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE3endEv:
 2804|  3.51k|    {
 2805|  3.51k|        return sentinel<true>{m_base.get().end()};
 2806|  3.51k|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE8sentinelILb1EEC2ENSA_8sentinelILb1EEE:
 2739|  3.51k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  |  928|  3.51k|    static_cast<    \
  |  |  929|  3.51k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEdeEv:
 2414|  2.47k|    {
 2415|  2.47k|        return *m_current;
 2416|  2.47k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEppEv:
 2423|  1.08k|    {
 2424|  1.08k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  1.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2425|  1.08k|        _increment_current();
 2426|  1.08k|        return *this;
 2427|  1.08k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE18_increment_currentEv:
 2656|  1.08k|    {
 2657|  1.08k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2657:13): [True: 1.08k, False: 0]
  ------------------
 2658|  1.08k|            auto cplen = _get_cp_length_at_current();
 2659|  1.08k|            m_multibyte_left = cplen - 1;
 2660|  1.08k|            m_count -= _get_width_at_current_cp_start(cplen);
 2661|  1.08k|        }
 2662|      0|        else {
 2663|      0|            --m_multibyte_left;
 2664|      0|        }
 2665|       |
 2666|  1.08k|        ++m_current;
 2667|  1.08k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE25_get_cp_length_at_currentEv:
 2627|  1.08k|    {
 2628|  1.08k|        return static_cast<difference_type>(
 2629|  1.08k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2630|  1.08k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE30_get_width_at_current_cp_startEl:
 2633|  1.08k|    {
 2634|  1.08k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|  1.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.08k]
  |  |  ------------------
  ------------------
 2635|      0|            return 0;
 2636|      0|        }
 2637|       |
 2638|  1.08k|        if (cplen == 1) {
  ------------------
  |  Branch (2638:13): [True: 1.08k, False: 0]
  ------------------
 2639|  1.08k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  1.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2640|  1.08k|            auto cp = static_cast<char32_t>(*m_current);
 2641|  1.08k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2642|  1.08k|        }
 2643|       |
 2644|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2645|      0|                                           cplen);
 2646|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2647|      0|            return 0;
 2648|      0|        }
 2649|       |
 2650|      0|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2651|      0|        return static_cast<difference_type>(
 2652|      0|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2653|      0|    }
_ZNK3scn2v34impl14_take_width_fnclINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEEDTtlS4_fp_fp0_EERKT_l:
 2820|  1.42k|    {
 2821|  1.42k|        return take_width_view{r, n};
 2822|  1.42k|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEEC2ERKSA_l:
 2788|  1.42k|        : m_base(base), m_count(count)
 2789|  1.42k|    {
 2790|  1.42k|    }
_ZN3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEvEC2ERKSB_:
 2702|  1.42k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2939|  1.00k|{
 2940|  1.00k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 1.00k, False: 0]
  ------------------
 2941|  1.00k|        auto it = read_while_classic_space(range);
 2942|  1.00k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|  1.00k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.00k]
  |  |  ------------------
  ------------------
 2944|      0|            return unexpected(e);
 2945|      0|        }
 2946|       |
 2947|  1.00k|        return it;
 2948|  1.00k|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|  1.00k|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2104|  1.00k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|  1.00k|    else {
 2114|  1.00k|        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|  1.00k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  1.00k|            return detail::is_cp_space(cp);
 2127|  1.00k|        });
 2128|  1.00k|    }
 2129|  1.00k|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2069|  1.00k|{
 2070|  1.00k|    return read_until_code_point(range, std::not_fn(pred));
 2071|  1.00k|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2048|  1.00k|{
 2049|  1.00k|    auto it = range.begin();
 2050|  1.00k|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 1.00k, False: 0]
  ------------------
 2051|  1.00k|        const auto val =
 2052|  1.00k|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  1.00k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  1.00k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.00k, False: 0]
  |  |  ------------------
  ------------------
 2054|  1.00k|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  1.00k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  1.00k|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 1.00k, False: 0]
  ------------------
 2057|  1.00k|                return it;
 2058|  1.00k|            }
 2059|  1.00k|        }
 2060|      0|        it = val.iterator;
 2061|      0|    }
 2062|       |
 2063|      0|    return it;
 2064|  1.00k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISP_EEE4typeEEESP_:
 1886|  1.00k|{
 1887|  1.00k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  1.00k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.00k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|  1.00k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|  1.00k|    auto it = range.begin();
 1891|  1.00k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|  1.00k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.00k]
  |  |  ------------------
  ------------------
 1894|      0|        ++it;
 1895|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|      0|        return {it, {}};
 1897|      0|    }
 1898|       |
 1899|  1.00k|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 1.00k, False: 0]
  ------------------
 1900|  1.00k|        ++it;
 1901|  1.00k|        return {it, string_type(1, *range.begin())};
 1902|  1.00k|    }
 1903|       |
 1904|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|      0|    return {it, string_type{range.begin(), it}};
 1906|  1.00k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEbT_:
  943|  2.00k|{
  944|  2.00k|    return is_range_eof(r.begin(), r.end());
  945|  2.00k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS8_ISE_E8sentinelILb1EEEEEbT_T0_:
  927|  2.00k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  2.00k|    {
  937|  2.00k|        return begin == end;
  938|  2.00k|    }
  939|  2.00k|}
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEwE8is_validEv:
 1877|  1.00k|    {
 1878|  1.00k|        return !codepoint.empty();
 1879|  1.00k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  1.00k|        : m_fptr([](storage fn,
  743|  1.00k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.00k|              cvref<T> obj = *get<T>(fn);
  745|  1.00k|              if constexpr (std::is_void_v<R>) {
  746|  1.00k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.00k|              }
  748|  1.00k|              else {
  749|  1.00k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.00k|              }
  751|  1.00k|          }),
  752|  1.00k|          m_storage(std::addressof(f))
  753|  1.00k|    {
  754|  1.00k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  1.00k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.00k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.00k|              else {
  749|  1.00k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.00k|              }
  751|  1.00k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS6_INS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.00k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.00k|        else if constexpr (std::is_object_v<T>) {
  688|  1.00k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.00k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2125|  1.00k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  1.00k|            return detail::is_cp_space(cp);
 2127|  1.00k|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  1.00k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.00k|        {
  662|  1.00k|        }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|  1.00k|{
  950|  1.00k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.00k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  1.00k|    return eof_error::good;
  954|  1.00k|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE4baseEv:
 2401|  4.90k|    {
 2402|  4.90k|        return m_current;
 2403|  4.90k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE5countEv:
 2405|  4.94k|    {
 2406|  4.94k|        return m_count;
 2407|  4.94k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6025|  10.6k|    {
 6026|  10.6k|        const bool need_skipped_width =
 6027|  10.6k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 4.79k, False: 5.88k]
  |  Branch (6027:33): [True: 0, False: 5.88k]
  ------------------
 6028|  10.6k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|  10.6k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 54, False: 10.6k]
  ------------------
 6032|  10.6k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 268, False: 10.3k]
  ------------------
 6033|    322|            return skip_fill(rng, specs.precision, specs.fill,
 6034|    322|                             need_skipped_width);
 6035|    322|        }
 6036|  10.3k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 10.0k, False: 324]
  |  Branch (6036:56): [True: 2.34k, False: 7.68k]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|  2.34k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 2.34k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|  4.68k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|  2.34k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.34k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.34k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.34k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  2.34k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|  4.68k|                            make_eof_scan_error));
 6047|       |
 6048|  4.68k|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 1.86k, False: 476]
  ------------------
 6049|  1.86k|                return result_type{
 6050|  1.86k|                    it,
 6051|  1.86k|                    calculate_text_width(make_contiguous_buffer(
 6052|  1.86k|                                             ranges::subrange{rng.begin(), it})
 6053|  1.86k|                                             .view())};
 6054|  1.86k|            }
 6055|    476|            return result_type{it, 0};
 6056|  4.68k|        }
 6057|       |
 6058|  8.01k|        return result_type{rng.begin(), 0};
 6059|  10.3k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6067|  2.27k|    {
 6068|  2.27k|        const bool need_skipped_width =
 6069|  2.27k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 784, False: 1.49k]
  |  Branch (6069:33): [True: 500, False: 990]
  ------------------
 6070|  2.27k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|  2.27k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 92, False: 2.18k]
  ------------------
 6073|  2.27k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 148, False: 2.03k]
  ------------------
 6074|    240|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 66, False: 174]
  ------------------
 6075|    240|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 44, False: 22]
  ------------------
 6076|     44|                return result_type{rng.begin(), 0};
 6077|     44|            }
 6078|    196|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|    196|                             specs.fill, need_skipped_width);
 6080|    240|        }
 6081|  2.03k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 2.01k, False: 18]
  ------------------
 6082|  2.03k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 1.81k, False: 198]
  ------------------
 6083|  2.03k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 634, False: 1.18k]
  |  Branch (6083:35): [True: 612, False: 22]
  ------------------
 6084|  1.81k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 398, False: 808]
  ------------------
 6085|  1.20k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 228, False: 170]
  ------------------
 6086|    840|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 228, False: 612]
  ------------------
 6087|    228|                const auto initial_width =
 6088|    228|                    specs.precision - prefix_width - value_width;
 6089|    228|                auto max_width_view = take_width(rng, initial_width);
 6090|    228|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|    228|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    228|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    228|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    228|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 228]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    228|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    228|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|    228|                                  .transform_error(make_eof_scan_error));
 6092|    228|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|    228|            }
 6094|  1.22k|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|    612|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    612|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    612|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    612|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 612]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    612|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    612|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|  1.22k|                            make_eof_scan_error));
 6096|       |
 6097|  1.22k|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 612, False: 0]
  ------------------
 6098|    612|                return result_type{
 6099|    612|                    it,
 6100|    612|                    calculate_text_width(make_contiguous_buffer(
 6101|    612|                                             ranges::subrange{rng.begin(), it})
 6102|    612|                                             .view())};
 6103|    612|            }
 6104|      0|            return result_type{it, 0};
 6105|  1.22k|        }
 6106|  1.19k|        return result_type{rng.begin(), 0};
 6107|  2.03k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
 6181|  3.36k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  3.36k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  3.36k|            auto rd = make_reader<T, char_type>();
 6187|  3.36k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.86k, False: 506]
  |  |  ------------------
  ------------------
 6188|  2.86k|                return unexpected(e);
 6189|  2.86k|            }
 6190|       |
 6191|    506|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  3.36k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|    506|    {
 6113|    506|        const bool need_skipped_width =
 6114|    506|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 242, False: 264]
  |  Branch (6114:33): [True: 162, False: 102]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|    506|        auto it = rng.begin();
 6118|    506|        std::ptrdiff_t prefix_width = 0;
 6119|    506|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 164, False: 342]
  ------------------
 6120|    164|            auto max_width_view = take_width(rng, specs.precision);
 6121|    164|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    164|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    164|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    164|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    164|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 164]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    164|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    164|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    164|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    164|            it = prefix_result.first.base();
 6124|    164|            prefix_width = prefix_result.second;
 6125|    164|        }
 6126|    342|        else {
 6127|    342|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    342|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    342|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    342|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    342|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 342]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    342|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    342|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|    342|            std::tie(it, prefix_width) = prefix_result;
 6129|    342|        }
 6130|    506|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|    506|        std::ptrdiff_t value_width = 0;
 6134|    506|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 164, False: 342]
  ------------------
 6135|    164|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 2, False: 162]
  ------------------
 6136|      2|                return unexpected_scan_error(
 6137|      2|                    scan_error::invalid_scanned_value,
 6138|      2|                    "Too many fill characters before value, "
 6139|      2|                    "precision exceeded before reading value");
 6140|      2|            }
 6141|       |
 6142|    162|            const auto initial_width = specs.precision - prefix_width;
 6143|    162|            auto max_width_view =
 6144|    162|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    162|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    162|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    162|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    162|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    162|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 162, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    162|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    162|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    162|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    162|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    162|    }                                                  \
  |  |  |  | 3667|    162|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|    342|        else {
 6150|    342|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    342|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    342|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    342|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 342, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    342|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    342|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    342|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    342|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    342|    }                                                  \
  |  | 3667|    342|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    342|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|      0|                                             specs, value, loc));
 6152|       |
 6153|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 0]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|      0|        }
 6159|       |
 6160|       |        // Read postfix
 6161|      0|        std::ptrdiff_t postfix_width = 0;
 6162|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 0, False: 0]
  ------------------
 6163|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6166|      0|                                 value_width));
 6167|      0|            std::tie(it, postfix_width) = postfix_result;
 6168|      0|        }
 6169|       |
 6170|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|      0|                                                 value_width, postfix_width);
 6172|      0|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 0]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|      0|        return it;
 6177|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
 6181|  3.36k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  3.36k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  3.36k|            auto rd = make_reader<T, char_type>();
 6187|  3.36k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.86k, False: 506]
  |  |  ------------------
  ------------------
 6188|  2.86k|                return unexpected(e);
 6189|  2.86k|            }
 6190|       |
 6191|    506|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  3.36k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|    506|    {
 6113|    506|        const bool need_skipped_width =
 6114|    506|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 242, False: 264]
  |  Branch (6114:33): [True: 162, False: 102]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|    506|        auto it = rng.begin();
 6118|    506|        std::ptrdiff_t prefix_width = 0;
 6119|    506|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 164, False: 342]
  ------------------
 6120|    164|            auto max_width_view = take_width(rng, specs.precision);
 6121|    164|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    164|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    164|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    164|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    164|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 164]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    164|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    164|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    164|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    164|            it = prefix_result.first.base();
 6124|    164|            prefix_width = prefix_result.second;
 6125|    164|        }
 6126|    342|        else {
 6127|    342|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    342|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    342|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    342|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    342|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 342]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    342|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    342|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|    342|            std::tie(it, prefix_width) = prefix_result;
 6129|    342|        }
 6130|    506|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|    506|        std::ptrdiff_t value_width = 0;
 6134|    506|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 164, False: 342]
  ------------------
 6135|    164|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 2, False: 162]
  ------------------
 6136|      2|                return unexpected_scan_error(
 6137|      2|                    scan_error::invalid_scanned_value,
 6138|      2|                    "Too many fill characters before value, "
 6139|      2|                    "precision exceeded before reading value");
 6140|      2|            }
 6141|       |
 6142|    162|            const auto initial_width = specs.precision - prefix_width;
 6143|    162|            auto max_width_view =
 6144|    162|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    162|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    162|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    162|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    162|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    162|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 162, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    162|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    162|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    162|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    162|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    162|    }                                                  \
  |  |  |  | 3667|    162|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|    342|        else {
 6150|    342|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    342|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    342|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    342|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 342, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    342|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    342|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    342|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    342|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    342|    }                                                  \
  |  | 3667|    342|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    342|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|      0|                                             specs, value, loc));
 6152|       |
 6153|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 0]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|      0|        }
 6159|       |
 6160|       |        // Read postfix
 6161|      0|        std::ptrdiff_t postfix_width = 0;
 6162|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 0, False: 0]
  ------------------
 6163|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6166|      0|                                 value_width));
 6167|      0|            std::tie(it, postfix_width) = postfix_result;
 6168|      0|        }
 6169|       |
 6170|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|      0|                                                 value_width, postfix_width);
 6172|      0|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 0]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|      0|        return it;
 6177|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIPvEENS0_13scan_expectedIPKwEERT_:
 6181|  3.31k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  3.31k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  3.31k|            auto rd = make_reader<T, char_type>();
 6187|  3.31k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.87k, False: 436]
  |  |  ------------------
  ------------------
 6188|  2.87k|                return unexpected(e);
 6189|  2.87k|            }
 6190|       |
 6191|    436|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  3.31k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE11check_specsERKNS0_6detail12format_specsE:
 5741|  3.31k|    {
 5742|  3.31k|        reader_error_handler eh{};
 5743|  3.31k|        detail::check_pointer_type_specs(specs, eh);
 5744|  3.31k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  3.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.87k, False: 436]
  |  |  ------------------
  ------------------
 5745|  2.87k|            return {scan_error::invalid_format_string, eh.m_msg};
 5746|  2.87k|        }
 5747|    436|        return {};
 5748|  3.31k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_23reader_impl_for_voidptrIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6112|    436|    {
 6113|    436|        const bool need_skipped_width =
 6114|    436|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 238, False: 198]
  |  Branch (6114:33): [True: 126, False: 72]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|    436|        auto it = rng.begin();
 6118|    436|        std::ptrdiff_t prefix_width = 0;
 6119|    436|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 128, False: 308]
  ------------------
 6120|    128|            auto max_width_view = take_width(rng, specs.precision);
 6121|    128|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    128|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    128|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    128|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    128|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 128]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    128|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    128|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    128|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    128|            it = prefix_result.first.base();
 6124|    128|            prefix_width = prefix_result.second;
 6125|    128|        }
 6126|    308|        else {
 6127|    308|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    308|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    308|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    308|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    308|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 308]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    308|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    308|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|    308|            std::tie(it, prefix_width) = prefix_result;
 6129|    308|        }
 6130|    436|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|    436|        std::ptrdiff_t value_width = 0;
 6134|    436|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 128, False: 308]
  ------------------
 6135|    128|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 2, False: 126]
  ------------------
 6136|      2|                return unexpected_scan_error(
 6137|      2|                    scan_error::invalid_scanned_value,
 6138|      2|                    "Too many fill characters before value, "
 6139|      2|                    "precision exceeded before reading value");
 6140|      2|            }
 6141|       |
 6142|    126|            const auto initial_width = specs.precision - prefix_width;
 6143|    126|            auto max_width_view =
 6144|    126|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    126|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    126|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    126|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    126|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    126|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 126, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    126|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    126|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    126|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    126|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    126|    }                                                  \
  |  |  |  | 3667|    126|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|    308|        else {
 6150|    308|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    308|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    308|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    308|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 308, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    308|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    308|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    308|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    308|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    308|    }                                                  \
  |  | 3667|    308|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    308|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|      0|                                             specs, value, loc));
 6152|       |
 6153|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 0]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|      0|        }
 6159|       |
 6160|       |        // Read postfix
 6161|      0|        std::ptrdiff_t postfix_width = 0;
 6162|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 0, False: 0]
  ------------------
 6163|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6166|      0|                                 value_width));
 6167|      0|            std::tie(it, postfix_width) = postfix_result;
 6168|      0|        }
 6169|       |
 6170|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|      0|                                                 value_width, postfix_width);
 6172|      0|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 0]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|      0|        return it;
 6177|      0|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5770|    126|    {
 5771|    126|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    126|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5772|    126|        return read_default(range, value, loc);
 5773|    126|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5753|    126|    {
 5754|    126|        detail::format_specs specs{};
 5755|    126|        specs.type = detail::presentation_type::int_hex;
 5756|       |
 5757|    126|        std::uintptr_t intvalue{};
 5758|    126|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3668|    126|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    126|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    126|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    126|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 126, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    126|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    126|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    126|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    126|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    126|    }                                                  \
  |  |  |  | 3667|    126|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5759|      0|                                                                intvalue, loc));
 5760|      0|        value = reinterpret_cast<void*>(intvalue);
 5761|      0|        return result;
 5762|    126|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5770|    308|    {
 5771|    308|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    308|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5772|    308|        return read_default(range, value, loc);
 5773|    308|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIbEENS0_13scan_expectedIPKwEERT_:
 6181|  3.36k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  3.36k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  3.36k|            auto rd = make_reader<T, char_type>();
 6187|  3.36k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.73k, False: 636]
  |  |  ------------------
  ------------------
 6188|  2.73k|                return unexpected(e);
 6189|  2.73k|            }
 6190|       |
 6191|    636|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  3.36k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3028|  3.36k|    {
 3029|  3.36k|        reader_error_handler eh{};
 3030|  3.36k|        get_derived().check_specs_impl(specs, eh);
 3031|  3.36k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  3.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.73k, False: 636]
  |  |  ------------------
  ------------------
 3032|  2.73k|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|  2.73k|        }
 3034|    636|        return {};
 3035|  3.36k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11get_derivedEv:
 3039|  3.36k|    {
 3040|  3.36k|        return static_cast<Derived&>(*this);
 3041|  3.36k|    }
_ZN3scn2v34impl20reader_impl_for_boolIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5485|  3.36k|    {
 5486|  3.36k|        detail::check_bool_type_specs(specs, eh);
 5487|  3.36k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_20reader_impl_for_boolIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|    636|    {
 6113|    636|        const bool need_skipped_width =
 6114|    636|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 256, False: 380]
  |  Branch (6114:33): [True: 234, False: 146]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|    636|        auto it = rng.begin();
 6118|    636|        std::ptrdiff_t prefix_width = 0;
 6119|    636|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 238, False: 398]
  ------------------
 6120|    238|            auto max_width_view = take_width(rng, specs.precision);
 6121|    238|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    238|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    238|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    238|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    238|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 238]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    238|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    238|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    238|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    238|            it = prefix_result.first.base();
 6124|    238|            prefix_width = prefix_result.second;
 6125|    238|        }
 6126|    398|        else {
 6127|    398|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    398|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    398|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    398|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    398|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 398]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    398|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    398|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|    398|            std::tie(it, prefix_width) = prefix_result;
 6129|    398|        }
 6130|    636|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|    636|        std::ptrdiff_t value_width = 0;
 6134|    636|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 238, False: 398]
  ------------------
 6135|    238|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 4, False: 234]
  ------------------
 6136|      4|                return unexpected_scan_error(
 6137|      4|                    scan_error::invalid_scanned_value,
 6138|      4|                    "Too many fill characters before value, "
 6139|      4|                    "precision exceeded before reading value");
 6140|      4|            }
 6141|       |
 6142|    234|            const auto initial_width = specs.precision - prefix_width;
 6143|    234|            auto max_width_view =
 6144|    234|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    234|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    234|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    234|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    234|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    234|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 234, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    234|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    234|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    234|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    234|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    234|    }                                                  \
  |  |  |  | 3667|    234|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|    398|        else {
 6150|    398|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    398|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    398|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    398|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 398, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    398|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    398|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    398|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    398|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    398|    }                                                  \
  |  | 3667|    398|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    398|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|      0|                                             specs, value, loc));
 6152|       |
 6153|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 0]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|      0|        }
 6159|       |
 6160|       |        // Read postfix
 6161|      0|        std::ptrdiff_t postfix_width = 0;
 6162|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 0, False: 0]
  ------------------
 6163|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6166|      0|                                 value_width));
 6167|      0|            std::tie(it, postfix_width) = postfix_result;
 6168|      0|        }
 6169|       |
 6170|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|      0|                                                 value_width, postfix_width);
 6172|      0|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 0]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|      0|        return it;
 6177|      0|    }
_ZNK3scn2v34impl20reader_impl_for_boolIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5504|    234|    {
 5505|    234|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5506|       |
 5507|    234|#if !SCN_DISABLE_LOCALE
 5508|    234|        if (specs.localized) {
  ------------------
  |  Branch (5508:13): [True: 20, False: 214]
  ------------------
 5509|     20|            return rd.read_localized(range, loc, value);
 5510|     20|        }
 5511|    214|#endif
 5512|       |
 5513|    214|        return rd.read_classic(range, value);
 5514|    234|    }
_ZN3scn2v34impl20reader_impl_for_boolIwE11get_optionsERKNS0_6detail12format_specsE:
 5517|    632|    {
 5518|    632|        SCN_GCC_COMPAT_PUSH
 5519|    632|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5520|       |
 5521|    632|        switch (specs.type) {
 5522|    126|            case detail::presentation_type::string:
  ------------------
  |  Branch (5522:13): [True: 126, False: 506]
  ------------------
 5523|    126|                return bool_reader_base::allow_text;
 5524|       |
 5525|     16|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5525:13): [True: 16, False: 616]
  ------------------
 5526|     24|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5526:13): [True: 8, False: 624]
  ------------------
 5527|     32|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5527:13): [True: 8, False: 624]
  ------------------
 5528|     44|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5528:13): [True: 12, False: 620]
  ------------------
 5529|     54|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5529:13): [True: 10, False: 622]
  ------------------
 5530|     66|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5530:13): [True: 12, False: 620]
  ------------------
 5531|     66|                return bool_reader_base::allow_numeric;
 5532|       |
 5533|    440|            default:
  ------------------
  |  Branch (5533:13): [True: 440, False: 192]
  ------------------
 5534|    440|                return bool_reader_base::allow_text |
 5535|    440|                       bool_reader_base::allow_numeric;
 5536|    632|        }
 5537|       |
 5538|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5539|    632|    }
_ZNK3scn2v34impl11bool_readerIwE14read_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refERb:
 5416|     20|    {
 5417|     20|        scan_error err{scan_error::invalid_scanned_value,
 5418|     20|                       "Failed to read boolean"};
 5419|       |
 5420|     20|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5420:13): [True: 18, False: 2]
  ------------------
 5421|     18|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5421:22): [True: 0, False: 18]
  ------------------
 5422|      0|                return *r;
 5423|      0|            }
 5424|     18|            else {
 5425|     18|                err = r.error();
 5426|     18|            }
 5427|     18|        }
 5428|       |
 5429|     20|        if (m_options & allow_text) {
  ------------------
  |  Branch (5429:13): [True: 10, False: 10]
  ------------------
 5430|     10|            auto stdloc = loc.get<std::locale>();
 5431|     10|            const auto& numpunct =
 5432|     10|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5433|     10|            const auto truename = numpunct.truename();
 5434|     10|            const auto falsename = numpunct.falsename();
 5435|       |
 5436|     10|            if (auto r =
  ------------------
  |  Branch (5436:22): [True: 0, False: 10]
  ------------------
 5437|     10|                    read_textual_custom(range, value, truename, falsename)) {
 5438|      0|                return *r;
 5439|      0|            }
 5440|     10|            else {
 5441|     10|                err = r.error();
 5442|     10|            }
 5443|     10|        }
 5444|       |
 5445|     20|        return unexpected(err);
 5446|     20|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5372|    162|    {
 5373|    162|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5373:18): [True: 0, False: 162]
  ------------------
 5374|      0|            value = false;
 5375|      0|            return *r;
 5376|      0|        }
 5377|    162|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5377:18): [True: 0, False: 162]
  ------------------
 5378|      0|            value = true;
 5379|      0|            return *r;
 5380|      0|        }
 5381|       |
 5382|    162|        return unexpected_scan_error(
 5383|    162|            scan_error::invalid_scanned_value,
 5384|    162|            "Failed to read numeric boolean value: No match");
 5385|    162|    }
_ZN3scn2v34impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2134|    324|{
 2135|    324|    auto it = read_code_unit(range);
 2136|    324|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    324|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 324]
  |  |  ------------------
  ------------------
 2137|      0|        return unexpected(make_eof_parse_error(it.error()));
 2138|      0|    }
 2139|       |
 2140|    324|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|    324|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 324, False: 0]
  |  |  ------------------
  ------------------
 2141|    324|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|    324|        return unexpected(parse_error::error);
 2143|    324|    }
 2144|       |
 2145|      0|    return *it;
 2146|    324|}
_ZNK3scn2v34impl11bool_readerIwE19read_textual_customINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RbNSF_17basic_string_viewIwNSF_11char_traitsIwEEEESR_:
 5456|     10|    {
 5457|     10|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5458|     10|        const auto shorter = std::pair{
 5459|     10|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5459:13): [True: 10, False: 0]
  ------------------
 5460|     10|        const auto longer = std::pair{
 5461|     10|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5461:13): [True: 0, False: 10]
  ------------------
 5462|       |
 5463|     10|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5463:18): [True: 0, False: 10]
  ------------------
 5464|      0|            value = shorter.second;
 5465|      0|            return *r;
 5466|      0|        }
 5467|     10|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5467:18): [True: 0, False: 10]
  ------------------
 5468|      0|            value = longer.second;
 5469|      0|            return *r;
 5470|      0|        }
 5471|       |
 5472|     10|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5473|     10|                                     "read_textual: No match");
 5474|     10|    }
_ZN3scn2v34impl20read_matching_stringINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewINDTcl4implISF_EEE4typeENSD_11char_traitsISN_EEEE:
 2167|     20|{
 2168|     20|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14, False: 6]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     14|    }                                                  \
  |  |  |  | 3667|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2169|      6|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2170|      6|                    .transform_error(make_eof_parse_error));
 2171|       |
 2172|      6|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2173|      6|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  ------------------
  ------------------
 2174|      6|        return unexpected(parse_error::error);
 2175|      6|    }
 2176|      0|    return it;
 2177|      6|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1844|    408|{
 1845|    408|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    408|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    408|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1846|       |
 1847|       |    if constexpr (ranges::sized_range<Range>) {
 1848|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1849|       |        if (sz < count) {
 1850|       |            return unexpected(eof_error::eof);
 1851|       |        }
 1852|       |
 1853|       |        return ranges::next(range.begin(), count);
 1854|       |    }
 1855|    408|    else {
 1856|    408|        auto it = range.begin();
 1857|    408|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1857:13): [True: 0, False: 408]
  ------------------
 1858|      0|            return ranges::next(it, count);
 1859|      0|        }
 1860|       |
 1861|  2.09k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1861:36): [True: 1.74k, False: 346]
  ------------------
 1862|  1.74k|            if (it == range.end()) {
  ------------------
  |  Branch (1862:17): [True: 62, False: 1.68k]
  ------------------
 1863|     62|                return unexpected(eof_error::eof);
 1864|     62|            }
 1865|  1.74k|        }
 1866|       |
 1867|    346|        return it;
 1868|    408|    }
 1869|    408|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEmT_:
 1094|    408|{
 1095|       |    if constexpr (ranges::sized_range<Range>) {
 1096|       |        return r.size();
 1097|       |    }
 1098|       |    else if constexpr (std::is_same_v<
 1099|       |                           ranges::const_iterator_t<Range>,
 1100|       |                           typename detail::basic_scan_buffer<
 1101|       |                               detail::char_t<Range>>::forward_iterator>) {
 1102|       |        if constexpr (ranges::common_range<Range>) {
 1103|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|       |        }
 1105|       |        else {
 1106|       |            if (r.begin().stores_parent()) {
 1107|       |                return static_cast<size_t>(
 1108|       |                    r.begin().parent()->chars_available() -
 1109|       |                    r.begin().position());
 1110|       |            }
 1111|       |            return r.begin().contiguous_segment().size();
 1112|       |        }
 1113|       |    }
 1114|    408|    else {
 1115|    408|        return 0;
 1116|    408|    }
 1117|    408|}
_ZNK3scn2v34impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5343|    214|    {
 5344|    214|        scan_error err{scan_error::invalid_scanned_value,
 5345|    214|                       "Failed to read boolean"};
 5346|       |
 5347|    214|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5347:13): [True: 144, False: 70]
  ------------------
 5348|    144|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5348:22): [True: 0, False: 144]
  ------------------
 5349|      0|                return *r;
 5350|      0|            }
 5351|    144|            else {
 5352|    144|                err = r.error();
 5353|    144|            }
 5354|    144|        }
 5355|       |
 5356|    214|        if (m_options & allow_text) {
  ------------------
  |  Branch (5356:13): [True: 194, False: 20]
  ------------------
 5357|    194|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5357:22): [True: 0, False: 194]
  ------------------
 5358|      0|                return *r;
 5359|      0|            }
 5360|    194|            else {
 5361|    194|                err = r.error();
 5362|    194|            }
 5363|    194|        }
 5364|       |
 5365|    214|        return unexpected(err);
 5366|    214|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5390|    194|    {
 5391|    194|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5391:18): [True: 0, False: 194]
  ------------------
 5392|      0|            value = true;
 5393|      0|            return *r;
 5394|      0|        }
 5395|    194|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5395:18): [True: 0, False: 194]
  ------------------
 5396|      0|            value = false;
 5397|      0|            return *r;
 5398|      0|        }
 5399|       |
 5400|    194|        return unexpected_scan_error(
 5401|    194|            scan_error::invalid_scanned_value,
 5402|    194|            "Failed to read textual boolean value: No match");
 5403|    194|    }
_ZN3scn2v34impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2182|    388|{
 2183|    388|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|    388|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    388|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    388|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    388|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 48, False: 340]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     48|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     48|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     48|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     48|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     48|    }                                                  \
  |  |  |  | 3667|    388|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    340|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2184|    340|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2185|    340|                    .transform_error(make_eof_parse_error));
 2186|       |
 2187|       |    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2188|       |        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2189|       |        if (SCN_UNLIKELY(sv.view() != str)) {
 2190|       |            return unexpected(parse_error::error);
 2191|       |        }
 2192|       |        return it;
 2193|       |    }
 2194|    340|    else {
 2195|    340|        auto range_it = range.begin();
 2196|    340|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2196:28): [True: 340, False: 0]
  ------------------
 2197|    340|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  859|    340|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 340, False: 0]
  |  |  ------------------
  ------------------
 2198|    340|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2199|    340|                return unexpected(parse_error::error);
 2200|    340|            }
 2201|    340|        }
 2202|      0|        return it;
 2203|    340|    }
 2204|    340|}
_ZNK3scn2v34impl20reader_impl_for_boolIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5504|    398|    {
 5505|    398|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5506|       |
 5507|    398|#if !SCN_DISABLE_LOCALE
 5508|    398|        if (specs.localized) {
  ------------------
  |  Branch (5508:13): [True: 28, False: 370]
  ------------------
 5509|     28|            return rd.read_localized(range, loc, value);
 5510|     28|        }
 5511|    370|#endif
 5512|       |
 5513|    370|        return rd.read_classic(range, value);
 5514|    398|    }
_ZNK3scn2v34impl11bool_readerIwE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5416|     28|    {
 5417|     28|        scan_error err{scan_error::invalid_scanned_value,
 5418|     28|                       "Failed to read boolean"};
 5419|       |
 5420|     28|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5420:13): [True: 22, False: 6]
  ------------------
 5421|     22|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5421:22): [True: 0, False: 22]
  ------------------
 5422|      0|                return *r;
 5423|      0|            }
 5424|     22|            else {
 5425|     22|                err = r.error();
 5426|     22|            }
 5427|     22|        }
 5428|       |
 5429|     28|        if (m_options & allow_text) {
  ------------------
  |  Branch (5429:13): [True: 12, False: 16]
  ------------------
 5430|     12|            auto stdloc = loc.get<std::locale>();
 5431|     12|            const auto& numpunct =
 5432|     12|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5433|     12|            const auto truename = numpunct.truename();
 5434|     12|            const auto falsename = numpunct.falsename();
 5435|       |
 5436|     12|            if (auto r =
  ------------------
  |  Branch (5436:22): [True: 0, False: 12]
  ------------------
 5437|     12|                    read_textual_custom(range, value, truename, falsename)) {
 5438|      0|                return *r;
 5439|      0|            }
 5440|     12|            else {
 5441|     12|                err = r.error();
 5442|     12|            }
 5443|     12|        }
 5444|       |
 5445|     28|        return unexpected(err);
 5446|     28|    }
_ZNK3scn2v34impl11bool_readerIwE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIwNSD_11char_traitsIwEEEESP_:
 5456|     12|    {
 5457|     12|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5458|     12|        const auto shorter = std::pair{
 5459|     12|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5459:13): [True: 12, False: 0]
  ------------------
 5460|     12|        const auto longer = std::pair{
 5461|     12|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5461:13): [True: 0, False: 12]
  ------------------
 5462|       |
 5463|     12|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5463:18): [True: 0, False: 12]
  ------------------
 5464|      0|            value = shorter.second;
 5465|      0|            return *r;
 5466|      0|        }
 5467|     12|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5467:18): [True: 0, False: 12]
  ------------------
 5468|      0|            value = longer.second;
 5469|      0|            return *r;
 5470|      0|        }
 5471|       |
 5472|     12|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5473|     12|                                     "read_textual: No match");
 5474|     12|    }
_ZN3scn2v34impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2167|     24|{
 2168|     24|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|     24|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     24|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     24|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      2|    }                                                  \
  |  |  |  | 3667|     24|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2169|     22|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2170|     22|                    .transform_error(make_eof_parse_error));
 2171|       |
 2172|     22|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2173|     22|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22, False: 0]
  |  |  ------------------
  ------------------
 2174|     22|        return unexpected(parse_error::error);
 2175|     22|    }
 2176|      0|    return it;
 2177|     22|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIwEENS0_13scan_expectedIPKwEERT_:
 6181|  3.31k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  3.31k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  3.31k|            auto rd = make_reader<T, char_type>();
 6187|  3.31k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.84k, False: 468]
  |  |  ------------------
  ------------------
 6188|  2.84k|                return unexpected(e);
 6189|  2.84k|            }
 6190|       |
 6191|    468|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  3.31k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_wcharIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|    468|    {
 6113|    468|        const bool need_skipped_width =
 6114|    468|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 240, False: 228]
  |  Branch (6114:33): [True: 144, False: 84]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|    468|        auto it = rng.begin();
 6118|    468|        std::ptrdiff_t prefix_width = 0;
 6119|    468|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 146, False: 322]
  ------------------
 6120|    146|            auto max_width_view = take_width(rng, specs.precision);
 6121|    146|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    146|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    146|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    146|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    146|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 146]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    146|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    146|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    146|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    146|            it = prefix_result.first.base();
 6124|    146|            prefix_width = prefix_result.second;
 6125|    146|        }
 6126|    322|        else {
 6127|    322|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    322|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    322|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    322|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    322|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 322]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    322|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    322|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|    322|            std::tie(it, prefix_width) = prefix_result;
 6129|    322|        }
 6130|    468|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|    468|        std::ptrdiff_t value_width = 0;
 6134|    468|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 146, False: 322]
  ------------------
 6135|    146|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 2, False: 144]
  ------------------
 6136|      2|                return unexpected_scan_error(
 6137|      2|                    scan_error::invalid_scanned_value,
 6138|      2|                    "Too many fill characters before value, "
 6139|      2|                    "precision exceeded before reading value");
 6140|      2|            }
 6141|       |
 6142|    144|            const auto initial_width = specs.precision - prefix_width;
 6143|    144|            auto max_width_view =
 6144|    144|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    144|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    144|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    144|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    144|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    144|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 124]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     20|    }                                                  \
  |  |  |  | 3667|    144|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    124|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|    124|            it = w_it.base();
 6147|    124|            value_width = initial_width - w_it.count();
 6148|    124|        }
 6149|    322|        else {
 6150|    322|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    322|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    322|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    322|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 20, False: 302]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|     20|    }                                                  \
  |  | 3667|    322|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    322|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    302|                                             specs, value, loc));
 6152|       |
 6153|    302|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 236, False: 66]
  ------------------
 6154|    236|                value_width = calculate_text_width(
 6155|    236|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|    236|                        .view());
 6157|    236|            }
 6158|    302|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    426|        std::ptrdiff_t postfix_width = 0;
 6162|    426|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 426, False: 0]
  ------------------
 6163|    426|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    426|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    426|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    426|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    426|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 426]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    426|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    426|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    426|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    426|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    426|                                 value_width));
 6167|    426|            std::tie(it, postfix_width) = postfix_result;
 6168|    426|        }
 6169|       |
 6170|    426|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    426|                                                 value_width, postfix_width);
 6172|    426|            !e) {
  ------------------
  |  Branch (6172:13): [True: 234, False: 192]
  ------------------
 6173|    234|            return unexpected(e);
 6174|    234|        }
 6175|       |
 6176|    192|        return it;
 6177|    426|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 6181|  3.36k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  3.36k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  3.36k|            auto rd = make_reader<T, char_type>();
 6187|  3.36k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.88k, False: 478]
  |  |  ------------------
  ------------------
 6188|  2.88k|                return unexpected(e);
 6189|  2.88k|            }
 6190|       |
 6191|    478|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  3.36k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|    478|    {
 6113|    478|        const bool need_skipped_width =
 6114|    478|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 246, False: 232]
  |  Branch (6114:33): [True: 146, False: 86]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|    478|        auto it = rng.begin();
 6118|    478|        std::ptrdiff_t prefix_width = 0;
 6119|    478|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 150, False: 328]
  ------------------
 6120|    150|            auto max_width_view = take_width(rng, specs.precision);
 6121|    150|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    150|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    150|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    150|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    150|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 150]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    150|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    150|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    150|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    150|            it = prefix_result.first.base();
 6124|    150|            prefix_width = prefix_result.second;
 6125|    150|        }
 6126|    328|        else {
 6127|    328|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    328|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    328|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    328|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    328|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 328]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    328|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    328|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|    328|            std::tie(it, prefix_width) = prefix_result;
 6129|    328|        }
 6130|    478|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|    478|        std::ptrdiff_t value_width = 0;
 6134|    478|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 150, False: 328]
  ------------------
 6135|    150|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 4, False: 146]
  ------------------
 6136|      4|                return unexpected_scan_error(
 6137|      4|                    scan_error::invalid_scanned_value,
 6138|      4|                    "Too many fill characters before value, "
 6139|      4|                    "precision exceeded before reading value");
 6140|      4|            }
 6141|       |
 6142|    146|            const auto initial_width = specs.precision - prefix_width;
 6143|    146|            auto max_width_view =
 6144|    146|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    146|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    146|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    146|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    146|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    146|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 146, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    146|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    146|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    146|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    146|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    146|    }                                                  \
  |  |  |  | 3667|    146|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|    328|        else {
 6150|    328|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    328|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    328|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    328|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 328, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    328|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    328|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    328|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    328|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    328|    }                                                  \
  |  | 3667|    328|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    328|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|      0|                                             specs, value, loc));
 6152|       |
 6153|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 0]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|      0|        }
 6159|       |
 6160|       |        // Read postfix
 6161|      0|        std::ptrdiff_t postfix_width = 0;
 6162|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 0, False: 0]
  ------------------
 6163|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6166|      0|                                 value_width));
 6167|      0|            std::tie(it, postfix_width) = postfix_result;
 6168|      0|        }
 6169|       |
 6170|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|      0|                                                 value_width, postfix_width);
 6172|      0|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 0]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|      0|        return it;
 6177|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKwEERT_:
 6181|  3.31k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  3.31k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  3.31k|            auto rd = make_reader<T, char_type>();
 6187|  3.31k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 82, False: 3.23k]
  |  |  ------------------
  ------------------
 6188|     82|                return unexpected(e);
 6189|     82|            }
 6190|       |
 6191|  3.23k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  3.31k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6112|  3.23k|    {
 6113|  3.23k|        const bool need_skipped_width =
 6114|  3.23k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 1.12k, False: 2.11k]
  |  Branch (6114:33): [True: 348, False: 1.76k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  3.23k|        auto it = rng.begin();
 6118|  3.23k|        std::ptrdiff_t prefix_width = 0;
 6119|  3.23k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 354, False: 2.87k]
  ------------------
 6120|    354|            auto max_width_view = take_width(rng, specs.precision);
 6121|    354|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    354|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    354|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    354|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    354|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 354]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    354|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    354|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    354|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    354|            it = prefix_result.first.base();
 6124|    354|            prefix_width = prefix_result.second;
 6125|    354|        }
 6126|  2.87k|        else {
 6127|  2.87k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  2.87k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.87k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.87k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.87k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  2.87k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.87k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  2.87k|            std::tie(it, prefix_width) = prefix_result;
 6129|  2.87k|        }
 6130|  3.23k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  3.23k|        std::ptrdiff_t value_width = 0;
 6134|  3.23k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 354, False: 2.87k]
  ------------------
 6135|    354|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 6, False: 348]
  ------------------
 6136|      6|                return unexpected_scan_error(
 6137|      6|                    scan_error::invalid_scanned_value,
 6138|      6|                    "Too many fill characters before value, "
 6139|      6|                    "precision exceeded before reading value");
 6140|      6|            }
 6141|       |
 6142|    348|            const auto initial_width = specs.precision - prefix_width;
 6143|    348|            auto max_width_view =
 6144|    348|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    348|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    348|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    348|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    348|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    348|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 188, False: 160]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    188|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    188|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    188|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    188|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    188|    }                                                  \
  |  |  |  | 3667|    348|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    160|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|    160|            it = w_it.base();
 6147|    160|            value_width = initial_width - w_it.count();
 6148|    160|        }
 6149|  2.87k|        else {
 6150|  2.87k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  2.87k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  2.87k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  2.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 2.13k, False: 742]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  2.13k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  2.13k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  2.13k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  2.13k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  2.13k|    }                                                  \
  |  | 3667|  2.87k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  2.87k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    742|                                             specs, value, loc));
 6152|       |
 6153|    742|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 372, False: 370]
  ------------------
 6154|    372|                value_width = calculate_text_width(
 6155|    372|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|    372|                        .view());
 6157|    372|            }
 6158|    742|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    902|        std::ptrdiff_t postfix_width = 0;
 6162|    902|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 616, False: 286]
  ------------------
 6163|    616|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    616|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    616|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    616|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    616|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 616]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    616|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    616|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    616|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    616|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    616|                                 value_width));
 6167|    616|            std::tie(it, postfix_width) = postfix_result;
 6168|    616|        }
 6169|       |
 6170|    902|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    902|                                                 value_width, postfix_width);
 6172|    902|            !e) {
  ------------------
  |  Branch (6172:13): [True: 164, False: 738]
  ------------------
 6173|    164|            return unexpected(e);
 6174|    164|        }
 6175|       |
 6176|    738|        return it;
 6177|    902|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6181|  3.31k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  3.31k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  3.31k|            auto rd = make_reader<T, char_type>();
 6187|  3.31k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 82, False: 3.23k]
  |  |  ------------------
  ------------------
 6188|     82|                return unexpected(e);
 6189|     82|            }
 6190|       |
 6191|  3.23k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  3.31k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6112|  3.23k|    {
 6113|  3.23k|        const bool need_skipped_width =
 6114|  3.23k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 1.12k, False: 2.11k]
  |  Branch (6114:33): [True: 348, False: 1.76k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  3.23k|        auto it = rng.begin();
 6118|  3.23k|        std::ptrdiff_t prefix_width = 0;
 6119|  3.23k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 354, False: 2.87k]
  ------------------
 6120|    354|            auto max_width_view = take_width(rng, specs.precision);
 6121|    354|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    354|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    354|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    354|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    354|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 354]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    354|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    354|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    354|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    354|            it = prefix_result.first.base();
 6124|    354|            prefix_width = prefix_result.second;
 6125|    354|        }
 6126|  2.87k|        else {
 6127|  2.87k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  2.87k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.87k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.87k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.87k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  2.87k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.87k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  2.87k|            std::tie(it, prefix_width) = prefix_result;
 6129|  2.87k|        }
 6130|  3.23k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  3.23k|        std::ptrdiff_t value_width = 0;
 6134|  3.23k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 354, False: 2.87k]
  ------------------
 6135|    354|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 6, False: 348]
  ------------------
 6136|      6|                return unexpected_scan_error(
 6137|      6|                    scan_error::invalid_scanned_value,
 6138|      6|                    "Too many fill characters before value, "
 6139|      6|                    "precision exceeded before reading value");
 6140|      6|            }
 6141|       |
 6142|    348|            const auto initial_width = specs.precision - prefix_width;
 6143|    348|            auto max_width_view =
 6144|    348|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    348|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    348|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    348|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    348|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    348|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 188, False: 160]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    188|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    188|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    188|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    188|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    188|    }                                                  \
  |  |  |  | 3667|    348|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    160|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|    160|            it = w_it.base();
 6147|    160|            value_width = initial_width - w_it.count();
 6148|    160|        }
 6149|  2.87k|        else {
 6150|  2.87k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  2.87k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  2.87k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  2.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 2.13k, False: 742]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  2.13k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  2.13k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  2.13k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  2.13k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  2.13k|    }                                                  \
  |  | 3667|  2.87k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  2.87k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    742|                                             specs, value, loc));
 6152|       |
 6153|    742|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 372, False: 370]
  ------------------
 6154|    372|                value_width = calculate_text_width(
 6155|    372|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|    372|                        .view());
 6157|    372|            }
 6158|    742|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    902|        std::ptrdiff_t postfix_width = 0;
 6162|    902|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 616, False: 286]
  ------------------
 6163|    616|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    616|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    616|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    616|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    616|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 616]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    616|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    616|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    616|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    616|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    616|                                 value_width));
 6167|    616|            std::tie(it, postfix_width) = postfix_result;
 6168|    616|        }
 6169|       |
 6170|    902|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    902|                                                 value_width, postfix_width);
 6172|    902|            !e) {
  ------------------
  |  Branch (6172:13): [True: 164, False: 738]
  ------------------
 6173|    164|            return unexpected(e);
 6174|    164|        }
 6175|       |
 6176|    738|        return it;
 6177|    902|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6181|  3.31k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  3.31k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  3.31k|            auto rd = make_reader<T, char_type>();
 6187|  3.31k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 82, False: 3.23k]
  |  |  ------------------
  ------------------
 6188|     82|                return unexpected(e);
 6189|     82|            }
 6190|       |
 6191|  3.23k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  3.31k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6112|  3.23k|    {
 6113|  3.23k|        const bool need_skipped_width =
 6114|  3.23k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 1.12k, False: 2.11k]
  |  Branch (6114:33): [True: 348, False: 1.76k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  3.23k|        auto it = rng.begin();
 6118|  3.23k|        std::ptrdiff_t prefix_width = 0;
 6119|  3.23k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 354, False: 2.87k]
  ------------------
 6120|    354|            auto max_width_view = take_width(rng, specs.precision);
 6121|    354|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    354|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    354|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    354|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    354|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 354]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    354|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    354|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    354|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    354|            it = prefix_result.first.base();
 6124|    354|            prefix_width = prefix_result.second;
 6125|    354|        }
 6126|  2.87k|        else {
 6127|  2.87k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  2.87k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.87k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.87k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.87k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  2.87k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.87k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  2.87k|            std::tie(it, prefix_width) = prefix_result;
 6129|  2.87k|        }
 6130|  3.23k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  3.23k|        std::ptrdiff_t value_width = 0;
 6134|  3.23k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 354, False: 2.87k]
  ------------------
 6135|    354|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 6, False: 348]
  ------------------
 6136|      6|                return unexpected_scan_error(
 6137|      6|                    scan_error::invalid_scanned_value,
 6138|      6|                    "Too many fill characters before value, "
 6139|      6|                    "precision exceeded before reading value");
 6140|      6|            }
 6141|       |
 6142|    348|            const auto initial_width = specs.precision - prefix_width;
 6143|    348|            auto max_width_view =
 6144|    348|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    348|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    348|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    348|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    348|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    348|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 188, False: 160]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    188|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    188|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    188|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    188|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    188|    }                                                  \
  |  |  |  | 3667|    348|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    160|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|    160|            it = w_it.base();
 6147|    160|            value_width = initial_width - w_it.count();
 6148|    160|        }
 6149|  2.87k|        else {
 6150|  2.87k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  2.87k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  2.87k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  2.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 2.13k, False: 742]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  2.13k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  2.13k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  2.13k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  2.13k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  2.13k|    }                                                  \
  |  | 3667|  2.87k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  2.87k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    742|                                             specs, value, loc));
 6152|       |
 6153|    742|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 372, False: 370]
  ------------------
 6154|    372|                value_width = calculate_text_width(
 6155|    372|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|    372|                        .view());
 6157|    372|            }
 6158|    742|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    902|        std::ptrdiff_t postfix_width = 0;
 6162|    902|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 616, False: 286]
  ------------------
 6163|    616|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    616|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    616|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    616|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    616|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 616]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    616|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    616|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    616|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    616|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    616|                                 value_width));
 6167|    616|            std::tie(it, postfix_width) = postfix_result;
 6168|    616|        }
 6169|       |
 6170|    902|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    902|                                                 value_width, postfix_width);
 6172|    902|            !e) {
  ------------------
  |  Branch (6172:13): [True: 164, False: 738]
  ------------------
 6173|    164|            return unexpected(e);
 6174|    164|        }
 6175|       |
 6176|    738|        return it;
 6177|    902|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|    630|    {
 3481|    630|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|    630|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    630|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    630|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    630|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 630]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    630|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    630|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|    630|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|       |        if constexpr (!std::is_signed_v<T>) {
 3485|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3486|       |                return unexpected_scan_error(
 3487|       |                    scan_error::invalid_scanned_value,
 3488|       |                    "Unexpected '-' sign when parsing an "
 3489|       |                    "unsigned value");
 3490|       |            }
 3491|       |        }
 3492|       |
 3493|    630|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 630]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  1.26k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    630|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    630|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    630|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    630|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 630]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    630|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    630|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  1.26k|                parse_integer_digits_without_thsep(
 3500|  1.26k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  1.26k|                    prefix_result.parsed_base));
 3502|       |
 3503|  1.26k|        auto buf = make_contiguous_buffer(
 3504|  1.26k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  1.26k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    630|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    630|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    630|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    630|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 630, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    630|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    630|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    630|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    630|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    630|    }                                                  \
  |  |  |  | 3667|    630|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|      0|                                    prefix_result.parsed_base));
 3508|       |
 3509|      0|        return ranges::next(prefix_result.iterator,
 3510|      0|                            ranges::distance(buf.view().begin(), result_it));
 3511|  1.26k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|    630|    {
 3481|    630|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|    630|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    630|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    630|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    630|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 630]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    630|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    630|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|    630|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|    630|        if constexpr (!std::is_signed_v<T>) {
 3485|    630|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3485:17): [True: 0, False: 630]
  ------------------
 3486|      0|                return unexpected_scan_error(
 3487|      0|                    scan_error::invalid_scanned_value,
 3488|      0|                    "Unexpected '-' sign when parsing an "
 3489|      0|                    "unsigned value");
 3490|      0|            }
 3491|    630|        }
 3492|       |
 3493|    630|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 630]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  1.26k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    630|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    630|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    630|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    630|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 630]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    630|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    630|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  1.26k|                parse_integer_digits_without_thsep(
 3500|  1.26k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  1.26k|                    prefix_result.parsed_base));
 3502|       |
 3503|  1.26k|        auto buf = make_contiguous_buffer(
 3504|  1.26k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  1.26k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    630|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    630|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    630|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    630|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 630, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    630|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    630|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    630|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    630|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    630|    }                                                  \
  |  |  |  | 3667|    630|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|      0|                                    prefix_result.parsed_base));
 3508|       |
 3509|      0|        return ranges::next(prefix_result.iterator,
 3510|      0|                            ranges::distance(buf.view().begin(), result_it));
 3511|  1.26k|    }

LLVMFuzzerTestOneInput:
   68|  6.07k|{
   69|  6.07k|    scn::fuzz::run(data, size);
   70|  6.07k|    return 0;
   71|  6.07k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   51|  6.07k|{
   52|  6.07k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (52:9): [True: 0, False: 6.07k]
  |  Branch (52:35): [True: 0, False: 6.07k]
  ------------------
   53|      0|        return;
   54|      0|    }
   55|       |
   56|  6.07k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   57|       |
   58|  6.07k|    run_for_source(sv);
   59|  6.07k|    run_for_source(wsv_reinterpret);
   60|  6.07k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (60:9): [True: 6.07k, False: 0]
  ------------------
   61|  6.07k|        run_for_source(wsv_transcode);
   62|  6.07k|    }
   63|  6.07k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT_:
   36|  6.07k|{
   37|  6.07k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  6.07k|    run_for_type<char_type>(source);
   40|  6.07k|    run_for_type<int>(source);
   41|  6.07k|    run_for_type<unsigned>(source);
   42|  6.07k|    run_for_type<double>(source);
   43|  6.07k|    run_for_type<bool>(source);
   44|  6.07k|    run_for_type<void*>(source);
   45|  6.07k|    run_for_type<std::string>(source);
   46|  6.07k|    run_for_type<std::wstring>(source);
   47|  6.07k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  6.07k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIcNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  6.07k|{
   25|  6.07k|    {
   26|  6.07k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  6.07k|    }
   28|  6.07k|    {
   29|  6.07k|        auto _ =
   30|  6.07k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  6.07k|    }
   32|  6.07k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  6.07k|{
   25|  6.07k|    {
   26|  6.07k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  6.07k|    }
   28|  6.07k|    {
   29|  6.07k|        auto _ =
   30|  6.07k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  6.07k|    }
   32|  6.07k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  6.07k|{
   25|  6.07k|    {
   26|  6.07k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  6.07k|    }
   28|  6.07k|    {
   29|  6.07k|        auto _ =
   30|  6.07k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  6.07k|    }
   32|  6.07k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  6.07k|{
   25|  6.07k|    {
   26|  6.07k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  6.07k|    }
   28|  6.07k|    {
   29|  6.07k|        auto _ =
   30|  6.07k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  6.07k|    }
   32|  6.07k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  6.07k|{
   25|  6.07k|    {
   26|  6.07k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  6.07k|    }
   28|  6.07k|    {
   29|  6.07k|        auto _ =
   30|  6.07k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  6.07k|    }
   32|  6.07k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEvRT0_:
   24|  6.07k|{
   25|  6.07k|    {
   26|  6.07k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  6.07k|    }
   28|  6.07k|    {
   29|  6.07k|        auto _ =
   30|  6.07k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  6.07k|    }
   32|  6.07k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIcS6_EEEEvRT0_:
   24|  6.07k|{
   25|  6.07k|    {
   26|  6.07k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  6.07k|    }
   28|  6.07k|    {
   29|  6.07k|        auto _ =
   30|  6.07k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  6.07k|    }
   32|  6.07k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIcNS5_IcEEEEEEvRT0_:
   24|  6.07k|{
   25|  6.07k|    {
   26|  6.07k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  6.07k|    }
   28|  6.07k|    {
   29|  6.07k|        auto _ =
   30|  6.07k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  6.07k|    }
   32|  6.07k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEES7_EEvRT0_:
   24|  6.07k|{
   25|  6.07k|    {
   26|  6.07k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  6.07k|    }
   28|  6.07k|    {
   29|  6.07k|        auto _ =
   30|  6.07k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  6.07k|    }
   32|  6.07k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT_:
   36|  12.1k|{
   37|  12.1k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  12.1k|    run_for_type<char_type>(source);
   40|  12.1k|    run_for_type<int>(source);
   41|  12.1k|    run_for_type<unsigned>(source);
   42|  12.1k|    run_for_type<double>(source);
   43|  12.1k|    run_for_type<bool>(source);
   44|  12.1k|    run_for_type<void*>(source);
   45|  12.1k|    run_for_type<std::string>(source);
   46|  12.1k|    run_for_type<std::wstring>(source);
   47|  12.1k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  12.1k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIwNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  12.1k|{
   25|  12.1k|    {
   26|  12.1k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  12.1k|    }
   28|  12.1k|    {
   29|  12.1k|        auto _ =
   30|  12.1k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  12.1k|    }
   32|  12.1k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  12.1k|{
   25|  12.1k|    {
   26|  12.1k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  12.1k|    }
   28|  12.1k|    {
   29|  12.1k|        auto _ =
   30|  12.1k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  12.1k|    }
   32|  12.1k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  12.1k|{
   25|  12.1k|    {
   26|  12.1k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  12.1k|    }
   28|  12.1k|    {
   29|  12.1k|        auto _ =
   30|  12.1k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  12.1k|    }
   32|  12.1k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  12.1k|{
   25|  12.1k|    {
   26|  12.1k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  12.1k|    }
   28|  12.1k|    {
   29|  12.1k|        auto _ =
   30|  12.1k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  12.1k|    }
   32|  12.1k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  12.1k|{
   25|  12.1k|    {
   26|  12.1k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  12.1k|    }
   28|  12.1k|    {
   29|  12.1k|        auto _ =
   30|  12.1k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  12.1k|    }
   32|  12.1k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEvRT0_:
   24|  12.1k|{
   25|  12.1k|    {
   26|  12.1k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  12.1k|    }
   28|  12.1k|    {
   29|  12.1k|        auto _ =
   30|  12.1k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  12.1k|    }
   32|  12.1k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIwNS5_IwEEEEEEvRT0_:
   24|  12.1k|{
   25|  12.1k|    {
   26|  12.1k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  12.1k|    }
   28|  12.1k|    {
   29|  12.1k|        auto _ =
   30|  12.1k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  12.1k|    }
   32|  12.1k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIwS6_EEEEvRT0_:
   24|  12.1k|{
   25|  12.1k|    {
   26|  12.1k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  12.1k|    }
   28|  12.1k|    {
   29|  12.1k|        auto _ =
   30|  12.1k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  12.1k|    }
   32|  12.1k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEES7_EEvRT0_:
   24|  12.1k|{
   25|  12.1k|    {
   26|  12.1k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  12.1k|    }
   28|  12.1k|    {
   29|  12.1k|        auto _ =
   30|  12.1k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  12.1k|    }
   32|  12.1k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  6.07k|{
   52|  6.07k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  6.07k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.07k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  6.07k|    string_buffer.resize(size);
   56|  6.07k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  6.07k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  6.07k|    const auto wsv_reinterpret_size =
   61|  6.07k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 91, False: 5.98k]
  ------------------
   62|  6.07k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  6.07k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  6.07k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  6.07k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  6.07k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  6.07k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  6.07k|}

