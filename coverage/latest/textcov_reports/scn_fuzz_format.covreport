_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIccEEDaSL_SV_:
  859|  2.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIwcEEDaSL_SV_:
  859|  1.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  859|  4.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3806|  23.8M|{
 3807|  23.8M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3807:19): [Folded - Ignored]
  ------------------
 3808|  23.8M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|  23.8M|    }
 3810|  23.8M|    else if constexpr (sizeof(U) == 2) {
 3811|  23.8M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|  23.8M|    }
 3813|  23.8M|    else {
 3814|       |        // utf-32
 3815|  23.8M|        static_assert(sizeof(U) == 4);
 3816|  23.8M|        SCN_UNUSED(ch);
 3817|  23.8M|        return 1;
 3818|  23.8M|    }
 3819|  23.8M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3770|  23.8M|{
 3771|  23.8M|    static_assert(sizeof(U8) == 1);
 3772|       |
 3773|  23.8M|    SCN_GCC_COMPAT_PUSH
 3774|  23.8M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3775|  23.8M|    constexpr char lengths[] =
 3776|  23.8M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3777|  23.8M|        "\1\1\1\1\1\1\1\1"
 3778|  23.8M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3779|       |                            // byte
 3780|  23.8M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3781|  23.8M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3782|  23.8M|        "\4";               // highest bits 11110 -> 4-byte cp
 3783|  23.8M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3784|  23.8M|    SCN_GCC_COMPAT_POP
 3785|  23.8M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|  21.9M|{
 4013|  21.9M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4013:19): [Folded - Ignored]
  ------------------
 4014|  21.9M|        return decode_utf8_code_point_exhaustive(input);
 4015|  21.9M|    }
 4016|  21.9M|    else if constexpr (sizeof(CharT) == 2) {
 4017|  21.9M|        return decode_utf16_code_point_exhaustive(input);
 4018|  21.9M|    }
 4019|  21.9M|    else {
 4020|  21.9M|        SCN_EXPECT(input.size() == 1);
 4021|  21.9M|        auto cp = static_cast<char32_t>(input.front());
 4022|  21.9M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4023|  21.9M|            return invalid_code_point;
 4024|  21.9M|        }
 4025|  21.9M|        return cp;
 4026|  21.9M|    }
 4027|  21.9M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3825|  21.9M|{
 3826|  21.9M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  21.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3827|       |
 3828|  21.9M|    const auto is_trailing_code_unit = [](char ch) {
 3829|  21.9M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|  21.9M|    };
 3831|       |
 3832|  21.9M|    if (input.size() == 1) {
  ------------------
  |  Branch (3832:9): [True: 19.8M, False: 2.13M]
  ------------------
 3833|  19.8M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3833:13): [True: 210, False: 19.8M]
  ------------------
 3834|    210|            SCN_UNLIKELY_ATTR
 3835|    210|            return invalid_code_point;
 3836|    210|        }
 3837|  19.8M|        return static_cast<char32_t>(input[0]);
 3838|  19.8M|    }
 3839|       |
 3840|  2.13M|    if (input.size() == 2) {
  ------------------
  |  Branch (3840:9): [True: 2.04M, False: 95.2k]
  ------------------
 3841|  2.04M|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3841:13): [True: 78, False: 2.04M]
  ------------------
 3842|     78|            SCN_UNLIKELY_ATTR
 3843|     78|            return invalid_code_point;
 3844|     78|        }
 3845|  2.04M|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3845:13): [True: 41.6k, False: 1.99M]
  ------------------
 3846|  41.6k|            SCN_UNLIKELY_ATTR
 3847|  41.6k|            return invalid_code_point;
 3848|  41.6k|        }
 3849|       |
 3850|  1.99M|        char32_t cp{};
 3851|  1.99M|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3852|  1.99M|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3853|  1.99M|        return cp;
 3854|  2.04M|    }
 3855|       |
 3856|  95.2k|    if (input.size() == 3) {
  ------------------
  |  Branch (3856:9): [True: 70.0k, False: 25.1k]
  ------------------
 3857|  70.0k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3857:13): [True: 18, False: 70.0k]
  ------------------
 3858|     18|            SCN_UNLIKELY_ATTR
 3859|     18|            return invalid_code_point;
 3860|     18|        }
 3861|  70.0k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3861:13): [True: 24.0k, False: 45.9k]
  ------------------
 3862|  70.0k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3862:13): [True: 2.46k, False: 43.4k]
  ------------------
 3863|  26.5k|            SCN_UNLIKELY_ATTR
 3864|  26.5k|            return invalid_code_point;
 3865|  26.5k|        }
 3866|       |
 3867|  43.4k|        char32_t cp{};
 3868|  43.4k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3869|  43.4k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3870|  43.4k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3871|  43.4k|        return cp;
 3872|  70.0k|    }
 3873|       |
 3874|  25.1k|    if (input.size() == 4) {
  ------------------
  |  Branch (3874:9): [True: 25.1k, False: 0]
  ------------------
 3875|  25.1k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3875:13): [True: 0, False: 25.1k]
  ------------------
 3876|      0|            SCN_UNLIKELY_ATTR
 3877|      0|            return invalid_code_point;
 3878|      0|        }
 3879|  25.1k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3879:13): [True: 8.35k, False: 16.8k]
  ------------------
 3880|  8.35k|            SCN_UNLIKELY_ATTR
 3881|  8.35k|            return invalid_code_point;
 3882|  8.35k|        }
 3883|  16.8k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3883:13): [True: 3.15k, False: 13.6k]
  ------------------
 3884|  16.8k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3884:13): [True: 1.22k, False: 12.4k]
  ------------------
 3885|  16.8k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3885:13): [True: 1.08k, False: 11.3k]
  ------------------
 3886|  5.45k|            SCN_UNLIKELY_ATTR
 3887|  5.45k|            return invalid_code_point;
 3888|  5.45k|        }
 3889|       |
 3890|  11.3k|        char32_t cp{};
 3891|  11.3k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3892|  11.3k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3893|  11.3k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3894|  11.3k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3895|  11.3k|        return cp;
 3896|  16.8k|    }
 3897|       |
 3898|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3899|       |    // gcc 7 thinks we'll get here, even when we won't
 3900|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3901|      0|#endif
 3902|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3903|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3828|  2.20M|    const auto is_trailing_code_unit = [](char ch) {
 3829|  2.20M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|  2.20M|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3698|  10.3M|{
 3699|  10.3M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3699:19): [Folded - Ignored]
  |  Branch (3699:19): [Folded - Ignored]
  ------------------
 3700|  10.3M|                                          decltype(first), decltype(last)> &&
 3701|  10.3M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3701:19): [Folded - Ignored]
  ------------------
 3702|  10.3M|        return {first, last};
 3703|  10.3M|    }
 3704|  10.3M|    else {
 3705|  10.3M|        return {to_address(first), static_cast<size_t>(std::distance(
 3706|  10.3M|                                       to_address(first), to_address(last)))};
 3707|  10.3M|    }
 3708|  10.3M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  31.2M|{
  326|  31.2M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  31.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  31.2M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  31.2M|{
  304|  31.2M|    return p;
  305|  31.2M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3729|  7.40M|{
 3730|  7.40M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3730:19): [Folded - Ignored]
  |  Branch (3730:19): [Folded - Ignored]
  ------------------
 3731|  7.40M|                      typename std::basic_string_view<CharT>::iterator,
 3732|  7.40M|                      decltype(it)> &&
 3733|  7.40M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3733:19): [Folded - Ignored]
  ------------------
 3734|  7.40M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  7.40M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3735|  7.40M|        return it;
 3736|  7.40M|    }
 3737|  7.40M|    else {
 3738|  7.40M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3739|  7.40M|    }
 3740|  7.40M|}
_ZN3scn2v34scanIJcERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  18.6k|{
 8867|  18.6k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  18.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  18.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  18.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.6k|    static_cast<    \
  |  |  929|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.6k|    static_cast<    \
  |  |  929|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  18.6k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJcEEEDav:
 5395|  37.3k|{
 5396|  37.3k|    detail::check_scan_arg_types<Args...>();
 5397|  37.3k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  37.3k|}
_ZN3scn2v36detail20check_scan_arg_typesIJcEEEvv:
 5134|  37.3k|{
 5135|  37.3k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  37.3k|                  "Scan argument types must be default constructible");
 5137|  37.3k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  37.3k|                  "Scan argument types must be Destructible");
 5139|  37.3k|    static_assert(
 5140|  37.3k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  37.3k|        "Scan argument types must not be references");
 5142|  37.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEEC2Ev:
 5348|  37.3k|    {
 5349|  37.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE12make_argptrsIJcEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  37.3k|    {
 5360|  37.3k|        return {detail::make_arg<
 5361|  37.3k|            kind, Context,
 5362|  37.3k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  37.3k|                                 typename Context::char_type>::value>(args)...};
 5364|  37.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE12EcvEEPvRT2_:
 5169|  37.3k|{
 5170|  37.3k|    return make_value<Context>(value).ref_value;
 5171|  37.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEcEEDaRT0_:
 5119|  37.3k|{
 5120|  37.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  37.3k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  37.3k|                                  needs_context_tag>) {
 5124|  37.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  37.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  37.3k|    }
 5126|  37.3k|    else {
 5127|  37.3k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  37.3k|            value, context_tag<Context>{}));
 5129|  37.3k|    }
 5130|  37.3k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERc:
 4987|  37.3k|    {
 4988|  37.3k|        if constexpr (std::is_same_v<char_type, char> &&
  ------------------
  |  Branch (4988:23): [Folded - Ignored]
  |  Branch (4988:23): [Folded - Ignored]
  ------------------
 4989|  37.3k|                      !is_type_disabled<char_type>) {
  ------------------
  |  Branch (4989:23): [Folded - Ignored]
  ------------------
 4990|  37.3k|            return val;
 4991|  37.3k|        }
 4992|  37.3k|        else if constexpr (is_type_disabled<char_type>) {
 4993|  37.3k|            return unscannable_disabled{val};
 4994|  37.3k|        }
 4995|  37.3k|        else {
 4996|  37.3k|            SCN_UNUSED(val);
 4997|  37.3k|            return unscannable_char{};
 4998|  37.3k|        }
 4999|  37.3k|    }
_ZN3scn2v36detail15make_value_implIRcEEDaOT_:
 5088|  37.3k|{
 5089|  37.3k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  37.3k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  37.3k|    constexpr bool scannable_char =
 5093|  37.3k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  37.3k|    static_assert(scannable_char,
 5095|  37.3k|                  "Cannot scan an argument of an unsupported character "
 5096|  37.3k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  37.3k|    constexpr bool scannable_const =
 5099|  37.3k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  37.3k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  37.3k|    constexpr bool scannable_disabled =
 5103|  37.3k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  37.3k|    static_assert(scannable_disabled,
 5105|  37.3k|                  "Cannot scan an argument that has been disabled by "
 5106|  37.3k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  37.3k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  37.3k|    static_assert(
 5110|  37.3k|        scannable,
 5111|  37.3k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  37.3k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  37.3k|    return arg_value{arg};
 5115|  37.3k|}
_ZN3scn2v36detail9arg_valueC2IcEERT_:
 4901|  37.3k|    {
 4902|  37.3k|    }
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8653|   168k|{
 8654|   168k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   168k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8655|   168k|}
_ZN3scn2v36detail13vscan_genericIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISN_EEEE:
 8590|   168k|{
 8591|   168k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   168k|    auto result = vscan_impl(buffer, format, args);
 8594|   168k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   168k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 165k, False: 2.51k]
  |  |  ------------------
  ------------------
 8595|   165k|        return unexpected(result.error());
 8596|   165k|    }
 8597|  2.51k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  2.51k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   168k|}
_ZN3scn2v36detail16make_scan_bufferINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRKT_:
 4719|   336k|{
 4720|   336k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   336k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   336k|                  "\n"
 4724|   336k|                  "Unsupported range type given as input to a scanning "
 4725|   336k|                  "function.\n"
 4726|   336k|                  "A range needs to have a character type (value type) "
 4727|   336k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   336k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   336k|                  "to be included.\n"
 4730|   336k|                  "See the scnlib documentation for more details.");
 4731|   336k|    static_assert(
 4732|   336k|        !std::is_same_v<T, custom_char_traits>,
 4733|   336k|        "\n"
 4734|   336k|        "Unsupported range type given as input to a scanning "
 4735|   336k|        "function.\n"
 4736|   336k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   336k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   336k|        "not supported.");
 4739|   336k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   336k|                  "\n"
 4741|   336k|                  "Unsupported range type given as input to a scanning "
 4742|   336k|                  "function.\n"
 4743|   336k|                  "file_marker_found cannot be used as an "
 4744|   336k|                  "source range type to scn::scan.\n"
 4745|   336k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   336k|                  "and do not provide an explicit source range, "
 4747|   336k|                  "or use scn::scan with a FILE* directly.");
 4748|   336k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   336k|                  "\n"
 4750|   336k|                  "Unsupported range type given as input to a scanning "
 4751|   336k|                  "function.\n"
 4752|   336k|                  "In order to be scannable, a range needs to satisfy "
 4753|   336k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   336k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   336k|                  "\n"
 4756|   336k|                  "Unsupported range type given as input to a scanning "
 4757|   336k|                  "function.\n"
 4758|   336k|                  "A range needs to model forward_range and have a valid "
 4759|   336k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   336k|                  "Examples of scannable ranges are std::string, "
 4761|   336k|                  "std::string_view, "
 4762|   336k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   336k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   336k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   336k|}
_ZN3scn2v36detail17_make_scan_buffer4implIcEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 4611|   336k|{
 4612|   336k|    if constexpr (is_valid_char_type<CharT>) {
  ------------------
  |  Branch (4612:19): [Folded - Ignored]
  ------------------
 4613|   336k|        return r;
 4614|       |        // return make_string_scan_buffer(r);
 4615|   336k|    }
 4616|   336k|    else {
 4617|   336k|        return invalid_char_type{};
 4618|   336k|    }
 4619|   336k|}
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1597|  1.01M|    {
 1598|  1.01M|        return has_value();
 1599|  1.01M|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  484|  2.02M|    {
  485|  2.02M|        return m_has_value;
  486|  2.02M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1603|  1.00M|    {
 1604|  1.00M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.00M|        return this->get_unexpected().error();
 1606|  1.00M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.00M|    {
  468|  1.00M|        return m_unexpected;
  469|  1.00M|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  360|  6.15M|    {
  361|  6.15M|        return m_unexpected;
  362|  6.15M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  346|  3.47M|    {
  347|  3.47M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  3.47M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  3.47M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|   331k|    {
 1476|   331k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|   331k|    {
  447|   331k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  355|  3.58M|    {
  356|  3.58M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  3.58M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  3.58M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   336k|    {
 1177|   336k|    }
_ZN3scn2v36detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 5922|  5.02k|{
 5923|  5.02k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|  5.02k|                      ranges::iterator_t<SourceRange>>) {
 5925|  5.02k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|  5.02k|    }
 5927|  5.02k|    else {
 5928|  5.02k|        auto it = ranges::begin(source);
 5929|  5.02k|        while (n > 0) {
 5930|  5.02k|            --n;
 5931|  5.02k|            ++it;
 5932|  5.02k|        }
 5933|  5.02k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|  5.02k|    }
 5935|  5.02k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  5.02k|    {
 2724|  5.02k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  5.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  5.02k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  5.02k|    {
 2705|  5.02k|        return decay_copy(t.begin());
 2706|  5.02k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1948|  93.2k|{
 1949|  93.2k|    return SCN_FWD(t);
  ------------------
  |  |  930|  93.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  93.2k|}
_ZN3scn2v36detail27make_vscan_result_range_endINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRT_:
 5909|  5.02k|{
 5910|  5.02k|    return ranges::end(source);
 5911|  5.02k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  5.02k|    {
 2781|  5.02k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  5.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  5.02k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  5.02k|    {
 2763|  5.02k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  5.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  5.02k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_LPv0EEET_S6_:
 3315|  2.68M|    {
 3316|  2.68M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1652|  6.44k|    {
 1653|  6.44k|        return value();
 1654|  6.44k|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1626|  6.44k|    {
 1627|  6.44k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  6.44k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.44k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  6.44k|        return this->get_value();
 1629|  6.44k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  450|  6.44k|    {
  451|  6.44k|        return m_value;
  452|  6.44k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  5.02k|    {
 1430|  5.02k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  436|  5.02k|    {
  437|  5.02k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEcvS6_Ev:
 7974|  37.3k|    {
 7975|  37.3k|        return m_str;
 7976|  37.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJcEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  37.3k|    {
 5426|  37.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE12arg_pointersEv:
 5378|  37.3k|    {
 5379|  37.3k|        return m_argptrs;
 5380|  37.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5477|   336k|    {
 5478|   336k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJcEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  37.3k|{
 8820|  37.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  37.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 37.1k, False: 222]
  |  |  ------------------
  ------------------
 8821|  37.1k|        return unexpected(result.error());
 8822|  37.1k|    }
 8823|    222|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    222|    static_cast<    \
  |  |  929|    222|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    222|    static_cast<    \
  |  |  929|    222|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  37.3k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1597|   336k|    {
 1598|   336k|        return has_value();
 1599|   336k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   672k|    {
  485|   672k|        return m_has_value;
  486|   672k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1603|   331k|    {
 1604|   331k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   331k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   331k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   331k|        return this->get_unexpected().error();
 1606|   331k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   331k|    {
  468|   331k|        return m_unexpected;
  469|   331k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  37.1k|    {
 1476|  37.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  37.1k|    {
  447|  37.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  37.3k|    {
 1177|  37.3k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1652|  5.02k|    {
 1653|  5.02k|        return value();
 1654|  5.02k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  5.02k|    {
 1627|  5.02k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  5.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  5.02k|        return this->get_value();
 1629|  5.02k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  5.02k|    {
  451|  5.02k|        return m_value;
  452|  5.02k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJcEEC2ES8_ONSt3__15tupleIJcEEE:
 5829|    222|    {
 5830|    222|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5680|  5.02k|    {
 5681|  5.02k|    }
_ZN3scn2v36detail25scan_result_value_storageIJcEEC2EONSt3__15tupleIJcEEE:
 5615|    222|    {
 5616|    222|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|    222|    {
 1430|    222|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|    222|    {
  437|    222|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE4argsEv:
 5373|  37.3k|    {
 5374|  37.3k|        return m_args;
 5375|  37.3k|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7690|   336k|{
 7691|   336k|    return s;
 7692|   336k|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7667|   336k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  37.3k|    {
 7971|  37.3k|    }
_ZN3scn2v34scanIJcENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  18.6k|{
 8934|  18.6k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  18.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  18.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  18.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.6k|    static_cast<    \
  |  |  929|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.6k|    static_cast<    \
  |  |  929|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  18.6k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS2_6localeEvEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEERKT0_OSB_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8671|   168k|{
 8672|   168k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   168k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8673|   168k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISR_EEEE:
 8606|   168k|{
 8607|   168k|#if !SCN_DISABLE_LOCALE
 8608|   168k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   168k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   168k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   168k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   168k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   168k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 165k, False: 2.51k]
  |  |  ------------------
  ------------------
 8615|   165k|        return unexpected(result.error());
 8616|   165k|    }
 8617|  2.51k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  2.51k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   168k|}
_ZN3scn2v34scanIJiERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  18.6k|{
 8867|  18.6k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  18.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  18.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  18.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.6k|    static_cast<    \
  |  |  929|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.6k|    static_cast<    \
  |  |  929|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  18.6k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJiEEEDav:
 5395|  37.3k|{
 5396|  37.3k|    detail::check_scan_arg_types<Args...>();
 5397|  37.3k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  37.3k|}
_ZN3scn2v36detail20check_scan_arg_typesIJiEEEvv:
 5134|   112k|{
 5135|   112k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|   112k|                  "Scan argument types must be default constructible");
 5137|   112k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|   112k|                  "Scan argument types must be Destructible");
 5139|   112k|    static_assert(
 5140|   112k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|   112k|        "Scan argument types must not be references");
 5142|   112k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEEC2Ev:
 5348|  37.3k|    {
 5349|  37.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  37.3k|    {
 5360|  37.3k|        return {detail::make_arg<
 5361|  37.3k|            kind, Context,
 5362|  37.3k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  37.3k|                                 typename Context::char_type>::value>(args)...};
 5364|  37.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE3EivEEPvRT2_:
 5169|  37.3k|{
 5170|  37.3k|    return make_value<Context>(value).ref_value;
 5171|  37.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEiEEDaRT0_:
 5119|  37.3k|{
 5120|  37.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  37.3k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  37.3k|                                  needs_context_tag>) {
 5124|  37.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  37.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  37.3k|    }
 5126|  37.3k|    else {
 5127|  37.3k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  37.3k|            value, context_tag<Context>{}));
 5129|  37.3k|    }
 5130|  37.3k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERi:
 4958|  37.3k|    {                                                                        \
 4959|  37.3k|        return val;                                                          \
 4960|  37.3k|    }
_ZN3scn2v36detail15make_value_implIRiEEDaOT_:
 5088|   112k|{
 5089|   112k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|   112k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|   112k|    constexpr bool scannable_char =
 5093|   112k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|   112k|    static_assert(scannable_char,
 5095|   112k|                  "Cannot scan an argument of an unsupported character "
 5096|   112k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|   112k|    constexpr bool scannable_const =
 5099|   112k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|   112k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|   112k|    constexpr bool scannable_disabled =
 5103|   112k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|   112k|    static_assert(scannable_disabled,
 5105|   112k|                  "Cannot scan an argument that has been disabled by "
 5106|   112k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|   112k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|   112k|    static_assert(
 5110|   112k|        scannable,
 5111|   112k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|   112k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|   112k|    return arg_value{arg};
 5115|   112k|}
_ZN3scn2v36detail9arg_valueC2IiEERT_:
 4901|   112k|    {
 4902|   112k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEcvS6_Ev:
 7974|  37.3k|    {
 7975|  37.3k|        return m_str;
 7976|  37.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJiEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  37.3k|    {
 5426|  37.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE12arg_pointersEv:
 5378|  37.3k|    {
 5379|  37.3k|        return m_argptrs;
 5380|  37.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  37.3k|{
 8820|  37.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  37.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 37.3k, False: 0]
  |  |  ------------------
  ------------------
 8821|  37.3k|        return unexpected(result.error());
 8822|  37.3k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  37.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  37.3k|    {
 1476|  37.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  37.3k|    {
  447|  37.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  37.3k|    {
 1177|  37.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE4argsEv:
 5373|  37.3k|    {
 5374|  37.3k|        return m_args;
 5375|  37.3k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  37.3k|    {
 7971|  37.3k|    }
_ZN3scn2v34scanIJiENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  18.6k|{
 8934|  18.6k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  18.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  18.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  18.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.6k|    static_cast<    \
  |  |  929|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.6k|    static_cast<    \
  |  |  929|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  18.6k|}
_ZN3scn2v34scanIJjERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  18.6k|{
 8867|  18.6k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  18.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  18.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  18.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.6k|    static_cast<    \
  |  |  929|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.6k|    static_cast<    \
  |  |  929|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  18.6k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJjEEEDav:
 5395|  37.3k|{
 5396|  37.3k|    detail::check_scan_arg_types<Args...>();
 5397|  37.3k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  37.3k|}
_ZN3scn2v36detail20check_scan_arg_typesIJjEEEvv:
 5134|   112k|{
 5135|   112k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|   112k|                  "Scan argument types must be default constructible");
 5137|   112k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|   112k|                  "Scan argument types must be Destructible");
 5139|   112k|    static_assert(
 5140|   112k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|   112k|        "Scan argument types must not be references");
 5142|   112k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEEC2Ev:
 5348|  37.3k|    {
 5349|  37.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  37.3k|    {
 5360|  37.3k|        return {detail::make_arg<
 5361|  37.3k|            kind, Context,
 5362|  37.3k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  37.3k|                                 typename Context::char_type>::value>(args)...};
 5364|  37.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE8EjvEEPvRT2_:
 5169|  37.3k|{
 5170|  37.3k|    return make_value<Context>(value).ref_value;
 5171|  37.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEjEEDaRT0_:
 5119|  37.3k|{
 5120|  37.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  37.3k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  37.3k|                                  needs_context_tag>) {
 5124|  37.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  37.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  37.3k|    }
 5126|  37.3k|    else {
 5127|  37.3k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  37.3k|            value, context_tag<Context>{}));
 5129|  37.3k|    }
 5130|  37.3k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERj:
 4958|  37.3k|    {                                                                        \
 4959|  37.3k|        return val;                                                          \
 4960|  37.3k|    }
_ZN3scn2v36detail15make_value_implIRjEEDaOT_:
 5088|   112k|{
 5089|   112k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|   112k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|   112k|    constexpr bool scannable_char =
 5093|   112k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|   112k|    static_assert(scannable_char,
 5095|   112k|                  "Cannot scan an argument of an unsupported character "
 5096|   112k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|   112k|    constexpr bool scannable_const =
 5099|   112k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|   112k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|   112k|    constexpr bool scannable_disabled =
 5103|   112k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|   112k|    static_assert(scannable_disabled,
 5105|   112k|                  "Cannot scan an argument that has been disabled by "
 5106|   112k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|   112k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|   112k|    static_assert(
 5110|   112k|        scannable,
 5111|   112k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|   112k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|   112k|    return arg_value{arg};
 5115|   112k|}
_ZN3scn2v36detail9arg_valueC2IjEERT_:
 4901|   112k|    {
 4902|   112k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEcvS6_Ev:
 7974|  37.3k|    {
 7975|  37.3k|        return m_str;
 7976|  37.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJjEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  37.3k|    {
 5426|  37.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE12arg_pointersEv:
 5378|  37.3k|    {
 5379|  37.3k|        return m_argptrs;
 5380|  37.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  37.3k|{
 8820|  37.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  37.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 37.3k, False: 0]
  |  |  ------------------
  ------------------
 8821|  37.3k|        return unexpected(result.error());
 8822|  37.3k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  37.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  37.3k|    {
 1476|  37.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  37.3k|    {
  447|  37.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  37.3k|    {
 1177|  37.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE4argsEv:
 5373|  37.3k|    {
 5374|  37.3k|        return m_args;
 5375|  37.3k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  37.3k|    {
 7971|  37.3k|    }
_ZN3scn2v34scanIJjENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  18.6k|{
 8934|  18.6k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  18.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  18.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  18.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.6k|    static_cast<    \
  |  |  929|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.6k|    static_cast<    \
  |  |  929|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  18.6k|}
_ZN3scn2v34scanIJdERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  18.6k|{
 8867|  18.6k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  18.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  18.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  18.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.6k|    static_cast<    \
  |  |  929|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.6k|    static_cast<    \
  |  |  929|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  18.6k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDav:
 5395|  37.3k|{
 5396|  37.3k|    detail::check_scan_arg_types<Args...>();
 5397|  37.3k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  37.3k|}
_ZN3scn2v36detail20check_scan_arg_typesIJdEEEvv:
 5134|   112k|{
 5135|   112k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|   112k|                  "Scan argument types must be default constructible");
 5137|   112k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|   112k|                  "Scan argument types must be Destructible");
 5139|   112k|    static_assert(
 5140|   112k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|   112k|        "Scan argument types must not be references");
 5142|   112k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2Ev:
 5348|  37.3k|    {
 5349|  37.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  37.3k|    {
 5360|  37.3k|        return {detail::make_arg<
 5361|  37.3k|            kind, Context,
 5362|  37.3k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  37.3k|                                 typename Context::char_type>::value>(args)...};
 5364|  37.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5169|  37.3k|{
 5170|  37.3k|    return make_value<Context>(value).ref_value;
 5171|  37.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
 5119|  37.3k|{
 5120|  37.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  37.3k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  37.3k|                                  needs_context_tag>) {
 5124|  37.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  37.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  37.3k|    }
 5126|  37.3k|    else {
 5127|  37.3k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  37.3k|            value, context_tag<Context>{}));
 5129|  37.3k|    }
 5130|  37.3k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERd:
 4958|  37.3k|    {                                                                        \
 4959|  37.3k|        return val;                                                          \
 4960|  37.3k|    }
_ZN3scn2v36detail15make_value_implIRdEEDaOT_:
 5088|   112k|{
 5089|   112k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|   112k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|   112k|    constexpr bool scannable_char =
 5093|   112k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|   112k|    static_assert(scannable_char,
 5095|   112k|                  "Cannot scan an argument of an unsupported character "
 5096|   112k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|   112k|    constexpr bool scannable_const =
 5099|   112k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|   112k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|   112k|    constexpr bool scannable_disabled =
 5103|   112k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|   112k|    static_assert(scannable_disabled,
 5105|   112k|                  "Cannot scan an argument that has been disabled by "
 5106|   112k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|   112k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|   112k|    static_assert(
 5110|   112k|        scannable,
 5111|   112k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|   112k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|   112k|    return arg_value{arg};
 5115|   112k|}
_ZN3scn2v36detail9arg_valueC2IdEERT_:
 4901|   112k|    {
 4902|   112k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEcvS6_Ev:
 7974|  37.3k|    {
 7975|  37.3k|        return m_str;
 7976|  37.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  37.3k|    {
 5426|  37.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12arg_pointersEv:
 5378|  37.3k|    {
 5379|  37.3k|        return m_argptrs;
 5380|  37.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  37.3k|{
 8820|  37.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  37.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 37.3k, False: 0]
  |  |  ------------------
  ------------------
 8821|  37.3k|        return unexpected(result.error());
 8822|  37.3k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  37.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  37.3k|    {
 1476|  37.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  37.3k|    {
  447|  37.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  37.3k|    {
 1177|  37.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE4argsEv:
 5373|  37.3k|    {
 5374|  37.3k|        return m_args;
 5375|  37.3k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  37.3k|    {
 7971|  37.3k|    }
_ZN3scn2v34scanIJdENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  18.6k|{
 8934|  18.6k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  18.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  18.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  18.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.6k|    static_cast<    \
  |  |  929|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.6k|    static_cast<    \
  |  |  929|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  18.6k|}
_ZN3scn2v34scanIJbERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  18.6k|{
 8867|  18.6k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  18.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  18.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  18.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.6k|    static_cast<    \
  |  |  929|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.6k|    static_cast<    \
  |  |  929|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  18.6k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJbEEEDav:
 5395|  37.3k|{
 5396|  37.3k|    detail::check_scan_arg_types<Args...>();
 5397|  37.3k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  37.3k|}
_ZN3scn2v36detail20check_scan_arg_typesIJbEEEvv:
 5134|   112k|{
 5135|   112k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|   112k|                  "Scan argument types must be default constructible");
 5137|   112k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|   112k|                  "Scan argument types must be Destructible");
 5139|   112k|    static_assert(
 5140|   112k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|   112k|        "Scan argument types must not be references");
 5142|   112k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEEC2Ev:
 5348|  37.3k|    {
 5349|  37.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  37.3k|    {
 5360|  37.3k|        return {detail::make_arg<
 5361|  37.3k|            kind, Context,
 5362|  37.3k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  37.3k|                                 typename Context::char_type>::value>(args)...};
 5364|  37.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE11EbvEEPvRT2_:
 5169|  37.3k|{
 5170|  37.3k|    return make_value<Context>(value).ref_value;
 5171|  37.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEbEEDaRT0_:
 5119|  37.3k|{
 5120|  37.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  37.3k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  37.3k|                                  needs_context_tag>) {
 5124|  37.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  37.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  37.3k|    }
 5126|  37.3k|    else {
 5127|  37.3k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  37.3k|            value, context_tag<Context>{}));
 5129|  37.3k|    }
 5130|  37.3k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERb:
 4958|  37.3k|    {                                                                        \
 4959|  37.3k|        return val;                                                          \
 4960|  37.3k|    }
_ZN3scn2v36detail15make_value_implIRbEEDaOT_:
 5088|   112k|{
 5089|   112k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|   112k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|   112k|    constexpr bool scannable_char =
 5093|   112k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|   112k|    static_assert(scannable_char,
 5095|   112k|                  "Cannot scan an argument of an unsupported character "
 5096|   112k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|   112k|    constexpr bool scannable_const =
 5099|   112k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|   112k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|   112k|    constexpr bool scannable_disabled =
 5103|   112k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|   112k|    static_assert(scannable_disabled,
 5105|   112k|                  "Cannot scan an argument that has been disabled by "
 5106|   112k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|   112k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|   112k|    static_assert(
 5110|   112k|        scannable,
 5111|   112k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|   112k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|   112k|    return arg_value{arg};
 5115|   112k|}
_ZN3scn2v36detail9arg_valueC2IbEERT_:
 4901|   112k|    {
 4902|   112k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEcvS6_Ev:
 7974|  37.3k|    {
 7975|  37.3k|        return m_str;
 7976|  37.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJbEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  37.3k|    {
 5426|  37.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE12arg_pointersEv:
 5378|  37.3k|    {
 5379|  37.3k|        return m_argptrs;
 5380|  37.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJbEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  37.3k|{
 8820|  37.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  37.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 37.3k, False: 0]
  |  |  ------------------
  ------------------
 8821|  37.3k|        return unexpected(result.error());
 8822|  37.3k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  37.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  37.3k|    {
 1476|  37.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  37.3k|    {
  447|  37.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  37.3k|    {
 1177|  37.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE4argsEv:
 5373|  37.3k|    {
 5374|  37.3k|        return m_args;
 5375|  37.3k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  37.3k|    {
 7971|  37.3k|    }
_ZN3scn2v34scanIJbENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  18.6k|{
 8934|  18.6k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  18.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  18.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  18.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.6k|    static_cast<    \
  |  |  929|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.6k|    static_cast<    \
  |  |  929|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  18.6k|}
_ZN3scn2v34scanIJPvERNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
 8866|  18.6k|{
 8867|  18.6k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  18.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  18.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  18.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.6k|    static_cast<    \
  |  |  929|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.6k|    static_cast<    \
  |  |  929|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  18.6k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJPvEEEDav:
 5395|  37.3k|{
 5396|  37.3k|    detail::check_scan_arg_types<Args...>();
 5397|  37.3k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  37.3k|}
_ZN3scn2v36detail20check_scan_arg_typesIJPvEEEvv:
 5134|   112k|{
 5135|   112k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|   112k|                  "Scan argument types must be default constructible");
 5137|   112k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|   112k|                  "Scan argument types must be Destructible");
 5139|   112k|    static_assert(
 5140|   112k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|   112k|        "Scan argument types must not be references");
 5142|   112k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEEC2Ev:
 5348|  37.3k|    {
 5349|  37.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE12make_argptrsIJS5_EEENSt3__15arrayIS5_Lm1EEEDpRT_:
 5359|  37.3k|    {
 5360|  37.3k|        return {detail::make_arg<
 5361|  37.3k|            kind, Context,
 5362|  37.3k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  37.3k|                                 typename Context::char_type>::value>(args)...};
 5364|  37.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE15EPvvEES7_RT2_:
 5169|  37.3k|{
 5170|  37.3k|    return make_value<Context>(value).ref_value;
 5171|  37.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEPvEEDaRT0_:
 5119|  37.3k|{
 5120|  37.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  37.3k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  37.3k|                                  needs_context_tag>) {
 5124|  37.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  37.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  37.3k|    }
 5126|  37.3k|    else {
 5127|  37.3k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  37.3k|            value, context_tag<Context>{}));
 5129|  37.3k|    }
 5130|  37.3k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERPv:
 4958|  37.3k|    {                                                                        \
 4959|  37.3k|        return val;                                                          \
 4960|  37.3k|    }
_ZN3scn2v36detail15make_value_implIRPvEEDaOT_:
 5088|   112k|{
 5089|   112k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|   112k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|   112k|    constexpr bool scannable_char =
 5093|   112k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|   112k|    static_assert(scannable_char,
 5095|   112k|                  "Cannot scan an argument of an unsupported character "
 5096|   112k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|   112k|    constexpr bool scannable_const =
 5099|   112k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|   112k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|   112k|    constexpr bool scannable_disabled =
 5103|   112k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|   112k|    static_assert(scannable_disabled,
 5105|   112k|                  "Cannot scan an argument that has been disabled by "
 5106|   112k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|   112k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|   112k|    static_assert(
 5110|   112k|        scannable,
 5111|   112k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|   112k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|   112k|    return arg_value{arg};
 5115|   112k|}
_ZN3scn2v36detail9arg_valueC2IPvEERT_:
 4901|   112k|    {
 4902|   112k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEcvS6_Ev:
 7974|  37.3k|    {
 7975|  37.3k|        return m_str;
 7976|  37.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJPvEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  37.3k|    {
 5426|  37.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE12arg_pointersEv:
 5378|  37.3k|    {
 5379|  37.3k|        return m_argptrs;
 5380|  37.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJPvEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSA_ISC_EEONSt3__15tupleIJSE_EEE:
 8819|  37.3k|{
 8820|  37.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  37.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 37.3k, False: 0]
  |  |  ------------------
  ------------------
 8821|  37.3k|        return unexpected(result.error());
 8822|  37.3k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  37.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEC2ISC_LSA_0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  37.3k|    {
 1476|  37.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  446|  37.3k|    {
  447|  37.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  37.3k|    {
 1177|  37.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE4argsEv:
 5373|  37.3k|    {
 5374|  37.3k|        return m_args;
 5375|  37.3k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  37.3k|    {
 7971|  37.3k|    }
_ZN3scn2v34scanIJPvENSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
 8933|  18.6k|{
 8934|  18.6k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  18.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  18.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  18.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.6k|    static_cast<    \
  |  |  929|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.6k|    static_cast<    \
  |  |  929|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  18.6k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIcS5_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSW_ISQ_E4typeEEEE:
 8866|  18.6k|{
 8867|  18.6k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  18.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  18.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  18.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.6k|    static_cast<    \
  |  |  929|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.6k|    static_cast<    \
  |  |  929|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  18.6k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5395|  37.3k|{
 5396|  37.3k|    detail::check_scan_arg_types<Args...>();
 5397|  37.3k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  37.3k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEvv:
 5134|   112k|{
 5135|   112k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|   112k|                  "Scan argument types must be default constructible");
 5137|   112k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|   112k|                  "Scan argument types must be Destructible");
 5139|   112k|    static_assert(
 5140|   112k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|   112k|        "Scan argument types must not be references");
 5142|   112k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5348|  37.3k|    {
 5349|  37.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  37.3k|    {
 5360|  37.3k|        return {detail::make_arg<
 5361|  37.3k|            kind, Context,
 5362|  37.3k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  37.3k|                                 typename Context::char_type>::value>(args)...};
 5364|  37.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5169|  37.3k|{
 5170|  37.3k|    return make_value<Context>(value).ref_value;
 5171|  37.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5119|  37.3k|{
 5120|  37.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  37.3k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  37.3k|                                  needs_context_tag>) {
 5124|  37.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  37.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  37.3k|    }
 5126|  37.3k|    else {
 5127|  37.3k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  37.3k|            value, context_tag<Context>{}));
 5129|  37.3k|    }
 5130|  37.3k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4958|  37.3k|    {                                                                        \
 4959|  37.3k|        return val;                                                          \
 4960|  37.3k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEDaOT_:
 5088|   112k|{
 5089|   112k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|   112k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|   112k|    constexpr bool scannable_char =
 5093|   112k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|   112k|    static_assert(scannable_char,
 5095|   112k|                  "Cannot scan an argument of an unsupported character "
 5096|   112k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|   112k|    constexpr bool scannable_const =
 5099|   112k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|   112k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|   112k|    constexpr bool scannable_disabled =
 5103|   112k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|   112k|    static_assert(scannable_disabled,
 5105|   112k|                  "Cannot scan an argument that has been disabled by "
 5106|   112k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|   112k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|   112k|    static_assert(
 5110|   112k|        scannable,
 5111|   112k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|   112k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|   112k|    return arg_value{arg};
 5115|   112k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 4901|   112k|    {
 4902|   112k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEcvS6_Ev:
 7974|  37.3k|    {
 7975|  37.3k|        return m_str;
 7976|  37.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  37.3k|    {
 5426|  37.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5378|  37.3k|    {
 5379|  37.3k|        return m_argptrs;
 5380|  37.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|  37.3k|{
 8820|  37.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  37.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 35.7k, False: 1.60k]
  |  |  ------------------
  ------------------
 8821|  35.7k|        return unexpected(result.error());
 8822|  35.7k|    }
 8823|  1.60k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.60k|    static_cast<    \
  |  |  929|  1.60k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.60k|    static_cast<    \
  |  |  929|  1.60k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  37.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|  35.7k|    {
 1476|  35.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  625|  35.7k|    {
  626|  35.7k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  35.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  35.7k|    {
  689|  35.7k|        scn::detail::construct_at(unexpected_ptr(),
  690|  35.7k|                                  std::forward<Args>(args)...);
  691|  35.7k|        m_has_value = false;
  692|  35.7k|    }
_ZN3scn2v36detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  391|   220k|{
  392|   220k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|   220k|        T(std::forward<Args>(args)...);
  394|   220k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  71.5k|    {
  718|  71.5k|        return reinterpret_cast<unexpected<E>*>(
  719|  71.5k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  71.5k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  71.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  37.3k|    {
 1177|  37.3k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5829|  1.60k|    {
 5830|  1.60k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2EONS3_5tupleIJS9_EEE:
 5615|  2.03k|    {
 5616|  2.03k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|  1.60k|    {
 1430|  1.60k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  615|  1.60k|    {
  616|  1.60k|        construct(std::forward<Args>(args)...);
  617|  1.60k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|  1.60k|    {
  682|  1.60k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|  1.60k|        m_has_value = true;
  684|  1.60k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|  1.60k|{
  392|  1.60k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  1.60k|        T(std::forward<Args>(args)...);
  394|  1.60k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5821|  1.60k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  3.20k|    {
  706|  3.20k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  3.20k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  3.20k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5825|  3.20k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5373|  37.3k|    {
 5374|  37.3k|        return m_args;
 5375|  37.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5370|  37.3k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  37.3k|    {
 7971|  37.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  37.3k|    {
  631|  37.3k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 1.60k, False: 35.7k]
  ------------------
  632|  1.60k|            destroy_value();
  633|  1.60k|        }
  634|  35.7k|        else {
  635|  35.7k|            destroy_unexpected();
  636|  35.7k|        }
  637|  37.3k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  37.3k|    {
  675|  37.3k|        return m_has_value;
  676|  37.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|  1.60k|    {
  696|  1.60k|        scn::detail::destroy_at(value_ptr());
  697|  1.60k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  397|  1.60k|{
  398|  1.60k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|  1.60k|        for (auto& elem : *p) {
  400|  1.60k|            scn::detail::destroy_at(&elem);
  401|  1.60k|        }
  402|  1.60k|    }
  403|  1.60k|    else {
  404|  1.60k|        p->~T();
  405|  1.60k|    }
  406|  1.60k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  35.7k|    {
  700|  35.7k|        scn::detail::destroy_at(unexpected_ptr());
  701|  35.7k|    }
_ZN3scn2v36detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  397|   220k|{
  398|   220k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|   220k|        for (auto& elem : *p) {
  400|   220k|            scn::detail::destroy_at(&elem);
  401|   220k|        }
  402|   220k|    }
  403|   220k|    else {
  404|   220k|        p->~T();
  405|   220k|    }
  406|   220k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIcS5_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNS10_ISR_E4typeEEEE:
 8933|  18.6k|{
 8934|  18.6k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  18.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  18.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  18.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.6k|    static_cast<    \
  |  |  929|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.6k|    static_cast<    \
  |  |  929|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  18.6k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIcNS4_IcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNSX_ISR_E4typeEEEE:
 8866|  18.6k|{
 8867|  18.6k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  18.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  18.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  18.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.6k|    static_cast<    \
  |  |  929|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.6k|    static_cast<    \
  |  |  929|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  18.6k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5395|  37.3k|{
 5396|  37.3k|    detail::check_scan_arg_types<Args...>();
 5397|  37.3k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  37.3k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEvv:
 5134|   112k|{
 5135|   112k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|   112k|                  "Scan argument types must be default constructible");
 5137|   112k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|   112k|                  "Scan argument types must be Destructible");
 5139|   112k|    static_assert(
 5140|   112k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|   112k|        "Scan argument types must not be references");
 5142|   112k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5348|  37.3k|    {
 5349|  37.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  37.3k|    {
 5360|  37.3k|        return {detail::make_arg<
 5361|  37.3k|            kind, Context,
 5362|  37.3k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  37.3k|                                 typename Context::char_type>::value>(args)...};
 5364|  37.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5169|  37.3k|{
 5170|  37.3k|    return make_value<Context>(value).ref_value;
 5171|  37.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5119|  37.3k|{
 5120|  37.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  37.3k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  37.3k|                                  needs_context_tag>) {
 5124|  37.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  37.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  37.3k|    }
 5126|  37.3k|    else {
 5127|  37.3k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  37.3k|            value, context_tag<Context>{}));
 5129|  37.3k|    }
 5130|  37.3k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4958|  37.3k|    {                                                                        \
 4959|  37.3k|        return val;                                                          \
 4960|  37.3k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEDaOT_:
 5088|   112k|{
 5089|   112k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|   112k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|   112k|    constexpr bool scannable_char =
 5093|   112k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|   112k|    static_assert(scannable_char,
 5095|   112k|                  "Cannot scan an argument of an unsupported character "
 5096|   112k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|   112k|    constexpr bool scannable_const =
 5099|   112k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|   112k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|   112k|    constexpr bool scannable_disabled =
 5103|   112k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|   112k|    static_assert(scannable_disabled,
 5105|   112k|                  "Cannot scan an argument that has been disabled by "
 5106|   112k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|   112k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|   112k|    static_assert(
 5110|   112k|        scannable,
 5111|   112k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|   112k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|   112k|    return arg_value{arg};
 5115|   112k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 4901|   112k|    {
 4902|   112k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEcvS6_Ev:
 7974|  37.3k|    {
 7975|  37.3k|        return m_str;
 7976|  37.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  37.3k|    {
 5426|  37.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5378|  37.3k|    {
 5379|  37.3k|        return m_argptrs;
 5380|  37.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|  37.3k|{
 8820|  37.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  37.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 35.7k, False: 1.60k]
  |  |  ------------------
  ------------------
 8821|  35.7k|        return unexpected(result.error());
 8822|  35.7k|    }
 8823|  1.60k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.60k|    static_cast<    \
  |  |  929|  1.60k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.60k|    static_cast<    \
  |  |  929|  1.60k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  37.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|  35.7k|    {
 1476|  35.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  625|  35.7k|    {
  626|  35.7k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  35.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  35.7k|    {
  689|  35.7k|        scn::detail::construct_at(unexpected_ptr(),
  690|  35.7k|                                  std::forward<Args>(args)...);
  691|  35.7k|        m_has_value = false;
  692|  35.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  71.5k|    {
  718|  71.5k|        return reinterpret_cast<unexpected<E>*>(
  719|  71.5k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  71.5k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  71.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  37.3k|    {
 1177|  37.3k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5829|  1.60k|    {
 5830|  1.60k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2EONS3_5tupleIJS9_EEE:
 5615|  2.03k|    {
 5616|  2.03k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|  1.60k|    {
 1430|  1.60k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  615|  1.60k|    {
  616|  1.60k|        construct(std::forward<Args>(args)...);
  617|  1.60k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|  1.60k|    {
  682|  1.60k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|  1.60k|        m_has_value = true;
  684|  1.60k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|  1.60k|{
  392|  1.60k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  1.60k|        T(std::forward<Args>(args)...);
  394|  1.60k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5821|  1.60k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  3.20k|    {
  706|  3.20k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  3.20k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  3.20k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5825|  3.20k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5373|  37.3k|    {
 5374|  37.3k|        return m_args;
 5375|  37.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5370|  37.3k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  37.3k|    {
 7971|  37.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  37.3k|    {
  631|  37.3k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 1.60k, False: 35.7k]
  ------------------
  632|  1.60k|            destroy_value();
  633|  1.60k|        }
  634|  35.7k|        else {
  635|  35.7k|            destroy_unexpected();
  636|  35.7k|        }
  637|  37.3k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  37.3k|    {
  675|  37.3k|        return m_has_value;
  676|  37.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|  1.60k|    {
  696|  1.60k|        scn::detail::destroy_at(value_ptr());
  697|  1.60k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  397|  1.60k|{
  398|  1.60k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|  1.60k|        for (auto& elem : *p) {
  400|  1.60k|            scn::detail::destroy_at(&elem);
  401|  1.60k|        }
  402|  1.60k|    }
  403|  1.60k|    else {
  404|  1.60k|        p->~T();
  405|  1.60k|    }
  406|  1.60k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  35.7k|    {
  700|  35.7k|        scn::detail::destroy_at(unexpected_ptr());
  701|  35.7k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIcNS4_IcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNS11_ISS_E4typeEEEE:
 8933|  18.6k|{
 8934|  18.6k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  18.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  18.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  18.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.6k|    static_cast<    \
  |  |  929|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.6k|    static_cast<    \
  |  |  929|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  18.6k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEERS6_vEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  18.6k|{
 8867|  18.6k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  18.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  18.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  18.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.6k|    static_cast<    \
  |  |  929|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.6k|    static_cast<    \
  |  |  929|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  18.6k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEEDav:
 5395|  37.3k|{
 5396|  37.3k|    detail::check_scan_arg_types<Args...>();
 5397|  37.3k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  37.3k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEvv:
 5134|  37.3k|{
 5135|  37.3k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  37.3k|                  "Scan argument types must be default constructible");
 5137|  37.3k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  37.3k|                  "Scan argument types must be Destructible");
 5139|  37.3k|    static_assert(
 5140|  37.3k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  37.3k|        "Scan argument types must not be references");
 5142|  37.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEC2Ev:
 5348|  37.3k|    {
 5349|  37.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  37.3k|    {
 5360|  37.3k|        return {detail::make_arg<
 5361|  37.3k|            kind, Context,
 5362|  37.3k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  37.3k|                                 typename Context::char_type>::value>(args)...};
 5364|  37.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE19ENSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEvEEPvRT2_:
 5169|  37.3k|{
 5170|  37.3k|    return make_value<Context>(value).ref_value;
 5171|  37.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDaRT0_:
 5119|  37.3k|{
 5120|  37.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  37.3k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  37.3k|                                  needs_context_tag>) {
 5124|  37.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  37.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  37.3k|    }
 5126|  37.3k|    else {
 5127|  37.3k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  37.3k|            value, context_tag<Context>{}));
 5129|  37.3k|    }
 5130|  37.3k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 4958|  37.3k|    {                                                                        \
 4959|  37.3k|        return val;                                                          \
 4960|  37.3k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 5088|  37.3k|{
 5089|  37.3k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  37.3k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  37.3k|    constexpr bool scannable_char =
 5093|  37.3k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  37.3k|    static_assert(scannable_char,
 5095|  37.3k|                  "Cannot scan an argument of an unsupported character "
 5096|  37.3k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  37.3k|    constexpr bool scannable_const =
 5099|  37.3k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  37.3k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  37.3k|    constexpr bool scannable_disabled =
 5103|  37.3k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  37.3k|    static_assert(scannable_disabled,
 5105|  37.3k|                  "Cannot scan an argument that has been disabled by "
 5106|  37.3k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  37.3k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  37.3k|    static_assert(
 5110|  37.3k|        scannable,
 5111|  37.3k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  37.3k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  37.3k|    return arg_value{arg};
 5115|  37.3k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 4901|  37.3k|    {
 4902|  37.3k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEcvS6_Ev:
 7974|  37.3k|    {
 7975|  37.3k|        return m_str;
 7976|  37.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  37.3k|    {
 5426|  37.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12arg_pointersEv:
 5378|  37.3k|    {
 5379|  37.3k|        return m_argptrs;
 5380|  37.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8819|  37.3k|{
 8820|  37.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  37.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 35.7k, False: 1.60k]
  |  |  ------------------
  ------------------
 8821|  35.7k|        return unexpected(result.error());
 8822|  35.7k|    }
 8823|  1.60k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.60k|    static_cast<    \
  |  |  929|  1.60k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.60k|    static_cast<    \
  |  |  929|  1.60k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  37.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1475|  35.7k|    {
 1476|  35.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  446|  35.7k|    {
  447|  35.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  37.3k|    {
 1177|  37.3k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5829|  1.60k|    {
 5830|  1.60k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2EONS3_5tupleIJS7_EEE:
 5615|  1.60k|    {
 5616|  1.60k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1429|  1.60k|    {
 1430|  1.60k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  436|  1.60k|    {
  437|  1.60k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE4argsEv:
 5373|  37.3k|    {
 5374|  37.3k|        return m_args;
 5375|  37.3k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  37.3k|    {
 7971|  37.3k|    }
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeERS6_vvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  18.6k|{
 8934|  18.6k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  18.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  18.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  18.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.6k|    static_cast<    \
  |  |  929|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.6k|    static_cast<    \
  |  |  929|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  18.6k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJwEEEDav:
 5395|  74.7k|{
 5396|  74.7k|    detail::check_scan_arg_types<Args...>();
 5397|  74.7k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  74.7k|}
_ZN3scn2v36detail20check_scan_arg_typesIJwEEEvv:
 5134|  74.7k|{
 5135|  74.7k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  74.7k|                  "Scan argument types must be default constructible");
 5137|  74.7k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  74.7k|                  "Scan argument types must be Destructible");
 5139|  74.7k|    static_assert(
 5140|  74.7k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  74.7k|        "Scan argument types must not be references");
 5142|  74.7k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEEC2Ev:
 5348|  74.7k|    {
 5349|  74.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE12make_argptrsIJwEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  74.7k|    {
 5360|  74.7k|        return {detail::make_arg<
 5361|  74.7k|            kind, Context,
 5362|  74.7k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  74.7k|                                 typename Context::char_type>::value>(args)...};
 5364|  74.7k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE13EwvEEPvRT2_:
 5169|  74.7k|{
 5170|  74.7k|    return make_value<Context>(value).ref_value;
 5171|  74.7k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEwEEDaRT0_:
 5119|  74.7k|{
 5120|  74.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  74.7k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  74.7k|                                  needs_context_tag>) {
 5124|  74.7k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  74.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  74.7k|    }
 5126|  74.7k|    else {
 5127|  74.7k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  74.7k|            value, context_tag<Context>{}));
 5129|  74.7k|    }
 5130|  74.7k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERw:
 4958|  74.7k|    {                                                                        \
 4959|  74.7k|        return val;                                                          \
 4960|  74.7k|    }
_ZN3scn2v36detail15make_value_implIRwEEDaOT_:
 5088|  74.7k|{
 5089|  74.7k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  74.7k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  74.7k|    constexpr bool scannable_char =
 5093|  74.7k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  74.7k|    static_assert(scannable_char,
 5095|  74.7k|                  "Cannot scan an argument of an unsupported character "
 5096|  74.7k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  74.7k|    constexpr bool scannable_const =
 5099|  74.7k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  74.7k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  74.7k|    constexpr bool scannable_disabled =
 5103|  74.7k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  74.7k|    static_assert(scannable_disabled,
 5105|  74.7k|                  "Cannot scan an argument that has been disabled by "
 5106|  74.7k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  74.7k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  74.7k|    static_assert(
 5110|  74.7k|        scannable,
 5111|  74.7k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  74.7k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  74.7k|    return arg_value{arg};
 5115|  74.7k|}
_ZN3scn2v36detail9arg_valueC2IwEERT_:
 4901|  74.7k|    {
 4902|  74.7k|    }
_ZN3scn2v36detail13vscan_genericIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISN_EEEE:
 8590|   336k|{
 8591|   336k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   336k|    auto result = vscan_impl(buffer, format, args);
 8594|   336k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   336k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 335k, False: 711]
  |  |  ------------------
  ------------------
 8595|   335k|        return unexpected(result.error());
 8596|   335k|    }
 8597|    711|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|    711|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   336k|}
_ZN3scn2v36detail16make_scan_bufferINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRKT_:
 4719|   672k|{
 4720|   672k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   672k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   672k|                  "\n"
 4724|   672k|                  "Unsupported range type given as input to a scanning "
 4725|   672k|                  "function.\n"
 4726|   672k|                  "A range needs to have a character type (value type) "
 4727|   672k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   672k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   672k|                  "to be included.\n"
 4730|   672k|                  "See the scnlib documentation for more details.");
 4731|   672k|    static_assert(
 4732|   672k|        !std::is_same_v<T, custom_char_traits>,
 4733|   672k|        "\n"
 4734|   672k|        "Unsupported range type given as input to a scanning "
 4735|   672k|        "function.\n"
 4736|   672k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   672k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   672k|        "not supported.");
 4739|   672k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   672k|                  "\n"
 4741|   672k|                  "Unsupported range type given as input to a scanning "
 4742|   672k|                  "function.\n"
 4743|   672k|                  "file_marker_found cannot be used as an "
 4744|   672k|                  "source range type to scn::scan.\n"
 4745|   672k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   672k|                  "and do not provide an explicit source range, "
 4747|   672k|                  "or use scn::scan with a FILE* directly.");
 4748|   672k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   672k|                  "\n"
 4750|   672k|                  "Unsupported range type given as input to a scanning "
 4751|   672k|                  "function.\n"
 4752|   672k|                  "In order to be scannable, a range needs to satisfy "
 4753|   672k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   672k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   672k|                  "\n"
 4756|   672k|                  "Unsupported range type given as input to a scanning "
 4757|   672k|                  "function.\n"
 4758|   672k|                  "A range needs to model forward_range and have a valid "
 4759|   672k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   672k|                  "Examples of scannable ranges are std::string, "
 4761|   672k|                  "std::string_view, "
 4762|   672k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   672k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   672k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   672k|}
_ZN3scn2v36detail17_make_scan_buffer4implIwEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 4611|   672k|{
 4612|   672k|    if constexpr (is_valid_char_type<CharT>) {
  ------------------
  |  Branch (4612:19): [Folded - Ignored]
  ------------------
 4613|   672k|        return r;
 4614|       |        // return make_string_scan_buffer(r);
 4615|   672k|    }
 4616|   672k|    else {
 4617|   672k|        return invalid_char_type{};
 4618|   672k|    }
 4619|   672k|}
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|   670k|    {
 1476|   670k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|   670k|    {
  447|   670k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   672k|    {
 1177|   672k|    }
_ZN3scn2v36detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 5922|  1.42k|{
 5923|  1.42k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|  1.42k|                      ranges::iterator_t<SourceRange>>) {
 5925|  1.42k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|  1.42k|    }
 5927|  1.42k|    else {
 5928|  1.42k|        auto it = ranges::begin(source);
 5929|  1.42k|        while (n > 0) {
 5930|  1.42k|            --n;
 5931|  1.42k|            ++it;
 5932|  1.42k|        }
 5933|  1.42k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|  1.42k|    }
 5935|  1.42k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.42k|    {
 2724|  1.42k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.42k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.42k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.42k|    {
 2705|  1.42k|        return decay_copy(t.begin());
 2706|  1.42k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1948|  62.6k|{
 1949|  62.6k|    return SCN_FWD(t);
  ------------------
  |  |  930|  62.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  62.6k|}
_ZN3scn2v36detail27make_vscan_result_range_endINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRT_:
 5909|  1.42k|{
 5910|  1.42k|    return ranges::end(source);
 5911|  1.42k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.42k|    {
 2781|  1.42k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.42k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.42k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.42k|    {
 2763|  1.42k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.42k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.42k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_LPv0EEET_S6_:
 3315|  1.13M|    {
 3316|  1.13M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  1.42k|    {
 1430|  1.42k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  436|  1.42k|    {
  437|  1.42k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEcvS6_Ev:
 7974|  74.7k|    {
 7975|  74.7k|        return m_str;
 7976|  74.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJwEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  74.7k|    {
 5426|  74.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE12arg_pointersEv:
 5378|  74.7k|    {
 5379|  74.7k|        return m_argptrs;
 5380|  74.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5477|   672k|    {
 5478|   672k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJwEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  74.7k|{
 8820|  74.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  74.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74.5k, False: 114]
  |  |  ------------------
  ------------------
 8821|  74.5k|        return unexpected(result.error());
 8822|  74.5k|    }
 8823|    114|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    114|    static_cast<    \
  |  |  929|    114|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    114|    static_cast<    \
  |  |  929|    114|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  74.7k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1597|   672k|    {
 1598|   672k|        return has_value();
 1599|   672k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.34M|    {
  485|  1.34M|        return m_has_value;
  486|  1.34M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1603|   670k|    {
 1604|   670k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   670k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   670k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   670k|        return this->get_unexpected().error();
 1606|   670k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   670k|    {
  468|   670k|        return m_unexpected;
  469|   670k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  74.5k|    {
 1476|  74.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  74.5k|    {
  447|  74.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  74.7k|    {
 1177|  74.7k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1652|  1.42k|    {
 1653|  1.42k|        return value();
 1654|  1.42k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  1.42k|    {
 1627|  1.42k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.42k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.42k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.42k|        return this->get_value();
 1629|  1.42k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.42k|    {
  451|  1.42k|        return m_value;
  452|  1.42k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJwEEC2ES8_ONSt3__15tupleIJwEEE:
 5829|    114|    {
 5830|    114|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5680|  1.42k|    {
 5681|  1.42k|    }
_ZN3scn2v36detail25scan_result_value_storageIJwEEC2EONSt3__15tupleIJwEEE:
 5615|    114|    {
 5616|    114|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|    114|    {
 1430|    114|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|    114|    {
  437|    114|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE4argsEv:
 5373|  74.7k|    {
 5374|  74.7k|        return m_args;
 5375|  74.7k|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7695|   672k|{
 7696|   672k|    return s;
 7697|   672k|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7667|   672k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  74.7k|    {
 7971|  74.7k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISR_EEEE:
 8606|   336k|{
 8607|   336k|#if !SCN_DISABLE_LOCALE
 8608|   336k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   336k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   336k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   336k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   336k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   336k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 335k, False: 711]
  |  |  ------------------
  ------------------
 8615|   335k|        return unexpected(result.error());
 8616|   335k|    }
 8617|    711|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|    711|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   336k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJiEEEDav:
 5395|  74.7k|{
 5396|  74.7k|    detail::check_scan_arg_types<Args...>();
 5397|  74.7k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  74.7k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEEC2Ev:
 5348|  74.7k|    {
 5349|  74.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  74.7k|    {
 5360|  74.7k|        return {detail::make_arg<
 5361|  74.7k|            kind, Context,
 5362|  74.7k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  74.7k|                                 typename Context::char_type>::value>(args)...};
 5364|  74.7k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE3EivEEPvRT2_:
 5169|  74.7k|{
 5170|  74.7k|    return make_value<Context>(value).ref_value;
 5171|  74.7k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEiEEDaRT0_:
 5119|  74.7k|{
 5120|  74.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  74.7k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  74.7k|                                  needs_context_tag>) {
 5124|  74.7k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  74.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  74.7k|    }
 5126|  74.7k|    else {
 5127|  74.7k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  74.7k|            value, context_tag<Context>{}));
 5129|  74.7k|    }
 5130|  74.7k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERi:
 4958|  74.7k|    {                                                                        \
 4959|  74.7k|        return val;                                                          \
 4960|  74.7k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEcvS6_Ev:
 7974|  74.7k|    {
 7975|  74.7k|        return m_str;
 7976|  74.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJiEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  74.7k|    {
 5426|  74.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE12arg_pointersEv:
 5378|  74.7k|    {
 5379|  74.7k|        return m_argptrs;
 5380|  74.7k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  74.7k|{
 8820|  74.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  74.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74.7k, False: 0]
  |  |  ------------------
  ------------------
 8821|  74.7k|        return unexpected(result.error());
 8822|  74.7k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  74.7k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  74.7k|    {
 1476|  74.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  74.7k|    {
  447|  74.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  74.7k|    {
 1177|  74.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE4argsEv:
 5373|  74.7k|    {
 5374|  74.7k|        return m_args;
 5375|  74.7k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  74.7k|    {
 7971|  74.7k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJjEEEDav:
 5395|  74.7k|{
 5396|  74.7k|    detail::check_scan_arg_types<Args...>();
 5397|  74.7k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  74.7k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEEC2Ev:
 5348|  74.7k|    {
 5349|  74.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  74.7k|    {
 5360|  74.7k|        return {detail::make_arg<
 5361|  74.7k|            kind, Context,
 5362|  74.7k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  74.7k|                                 typename Context::char_type>::value>(args)...};
 5364|  74.7k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE8EjvEEPvRT2_:
 5169|  74.7k|{
 5170|  74.7k|    return make_value<Context>(value).ref_value;
 5171|  74.7k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEjEEDaRT0_:
 5119|  74.7k|{
 5120|  74.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  74.7k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  74.7k|                                  needs_context_tag>) {
 5124|  74.7k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  74.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  74.7k|    }
 5126|  74.7k|    else {
 5127|  74.7k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  74.7k|            value, context_tag<Context>{}));
 5129|  74.7k|    }
 5130|  74.7k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERj:
 4958|  74.7k|    {                                                                        \
 4959|  74.7k|        return val;                                                          \
 4960|  74.7k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEcvS6_Ev:
 7974|  74.7k|    {
 7975|  74.7k|        return m_str;
 7976|  74.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJjEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  74.7k|    {
 5426|  74.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE12arg_pointersEv:
 5378|  74.7k|    {
 5379|  74.7k|        return m_argptrs;
 5380|  74.7k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  74.7k|{
 8820|  74.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  74.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74.7k, False: 0]
  |  |  ------------------
  ------------------
 8821|  74.7k|        return unexpected(result.error());
 8822|  74.7k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  74.7k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  74.7k|    {
 1476|  74.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  74.7k|    {
  447|  74.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  74.7k|    {
 1177|  74.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE4argsEv:
 5373|  74.7k|    {
 5374|  74.7k|        return m_args;
 5375|  74.7k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  74.7k|    {
 7971|  74.7k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDav:
 5395|  74.7k|{
 5396|  74.7k|    detail::check_scan_arg_types<Args...>();
 5397|  74.7k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  74.7k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2Ev:
 5348|  74.7k|    {
 5349|  74.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  74.7k|    {
 5360|  74.7k|        return {detail::make_arg<
 5361|  74.7k|            kind, Context,
 5362|  74.7k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  74.7k|                                 typename Context::char_type>::value>(args)...};
 5364|  74.7k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5169|  74.7k|{
 5170|  74.7k|    return make_value<Context>(value).ref_value;
 5171|  74.7k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
 5119|  74.7k|{
 5120|  74.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  74.7k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  74.7k|                                  needs_context_tag>) {
 5124|  74.7k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  74.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  74.7k|    }
 5126|  74.7k|    else {
 5127|  74.7k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  74.7k|            value, context_tag<Context>{}));
 5129|  74.7k|    }
 5130|  74.7k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERd:
 4958|  74.7k|    {                                                                        \
 4959|  74.7k|        return val;                                                          \
 4960|  74.7k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEcvS6_Ev:
 7974|  74.7k|    {
 7975|  74.7k|        return m_str;
 7976|  74.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  74.7k|    {
 5426|  74.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12arg_pointersEv:
 5378|  74.7k|    {
 5379|  74.7k|        return m_argptrs;
 5380|  74.7k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  74.7k|{
 8820|  74.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  74.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74.7k, False: 0]
  |  |  ------------------
  ------------------
 8821|  74.7k|        return unexpected(result.error());
 8822|  74.7k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  74.7k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  74.7k|    {
 1476|  74.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  74.7k|    {
  447|  74.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  74.7k|    {
 1177|  74.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE4argsEv:
 5373|  74.7k|    {
 5374|  74.7k|        return m_args;
 5375|  74.7k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  74.7k|    {
 7971|  74.7k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJbEEEDav:
 5395|  74.7k|{
 5396|  74.7k|    detail::check_scan_arg_types<Args...>();
 5397|  74.7k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  74.7k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEEC2Ev:
 5348|  74.7k|    {
 5349|  74.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  74.7k|    {
 5360|  74.7k|        return {detail::make_arg<
 5361|  74.7k|            kind, Context,
 5362|  74.7k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  74.7k|                                 typename Context::char_type>::value>(args)...};
 5364|  74.7k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE11EbvEEPvRT2_:
 5169|  74.7k|{
 5170|  74.7k|    return make_value<Context>(value).ref_value;
 5171|  74.7k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEbEEDaRT0_:
 5119|  74.7k|{
 5120|  74.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  74.7k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  74.7k|                                  needs_context_tag>) {
 5124|  74.7k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  74.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  74.7k|    }
 5126|  74.7k|    else {
 5127|  74.7k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  74.7k|            value, context_tag<Context>{}));
 5129|  74.7k|    }
 5130|  74.7k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERb:
 4958|  74.7k|    {                                                                        \
 4959|  74.7k|        return val;                                                          \
 4960|  74.7k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEcvS6_Ev:
 7974|  74.7k|    {
 7975|  74.7k|        return m_str;
 7976|  74.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJbEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  74.7k|    {
 5426|  74.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE12arg_pointersEv:
 5378|  74.7k|    {
 5379|  74.7k|        return m_argptrs;
 5380|  74.7k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJbEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  74.7k|{
 8820|  74.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  74.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74.7k, False: 0]
  |  |  ------------------
  ------------------
 8821|  74.7k|        return unexpected(result.error());
 8822|  74.7k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  74.7k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  74.7k|    {
 1476|  74.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  74.7k|    {
  447|  74.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  74.7k|    {
 1177|  74.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE4argsEv:
 5373|  74.7k|    {
 5374|  74.7k|        return m_args;
 5375|  74.7k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  74.7k|    {
 7971|  74.7k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJPvEEEDav:
 5395|  74.7k|{
 5396|  74.7k|    detail::check_scan_arg_types<Args...>();
 5397|  74.7k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  74.7k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEEC2Ev:
 5348|  74.7k|    {
 5349|  74.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE12make_argptrsIJS5_EEENSt3__15arrayIS5_Lm1EEEDpRT_:
 5359|  74.7k|    {
 5360|  74.7k|        return {detail::make_arg<
 5361|  74.7k|            kind, Context,
 5362|  74.7k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  74.7k|                                 typename Context::char_type>::value>(args)...};
 5364|  74.7k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE15EPvvEES7_RT2_:
 5169|  74.7k|{
 5170|  74.7k|    return make_value<Context>(value).ref_value;
 5171|  74.7k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEPvEEDaRT0_:
 5119|  74.7k|{
 5120|  74.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  74.7k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  74.7k|                                  needs_context_tag>) {
 5124|  74.7k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  74.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  74.7k|    }
 5126|  74.7k|    else {
 5127|  74.7k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  74.7k|            value, context_tag<Context>{}));
 5129|  74.7k|    }
 5130|  74.7k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERPv:
 4958|  74.7k|    {                                                                        \
 4959|  74.7k|        return val;                                                          \
 4960|  74.7k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEcvS6_Ev:
 7974|  74.7k|    {
 7975|  74.7k|        return m_str;
 7976|  74.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJPvEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  74.7k|    {
 5426|  74.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE12arg_pointersEv:
 5378|  74.7k|    {
 5379|  74.7k|        return m_argptrs;
 5380|  74.7k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJPvEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSA_ISC_EEONSt3__15tupleIJSE_EEE:
 8819|  74.7k|{
 8820|  74.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  74.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74.7k, False: 0]
  |  |  ------------------
  ------------------
 8821|  74.7k|        return unexpected(result.error());
 8822|  74.7k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  74.7k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEC2ISC_LSA_0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  74.7k|    {
 1476|  74.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  446|  74.7k|    {
  447|  74.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  74.7k|    {
 1177|  74.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE4argsEv:
 5373|  74.7k|    {
 5374|  74.7k|        return m_args;
 5375|  74.7k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  74.7k|    {
 7971|  74.7k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5395|  74.7k|{
 5396|  74.7k|    detail::check_scan_arg_types<Args...>();
 5397|  74.7k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  74.7k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5348|  74.7k|    {
 5349|  74.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  74.7k|    {
 5360|  74.7k|        return {detail::make_arg<
 5361|  74.7k|            kind, Context,
 5362|  74.7k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  74.7k|                                 typename Context::char_type>::value>(args)...};
 5364|  74.7k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5169|  74.7k|{
 5170|  74.7k|    return make_value<Context>(value).ref_value;
 5171|  74.7k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5119|  74.7k|{
 5120|  74.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  74.7k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  74.7k|                                  needs_context_tag>) {
 5124|  74.7k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  74.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  74.7k|    }
 5126|  74.7k|    else {
 5127|  74.7k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  74.7k|            value, context_tag<Context>{}));
 5129|  74.7k|    }
 5130|  74.7k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4958|  74.7k|    {                                                                        \
 4959|  74.7k|        return val;                                                          \
 4960|  74.7k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEcvS6_Ev:
 7974|  74.7k|    {
 7975|  74.7k|        return m_str;
 7976|  74.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  74.7k|    {
 5426|  74.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5378|  74.7k|    {
 5379|  74.7k|        return m_argptrs;
 5380|  74.7k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|  74.7k|{
 8820|  74.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  74.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74.2k, False: 436]
  |  |  ------------------
  ------------------
 8821|  74.2k|        return unexpected(result.error());
 8822|  74.2k|    }
 8823|    436|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    436|    static_cast<    \
  |  |  929|    436|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    436|    static_cast<    \
  |  |  929|    436|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  74.7k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|  74.2k|    {
 1476|  74.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  625|  74.2k|    {
  626|  74.2k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  74.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  74.2k|    {
  689|  74.2k|        scn::detail::construct_at(unexpected_ptr(),
  690|  74.2k|                                  std::forward<Args>(args)...);
  691|  74.2k|        m_has_value = false;
  692|  74.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|   148k|    {
  718|   148k|        return reinterpret_cast<unexpected<E>*>(
  719|   148k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|   148k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|   148k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  74.7k|    {
 1177|  74.7k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5829|    436|    {
 5830|    436|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|    436|    {
 1430|    436|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  615|    436|    {
  616|    436|        construct(std::forward<Args>(args)...);
  617|    436|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|    436|    {
  682|    436|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|    436|        m_has_value = true;
  684|    436|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|    436|{
  392|    436|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|    436|        T(std::forward<Args>(args)...);
  394|    436|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5821|    436|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|    872|    {
  706|    872|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|    872|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|    872|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5825|    872|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5373|  74.7k|    {
 5374|  74.7k|        return m_args;
 5375|  74.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5370|  74.7k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  74.7k|    {
 7971|  74.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  74.7k|    {
  631|  74.7k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 436, False: 74.2k]
  ------------------
  632|    436|            destroy_value();
  633|    436|        }
  634|  74.2k|        else {
  635|  74.2k|            destroy_unexpected();
  636|  74.2k|        }
  637|  74.7k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  74.7k|    {
  675|  74.7k|        return m_has_value;
  676|  74.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|    436|    {
  696|    436|        scn::detail::destroy_at(value_ptr());
  697|    436|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  397|    436|{
  398|    436|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|    436|        for (auto& elem : *p) {
  400|    436|            scn::detail::destroy_at(&elem);
  401|    436|        }
  402|    436|    }
  403|    436|    else {
  404|    436|        p->~T();
  405|    436|    }
  406|    436|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  74.2k|    {
  700|  74.2k|        scn::detail::destroy_at(unexpected_ptr());
  701|  74.2k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5395|  74.7k|{
 5396|  74.7k|    detail::check_scan_arg_types<Args...>();
 5397|  74.7k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  74.7k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5348|  74.7k|    {
 5349|  74.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  74.7k|    {
 5360|  74.7k|        return {detail::make_arg<
 5361|  74.7k|            kind, Context,
 5362|  74.7k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  74.7k|                                 typename Context::char_type>::value>(args)...};
 5364|  74.7k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5169|  74.7k|{
 5170|  74.7k|    return make_value<Context>(value).ref_value;
 5171|  74.7k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5119|  74.7k|{
 5120|  74.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  74.7k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  74.7k|                                  needs_context_tag>) {
 5124|  74.7k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  74.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  74.7k|    }
 5126|  74.7k|    else {
 5127|  74.7k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  74.7k|            value, context_tag<Context>{}));
 5129|  74.7k|    }
 5130|  74.7k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4958|  74.7k|    {                                                                        \
 4959|  74.7k|        return val;                                                          \
 4960|  74.7k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEcvS6_Ev:
 7974|  74.7k|    {
 7975|  74.7k|        return m_str;
 7976|  74.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  74.7k|    {
 5426|  74.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5378|  74.7k|    {
 5379|  74.7k|        return m_argptrs;
 5380|  74.7k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|  74.7k|{
 8820|  74.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  74.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74.2k, False: 436]
  |  |  ------------------
  ------------------
 8821|  74.2k|        return unexpected(result.error());
 8822|  74.2k|    }
 8823|    436|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    436|    static_cast<    \
  |  |  929|    436|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    436|    static_cast<    \
  |  |  929|    436|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  74.7k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|  74.2k|    {
 1476|  74.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  625|  74.2k|    {
  626|  74.2k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  74.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  74.2k|    {
  689|  74.2k|        scn::detail::construct_at(unexpected_ptr(),
  690|  74.2k|                                  std::forward<Args>(args)...);
  691|  74.2k|        m_has_value = false;
  692|  74.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|   148k|    {
  718|   148k|        return reinterpret_cast<unexpected<E>*>(
  719|   148k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|   148k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|   148k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  74.7k|    {
 1177|  74.7k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5829|    436|    {
 5830|    436|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|    436|    {
 1430|    436|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  615|    436|    {
  616|    436|        construct(std::forward<Args>(args)...);
  617|    436|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|    436|    {
  682|    436|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|    436|        m_has_value = true;
  684|    436|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|    436|{
  392|    436|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|    436|        T(std::forward<Args>(args)...);
  394|    436|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5821|    436|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|    872|    {
  706|    872|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|    872|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|    872|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5825|    872|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5373|  74.7k|    {
 5374|  74.7k|        return m_args;
 5375|  74.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5370|  74.7k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  74.7k|    {
 7971|  74.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  74.7k|    {
  631|  74.7k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 436, False: 74.2k]
  ------------------
  632|    436|            destroy_value();
  633|    436|        }
  634|  74.2k|        else {
  635|  74.2k|            destroy_unexpected();
  636|  74.2k|        }
  637|  74.7k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  74.7k|    {
  675|  74.7k|        return m_has_value;
  676|  74.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|    436|    {
  696|    436|        scn::detail::destroy_at(value_ptr());
  697|    436|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  397|    436|{
  398|    436|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|    436|        for (auto& elem : *p) {
  400|    436|            scn::detail::destroy_at(&elem);
  401|    436|        }
  402|    436|    }
  403|    436|    else {
  404|    436|        p->~T();
  405|    436|    }
  406|    436|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  74.2k|    {
  700|  74.2k|        scn::detail::destroy_at(unexpected_ptr());
  701|  74.2k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEEDav:
 5395|  74.7k|{
 5396|  74.7k|    detail::check_scan_arg_types<Args...>();
 5397|  74.7k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  74.7k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEvv:
 5134|  74.7k|{
 5135|  74.7k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  74.7k|                  "Scan argument types must be default constructible");
 5137|  74.7k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  74.7k|                  "Scan argument types must be Destructible");
 5139|  74.7k|    static_assert(
 5140|  74.7k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  74.7k|        "Scan argument types must not be references");
 5142|  74.7k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEC2Ev:
 5348|  74.7k|    {
 5349|  74.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  74.7k|    {
 5360|  74.7k|        return {detail::make_arg<
 5361|  74.7k|            kind, Context,
 5362|  74.7k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  74.7k|                                 typename Context::char_type>::value>(args)...};
 5364|  74.7k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE20ENSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEvEEPvRT2_:
 5169|  74.7k|{
 5170|  74.7k|    return make_value<Context>(value).ref_value;
 5171|  74.7k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDaRT0_:
 5119|  74.7k|{
 5120|  74.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  74.7k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  74.7k|                                  needs_context_tag>) {
 5124|  74.7k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  74.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  74.7k|    }
 5126|  74.7k|    else {
 5127|  74.7k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  74.7k|            value, context_tag<Context>{}));
 5129|  74.7k|    }
 5130|  74.7k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 4958|  74.7k|    {                                                                        \
 4959|  74.7k|        return val;                                                          \
 4960|  74.7k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaOT_:
 5088|  74.7k|{
 5089|  74.7k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  74.7k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  74.7k|    constexpr bool scannable_char =
 5093|  74.7k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  74.7k|    static_assert(scannable_char,
 5095|  74.7k|                  "Cannot scan an argument of an unsupported character "
 5096|  74.7k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  74.7k|    constexpr bool scannable_const =
 5099|  74.7k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  74.7k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  74.7k|    constexpr bool scannable_disabled =
 5103|  74.7k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  74.7k|    static_assert(scannable_disabled,
 5105|  74.7k|                  "Cannot scan an argument that has been disabled by "
 5106|  74.7k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  74.7k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  74.7k|    static_assert(
 5110|  74.7k|        scannable,
 5111|  74.7k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  74.7k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  74.7k|    return arg_value{arg};
 5115|  74.7k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 4901|  74.7k|    {
 4902|  74.7k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEcvS6_Ev:
 7974|  74.7k|    {
 7975|  74.7k|        return m_str;
 7976|  74.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  74.7k|    {
 5426|  74.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12arg_pointersEv:
 5378|  74.7k|    {
 5379|  74.7k|        return m_argptrs;
 5380|  74.7k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8819|  74.7k|{
 8820|  74.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  74.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74.2k, False: 436]
  |  |  ------------------
  ------------------
 8821|  74.2k|        return unexpected(result.error());
 8822|  74.2k|    }
 8823|    436|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    436|    static_cast<    \
  |  |  929|    436|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    436|    static_cast<    \
  |  |  929|    436|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  74.7k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1475|  74.2k|    {
 1476|  74.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  446|  74.2k|    {
  447|  74.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  74.7k|    {
 1177|  74.7k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5829|    436|    {
 5830|    436|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2EONS3_5tupleIJS7_EEE:
 5615|    436|    {
 5616|    436|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1429|    436|    {
 1430|    436|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  436|    436|    {
  437|    436|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE4argsEv:
 5373|  74.7k|    {
 5374|  74.7k|        return m_args;
 5375|  74.7k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  74.7k|    {
 7971|  74.7k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3567|  2.24M|    {
 3568|  2.24M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  2.24M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  2.24M|    }
_ZNK3scn2v310scan_errorcvbEv:
 3573|  13.1M|    {
 3574|  13.1M|        return m_code == good;
 3575|  13.1M|    }
_ZNK3scn2v310scan_error4codeEv:
 3584|   302k|    {
 3585|   302k|        return m_code;
 3586|   302k|    }
_ZNK3scn2v36detail9fill_type4sizeEv:
 6180|  11.4k|    {
 6181|  11.4k|        return m_size;
 6182|  11.4k|    }
_ZNK3scn2v36detail12format_specs8get_baseEv:
 6221|  6.30k|    {
 6222|  6.30k|        SCN_GCC_COMPAT_PUSH
 6223|  6.30k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 6224|  6.30k|        switch (type) {
 6225|  2.95k|            case presentation_type::none:
  ------------------
  |  Branch (6225:13): [True: 2.95k, False: 3.34k]
  ------------------
 6226|  2.95k|                return 10;
 6227|     60|            case presentation_type::int_generic:
  ------------------
  |  Branch (6227:13): [True: 60, False: 6.24k]
  ------------------
 6228|     60|                return 0;
 6229|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (6229:13): [True: 0, False: 6.30k]
  ------------------
 6230|      0|                return arbitrary_base;
 6231|       |
 6232|     38|            case presentation_type::int_binary:
  ------------------
  |  Branch (6232:13): [True: 38, False: 6.26k]
  ------------------
 6233|     38|                return 2;
 6234|    176|            case presentation_type::int_octal:
  ------------------
  |  Branch (6234:13): [True: 176, False: 6.12k]
  ------------------
 6235|    176|                return 8;
 6236|     38|            case presentation_type::int_decimal:
  ------------------
  |  Branch (6236:13): [True: 38, False: 6.26k]
  ------------------
 6237|    102|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (6237:13): [True: 64, False: 6.23k]
  ------------------
 6238|    102|                return 10;
 6239|  2.96k|            case presentation_type::int_hex:
  ------------------
  |  Branch (6239:13): [True: 2.96k, False: 3.33k]
  ------------------
 6240|  2.96k|                return 16;
 6241|       |
 6242|      0|            default:
  ------------------
  |  Branch (6242:13): [True: 0, False: 6.30k]
  ------------------
 6243|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6244|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6245|  6.30k|        }
 6246|  6.30k|        SCN_GCC_COMPAT_POP
 6247|  6.30k|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6259|   319k|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter8on_alignENS1_10align_typeE:
 6262|  35.4k|    {
 6263|  35.4k|        m_specs.align = align;
 6264|  35.4k|    }
_ZN3scn2v36detail12specs_setter12on_localizedEv:
 6271|  1.00k|    {
 6272|  1.00k|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  114|  1.00k|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (6272:23): [Folded - Ignored]
  ------------------
 6273|  1.00k|            m_specs.localized = true;
 6274|  1.00k|        }
 6275|      0|        else {
 6276|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6277|      0|        }
 6278|  1.00k|    }
_ZN3scn2v36detail12specs_setter8on_widthEi:
 6281|   100k|    {
 6282|   100k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 100k]
  |  Branch (6282:39): [True: 0, False: 0]
  ------------------
 6283|       |            // clang-format off
 6284|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6285|       |            // clang-format on
 6286|      0|        }
 6287|       |
 6288|   100k|        m_specs.width = width;
 6289|   100k|    }
_ZN3scn2v36detail12specs_setter12on_precisionEi:
 6291|  25.8k|    {
 6292|  25.8k|        if (m_specs.width > prec) {
  ------------------
  |  Branch (6292:13): [True: 82, False: 25.7k]
  ------------------
 6293|       |            // clang-format off
 6294|     82|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6295|       |            // clang-format on
 6296|     82|        }
 6297|       |
 6298|  25.7k|        m_specs.precision = prec;
 6299|  25.7k|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6302|   484k|    {
 6303|   484k|        m_specs.type = type;
 6304|   484k|    }
_ZN3scn2v36detail12specs_setter17on_charset_singleEDi:
 6307|  7.64M|    {
 6308|  7.64M|        const auto cp_value = static_cast<unsigned>(cp);
 6309|  7.64M|        if (SCN_LIKELY(cp_value <= 127)) {
  ------------------
  |  |  858|  7.64M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 6.65M, False: 988k]
  |  |  ------------------
  ------------------
 6310|  6.65M|            m_specs.charset_literals[cp_value / 8] |=
 6311|  6.65M|                static_cast<unsigned char>(1ul << (cp_value % 8));
 6312|  6.65M|        }
 6313|   988k|        else {
 6314|   988k|            m_specs.charset_has_nonascii = true;
 6315|   988k|        }
 6316|  7.64M|    }
_ZN3scn2v36detail12specs_setter16on_charset_rangeEDiDi:
 6319|  41.7k|    {
 6320|  41.7k|        const auto begin_value = static_cast<unsigned>(begin);
 6321|  41.7k|        const auto end_value = static_cast<unsigned>(end);
 6322|  41.7k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  |  924|  41.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  41.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6323|       |
 6324|  41.7k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  |  858|  41.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 28.2k, False: 13.5k]
  |  |  ------------------
  ------------------
 6325|       |            // No need to bit-twiddle with a mask, because with the
 6326|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 6327|  28.2k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  |  878|  28.2k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 6328|  1.74M|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (6328:40): [True: 1.71M, False: 28.2k]
  ------------------
 6329|  1.71M|                m_specs.charset_literals[v / 8] |=
 6330|  1.71M|                    static_cast<unsigned char>(1ul << (v % 8));
 6331|  1.71M|            }
 6332|  28.2k|        }
 6333|  13.5k|        else {
 6334|  13.5k|            m_specs.charset_has_nonascii = true;
 6335|  13.5k|        }
 6336|  41.7k|    }
_ZN3scn2v36detail12specs_setter19on_charset_invertedEv:
 6339|  5.71k|    {
 6340|  5.71k|        m_specs.charset_is_inverted = true;
 6341|  5.71k|    }
_ZN3scn2v36detail12specs_setter14on_regex_flagsENS1_11regex_flagsE:
 6358|   255k|    {
 6359|   255k|        m_specs.regexp_flags = flags;
 6360|   255k|    }
_ZN3scn2v36detail12specs_setter8on_errorEPKc:
 6364|  15.2k|    {
 6365|  15.2k|        SCN_UNLIKELY_ATTR
 6366|  15.2k|        m_error = scan_error{scan_error::invalid_format_string, msg};
 6367|  15.2k|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6375|  8.03M|    {
 6376|  8.03M|        return static_cast<bool>(m_error);
 6377|  8.03M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3608|   302k|{
 3609|   302k|    return a.code() == b;
 3610|   302k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3612|   302k|{
 3613|   302k|    return !(a == b);
 3614|   302k|}
_ZN3scn2v36detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3907|   707k|{
 3908|   707k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|   707k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   707k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3909|       |
 3910|   707k|    const auto is_trailing_code_unit = [](char ch) {
 3911|   707k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3912|   707k|    };
 3913|       |
 3914|   707k|    if (input.size() == 1) {
  ------------------
  |  Branch (3914:9): [True: 626k, False: 81.2k]
  ------------------
 3915|   626k|        SCN_EXPECT(static_cast<unsigned char>(input[0]) < 0x80);
  ------------------
  |  |  924|   626k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   626k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3916|   626k|        return static_cast<char32_t>(input[0]);
 3917|   626k|    }
 3918|       |
 3919|  81.2k|    if (input.size() == 2) {
  ------------------
  |  Branch (3919:9): [True: 78.6k, False: 2.60k]
  ------------------
 3920|  78.6k|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xe0) == 0xc0);
  ------------------
  |  |  924|  78.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  78.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3921|  78.6k|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|  78.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  78.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3922|       |
 3923|  78.6k|        char32_t cp{};
 3924|  78.6k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3925|  78.6k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3926|  78.6k|        return cp;
 3927|  78.6k|    }
 3928|       |
 3929|  2.60k|    if (input.size() == 3) {
  ------------------
  |  Branch (3929:9): [True: 2.15k, False: 450]
  ------------------
 3930|  2.15k|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf0) == 0xe0);
  ------------------
  |  |  924|  2.15k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.15k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3931|  2.15k|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|  2.15k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.15k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3932|  2.15k|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  |  924|  2.15k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.15k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3933|       |
 3934|  2.15k|        char32_t cp{};
 3935|  2.15k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3936|  2.15k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3937|  2.15k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3938|  2.15k|        return cp;
 3939|  2.15k|    }
 3940|       |
 3941|    450|    if (input.size() == 4) {
  ------------------
  |  Branch (3941:9): [True: 450, False: 0]
  ------------------
 3942|    450|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf8) == 0xf0);
  ------------------
  |  |  924|    450|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    450|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3943|    450|        SCN_EXPECT(static_cast<unsigned char>(input[0]) <= 0xf4);
  ------------------
  |  |  924|    450|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    450|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3944|    450|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|    450|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    450|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3945|    450|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  |  924|    450|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    450|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3946|    450|        SCN_EXPECT(is_trailing_code_unit(input[3]));
  ------------------
  |  |  924|    450|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    450|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3947|       |
 3948|    450|        char32_t cp{};
 3949|    450|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3950|    450|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3951|    450|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3952|    450|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3953|    450|        return cp;
 3954|    450|    }
 3955|       |
 3956|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3957|       |    // gcc 7 thinks we'll get here, even when we won't
 3958|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3959|      0|#endif
 3960|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3961|      0|}
_ZN3scn2v36detailanENS1_11regex_flagsES2_:
 6110|   385k|{
 6111|   385k|    return static_cast<regex_flags>(static_cast<unsigned>(a) &
 6112|   385k|                                    static_cast<unsigned>(b));
 6113|   385k|}
_ZN3scn2v36detailorENS1_11regex_flagsES2_:
 6115|  54.0k|{
 6116|  54.0k|    return static_cast<regex_flags>(static_cast<unsigned>(a) |
 6117|  54.0k|                                    static_cast<unsigned>(b));
 6118|  54.0k|}
_ZN3scn2v36detailoRERNS1_11regex_flagsES2_:
 6130|  54.0k|{
 6131|  54.0k|    return a = a | b;
 6132|  54.0k|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7062|  2.40k|{
 7063|  2.40k|    switch (type) {
 7064|    134|        case arg_type::none_type:
  ------------------
  |  Branch (7064:9): [True: 134, False: 2.27k]
  ------------------
 7065|    134|            return arg_type_category::none;
 7066|       |
 7067|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7067:9): [True: 0, False: 2.40k]
  ------------------
 7068|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7068:9): [True: 0, False: 2.40k]
  ------------------
 7069|    252|        case arg_type::int_type:
  ------------------
  |  Branch (7069:9): [True: 252, False: 2.15k]
  ------------------
 7070|    252|        case arg_type::long_type:
  ------------------
  |  Branch (7070:9): [True: 0, False: 2.40k]
  ------------------
 7071|    252|        case arg_type::llong_type:
  ------------------
  |  Branch (7071:9): [True: 0, False: 2.40k]
  ------------------
 7072|    252|            return arg_type_category::integer;
 7073|       |
 7074|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7074:9): [True: 0, False: 2.40k]
  ------------------
 7075|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7075:9): [True: 0, False: 2.40k]
  ------------------
 7076|    252|        case arg_type::uint_type:
  ------------------
  |  Branch (7076:9): [True: 252, False: 2.15k]
  ------------------
 7077|    252|        case arg_type::ulong_type:
  ------------------
  |  Branch (7077:9): [True: 0, False: 2.40k]
  ------------------
 7078|    252|        case arg_type::ullong_type:
  ------------------
  |  Branch (7078:9): [True: 0, False: 2.40k]
  ------------------
 7079|    252|            return arg_type_category::unsigned_integer;
 7080|       |
 7081|    252|        case arg_type::pointer_type:
  ------------------
  |  Branch (7081:9): [True: 252, False: 2.15k]
  ------------------
 7082|    252|            return arg_type_category::pointer;
 7083|    252|        case arg_type::bool_type:
  ------------------
  |  Branch (7083:9): [True: 252, False: 2.15k]
  ------------------
 7084|    252|            return arg_type_category::boolean;
 7085|    142|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7085:9): [True: 142, False: 2.26k]
  ------------------
 7086|    252|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7086:9): [True: 110, False: 2.29k]
  ------------------
 7087|    252|        case arg_type::code_point_type:
  ------------------
  |  Branch (7087:9): [True: 0, False: 2.40k]
  ------------------
 7088|    252|            return arg_type_category::character;
 7089|       |
 7090|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7090:9): [True: 0, False: 2.40k]
  ------------------
 7091|    252|        case arg_type::double_type:
  ------------------
  |  Branch (7091:9): [True: 252, False: 2.15k]
  ------------------
 7092|    252|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7092:9): [True: 0, False: 2.40k]
  ------------------
 7093|    252|            return arg_type_category::floating;
 7094|       |
 7095|    142|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7095:9): [True: 142, False: 2.26k]
  ------------------
 7096|    396|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7096:9): [True: 254, False: 2.15k]
  ------------------
 7097|    508|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7097:9): [True: 112, False: 2.29k]
  ------------------
 7098|    762|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7098:9): [True: 254, False: 2.15k]
  ------------------
 7099|    762|            return arg_type_category::string;
 7100|       |
 7101|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7101:9): [True: 0, False: 2.40k]
  ------------------
 7102|      0|            return arg_type_category::custom;
 7103|       |
 7104|      0|            SCN_CLANG_PUSH
 7105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7106|      0|        default:
  ------------------
  |  Branch (7106:9): [True: 0, False: 2.40k]
  ------------------
 7107|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7108|  2.40k|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7109|  2.40k|            SCN_CLANG_POP
 7110|  2.40k|    }
 7111|       |
 7112|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7113|  2.40k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
 3653|  2.28k|{
 3654|  2.28k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  2.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  2.28k|}
_ZN3scn2v36detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7148|  69.0k|{
 7149|  69.0k|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  859|  69.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 65.6k, False: 3.37k]
  |  |  ------------------
  ------------------
 7150|  65.6k|        return handler.on_error("Invalid type specifier for integer type");
 7151|  65.6k|    }
 7152|  3.37k|    if (specs.localized) {
  ------------------
  |  Branch (7152:9): [True: 280, False: 3.09k]
  ------------------
 7153|    280|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  859|    280|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 268]
  |  |  ------------------
  ------------------
 7154|       |            // clang-format off
 7155|     12|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 7156|       |            // clang-format on
 7157|     12|            return;
 7158|     12|        }
 7159|    268|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  859|    268|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 268]
  |  |  ------------------
  ------------------
 7160|       |            // clang-format off
 7161|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 7162|       |            // clang-format on
 7163|      0|        }
 7164|    268|    }
 7165|  3.37k|}
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1948|     52|{
 1949|     52|    return SCN_FWD(t);
  ------------------
  |  |  930|     52|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|     52|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3653|  5.38k|{
 3654|  5.38k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  5.38k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  5.38k|}
_ZN3scn2v36detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7192|  34.5k|{
 7193|  34.5k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7193:9): [True: 33.0k, False: 1.49k]
  ------------------
 7194|  34.5k|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7194:10): [True: 194, False: 32.8k]
  ------------------
 7195|  33.0k|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7195:10): [True: 32.6k, False: 190]
  ------------------
 7196|  32.8k|        SCN_UNLIKELY_ATTR
 7197|  32.8k|        return handler.on_error("Invalid type specifier for float type");
 7198|  32.8k|    }
 7199|  34.5k|}
_ZNK3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EE9has_valueEv:
  484|   165k|    {
  485|   165k|        return m_has_value;
  486|   165k|    }
_ZNK3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEcvbEv:
 1597|  82.7k|    {
 1598|  82.7k|        return has_value();
 1599|  82.7k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EE9get_valueEv:
  450|  82.7k|    {
  451|  82.7k|        return m_value;
  452|  82.7k|    }
_ZNR3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEE5valueIS4_LPv0EEERT_v:
 1626|  82.7k|    {
 1627|  82.7k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  82.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  82.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  82.7k|        return this->get_value();
 1629|  82.7k|    }
_ZNO3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEdeIS4_LPv0EEEOT_v:
 1662|  82.7k|    {
 1663|  82.7k|        return std::move(value());
 1664|  82.7k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA14_KcEEEDaDpOT_:
 3653|  46.6k|{
 3654|  46.6k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  46.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  46.6k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA32_KcEEEDaDpOT_:
 3653|  26.4k|{
 3654|  26.4k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  26.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  26.4k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA36_KcEEEDaDpOT_:
 3653|    750|{
 3654|    750|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|    750|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|    750|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA52_KcEEEDaDpOT_:
 3653|  2.35k|{
 3654|  2.35k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  2.35k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  2.35k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA40_KcEEEDaDpOT_:
 3653|  2.69k|{
 3654|  2.69k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  2.69k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  2.69k|}
_ZN3scn2v36detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7204|   102k|{
 7205|   102k|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (7205:9): [True: 4.32k, False: 98.4k]
  ------------------
 7206|   102k|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (7206:9): [True: 834, False: 97.6k]
  ------------------
 7207|   102k|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (7207:9): [True: 11.5k, False: 86.0k]
  ------------------
 7208|   102k|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (7208:9): [True: 77.4k, False: 8.61k]
  ------------------
 7209|   102k|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (7209:9): [True: 7.66k, False: 954]
  ------------------
 7210|   101k|        return;
 7211|   101k|    }
 7212|    954|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (7212:9): [True: 222, False: 732]
  ------------------
 7213|    222|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  |  859|    222|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 210]
  |  |  ------------------
  ------------------
 7214|       |            // clang-format off
 7215|     12|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 7216|       |            // clang-format on
 7217|     12|        }
 7218|    210|        return;
 7219|    222|    }
 7220|    732|    SCN_UNLIKELY_ATTR
 7221|    732|    handler.on_error("Invalid type specifier for string");
 7222|    732|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA47_KcEEEDaDpOT_:
 3653|  6.25k|{
 3654|  6.25k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  6.25k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  6.25k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA23_KcEEEDaDpOT_:
 3653|     86|{
 3654|     86|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|     86|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|     86|}
_ZN3scn2v36detail21check_bool_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7238|  34.5k|{
 7239|  34.5k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7239:9): [True: 33.0k, False: 1.49k]
  ------------------
 7240|  34.5k|        specs.type != presentation_type::string &&
  ------------------
  |  Branch (7240:9): [True: 32.7k, False: 310]
  ------------------
 7241|  34.5k|        specs.type != presentation_type::int_generic &&
  ------------------
  |  Branch (7241:9): [True: 32.6k, False: 24]
  ------------------
 7242|  34.5k|        specs.type != presentation_type::int_hex &&
  ------------------
  |  Branch (7242:9): [True: 32.6k, False: 34]
  ------------------
 7243|  34.5k|        specs.type != presentation_type::int_binary &&
  ------------------
  |  Branch (7243:9): [True: 32.6k, False: 20]
  ------------------
 7244|  34.5k|        specs.type != presentation_type::int_unsigned_decimal &&
  ------------------
  |  Branch (7244:9): [True: 32.6k, False: 22]
  ------------------
 7245|  34.5k|        specs.type != presentation_type::int_octal &&
  ------------------
  |  Branch (7245:9): [True: 32.5k, False: 78]
  ------------------
 7246|  34.5k|        specs.type != presentation_type::int_decimal) {
  ------------------
  |  Branch (7246:9): [True: 32.5k, False: 16]
  ------------------
 7247|  32.5k|        SCN_UNLIKELY_ATTR
 7248|  32.5k|        return handler.on_error("Invalid type specifier for boolean");
 7249|  32.5k|    }
 7250|  34.5k|}
_ZN3scn2v36detail21check_char_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7170|  34.2k|{
 7171|  34.2k|    if (specs.type > presentation_type::int_hex ||
  ------------------
  |  Branch (7171:9): [True: 32.7k, False: 1.54k]
  ------------------
 7172|  34.2k|        specs.type == presentation_type::int_arbitrary_base) {
  ------------------
  |  Branch (7172:9): [True: 0, False: 1.54k]
  ------------------
 7173|  32.7k|        SCN_UNLIKELY_ATTR
 7174|  32.7k|        return handler.on_error("Invalid type specifier for character type");
 7175|  32.7k|    }
 7176|  34.2k|}
_ZN3scn2v36detail24check_pointer_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7227|  34.2k|{
 7228|  34.2k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7228:9): [True: 32.8k, False: 1.44k]
  ------------------
 7229|  34.2k|        specs.type != presentation_type::pointer) {
  ------------------
  |  Branch (7229:9): [True: 32.8k, False: 12]
  ------------------
 7230|  32.8k|        SCN_UNLIKELY_ATTR
 7231|  32.8k|        return handler.on_error("Invalid type specifier for pointer");
 7232|  32.8k|    }
 7233|  34.2k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA79_KcEEEDaDpOT_:
 3653|    144|{
 3654|    144|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|    144|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|    144|}
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|   264k|{
 3715|   264k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3715:19): [Folded - Ignored]
  ------------------
 3716|   264k|                                          const CharT*, const CharT*>) {
 3717|   264k|        return {first, last};
 3718|   264k|    }
 3719|   264k|    else {
 3720|   264k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|   264k|    }
 3722|   264k|}
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|  1.37G|{
 3715|  1.37G|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3715:19): [Folded - Ignored]
  ------------------
 3716|  1.37G|                                          const CharT*, const CharT*>) {
 3717|  1.37G|        return {first, last};
 3718|  1.37G|    }
 3719|  1.37G|    else {
 3720|  1.37G|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|  1.37G|    }
 3722|  1.37G|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3329|  6.59M|    {
 3330|  6.59M|        return m_iterator;
 3331|  6.59M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3333|  7.19M|    {
 3334|  7.19M|        return m_sentinel;
 3335|  7.19M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3329|  1.63M|    {
 3330|  1.63M|        return m_iterator;
 3331|  1.63M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3333|  2.75G|    {
 3334|  2.75G|        return m_sentinel;
 3335|  2.75G|    }
_ZN3scn2v36detail10locale_refC2Ev:
 7990|   518k|    constexpr locale_ref() = default;
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|    134|{
 1211|    134|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|    134|}
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  360|  2.85k|    {
  361|  2.85k|        return m_unexpected;
  362|  2.85k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA22_KcEEEDaDpOT_:
 3653|  6.53k|{
 3654|  6.53k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  6.53k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  6.53k|}
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  346|   101k|    {
  347|   101k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   101k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   101k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1475|   325k|    {
 1476|   325k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  446|   326k|    {
  447|   326k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   382k|    {
 1177|   382k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1429|  50.2k|    {
 1430|  50.2k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  50.2k|    {
  437|  50.2k|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1597|   383k|    {
 1598|   383k|        return has_value();
 1599|   383k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  484|   764k|    {
  485|   764k|        return m_has_value;
  486|   764k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1603|   325k|    {
 1604|   325k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   325k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   325k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   325k|        return this->get_unexpected().error();
 1606|   325k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   325k|    {
  468|   325k|        return m_unexpected;
  469|   325k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1662|  34.5k|    {
 1663|  34.5k|        return std::move(value());
 1664|  34.5k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1626|  55.0k|    {
 1627|  55.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  55.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  55.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  55.0k|        return this->get_value();
 1629|  55.0k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  450|  55.0k|    {
  451|  55.0k|        return m_value;
  452|  55.0k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1475|   223k|    {
 1476|   223k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  446|   224k|    {
  447|   224k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   263k|    {
 1177|   263k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1429|  37.2k|    {
 1430|  37.2k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  37.2k|    {
  437|  37.2k|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1597|   264k|    {
 1598|   264k|        return has_value();
 1599|   264k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  484|   525k|    {
  485|   525k|        return m_has_value;
  486|   525k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1603|   223k|    {
 1604|   223k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   223k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   223k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   223k|        return this->get_unexpected().error();
 1606|   223k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   223k|    {
  468|   223k|        return m_unexpected;
  469|   223k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1662|  30.5k|    {
 1663|  30.5k|        return std::move(value());
 1664|  30.5k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1626|  37.5k|    {
 1627|  37.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  37.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  37.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  37.5k|        return this->get_value();
 1629|  37.5k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  450|  37.5k|    {
  451|  37.5k|        return m_value;
  452|  37.5k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  10.1k|    {
 1837|  10.1k|        return detail::transform_error_impl(std::move(*this),
 1838|  10.1k|                                            std::forward<F>(f));
 1839|  10.1k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  10.1k|{
 1323|  10.1k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  10.1k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  10.1k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  10.1k|            return result(*std::forward<Exp>(exp));
 1327|  10.1k|        }
 1328|       |
 1329|  10.1k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  10.1k|        return result(unexpect, monostate{});
 1331|  10.1k|    }
 1332|  10.1k|    else {
 1333|  10.1k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  10.1k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  10.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 10.1k, False: 0]
  |  |  ------------------
  ------------------
 1335|  10.1k|                   ? result(*std::forward<Exp>(exp))
 1336|  10.1k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  10.1k|    }
 1340|  10.1k|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|   178k|    {
  485|   178k|        return m_has_value;
  486|   178k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1662|  12.2k|    {
 1663|  12.2k|        return std::move(value());
 1664|  12.2k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1626|  85.4k|    {
 1627|  85.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  85.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  85.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  85.4k|        return this->get_value();
 1629|  85.4k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  85.4k|    {
  451|  85.4k|        return m_value;
  452|  85.4k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1613|    102|    {
 1614|    102|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    102|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    102|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    102|        return std::move(this->get_unexpected().error());
 1616|    102|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|    102|    {
  468|    102|        return m_unexpected;
  469|    102|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1485|  1.10k|    {
 1486|  1.10k|    }
_ZN3scn2v310scan_errorC2Ev:
 3562|  1.49M|    constexpr scan_error() noexcept = default;
_ZNK3scn2v36detail9fill_type13get_code_unitIcEET_v:
 6186|  9.62k|    {
 6187|  9.62k|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  |  924|  9.62k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.62k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6188|  9.62k|        CharT r{};
 6189|  9.62k|        std::memcpy(&r, m_data, m_size);
 6190|  9.62k|        return r;
 6191|  9.62k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  346|  1.80k|    {
  347|  1.80k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  1.80k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  1.80k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  355|  1.94k|    {
  356|  1.94k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  1.94k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  1.94k|    }
_ZNK3scn2v36detail9fill_type14get_code_unitsIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6195|    636|    {
 6196|    636|        return {reinterpret_cast<const CharT*>(m_data), m_size};
 6197|    636|    }
_ZNK3scn2v36ranges6detail6ssize_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSD_:
 2961|     52|    {
 2962|     52|        return fn::impl(std::forward<T>(t));
 2963|     52|    }
_ZN3scn2v36ranges6detail6ssize_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISD_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeELm8EElSM_E4typeE_EEOSD_:
 2952|     52|    {
 2953|     52|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 2954|     52|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|     52|    {
 2930|     52|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|     52|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 2895|     52|    {
 2896|     52|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|     52|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|     52|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  346|    134|    {
  347|    134|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|    134|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|    134|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  346|      8|    {
  347|      8|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|      8|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|      8|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_errorEE5errorEv:
  360|  26.4k|    {
  361|  26.4k|        return m_unexpected;
  362|  26.4k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  355|  4.67k|    {
  356|  4.67k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  4.67k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  4.67k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  346|  40.5k|    {
  347|  40.5k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  40.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  40.5k|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  360|  40.5k|    {
  361|  40.5k|        return m_unexpected;
  362|  40.5k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  355|  40.5k|    {
  356|  40.5k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  40.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  40.5k|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|    780|{
 1211|    780|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|    780|}
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  346|  3.88k|    {
  347|  3.88k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  3.88k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  3.88k|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JS8_EvEEDcOT_DpOT0_:
 1210|  2.39k|{
 1211|  2.39k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  2.39k|}
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  25.9k|{
  326|  25.9k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  25.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  25.9k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_LPv0EEEmv:
 3345|   142k|    {
 3346|   142k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|   142k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  1.01k|    {
 1476|  1.01k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  1.01k|    {
  447|  1.01k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  92.9k|    {
 1177|  92.9k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1429|  91.9k|    {
 1430|  91.9k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  91.9k|    {
  437|  91.9k|    }
_ZNK3scn2v38expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1597|  80.6k|    {
 1598|  80.6k|        return has_value();
 1599|  80.6k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1652|  73.2k|    {
 1653|  73.2k|        return value();
 1654|  73.2k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1429|  9.97k|    {
 1430|  9.97k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|  9.97k|    {
  437|  9.97k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  10.3k|    {
 1177|  10.3k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|    380|    {
 1476|    380|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|    380|    {
  447|    380|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEcvbEv:
 1597|  5.12k|    {
 1598|  5.12k|        return has_value();
 1599|  5.12k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9has_valueEv:
  484|  17.3k|    {
  485|  17.3k|        return m_has_value;
  486|  17.3k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_LPv0EEERT_v:
 1652|  1.79k|    {
 1653|  1.79k|        return value();
 1654|  1.79k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5valueIS7_LPv0EEERT_v:
 1626|  6.67k|    {
 1627|  6.67k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  6.67k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.67k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  6.67k|        return this->get_value();
 1629|  6.67k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9get_valueEv:
  450|  6.67k|    {
  451|  6.67k|        return m_value;
  452|  6.67k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|    134|    {
 1476|    134|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|    134|    {
  447|    134|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  10.0k|    {
 1177|  10.0k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  9.94k|    {
 1430|  9.94k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2IJSB_EvEENS3_10in_place_tEDpOT_:
  436|  9.94k|    {
  437|  9.94k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|  1.76k|    {
 1837|  1.76k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.76k|                                            std::forward<F>(f));
 1839|  1.76k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1322|  1.76k|{
 1323|  1.76k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.76k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.76k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.76k|            return result(*std::forward<Exp>(exp));
 1327|  1.76k|        }
 1328|       |
 1329|  1.76k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.76k|        return result(unexpect, monostate{});
 1331|  1.76k|    }
 1332|  1.76k|    else {
 1333|  1.76k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.76k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.76k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.76k, False: 0]
  |  |  ------------------
  ------------------
 1335|  1.76k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.76k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  1.76k|    }
 1340|  1.76k|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_LPv0EEEOT_v:
 1662|  4.87k|    {
 1663|  4.87k|        return std::move(value());
 1664|  4.87k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1429|  4.70k|    {
 1430|  4.70k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|  4.70k|    {
  437|  4.70k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  21.2k|    {
 1177|  21.2k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5errorEv:
 1613|    350|    {
 1614|    350|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    350|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    350|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    350|        return std::move(this->get_unexpected().error());
 1616|    350|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  467|    350|    {
  468|    350|        return m_unexpected;
  469|    350|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1485|  2.74k|    {
 1486|  2.74k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|  14.2k|    {
  447|  14.2k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  3.81k|    {
 2724|  3.81k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.81k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  3.81k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  3.81k|    {
 2705|  3.81k|        return decay_copy(t.begin());
 2706|  3.81k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEEu7__decayIT_EOSA_:
 1948|  8.17k|{
 1949|  8.17k|    return SCN_FWD(t);
  ------------------
  |  |  930|  8.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  8.17k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E5beginEv:
 3329|  3.81k|    {
 3330|  3.81k|        return m_iterator;
 3331|  3.81k|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  3.81k|    {
 2781|  3.81k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.81k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  3.81k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  3.81k|    {
 2763|  3.81k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  3.81k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  3.81k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E3endEv:
 3333|  3.81k|    {
 3334|  3.81k|        return m_sentinel;
 3335|  3.81k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_EC2ISA_LPv0EEET_SA_:
 3315|  3.81k|    {
 3316|  3.81k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEcvbEv:
 1597|  10.0k|    {
 1598|  10.0k|        return has_value();
 1599|  10.0k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  20.1k|    {
  485|  20.1k|        return m_has_value;
  486|  20.1k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEE5errorEv:
 1603|    134|    {
 1604|    134|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    134|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    134|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    134|        return this->get_unexpected().error();
 1606|    134|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|    134|    {
  468|    134|        return m_unexpected;
  469|    134|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1662|  9.94k|    {
 1663|  9.94k|        return std::move(value());
 1664|  9.94k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  9.94k|    {
 1627|  9.94k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  9.94k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.94k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  9.94k|        return this->get_value();
 1629|  9.94k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  9.94k|    {
  451|  9.94k|        return m_value;
  452|  9.94k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  70.2k|    {
 1177|  70.2k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|  70.2k|    {
 1430|  70.2k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  436|  70.2k|    {
  437|  70.2k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1597|  70.2k|    {
 1598|  70.2k|        return has_value();
 1599|  70.2k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  484|   140k|    {
  485|   140k|        return m_has_value;
  486|   140k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|  70.2k|    {
 1663|  70.2k|        return std::move(value());
 1664|  70.2k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|  70.2k|    {
 1627|  70.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  70.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  70.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  70.2k|        return this->get_value();
 1629|  70.2k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  450|  70.2k|    {
  451|  70.2k|        return m_value;
  452|  70.2k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|  11.4k|    {
 1476|  11.4k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|    902|    {
 1476|    902|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|  1.25k|    {
  447|  1.25k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  13.0k|    {
 1177|  13.0k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2INS8_4codeELPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  8.69k|    {
 1476|  8.69k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  8.69k|    {
  447|  8.69k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEcvbEv:
 1597|  11.9k|    {
 1598|  11.9k|        return has_value();
 1599|  11.9k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9has_valueEv:
  484|  23.6k|    {
  485|  23.6k|        return m_has_value;
  486|  23.6k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1603|  4.21k|    {
 1604|  4.21k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  4.21k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.21k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  4.21k|        return this->get_unexpected().error();
 1606|  4.21k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  467|  5.86k|    {
  468|  5.86k|        return m_unexpected;
  469|  5.86k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1429|  2.21k|    {
 1430|  2.21k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  436|  2.21k|    {
  437|  2.21k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.21k|    {
 1177|  2.21k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5valueIS7_LPv0EEERT_v:
 1626|  3.11k|    {
 1627|  3.11k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.11k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.11k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.11k|        return this->get_value();
 1629|  3.11k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9get_valueEv:
  450|  3.11k|    {
  451|  3.11k|        return m_value;
  452|  3.11k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1597|  1.66k|    {
 1598|  1.66k|        return has_value();
 1599|  1.66k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  484|  4.42k|    {
  485|  4.42k|        return m_has_value;
  486|  4.42k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.66k|    {
 1177|  1.66k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_LPv0EEEOT_v:
 1662|  2.21k|    {
 1663|  2.21k|        return std::move(value());
 1664|  2.21k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_LPv0EEERT_v:
 1626|  2.21k|    {
 1627|  2.21k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.21k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.21k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.21k|        return this->get_value();
 1629|  2.21k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  450|  2.21k|    {
  451|  2.21k|        return m_value;
  452|  2.21k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3333|   444k|    {
 3334|   444k|        return m_sentinel;
 3335|   444k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|  3.46k|    {
 1837|  3.46k|        return detail::transform_error_impl(std::move(*this),
 1838|  3.46k|                                            std::forward<F>(f));
 1839|  3.46k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1322|  3.46k|{
 1323|  3.46k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  3.46k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  3.46k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  3.46k|            return result(*std::forward<Exp>(exp));
 1327|  3.46k|        }
 1328|       |
 1329|  3.46k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  3.46k|        return result(unexpect, monostate{});
 1331|  3.46k|    }
 1332|  3.46k|    else {
 1333|  3.46k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  3.46k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  3.46k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.11k, False: 350]
  |  |  ------------------
  ------------------
 1335|  3.46k|                   ? result(*std::forward<Exp>(exp))
 1336|  3.46k|                   : result(unexpect,
 1337|    350|                            trivial_invoke(std::forward<F>(f),
 1338|    350|                                           std::forward<Exp>(exp).error()));
 1339|  3.46k|    }
 1340|  3.46k|}
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1429|  3.11k|    {
 1430|  3.11k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|  3.11k|    {
  437|  3.11k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1485|    350|    {
 1486|    350|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEdeIS7_LPv0EEEOT_v:
 1662|  3.11k|    {
 1663|  3.11k|        return std::move(value());
 1664|  3.11k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3329|   836k|    {
 3330|   836k|        return m_iterator;
 3331|   836k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1429|  1.66k|    {
 1430|  1.66k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  436|  1.66k|    {
  437|  1.66k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1836|  1.66k|    {
 1837|  1.66k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.66k|                                            std::forward<F>(f));
 1839|  1.66k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1322|  1.66k|{
 1323|  1.66k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.66k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.66k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.66k|            return result(*std::forward<Exp>(exp));
 1327|  1.66k|        }
 1328|       |
 1329|  1.66k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.66k|        return result(unexpect, monostate{});
 1331|  1.66k|    }
 1332|  1.66k|    else {
 1333|  1.66k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.66k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.66k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.66k, False: 0]
  |  |  ------------------
  ------------------
 1335|  1.66k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.66k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  1.66k|    }
 1340|  1.66k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  484|  3.32k|    {
  485|  3.32k|        return m_has_value;
  486|  3.32k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEdeIS9_LPv0EEEOT_v:
 1662|  1.66k|    {
 1663|  1.66k|        return std::move(value());
 1664|  1.66k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE5valueIS9_LPv0EEERT_v:
 1626|  1.66k|    {
 1627|  1.66k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.66k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.66k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.66k|        return this->get_value();
 1629|  1.66k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  450|  1.66k|    {
  451|  1.66k|        return m_value;
  452|  1.66k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1429|  1.66k|    {
 1430|  1.66k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  436|  1.66k|    {
  437|  1.66k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.66k|    {
 1177|  1.66k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEcvbEv:
 1597|  1.66k|    {
 1598|  1.66k|        return has_value();
 1599|  1.66k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  3.32k|    {
  485|  3.32k|        return m_has_value;
  486|  3.32k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1662|  1.66k|    {
 1663|  1.66k|        return std::move(value());
 1664|  1.66k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1626|  1.66k|    {
 1627|  1.66k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.66k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.66k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.66k|        return this->get_value();
 1629|  1.66k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.66k|    {
  451|  1.66k|        return m_value;
  452|  1.66k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|  1.64k|    {
 1837|  1.64k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.64k|                                            std::forward<F>(f));
 1839|  1.64k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_LPv0ESC_EEDaOT_OT0_:
 1322|  1.64k|{
 1323|  1.64k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.64k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.64k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.64k|            return result(*std::forward<Exp>(exp));
 1327|  1.64k|        }
 1328|       |
 1329|  1.64k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.64k|        return result(unexpect, monostate{});
 1331|  1.64k|    }
 1332|  1.64k|    else {
 1333|  1.64k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.64k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.64k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 1.64k]
  |  |  ------------------
  ------------------
 1335|  1.64k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.64k|                   : result(unexpect,
 1337|  1.64k|                            trivial_invoke(std::forward<F>(f),
 1338|  1.64k|                                           std::forward<Exp>(exp).error()));
 1339|  1.64k|    }
 1340|  1.64k|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1613|  1.64k|    {
 1614|  1.64k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.64k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.64k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  1.64k|        return std::move(this->get_unexpected().error());
 1616|  1.64k|    }
_ZN3scn2v313scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3647|  2.74k|    {
 3648|  2.74k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_LPv0EEET_SF_:
 3315|   302k|    {
 3316|   302k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|     16|    {
 1476|     16|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  625|     16|    {
  626|     16|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     16|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  688|     16|    {
  689|     16|        scn::detail::construct_at(unexpected_ptr(),
  690|     16|                                  std::forward<Args>(args)...);
  691|     16|        m_has_value = false;
  692|     16|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|     48|    {
  718|     48|        return reinterpret_cast<unexpected<E>*>(
  719|     48|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|     48|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|     48|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     16|    {
 1177|     16|    }
_ZNK3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEcvbEv:
 1597|     16|    {
 1598|     16|        return has_value();
 1599|     16|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE9has_valueEv:
  674|     48|    {
  675|     48|        return m_has_value;
  676|     48|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEE5errorEv:
 1603|     16|    {
 1604|     16|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     16|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     16|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     16|        return this->get_unexpected().error();
 1606|     16|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     16|    {
  658|     16|        return *unexpected_ptr();
  659|     16|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EED2Ev:
  630|     16|    {
  631|     16|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 16]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     16|        else {
  635|     16|            destroy_unexpected();
  636|     16|        }
  637|     16|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     16|    {
  700|     16|        scn::detail::destroy_at(unexpected_ptr());
  701|     16|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEcvbEv:
 1597|  21.7k|    {
 1598|  21.7k|        return has_value();
 1599|  21.7k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  42.4k|    {
  485|  42.4k|        return m_has_value;
  486|  42.4k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5errorEv:
 1603|  13.6k|    {
 1604|  13.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  13.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  13.6k|        return this->get_unexpected().error();
 1606|  13.6k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  13.6k|    {
  468|  13.6k|        return m_unexpected;
  469|  13.6k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_LPv0EEEOT_v:
 1662|  4.70k|    {
 1663|  4.70k|        return std::move(value());
 1664|  4.70k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5valueIS7_LPv0EEERT_v:
 1626|  6.98k|    {
 1627|  6.98k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  6.98k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.98k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  6.98k|        return this->get_value();
 1629|  6.98k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  6.98k|    {
  451|  6.98k|        return m_value;
  452|  6.98k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  1.19k|    {
 1476|  1.19k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  1.29k|    {
  447|  1.29k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  16.5k|    {
 1177|  16.5k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|  13.1k|    {
 1476|  13.1k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  13.1k|    {
  447|  13.1k|    }
_ZNK3scn2v38expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1597|  17.5k|    {
 1598|  17.5k|        return has_value();
 1599|  17.5k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  27.3k|    {
  485|  27.3k|        return m_has_value;
  486|  27.3k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1603|  6.50k|    {
 1604|  6.50k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  6.50k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.50k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  6.50k|        return this->get_unexpected().error();
 1606|  6.50k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  6.50k|    {
  468|  6.50k|        return m_unexpected;
  469|  6.50k|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1429|  4.21k|    {
 1430|  4.21k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|  4.21k|    {
  437|  4.21k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  4.21k|    {
 1177|  4.21k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1626|  2.10k|    {
 1627|  2.10k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.10k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.10k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.10k|        return this->get_value();
 1629|  2.10k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  2.10k|    {
  451|  2.10k|        return m_value;
  452|  2.10k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  3.13k|    {
 1598|  3.13k|        return has_value();
 1599|  3.13k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  8.43k|    {
  485|  8.43k|        return m_has_value;
  486|  8.43k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.13k|    {
 1177|  3.13k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1662|  4.21k|    {
 1663|  4.21k|        return std::move(value());
 1664|  4.21k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1626|  4.21k|    {
 1627|  4.21k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.21k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.21k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.21k|        return this->get_value();
 1629|  4.21k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|  4.21k|    {
  451|  4.21k|        return m_value;
  452|  4.21k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3220|  86.3k|    {
 3221|  86.3k|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 3.23k, False: 83.1k]
  ------------------
 3222|  86.3k|                   ? nullptr
 3223|  86.3k|                   : std::addressof(*ranges::begin(derived()));
 3224|  86.3k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  86.3k|    {
 3005|  86.3k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  86.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  86.3k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  86.3k|    {
 2978|  86.3k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  86.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  86.3k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5emptyEv:
 3338|  86.3k|    {
 3339|  86.3k|        return m_iterator == m_sentinel;
 3340|  86.3k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3179|   169k|    {
 3180|   169k|        return static_cast<D&>(*this);
 3181|   169k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  83.1k|    {
 2724|  83.1k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  83.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  83.1k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  83.1k|    {
 2705|  83.1k|        return decay_copy(t.begin());
 2706|  83.1k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1429|  2.10k|    {
 1430|  2.10k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  2.10k|    {
  437|  2.10k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1429|  3.13k|    {
 1430|  3.13k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  436|  3.13k|    {
  437|  3.13k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  3.13k|    {
 1837|  3.13k|        return detail::transform_error_impl(std::move(*this),
 1838|  3.13k|                                            std::forward<F>(f));
 1839|  3.13k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
 1322|  3.13k|{
 1323|  3.13k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  3.13k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  3.13k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  3.13k|            return result(*std::forward<Exp>(exp));
 1327|  3.13k|        }
 1328|       |
 1329|  3.13k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  3.13k|        return result(unexpect, monostate{});
 1331|  3.13k|    }
 1332|  3.13k|    else {
 1333|  3.13k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  3.13k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  3.13k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.13k, False: 0]
  |  |  ------------------
  ------------------
 1335|  3.13k|                   ? result(*std::forward<Exp>(exp))
 1336|  3.13k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  3.13k|    }
 1340|  3.13k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  484|  6.27k|    {
  485|  6.27k|        return m_has_value;
  486|  6.27k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1662|  3.13k|    {
 1663|  3.13k|        return std::move(value());
 1664|  3.13k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1626|  3.13k|    {
 1627|  3.13k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.13k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.13k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.13k|        return this->get_value();
 1629|  3.13k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  450|  3.13k|    {
  451|  3.13k|        return m_value;
  452|  3.13k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|  3.13k|    {
 1430|  3.13k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  436|  3.13k|    {
  437|  3.13k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.13k|    {
 1177|  3.13k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1597|  3.13k|    {
 1598|  3.13k|        return has_value();
 1599|  3.13k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  484|  6.27k|    {
  485|  6.27k|        return m_has_value;
  486|  6.27k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|  3.13k|    {
 1663|  3.13k|        return std::move(value());
 1664|  3.13k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|  3.13k|    {
 1627|  3.13k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.13k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.13k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.13k|        return this->get_value();
 1629|  3.13k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  450|  3.13k|    {
  451|  3.13k|        return m_value;
  452|  3.13k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_LPv0ELSG_0EEEONS0_10unexpectedIT_EE:
 1475|    116|    {
 1476|    116|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  625|    116|    {
  626|    116|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|    116|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  688|    116|    {
  689|    116|        scn::detail::construct_at(unexpected_ptr(),
  690|    116|                                  std::forward<Args>(args)...);
  691|    116|        m_has_value = false;
  692|    116|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|    348|    {
  718|    348|        return reinterpret_cast<unexpected<E>*>(
  719|    348|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|    348|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|    348|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    116|    {
 1177|    116|    }
_ZNK3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1597|    116|    {
 1598|    116|        return has_value();
 1599|    116|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  674|    348|    {
  675|    348|        return m_has_value;
  676|    348|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1603|    116|    {
 1604|    116|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    116|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    116|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    116|        return this->get_unexpected().error();
 1606|    116|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|    116|    {
  658|    116|        return *unexpected_ptr();
  659|    116|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  630|    116|    {
  631|    116|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 116]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|    116|        else {
  635|    116|            destroy_unexpected();
  636|    116|        }
  637|    116|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|    116|    {
  700|    116|        scn::detail::destroy_at(unexpected_ptr());
  701|    116|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  46.4k|    {
 2855|  46.4k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  46.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  46.4k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  46.4k|    {
 2836|  46.4k|        return t.data();
 2837|  46.4k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1475|  1.00M|    {
 1476|  1.00M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  446|  1.00M|    {
  447|  1.00M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.01M|    {
 1177|  1.01M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1429|  6.44k|    {
 1430|  6.44k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  436|  6.44k|    {
  437|  6.44k|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1210|  3.97k|{
 1211|  3.97k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  3.97k|}
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 1836|    552|    {
 1837|    552|        return detail::transform_error_impl(std::move(*this),
 1838|    552|                                            std::forward<F>(f));
 1839|    552|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ELPv0ESG_EEDaOT_OT0_:
 1322|    552|{
 1323|    552|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    552|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    552|        if (SCN_LIKELY(exp.has_value())) {
 1326|    552|            return result(*std::forward<Exp>(exp));
 1327|    552|        }
 1328|       |
 1329|    552|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    552|        return result(unexpect, monostate{});
 1331|    552|    }
 1332|    552|    else {
 1333|    552|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    552|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    552|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 552, False: 0]
  |  |  ------------------
  ------------------
 1335|    552|                   ? result(*std::forward<Exp>(exp))
 1336|    552|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    552|    }
 1340|    552|}
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1429|    552|    {
 1430|    552|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  436|    552|    {
  437|    552|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    552|    {
 1177|    552|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|    552|    {
 1598|    552|        return has_value();
 1599|    552|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.10k|    {
  485|  1.10k|        return m_has_value;
  486|  1.10k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_LPv0EEEOT_v:
 1662|    552|    {
 1663|    552|        return std::move(value());
 1664|    552|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1626|    552|    {
 1627|    552|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    552|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    552|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    552|        return this->get_value();
 1629|    552|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    552|    {
  451|    552|        return m_value;
  452|    552|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1822|  1.10k|    {
 1823|  1.10k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|  1.10k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_LPv0ESD_EEDaOT_OT0_:
 1322|  1.10k|{
 1323|  1.10k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.10k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.10k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.10k|            return result(*std::forward<Exp>(exp));
 1327|  1.10k|        }
 1328|       |
 1329|  1.10k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.10k|        return result(unexpect, monostate{});
 1331|  1.10k|    }
 1332|  1.10k|    else {
 1333|  1.10k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.10k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.10k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 1.10k]
  |  |  ------------------
  ------------------
 1335|  1.10k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.10k|                   : result(unexpect,
 1337|  1.10k|                            trivial_invoke(std::forward<F>(f),
 1338|  1.10k|                                           std::forward<Exp>(exp).error()));
 1339|  1.10k|    }
 1340|  1.10k|}
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_LPv0EEERT_v:
 1652|  2.28k|    {
 1653|  2.28k|        return value();
 1654|  2.28k|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3667|      6|    auto&& SCN_TRY_TMP = (x);                          \
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|    546|    {
 2724|    546|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    546|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|    546|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|    546|    {
 2705|    546|        return decay_copy(t.begin());
 2706|    546|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3667|    528|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|  1.08k|    {
 1837|  1.08k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.08k|                                            std::forward<F>(f));
 1839|  1.08k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1322|  1.08k|{
 1323|  1.08k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.08k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.08k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.08k|            return result(*std::forward<Exp>(exp));
 1327|  1.08k|        }
 1328|       |
 1329|  1.08k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.08k|        return result(unexpect, monostate{});
 1331|  1.08k|    }
 1332|  1.08k|    else {
 1333|  1.08k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.08k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.08k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.08k, False: 0]
  |  |  ------------------
  ------------------
 1335|  1.08k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.08k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  1.08k|    }
 1340|  1.08k|}
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  1.08k|    {
 1430|  1.08k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|  1.08k|    {
  437|  1.08k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.08k|    {
 1177|  1.08k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|  1.08k|    {
 1598|  1.08k|        return has_value();
 1599|  1.08k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.16k|    {
  485|  2.16k|        return m_has_value;
  486|  2.16k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  1.08k|    {
 1663|  1.08k|        return std::move(value());
 1664|  1.08k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  1.08k|    {
 1627|  1.08k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.08k|        return this->get_value();
 1629|  1.08k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.08k|    {
  451|  1.08k|        return m_value;
  452|  1.08k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1822|  1.10k|    {
 1823|  1.10k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|  1.10k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1322|  1.10k|{
 1323|  1.10k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.10k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.10k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.10k|            return result(*std::forward<Exp>(exp));
 1327|  1.10k|        }
 1328|       |
 1329|  1.10k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.10k|        return result(unexpect, monostate{});
 1331|  1.10k|    }
 1332|  1.10k|    else {
 1333|  1.10k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.10k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.10k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 1.10k]
  |  |  ------------------
  ------------------
 1335|  1.10k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.10k|                   : result(unexpect,
 1337|  1.10k|                            trivial_invoke(std::forward<F>(f),
 1338|  1.10k|                                           std::forward<Exp>(exp).error()));
 1339|  1.10k|    }
 1340|  1.10k|}
_ZN3scn2v313scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3647|  1.10k|    {
 3648|  1.10k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1652|  20.5k|    {
 1653|  20.5k|        return value();
 1654|  20.5k|    }
_ZN3scn2v36detail22parse_presentation_setIcRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
 6696|  8.65k|{
 6697|  8.65k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  8.65k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.65k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  8.65k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  8.65k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.65k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  8.65k|    auto start = begin;
 6701|  8.65k|    ++begin;
 6702|       |
 6703|  8.65k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  8.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.65k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|      0|        return {};
 6708|      0|    }
 6709|  8.65k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 696, False: 7.96k]
  ------------------
 6710|    696|        handler.on_charset_inverted();
 6711|    696|        ++begin;
 6712|    696|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    696|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 696]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|      0|            return {};
 6717|      0|        }
 6718|    696|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 6, False: 690]
  ------------------
 6719|      6|            handler.on_charset_single(char32_t{']'});
 6720|      6|            ++begin;
 6721|      6|        }
 6722|    696|    }
 6723|  7.96k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 0, False: 7.96k]
  ------------------
 6724|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|      0|    }
 6726|       |
 6727|  2.54M|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 2.54M, False: 0]
  ------------------
 6728|  2.54M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  2.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.54M]
  |  |  ------------------
  ------------------
 6729|      0|            break;
 6730|      0|        }
 6731|       |
 6732|  2.54M|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 8.65k, False: 2.54M]
  ------------------
 6733|  8.65k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  8.65k|        }
 6735|       |
 6736|  2.54M|        parse_presentation_set_literal(begin, end, handler);
 6737|  2.54M|    }
 6738|       |
 6739|      0|    SCN_UNLIKELY_ATTR
 6740|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6741|      0|    return {};
 6742|  8.65k|}
_ZN3scn2v36detail30parse_presentation_set_literalIcRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
 6660|  2.54M|{
 6661|  2.54M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.54M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.54M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  2.54M|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  2.54M|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  2.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.54M]
  |  |  ------------------
  ------------------
 6665|      0|        return;
 6666|      0|    }
 6667|       |
 6668|  2.54M|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 2.54M, False: 0]
  |  Branch (6668:25): [True: 12.8k, False: 2.52M]
  |  Branch (6668:49): [True: 12.8k, False: 0]
  ------------------
 6669|  2.54M|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 12.6k, False: 192]
  ------------------
 6670|  12.6k|        ++begin;
 6671|       |
 6672|  12.6k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|  12.6k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.6k]
  |  |  ------------------
  ------------------
 6674|      0|            return;
 6675|      0|        }
 6676|       |
 6677|  12.6k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.6k]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|      0|            return;
 6682|      0|        }
 6683|       |
 6684|  12.6k|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|  12.6k|        return;
 6686|  12.6k|    }
 6687|       |
 6688|  2.52M|    handler.on_charset_single(cp_first);
 6689|  2.52M|}
_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
 6636|  2.55M|{
 6637|  2.55M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.55M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.55M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  2.55M|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  2.55M|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  5.10M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.55M]
  |  |  |  Branch (859:45): [True: 0, False: 2.55M]
  |  |  |  Branch (859:45): [True: 0, False: 2.55M]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|  2.55M|    const auto cp =
 6646|  2.55M|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  2.55M|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  2.55M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.55M]
  |  |  ------------------
  ------------------
 6648|      0|        handler.on_error("Invalid encoding in format string");
 6649|      0|        return invalid_code_point;
 6650|      0|    }
 6651|       |
 6652|  2.55M|    begin += len;
 6653|  2.55M|    return cp;
 6654|  2.55M|}
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  82.7k|    {
 1177|  82.7k|    }
_ZN3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEC2IS4_vEEOT_:
 1429|  82.7k|    {
 1430|  82.7k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EEC2IJS5_EvEENS3_10in_place_tEDpOT_:
  436|  82.7k|    {
  437|  82.7k|    }
_ZNK3scn2v36detail12format_specs14charset_stringIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6251|  58.9k|    {
 6252|  58.9k|        return {reinterpret_cast<const CharT*>(charset_string_data),
 6253|  58.9k|                charset_string_size};
 6254|  58.9k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IRKS7_vEEOT_:
 1429|  2.28k|    {
 1430|  2.28k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJRKS8_EvEENSt3__110in_place_tEDpOT_:
  436|  2.28k|    {
  437|  2.28k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1429|  5.85k|    {
 1430|  5.85k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  436|  5.85k|    {
  437|  5.85k|    }
_ZN3scn2v36detail34decode_code_point_exhaustive_validIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4032|   707k|{
 4033|   707k|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4033:19): [Folded - Ignored]
  ------------------
 4034|   707k|        return decode_utf8_code_point_exhaustive_valid(input);
 4035|   707k|    }
 4036|   707k|    else if constexpr (sizeof(CharT) == 2) {
 4037|   707k|        return decode_utf16_code_point_exhaustive_valid(input);
 4038|   707k|    }
 4039|   707k|    else {
 4040|   707k|        SCN_EXPECT(input.size() == 1);
 4041|   707k|        return static_cast<char32_t>(input.front());
 4042|   707k|    }
 4043|   707k|}
_ZZN3scn2v36detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3910|  84.3k|    const auto is_trailing_code_unit = [](char ch) {
 3911|  84.3k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3912|  84.3k|    };
_ZNK3scn2v36detail9fill_type13get_code_unitIwEET_v:
 6186|  1.23k|    {
 6187|  1.23k|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  |  924|  1.23k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.23k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6188|  1.23k|        CharT r{};
 6189|  1.23k|        std::memcpy(&r, m_data, m_size);
 6190|  1.23k|        return r;
 6191|  1.23k|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3806|  1.37G|{
 3807|  1.37G|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3807:19): [Folded - Ignored]
  ------------------
 3808|  1.37G|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|  1.37G|    }
 3810|  1.37G|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (3810:24): [Folded - Ignored]
  ------------------
 3811|  1.37G|        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|  1.37G|    }
 3813|  1.37G|    else {
 3814|       |        // utf-32
 3815|  1.37G|        static_assert(sizeof(U) == 4);
 3816|  1.37G|        SCN_UNUSED(ch);
  ------------------
  |  |  909|  1.37G|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3817|  1.37G|        return 1;
 3818|  1.37G|    }
 3819|  1.37G|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|  1.37G|{
 4013|  1.37G|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4013:19): [Folded - Ignored]
  ------------------
 4014|  1.37G|        return decode_utf8_code_point_exhaustive(input);
 4015|  1.37G|    }
 4016|  1.37G|    else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (4016:24): [Folded - Ignored]
  ------------------
 4017|  1.37G|        return decode_utf16_code_point_exhaustive(input);
 4018|  1.37G|    }
 4019|  1.37G|    else {
 4020|  1.37G|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|  1.37G|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.37G|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4021|  1.37G|        auto cp = static_cast<char32_t>(input.front());
 4022|  1.37G|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  1.37G|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 368k, False: 1.37G]
  |  |  ------------------
  ------------------
 4023|   368k|            return invalid_code_point;
 4024|   368k|        }
 4025|  1.37G|        return cp;
 4026|  1.37G|    }
 4027|  1.37G|}
_ZN3scn2v36detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3698|  99.2k|{
 3699|  99.2k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3699:19): [Folded - Ignored]
  |  Branch (3699:19): [Folded - Ignored]
  ------------------
 3700|  99.2k|                                          decltype(first), decltype(last)> &&
 3701|  99.2k|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3701:19): [Folded - Ignored]
  ------------------
 3702|  99.2k|        return {first, last};
 3703|  99.2k|    }
 3704|  99.2k|    else {
 3705|  99.2k|        return {to_address(first), static_cast<size_t>(std::distance(
 3706|  99.2k|                                       to_address(first), to_address(last)))};
 3707|  99.2k|    }
 3708|  99.2k|}
_ZN3scn2v36detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|   427k|{
  326|   427k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   427k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|   427k|}
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  303|   430k|{
  304|   430k|    return p;
  305|   430k|}
_ZN3scn2v36detail25make_string_view_iteratorIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3729|  7.83k|{
 3730|  7.83k|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3730:19): [Folded - Ignored]
  |  Branch (3730:19): [Folded - Ignored]
  ------------------
 3731|  7.83k|                      typename std::basic_string_view<CharT>::iterator,
 3732|  7.83k|                      decltype(it)> &&
 3733|  7.83k|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3733:19): [Folded - Ignored]
  ------------------
 3734|  7.83k|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  7.83k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3735|  7.83k|        return it;
 3736|  7.83k|    }
 3737|  7.83k|    else {
 3738|  7.83k|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3739|  7.83k|    }
 3740|  7.83k|}
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  3.31k|{
  326|  3.31k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  3.31k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  3.31k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_LPv0EEEmv:
 3345|  49.5k|    {
 3346|  49.5k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  49.5k|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|    142|    {
 1476|    142|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|    142|    {
  447|    142|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  27.2k|    {
 1177|  27.2k|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1429|  27.1k|    {
 1430|  27.1k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  27.1k|    {
  437|  27.1k|    }
_ZNK3scn2v38expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1597|  7.21k|    {
 1598|  7.21k|        return has_value();
 1599|  7.21k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  47.3k|    {
  485|  47.3k|        return m_has_value;
  486|  47.3k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1626|  19.9k|    {
 1627|  19.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  19.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  19.9k|        return this->get_value();
 1629|  19.9k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  19.9k|    {
  451|  19.9k|        return m_value;
  452|  19.9k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1429|  3.64k|    {
 1430|  3.64k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|  3.64k|    {
  437|  3.64k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.83k|    {
 1177|  3.83k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|    186|    {
 1476|    186|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|    186|    {
  447|    186|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEcvbEv:
 1597|  1.70k|    {
 1598|  1.70k|        return has_value();
 1599|  1.70k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9has_valueEv:
  484|  5.96k|    {
  485|  5.96k|        return m_has_value;
  486|  5.96k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5valueIS7_LPv0EEERT_v:
 1626|  1.94k|    {
 1627|  1.94k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.94k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.94k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.94k|        return this->get_value();
 1629|  1.94k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9get_valueEv:
  450|  1.94k|    {
  451|  1.94k|        return m_value;
  452|  1.94k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.67k|    {
 1177|  2.67k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  2.67k|    {
 1430|  2.67k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EEC2IJSB_EvEENS3_10in_place_tEDpOT_:
  436|  2.67k|    {
  437|  2.67k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|    410|    {
 1837|    410|        return detail::transform_error_impl(std::move(*this),
 1838|    410|                                            std::forward<F>(f));
 1839|    410|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1322|    410|{
 1323|    410|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    410|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    410|        if (SCN_LIKELY(exp.has_value())) {
 1326|    410|            return result(*std::forward<Exp>(exp));
 1327|    410|        }
 1328|       |
 1329|    410|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    410|        return result(unexpect, monostate{});
 1331|    410|    }
 1332|    410|    else {
 1333|    410|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    410|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    410|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 410, False: 0]
  |  |  ------------------
  ------------------
 1335|    410|                   ? result(*std::forward<Exp>(exp))
 1336|    410|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    410|    }
 1340|    410|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEdeIS7_LPv0EEEOT_v:
 1662|  1.94k|    {
 1663|  1.94k|        return std::move(value());
 1664|  1.94k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1429|  1.03k|    {
 1430|  1.03k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|  1.03k|    {
  437|  1.03k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  5.51k|    {
 1177|  5.51k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5errorEv:
 1613|    186|    {
 1614|    186|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    186|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    186|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    186|        return std::move(this->get_unexpected().error());
 1616|    186|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  467|    186|    {
  468|    186|        return m_unexpected;
  469|    186|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1485|  1.31k|    {
 1486|  1.31k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|  4.48k|    {
  447|  4.48k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|    622|    {
 2724|    622|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    622|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|    622|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|    622|    {
 2705|    622|        return decay_copy(t.begin());
 2706|    622|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEEu7__decayIT_EOSA_:
 1948|  1.51k|{
 1949|  1.51k|    return SCN_FWD(t);
  ------------------
  |  |  930|  1.51k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  1.51k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_E5beginEv:
 3329|    622|    {
 3330|    622|        return m_iterator;
 3331|    622|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|    622|    {
 2781|    622|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    622|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|    622|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|    622|    {
 2763|    622|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|    622|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|    622|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_E3endEv:
 3333|    622|    {
 3334|    622|        return m_sentinel;
 3335|    622|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_EC2ISA_LPv0EEET_SA_:
 3315|    622|    {
 3316|    622|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEcvbEv:
 1597|  2.67k|    {
 1598|  2.67k|        return has_value();
 1599|  2.67k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  5.35k|    {
  485|  5.35k|        return m_has_value;
  486|  5.35k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1662|  2.67k|    {
 1663|  2.67k|        return std::move(value());
 1664|  2.67k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  2.67k|    {
 1627|  2.67k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.67k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.67k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.67k|        return this->get_value();
 1629|  2.67k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.67k|    {
  451|  2.67k|        return m_value;
  452|  2.67k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  45.3k|    {
 1177|  45.3k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|  45.3k|    {
 1430|  45.3k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  436|  45.3k|    {
  437|  45.3k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  12.7k|    {
 1837|  12.7k|        return detail::transform_error_impl(std::move(*this),
 1838|  12.7k|                                            std::forward<F>(f));
 1839|  12.7k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  12.7k|{
 1323|  12.7k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  12.7k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  12.7k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  12.7k|            return result(*std::forward<Exp>(exp));
 1327|  12.7k|        }
 1328|       |
 1329|  12.7k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  12.7k|        return result(unexpect, monostate{});
 1331|  12.7k|    }
 1332|  12.7k|    else {
 1333|  12.7k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  12.7k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  12.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 12.7k, False: 0]
  |  |  ------------------
  ------------------
 1335|  12.7k|                   ? result(*std::forward<Exp>(exp))
 1336|  12.7k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  12.7k|    }
 1340|  12.7k|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1662|  19.9k|    {
 1663|  19.9k|        return std::move(value());
 1664|  19.9k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1613|    142|    {
 1614|    142|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    142|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    142|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    142|        return std::move(this->get_unexpected().error());
 1616|    142|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|    142|    {
  468|    142|        return m_unexpected;
  469|    142|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1485|  1.20k|    {
 1486|  1.20k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1597|  45.3k|    {
 1598|  45.3k|        return has_value();
 1599|  45.3k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  484|  90.7k|    {
  485|  90.7k|        return m_has_value;
  486|  90.7k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|  45.3k|    {
 1663|  45.3k|        return std::move(value());
 1664|  45.3k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|  45.3k|    {
 1627|  45.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  45.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  45.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  45.3k|        return this->get_value();
 1629|  45.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  450|  45.3k|    {
  451|  45.3k|        return m_value;
  452|  45.3k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|  3.16k|    {
 1476|  3.16k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|    468|    {
 1476|    468|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|    654|    {
  447|    654|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  6.50k|    {
 1177|  6.50k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2INS8_4codeELPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  4.31k|    {
 1476|  4.31k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  4.31k|    {
  447|  4.31k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEcvbEv:
 1597|  6.03k|    {
 1598|  6.03k|        return has_value();
 1599|  6.03k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9has_valueEv:
  484|  11.7k|    {
  485|  11.7k|        return m_has_value;
  486|  11.7k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1603|  2.13k|    {
 1604|  2.13k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.13k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.13k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.13k|        return this->get_unexpected().error();
 1606|  2.13k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  467|  2.88k|    {
  468|  2.88k|        return m_unexpected;
  469|  2.88k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1429|  1.10k|    {
 1430|  1.10k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  436|  1.10k|    {
  437|  1.10k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.10k|    {
 1177|  1.10k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5valueIS7_LPv0EEERT_v:
 1626|  1.53k|    {
 1627|  1.53k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.53k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.53k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.53k|        return this->get_value();
 1629|  1.53k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9get_valueEv:
  450|  1.53k|    {
  451|  1.53k|        return m_value;
  452|  1.53k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1597|    818|    {
 1598|    818|        return has_value();
 1599|    818|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  484|  2.20k|    {
  485|  2.20k|        return m_has_value;
  486|  2.20k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    818|    {
 1177|    818|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_LPv0EEEOT_v:
 1662|  1.10k|    {
 1663|  1.10k|        return std::move(value());
 1664|  1.10k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_LPv0EEERT_v:
 1626|  1.10k|    {
 1627|  1.10k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.10k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.10k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.10k|        return this->get_value();
 1629|  1.10k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  450|  1.10k|    {
  451|  1.10k|        return m_value;
  452|  1.10k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3333|   101k|    {
 3334|   101k|        return m_sentinel;
 3335|   101k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|  1.71k|    {
 1837|  1.71k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.71k|                                            std::forward<F>(f));
 1839|  1.71k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1322|  1.71k|{
 1323|  1.71k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.71k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.71k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.71k|            return result(*std::forward<Exp>(exp));
 1327|  1.71k|        }
 1328|       |
 1329|  1.71k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.71k|        return result(unexpect, monostate{});
 1331|  1.71k|    }
 1332|  1.71k|    else {
 1333|  1.71k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.71k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.71k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.53k, False: 186]
  |  |  ------------------
  ------------------
 1335|  1.71k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.71k|                   : result(unexpect,
 1337|    186|                            trivial_invoke(std::forward<F>(f),
 1338|    186|                                           std::forward<Exp>(exp).error()));
 1339|  1.71k|    }
 1340|  1.71k|}
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1429|  1.53k|    {
 1430|  1.53k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|  1.53k|    {
  437|  1.53k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1485|    186|    {
 1486|    186|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEdeIS7_LPv0EEEOT_v:
 1662|  1.53k|    {
 1663|  1.53k|        return std::move(value());
 1664|  1.53k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3329|   103k|    {
 3330|   103k|        return m_iterator;
 3331|   103k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1429|    818|    {
 1430|    818|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  436|    818|    {
  437|    818|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1836|    818|    {
 1837|    818|        return detail::transform_error_impl(std::move(*this),
 1838|    818|                                            std::forward<F>(f));
 1839|    818|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1322|    818|{
 1323|    818|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    818|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    818|        if (SCN_LIKELY(exp.has_value())) {
 1326|    818|            return result(*std::forward<Exp>(exp));
 1327|    818|        }
 1328|       |
 1329|    818|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    818|        return result(unexpect, monostate{});
 1331|    818|    }
 1332|    818|    else {
 1333|    818|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    818|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    818|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 818, False: 0]
  |  |  ------------------
  ------------------
 1335|    818|                   ? result(*std::forward<Exp>(exp))
 1336|    818|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    818|    }
 1340|    818|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  484|  1.63k|    {
  485|  1.63k|        return m_has_value;
  486|  1.63k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEdeIS9_LPv0EEEOT_v:
 1662|    818|    {
 1663|    818|        return std::move(value());
 1664|    818|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE5valueIS9_LPv0EEERT_v:
 1626|    818|    {
 1627|    818|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    818|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    818|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    818|        return this->get_value();
 1629|    818|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  450|    818|    {
  451|    818|        return m_value;
  452|    818|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1429|    818|    {
 1430|    818|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  436|    818|    {
  437|    818|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    818|    {
 1177|    818|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEcvbEv:
 1597|    818|    {
 1598|    818|        return has_value();
 1599|    818|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.63k|    {
  485|  1.63k|        return m_has_value;
  486|  1.63k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1662|    818|    {
 1663|    818|        return std::move(value());
 1664|    818|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1626|    818|    {
 1627|    818|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    818|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    818|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    818|        return this->get_value();
 1629|    818|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    818|    {
  451|    818|        return m_value;
  452|    818|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1836|    754|    {
 1837|    754|        return detail::transform_error_impl(std::move(*this),
 1838|    754|                                            std::forward<F>(f));
 1839|    754|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_LPv0ESC_EEDaOT_OT0_:
 1322|    754|{
 1323|    754|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    754|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    754|        if (SCN_LIKELY(exp.has_value())) {
 1326|    754|            return result(*std::forward<Exp>(exp));
 1327|    754|        }
 1328|       |
 1329|    754|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    754|        return result(unexpect, monostate{});
 1331|    754|    }
 1332|    754|    else {
 1333|    754|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    754|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    754|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 754]
  |  |  ------------------
  ------------------
 1335|    754|                   ? result(*std::forward<Exp>(exp))
 1336|    754|                   : result(unexpect,
 1337|    754|                            trivial_invoke(std::forward<F>(f),
 1338|    754|                                           std::forward<Exp>(exp).error()));
 1339|    754|    }
 1340|    754|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1613|    754|    {
 1614|    754|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    754|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    754|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    754|        return std::move(this->get_unexpected().error());
 1616|    754|    }
_ZN3scn2v313scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3647|  1.31k|    {
 3648|  1.31k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_LPv0EEET_SF_:
 3315|  35.2k|    {
 3316|  35.2k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEC2ISK_LPv0ELSN_0EEEONS0_10unexpectedIT_EE:
 1475|     64|    {
 1476|     64|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EEC2IJSL_EvEENS0_10unexpect_tEDpOT_:
  625|     64|    {
  626|     64|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     64|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESL_EEEvDpOT_:
  688|     64|    {
  689|     64|        scn::detail::construct_at(unexpected_ptr(),
  690|     64|                                  std::forward<Args>(args)...);
  691|     64|        m_has_value = false;
  692|     64|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|    192|    {
  718|    192|        return reinterpret_cast<unexpected<E>*>(
  719|    192|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|    192|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|    192|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     64|    {
 1177|     64|    }
_ZNK3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|     64|    {
 1598|     64|        return has_value();
 1599|     64|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|    192|    {
  675|    192|        return m_has_value;
  676|    192|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1603|     64|    {
 1604|     64|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     64|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     64|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     64|        return this->get_unexpected().error();
 1606|     64|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     64|    {
  658|     64|        return *unexpected_ptr();
  659|     64|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|     64|    {
  631|     64|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 64]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     64|        else {
  635|     64|            destroy_unexpected();
  636|     64|        }
  637|     64|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     64|    {
  700|     64|        scn::detail::destroy_at(unexpected_ptr());
  701|     64|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEcvbEv:
 1597|  5.79k|    {
 1598|  5.79k|        return has_value();
 1599|  5.79k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  11.0k|    {
  485|  11.0k|        return m_has_value;
  486|  11.0k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5errorEv:
 1603|  4.20k|    {
 1604|  4.20k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  4.20k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.20k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  4.20k|        return this->get_unexpected().error();
 1606|  4.20k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  4.20k|    {
  468|  4.20k|        return m_unexpected;
  469|  4.20k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEdeIS7_LPv0EEEOT_v:
 1662|  1.03k|    {
 1663|  1.03k|        return std::move(value());
 1664|  1.03k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5valueIS7_LPv0EEERT_v:
 1626|  1.03k|    {
 1627|  1.03k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.03k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.03k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.03k|        return this->get_value();
 1629|  1.03k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.03k|    {
  451|  1.03k|        return m_value;
  452|  1.03k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  1.33k|    {
 1476|  1.33k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  1.47k|    {
  447|  1.47k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  23.0k|    {
 1177|  23.0k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|  14.4k|    {
 1476|  14.4k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  14.4k|    {
  447|  14.4k|    }
_ZNK3scn2v38expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1597|  24.2k|    {
 1598|  24.2k|        return has_value();
 1599|  24.2k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  39.8k|    {
  485|  39.8k|        return m_has_value;
  486|  39.8k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1603|  7.30k|    {
 1604|  7.30k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  7.30k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.30k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  7.30k|        return this->get_unexpected().error();
 1606|  7.30k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  7.30k|    {
  468|  7.30k|        return m_unexpected;
  469|  7.30k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1429|  4.77k|    {
 1430|  4.77k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|  4.77k|    {
  437|  4.77k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  4.77k|    {
 1177|  4.77k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1626|  7.15k|    {
 1627|  7.15k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  7.15k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.15k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  7.15k|        return this->get_value();
 1629|  7.15k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  7.15k|    {
  451|  7.15k|        return m_value;
  452|  7.15k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  3.58k|    {
 1598|  3.58k|        return has_value();
 1599|  3.58k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  9.54k|    {
  485|  9.54k|        return m_has_value;
  486|  9.54k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.58k|    {
 1177|  3.58k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1662|  4.77k|    {
 1663|  4.77k|        return std::move(value());
 1664|  4.77k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1626|  4.77k|    {
 1627|  4.77k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.77k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.77k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.77k|        return this->get_value();
 1629|  4.77k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|  4.77k|    {
  451|  4.77k|        return m_value;
  452|  4.77k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  7.29k|    {
 1837|  7.29k|        return detail::transform_error_impl(std::move(*this),
 1838|  7.29k|                                            std::forward<F>(f));
 1839|  7.29k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  7.29k|{
 1323|  7.29k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  7.29k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  7.29k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  7.29k|            return result(*std::forward<Exp>(exp));
 1327|  7.29k|        }
 1328|       |
 1329|  7.29k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  7.29k|        return result(unexpect, monostate{});
 1331|  7.29k|    }
 1332|  7.29k|    else {
 1333|  7.29k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  7.29k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  7.29k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 7.15k, False: 142]
  |  |  ------------------
  ------------------
 1335|  7.29k|                   ? result(*std::forward<Exp>(exp))
 1336|  7.29k|                   : result(unexpect,
 1337|    142|                            trivial_invoke(std::forward<F>(f),
 1338|    142|                                           std::forward<Exp>(exp).error()));
 1339|  7.29k|    }
 1340|  7.29k|}
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1429|  7.15k|    {
 1430|  7.15k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  7.15k|    {
  437|  7.15k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1485|    142|    {
 1486|    142|    }
_ZNO3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1662|  7.15k|    {
 1663|  7.15k|        return std::move(value());
 1664|  7.15k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1429|  3.58k|    {
 1430|  3.58k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  436|  3.58k|    {
  437|  3.58k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  3.58k|    {
 1837|  3.58k|        return detail::transform_error_impl(std::move(*this),
 1838|  3.58k|                                            std::forward<F>(f));
 1839|  3.58k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
 1322|  3.58k|{
 1323|  3.58k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  3.58k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  3.58k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  3.58k|            return result(*std::forward<Exp>(exp));
 1327|  3.58k|        }
 1328|       |
 1329|  3.58k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  3.58k|        return result(unexpect, monostate{});
 1331|  3.58k|    }
 1332|  3.58k|    else {
 1333|  3.58k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  3.58k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  3.58k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.58k, False: 0]
  |  |  ------------------
  ------------------
 1335|  3.58k|                   ? result(*std::forward<Exp>(exp))
 1336|  3.58k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  3.58k|    }
 1340|  3.58k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  484|  7.16k|    {
  485|  7.16k|        return m_has_value;
  486|  7.16k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1662|  3.58k|    {
 1663|  3.58k|        return std::move(value());
 1664|  3.58k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1626|  3.58k|    {
 1627|  3.58k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.58k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.58k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.58k|        return this->get_value();
 1629|  3.58k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  450|  3.58k|    {
  451|  3.58k|        return m_value;
  452|  3.58k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|  3.58k|    {
 1430|  3.58k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  436|  3.58k|    {
  437|  3.58k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.58k|    {
 1177|  3.58k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1597|  3.58k|    {
 1598|  3.58k|        return has_value();
 1599|  3.58k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  484|  7.16k|    {
  485|  7.16k|        return m_has_value;
  486|  7.16k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|  3.58k|    {
 1663|  3.58k|        return std::move(value());
 1664|  3.58k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|  3.58k|    {
 1627|  3.58k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.58k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.58k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.58k|        return this->get_value();
 1629|  3.58k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  450|  3.58k|    {
  451|  3.58k|        return m_value;
  452|  3.58k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1475|     72|    {
 1476|     72|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  625|     72|    {
  626|     72|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     72|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  688|     72|    {
  689|     72|        scn::detail::construct_at(unexpected_ptr(),
  690|     72|                                  std::forward<Args>(args)...);
  691|     72|        m_has_value = false;
  692|     72|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|    216|    {
  718|    216|        return reinterpret_cast<unexpected<E>*>(
  719|    216|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|    216|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|    216|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     72|    {
 1177|     72|    }
_ZNK3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|     72|    {
 1598|     72|        return has_value();
 1599|     72|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|    216|    {
  675|    216|        return m_has_value;
  676|    216|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1603|     72|    {
 1604|     72|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     72|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     72|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     72|        return this->get_unexpected().error();
 1606|     72|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     72|    {
  658|     72|        return *unexpected_ptr();
  659|     72|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|     72|    {
  631|     72|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 72]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     72|        else {
  635|     72|            destroy_unexpected();
  636|     72|        }
  637|     72|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     72|    {
  700|     72|        scn::detail::destroy_at(unexpected_ptr());
  701|     72|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  21.4k|    {
 2855|  21.4k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  21.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  21.4k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  21.4k|    {
 2836|  21.4k|        return t.data();
 2837|  21.4k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3220|  67.0k|    {
 3221|  67.0k|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 7.28k, False: 59.7k]
  ------------------
 3222|  67.0k|                   ? nullptr
 3223|  67.0k|                   : std::addressof(*ranges::begin(derived()));
 3224|  67.0k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  67.0k|    {
 3005|  67.0k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  67.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  67.0k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  67.0k|    {
 2978|  67.0k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  67.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  67.0k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5emptyEv:
 3338|  67.0k|    {
 3339|  67.0k|        return m_iterator == m_sentinel;
 3340|  67.0k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3179|   126k|    {
 3180|   126k|        return static_cast<D&>(*this);
 3181|   126k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  59.8k|    {
 2724|  59.8k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  59.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  59.8k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  59.8k|    {
 2705|  59.8k|        return decay_copy(t.begin());
 2706|  59.8k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 1836|    282|    {
 1837|    282|        return detail::transform_error_impl(std::move(*this),
 1838|    282|                                            std::forward<F>(f));
 1839|    282|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ELPv0ESG_EEDaOT_OT0_:
 1322|    282|{
 1323|    282|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    282|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    282|        if (SCN_LIKELY(exp.has_value())) {
 1326|    282|            return result(*std::forward<Exp>(exp));
 1327|    282|        }
 1328|       |
 1329|    282|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    282|        return result(unexpect, monostate{});
 1331|    282|    }
 1332|    282|    else {
 1333|    282|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    282|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    282|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 282, False: 0]
  |  |  ------------------
  ------------------
 1335|    282|                   ? result(*std::forward<Exp>(exp))
 1336|    282|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    282|    }
 1340|    282|}
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1429|    282|    {
 1430|    282|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  436|    282|    {
  437|    282|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    282|    {
 1177|    282|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|    282|    {
 1598|    282|        return has_value();
 1599|    282|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|    564|    {
  485|    564|        return m_has_value;
  486|    564|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_LPv0EEEOT_v:
 1662|    282|    {
 1663|    282|        return std::move(value());
 1664|    282|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1626|    282|    {
 1627|    282|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    282|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    282|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    282|        return this->get_value();
 1629|    282|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    282|    {
  451|    282|        return m_value;
  452|    282|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1822|    564|    {
 1823|    564|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|    564|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_LPv0ESD_EEDaOT_OT0_:
 1322|    564|{
 1323|    564|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    564|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    564|        if (SCN_LIKELY(exp.has_value())) {
 1326|    564|            return result(*std::forward<Exp>(exp));
 1327|    564|        }
 1328|       |
 1329|    564|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    564|        return result(unexpect, monostate{});
 1331|    564|    }
 1332|    564|    else {
 1333|    564|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    564|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    564|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 564]
  |  |  ------------------
  ------------------
 1335|    564|                   ? result(*std::forward<Exp>(exp))
 1336|    564|                   : result(unexpect,
 1337|    564|                            trivial_invoke(std::forward<F>(f),
 1338|    564|                                           std::forward<Exp>(exp).error()));
 1339|    564|    }
 1340|    564|}
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3667|     12|    auto&& SCN_TRY_TMP = (x);                          \
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|    270|    {
 2724|    270|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    270|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|    270|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|    270|    {
 2705|    270|        return decay_copy(t.begin());
 2706|    270|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3667|    250|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|  1.18k|    {
 1837|  1.18k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.18k|                                            std::forward<F>(f));
 1839|  1.18k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1322|  1.18k|{
 1323|  1.18k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.18k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.18k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.18k|            return result(*std::forward<Exp>(exp));
 1327|  1.18k|        }
 1328|       |
 1329|  1.18k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.18k|        return result(unexpect, monostate{});
 1331|  1.18k|    }
 1332|  1.18k|    else {
 1333|  1.18k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.18k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.18k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.18k, False: 0]
  |  |  ------------------
  ------------------
 1335|  1.18k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.18k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  1.18k|    }
 1340|  1.18k|}
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  1.18k|    {
 1430|  1.18k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|  1.18k|    {
  437|  1.18k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.18k|    {
 1177|  1.18k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|  1.18k|    {
 1598|  1.18k|        return has_value();
 1599|  1.18k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.37k|    {
  485|  2.37k|        return m_has_value;
  486|  2.37k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  1.18k|    {
 1663|  1.18k|        return std::move(value());
 1664|  1.18k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  1.18k|    {
 1627|  1.18k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.18k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.18k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.18k|        return this->get_value();
 1629|  1.18k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.18k|    {
  451|  1.18k|        return m_value;
  452|  1.18k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1822|  1.20k|    {
 1823|  1.20k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|  1.20k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1322|  1.20k|{
 1323|  1.20k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.20k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.20k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.20k|            return result(*std::forward<Exp>(exp));
 1327|  1.20k|        }
 1328|       |
 1329|  1.20k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.20k|        return result(unexpect, monostate{});
 1331|  1.20k|    }
 1332|  1.20k|    else {
 1333|  1.20k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.20k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.20k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 1.20k]
  |  |  ------------------
  ------------------
 1335|  1.20k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.20k|                   : result(unexpect,
 1337|  1.20k|                            trivial_invoke(std::forward<F>(f),
 1338|  1.20k|                                           std::forward<Exp>(exp).error()));
 1339|  1.20k|    }
 1340|  1.20k|}
_ZN3scn2v313scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3647|  1.20k|    {
 3648|  1.20k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1652|  6.96k|    {
 1653|  6.96k|        return value();
 1654|  6.96k|    }
_ZN3scn2v36detail22parse_presentation_setIwRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
 6696|  1.10k|{
 6697|  1.10k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.10k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.10k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  1.10k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  1.10k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.10k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  1.10k|    auto start = begin;
 6701|  1.10k|    ++begin;
 6702|       |
 6703|  1.10k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.10k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|      0|        return {};
 6708|      0|    }
 6709|  1.10k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 264, False: 840]
  ------------------
 6710|    264|        handler.on_charset_inverted();
 6711|    264|        ++begin;
 6712|    264|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 264]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|      0|            return {};
 6717|      0|        }
 6718|    264|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 0, False: 264]
  ------------------
 6719|      0|            handler.on_charset_single(char32_t{']'});
 6720|      0|            ++begin;
 6721|      0|        }
 6722|    264|    }
 6723|    840|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 0, False: 840]
  ------------------
 6724|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|      0|    }
 6726|       |
 6727|  16.0k|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 16.0k, False: 0]
  ------------------
 6728|  16.0k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  16.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.0k]
  |  |  ------------------
  ------------------
 6729|      0|            break;
 6730|      0|        }
 6731|       |
 6732|  16.0k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 1.10k, False: 14.9k]
  ------------------
 6733|  1.10k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  1.10k|        }
 6735|       |
 6736|  14.9k|        parse_presentation_set_literal(begin, end, handler);
 6737|  14.9k|    }
 6738|       |
 6739|      0|    SCN_UNLIKELY_ATTR
 6740|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6741|      0|    return {};
 6742|  1.10k|}
_ZN3scn2v36detail30parse_presentation_set_literalIwRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
 6660|  14.9k|{
 6661|  14.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  14.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  14.9k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  14.9k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  14.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 14.9k]
  |  |  ------------------
  ------------------
 6665|      0|        return;
 6666|      0|    }
 6667|       |
 6668|  14.9k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 14.9k, False: 0]
  |  Branch (6668:25): [True: 444, False: 14.4k]
  |  Branch (6668:49): [True: 444, False: 0]
  ------------------
 6669|  14.9k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 372, False: 72]
  ------------------
 6670|    372|        ++begin;
 6671|       |
 6672|    372|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|    372|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|    372|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 372]
  |  |  ------------------
  ------------------
 6674|      0|            return;
 6675|      0|        }
 6676|       |
 6677|    372|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|    372|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 372]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|      0|            return;
 6682|      0|        }
 6683|       |
 6684|    372|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|    372|        return;
 6686|    372|    }
 6687|       |
 6688|  14.5k|    handler.on_charset_single(cp_first);
 6689|  14.5k|}
_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
 6636|  15.2k|{
 6637|  15.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  15.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  15.2k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  15.2k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  30.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 15.2k]
  |  |  |  Branch (859:45): [True: 0, False: 15.2k]
  |  |  |  Branch (859:45): [True: 0, False: 15.2k]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|  15.2k|    const auto cp =
 6646|  15.2k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  15.2k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  15.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 15.2k]
  |  |  ------------------
  ------------------
 6648|      0|        handler.on_error("Invalid encoding in format string");
 6649|      0|        return invalid_code_point;
 6650|      0|    }
 6651|       |
 6652|  15.2k|    begin += len;
 6653|  15.2k|    return cp;
 6654|  15.2k|}
_ZNK3scn2v36detail12format_specs14charset_stringIwEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6251|  35.8k|    {
 6252|  35.8k|        return {reinterpret_cast<const CharT*>(charset_string_data),
 6253|  35.8k|                charset_string_size};
 6254|  35.8k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1429|  1.39k|    {
 1430|  1.39k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  436|  1.39k|    {
  437|  1.39k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
 3653|  2.22k|{
 3654|  2.22k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  2.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  2.22k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  10.7k|    {
 2855|  10.7k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  10.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  10.7k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  10.7k|    {
 2836|  10.7k|        return t.data();
 2837|  10.7k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5465|   336k|    {
 5466|   336k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   336k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 336k]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|   336k|        return static_cast<std::size_t>(m_desc &
 5471|   336k|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|   336k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5490|   539k|    {
 5491|   539k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|   539k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5433|   203k|    {
 5434|   203k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   203k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 203k]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|   203k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|   203k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 68, False: 203k]
  |  |  ------------------
  ------------------
 5442|     68|            return {};
 5443|     68|        }
 5444|       |
 5445|   203k|        const auto t = type(id);
 5446|   203k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|   203k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.66k, False: 201k]
  |  |  ------------------
  ------------------
 5447|  1.66k|            return {};
 5448|  1.66k|        }
 5449|       |
 5450|   201k|        basic_scan_arg<Context> arg;
 5451|   201k|        arg.m_type = t;
 5452|   201k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 201k, False: 0]
  ------------------
 5453|   201k|            arg.m_value.ref_value = m_builtin_values[id];
 5454|   201k|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|   201k|        return arg;
 5459|   203k|    }
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5240|   203k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4897|   332k|    arg_value() = default;
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5499|   203k|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|   203k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|   203k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|   203k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|   203k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5494|   201k|    {
 5495|   201k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|   201k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5246|   401k|    {
 5247|   401k|        return m_type != detail::arg_type::none_type;
 5248|   401k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  6.71k|{
 8417|  6.71k|#define SCN_VISIT(Type)                                         \
 8418|  6.71k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  6.71k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  6.71k|    }                                                           \
 8421|  6.71k|    else {                                                      \
 8422|  6.71k|        return vis(monostate_val);                              \
 8423|  6.71k|    }
 8424|       |
 8425|  6.71k|    monostate monostate_val{};
 8426|       |
 8427|  6.71k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 6.71k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 6.71k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|    746|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 746, False: 5.96k]
  ------------------
 8433|    746|            SCN_VISIT(int);
  ------------------
  |  | 8418|    746|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    746|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    746|    }                                                           \
  |  | 8421|    746|    else {                                                      \
  |  | 8422|    746|        return vis(monostate_val);                              \
  |  | 8423|    746|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 6.71k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 6.71k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 6.71k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 6.71k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|    746|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 746, False: 5.96k]
  ------------------
 8443|    746|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|    746|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    746|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    746|    }                                                           \
  |  | 8421|    746|    else {                                                      \
  |  | 8422|    746|        return vis(monostate_val);                              \
  |  | 8423|    746|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 6.71k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 6.71k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|    746|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 746, False: 5.96k]
  ------------------
 8449|    746|            SCN_VISIT(void*);
  ------------------
  |  | 8418|    746|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    746|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    746|    }                                                           \
  |  | 8421|    746|    else {                                                      \
  |  | 8422|    746|        return vis(monostate_val);                              \
  |  | 8423|    746|    }
  ------------------
 8450|    746|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 746, False: 5.96k]
  ------------------
 8451|    746|            SCN_VISIT(bool);
  ------------------
  |  | 8418|    746|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    746|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    746|    }                                                           \
  |  | 8421|    746|    else {                                                      \
  |  | 8422|    746|        return vis(monostate_val);                              \
  |  | 8423|    746|    }
  ------------------
 8452|    746|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 746, False: 5.96k]
  ------------------
 8453|    746|            SCN_VISIT(char);
  ------------------
  |  | 8418|    746|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    746|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    746|    }                                                           \
  |  | 8421|    746|    else {                                                      \
  |  | 8422|    746|        return vis(monostate_val);                              \
  |  | 8423|    746|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 6.71k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 6.71k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 6.71k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|    746|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 746, False: 5.96k]
  ------------------
 8461|    746|            SCN_VISIT(double);
  ------------------
  |  | 8418|    746|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    746|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    746|    }                                                           \
  |  | 8421|    746|    else {                                                      \
  |  | 8422|    746|        return vis(monostate_val);                              \
  |  | 8423|    746|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 6.71k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|    746|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 746, False: 5.96k]
  ------------------
 8465|    746|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|    746|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    746|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    746|    }                                                           \
  |  | 8421|    746|    else {                                                      \
  |  | 8422|    746|        return vis(monostate_val);                              \
  |  | 8423|    746|    }
  ------------------
 8466|    746|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 746, False: 5.96k]
  ------------------
 8467|    746|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|    746|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    746|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    746|    }                                                           \
  |  | 8421|    746|    else {                                                      \
  |  | 8422|    746|        return vis(monostate_val);                              \
  |  | 8423|    746|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 6.71k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|    746|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 746, False: 5.96k]
  ------------------
 8471|    746|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|    746|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    746|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    746|    }                                                           \
  |  | 8421|    746|    else {                                                      \
  |  | 8422|    746|        return vis(monostate_val);                              \
  |  | 8423|    746|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 6.71k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 6.71k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 6.71k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 6.71k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 6.71k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  6.71k|            SCN_CLANG_POP
 8495|  6.71k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  2.20k|    {
 1837|  2.20k|        return detail::transform_error_impl(std::move(*this),
 1838|  2.20k|                                            std::forward<F>(f));
 1839|  2.20k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  2.20k|{
 1323|  2.20k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  2.20k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  2.20k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  2.20k|            return result(*std::forward<Exp>(exp));
 1327|  2.20k|        }
 1328|       |
 1329|  2.20k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  2.20k|        return result(unexpect, monostate{});
 1331|  2.20k|    }
 1332|  2.20k|    else {
 1333|  2.20k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.20k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.20k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.10k, False: 102]
  |  |  ------------------
  ------------------
 1335|  2.20k|                   ? result(*std::forward<Exp>(exp))
 1336|  2.20k|                   : result(unexpect,
 1337|    102|                            trivial_invoke(std::forward<F>(f),
 1338|    102|                                           std::forward<Exp>(exp).error()));
 1339|  2.20k|    }
 1340|  2.20k|}
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1485|    102|    {
 1486|    102|    }
_ZNO3scn2v38expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1662|  2.10k|    {
 1663|  2.10k|        return std::move(value());
 1664|  2.10k|    }
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5544|   336k|    {
 5545|   336k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8055|   336k|    {
 8056|   336k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   336k|{
 7044|   336k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   336k|    handler.check_args_exhausted();
 7046|   336k|    return handler.get_error();
 7047|   336k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   336k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   336k|    auto begin = format.data();
 7013|   336k|    auto it = begin;
 7014|   336k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   793k|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 780k, False: 12.7k]
  ------------------
 7017|   780k|        const auto ch = *it++;
 7018|   780k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 341k, False: 438k]
  ------------------
 7019|   341k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   341k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   341k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 319k, False: 22.1k]
  ------------------
 7023|   319k|                return;
 7024|   319k|            }
 7025|   341k|        }
 7026|   438k|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 4.90k, False: 433k]
  ------------------
 7027|  4.90k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|  9.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.53k, False: 1.36k]
  |  |  |  Branch (859:45): [True: 730, False: 4.17k]
  |  |  |  Branch (859:45): [True: 2.80k, False: 1.36k]
  |  |  ------------------
  ------------------
 7028|  3.53k|                handler.on_error("Unmatched '}' in format string");
 7029|  3.53k|                return;
 7030|  3.53k|            }
 7031|       |
 7032|  1.36k|            handler.on_literal_text(begin, it);
 7033|  1.36k|            begin = ++it;
 7034|  1.36k|        }
 7035|   780k|    }
 7036|       |
 7037|  12.7k|    handler.on_literal_text(begin, end);
 7038|  12.7k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6941|   341k|{
 6942|   341k|    struct id_adapter {
 6943|   341k|        constexpr void operator()()
 6944|   341k|        {
 6945|   341k|            arg_id = handler.on_arg_id();
 6946|   341k|        }
 6947|   341k|        constexpr void operator()(std::size_t id)
 6948|   341k|        {
 6949|   341k|            arg_id = handler.on_arg_id(id);
 6950|   341k|        }
 6951|       |
 6952|   341k|        constexpr void on_error(const char* msg)
 6953|   341k|        {
 6954|   341k|            SCN_UNLIKELY_ATTR
 6955|   341k|            handler.on_error(msg);
 6956|   341k|        }
 6957|       |
 6958|   341k|        Handler& handler;
 6959|   341k|        std::size_t arg_id;
 6960|   341k|    };
 6961|       |
 6962|   341k|    ++begin;
 6963|   341k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   341k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 116, False: 341k]
  |  |  ------------------
  ------------------
 6964|    116|        handler.on_error("Unexpected end of replacement field");
 6965|    116|        return begin;
 6966|    116|    }
 6967|       |
 6968|   341k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 6.72k, False: 335k]
  ------------------
 6969|  6.72k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|  6.72k|    }
 6971|   335k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 7.74k, False: 327k]
  ------------------
 6972|  7.74k|        handler.on_literal_text(begin, begin + 1);
 6973|  7.74k|    }
 6974|   327k|    else {
 6975|   327k|        auto adapter = id_adapter{handler, 0};
 6976|   327k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   327k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   327k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 110, False: 327k]
  |  |  ------------------
  ------------------
 6979|    110|            handler.on_error("Missing '}' in format string");
 6980|    110|            return begin;
 6981|    110|        }
 6982|       |
 6983|   327k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 140, False: 327k]
  ------------------
 6984|    140|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|    140|        }
 6986|   327k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 196k, False: 130k]
  ------------------
 6987|   196k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   196k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 92, False: 196k]
  |  |  ------------------
  ------------------
 6988|     92|                handler.on_error("Unexpected end of replacement field");
 6989|     92|                return begin;
 6990|     92|            }
 6991|   196k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   196k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   393k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.65k, False: 191k]
  |  |  |  Branch (859:45): [True: 0, False: 196k]
  |  |  |  Branch (859:45): [True: 4.65k, False: 191k]
  |  |  ------------------
  ------------------
 6993|  4.65k|                handler.on_error("Unknown format specifier");
 6994|  4.65k|                return begin;
 6995|  4.65k|            }
 6996|   196k|        }
 6997|   130k|        else {
 6998|   130k|            SCN_UNLIKELY_ATTR
 6999|   130k|            handler.on_error("Missing '}' in format string");
 7000|   130k|            return begin;
 7001|   130k|        }
 7002|   327k|    }
 7003|   206k|    return begin + 1;
 7004|   341k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8038|   203k|    {
 8039|   203k|        return m_args.get(id);
 8040|   203k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE4argsEv:
 8043|  6.86k|    {
 8044|  6.86k|        return m_args;
 8045|  6.86k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8048|   198k|    {
 8049|   198k|        return m_locale;
 8050|   198k|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5565|   190k|    {
 5566|   190k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   190k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 190k]
  |  |  ------------------
  ------------------
 5567|     42|            on_error(
 5568|     42|                "Cannot switch from manual to automatic argument indexing");
 5569|     42|            return 0;
 5570|     42|        }
 5571|       |
 5572|   190k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|   190k|        do_check_arg_id(id);
 5574|   190k|        return id;
 5575|   190k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE8on_errorEPKc:
 5589|    122|    {
 5590|    122|        return detail::handle_error(
 5591|    122|            scan_error{scan_error::invalid_format_string, msg});
 5592|    122|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6053|   203k|{
 6054|   203k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|   203k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|   203k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   327k|{
 6443|   327k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   327k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   327k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   327k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 327k, False: 0]
  |  Branch (6444:26): [True: 143k, False: 183k]
  ------------------
 6445|   143k|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|   143k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|   143k|    }
 6447|       |
 6448|   183k|    handler();
 6449|   183k|    return begin;
 6450|   327k|}
impl.cpp:_ZN3scn2v36detail15do_parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6412|   143k|{
 6413|   143k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   143k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   143k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6414|       |
 6415|   143k|    CharT c = *begin;
 6416|   143k|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (6416:9): [True: 129k, False: 13.8k]
  |  Branch (6416:27): [True: 536, False: 13.3k]
  ------------------
 6417|   130k|        handler.on_error("Invalid argument ID");
 6418|   130k|        return begin;
 6419|   130k|    }
 6420|       |
 6421|  13.3k|    int idx = 0;
 6422|  13.3k|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (6422:9): [True: 372, False: 12.9k]
  ------------------
 6423|    372|        idx = parse_simple_int(begin, end);
 6424|    372|    }
 6425|  12.9k|    else {
 6426|  12.9k|        ++begin;
 6427|  12.9k|    }
 6428|       |
 6429|  13.3k|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (6429:9): [True: 110, False: 13.2k]
  |  Branch (6429:26): [True: 13.0k, False: 140]
  |  Branch (6429:50): [True: 120, False: 12.9k]
  ------------------
 6430|    230|        handler.on_error("Invalid argument ID");
 6431|    230|        return begin;
 6432|    230|    }
 6433|  13.0k|    handler(idx);
 6434|       |
 6435|  13.0k|    return begin;
 6436|  13.3k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 6953|   130k|        {
 6954|   130k|            SCN_UNLIKELY_ATTR
 6955|   130k|            handler.on_error(msg);
 6956|   130k|        }
_ZN3scn2v36detail16parse_simple_intIcEEiRPKT_S5_:
 6391|  30.2k|{
 6392|  30.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  30.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  30.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6393|  30.2k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  30.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  30.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6394|       |
 6395|  30.2k|    unsigned long long value = 0;
 6396|   114k|    do {
 6397|   114k|        value *= 10;
 6398|   114k|        value += static_cast<unsigned long long>(*begin - '0');
 6399|   114k|        if (value >
  ------------------
  |  Branch (6399:13): [True: 116, False: 114k]
  ------------------
 6400|   114k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6401|    116|            return -1;
 6402|    116|        }
 6403|   114k|        ++begin;
 6404|   114k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6404:14): [True: 114k, False: 312]
  |  Branch (6404:30): [True: 101k, False: 12.4k]
  |  Branch (6404:47): [True: 84.3k, False: 17.4k]
  ------------------
 6405|  30.1k|    return static_cast<int>(value);
 6406|  30.2k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 6948|  13.0k|        {
 6949|  13.0k|            arg_id = handler.on_arg_id(id);
 6950|  13.0k|        }
_ZN3scn2v324basic_scan_parse_contextIcE12check_arg_idEm:
 5578|  13.0k|    {
 5579|  13.0k|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  859|  13.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 80, False: 13.0k]
  |  |  ------------------
  ------------------
 5580|     80|            on_error(
 5581|     80|                "Cannot switch from manual to automatic argument indexing");
 5582|     80|            return;
 5583|     80|        }
 5584|  13.0k|        m_next_arg_id = -1;
 5585|  13.0k|        do_check_arg_id(id);
 5586|  13.0k|    }
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   183k|        {
 6945|   183k|            arg_id = handler.on_arg_id();
 6946|   183k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5251|   393k|    {
 5252|   393k|        return m_type;
 5253|   393k|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5560|   191k|    {
 5561|   191k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|   191k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5549|   388k|    {
 5550|   388k|        return m_format.data();
 5551|   388k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7121|   196k|    {
 7122|   196k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   196k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   196k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   196k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6857|   196k|{
 6858|   196k|    auto do_presentation = [&]() -> const CharT* {
 6859|   196k|        if (*begin == CharT{'['}) {
 6860|   196k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   196k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   196k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   196k|                return begin;
 6866|   196k|            }
 6867|   196k|            handler.on_character_set_string(set);
 6868|   196k|            return begin;
 6869|   196k|        }
 6870|   196k|        if (*begin == CharT{'/'}) {
 6871|   196k|            return parse_presentation_regex(begin, end, handler);
 6872|   196k|        }
 6873|   196k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   196k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   196k|            handler.on_error("Invalid type specifier in format string");
 6876|   196k|            return begin;
 6877|   196k|        }
 6878|   196k|        handler.on_type(type);
 6879|   196k|        return begin;
 6880|   196k|    };
 6881|       |
 6882|   196k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 195k, False: 1.10k]
  |  Branch (6882:28): [True: 2.45k, False: 193k]
  ------------------
 6883|   196k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 896, False: 1.55k]
  |  Branch (6883:36): [True: 844, False: 52]
  ------------------
 6884|    844|        return do_presentation();
 6885|    844|    }
 6886|       |
 6887|   195k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   195k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 195k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|   195k|    begin = parse_align(begin, end, handler);
 6893|   195k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   195k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 124, False: 195k]
  |  |  ------------------
  ------------------
 6894|    124|        handler.on_error("Unexpected end of format string");
 6895|    124|        return begin;
 6896|    124|    }
 6897|       |
 6898|   195k|    begin = parse_width(begin, end, handler);
 6899|   195k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   195k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 120, False: 195k]
  |  |  ------------------
  ------------------
 6900|    120|        handler.on_error("Unexpected end of format string");
 6901|    120|        return begin;
 6902|    120|    }
 6903|       |
 6904|   195k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 21.3k, False: 174k]
  ------------------
 6905|  21.3k|        ++begin;
 6906|  21.3k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  21.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40, False: 21.2k]
  |  |  ------------------
  ------------------
 6907|     40|            handler.on_error("Unexpected end of format string");
 6908|     40|            return begin;
 6909|     40|        }
 6910|  21.2k|        begin = parse_precision(begin, end, handler);
 6911|  21.2k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  21.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 114, False: 21.1k]
  |  |  ------------------
  ------------------
 6912|    114|            handler.on_error("Unexpected end of format string");
 6913|    114|            return begin;
 6914|    114|        }
 6915|  21.2k|    }
 6916|       |
 6917|   195k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 1.32k, False: 194k]
  ------------------
 6918|  1.32k|        handler.on_localized();
 6919|  1.32k|        ++begin;
 6920|  1.32k|    }
 6921|   195k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   195k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52, False: 195k]
  |  |  ------------------
  ------------------
 6922|     52|        handler.on_error("Unexpected end of format string");
 6923|     52|        return begin;
 6924|     52|    }
 6925|       |
 6926|   195k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 195k, False: 0]
  |  Branch (6926:25): [True: 188k, False: 7.16k]
  ------------------
 6927|   188k|        do_presentation();
 6928|   188k|    }
 6929|   195k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   195k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.36k, False: 192k]
  |  |  ------------------
  ------------------
 6930|  2.36k|        handler.on_error("Unexpected end of format string");
 6931|  2.36k|        return begin;
 6932|  2.36k|    }
 6933|       |
 6934|   192k|    return begin;
 6935|   195k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6506|  2.45k|{
 6507|  2.45k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 842, False: 1.61k]
  |  Branch (6507:33): [True: 790, False: 52]
  ------------------
 6508|  2.45k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 286, False: 1.37k]
  |  Branch (6508:33): [True: 106, False: 180]
  ------------------
 6509|  2.45k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|   189k|    auto do_presentation = [&]() -> const CharT* {
 6859|   189k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 30.7k, False: 158k]
  ------------------
 6860|  30.7k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  30.7k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  30.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 818, False: 29.8k]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|    818|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|    818|                return begin;
 6866|    818|            }
 6867|  29.8k|            handler.on_character_set_string(set);
 6868|  29.8k|            return begin;
 6869|  30.7k|        }
 6870|   158k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 152k, False: 6.23k]
  ------------------
 6871|   152k|            return parse_presentation_regex(begin, end, handler);
 6872|   152k|        }
 6873|  6.23k|        presentation_type type = parse_presentation_type(*begin++);
 6874|  6.23k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  6.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.22k, False: 5.00k]
  |  |  ------------------
  ------------------
 6875|  1.22k|            handler.on_error("Invalid type specifier in format string");
 6876|  1.22k|            return begin;
 6877|  1.22k|        }
 6878|  5.00k|        handler.on_type(type);
 6879|  5.00k|        return begin;
 6880|  6.23k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6696|  30.7k|{
 6697|  30.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  30.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  30.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  30.7k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  30.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  30.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  30.7k|    auto start = begin;
 6701|  30.7k|    ++begin;
 6702|       |
 6703|  30.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  30.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 30.6k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|     42|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|     42|        return {};
 6708|     42|    }
 6709|  30.6k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 4.08k, False: 26.5k]
  ------------------
 6710|  4.08k|        handler.on_charset_inverted();
 6711|  4.08k|        ++begin;
 6712|  4.08k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  4.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 4.04k]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|     34|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|     34|            return {};
 6717|     34|        }
 6718|  4.04k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 52, False: 3.99k]
  ------------------
 6719|     52|            handler.on_charset_single(char32_t{']'});
 6720|     52|            ++begin;
 6721|     52|        }
 6722|  4.04k|    }
 6723|  26.5k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 34, False: 26.5k]
  ------------------
 6724|     34|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|     34|    }
 6726|       |
 6727|  7.66M|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 7.66M, False: 484]
  ------------------
 6728|  7.66M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  7.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 224, False: 7.66M]
  |  |  ------------------
  ------------------
 6729|    224|            break;
 6730|    224|        }
 6731|       |
 6732|  7.66M|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 29.8k, False: 7.63M]
  ------------------
 6733|  29.8k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  29.8k|        }
 6735|       |
 6736|  7.63M|        parse_presentation_set_literal(begin, end, handler);
 6737|  7.63M|    }
 6738|       |
 6739|    708|    SCN_UNLIKELY_ATTR
 6740|    708|    handler.on_error("Invalid [character set] specifier in format string");
 6741|    708|    return {};
 6742|  30.5k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEvRPKT_SE_OT0_:
 6660|  7.63M|{
 6661|  7.63M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  7.63M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.63M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  7.63M|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  7.63M|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  7.63M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 112, False: 7.63M]
  |  |  ------------------
  ------------------
 6665|    112|        return;
 6666|    112|    }
 6667|       |
 6668|  7.63M|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 7.63M, False: 188]
  |  Branch (6668:25): [True: 40.5k, False: 7.59M]
  |  Branch (6668:49): [True: 40.5k, False: 34]
  ------------------
 6669|  7.63M|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 39.9k, False: 610]
  ------------------
 6670|  39.9k|        ++begin;
 6671|       |
 6672|  39.9k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|  39.9k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  39.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70, False: 39.8k]
  |  |  ------------------
  ------------------
 6674|     70|            return;
 6675|     70|        }
 6676|       |
 6677|  39.8k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  39.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 39.8k]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|     34|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|     34|            return;
 6682|     34|        }
 6683|       |
 6684|  39.8k|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|  39.8k|        return;
 6686|  39.8k|    }
 6687|       |
 6688|  7.59M|    handler.on_charset_single(cp_first);
 6689|  7.59M|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEDiRPKT_SE_OT0_:
 6636|  7.67M|{
 6637|  7.67M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  7.67M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.67M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  7.67M|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  7.67M|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  15.3M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 96, False: 7.67M]
  |  |  |  Branch (859:45): [True: 70, False: 7.67M]
  |  |  |  Branch (859:45): [True: 26, False: 7.67M]
  |  |  ------------------
  ------------------
 6641|     96|        handler.on_error("Invalid encoding in format string");
 6642|     96|        return invalid_code_point;
 6643|     96|    }
 6644|       |
 6645|  7.67M|    const auto cp =
 6646|  7.67M|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  7.67M|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  7.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 86, False: 7.67M]
  |  |  ------------------
  ------------------
 6648|     86|        handler.on_error("Invalid encoding in format string");
 6649|     86|        return invalid_code_point;
 6650|     86|    }
 6651|       |
 6652|  7.67M|    begin += len;
 6653|  7.67M|    return cp;
 6654|  7.67M|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6345|  29.8k|    {
 6346|  29.8k|        m_specs.charset_string_data = fmt.data();
 6347|  29.8k|        m_specs.charset_string_size = fmt.size();
 6348|  29.8k|        on_type(presentation_type::string_set);
 6349|  29.8k|    }
impl.cpp:_ZN3scn2v36detail24parse_presentation_regexIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_RSE_SE_OT0_:
 6748|   152k|{
 6749|   152k|#if !SCN_DISABLE_REGEX
 6750|   152k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   152k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   152k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6751|   152k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  924|   152k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   152k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6752|       |
 6753|   152k|    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|   304k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (6753:19): [Folded - Ignored]
  |  Branch (6753:19): [Folded - Ignored]
  ------------------
 6754|   152k|                  std::is_same_v<CharT, wchar_t>) {
  ------------------
  |  Branch (6754:19): [Folded - Ignored]
  ------------------
 6755|   152k|        handler.on_error("Regex backend doesn't support wide strings as input");
 6756|   152k|        return begin;
 6757|   152k|    }
 6758|       |
 6759|   152k|    auto start = begin;
 6760|   152k|    ++begin;
 6761|       |
 6762|   152k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   152k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 152k]
  |  |  ------------------
  ------------------
 6763|     34|        handler.on_error("Unexpected end of regex in format string");
 6764|     34|        return begin;
 6765|     34|    }
 6766|       |
 6767|   152k|    handler.on_type(presentation_type::regex);
 6768|  57.8M|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6768:12): [True: 57.8M, False: 560]
  ------------------
 6769|  57.8M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6769:13): [True: 323k, False: 57.5M]
  ------------------
 6770|   323k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (6770:17): [True: 151k, False: 172k]
  ------------------
 6771|   151k|                break;
 6772|   151k|            }
 6773|   172k|            else {
 6774|   172k|                handler.on_type(presentation_type::regex_escaped);
 6775|   172k|            }
 6776|   323k|        }
 6777|  57.8M|    }
 6778|   152k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   152k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 560, False: 151k]
  |  |  ------------------
  ------------------
 6779|    560|        handler.on_error("Unexpected end of regex in format string");
 6780|    560|        return begin;
 6781|    560|    }
 6782|       |
 6783|   151k|    auto regex_end = begin;
 6784|   151k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 6785|   151k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  859|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 151k]
  |  |  ------------------
  ------------------
 6786|     34|        handler.on_error("Invalid (empty) regex in format string");
 6787|     34|        return begin;
 6788|     34|    }
 6789|   151k|    handler.on_regex_pattern(regex_pattern);
 6790|   151k|    ++begin;
 6791|       |
 6792|   151k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 151k]
  |  |  ------------------
  ------------------
 6793|     34|        handler.on_error("Unexpected end of regex in format string");
 6794|     34|        return begin;
 6795|     34|    }
 6796|       |
 6797|   151k|    regex_flags flags{regex_flags::none};
 6798|   151k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 6799|   151k|        {{'m', regex_flags::multiline},
 6800|   151k|         {'s', regex_flags::singleline},
 6801|   151k|         {'i', regex_flags::nocase},
 6802|   151k|         {'n', regex_flags::nocapture}}};
 6803|   189k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6803:12): [True: 189k, False: 58]
  ------------------
 6804|   189k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6804:13): [True: 150k, False: 38.5k]
  ------------------
 6805|   150k|            break;
 6806|   150k|        }
 6807|  38.5k|        bool found_flag = false;
 6808|   104k|        for (auto flag : flag_map) {
  ------------------
  |  Branch (6808:24): [True: 104k, False: 356]
  ------------------
 6809|   104k|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (6809:17): [True: 66.4k, False: 38.1k]
  ------------------
 6810|  66.4k|                continue;
 6811|  66.4k|            }
 6812|  38.1k|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (6812:17): [True: 34, False: 38.1k]
  ------------------
 6813|     34|                handler.on_error("Flag set multiple times in regex");
 6814|     34|                return begin;
 6815|     34|            }
 6816|  38.1k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 6817|  38.1k|            if (*begin == CharT{'s'}) {
  ------------------
  |  Branch (6817:17): [True: 48, False: 38.0k]
  ------------------
 6818|       |                // clang-format off
 6819|     48|                handler.on_error("/s flag for regex isn't supported by regex backend");
 6820|       |                // clang-format on
 6821|     48|            }
 6822|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 6823|       |            if (*begin == CharT{'m'}) {
 6824|       |                // clang-format off
 6825|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 6826|       |                // clang-format on
 6827|       |            }
 6828|       |#endif
 6829|  38.1k|#endif
 6830|  38.1k|            flags |= flag.second;
 6831|  38.1k|            found_flag = true;
 6832|  38.1k|            break;
 6833|  38.1k|        }
 6834|  38.4k|        if (!found_flag) {
  ------------------
  |  Branch (6834:13): [True: 356, False: 38.1k]
  ------------------
 6835|    356|            handler.on_error("Invalid flag in regex");
 6836|    356|            return begin;
 6837|    356|        }
 6838|  38.4k|    }
 6839|   151k|    handler.on_regex_flags(flags);
 6840|       |
 6841|   151k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 58, False: 150k]
  |  |  ------------------
  ------------------
 6842|     58|        handler.on_error("Unexpected end of regex in format string");
 6843|     58|        return begin;
 6844|     58|    }
 6845|       |
 6846|   150k|    return begin;
 6847|       |#else
 6848|       |    handler.on_error("Regular expression support is disabled");
 6849|       |    return {};
 6850|       |#endif
 6851|   151k|}
_ZN3scn2v36detail12specs_setter16on_regex_patternIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6353|   151k|    {
 6354|   151k|        m_specs.charset_string_data = pattern.data();
 6355|   151k|        m_specs.charset_string_size = pattern.size();
 6356|   151k|    }
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6454|  6.23k|{
 6455|  6.23k|    switch (type) {
 6456|    124|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 124, False: 6.10k]
  ------------------
 6457|    176|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 52, False: 6.17k]
  ------------------
 6458|    176|            return presentation_type::int_binary;
 6459|    128|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 128, False: 6.10k]
  ------------------
 6460|    128|            return presentation_type::int_decimal;
 6461|    160|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 160, False: 6.07k]
  ------------------
 6462|    160|            return presentation_type::int_generic;
 6463|     70|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 70, False: 6.16k]
  ------------------
 6464|     70|            return presentation_type::int_unsigned_decimal;
 6465|    610|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 610, False: 5.62k]
  ------------------
 6466|    610|            return presentation_type::int_octal;
 6467|     96|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 96, False: 6.13k]
  ------------------
 6468|    148|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 52, False: 6.17k]
  ------------------
 6469|    148|            return presentation_type::int_hex;
 6470|     34|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 34, False: 6.19k]
  ------------------
 6471|     68|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 34, False: 6.19k]
  ------------------
 6472|     68|            return presentation_type::int_arbitrary_base;
 6473|    106|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 106, False: 6.12k]
  ------------------
 6474|    722|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 616, False: 5.61k]
  ------------------
 6475|    722|            return presentation_type::float_hex;
 6476|     88|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 88, False: 6.14k]
  ------------------
 6477|    158|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 70, False: 6.16k]
  ------------------
 6478|    158|            return presentation_type::float_scientific;
 6479|    250|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 250, False: 5.98k]
  ------------------
 6480|    356|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 106, False: 6.12k]
  ------------------
 6481|    356|            return presentation_type::float_fixed;
 6482|    132|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 132, False: 6.09k]
  ------------------
 6483|    190|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 58, False: 6.17k]
  ------------------
 6484|    190|            return presentation_type::float_general;
 6485|  1.71k|        case 's':
  ------------------
  |  Branch (6485:9): [True: 1.71k, False: 4.51k]
  ------------------
 6486|  1.71k|            return presentation_type::string;
 6487|    394|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 394, False: 5.83k]
  ------------------
 6488|    394|            return presentation_type::character;
 6489|     34|        case '?':
  ------------------
  |  Branch (6489:9): [True: 34, False: 6.19k]
  ------------------
 6490|     34|            return presentation_type::escaped_character;
 6491|     78|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 78, False: 6.15k]
  ------------------
 6492|     78|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 6.23k]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 6.23k]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|  1.22k|        default:
  ------------------
  |  Branch (6499:9): [True: 1.22k, False: 5.00k]
  ------------------
 6500|  1.22k|            return presentation_type::none;
 6501|  6.23k|    }
 6502|  6.23k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6531|   195k|{
 6532|   195k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   195k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   195k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|   195k|    auto check_align = [](wchar_t ch) {
 6535|   195k|        switch (ch) {
 6536|   195k|            case L'<':
 6537|   195k|                return align_type::left;
 6538|   195k|            case L'>':
 6539|   195k|                return align_type::right;
 6540|   195k|            case L'^':
 6541|   195k|                return align_type::center;
 6542|   195k|            default:
 6543|   195k|                return align_type::none;
 6544|   195k|        }
 6545|   195k|    };
 6546|       |
 6547|   195k|    auto potential_fill_len = code_point_length(begin, end);
 6548|   195k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   391k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 195k]
  |  |  |  Branch (859:45): [True: 38, False: 195k]
  |  |  |  Branch (859:45): [True: 4, False: 195k]
  |  |  ------------------
  ------------------
 6549|   195k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|     42|        handler.on_error("Invalid encoding in fill character");
 6551|     42|        return begin;
 6552|     42|    }
 6553|       |
 6554|   195k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|   195k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|   195k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|   195k|    const auto begin_before_fill = begin;
 6559|   195k|    begin += potential_fill_len;
 6560|       |
 6561|   195k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 1.08k, False: 194k]
  ------------------
 6562|  1.08k|        return begin_before_fill;
 6563|  1.08k|    }
 6564|       |
 6565|   194k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|   194k|    const auto begin_after_fill = begin;
 6567|   194k|    ++begin;
 6568|       |
 6569|   194k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 193k, False: 1.00k]
  ------------------
 6570|   193k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   193k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 62, False: 193k]
  |  |  ------------------
  ------------------
 6571|     62|            handler.on_error("Invalid fill character '{' in format string");
 6572|     62|            return begin;
 6573|     62|        }
 6574|   193k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 21.6k, False: 171k]
  ------------------
 6575|  21.6k|            return begin_before_fill;
 6576|  21.6k|        }
 6577|   193k|    }
 6578|       |
 6579|   172k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 152k, False: 20.8k]
  ------------------
 6580|   152k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 8.17k, False: 143k]
  ------------------
 6581|  8.17k|            handler.on_align(potential_align_on_fill);
 6582|  8.17k|            return begin_after_fill;
 6583|  8.17k|        }
 6584|   143k|        return begin_before_fill;
 6585|   152k|    }
 6586|       |
 6587|  20.8k|    handler.on_fill(potential_fill);
 6588|  20.8k|    handler.on_align(potential_align_after_fill);
 6589|  20.8k|    return begin;
 6590|   172k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6513|   195k|{
 6514|   195k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   195k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   195k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|   195k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6515:19): [Folded - Ignored]
  ------------------
 6516|   195k|        return 1;
 6517|   195k|    }
 6518|   195k|    else {
 6519|   195k|        const auto lengths =
 6520|   195k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|   195k|            "\3\4";
 6522|   195k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|   195k|        return len;
 6524|   195k|    }
 6525|   195k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|   390k|    auto check_align = [](wchar_t ch) {
 6535|   390k|        switch (ch) {
 6536|  1.91k|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 1.91k, False: 388k]
  ------------------
 6537|  1.91k|                return align_type::left;
 6538|  3.47k|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 3.47k, False: 386k]
  ------------------
 6539|  3.47k|                return align_type::right;
 6540|  25.3k|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 25.3k, False: 365k]
  ------------------
 6541|  25.3k|                return align_type::center;
 6542|   359k|            default:
  ------------------
  |  Branch (6542:13): [True: 359k, False: 30.7k]
  ------------------
 6543|   359k|                return align_type::none;
 6544|   390k|        }
 6545|   390k|    };
_ZN3scn2v36detail12specs_setter7on_fillIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6267|  20.8k|    {
 6268|  20.8k|        m_specs.fill = fill;
 6269|  20.8k|    }
_ZN3scn2v36detail9fill_typeaSIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6148|  20.8k|    {
 6149|  20.8k|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  924|  20.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  20.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6150|  20.8k|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  924|  20.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  20.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6151|  20.8k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (6151:23): [Folded - Ignored]
  ------------------
 6152|  43.4k|            for (size_t i = 0; i < s.size(); ++i) {
  ------------------
  |  Branch (6152:32): [True: 22.5k, False: 20.8k]
  ------------------
 6153|  22.5k|                SCN_GCC_PUSH
 6154|  22.5k|                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6155|  22.5k|                m_data[i] = s[i];
 6156|  22.5k|                SCN_GCC_POP
 6157|  22.5k|            }
 6158|  20.8k|            m_size = static_cast<unsigned char>(s.size());
 6159|  20.8k|        }
 6160|  20.8k|        else if constexpr (sizeof(CharT) == 2) {
 6161|  20.8k|            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6162|  20.8k|            m_data[1] =
 6163|  20.8k|                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6164|  20.8k|            if (s.size() == 1) {
 6165|  20.8k|                return;
 6166|  20.8k|            }
 6167|  20.8k|            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6168|  20.8k|            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6169|  20.8k|        }
 6170|  20.8k|        else {
 6171|  20.8k|            const auto front = static_cast<unsigned>(s.front());
 6172|  20.8k|            m_data[0] = static_cast<char>(front);
 6173|  20.8k|            m_data[1] = static_cast<char>(front >> 8);
 6174|  20.8k|            m_data[2] = static_cast<char>(front >> 16);
 6175|  20.8k|            m_data[3] = static_cast<char>(front >> 24);
 6176|  20.8k|        }
 6177|  20.8k|    }
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6596|   195k|{
 6597|   195k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   195k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   195k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|   195k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 33.7k, False: 161k]
  |  Branch (6599:33): [True: 8.74k, False: 25.0k]
  ------------------
 6600|  8.74k|        int width = parse_simple_int(begin, end);
 6601|  8.74k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  8.74k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 8.70k, False: 34]
  |  |  ------------------
  ------------------
 6602|  8.70k|            handler.on_width(width);
 6603|  8.70k|        }
 6604|     34|        else {
 6605|     34|            handler.on_error("Invalid field width");
 6606|     34|            return begin;
 6607|     34|        }
 6608|  8.74k|    }
 6609|   195k|    return begin;
 6610|   195k|}
impl.cpp:_ZN3scn2v36detail15parse_precisionIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6616|  21.2k|{
 6617|  21.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  21.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6618|       |
 6619|  21.2k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6619:9): [True: 21.2k, False: 56]
  |  Branch (6619:33): [True: 21.1k, False: 64]
  ------------------
 6620|  21.1k|        int prec = parse_simple_int(begin, end);
 6621|  21.1k|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  |  858|  21.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 21.1k, False: 48]
  |  |  ------------------
  ------------------
 6622|  21.1k|            handler.on_precision(prec);
 6623|  21.1k|        }
 6624|     48|        else {
 6625|     48|            handler.on_error("Invalid field precision");
 6626|     48|            return begin;
 6627|     48|        }
 6628|  21.1k|    }
 6629|  21.2k|    return begin;
 6630|  21.2k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7126|  1.32k|    {
 7127|  1.32k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|  1.32k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 1.18k, False: 142]
  ------------------
 7129|  1.32k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 1.04k, False: 142]
  ------------------
 7130|  1.32k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 902, False: 142]
  ------------------
 7131|  1.32k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 760, False: 142]
  ------------------
 7132|    760|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|    760|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|    760|        }
 7137|       |
 7138|    568|        Handler::on_localized();
 7139|    568|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   191k|{
 8417|   191k|#define SCN_VISIT(Type)                                         \
 8418|   191k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   191k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   191k|    }                                                           \
 8421|   191k|    else {                                                      \
 8422|   191k|        return vis(monostate_val);                              \
 8423|   191k|    }
 8424|       |
 8425|   191k|    monostate monostate_val{};
 8426|       |
 8427|   191k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 191k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 191k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|  21.3k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 21.3k, False: 170k]
  ------------------
 8433|  21.3k|            SCN_VISIT(int);
  ------------------
  |  | 8418|  21.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  21.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  21.3k|    }                                                           \
  |  | 8421|  21.3k|    else {                                                      \
  |  | 8422|  21.3k|        return vis(monostate_val);                              \
  |  | 8423|  21.3k|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 191k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 191k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 191k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 191k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|  21.3k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 21.3k, False: 170k]
  ------------------
 8443|  21.3k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|  21.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  21.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  21.3k|    }                                                           \
  |  | 8421|  21.3k|    else {                                                      \
  |  | 8422|  21.3k|        return vis(monostate_val);                              \
  |  | 8423|  21.3k|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 191k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 191k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|  21.2k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 21.2k, False: 170k]
  ------------------
 8449|  21.2k|            SCN_VISIT(void*);
  ------------------
  |  | 8418|  21.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  21.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  21.2k|    }                                                           \
  |  | 8421|  21.2k|    else {                                                      \
  |  | 8422|  21.2k|        return vis(monostate_val);                              \
  |  | 8423|  21.2k|    }
  ------------------
 8450|  21.3k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 21.3k, False: 170k]
  ------------------
 8451|  21.3k|            SCN_VISIT(bool);
  ------------------
  |  | 8418|  21.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  21.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  21.3k|    }                                                           \
  |  | 8421|  21.3k|    else {                                                      \
  |  | 8422|  21.3k|        return vis(monostate_val);                              \
  |  | 8423|  21.3k|    }
  ------------------
 8452|  21.2k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 21.2k, False: 170k]
  ------------------
 8453|  21.2k|            SCN_VISIT(char);
  ------------------
  |  | 8418|  21.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  21.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  21.2k|    }                                                           \
  |  | 8421|  21.2k|    else {                                                      \
  |  | 8422|  21.2k|        return vis(monostate_val);                              \
  |  | 8423|  21.2k|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 191k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 191k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 191k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|  21.3k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 21.3k, False: 170k]
  ------------------
 8461|  21.3k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  21.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  21.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  21.3k|    }                                                           \
  |  | 8421|  21.3k|    else {                                                      \
  |  | 8422|  21.3k|        return vis(monostate_val);                              \
  |  | 8423|  21.3k|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 191k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|  21.2k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 21.2k, False: 170k]
  ------------------
 8465|  21.2k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|  21.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  21.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  21.2k|    }                                                           \
  |  | 8421|  21.2k|    else {                                                      \
  |  | 8422|  21.2k|        return vis(monostate_val);                              \
  |  | 8423|  21.2k|    }
  ------------------
 8466|  21.2k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 21.2k, False: 170k]
  ------------------
 8467|  21.2k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|  21.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  21.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  21.2k|    }                                                           \
  |  | 8421|  21.2k|    else {                                                      \
  |  | 8422|  21.2k|        return vis(monostate_val);                              \
  |  | 8423|  21.2k|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 191k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|  21.2k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 21.2k, False: 170k]
  ------------------
 8471|  21.2k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|  21.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  21.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  21.2k|    }                                                           \
  |  | 8421|  21.2k|    else {                                                      \
  |  | 8422|  21.2k|        return vis(monostate_val);                              \
  |  | 8423|  21.2k|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 191k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 191k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 191k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 191k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 191k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   191k|            SCN_CLANG_POP
 8495|   191k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE5beginEv:
 3329|  20.4k|    {
 3330|  20.4k|        return m_iterator;
 3331|  20.4k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISH_vEEOT_:
 1429|  4.15k|    {
 1430|  4.15k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  436|  4.15k|    {
  437|  4.15k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  4.37k|    {
 1177|  4.37k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE3endEv:
 3333|  10.8k|    {
 3334|  10.8k|        return m_sentinel;
 3335|  10.8k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|    220|    {
 1476|    220|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  446|    220|    {
  447|    220|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEEC2ISG_LPv0EEET_SJ_:
 3315|  9.71k|    {
 3316|  9.71k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEcvbEv:
 1597|    264|    {
 1598|    264|        return has_value();
 1599|    264|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9has_valueEv:
  484|  8.65k|    {
  485|  8.65k|        return m_has_value;
  486|  8.65k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_LPv0EEERT_v:
 1652|    178|    {
 1653|    178|        return value();
 1654|    178|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5valueISH_LPv0EEERT_v:
 1626|  4.15k|    {
 1627|  4.15k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.15k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.15k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.15k|        return this->get_value();
 1629|  4.15k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9get_valueEv:
  450|  4.15k|    {
  451|  4.15k|        return m_value;
  452|  4.15k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESI_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSO_:
 1836|  4.10k|    {
 1837|  4.10k|        return detail::transform_error_impl(std::move(*this),
 1838|  4.10k|                                            std::forward<F>(f));
 1839|  4.10k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS6_IPKcS8_EENS4_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEE8sentinelILb1EEEEENS4_9eof_errorEEERFNS0_10scan_errorESK_ELPv0ESM_EEDaOT_OT0_:
 1322|  4.10k|{
 1323|  4.10k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  4.10k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  4.10k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  4.10k|            return result(*std::forward<Exp>(exp));
 1327|  4.10k|        }
 1328|       |
 1329|  4.10k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  4.10k|        return result(unexpect, monostate{});
 1331|  4.10k|    }
 1332|  4.10k|    else {
 1333|  4.10k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  4.10k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  4.10k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.97k, False: 134]
  |  |  ------------------
  ------------------
 1335|  4.10k|                   ? result(*std::forward<Exp>(exp))
 1336|  4.10k|                   : result(unexpect,
 1337|    134|                            trivial_invoke(std::forward<F>(f),
 1338|    134|                                           std::forward<Exp>(exp).error()));
 1339|  4.10k|    }
 1340|  4.10k|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_LPv0EEEOT_v:
 1662|  3.97k|    {
 1663|  3.97k|        return std::move(value());
 1664|  3.97k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|  3.97k|    {
 1430|  3.97k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  436|  3.97k|    {
  437|  3.97k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  4.10k|    {
 1177|  4.10k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5errorEv:
 1613|    134|    {
 1614|    134|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    134|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    134|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    134|        return std::move(this->get_unexpected().error());
 1616|    134|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE14get_unexpectedEv:
  467|    134|    {
  468|    134|        return m_unexpected;
  469|    134|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
 1485|    134|    {
 1486|    134|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  446|    134|    {
  447|    134|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEcvbEv:
 1597|  4.10k|    {
 1598|  4.10k|        return has_value();
 1599|  4.10k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  8.21k|    {
  485|  8.21k|        return m_has_value;
  486|  8.21k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5errorEv:
 1603|    134|    {
 1604|    134|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    134|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    134|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    134|        return this->get_unexpected().error();
 1606|    134|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|    134|    {
  468|    134|        return m_unexpected;
  469|    134|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEdeISH_LPv0EEEOT_v:
 1662|  3.97k|    {
 1663|  3.97k|        return std::move(value());
 1664|  3.97k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1626|  3.97k|    {
 1627|  3.97k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.97k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.97k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.97k|        return this->get_value();
 1629|  3.97k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  3.97k|    {
  451|  3.97k|        return m_value;
  452|  3.97k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5465|   672k|    {
 5466|   672k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   672k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 672k]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|   672k|        return static_cast<std::size_t>(m_desc &
 5471|   672k|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|   672k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5490|   801k|    {
 5491|   801k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|   801k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5433|   129k|    {
 5434|   129k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   129k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 129k]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|   129k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|   129k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 92, False: 129k]
  |  |  ------------------
  ------------------
 5442|     92|            return {};
 5443|     92|        }
 5444|       |
 5445|   129k|        const auto t = type(id);
 5446|   129k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|   129k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.64k, False: 127k]
  |  |  ------------------
  ------------------
 5447|  1.64k|            return {};
 5448|  1.64k|        }
 5449|       |
 5450|   127k|        basic_scan_arg<Context> arg;
 5451|   127k|        arg.m_type = t;
 5452|   127k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 127k, False: 0]
  ------------------
 5453|   127k|            arg.m_value.ref_value = m_builtin_values[id];
 5454|   127k|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|   127k|        return arg;
 5459|   129k|    }
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5240|   129k|    constexpr basic_scan_arg() = default;
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5499|   129k|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|   129k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|   129k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|   129k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|   129k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5494|   127k|    {
 5495|   127k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|   127k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5246|   253k|    {
 5247|   253k|        return m_type != detail::arg_type::none_type;
 5248|   253k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  6.33k|{
 8417|  6.33k|#define SCN_VISIT(Type)                                         \
 8418|  6.33k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  6.33k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  6.33k|    }                                                           \
 8421|  6.33k|    else {                                                      \
 8422|  6.33k|        return vis(monostate_val);                              \
 8423|  6.33k|    }
 8424|       |
 8425|  6.33k|    monostate monostate_val{};
 8426|       |
 8427|  6.33k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 6.33k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 6.33k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|    704|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 704, False: 5.63k]
  ------------------
 8433|    704|            SCN_VISIT(int);
  ------------------
  |  | 8418|    704|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    704|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    704|    }                                                           \
  |  | 8421|    704|    else {                                                      \
  |  | 8422|    704|        return vis(monostate_val);                              \
  |  | 8423|    704|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 6.33k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 6.33k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 6.33k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 6.33k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|    704|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 704, False: 5.63k]
  ------------------
 8443|    704|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|    704|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    704|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    704|    }                                                           \
  |  | 8421|    704|    else {                                                      \
  |  | 8422|    704|        return vis(monostate_val);                              \
  |  | 8423|    704|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 6.33k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 6.33k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|    704|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 704, False: 5.63k]
  ------------------
 8449|    704|            SCN_VISIT(void*);
  ------------------
  |  | 8418|    704|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    704|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    704|    }                                                           \
  |  | 8421|    704|    else {                                                      \
  |  | 8422|    704|        return vis(monostate_val);                              \
  |  | 8423|    704|    }
  ------------------
 8450|    704|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 704, False: 5.63k]
  ------------------
 8451|    704|            SCN_VISIT(bool);
  ------------------
  |  | 8418|    704|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    704|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    704|    }                                                           \
  |  | 8421|    704|    else {                                                      \
  |  | 8422|    704|        return vis(monostate_val);                              \
  |  | 8423|    704|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 6.33k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|    704|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 704, False: 5.63k]
  ------------------
 8455|    704|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|    704|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    704|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    704|    }                                                           \
  |  | 8421|    704|    else {                                                      \
  |  | 8422|    704|        return vis(monostate_val);                              \
  |  | 8423|    704|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 6.33k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 6.33k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|    704|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 704, False: 5.63k]
  ------------------
 8461|    704|            SCN_VISIT(double);
  ------------------
  |  | 8418|    704|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    704|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    704|    }                                                           \
  |  | 8421|    704|    else {                                                      \
  |  | 8422|    704|        return vis(monostate_val);                              \
  |  | 8423|    704|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 6.33k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 6.33k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|    704|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 704, False: 5.63k]
  ------------------
 8467|    704|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|    704|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    704|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    704|    }                                                           \
  |  | 8421|    704|    else {                                                      \
  |  | 8422|    704|        return vis(monostate_val);                              \
  |  | 8423|    704|    }
  ------------------
 8468|    704|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 704, False: 5.63k]
  ------------------
 8469|    704|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|    704|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    704|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    704|    }                                                           \
  |  | 8421|    704|    else {                                                      \
  |  | 8422|    704|        return vis(monostate_val);                              \
  |  | 8423|    704|    }
  ------------------
 8470|    704|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 704, False: 5.63k]
  ------------------
 8471|    704|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|    704|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    704|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    704|    }                                                           \
  |  | 8421|    704|    else {                                                      \
  |  | 8422|    704|        return vis(monostate_val);                              \
  |  | 8423|    704|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 6.33k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 6.33k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 6.33k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 6.33k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 6.33k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  6.33k|            SCN_CLANG_POP
 8495|  6.33k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5544|   672k|    {
 5545|   672k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8055|   672k|    {
 8056|   672k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   672k|{
 7044|   672k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   672k|    handler.check_args_exhausted();
 7046|   672k|    return handler.get_error();
 7047|   672k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   672k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   672k|    auto begin = format.data();
 7013|   672k|    auto it = begin;
 7014|   672k|    const auto end = format.data() + format.size();
 7015|       |
 7016|  1.39G|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 1.39G, False: 206k]
  ------------------
 7017|  1.39G|        const auto ch = *it++;
 7018|  1.39G|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 466k, False: 1.39G]
  ------------------
 7019|   466k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   466k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   466k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 461k, False: 5.61k]
  ------------------
 7023|   461k|                return;
 7024|   461k|            }
 7025|   466k|        }
 7026|  1.39G|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 53.2k, False: 1.39G]
  ------------------
 7027|  53.2k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.67k, False: 48.5k]
  |  |  |  Branch (859:45): [True: 1.74k, False: 51.5k]
  |  |  |  Branch (859:45): [True: 2.92k, False: 48.5k]
  |  |  ------------------
  ------------------
 7028|  4.67k|                handler.on_error("Unmatched '}' in format string");
 7029|  4.67k|                return;
 7030|  4.67k|            }
 7031|       |
 7032|  48.5k|            handler.on_literal_text(begin, it);
 7033|  48.5k|            begin = ++it;
 7034|  48.5k|        }
 7035|  1.39G|    }
 7036|       |
 7037|   206k|    handler.on_literal_text(begin, end);
 7038|   206k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6941|   466k|{
 6942|   466k|    struct id_adapter {
 6943|   466k|        constexpr void operator()()
 6944|   466k|        {
 6945|   466k|            arg_id = handler.on_arg_id();
 6946|   466k|        }
 6947|   466k|        constexpr void operator()(std::size_t id)
 6948|   466k|        {
 6949|   466k|            arg_id = handler.on_arg_id(id);
 6950|   466k|        }
 6951|       |
 6952|   466k|        constexpr void on_error(const char* msg)
 6953|   466k|        {
 6954|   466k|            SCN_UNLIKELY_ATTR
 6955|   466k|            handler.on_error(msg);
 6956|   466k|        }
 6957|       |
 6958|   466k|        Handler& handler;
 6959|   466k|        std::size_t arg_id;
 6960|   466k|    };
 6961|       |
 6962|   466k|    ++begin;
 6963|   466k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   466k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 124, False: 466k]
  |  |  ------------------
  ------------------
 6964|    124|        handler.on_error("Unexpected end of replacement field");
 6965|    124|        return begin;
 6966|    124|    }
 6967|       |
 6968|   466k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 6.27k, False: 460k]
  ------------------
 6969|  6.27k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|  6.27k|    }
 6971|   460k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 112, False: 460k]
  ------------------
 6972|    112|        handler.on_literal_text(begin, begin + 1);
 6973|    112|    }
 6974|   460k|    else {
 6975|   460k|        auto adapter = id_adapter{handler, 0};
 6976|   460k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   460k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   460k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 120, False: 460k]
  |  |  ------------------
  ------------------
 6979|    120|            handler.on_error("Missing '}' in format string");
 6980|    120|            return begin;
 6981|    120|        }
 6982|       |
 6983|   460k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 220, False: 459k]
  ------------------
 6984|    220|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|    220|        }
 6986|   459k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 123k, False: 336k]
  ------------------
 6987|   123k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   123k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 64, False: 122k]
  |  |  ------------------
  ------------------
 6988|     64|                handler.on_error("Unexpected end of replacement field");
 6989|     64|                return begin;
 6990|     64|            }
 6991|   122k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   122k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   245k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.92k, False: 119k]
  |  |  |  Branch (859:45): [True: 0, False: 122k]
  |  |  |  Branch (859:45): [True: 3.92k, False: 119k]
  |  |  ------------------
  ------------------
 6993|  3.92k|                handler.on_error("Unknown format specifier");
 6994|  3.92k|                return begin;
 6995|  3.92k|            }
 6996|   122k|        }
 6997|   336k|        else {
 6998|   336k|            SCN_UNLIKELY_ATTR
 6999|   336k|            handler.on_error("Missing '}' in format string");
 7000|   336k|            return begin;
 7001|   336k|        }
 7002|   460k|    }
 7003|   125k|    return begin + 1;
 7004|   466k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8038|   129k|    {
 8039|   129k|        return m_args.get(id);
 8040|   129k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE4argsEv:
 8043|  6.49k|    {
 8044|  6.49k|        return m_args;
 8045|  6.49k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8048|   124k|    {
 8049|   124k|        return m_locale;
 8050|   124k|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5565|   129k|    {
 5566|   129k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   129k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 48, False: 129k]
  |  |  ------------------
  ------------------
 5567|     48|            on_error(
 5568|     48|                "Cannot switch from manual to automatic argument indexing");
 5569|     48|            return 0;
 5570|     48|        }
 5571|       |
 5572|   129k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|   129k|        do_check_arg_id(id);
 5574|   129k|        return id;
 5575|   129k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE8on_errorEPKc:
 5589|    184|    {
 5590|    184|        return detail::handle_error(
 5591|    184|            scan_error{scan_error::invalid_format_string, msg});
 5592|    184|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6053|   129k|{
 6054|   129k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|   129k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|   129k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   460k|{
 6443|   460k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   460k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   460k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   460k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 460k, False: 0]
  |  Branch (6444:26): [True: 337k, False: 122k]
  ------------------
 6445|   337k|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|   337k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|   337k|    }
 6447|       |
 6448|   122k|    handler();
 6449|   122k|    return begin;
 6450|   460k|}
impl.cpp:_ZN3scn2v36detail15do_parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6412|   337k|{
 6413|   337k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   337k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   337k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6414|       |
 6415|   337k|    CharT c = *begin;
 6416|   337k|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (6416:9): [True: 264, False: 337k]
  |  Branch (6416:27): [True: 336k, False: 716]
  ------------------
 6417|   336k|        handler.on_error("Invalid argument ID");
 6418|   336k|        return begin;
 6419|   336k|    }
 6420|       |
 6421|    716|    int idx = 0;
 6422|    716|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (6422:9): [True: 336, False: 380]
  ------------------
 6423|    336|        idx = parse_simple_int(begin, end);
 6424|    336|    }
 6425|    380|    else {
 6426|    380|        ++begin;
 6427|    380|    }
 6428|       |
 6429|    716|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (6429:9): [True: 120, False: 596]
  |  Branch (6429:26): [True: 376, False: 220]
  |  Branch (6429:50): [True: 226, False: 150]
  ------------------
 6430|    346|        handler.on_error("Invalid argument ID");
 6431|    346|        return begin;
 6432|    346|    }
 6433|    370|    handler(idx);
 6434|       |
 6435|    370|    return begin;
 6436|    716|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 6953|   337k|        {
 6954|   337k|            SCN_UNLIKELY_ATTR
 6955|   337k|            handler.on_error(msg);
 6956|   337k|        }
_ZN3scn2v36detail16parse_simple_intIwEEiRPKT_S5_:
 6391|  97.2k|{
 6392|  97.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  97.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  97.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6393|  97.2k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  97.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  97.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6394|       |
 6395|  97.2k|    unsigned long long value = 0;
 6396|   101k|    do {
 6397|   101k|        value *= 10;
 6398|   101k|        value += static_cast<unsigned long long>(*begin - '0');
 6399|   101k|        if (value >
  ------------------
  |  Branch (6399:13): [True: 98, False: 101k]
  ------------------
 6400|   101k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6401|     98|            return -1;
 6402|     98|        }
 6403|   101k|        ++begin;
 6404|   101k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6404:14): [True: 100k, False: 414]
  |  Branch (6404:30): [True: 11.2k, False: 89.3k]
  |  Branch (6404:47): [True: 3.88k, False: 7.36k]
  ------------------
 6405|  97.1k|    return static_cast<int>(value);
 6406|  97.2k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 6948|    370|        {
 6949|    370|            arg_id = handler.on_arg_id(id);
 6950|    370|        }
_ZN3scn2v324basic_scan_parse_contextIwE12check_arg_idEm:
 5578|    370|    {
 5579|    370|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  859|    370|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 136, False: 234]
  |  |  ------------------
  ------------------
 5580|    136|            on_error(
 5581|    136|                "Cannot switch from manual to automatic argument indexing");
 5582|    136|            return;
 5583|    136|        }
 5584|    234|        m_next_arg_id = -1;
 5585|    234|        do_check_arg_id(id);
 5586|    234|    }
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   122k|        {
 6945|   122k|            arg_id = handler.on_arg_id();
 6946|   122k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5251|   245k|    {
 5252|   245k|        return m_type;
 5253|   245k|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5560|   118k|    {
 5561|   118k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|   118k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5549|   241k|    {
 5550|   241k|        return m_format.data();
 5551|   241k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7121|   122k|    {
 7122|   122k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   122k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   122k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   122k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6857|   122k|{
 6858|   122k|    auto do_presentation = [&]() -> const CharT* {
 6859|   122k|        if (*begin == CharT{'['}) {
 6860|   122k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   122k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   122k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   122k|                return begin;
 6866|   122k|            }
 6867|   122k|            handler.on_character_set_string(set);
 6868|   122k|            return begin;
 6869|   122k|        }
 6870|   122k|        if (*begin == CharT{'/'}) {
 6871|   122k|            return parse_presentation_regex(begin, end, handler);
 6872|   122k|        }
 6873|   122k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   122k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   122k|            handler.on_error("Invalid type specifier in format string");
 6876|   122k|            return begin;
 6877|   122k|        }
 6878|   122k|        handler.on_type(type);
 6879|   122k|        return begin;
 6880|   122k|    };
 6881|       |
 6882|   122k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 121k, False: 1.08k]
  |  Branch (6882:28): [True: 3.84k, False: 118k]
  ------------------
 6883|   122k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 386, False: 3.45k]
  |  Branch (6883:36): [True: 254, False: 132]
  ------------------
 6884|    254|        return do_presentation();
 6885|    254|    }
 6886|       |
 6887|   122k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   122k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 122k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|   122k|    begin = parse_align(begin, end, handler);
 6893|   122k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   122k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 144, False: 122k]
  |  |  ------------------
  ------------------
 6894|    144|        handler.on_error("Unexpected end of format string");
 6895|    144|        return begin;
 6896|    144|    }
 6897|       |
 6898|   122k|    begin = parse_width(begin, end, handler);
 6899|   122k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   122k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 114, False: 122k]
  |  |  ------------------
  ------------------
 6900|    114|        handler.on_error("Unexpected end of format string");
 6901|    114|        return begin;
 6902|    114|    }
 6903|       |
 6904|   122k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 4.90k, False: 117k]
  ------------------
 6905|  4.90k|        ++begin;
 6906|  4.90k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  4.90k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38, False: 4.86k]
  |  |  ------------------
  ------------------
 6907|     38|            handler.on_error("Unexpected end of format string");
 6908|     38|            return begin;
 6909|     38|        }
 6910|  4.86k|        begin = parse_precision(begin, end, handler);
 6911|  4.86k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  4.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 206, False: 4.65k]
  |  |  ------------------
  ------------------
 6912|    206|            handler.on_error("Unexpected end of format string");
 6913|    206|            return begin;
 6914|    206|        }
 6915|  4.86k|    }
 6916|       |
 6917|   122k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 1.08k, False: 121k]
  ------------------
 6918|  1.08k|        handler.on_localized();
 6919|  1.08k|        ++begin;
 6920|  1.08k|    }
 6921|   122k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   122k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 66, False: 122k]
  |  |  ------------------
  ------------------
 6922|     66|        handler.on_error("Unexpected end of format string");
 6923|     66|        return begin;
 6924|     66|    }
 6925|       |
 6926|   122k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 122k, False: 0]
  |  Branch (6926:25): [True: 115k, False: 6.74k]
  ------------------
 6927|   115k|        do_presentation();
 6928|   115k|    }
 6929|   122k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   122k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.34k, False: 119k]
  |  |  ------------------
  ------------------
 6930|  2.34k|        handler.on_error("Unexpected end of format string");
 6931|  2.34k|        return begin;
 6932|  2.34k|    }
 6933|       |
 6934|   119k|    return begin;
 6935|   122k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6506|  3.84k|{
 6507|  3.84k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 234, False: 3.61k]
  |  Branch (6507:33): [True: 200, False: 34]
  ------------------
 6508|  3.84k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 274, False: 3.37k]
  |  Branch (6508:33): [True: 186, False: 88]
  ------------------
 6509|  3.84k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|   115k|    auto do_presentation = [&]() -> const CharT* {
 6859|   115k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 5.84k, False: 109k]
  ------------------
 6860|  5.84k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  5.84k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  5.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 792, False: 5.05k]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|    792|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|    792|                return begin;
 6866|    792|            }
 6867|  5.05k|            handler.on_character_set_string(set);
 6868|  5.05k|            return begin;
 6869|  5.84k|        }
 6870|   109k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 105k, False: 4.45k]
  ------------------
 6871|   105k|            return parse_presentation_regex(begin, end, handler);
 6872|   105k|        }
 6873|  4.45k|        presentation_type type = parse_presentation_type(*begin++);
 6874|  4.45k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  4.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 854, False: 3.59k]
  |  |  ------------------
  ------------------
 6875|    854|            handler.on_error("Invalid type specifier in format string");
 6876|    854|            return begin;
 6877|    854|        }
 6878|  3.59k|        handler.on_type(type);
 6879|  3.59k|        return begin;
 6880|  4.45k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6696|  5.84k|{
 6697|  5.84k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  5.84k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.84k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  5.84k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  5.84k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.84k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  5.84k|    auto start = begin;
 6701|  5.84k|    ++begin;
 6702|       |
 6703|  5.84k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  5.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40, False: 5.80k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|     40|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|     40|        return {};
 6708|     40|    }
 6709|  5.80k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 1.63k, False: 4.17k]
  ------------------
 6710|  1.63k|        handler.on_charset_inverted();
 6711|  1.63k|        ++begin;
 6712|  1.63k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 48, False: 1.58k]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|     48|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|     48|            return {};
 6717|     48|        }
 6718|  1.58k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 30, False: 1.55k]
  ------------------
 6719|     30|            handler.on_charset_single(char32_t{']'});
 6720|     30|            ++begin;
 6721|     30|        }
 6722|  1.58k|    }
 6723|  4.17k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 34, False: 4.13k]
  ------------------
 6724|     34|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|     34|    }
 6726|       |
 6727|  64.1k|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 63.6k, False: 490]
  ------------------
 6728|  63.6k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  63.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 180, False: 63.4k]
  |  |  ------------------
  ------------------
 6729|    180|            break;
 6730|    180|        }
 6731|       |
 6732|  63.4k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 5.05k, False: 58.4k]
  ------------------
 6733|  5.05k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  5.05k|        }
 6735|       |
 6736|  58.4k|        parse_presentation_set_literal(begin, end, handler);
 6737|  58.4k|    }
 6738|       |
 6739|    670|    SCN_UNLIKELY_ATTR
 6740|    670|    handler.on_error("Invalid [character set] specifier in format string");
 6741|    670|    return {};
 6742|  5.72k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEvRPKT_SE_OT0_:
 6660|  58.4k|{
 6661|  58.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  58.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  58.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  58.4k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  58.4k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  58.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 138, False: 58.2k]
  |  |  ------------------
  ------------------
 6665|    138|        return;
 6666|    138|    }
 6667|       |
 6668|  58.2k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 58.1k, False: 128]
  |  Branch (6668:25): [True: 2.31k, False: 55.8k]
  |  Branch (6668:49): [True: 2.26k, False: 48]
  ------------------
 6669|  58.2k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 1.98k, False: 280]
  ------------------
 6670|  1.98k|        ++begin;
 6671|       |
 6672|  1.98k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|  1.98k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  1.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 1.95k]
  |  |  ------------------
  ------------------
 6674|     34|            return;
 6675|     34|        }
 6676|       |
 6677|  1.95k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  1.95k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 46, False: 1.90k]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|     46|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|     46|            return;
 6682|     46|        }
 6683|       |
 6684|  1.90k|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|  1.90k|        return;
 6686|  1.95k|    }
 6687|       |
 6688|  56.2k|    handler.on_charset_single(cp_first);
 6689|  56.2k|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEDiRPKT_SE_OT0_:
 6636|  60.4k|{
 6637|  60.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  60.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  60.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  60.4k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  60.4k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|   120k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 60.4k]
  |  |  |  Branch (859:45): [True: 0, False: 60.4k]
  |  |  |  Branch (859:45): [True: 0, False: 60.4k]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|  60.4k|    const auto cp =
 6646|  60.4k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  60.4k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  60.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 172, False: 60.2k]
  |  |  ------------------
  ------------------
 6648|    172|        handler.on_error("Invalid encoding in format string");
 6649|    172|        return invalid_code_point;
 6650|    172|    }
 6651|       |
 6652|  60.2k|    begin += len;
 6653|  60.2k|    return cp;
 6654|  60.4k|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6345|  5.05k|    {
 6346|  5.05k|        m_specs.charset_string_data = fmt.data();
 6347|  5.05k|        m_specs.charset_string_size = fmt.size();
 6348|  5.05k|        on_type(presentation_type::string_set);
 6349|  5.05k|    }
impl.cpp:_ZN3scn2v36detail24parse_presentation_regexIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_RSE_SE_OT0_:
 6748|   105k|{
 6749|   105k|#if !SCN_DISABLE_REGEX
 6750|   105k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   105k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   105k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6751|   105k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  924|   105k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   105k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6752|       |
 6753|   105k|    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|   210k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (6753:19): [Folded - Ignored]
  |  Branch (6753:19): [Folded - Ignored]
  ------------------
 6754|   105k|                  std::is_same_v<CharT, wchar_t>) {
  ------------------
  |  Branch (6754:19): [Folded - Ignored]
  ------------------
 6755|   105k|        handler.on_error("Regex backend doesn't support wide strings as input");
 6756|   105k|        return begin;
 6757|   105k|    }
 6758|       |
 6759|   105k|    auto start = begin;
 6760|   105k|    ++begin;
 6761|       |
 6762|   105k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 105k]
  |  |  ------------------
  ------------------
 6763|     34|        handler.on_error("Unexpected end of regex in format string");
 6764|     34|        return begin;
 6765|     34|    }
 6766|       |
 6767|   105k|    handler.on_type(presentation_type::regex);
 6768|  10.7M|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6768:12): [True: 10.7M, False: 414]
  ------------------
 6769|  10.7M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6769:13): [True: 115k, False: 10.6M]
  ------------------
 6770|   115k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (6770:17): [True: 104k, False: 10.8k]
  ------------------
 6771|   104k|                break;
 6772|   104k|            }
 6773|  10.8k|            else {
 6774|  10.8k|                handler.on_type(presentation_type::regex_escaped);
 6775|  10.8k|            }
 6776|   115k|        }
 6777|  10.7M|    }
 6778|   105k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 414, False: 104k]
  |  |  ------------------
  ------------------
 6779|    414|        handler.on_error("Unexpected end of regex in format string");
 6780|    414|        return begin;
 6781|    414|    }
 6782|       |
 6783|   104k|    auto regex_end = begin;
 6784|   104k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 6785|   104k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  859|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 58, False: 104k]
  |  |  ------------------
  ------------------
 6786|     58|        handler.on_error("Invalid (empty) regex in format string");
 6787|     58|        return begin;
 6788|     58|    }
 6789|   104k|    handler.on_regex_pattern(regex_pattern);
 6790|   104k|    ++begin;
 6791|       |
 6792|   104k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 104k]
  |  |  ------------------
  ------------------
 6793|     34|        handler.on_error("Unexpected end of regex in format string");
 6794|     34|        return begin;
 6795|     34|    }
 6796|       |
 6797|   104k|    regex_flags flags{regex_flags::none};
 6798|   104k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 6799|   104k|        {{'m', regex_flags::multiline},
 6800|   104k|         {'s', regex_flags::singleline},
 6801|   104k|         {'i', regex_flags::nocase},
 6802|   104k|         {'n', regex_flags::nocapture}}};
 6803|   120k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6803:12): [True: 120k, False: 82]
  ------------------
 6804|   120k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6804:13): [True: 104k, False: 16.1k]
  ------------------
 6805|   104k|            break;
 6806|   104k|        }
 6807|  16.1k|        bool found_flag = false;
 6808|  45.6k|        for (auto flag : flag_map) {
  ------------------
  |  Branch (6808:24): [True: 45.6k, False: 186]
  ------------------
 6809|  45.6k|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (6809:17): [True: 29.6k, False: 16.0k]
  ------------------
 6810|  29.6k|                continue;
 6811|  29.6k|            }
 6812|  16.0k|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (6812:17): [True: 28, False: 15.9k]
  ------------------
 6813|     28|                handler.on_error("Flag set multiple times in regex");
 6814|     28|                return begin;
 6815|     28|            }
 6816|  15.9k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 6817|  15.9k|            if (*begin == CharT{'s'}) {
  ------------------
  |  Branch (6817:17): [True: 76, False: 15.9k]
  ------------------
 6818|       |                // clang-format off
 6819|     76|                handler.on_error("/s flag for regex isn't supported by regex backend");
 6820|       |                // clang-format on
 6821|     76|            }
 6822|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 6823|       |            if (*begin == CharT{'m'}) {
 6824|       |                // clang-format off
 6825|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 6826|       |                // clang-format on
 6827|       |            }
 6828|       |#endif
 6829|  15.9k|#endif
 6830|  15.9k|            flags |= flag.second;
 6831|  15.9k|            found_flag = true;
 6832|  15.9k|            break;
 6833|  16.0k|        }
 6834|  16.1k|        if (!found_flag) {
  ------------------
  |  Branch (6834:13): [True: 186, False: 15.9k]
  ------------------
 6835|    186|            handler.on_error("Invalid flag in regex");
 6836|    186|            return begin;
 6837|    186|        }
 6838|  16.1k|    }
 6839|   104k|    handler.on_regex_flags(flags);
 6840|       |
 6841|   104k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 82, False: 104k]
  |  |  ------------------
  ------------------
 6842|     82|        handler.on_error("Unexpected end of regex in format string");
 6843|     82|        return begin;
 6844|     82|    }
 6845|       |
 6846|   104k|    return begin;
 6847|       |#else
 6848|       |    handler.on_error("Regular expression support is disabled");
 6849|       |    return {};
 6850|       |#endif
 6851|   104k|}
_ZN3scn2v36detail12specs_setter16on_regex_patternIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6353|   104k|    {
 6354|   104k|        m_specs.charset_string_data = pattern.data();
 6355|   104k|        m_specs.charset_string_size = pattern.size();
 6356|   104k|    }
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6454|  4.45k|{
 6455|  4.45k|    switch (type) {
 6456|     94|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 94, False: 4.35k]
  ------------------
 6457|    128|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 34, False: 4.41k]
  ------------------
 6458|    128|            return presentation_type::int_binary;
 6459|     88|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 88, False: 4.36k]
  ------------------
 6460|     88|            return presentation_type::int_decimal;
 6461|    136|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 136, False: 4.31k]
  ------------------
 6462|    136|            return presentation_type::int_generic;
 6463|    196|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 196, False: 4.25k]
  ------------------
 6464|    196|            return presentation_type::int_unsigned_decimal;
 6465|    168|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 168, False: 4.28k]
  ------------------
 6466|    168|            return presentation_type::int_octal;
 6467|    220|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 220, False: 4.23k]
  ------------------
 6468|    272|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 52, False: 4.39k]
  ------------------
 6469|    272|            return presentation_type::int_hex;
 6470|     66|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 66, False: 4.38k]
  ------------------
 6471|    118|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 52, False: 4.39k]
  ------------------
 6472|    118|            return presentation_type::int_arbitrary_base;
 6473|    178|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 178, False: 4.27k]
  ------------------
 6474|    354|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 176, False: 4.27k]
  ------------------
 6475|    354|            return presentation_type::float_hex;
 6476|    160|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 160, False: 4.29k]
  ------------------
 6477|    194|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 34, False: 4.41k]
  ------------------
 6478|    194|            return presentation_type::float_scientific;
 6479|    138|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 138, False: 4.31k]
  ------------------
 6480|    262|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 124, False: 4.32k]
  ------------------
 6481|    262|            return presentation_type::float_fixed;
 6482|     34|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 34, False: 4.41k]
  ------------------
 6483|     68|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 34, False: 4.41k]
  ------------------
 6484|     68|            return presentation_type::float_general;
 6485|  1.13k|        case 's':
  ------------------
  |  Branch (6485:9): [True: 1.13k, False: 3.31k]
  ------------------
 6486|  1.13k|            return presentation_type::string;
 6487|    358|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 358, False: 4.09k]
  ------------------
 6488|    358|            return presentation_type::character;
 6489|     34|        case '?':
  ------------------
  |  Branch (6489:9): [True: 34, False: 4.41k]
  ------------------
 6490|     34|            return presentation_type::escaped_character;
 6491|     88|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 88, False: 4.36k]
  ------------------
 6492|     88|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 4.45k]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 4.45k]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|    854|        default:
  ------------------
  |  Branch (6499:9): [True: 854, False: 3.59k]
  ------------------
 6500|    854|            return presentation_type::none;
 6501|  4.45k|    }
 6502|  4.45k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6531|   122k|{
 6532|   122k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   122k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   122k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|   122k|    auto check_align = [](wchar_t ch) {
 6535|   122k|        switch (ch) {
 6536|   122k|            case L'<':
 6537|   122k|                return align_type::left;
 6538|   122k|            case L'>':
 6539|   122k|                return align_type::right;
 6540|   122k|            case L'^':
 6541|   122k|                return align_type::center;
 6542|   122k|            default:
 6543|   122k|                return align_type::none;
 6544|   122k|        }
 6545|   122k|    };
 6546|       |
 6547|   122k|    auto potential_fill_len = code_point_length(begin, end);
 6548|   122k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   245k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 122k]
  |  |  |  Branch (859:45): [True: 0, False: 122k]
  |  |  |  Branch (859:45): [True: 0, False: 122k]
  |  |  ------------------
  ------------------
 6549|   122k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|   122k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|   122k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|   122k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|   122k|    const auto begin_before_fill = begin;
 6559|   122k|    begin += potential_fill_len;
 6560|       |
 6561|   122k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 1.08k, False: 121k]
  ------------------
 6562|  1.08k|        return begin_before_fill;
 6563|  1.08k|    }
 6564|       |
 6565|   121k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|   121k|    const auto begin_after_fill = begin;
 6567|   121k|    ++begin;
 6568|       |
 6569|   121k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 121k, False: 0]
  ------------------
 6570|   121k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 50, False: 121k]
  |  |  ------------------
  ------------------
 6571|     50|            handler.on_error("Invalid fill character '{' in format string");
 6572|     50|            return begin;
 6573|     50|        }
 6574|   121k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 5.52k, False: 116k]
  ------------------
 6575|  5.52k|            return begin_before_fill;
 6576|  5.52k|        }
 6577|   121k|    }
 6578|       |
 6579|   116k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 112k, False: 3.62k]
  ------------------
 6580|   112k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 2.81k, False: 109k]
  ------------------
 6581|  2.81k|            handler.on_align(potential_align_on_fill);
 6582|  2.81k|            return begin_after_fill;
 6583|  2.81k|        }
 6584|   109k|        return begin_before_fill;
 6585|   112k|    }
 6586|       |
 6587|  3.62k|    handler.on_fill(potential_fill);
 6588|  3.62k|    handler.on_align(potential_align_after_fill);
 6589|  3.62k|    return begin;
 6590|   116k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6513|   122k|{
 6514|   122k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   122k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   122k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|   122k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6515:19): [Folded - Ignored]
  ------------------
 6516|   122k|        return 1;
 6517|   122k|    }
 6518|   122k|    else {
 6519|   122k|        const auto lengths =
 6520|   122k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|   122k|            "\3\4";
 6522|   122k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|   122k|        return len;
 6524|   122k|    }
 6525|   122k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|   244k|    auto check_align = [](wchar_t ch) {
 6535|   244k|        switch (ch) {
 6536|  4.71k|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 4.71k, False: 239k]
  ------------------
 6537|  4.71k|                return align_type::left;
 6538|    358|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 358, False: 243k]
  ------------------
 6539|    358|                return align_type::right;
 6540|  2.84k|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 2.84k, False: 241k]
  ------------------
 6541|  2.84k|                return align_type::center;
 6542|   236k|            default:
  ------------------
  |  Branch (6542:13): [True: 236k, False: 7.92k]
  ------------------
 6543|   236k|                return align_type::none;
 6544|   244k|        }
 6545|   244k|    };
_ZN3scn2v36detail12specs_setter7on_fillIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6267|  3.62k|    {
 6268|  3.62k|        m_specs.fill = fill;
 6269|  3.62k|    }
_ZN3scn2v36detail9fill_typeaSIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6148|  3.62k|    {
 6149|  3.62k|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  924|  3.62k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.62k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6150|  3.62k|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  924|  3.62k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.62k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6151|  3.62k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (6151:23): [Folded - Ignored]
  ------------------
 6152|  3.62k|            for (size_t i = 0; i < s.size(); ++i) {
 6153|  3.62k|                SCN_GCC_PUSH
 6154|  3.62k|                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6155|  3.62k|                m_data[i] = s[i];
 6156|  3.62k|                SCN_GCC_POP
 6157|  3.62k|            }
 6158|  3.62k|            m_size = static_cast<unsigned char>(s.size());
 6159|  3.62k|        }
 6160|  3.62k|        else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (6160:28): [Folded - Ignored]
  ------------------
 6161|  3.62k|            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6162|  3.62k|            m_data[1] =
 6163|  3.62k|                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6164|  3.62k|            if (s.size() == 1) {
 6165|  3.62k|                return;
 6166|  3.62k|            }
 6167|  3.62k|            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6168|  3.62k|            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6169|  3.62k|        }
 6170|  3.62k|        else {
 6171|  3.62k|            const auto front = static_cast<unsigned>(s.front());
 6172|  3.62k|            m_data[0] = static_cast<char>(front);
 6173|  3.62k|            m_data[1] = static_cast<char>(front >> 8);
 6174|  3.62k|            m_data[2] = static_cast<char>(front >> 16);
 6175|  3.62k|            m_data[3] = static_cast<char>(front >> 24);
 6176|  3.62k|        }
 6177|  3.62k|    }
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6596|   122k|{
 6597|   122k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   122k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   122k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|   122k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 101k, False: 21.3k]
  |  Branch (6599:33): [True: 92.1k, False: 8.99k]
  ------------------
 6600|  92.1k|        int width = parse_simple_int(begin, end);
 6601|  92.1k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  92.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 92.1k, False: 36]
  |  |  ------------------
  ------------------
 6602|  92.1k|            handler.on_width(width);
 6603|  92.1k|        }
 6604|     36|        else {
 6605|     36|            handler.on_error("Invalid field width");
 6606|     36|            return begin;
 6607|     36|        }
 6608|  92.1k|    }
 6609|   122k|    return begin;
 6610|   122k|}
impl.cpp:_ZN3scn2v36detail15parse_precisionIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6616|  4.86k|{
 6617|  4.86k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  4.86k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.86k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6618|       |
 6619|  4.86k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6619:9): [True: 4.76k, False: 94]
  |  Branch (6619:33): [True: 4.69k, False: 70]
  ------------------
 6620|  4.69k|        int prec = parse_simple_int(begin, end);
 6621|  4.69k|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  |  858|  4.69k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.69k, False: 0]
  |  |  ------------------
  ------------------
 6622|  4.69k|            handler.on_precision(prec);
 6623|  4.69k|        }
 6624|      0|        else {
 6625|      0|            handler.on_error("Invalid field precision");
 6626|      0|            return begin;
 6627|      0|        }
 6628|  4.69k|    }
 6629|  4.86k|    return begin;
 6630|  4.86k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7126|  1.08k|    {
 7127|  1.08k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|  1.08k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 970, False: 110]
  ------------------
 7129|  1.08k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 860, False: 110]
  ------------------
 7130|  1.08k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 750, False: 110]
  ------------------
 7131|  1.08k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 640, False: 110]
  ------------------
 7132|    640|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|    640|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|    640|        }
 7137|       |
 7138|    440|        Handler::on_localized();
 7139|    440|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   117k|{
 8417|   117k|#define SCN_VISIT(Type)                                         \
 8418|   117k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   117k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   117k|    }                                                           \
 8421|   117k|    else {                                                      \
 8422|   117k|        return vis(monostate_val);                              \
 8423|   117k|    }
 8424|       |
 8425|   117k|    monostate monostate_val{};
 8426|       |
 8427|   117k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 117k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 117k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|  13.1k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 13.1k, False: 104k]
  ------------------
 8433|  13.1k|            SCN_VISIT(int);
  ------------------
  |  | 8418|  13.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  13.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  13.1k|    }                                                           \
  |  | 8421|  13.1k|    else {                                                      \
  |  | 8422|  13.1k|        return vis(monostate_val);                              \
  |  | 8423|  13.1k|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 117k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 117k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 117k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 117k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|  13.1k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 13.1k, False: 104k]
  ------------------
 8443|  13.1k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|  13.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  13.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  13.1k|    }                                                           \
  |  | 8421|  13.1k|    else {                                                      \
  |  | 8422|  13.1k|        return vis(monostate_val);                              \
  |  | 8423|  13.1k|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 117k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 117k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|  13.0k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 13.0k, False: 104k]
  ------------------
 8449|  13.0k|            SCN_VISIT(void*);
  ------------------
  |  | 8418|  13.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  13.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  13.0k|    }                                                           \
  |  | 8421|  13.0k|    else {                                                      \
  |  | 8422|  13.0k|        return vis(monostate_val);                              \
  |  | 8423|  13.0k|    }
  ------------------
 8450|  13.1k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 13.1k, False: 104k]
  ------------------
 8451|  13.1k|            SCN_VISIT(bool);
  ------------------
  |  | 8418|  13.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  13.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  13.1k|    }                                                           \
  |  | 8421|  13.1k|    else {                                                      \
  |  | 8422|  13.1k|        return vis(monostate_val);                              \
  |  | 8423|  13.1k|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 117k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|  13.0k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 13.0k, False: 104k]
  ------------------
 8455|  13.0k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|  13.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  13.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  13.0k|    }                                                           \
  |  | 8421|  13.0k|    else {                                                      \
  |  | 8422|  13.0k|        return vis(monostate_val);                              \
  |  | 8423|  13.0k|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 117k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 117k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|  13.1k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 13.1k, False: 104k]
  ------------------
 8461|  13.1k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  13.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  13.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  13.1k|    }                                                           \
  |  | 8421|  13.1k|    else {                                                      \
  |  | 8422|  13.1k|        return vis(monostate_val);                              \
  |  | 8423|  13.1k|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 117k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 117k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|  13.0k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 13.0k, False: 104k]
  ------------------
 8467|  13.0k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|  13.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  13.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  13.0k|    }                                                           \
  |  | 8421|  13.0k|    else {                                                      \
  |  | 8422|  13.0k|        return vis(monostate_val);                              \
  |  | 8423|  13.0k|    }
  ------------------
 8468|  13.0k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 13.0k, False: 104k]
  ------------------
 8469|  13.0k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|  13.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  13.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  13.0k|    }                                                           \
  |  | 8421|  13.0k|    else {                                                      \
  |  | 8422|  13.0k|        return vis(monostate_val);                              \
  |  | 8423|  13.0k|    }
  ------------------
 8470|  13.0k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 13.0k, False: 104k]
  ------------------
 8471|  13.0k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|  13.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  13.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  13.0k|    }                                                           \
  |  | 8421|  13.0k|    else {                                                      \
  |  | 8422|  13.0k|        return vis(monostate_val);                              \
  |  | 8423|  13.0k|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 117k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 117k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 117k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 117k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 117k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   117k|            SCN_CLANG_POP
 8495|   117k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE5beginEv:
 3329|  6.99k|    {
 3330|  6.99k|        return m_iterator;
 3331|  6.99k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISH_vEEOT_:
 1429|  1.74k|    {
 1430|  1.74k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  436|  1.74k|    {
  437|  1.74k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.74k|    {
 1177|  1.74k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE3endEv:
 3333|  3.49k|    {
 3334|  3.49k|        return m_sentinel;
 3335|  3.49k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEEC2ISG_LPv0EEET_SJ_:
 3315|  3.49k|    {
 3316|  3.49k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9has_valueEv:
  484|  3.49k|    {
  485|  3.49k|        return m_has_value;
  486|  3.49k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5valueISH_LPv0EEERT_v:
 1626|  1.74k|    {
 1627|  1.74k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.74k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.74k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.74k|        return this->get_value();
 1629|  1.74k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9get_valueEv:
  450|  1.74k|    {
  451|  1.74k|        return m_value;
  452|  1.74k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESI_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSO_:
 1836|  1.74k|    {
 1837|  1.74k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.74k|                                            std::forward<F>(f));
 1839|  1.74k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS6_IPKwS8_EENS4_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEE8sentinelILb1EEEEENS4_9eof_errorEEERFNS0_10scan_errorESK_ELPv0ESM_EEDaOT_OT0_:
 1322|  1.74k|{
 1323|  1.74k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.74k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.74k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.74k|            return result(*std::forward<Exp>(exp));
 1327|  1.74k|        }
 1328|       |
 1329|  1.74k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.74k|        return result(unexpect, monostate{});
 1331|  1.74k|    }
 1332|  1.74k|    else {
 1333|  1.74k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.74k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.74k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.74k, False: 0]
  |  |  ------------------
  ------------------
 1335|  1.74k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.74k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  1.74k|    }
 1340|  1.74k|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_LPv0EEEOT_v:
 1662|  1.74k|    {
 1663|  1.74k|        return std::move(value());
 1664|  1.74k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|  1.74k|    {
 1430|  1.74k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  436|  1.74k|    {
  437|  1.74k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.74k|    {
 1177|  1.74k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEcvbEv:
 1597|  1.74k|    {
 1598|  1.74k|        return has_value();
 1599|  1.74k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  3.49k|    {
  485|  3.49k|        return m_has_value;
  486|  3.49k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEdeISH_LPv0EEEOT_v:
 1662|  1.74k|    {
 1663|  1.74k|        return std::move(value());
 1664|  1.74k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1626|  1.74k|    {
 1627|  1.74k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.74k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.74k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.74k|        return this->get_value();
 1629|  1.74k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.74k|    {
  451|  1.74k|        return m_value;
  452|  1.74k|    }

_ZN3scn2v34scanIJwERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  37.3k|{
   89|  37.3k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  37.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  37.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  37.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  37.3k|    static_cast<    \
  |  |  929|  37.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  37.3k|    static_cast<    \
  |  |  929|  37.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  37.3k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   336k|{
   44|   336k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   336k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   336k|}
_ZN3scn2v34scanIJwENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  37.3k|{
  127|  37.3k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  37.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  37.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  37.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  37.3k|    static_cast<    \
  |  |  929|  37.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  37.3k|    static_cast<    \
  |  |  929|  37.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  37.3k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS2_6localeELPv0EEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT0_OSC_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   336k|{
   60|   336k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   336k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   336k|}
_ZN3scn2v34scanIJiERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  37.3k|{
   89|  37.3k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  37.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  37.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  37.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  37.3k|    static_cast<    \
  |  |  929|  37.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  37.3k|    static_cast<    \
  |  |  929|  37.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  37.3k|}
_ZN3scn2v34scanIJiENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  37.3k|{
  127|  37.3k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  37.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  37.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  37.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  37.3k|    static_cast<    \
  |  |  929|  37.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  37.3k|    static_cast<    \
  |  |  929|  37.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  37.3k|}
_ZN3scn2v34scanIJjERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  37.3k|{
   89|  37.3k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  37.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  37.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  37.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  37.3k|    static_cast<    \
  |  |  929|  37.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  37.3k|    static_cast<    \
  |  |  929|  37.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  37.3k|}
_ZN3scn2v34scanIJjENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  37.3k|{
  127|  37.3k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  37.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  37.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  37.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  37.3k|    static_cast<    \
  |  |  929|  37.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  37.3k|    static_cast<    \
  |  |  929|  37.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  37.3k|}
_ZN3scn2v34scanIJdERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  37.3k|{
   89|  37.3k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  37.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  37.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  37.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  37.3k|    static_cast<    \
  |  |  929|  37.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  37.3k|    static_cast<    \
  |  |  929|  37.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  37.3k|}
_ZN3scn2v34scanIJdENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  37.3k|{
  127|  37.3k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  37.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  37.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  37.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  37.3k|    static_cast<    \
  |  |  929|  37.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  37.3k|    static_cast<    \
  |  |  929|  37.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  37.3k|}
_ZN3scn2v34scanIJbERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  37.3k|{
   89|  37.3k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  37.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  37.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  37.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  37.3k|    static_cast<    \
  |  |  929|  37.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  37.3k|    static_cast<    \
  |  |  929|  37.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  37.3k|}
_ZN3scn2v34scanIJbENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  37.3k|{
  127|  37.3k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  37.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  37.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  37.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  37.3k|    static_cast<    \
  |  |  929|  37.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  37.3k|    static_cast<    \
  |  |  929|  37.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  37.3k|}
_ZN3scn2v34scanIJPvERNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEELS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  37.3k|{
   89|  37.3k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  37.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  37.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  37.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  37.3k|    static_cast<    \
  |  |  929|  37.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  37.3k|    static_cast<    \
  |  |  929|  37.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  37.3k|}
_ZN3scn2v34scanIJPvENSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEELS2_0ELS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  37.3k|{
  127|  37.3k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  37.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  37.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  37.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  37.3k|    static_cast<    \
  |  |  929|  37.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  37.3k|    static_cast<    \
  |  |  929|  37.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  37.3k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIwNS4_IwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNSM_13type_identityISH_E4typeEJDpNSY_ISS_E4typeEEEE:
   88|  37.3k|{
   89|  37.3k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  37.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  37.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  37.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  37.3k|    static_cast<    \
  |  |  929|  37.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  37.3k|    static_cast<    \
  |  |  929|  37.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  37.3k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIwNS4_IwEEEELPv0ELSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSN_13type_identityISI_E4typeEJDpNS12_IST_E4typeEEEE:
  126|  37.3k|{
  127|  37.3k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  37.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  37.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  37.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  37.3k|    static_cast<    \
  |  |  929|  37.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  37.3k|    static_cast<    \
  |  |  929|  37.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  37.3k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIwS5_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSL_13type_identityISG_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  37.3k|{
   89|  37.3k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  37.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  37.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  37.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  37.3k|    static_cast<    \
  |  |  929|  37.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  37.3k|    static_cast<    \
  |  |  929|  37.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  37.3k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIwS5_EELPv0ELSD_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSM_13type_identityISH_E4typeEJDpNS11_ISS_E4typeEEEE:
  126|  37.3k|{
  127|  37.3k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  37.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  37.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  37.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  37.3k|    static_cast<    \
  |  |  929|  37.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  37.3k|    static_cast<    \
  |  |  929|  37.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  37.3k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEERS6_LPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  37.3k|{
   89|  37.3k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  37.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  37.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  37.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  37.3k|    static_cast<    \
  |  |  929|  37.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  37.3k|    static_cast<    \
  |  |  929|  37.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  37.3k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeERS6_LPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  37.3k|{
  127|  37.3k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  37.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  37.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  37.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  37.3k|    static_cast<    \
  |  |  929|  37.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  37.3k|    static_cast<    \
  |  |  929|  37.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  37.3k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  652|   504k|{
  653|   504k|    static_assert(std::is_same_v<Locale, std::locale>);
  654|   504k|}
_ZNK3scn2v36detail10locale_ref3getINSt3__16localeEEET_v:
  658|    474|{
  659|    474|    static_assert(std::is_same_v<Locale, std::locale>);
  660|    474|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (660:12): [True: 237, False: 237]
  ------------------
  661|    474|                    : std::locale{};
  662|    474|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|  1.05k|{
 1221|  1.05k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  1.05k|                                  m_nan_payload_buffer, value);
 1223|  1.05k|    value = this->setsign(value);
 1224|  1.05k|    return n;
 1225|  1.05k|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|  1.17k|{
 1221|  1.17k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  1.17k|                                  m_nan_payload_buffer, value);
 1223|  1.17k|    value = this->setsign(value);
 1224|  1.17k|    return n;
 1225|  1.17k|}
_ZN3scn2v34impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|     22|{
 1461|     22|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|     22|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|     22|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|     22|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|     22|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 22, False: 0]
  ------------------
 1467|     22|        SCN_UNLIKELY_ATTR
 1468|     22|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|     22|                                     "Invalid integer value");
 1470|     22|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|  1.00k|{
 1461|  1.00k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  1.00k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.00k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|  1.00k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  1.00k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.00k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  1.00k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  1.00k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.00k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  1.00k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  1.00k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.00k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|  1.00k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 1.00k, False: 0]
  ------------------
 1467|  1.00k|        SCN_UNLIKELY_ATTR
 1468|  1.00k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  1.00k|                                     "Invalid integer value");
 1470|  1.00k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|  1.18k|{
 1461|  1.18k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  1.18k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.18k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|  1.18k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  1.18k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.18k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  1.18k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  1.18k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.18k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  1.18k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  1.18k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.18k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|  1.18k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 1.18k, False: 0]
  ------------------
 1467|  1.18k|        SCN_UNLIKELY_ATTR
 1468|  1.18k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  1.18k|                                     "Invalid integer value");
 1470|  1.18k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|  1.00k|{
 1461|  1.00k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  1.00k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.00k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|  1.00k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  1.00k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.00k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  1.00k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  1.00k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.00k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  1.00k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  1.00k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.00k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|  1.00k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 1.00k, False: 0]
  ------------------
 1467|  1.00k|        SCN_UNLIKELY_ATTR
 1468|  1.00k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  1.00k|                                     "Invalid integer value");
 1470|  1.00k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|  1.17k|{
 1461|  1.17k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  1.17k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.17k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|  1.17k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  1.17k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.17k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  1.17k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  1.17k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.17k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  1.17k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  1.17k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.17k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|  1.17k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 1.17k, False: 0]
  ------------------
 1467|  1.17k|        SCN_UNLIKELY_ATTR
 1468|  1.17k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  1.17k|                                     "Invalid integer value");
 1470|  1.17k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIcmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    988|{
 1461|    988|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    988|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    988|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    988|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    988|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    988|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    988|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    988|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    988|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    988|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    988|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    988|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    988|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 988, False: 0]
  ------------------
 1467|    988|        SCN_UNLIKELY_ATTR
 1468|    988|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    988|                                     "Invalid integer value");
 1470|    988|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|  1.15k|{
 1461|  1.15k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  1.15k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.15k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|  1.15k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  1.15k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.15k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  1.15k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  1.15k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.15k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  1.15k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  1.15k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.15k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|  1.15k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 1.15k, False: 0]
  ------------------
 1467|  1.15k|        SCN_UNLIKELY_ATTR
 1468|  1.15k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  1.15k|                                     "Invalid integer value");
 1470|  1.15k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|   168k|{
 2184|   168k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|   168k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|   336k|{
 2208|   336k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|   336k|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|  4.72k|{
  194|  4.72k|    return find_classic_impl(
  195|  4.72k|        source, [](char ch) { return is_ascii_space(ch); },
  196|  4.72k|        [](char32_t cp) { return is_cp_space(cp); });
  197|  4.72k|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|  35.1k|{
  202|  35.1k|    return find_classic_impl(
  203|  35.1k|        source, [](char ch) { return !is_ascii_space(ch); },
  204|  35.1k|        [](char32_t cp) { return !is_cp_space(cp); });
  205|  35.1k|}
_ZN3scn2v36detail12handle_errorENS0_10scan_errorE:
  672|    306|{
  673|    306|    return e;
  674|    306|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2140|   168k|{
 2141|   168k|    return vscan_internal(source, format, args);
 2142|   168k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2160|   336k|{
 2161|   336k|    return vscan_internal(source, format, args);
 2162|   336k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  4.72k|{
  118|  4.72k|    auto it = source.begin();
  119|       |
  120|  32.4k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 28.5k, False: 3.90k]
  ------------------
  121|  28.5k|        auto sv =
  122|  28.5k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  28.5k|                .substr(0, 8);
  124|       |
  125|  28.5k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 7.74k, False: 20.8k]
  ------------------
  126|  7.74k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  7.74k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  7.74k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 486, False: 7.25k]
  ------------------
  129|    486|                break;
  130|    486|            }
  131|  7.25k|            continue;
  132|  7.74k|        }
  133|       |
  134|  91.1k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 70.6k, False: 20.5k]
  ------------------
  135|  70.6k|            auto tmp =
  136|  70.6k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|  70.6k|            auto res = get_next_code_point(tmp);
  138|  70.6k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 330, False: 70.2k]
  ------------------
  139|    330|                return it;
  140|    330|            }
  141|  70.2k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  70.2k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  70.2k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  70.2k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  70.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  70.2k|        }
  145|  20.8k|    }
  146|       |
  147|  4.39k|    return detail::make_string_view_iterator(source, it);
  148|  4.72k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|  76.5k|{
  105|  76.5k|    static_assert(sizeof(*source.data()) == 1);
  106|  76.5k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  76.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  76.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|  76.5k|    uint64_t word{};
  108|  76.5k|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|  76.5k|    return has_byte_greater(word, 127) != 0;
  111|  76.5k|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  54.6k|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|  70.6k|        [](char32_t cp) { return is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  35.1k|{
  118|  35.1k|    auto it = source.begin();
  119|       |
  120|  59.7k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 47.9k, False: 11.7k]
  ------------------
  121|  47.9k|        auto sv =
  122|  47.9k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  47.9k|                .substr(0, 8);
  124|       |
  125|  47.9k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 22.3k, False: 25.5k]
  ------------------
  126|  22.3k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  22.3k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  22.3k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 14.0k, False: 8.33k]
  ------------------
  129|  14.0k|                break;
  130|  14.0k|            }
  131|  8.33k|            continue;
  132|  22.3k|        }
  133|       |
  134|  82.7k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 66.4k, False: 16.2k]
  ------------------
  135|  66.4k|            auto tmp =
  136|  66.4k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|  66.4k|            auto res = get_next_code_point(tmp);
  138|  66.4k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 9.35k, False: 57.1k]
  ------------------
  139|  9.35k|                return it;
  140|  9.35k|            }
  141|  57.1k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  57.1k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  57.1k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  57.1k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  57.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  57.1k|        }
  145|  25.5k|    }
  146|       |
  147|  25.8k|    return detail::make_string_view_iterator(source, it);
  148|  35.1k|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  72.4k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|  66.4k|        [](char32_t cp) { return !is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  1.05k|{
 1138|  1.05k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 1.05k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|  1.05k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 1.05k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|  1.05k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 1.05k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|  1.05k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 1.05k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|  1.05k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  1.05k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.05k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  1.05k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 64, False: 990]
  ------------------
 1185|     64|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|     64|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 64, False: 0]
  |  |  ------------------
  ------------------
 1186|     64|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|     64|                                         "Invalid floating-point digit");
 1188|     64|        }
 1189|     64|    }
 1190|    990|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|    990|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 990, False: 0]
  |  |  ------------------
  ------------------
 1191|    990|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|    990|                                     "Invalid floating-point digit");
 1193|    990|    }
 1194|       |
 1195|      0|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|      0|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|      0|            double tmp{};
 1200|      0|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|      0|            value = tmp;
 1202|      0|            return ret;
 1203|      0|        }
 1204|      0|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|      0|            return fast_float_fallback(data, value);
 1208|      0|        }
 1209|      0|    }
 1210|      0|    else {
 1211|       |        // Default to fast_float
 1212|      0|        return fast_float_impl<CharT, T>{data}(value);
 1213|      0|    }
 1214|      0|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  1.17k|{
 1138|  1.17k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 1.17k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|  1.17k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 1.17k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|  1.17k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 1.17k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|  1.17k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 1.17k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|  1.17k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  1.17k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.17k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  1.17k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 14, False: 1.16k]
  ------------------
 1185|     14|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14, False: 0]
  |  |  ------------------
  ------------------
 1186|     14|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|     14|                                         "Invalid floating-point digit");
 1188|     14|        }
 1189|     14|    }
 1190|  1.16k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  1.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.16k, False: 0]
  |  |  ------------------
  ------------------
 1191|  1.16k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  1.16k|                                     "Invalid floating-point digit");
 1193|  1.16k|    }
 1194|       |
 1195|      0|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|      0|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|      0|            double tmp{};
 1200|      0|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|      0|            value = tmp;
 1202|      0|            return ret;
 1203|      0|        }
 1204|      0|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|      0|            return fast_float_fallback(data, value);
 1208|      0|        }
 1209|      0|    }
 1210|      0|    else {
 1211|       |        // Default to fast_float
 1212|      0|        return fast_float_impl<CharT, T>{data}(value);
 1213|      0|    }
 1214|      0|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   336k|{
 1625|   336k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 335k, False: 414]
  ------------------
 1626|   335k|        return false;
 1627|   335k|    }
 1628|    414|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 126, False: 288]
  |  Branch (1628:39): [True: 18, False: 108]
  ------------------
 1629|   336k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1902|   336k|    {
 1903|   336k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1721|  1.00M|    {
 1722|  1.00M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.00M]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|  1.00M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1852|   336k|    {
 1853|   336k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   336k|{
 2038|   336k|    const auto beg = handler.get_ctx().begin();
 2039|   336k|    detail::parse_format_string<false>(format, handler);
 2040|   336k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   336k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 331k, False: 5.01k]
  |  |  ------------------
  ------------------
 2041|   331k|        return unexpected(handler.error);
 2042|   331k|    }
 2043|  5.01k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   336k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2021|  1.46M|    {
 2022|  1.46M|        return ctx.get();
 2023|  1.46M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|  1.46M|    {
 1857|  1.46M|        return contiguous_ctx;
 1858|  1.46M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|   363k|    {
 1907|   454k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 103k, False: 350k]
  ------------------
 1908|   103k|            auto it = get_ctx().begin();
 1909|   103k|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 1.42k, False: 102k]
  ------------------
 1910|  1.42k|                SCN_UNLIKELY_ATTR
 1911|  1.42k|                return on_error("Unexpected end of source");
 1912|  1.42k|            }
 1913|       |
 1914|   102k|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|   102k|                    detail::make_string_view_from_pointers(begin, end));
 1916|   102k|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 7.81k, False: 94.4k]
  ------------------
 1917|  7.81k|                SCN_UNLIKELY_ATTR
 1918|  7.81k|                return on_error("Invalid encoding in format string");
 1919|  7.81k|            }
 1920|  94.4k|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 10.7k, False: 83.7k]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|  10.7k|                get_ctx().advance_to(
 1923|  10.7k|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|  10.7k|                auto begin_it = impl::read_while_classic_space(
 1926|  10.7k|                    detail::make_string_view_from_pointers(
 1927|  10.7k|                        detail::to_address(after_space_it),
 1928|  10.7k|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|  10.7k|                begin = detail::to_address(begin_it) - 1;
 1931|  10.7k|                continue;
 1932|  10.7k|            }
 1933|       |
 1934|  83.7k|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 3.82k, False: 79.9k]
  ------------------
 1935|  3.82k|                SCN_UNLIKELY_ATTR
 1936|  3.82k|                return on_error("Unexpected literal character in source");
 1937|  3.82k|            }
 1938|  79.9k|            get_ctx().advance_to(ranges::next(it));
 1939|  79.9k|        }
 1940|   363k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE20on_replacement_fieldEmPKc:
 1971|  6.86k|    {
 1972|  6.86k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1973|  6.86k|        set_arg_as_visited(arg_id);
 1974|       |
 1975|  6.86k|        on_visit_scan_arg(
 1976|  6.86k|            impl::default_arg_reader<context_type>{
 1977|  6.86k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 1978|  6.86k|            arg);
 1979|  6.86k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   203k|{
 1681|   203k|    auto arg = ctx.arg(id);
 1682|   203k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   203k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.73k, False: 201k]
  |  |  ------------------
  ------------------
 1683|  1.73k|        handler.on_error("Failed to find argument with ID");
 1684|  1.73k|    }
 1685|   203k|    return arg;
 1686|   203k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|   332k|    {
 1797|   332k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|   332k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.47k, False: 329k]
  |  |  ------------------
  ------------------
 1798|  3.47k|            on_error("Invalid out-of-range argument ID");
 1799|  3.47k|            return;
 1800|  3.47k|        }
 1801|       |
 1802|   329k|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|   329k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 150, False: 329k]
  |  |  ------------------
  ------------------
 1803|    150|            return on_error("Argument with this ID has already been scanned");
 1804|    150|        }
 1805|       |
 1806|   329k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|   329k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 329k, False: 0]
  |  |  ------------------
  ------------------
 1807|   329k|            visited_args_lower64 |= (1ull << id);
 1808|   329k|            return;
 1809|   329k|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|   329k|    {
 1782|   329k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|   329k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 329k]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|   329k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|   329k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 329k, False: 0]
  |  |  ------------------
  ------------------
 1788|   329k|            return (visited_args_lower64 >> id) & 1ull;
 1789|   329k|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|   329k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl18default_arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|  6.86k|    {
 1956|  6.86k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 166, False: 6.69k]
  |  Branch (1956:23): [True: 0, False: 6.69k]
  ------------------
 1957|    166|            SCN_UNLIKELY_ATTR
 1958|    166|            return;
 1959|    166|        }
 1960|       |
 1961|  6.69k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  6.69k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  6.69k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  6.69k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.76k, False: 1.93k]
  |  |  ------------------
  ------------------
 1963|  4.76k|            on_error(r.error());
 1964|  4.76k|        }
 1965|  1.93k|        else {
 1966|  1.93k|            get_ctx().advance_to(*r);
 1967|  1.93k|        }
 1968|  6.69k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|   302k|    {
 1766|   302k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|   302k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 302k, False: 0]
  |  |  ------------------
  ------------------
 1767|   302k|            error = err;
 1768|   302k|        }
 1769|   302k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1943|   190k|    {
 1944|   190k|        return parse_ctx.next_arg_id();
 1945|   190k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEm:
 1947|  13.0k|    {
 1948|  13.0k|        parse_ctx.check_arg_id(id);
 1949|  13.0k|        return id;
 1950|  13.0k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1984|   196k|    {
 1985|   196k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   196k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   196k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 196k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   196k|        auto specs = detail::format_specs{};
 1998|   196k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   196k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   196k|            arg.type()};
 2001|       |
 2002|   196k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   196k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 2.81k, False: 193k]
  |  Branch (2003:29): [True: 1.58k, False: 192k]
  ------------------
 2004|  4.39k|            SCN_UNLIKELY_ATTR
 2005|  4.39k|            on_error("Missing '}' in format string");
 2006|  4.39k|            return parse_ctx.begin();
 2007|  4.39k|        }
 2008|   192k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   192k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 720, False: 191k]
  |  |  ------------------
  ------------------
 2009|    720|            return parse_ctx.begin();
 2010|    720|        }
 2011|   191k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   191k|        on_visit_scan_arg(
 2014|   191k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   191k|                                           get_ctx().locale()},
 2016|   191k|            arg);
 2017|   191k|        return parse_ctx.begin();
 2018|   192k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1700|   196k|    {
 1701|   196k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|   191k|    {
 1956|   191k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 116, False: 191k]
  |  Branch (1956:23): [True: 0, False: 191k]
  ------------------
 1957|    116|            SCN_UNLIKELY_ATTR
 1958|    116|            return;
 1959|    116|        }
 1960|       |
 1961|   191k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   191k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   191k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   191k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 178k, False: 12.7k]
  |  |  ------------------
  ------------------
 1963|   178k|            on_error(r.error());
 1964|   178k|        }
 1965|  12.7k|        else {
 1966|  12.7k|            get_ctx().advance_to(*r);
 1967|  12.7k|        }
 1968|   191k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1760|  1.91M|    {
 1761|  1.91M|        SCN_UNLIKELY_ATTR
 1762|  1.91M|        error = scan_error{scan_error::invalid_format_string, msg};
 1763|  1.91M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|  1.00M|    {
 1729|  1.00M|        {
 1730|  1.00M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 1.00M]
  ------------------
 1731|  1.00M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 1.00M]
  ------------------
 1732|  1.00M|                                      ? std::numeric_limits<uint64_t>::max()
 1733|  1.00M|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|  1.00M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 679k, False: 329k]
  ------------------
 1736|   679k|                return on_error("Argument list not exhausted");
 1737|   679k|            }
 1738|  1.00M|        }
 1739|       |
 1740|   329k|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 329k, False: 0]
  ------------------
 1741|   329k|            return;
 1742|   329k|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|  1.00M|    {
 1777|  1.00M|        return error;
 1778|  1.00M|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|  2.14M|    {
 1773|  2.14M|        return static_cast<bool>(error);
 1774|  2.14M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   336k|{
 2053|   336k|    const auto argcount = args.size();
 2054|   336k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 18, False: 336k]
  |  Branch (2054:60): [True: 18, False: 0]
  ------------------
 2055|     18|        auto arg = args.get(0);
 2056|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|     18|    }
 2058|       |
 2059|   336k|    auto handler = format_handler<true, CharT>{
 2060|   336k|        ranges::subrange<const CharT*>{source.data(),
 2061|   336k|                                       source.data() + source.size()},
 2062|   336k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   336k|    static_cast<    \
  |  |  929|   336k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   336k|    static_cast<    \
  |  |  929|   336k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   336k|    return vscan_parse_format_string(format, handler);
 2064|   336k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|     18|{
 1638|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|     18|    auto reader =
 1644|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|     18|            ranges::subrange<const CharT*>{source.data(),
 1646|     18|                                           source.data() + source.size()},
 1647|     18|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|     18|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     10|    }                                                  \
  |  |  |  | 3671|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|      8|    return ranges::distance(source.data(), it);
 1650|     18|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   672k|{
 2053|   672k|    const auto argcount = args.size();
 2054|   672k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 18, False: 672k]
  |  Branch (2054:60): [True: 18, False: 0]
  ------------------
 2055|     18|        auto arg = args.get(0);
 2056|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|     18|    }
 2058|       |
 2059|   672k|    auto handler = format_handler<true, CharT>{
 2060|   672k|        ranges::subrange<const CharT*>{source.data(),
 2061|   672k|                                       source.data() + source.size()},
 2062|   672k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   672k|    static_cast<    \
  |  |  929|   672k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   672k|    static_cast<    \
  |  |  929|   672k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   672k|    return vscan_parse_format_string(format, handler);
 2064|   672k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   672k|{
 1625|   672k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 658k, False: 13.6k]
  ------------------
 1626|   658k|        return false;
 1627|   658k|    }
 1628|  13.6k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 126, False: 13.5k]
  |  Branch (1628:39): [True: 18, False: 108]
  ------------------
 1629|   672k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|     18|{
 1638|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|     18|    auto reader =
 1644|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|     18|            ranges::subrange<const CharT*>{source.data(),
 1646|     18|                                           source.data() + source.size()},
 1647|     18|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|     18|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     10|    }                                                  \
  |  |  |  | 3671|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|      8|    return ranges::distance(source.data(), it);
 1650|     18|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1902|   672k|    {
 1903|   672k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1852|   672k|    {
 1853|   672k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   672k|{
 2038|   672k|    const auto beg = handler.get_ctx().begin();
 2039|   672k|    detail::parse_format_string<false>(format, handler);
 2040|   672k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   672k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 670k, False: 1.41k]
  |  |  ------------------
  ------------------
 2041|   670k|        return unexpected(handler.error);
 2042|   670k|    }
 2043|  1.41k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   672k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2021|  4.13G|    {
 2022|  4.13G|        return ctx.get();
 2023|  4.13G|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|  4.13G|    {
 1857|  4.13G|        return contiguous_ctx;
 1858|  4.13G|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|   721k|    {
 1907|  1.37G|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 1.37G, False: 468k]
  ------------------
 1908|  1.37G|            auto it = get_ctx().begin();
 1909|  1.37G|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 606, False: 1.37G]
  ------------------
 1910|    606|                SCN_UNLIKELY_ATTR
 1911|    606|                return on_error("Unexpected end of source");
 1912|    606|            }
 1913|       |
 1914|  1.37G|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|  1.37G|                    detail::make_string_view_from_pointers(begin, end));
 1916|  1.37G|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 251k, False: 1.37G]
  ------------------
 1917|   251k|                SCN_UNLIKELY_ATTR
 1918|   251k|                return on_error("Invalid encoding in format string");
 1919|   251k|            }
 1920|  1.37G|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 43.1k, False: 1.37G]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|  43.1k|                get_ctx().advance_to(
 1923|  43.1k|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|  43.1k|                auto begin_it = impl::read_while_classic_space(
 1926|  43.1k|                    detail::make_string_view_from_pointers(
 1927|  43.1k|                        detail::to_address(after_space_it),
 1928|  43.1k|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|  43.1k|                begin = detail::to_address(begin_it) - 1;
 1931|  43.1k|                continue;
 1932|  43.1k|            }
 1933|       |
 1934|  1.37G|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 1.41k, False: 1.37G]
  ------------------
 1935|  1.41k|                SCN_UNLIKELY_ATTR
 1936|  1.41k|                return on_error("Unexpected literal character in source");
 1937|  1.41k|            }
 1938|  1.37G|            get_ctx().advance_to(ranges::next(it));
 1939|  1.37G|        }
 1940|   721k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE20on_replacement_fieldEmPKw:
 1971|  6.49k|    {
 1972|  6.49k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1973|  6.49k|        set_arg_as_visited(arg_id);
 1974|       |
 1975|  6.49k|        on_visit_scan_arg(
 1976|  6.49k|            impl::default_arg_reader<context_type>{
 1977|  6.49k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 1978|  6.49k|            arg);
 1979|  6.49k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   129k|{
 1681|   129k|    auto arg = ctx.arg(id);
 1682|   129k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   129k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.74k, False: 127k]
  |  |  ------------------
  ------------------
 1683|  1.74k|        handler.on_error("Failed to find argument with ID");
 1684|  1.74k|    }
 1685|   129k|    return arg;
 1686|   129k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl18default_arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|  6.49k|    {
 1956|  6.49k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 174, False: 6.31k]
  |  Branch (1956:23): [True: 0, False: 6.31k]
  ------------------
 1957|    174|            SCN_UNLIKELY_ATTR
 1958|    174|            return;
 1959|    174|        }
 1960|       |
 1961|  6.31k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  6.31k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  6.31k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  6.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.46k, False: 1.85k]
  |  |  ------------------
  ------------------
 1963|  4.46k|            on_error(r.error());
 1964|  4.46k|        }
 1965|  1.85k|        else {
 1966|  1.85k|            get_ctx().advance_to(*r);
 1967|  1.85k|        }
 1968|  6.31k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1943|   129k|    {
 1944|   129k|        return parse_ctx.next_arg_id();
 1945|   129k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEm:
 1947|    370|    {
 1948|    370|        parse_ctx.check_arg_id(id);
 1949|    370|        return id;
 1950|    370|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1984|   122k|    {
 1985|   122k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   122k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   122k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 122k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   122k|        auto specs = detail::format_specs{};
 1998|   122k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   122k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   122k|            arg.type()};
 2001|       |
 2002|   122k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   122k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 2.91k, False: 120k]
  |  Branch (2003:29): [True: 1.00k, False: 119k]
  ------------------
 2004|  3.91k|            SCN_UNLIKELY_ATTR
 2005|  3.91k|            on_error("Missing '}' in format string");
 2006|  3.91k|            return parse_ctx.begin();
 2007|  3.91k|        }
 2008|   119k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   119k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 610, False: 118k]
  |  |  ------------------
  ------------------
 2009|    610|            return parse_ctx.begin();
 2010|    610|        }
 2011|   118k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   118k|        on_visit_scan_arg(
 2014|   118k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   118k|                                           get_ctx().locale()},
 2016|   118k|            arg);
 2017|   118k|        return parse_ctx.begin();
 2018|   119k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1700|   122k|    {
 1701|   122k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|   118k|    {
 1956|   118k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 454, False: 117k]
  |  Branch (1956:23): [True: 0, False: 117k]
  ------------------
 1957|    454|            SCN_UNLIKELY_ATTR
 1958|    454|            return;
 1959|    454|        }
 1960|       |
 1961|   117k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   117k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   117k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 114k, False: 3.71k]
  |  |  ------------------
  ------------------
 1963|   114k|            on_error(r.error());
 1964|   114k|        }
 1965|  3.71k|        else {
 1966|  3.71k|            get_ctx().advance_to(*r);
 1967|  3.71k|        }
 1968|   117k|    }

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1362|  18.6k|{
 1363|  18.6k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1364|       |
 1365|  18.6k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1365:19): [Folded - Ignored]
  ------------------
 1366|  18.6k|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1366:23): [Folded - Ignored]
  ------------------
 1367|  18.6k|            std::u32string tmp;
 1368|  18.6k|            transcode_to_string_impl_to32(src, tmp);
 1369|  18.6k|            return transcode_to_string_impl_32to16<false>(
 1370|  18.6k|                std::u32string_view{tmp}, dest);
 1371|  18.6k|        }
 1372|  18.6k|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1372:28): [Folded - Ignored]
  ------------------
 1373|  18.6k|            return transcode_to_string_impl_to32(src, dest);
 1374|  18.6k|        }
 1375|  18.6k|    }
 1376|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1377|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1378|      0|            std::u32string tmp;
 1379|      0|            transcode_to_string_impl_to32(src, tmp);
 1380|      0|            return transcode_to_string_impl_32to8<false>(
 1381|      0|                std::u32string_view{tmp}, dest);
 1382|      0|        }
 1383|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1384|      0|            return trasncode_to_string_impl_to32(src, dest);
 1385|      0|        }
 1386|      0|    }
 1387|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1388|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1389|      0|            return transcode_to_string_impl_32to8<false>(src, dest);
 1390|      0|        }
 1391|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1392|      0|            return transcode_to_string_impl_32to16<false>(src, dest);
 1393|      0|        }
 1394|      0|    }
 1395|       |
 1396|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1397|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1398|      0|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1255|  18.6k|{
 1256|  18.6k|    static_assert(sizeof(DestCharT) == 4);
 1257|       |
 1258|  18.6k|    auto it = src.begin();
 1259|  6.36M|    while (it != src.end()) {
  ------------------
  |  Branch (1259:12): [True: 6.35M, False: 18.6k]
  ------------------
 1260|  6.35M|        auto res = get_next_code_point(
 1261|  6.35M|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1262|  6.35M|                                                                 src.end()));
 1263|  6.35M|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|  6.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 176k, False: 6.17M]
  |  |  ------------------
  ------------------
 1264|   176k|            dest.push_back(DestCharT{0xfffd});
 1265|   176k|        }
 1266|  6.17M|        else {
 1267|  6.17M|            dest.push_back(res.value);
 1268|  6.17M|        }
 1269|  6.35M|        it = detail::make_string_view_iterator(src, res.iterator);
 1270|  6.35M|    }
 1271|  18.6k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|  6.75M|{
 1169|  6.75M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|  6.75M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.75M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|  6.75M|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|  6.75M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  6.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 125k, False: 6.62M]
  |  |  ------------------
  ------------------
 1173|   125k|        return {get_start_for_next_code_point(input),
 1174|   125k|                detail::invalid_code_point};
 1175|   125k|    }
 1176|  6.62M|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|  6.62M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.53k, False: 6.62M]
  |  |  ------------------
  ------------------
 1177|  1.53k|        return {input.end(), detail::invalid_code_point};
 1178|  1.53k|    }
 1179|       |
 1180|  6.62M|    return {input.begin() + len,
 1181|  6.62M|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|  6.62M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|   125k|{
 1155|   125k|    auto it = input.begin();
 1156|   640k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 638k, False: 2.05k]
  ------------------
 1157|   638k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 123k, False: 515k]
  ------------------
 1158|   123k|            break;
 1159|   123k|        }
 1160|   638k|    }
 1161|   125k|    return it;
 1162|   125k|}
_ZN3scn2v34impl11parse_errorC2ENS2_4codeE:
  808|  66.3k|    {
  809|  66.3k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  66.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  66.3k|    }
_ZN3scn2v34impleqENS1_11parse_errorES2_:
  822|  25.0k|    {
  823|  25.0k|        return a.m_code == b.m_code;
  824|  25.0k|    }
_ZN3scn2v34impl20reader_error_handler8on_errorEPKc:
 2930|   197k|    {
 2931|   197k|        SCN_UNLIKELY_ATTR
 2932|   197k|        m_msg = msg;
 2933|   197k|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2935|   309k|    {
 2936|   309k|        return m_msg == nullptr;
 2937|   309k|    }
_ZN3scn2v34impl17float_reader_baseC2Ej:
 3644|  1.65k|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl22nonascii_specs_handler17on_charset_singleEDi:
 4989|  2.54M|    {
 4990|  2.54M|        on_charset_range(cp, cp + 1);
 4991|  2.54M|    }
_ZN3scn2v34impl22nonascii_specs_handler16on_charset_rangeEDiDi:
 4994|  2.55M|    {
 4995|  2.55M|        if (end <= 127) {
  ------------------
  |  Branch (4995:13): [True: 1.57M, False: 982k]
  ------------------
 4996|  1.57M|            return;
 4997|  1.57M|        }
 4998|       |
 4999|   246M|        for (auto& elem : extra_ranges) {
  ------------------
  |  Branch (4999:25): [True: 246M, False: 972k]
  ------------------
 5000|       |            // TODO: check for overlap
 5001|   246M|            if (elem.first == end) {
  ------------------
  |  Branch (5001:17): [True: 1.02k, False: 246M]
  ------------------
 5002|  1.02k|                elem.first = begin;
 5003|  1.02k|                return;
 5004|  1.02k|            }
 5005|       |
 5006|   246M|            if (elem.second == begin) {
  ------------------
  |  Branch (5006:17): [True: 9.43k, False: 246M]
  ------------------
 5007|  9.43k|                elem.second = end;
 5008|  9.43k|                return;
 5009|  9.43k|            }
 5010|   246M|        }
 5011|       |
 5012|   972k|        extra_ranges.push_back(std::make_pair(begin, end));
 5013|   972k|    }
_ZNK3scn2v34impl22nonascii_specs_handler19on_charset_invertedEv:
 5016|    960|    {
 5017|       |        // no-op
 5018|    960|    }
_ZNK3scn2v34impl22nonascii_specs_handlercvbEv:
 5031|  2.57M|    {
 5032|  2.57M|        return static_cast<bool>(err);
 5033|  2.57M|    }
_ZN3scn2v34impl16bool_reader_baseC2Ej:
 5349|  1.96k|    constexpr bool_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|   127k|{
  458|   127k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|   127k|        static_cast<unsigned char>(ch))];
  460|   127k|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|  1.96M|{
  469|  1.96M|    return static_cast<unsigned char>(ch) <= 127;
  470|  1.96M|}
_ZN3scn2v34impl13is_ascii_charEw:
  473|  4.36k|{
  474|  4.36k|#if WCHAR_MIN < 0
  475|  4.36k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (475:12): [True: 4.29k, False: 66]
  |  Branch (475:23): [True: 4.27k, False: 18]
  ------------------
  476|       |#else
  477|       |    return ch <= 127;
  478|       |#endif
  479|  4.36k|}
_ZN3scn2v34impl13is_ascii_charEDi:
  482|  2.15M|{
  483|  2.15M|    return cp <= 127;
  484|  2.15M|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  76.5k|{
  539|  76.5k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  76.5k|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  64.2k|{
  784|  64.2k|    return e != eof_error::good;
  785|  64.2k|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|    134|{
  798|    134|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|    134|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    134|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|    134|    return scan_error{scan_error::end_of_range, "EOF"};
  800|    134|}
_ZN3scn2v34impl20make_eof_parse_errorENS1_9eof_errorE:
  844|    788|{
  845|    788|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|    788|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    788|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|    788|    return parse_error::eof;
  847|    788|}
_ZN3scn2v34impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  6.37k|{
  854|  6.37k|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 6.37k]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  6.37k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 90, False: 6.28k]
  ------------------
  859|     90|        return scan_error{scan_error::end_of_range, "EOF"};
  860|     90|    }
  861|       |
  862|  6.28k|    return scan_error{code, msg};
  863|  6.37k|}
_ZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  6.37k|{
  868|  6.37k|    return [code, msg](parse_error err) {
  869|  6.37k|        return make_scan_error_from_parse_error(err, code, msg);
  870|  6.37k|    };
  871|  6.37k|}
_ZN3scn2v34impl11is_cp_spaceEDi:
 1199|  1.37G|{
 1200|       |    // Pattern_White_Space property
 1201|  1.37G|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (1201:13): [True: 2.03M, False: 1.37G]
  |  Branch (1201:27): [True: 88.5k, False: 1.94M]
  ------------------
 1202|  1.37G|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (1202:12): [True: 9.25k, False: 1.37G]
  ------------------
 1203|  1.37G|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (1203:12): [True: 20.1k, False: 1.37G]
  ------------------
 1204|  1.37G|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (1204:12): [True: 2.22k, False: 1.37G]
  ------------------
 1205|  1.37G|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (1205:12): [True: 17.1k, False: 1.37G]
  ------------------
 1206|  1.37G|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (1206:12): [True: 2.68k, False: 1.37G]
  ------------------
 1207|  1.37G|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (1207:12): [True: 260, False: 1.37G]
  ------------------
 1208|  1.37G|}
_ZN3scn2v34impl17fast_streq_nocaseEPKcS3_m:
 2219|  4.37k|{
 2220|  4.37k|    unsigned char running_diff{0};
 2221|  15.2k|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2221:24): [True: 10.8k, False: 4.37k]
  ------------------
 2222|  10.8k|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2223|  10.8k|    }
 2224|  4.37k|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2224:12): [True: 0, False: 4.37k]
  |  Branch (2224:33): [True: 0, False: 4.37k]
  ------------------
 2225|  4.37k|}
_ZN3scn2v34impl32calculate_text_width_for_fmt_v10EDi:
 2302|   485k|{
 2303|   485k|    if (cp >= 0x1100 &&
  ------------------
  |  Branch (2303:9): [True: 44.2k, False: 441k]
  ------------------
 2304|   485k|        (cp <= 0x115f ||  // Hangul Jamo init. consonants
  ------------------
  |  Branch (2304:10): [True: 486, False: 43.7k]
  ------------------
 2305|  44.2k|         cp == 0x2329 ||  // LEFT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2305:10): [True: 72, False: 43.6k]
  ------------------
 2306|  44.2k|         cp == 0x232a ||  // RIGHT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2306:10): [True: 144, False: 43.5k]
  ------------------
 2307|       |         // CJK ... Yi except IDEOGRAPHIC HALF FILL SPACE:
 2308|  44.2k|         (cp >= 0x2e80 && cp <= 0xa4cf && cp != 0x303f) ||
  ------------------
  |  Branch (2308:11): [True: 34.6k, False: 8.92k]
  |  Branch (2308:27): [True: 5.93k, False: 28.6k]
  |  Branch (2308:43): [True: 5.79k, False: 144]
  ------------------
 2309|  44.2k|         (cp >= 0xac00 && cp <= 0xd7a3) ||    // Hangul Syllables
  ------------------
  |  Branch (2309:11): [True: 28.6k, False: 9.06k]
  |  Branch (2309:27): [True: 406, False: 28.2k]
  ------------------
 2310|  44.2k|         (cp >= 0xf900 && cp <= 0xfaff) ||    // CJK Compatibility Ideographs
  ------------------
  |  Branch (2310:11): [True: 28.1k, False: 9.14k]
  |  Branch (2310:27): [True: 276, False: 27.9k]
  ------------------
 2311|  44.2k|         (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms
  ------------------
  |  Branch (2311:11): [True: 27.9k, False: 9.14k]
  |  Branch (2311:27): [True: 90, False: 27.8k]
  ------------------
 2312|  44.2k|         (cp >= 0xfe30 && cp <= 0xfe6f) ||    // CJK Compatibility Forms
  ------------------
  |  Branch (2312:11): [True: 27.8k, False: 9.14k]
  |  Branch (2312:27): [True: 344, False: 27.4k]
  ------------------
 2313|  44.2k|         (cp >= 0xff00 && cp <= 0xff60) ||    // Fullwidth Forms
  ------------------
  |  Branch (2313:11): [True: 27.4k, False: 9.14k]
  |  Branch (2313:27): [True: 108, False: 27.3k]
  ------------------
 2314|  44.2k|         (cp >= 0xffe0 && cp <= 0xffe6) ||    // Fullwidth Forms
  ------------------
  |  Branch (2314:11): [True: 27.3k, False: 9.14k]
  |  Branch (2314:27): [True: 78, False: 27.2k]
  ------------------
 2315|  44.2k|         (cp >= 0x20000 && cp <= 0x2fffd) ||  // CJK
  ------------------
  |  Branch (2315:11): [True: 26.6k, False: 9.74k]
  |  Branch (2315:28): [True: 84, False: 26.6k]
  ------------------
 2316|  44.2k|         (cp >= 0x30000 && cp <= 0x3fffd) ||
  ------------------
  |  Branch (2316:11): [True: 26.6k, False: 9.74k]
  |  Branch (2316:28): [True: 2.01k, False: 24.5k]
  ------------------
 2317|       |         // Miscellaneous Symbols and Pictographs + Emoticons:
 2318|  44.2k|         (cp >= 0x1f300 && cp <= 0x1f64f) ||
  ------------------
  |  Branch (2318:11): [True: 24.8k, False: 9.51k]
  |  Branch (2318:28): [True: 126, False: 24.7k]
  ------------------
 2319|       |         // Supplemental Symbols and Pictographs:
 2320|  44.2k|         (cp >= 0x1f900 && cp <= 0x1f9ff))) {
  ------------------
  |  Branch (2320:11): [True: 24.7k, False: 9.51k]
  |  Branch (2320:28): [True: 108, False: 24.5k]
  ------------------
 2321|  10.1k|        return 2;
 2322|  10.1k|    }
 2323|   475k|    return 1;
 2324|   485k|}
_ZN3scn2v34impl26calculate_valid_text_widthEDi:
 2327|   315k|{
 2328|   315k|    return calculate_text_width_for_fmt_v10(cp);
 2329|   315k|}
_ZN3scn2v34impl20calculate_text_widthEDi:
 2342|    244|{
 2343|    244|    return calculate_text_width_for_fmt_v10(cp);
 2344|    244|}
_ZN3scn2v34impl11char_to_intEc:
 3122|  21.5k|{
 3123|  21.5k|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3124|  21.5k|}
_ZN3scn2v34impl11char_to_intEw:
 3126|  10.2k|{
 3127|  10.2k|#if WCHAR_MIN < 0
 3128|  10.2k|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3128:9): [True: 10.2k, False: 0]
  |  Branch (3128:20): [True: 10.2k, False: 0]
  ------------------
 3129|       |#else
 3130|       |    if (ch <= 255) {
 3131|       |#endif
 3132|  10.2k|        return char_to_int(static_cast<char>(ch));
 3133|  10.2k|    }
 3134|      0|    return 255;
 3135|  10.2k|}
_ZN3scn2v34impl16make_regex_flagsENS0_6detail11regex_flagsE:
 4270|  82.7k|{
 4271|  82.7k|    std::regex_constants::syntax_option_type result{};
 4272|  82.7k|    if ((flags & detail::regex_flags::multiline) != detail::regex_flags::none) {
  ------------------
  |  Branch (4272:9): [True: 2.35k, False: 80.3k]
  ------------------
 4273|  2.35k|#if SCN_HAS_STD_REGEX_MULTILINE
 4274|  2.35k|        result |= std::regex_constants::multiline;
 4275|       |#else
 4276|       |        return unexpected_scan_error(
 4277|       |            scan_error::invalid_format_string,
 4278|       |            "/m flag for regex isn't supported by regex backend");
 4279|       |#endif
 4280|  2.35k|    }
 4281|  82.7k|    if ((flags & detail::regex_flags::singleline) !=
  ------------------
  |  Branch (4281:9): [True: 0, False: 82.7k]
  ------------------
 4282|  82.7k|        detail::regex_flags::none) {
 4283|      0|        return unexpected_scan_error(
 4284|      0|            scan_error::invalid_format_string,
 4285|      0|            "/s flag for regex isn't supported by regex backend");
 4286|      0|    }
 4287|  82.7k|    if ((flags & detail::regex_flags::nocase) != detail::regex_flags::none) {
  ------------------
  |  Branch (4287:9): [True: 15.5k, False: 67.2k]
  ------------------
 4288|  15.5k|        result |= std::regex_constants::icase;
 4289|  15.5k|    }
 4290|  82.7k|    if ((flags & detail::regex_flags::nocapture) != detail::regex_flags::none) {
  ------------------
  |  Branch (4290:9): [True: 36, False: 82.6k]
  ------------------
 4291|     36|        result |= std::regex_constants::nosubs;
 4292|     36|    }
 4293|  82.7k|    return result;
 4294|  82.7k|}
_ZN3scn2v34impl27get_unescaped_regex_patternENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4637|  6.96k|{
 4638|  6.96k|    std::string result{pattern};
 4639|  63.7k|    for (size_t n = 0; (n = result.find("\\/", n)) != std::string::npos;) {
  ------------------
  |  Branch (4639:24): [True: 56.7k, False: 6.96k]
  ------------------
 4640|  56.7k|        result.replace(n, 2, "/");
 4641|  56.7k|        ++n;
 4642|  56.7k|    }
 4643|  6.96k|    return result;
 4644|  6.96k|}
_ZN3scn2v34impl27get_unescaped_regex_patternENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEE:
 4646|    696|{
 4647|    696|    std::wstring result{pattern};
 4648|  3.56k|    for (size_t n = 0; (n = result.find(L"\\/", n)) != std::wstring::npos;) {
  ------------------
  |  Branch (4648:24): [True: 2.86k, False: 696]
  ------------------
 4649|  2.86k|        result.replace(n, 2, L"/");
 4650|  2.86k|        ++n;
 4651|  2.86k|    }
 4652|    696|    return result;
 4653|    696|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6007|  19.1k|{
 6008|  19.1k|    if (specs.width != 0) {
  ------------------
  |  Branch (6008:9): [True: 3.99k, False: 15.1k]
  ------------------
 6009|  3.99k|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6009:13): [True: 2.49k, False: 1.49k]
  ------------------
 6010|  2.49k|            return {scan_error::invalid_scanned_value,
 6011|  2.49k|                    "Scanned value too narrow, width did not exceed what "
 6012|  2.49k|                    "was specified in the format string"};
 6013|  2.49k|        }
 6014|  3.99k|    }
 6015|  16.6k|    if (specs.precision != 0) {
  ------------------
  |  Branch (6015:9): [True: 3.55k, False: 13.0k]
  ------------------
 6016|  3.55k|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6016:13): [True: 126, False: 3.43k]
  ------------------
 6017|    126|            return {scan_error::invalid_scanned_value,
 6018|    126|                    "Scanned value too wide, width exceeded the specified "
 6019|    126|                    "precision"};
 6020|    126|        }
 6021|  3.55k|    }
 6022|  16.4k|    return {};
 6023|  16.6k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|   113k|    {
  304|   113k|        ranges::advance(x, n);
  305|   113k|        return x;
  306|   113k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|   113k|    {
  268|   113k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   113k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   340k|    {
  151|   340k|        i += n;
  152|   340k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   175k|    {
  108|   175k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   175k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   175k|    {
   87|   175k|        return s - i;
   88|   175k|    }
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  11.2k|    {
  304|  11.2k|        ranges::advance(x, n);
  305|  11.2k|        return x;
  306|  11.2k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  11.2k|    {
  268|  11.2k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  11.2k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  11.2k|    {
  151|  11.2k|        i += n;
  152|  11.2k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  9.56k|    {
  108|  9.56k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  9.56k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  9.56k|    {
   87|  9.56k|        return s - i;
   88|  9.56k|    }
_ZN3scn2v34impl16char_reader_baseIcE11check_specsERKNS0_6detail12format_specsE:
 5623|  21.2k|    {
 5624|  21.2k|        reader_error_handler eh{};
 5625|  21.2k|        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
  ------------------
  |  Branch (5625:23): [Folded - Ignored]
  ------------------
 5626|  21.2k|            detail::check_code_point_type_specs(specs, eh);
 5627|  21.2k|        }
 5628|  21.2k|        else {
 5629|  21.2k|            detail::check_char_type_specs(specs, eh);
 5630|  21.2k|        }
 5631|  21.2k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  21.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.3k, False: 830]
  |  |  ------------------
  ------------------
 5632|  20.3k|            return {scan_error::invalid_format_string, eh.m_msg};
 5633|  20.3k|        }
 5634|    830|        return {};
 5635|  21.2k|    }
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  61.1k|    {
  763|  61.1k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  61.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  61.1k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  12.2k|    {
  754|  12.2k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  743|  19.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  19.2k|              cvref<T> obj = *get<T>(fn);
  745|  19.2k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  19.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  19.2k|              }
  748|  19.2k|              else {
  749|  19.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  19.2k|              }
  751|  19.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  19.2k|    {
  684|  19.2k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  19.2k|            return static_cast<T*>(s.m_cp);
  686|  19.2k|        }
  687|  19.2k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  19.2k|            return static_cast<T*>(s.m_p);
  689|  19.2k|        }
  690|  19.2k|        else {
  691|  19.2k|            return reinterpret_cast<T*>(s.m_fp);
  692|  19.2k|        }
  693|  19.2k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  661|  12.2k|        {
  662|  12.2k|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|  4.67M|    {
  763|  4.67M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  4.67M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  4.67M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|   113k|    {
  754|   113k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  743|  2.26M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.26M|              cvref<T> obj = *get<T>(fn);
  745|  2.26M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  2.26M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.26M|              }
  748|  2.26M|              else {
  749|  2.26M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.26M|              }
  751|  2.26M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  2.26M|    {
  684|  2.26M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  2.26M|            return static_cast<T*>(s.m_cp);
  686|  2.26M|        }
  687|  2.26M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  2.26M|            return static_cast<T*>(s.m_p);
  689|  2.26M|        }
  690|  2.26M|        else {
  691|  2.26M|            return reinterpret_cast<T*>(s.m_fp);
  692|  2.26M|        }
  693|  2.26M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  661|   113k|        {
  662|   113k|        }
_ZNK3scn2v34impl16char_reader_baseIcE19skip_ws_before_readEv:
 5618|  2.34k|    {
 5619|  2.34k|        return false;
 5620|  2.34k|    }
_ZZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  6.37k|    return [code, msg](parse_error err) {
  869|  6.37k|        return make_scan_error_from_parse_error(err, code, msg);
  870|  6.37k|    };
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1779|    204|    {
 1780|    204|        auto stdloc = loc.get<std::locale>();
 1781|    204|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|    204|        grouping = numpunct.grouping();
 1783|    204|        thousands_sep =
 1784|    204|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 204]
  ------------------
 1785|    204|        decimal_point = numpunct.decimal_point();
 1786|    204|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1716|    222|{
 1717|    222|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 222, False: 0]
  ------------------
 1718|    222|        return std::use_facet<Facet>(stdloc);
 1719|    222|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|    222|}
_ZN3scn2v34impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2348|  77.3k|{
 2349|  77.3k|    size_t count{0};
 2350|  77.3k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  77.3k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  77.3k|    });
 2353|  77.3k|    return count;
 2354|  77.3k|}
_ZN3scn2v34impl19for_each_code_pointIcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1445|  77.3k|{
 1446|       |    // TODO: Could be optimized by being eager
 1447|  77.3k|    auto it = input.begin();
 1448|   239k|    while (it != input.end()) {
  ------------------
  |  Branch (1448:12): [True: 161k, False: 77.3k]
  ------------------
 1449|   161k|        auto res = get_next_code_point(
 1450|   161k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1451|   161k|        cb(res.value);
 1452|   161k|        it = detail::make_string_view_iterator(input, res.iterator);
 1453|   161k|    }
 1454|  77.3k|}
_ZNK3scn2v34impl12function_refIFvDiES3_EclEDi:
  762|   169k|    {
  763|   169k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   169k|    }
_ZN3scn2v34impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_:
  753|  77.3k|    {
  754|  77.3k|    }
_ZZN3scn2v34impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESI_Di:
  743|   161k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   161k|              cvref<T> obj = *get<T>(fn);
  745|   161k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   161k|                  obj(static_cast<decltype(args)>(args)...);
  747|   161k|              }
  748|   161k|              else {
  749|   161k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   161k|              }
  751|   161k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|   161k|    {
  684|   161k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   161k|            return static_cast<T*>(s.m_cp);
  686|   161k|        }
  687|   161k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   161k|            return static_cast<T*>(s.m_p);
  689|   161k|        }
  690|   161k|        else {
  691|   161k|            return reinterpret_cast<T*>(s.m_fp);
  692|   161k|        }
  693|   161k|    }
_ZZN3scn2v34impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2350|   161k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|   161k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|   161k|    });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_LPv0EEEPS9_:
  661|  77.3k|        {
  662|  77.3k|        }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1581|  6.72k|    {
 1582|  6.72k|        return m_view;
 1583|  6.72k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1571|  7.08k|    ~contiguous_range_factory() = default;
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E14multibyte_leftEv:
 2420|  3.47k|    {
 2421|  3.47k|        return m_multibyte_left;
 2422|  3.47k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
 2425|   869k|    {
 2426|   869k|        return *m_current;
 2427|   869k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EppEv:
 2434|   700k|    {
 2435|   700k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|   700k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   700k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2436|   700k|        _increment_current();
 2437|   700k|        return *this;
 2438|   700k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E18_increment_currentEv:
 2667|   700k|    {
 2668|   700k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2668:13): [True: 317k, False: 382k]
  ------------------
 2669|   317k|            auto cplen = _get_cp_length_at_current();
 2670|   317k|            m_multibyte_left = cplen - 1;
 2671|   317k|            m_count -= _get_width_at_current_cp_start(cplen);
 2672|   317k|        }
 2673|   382k|        else {
 2674|   382k|            --m_multibyte_left;
 2675|   382k|        }
 2676|       |
 2677|   700k|        ++m_current;
 2678|   700k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E25_get_cp_length_at_currentEv:
 2638|   317k|    {
 2639|   317k|        return static_cast<difference_type>(
 2640|   317k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2641|   317k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E30_get_width_at_current_cp_startEl:
 2644|   317k|    {
 2645|   317k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|   317k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.34k, False: 315k]
  |  |  ------------------
  ------------------
 2646|  2.34k|            return 0;
 2647|  2.34k|        }
 2648|       |
 2649|   315k|        if (cplen == 1) {
  ------------------
  |  Branch (2649:13): [True: 241k, False: 73.9k]
  ------------------
 2650|   241k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|   241k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   241k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2651|   241k|            auto cp = static_cast<char32_t>(*m_current);
 2652|   241k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2653|   241k|        }
 2654|       |
 2655|  73.9k|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2656|  73.9k|                                           cplen);
 2657|  73.9k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  73.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 904, False: 73.0k]
  |  |  ------------------
  ------------------
 2658|    904|            return 0;
 2659|    904|        }
 2660|       |
 2661|  73.0k|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2662|  73.0k|        return static_cast<difference_type>(
 2663|  73.0k|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2664|  73.9k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|  76.3k|{
 1857|  76.3k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  76.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  76.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  76.3k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  76.3k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  76.3k|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 1.01k, False: 75.3k]
  ------------------
 1862|  1.01k|            return unexpected(eof_error::eof);
 1863|  1.01k|        }
 1864|       |
 1865|  75.3k|        return ranges::next(range.begin(), count);
 1866|  76.3k|    }
 1867|  76.3k|    else {
 1868|  76.3k|        auto it = range.begin();
 1869|  76.3k|        if (guaranteed_minimum_size(range) >= count) {
 1870|  76.3k|            return ranges::next(it, count);
 1871|  76.3k|        }
 1872|       |
 1873|  76.3k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|  76.3k|            if (it == range.end()) {
 1875|  76.3k|                return unexpected(eof_error::eof);
 1876|  76.3k|            }
 1877|  76.3k|        }
 1878|       |
 1879|  76.3k|        return it;
 1880|  76.3k|    }
 1881|  76.3k|}
_ZN3scn2v34impl27counted_width_iterator_implneIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2530|   379k|    {
 2531|   379k|        return !(a == b);
 2532|   379k|    }
_ZN3scn2v34impl27counted_width_iterator_impleqIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2522|   387k|    {
 2523|   387k|        return a.m_current == b.m_current;
 2524|   387k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
 2429|  13.1k|    {
 2430|  13.1k|        return *m_current;
 2431|  13.1k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeE:
  267|  2.81k|    {
  268|  2.81k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  2.81k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISE_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|  2.81k|    {
  161|  2.81k|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|  2.81k|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 0, False: 2.81k]
  ------------------
  164|      0|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 0, False: 0]
  ------------------
  165|      0|                ++i;
  166|      0|            }
  167|      0|        }
  168|  2.81k|        else {
  169|  2.81k|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 2.81k]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|  2.81k|        }
  173|  2.81k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEcE8is_validEv:
 1889|   273k|    {
 1890|   273k|        return !codepoint.empty();
 1891|   273k|    }
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EESB_EEEEDaOT_:
 1682|  3.81k|{
 1683|  3.81k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  3.81k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  3.81k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  3.81k|        return string_view_wrapper{SCN_FWD(range)};
 1687|  3.81k|    }
 1688|  3.81k|    else {
 1689|  3.81k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|  3.81k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1690|  3.81k|    }
 1691|  3.81k|}
_ZN3scn2v34impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EELPv0EEEOT_:
 1536|  3.81k|    {
 1537|  3.81k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  3.81k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1538|  3.81k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEvOT_:
 1620|  3.81k|    {
 1621|  3.81k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  3.81k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  3.81k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  3.81k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  3.81k|            m_storage.reset();
 1627|  3.81k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  3.81k|        }
 1629|  3.81k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  3.81k|                                          std::basic_string<CharT>>) {
 1631|  3.81k|            m_storage.emplace(SCN_FWD(range));
 1632|  3.81k|            m_view = string_view_type{*m_storage};
 1633|  3.81k|        }
 1634|  3.81k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|  3.81k|                                          typename detail::basic_scan_buffer<
 1636|  3.81k|                                              value_t>::forward_iterator> &&
 1637|  3.81k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|  3.81k|            auto beg_seg = range.begin().contiguous_segment();
 1639|  3.81k|            auto end_seg = range.end().contiguous_segment();
 1640|  3.81k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  3.81k|                             detail::to_address(end_seg.end()))) {
 1642|  3.81k|                auto& str = m_storage.emplace();
 1643|  3.81k|                str.reserve(range.end().position() - range.begin().position());
 1644|  3.81k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  3.81k|                m_view = string_view_type{str};
 1646|  3.81k|                return;
 1647|  3.81k|            }
 1648|       |
 1649|  3.81k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  3.81k|                                                            end_seg.data());
 1651|  3.81k|            m_storage.reset();
 1652|  3.81k|        }
 1653|  3.81k|        else {
 1654|  3.81k|            auto& str = m_storage.emplace();
 1655|  3.81k|            if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1655:27): [Folded - Ignored]
  ------------------
 1656|  3.81k|                str.reserve(range.size());
 1657|  3.81k|            }
 1658|  3.81k|            if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1658:27): [Folded - Ignored]
  ------------------
 1659|  3.81k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  3.81k|                          std::back_inserter(str));
 1661|  3.81k|            }
 1662|  3.81k|            else {
 1663|  3.81k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  3.81k|                     ++it) {
 1665|  3.81k|                    str.push_back(*it);
 1666|  3.81k|                }
 1667|  3.81k|            }
 1668|  3.81k|            m_view = string_view_type{str};
 1669|  3.81k|        }
 1670|  3.81k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EC2ES5_S5_l:
 2381|  45.8k|    {
 2382|  45.8k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E4baseEv:
 2412|   736k|    {
 2413|   736k|        return m_current;
 2414|   736k|    }
_ZNK3scn2v34impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2831|  21.4k|    {
 2832|  21.4k|        return take_width_view{r, n};
 2833|  21.4k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2ERKS9_l:
 2800|  21.4k|    {
 2801|  21.4k|    }
_ZN3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEC2ERKS9_:
 2713|  21.4k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl20reader_impl_for_charIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERcNSN_10locale_refE:
 5662|    564|    {
 5663|    564|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5663:13): [True: 530, False: 34]
  ------------------
 5664|    564|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5664:13): [True: 0, False: 34]
  ------------------
 5665|    530|            return read_default(range, value, loc);
 5666|    530|        }
 5667|       |
 5668|     34|        reader_impl_for_int<CharT> reader{};
 5669|     34|        signed char tmp_value{};
 5670|     34|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5671|     34|        value = static_cast<signed char>(value);
 5672|     34|        return ret;
 5673|    564|    }
_ZN3scn2v34impl20reader_impl_for_charIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RcNS0_6detail10locale_refE:
 5644|    530|    {
 5645|    530|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    530|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5646|    530|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5646:23): [Folded - Ignored]
  ------------------
 5647|    530|            return code_unit_reader<char>{}.read(range, value);
 5648|    530|        }
 5649|    530|        else {
 5650|    530|            SCN_UNUSED(range);
 5651|    530|            SCN_EXPECT(false);
 5652|    530|            SCN_UNREACHABLE;
 5653|    530|        }
 5654|    530|    }
_ZN3scn2v34impl16code_unit_readerIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rc:
 5563|    530|    {
 5564|    530|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3672|    530|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    530|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    530|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    530|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 530]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    530|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    530|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5565|    530|        ch = *range.begin();
 5566|    530|        return it;
 5567|    530|    }
_ZN3scn2v34impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1845|  3.85k|{
 1846|  3.85k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.85k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  3.85k|    return ranges::next(range.begin());
 1851|  3.85k|}
_ZN3scn2v34impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_9eof_errorET_:
  949|  3.85k|{
  950|  3.85k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  3.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.85k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  3.85k|    return eof_error::good;
  954|  3.85k|}
_ZN3scn2v34impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  943|  3.85k|{
  944|  3.85k|    return is_range_eof(r.begin(), r.end());
  945|  3.85k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  927|   277k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   277k|    {
  937|   277k|        return begin == end;
  938|   277k|    }
  939|   277k|}
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2769|   720k|        {
 2770|   720k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2770:21): [True: 3.47k, False: 717k]
  |  Branch (2770:39): [True: 1.05k, False: 2.41k]
  ------------------
 2771|   720k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2771:20): [True: 2.61k, False: 716k]
  ------------------
 2772|   720k|        }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE3endEv:
 2815|   540k|    {
 2816|   540k|        return sentinel<true>{m_base.get().end()};
 2817|   540k|    }
_ZNK3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvE3getEv:
 2716|   632k|    {
 2717|   632k|        return view;
 2718|   632k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE8sentinelILb1EEC2ES8_:
 2750|   540k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|  3.88k|    {
  296|  3.88k|        ++x;
  297|  3.88k|        return x;
  298|  3.88k|    }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 2809|  45.8k|    {
 2810|  45.8k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2811|  45.8k|                                      m_count};
 2812|  45.8k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEaEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|     34|    {
 3539|     34|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|     34|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     34|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     34|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|     34|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     34|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|     34|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|     34|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 34]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|     34|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 34]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|     34|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|     34|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 34, False: 0]
  |  |  ------------------
  ------------------
 3565|     34|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|     34|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     34|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     34|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 34, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     34|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     34|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     34|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     34|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     34|    }                                                  \
  |  |  |  | 3671|     34|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3325|  1.66k|{
 3326|  1.66k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3672|  1.66k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.66k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.66k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.66k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.66k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.66k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|  1.66k|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|  1.66k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|  1.66k|        parse_integer_base_prefix(
 3331|  1.66k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|  1.66k|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 1.66k]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it = base_prefix_begin_it;
 3337|      0|        }
 3338|      0|        else {
 3339|      0|            parsed_zero = false;
 3340|      0|        }
 3341|      0|    }
 3342|  1.66k|    else {
 3343|  1.66k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 0, False: 1.66k]
  |  Branch (3343:13): [True: 1.66k, False: 0]
  ------------------
 3344|  1.66k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 1.66k, False: 0]
  ------------------
 3345|  1.66k|            digits_begin_it = base_prefix_begin_it;
 3346|  1.66k|        }
 3347|  1.66k|    }
 3348|       |
 3349|  1.66k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 1.66k, False: 0]
  ------------------
 3350|  1.66k|        sign = sign_type::plus_sign;
 3351|  1.66k|    }
 3352|  1.66k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|  1.66k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|  1.66k|}
_ZN3scn2v34impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3140|  2.21k|{
 3141|  2.21k|    auto r = read_one_of_code_unit(range, "+-");
 3142|  2.21k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 2.21k, False: 0]
  ------------------
 3143|  2.21k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 2.21k, False: 0]
  ------------------
 3144|  2.21k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  2.21k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  2.21k|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2271|  2.21k|{
 2272|  2.21k|    auto it = read_code_unit(range);
 2273|  2.21k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.21k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  4.42k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 4.42k, False: 2.21k]
  ------------------
 2278|  4.42k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 4.42k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  4.42k|    }
 2282|       |
 2283|  2.21k|    return unexpected(parse_error::error);
 2284|  2.21k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3292|  1.66k|{
 3293|  1.66k|    switch (base) {
 3294|     14|        case 2:
  ------------------
  |  Branch (3294:9): [True: 14, False: 1.64k]
  ------------------
 3295|       |            // allow 0b/0B
 3296|     14|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|     14|                    false};
 3298|       |
 3299|     14|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 14, False: 1.64k]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     14|            bool zero_parsed = false;
 3302|     14|            auto it = apply_opt(
 3303|     14|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     14|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|    540|        case 16:
  ------------------
  |  Branch (3307:9): [True: 540, False: 1.12k]
  ------------------
 3308|       |            // allow 0x/0X
 3309|    540|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|    540|                    false};
 3311|       |
 3312|     20|        case 0:
  ------------------
  |  Branch (3312:9): [True: 20, False: 1.64k]
  ------------------
 3313|       |            // detect base
 3314|     20|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|  1.07k|        default:
  ------------------
  |  Branch (3316:9): [True: 1.07k, False: 588]
  ------------------
 3317|       |            // no base prefix allowed
 3318|  1.07k|            return {range.begin(), base, false};
 3319|  1.66k|    }
 3320|  1.66k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2290|    568|{
 2291|    568|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 568, False: 0]
  ------------------
 2292|    568|        return range.begin();
 2293|    568|    }
 2294|      0|    return *result;
 2295|    568|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3243|     34|{
 3244|     34|    return read_matching_string_classic_nocase(range, "0b");
 3245|     34|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2230|  2.26k|{
 2231|  2.26k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  2.26k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  2.26k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  2.26k|        if (range.size() < str.size()) {
 2236|  2.26k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  2.26k|        }
 2238|  2.26k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  2.26k|            return unexpected(parse_error::error);
 2240|  2.26k|        }
 2241|  2.26k|        return ranges::next(range.begin(), str.size());
 2242|  2.26k|    }
 2243|  2.26k|    else {
 2244|  2.26k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  2.26k|            if (ch < 'A' || ch > 'Z') {
 2246|  2.26k|                return ch;
 2247|  2.26k|            }
 2248|  2.26k|            return static_cast<char_type>(ch +
 2249|  2.26k|                                          static_cast<char_type>('a' - 'A'));
 2250|  2.26k|        };
 2251|       |
 2252|  2.26k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  2.26k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.26k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.26k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 198, False: 2.06k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    198|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    198|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    198|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    198|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    198|    }                                                  \
  |  |  |  | 3671|  2.26k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.06k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  2.06k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  2.06k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  2.06k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  2.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.06k, False: 0]
  |  |  ------------------
  ------------------
 2257|  2.06k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  2.06k|                    return ascii_tolower(a) ==
 2259|  2.06k|                           static_cast<detail::char_t<Range>>(b);
 2260|  2.06k|                }))) {
 2261|  2.06k|            return unexpected(parse_error::error);
 2262|  2.06k|        }
 2263|       |
 2264|      0|        return it;
 2265|  2.06k|    }
 2266|  2.26k|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1856|  4.04k|{
 1857|  4.04k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  4.04k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.04k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  4.04k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  4.04k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  4.04k|        if (sz < count) {
 1862|  4.04k|            return unexpected(eof_error::eof);
 1863|  4.04k|        }
 1864|       |
 1865|  4.04k|        return ranges::next(range.begin(), count);
 1866|  4.04k|    }
 1867|  4.04k|    else {
 1868|  4.04k|        auto it = range.begin();
 1869|  4.04k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 4.04k]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  14.3k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 10.4k, False: 3.81k]
  ------------------
 1874|  10.4k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 228, False: 10.2k]
  ------------------
 1875|    228|                return unexpected(eof_error::eof);
 1876|    228|            }
 1877|  10.4k|        }
 1878|       |
 1879|  3.81k|        return it;
 1880|  4.04k|    }
 1881|  4.04k|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1094|  4.04k|{
 1095|  4.04k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|  4.04k|        return r.size();
 1097|  4.04k|    }
 1098|  4.04k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|  4.04k|                           ranges::const_iterator_t<Range>,
 1100|  4.04k|                           typename detail::basic_scan_buffer<
 1101|  4.04k|                               detail::char_t<Range>>::forward_iterator>) {
 1102|  4.04k|        if constexpr (ranges::common_range<Range>) {
 1103|  4.04k|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|  4.04k|        }
 1105|  4.04k|        else {
 1106|  4.04k|            if (r.begin().stores_parent()) {
 1107|  4.04k|                return static_cast<size_t>(
 1108|  4.04k|                    r.begin().parent()->chars_available() -
 1109|  4.04k|                    r.begin().position());
 1110|  4.04k|            }
 1111|  4.04k|            return r.begin().contiguous_segment().size();
 1112|  4.04k|        }
 1113|  4.04k|    }
 1114|  4.04k|    else {
 1115|  4.04k|        return 0;
 1116|  4.04k|    }
 1117|  4.04k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlcE_clEc:
 2244|  2.06k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  2.06k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 46, False: 2.02k]
  |  Branch (2245:29): [True: 2.02k, False: 0]
  ------------------
 2246|  2.06k|                return ch;
 2247|  2.06k|            }
 2248|      0|            return static_cast<char_type>(ch +
 2249|      0|                                          static_cast<char_type>('a' - 'A'));
 2250|  2.06k|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_Rb:
 3257|     34|{
 3258|     34|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 34]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     34|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 34]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     34|    return unexpected(parse_error::error);
 3268|     34|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NDTcl4implISL_EEE4typeE:
 2145|     34|{
 2146|     34|    auto it = read_code_unit(range);
 2147|     34|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|     34|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 0]
  |  |  ------------------
  ------------------
 2152|     34|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|     34|        return unexpected(parse_error::error);
 2154|     34|    }
 2155|       |
 2156|      0|    return *it;
 2157|     34|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 1845|     34|{
 1846|     34|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|     34|    return ranges::next(range.begin());
 1851|     34|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|     34|{
  950|     34|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|     34|    return eof_error::good;
  954|     34|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  943|   273k|{
  944|   273k|    return is_range_eof(r.begin(), r.end());
  945|   273k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3250|    560|{
 3251|    560|    return read_matching_string_classic_nocase(range, "0x");
 3252|    560|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_:
 3273|     20|{
 3274|     20|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 20]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|     20|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 20]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|     20|    {
 3281|     20|        bool zero_parsed{false};
 3282|     20|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 20]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|     20|    }
 3286|     20|    return {range.begin(), 10, false};
 3287|     20|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3359|  1.64k|{
 3360|  1.64k|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|  1.64k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3362:19): [Folded - Ignored]
  ------------------
 3363|  1.64k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3364|  1.64k|            return unexpected_scan_error(
 3365|  1.64k|                scan_error::invalid_scanned_value,
 3366|  1.64k|                "Failed to parse integer: No digits found");
 3367|  1.64k|        }
 3368|  1.64k|        return range.end();
 3369|  1.64k|    }
 3370|  1.64k|    else {
 3371|  1.64k|        return read_while1_code_unit(range,
 3372|  1.64k|                                     [&](char_type ch) noexcept {
 3373|  1.64k|                                         return char_to_int(ch) < base;
 3374|  1.64k|                                     })
 3375|  1.64k|            .transform_error(map_parse_error_to_scan_error(
 3376|  1.64k|                scan_error::invalid_scanned_value,
 3377|  1.64k|                "Failed to parse integer: No digits found"));
 3378|  1.64k|    }
 3379|  1.64k|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 1995|  2.19k|{
 1996|  2.19k|    auto it = read_while_code_unit(range, pred);
 1997|  2.19k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 2.19k, False: 0]
  ------------------
 1998|  2.19k|        return unexpected(parse_error::error);
 1999|  2.19k|    }
 2000|      0|    return it;
 2001|  2.19k|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1975|  2.19k|{
 1976|  2.19k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  2.19k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1956|  2.19k|{
 1957|  2.19k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  2.19k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  2.19k|    }
 1960|  2.19k|    else {
 1961|  2.19k|        auto first = range.begin();
 1962|  2.19k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 2.19k, False: 0]
  ------------------
 1963|  2.19k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 2.19k, False: 0]
  ------------------
 1964|  2.19k|                return first;
 1965|  2.19k|            }
 1966|  2.19k|        }
 1967|      0|        return first;
 1968|  2.19k|    }
 1969|  2.19k|}
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2780|   406k|        {
 2781|   406k|            return !(y == x);
 2782|   406k|        }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_LPv0EEEOSP_:
  753|  1.64k|    {
  754|  1.64k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|  1.64k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.64k|              cvref<T> obj = *get<T>(fn);
  745|  1.64k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.64k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.64k|              }
  748|  1.64k|              else {
  749|  1.64k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.64k|              }
  751|  1.64k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlcE_EEDaNS3_7storageE:
  683|  1.64k|    {
  684|  1.64k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.64k|            return static_cast<T*>(s.m_cp);
  686|  1.64k|        }
  687|  1.64k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.64k|            return static_cast<T*>(s.m_p);
  689|  1.64k|        }
  690|  1.64k|        else {
  691|  1.64k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.64k|        }
  693|  1.64k|    }
_ZZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlcE_clEc:
 3372|  1.64k|                                     [&](char_type ch) noexcept {
 3373|  1.64k|                                         return char_to_int(ch) < base;
 3374|  1.64k|                                     })
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_LPv0EEEPSP_:
  661|  1.64k|        {
  662|  1.64k|        }
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEENSJ_12basic_stringIT0_NSJ_11char_traitsISS_EENSJ_9allocatorISS_EEEENSR_IcNST_IcEENSV_IcEEEEEEEEESM_iRKNS1_35localized_number_formatting_optionsISS_EE:
 3389|     16|{
 3390|     16|    std::basic_string<CharT> output;
 3391|     16|    std::string thsep_indices;
 3392|     16|    auto it = range.begin();
 3393|     16|    bool digit_matched = false;
 3394|     16|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 16, False: 0]
  ------------------
 3395|     16|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 0, False: 16]
  ------------------
 3396|      0|            thsep_indices.push_back(
 3397|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|      0|        }
 3399|     16|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 16, False: 0]
  ------------------
 3400|     16|            break;
 3401|     16|        }
 3402|      0|        else {
 3403|      0|            output.push_back(*it);
 3404|      0|            digit_matched = true;
 3405|      0|        }
 3406|     16|    }
 3407|     16|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16, False: 0]
  |  |  ------------------
  ------------------
 3408|     16|        return unexpected_scan_error(
 3409|     16|            scan_error::invalid_scanned_value,
 3410|     16|            "Failed to parse integer: No digits found");
 3411|     16|    }
 3412|      0|    return std::tuple{it, output, thsep_indices};
 3413|     16|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E5countEv:
 2416|   725k|    {
 2417|   725k|        return m_count;
 2418|   725k|    }
_ZN3scn2v34impl20reader_impl_for_charIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERcNSL_10locale_refE:
 5662|    260|    {
 5663|    260|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5663:13): [True: 238, False: 22]
  ------------------
 5664|    260|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5664:13): [True: 0, False: 22]
  ------------------
 5665|    238|            return read_default(range, value, loc);
 5666|    238|        }
 5667|       |
 5668|     22|        reader_impl_for_int<CharT> reader{};
 5669|     22|        signed char tmp_value{};
 5670|     22|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5671|     22|        value = static_cast<signed char>(value);
 5672|     22|        return ret;
 5673|    260|    }
_ZN3scn2v34impl20reader_impl_for_charIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RcNS0_6detail10locale_refE:
 5644|    984|    {
 5645|    984|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    984|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5646|    984|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5646:23): [Folded - Ignored]
  ------------------
 5647|    984|            return code_unit_reader<char>{}.read(range, value);
 5648|    984|        }
 5649|    984|        else {
 5650|    984|            SCN_UNUSED(range);
 5651|    984|            SCN_EXPECT(false);
 5652|    984|            SCN_UNREACHABLE;
 5653|    984|        }
 5654|    984|    }
_ZN3scn2v34impl16code_unit_readerIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rc:
 5563|    984|    {
 5564|    984|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3672|    984|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    984|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    984|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    984|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 984]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    984|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    984|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5565|    984|        ch = *range.begin();
 5566|    984|        return it;
 5567|    984|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  7.46k|{
 1846|  7.46k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.46k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  7.46k|    return ranges::next(range.begin());
 1851|  7.46k|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|  25.1k|{
  950|  25.1k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  25.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 25.1k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  25.1k|    return eof_error::good;
  954|  25.1k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|  1.95M|{
  944|  1.95M|    return is_range_eof(r.begin(), r.end());
  945|  1.95M|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|  2.05M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  2.05M|    {
  937|  2.05M|        return begin == end;
  938|  2.05M|    }
  939|  2.05M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  87.4k|    {
  296|  87.4k|        ++x;
  297|  87.4k|        return x;
  298|  87.4k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|     22|    {
 3539|     22|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|     22|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|     22|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 22]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|     22|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 22]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|     22|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|     22|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 22, False: 0]
  |  |  ------------------
  ------------------
 3565|     22|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|     22|                    parse_integer_digits_without_thsep(
 3567|     22|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|     22|                        prefix_result.parsed_base));
 3569|       |
 3570|     22|            auto buf = make_contiguous_buffer(
 3571|     22|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|     22|            SCN_TRY(result_it,
  ------------------
  |  | 3672|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 22, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     22|    }                                                  \
  |  |  |  | 3671|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|     22|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3325|  3.13k|{
 3326|  3.13k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3672|  3.13k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.13k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.13k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 3.13k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  3.13k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.13k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|  3.13k|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|  3.13k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|  3.13k|        parse_integer_base_prefix(
 3331|  3.13k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|  3.13k|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 3.13k]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it = base_prefix_begin_it;
 3337|      0|        }
 3338|      0|        else {
 3339|      0|            parsed_zero = false;
 3340|      0|        }
 3341|      0|    }
 3342|  3.13k|    else {
 3343|  3.13k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 0, False: 3.13k]
  ------------------
 3344|  3.13k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 3.13k, False: 0]
  ------------------
 3345|  3.13k|            digits_begin_it = base_prefix_begin_it;
 3346|  3.13k|        }
 3347|  3.13k|    }
 3348|       |
 3349|  3.13k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 3.13k, False: 0]
  ------------------
 3350|  3.13k|        sign = sign_type::plus_sign;
 3351|  3.13k|    }
 3352|  3.13k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|  3.13k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|  3.13k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  4.21k|{
 3141|  4.21k|    auto r = read_one_of_code_unit(range, "+-");
 3142|  4.21k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 4.21k, False: 0]
  ------------------
 3143|  4.21k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 4.21k, False: 0]
  ------------------
 3144|  4.21k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  4.21k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  4.21k|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  4.21k|{
 2272|  4.21k|    auto it = read_code_unit(range);
 2273|  4.21k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  4.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.21k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  8.43k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 8.43k, False: 4.21k]
  ------------------
 2278|  8.43k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 8.43k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  8.43k|    }
 2282|       |
 2283|  4.21k|    return unexpected(parse_error::error);
 2284|  4.21k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3292|  3.13k|{
 3293|  3.13k|    switch (base) {
 3294|      6|        case 2:
  ------------------
  |  Branch (3294:9): [True: 6, False: 3.13k]
  ------------------
 3295|       |            // allow 0b/0B
 3296|      6|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|      6|                    false};
 3298|       |
 3299|    122|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 122, False: 3.01k]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|    122|            bool zero_parsed = false;
 3302|    122|            auto it = apply_opt(
 3303|    122|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|    122|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|  1.00k|        case 16:
  ------------------
  |  Branch (3307:9): [True: 1.00k, False: 2.13k]
  ------------------
 3308|       |            // allow 0x/0X
 3309|  1.00k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|  1.00k|                    false};
 3311|       |
 3312|     12|        case 0:
  ------------------
  |  Branch (3312:9): [True: 12, False: 3.12k]
  ------------------
 3313|       |            // detect base
 3314|     12|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|  1.99k|        default:
  ------------------
  |  Branch (3316:9): [True: 1.99k, False: 1.14k]
  ------------------
 3317|       |            // no base prefix allowed
 3318|  1.99k|            return {range.begin(), base, false};
 3319|  3.13k|    }
 3320|  3.13k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2290|  1.12k|{
 2291|  1.12k|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 1.12k, False: 0]
  ------------------
 2292|  1.12k|        return range.begin();
 2293|  1.12k|    }
 2294|      0|    return *result;
 2295|  1.12k|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3243|     18|{
 3244|     18|    return read_matching_string_classic_nocase(range, "0b");
 3245|     18|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  4.37k|{
 2231|  4.37k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  4.37k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  4.37k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  4.37k|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2235:13): [True: 8, False: 4.37k]
  ------------------
 2236|      8|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|      8|        }
 2238|  4.37k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2238:13): [True: 4.37k, False: 0]
  ------------------
 2239|  4.37k|            return unexpected(parse_error::error);
 2240|  4.37k|        }
 2241|      0|        return ranges::next(range.begin(), str.size());
 2242|  4.37k|    }
 2243|  4.37k|    else {
 2244|  4.37k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  4.37k|            if (ch < 'A' || ch > 'Z') {
 2246|  4.37k|                return ch;
 2247|  4.37k|            }
 2248|  4.37k|            return static_cast<char_type>(ch +
 2249|  4.37k|                                          static_cast<char_type>('a' - 'A'));
 2250|  4.37k|        };
 2251|       |
 2252|  4.37k|        SCN_TRY(it, read_exactly_n_code_units(
 2253|  4.37k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  4.37k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  4.37k|        if (SCN_UNLIKELY(!std::equal(
 2257|  4.37k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  4.37k|                    return ascii_tolower(a) ==
 2259|  4.37k|                           static_cast<detail::char_t<Range>>(b);
 2260|  4.37k|                }))) {
 2261|  4.37k|            return unexpected(parse_error::error);
 2262|  4.37k|        }
 2263|       |
 2264|  4.37k|        return it;
 2265|  4.37k|    }
 2266|  4.37k|}
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3257|    134|{
 3258|    134|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 134]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|    134|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 134]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|    134|    return unexpected(parse_error::error);
 3268|    134|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|  2.26k|{
 2146|  2.26k|    auto it = read_code_unit(range);
 2147|  2.26k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.26k]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|  2.26k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  2.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.26k, False: 0]
  |  |  ------------------
  ------------------
 2152|  2.26k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  2.26k|        return unexpected(parse_error::error);
 2154|  2.26k|    }
 2155|       |
 2156|      0|    return *it;
 2157|  2.26k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3250|  1.01k|{
 3251|  1.01k|    return read_matching_string_classic_nocase(range, "0x");
 3252|  1.01k|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3273|     12|{
 3274|     12|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 12]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|     12|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 12]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|     12|    {
 3281|     12|        bool zero_parsed{false};
 3282|     12|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 12]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|     12|    }
 3286|     12|    return {range.begin(), 10, false};
 3287|     12|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3359|  3.02k|{
 3360|  3.02k|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|  3.02k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3362:19): [Folded - Ignored]
  ------------------
 3363|  3.02k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.02k]
  |  |  ------------------
  ------------------
 3364|      0|            return unexpected_scan_error(
 3365|      0|                scan_error::invalid_scanned_value,
 3366|      0|                "Failed to parse integer: No digits found");
 3367|      0|        }
 3368|  3.02k|        return range.end();
 3369|  3.02k|    }
 3370|  3.02k|    else {
 3371|  3.02k|        return read_while1_code_unit(range,
 3372|  3.02k|                                     [&](char_type ch) noexcept {
 3373|  3.02k|                                         return char_to_int(ch) < base;
 3374|  3.02k|                                     })
 3375|  3.02k|            .transform_error(map_parse_error_to_scan_error(
 3376|  3.02k|                scan_error::invalid_scanned_value,
 3377|  3.02k|                "Failed to parse integer: No digits found"));
 3378|  3.02k|    }
 3379|  3.02k|}
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3389|    116|{
 3390|    116|    std::basic_string<CharT> output;
 3391|    116|    std::string thsep_indices;
 3392|    116|    auto it = range.begin();
 3393|    116|    bool digit_matched = false;
 3394|    116|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 116, False: 0]
  ------------------
 3395|    116|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 0, False: 116]
  ------------------
 3396|      0|            thsep_indices.push_back(
 3397|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|      0|        }
 3399|    116|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 116, False: 0]
  ------------------
 3400|    116|            break;
 3401|    116|        }
 3402|      0|        else {
 3403|      0|            output.push_back(*it);
 3404|      0|            digit_matched = true;
 3405|      0|        }
 3406|    116|    }
 3407|    116|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|    116|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 116, False: 0]
  |  |  ------------------
  ------------------
 3408|    116|        return unexpected_scan_error(
 3409|    116|            scan_error::invalid_scanned_value,
 3410|    116|            "Failed to parse integer: No digits found");
 3411|    116|    }
 3412|      0|    return std::tuple{it, output, thsep_indices};
 3413|    116|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  23.1k|{
 1683|  23.1k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  23.1k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  23.1k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  23.1k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  23.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  23.1k|    }
 1688|  23.1k|    else {
 1689|  23.1k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  23.1k|    }
 1691|  23.1k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|  23.1k|    {
 1490|  23.1k|    }
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1502|  96.7k|    {
 1503|  96.7k|        return sv;
 1504|  96.7k|    }
_ZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 5950|  8.52k|{
 5951|  8.52k|    using char_type = detail::char_t<Range>;
 5952|  8.52k|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5953|       |
 5954|  8.52k|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5954:9): [True: 8.27k, False: 246]
  ------------------
 5955|  8.27k|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5956|  8.27k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5957|       |
 5958|  8.27k|        if (max_width == 0) {
  ------------------
  |  Branch (5958:13): [True: 8.13k, False: 146]
  ------------------
 5959|  8.13k|            auto it = read_while_code_unit(range, pred);
 5960|       |
 5961|  8.13k|            if (want_skipped_width) {
  ------------------
  |  Branch (5961:17): [True: 202, False: 7.93k]
  ------------------
 5962|    202|                auto prefix_width =
 5963|    202|                    static_cast<std::ptrdiff_t>(
 5964|    202|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5965|    202|                    ranges::distance(range.begin(), it);
 5966|    202|                return result_type{it, prefix_width};
 5967|    202|            }
 5968|  7.93k|            return result_type{it, 0};
 5969|  8.13k|        }
 5970|       |
 5971|    146|        auto max_width_view = take_width(range, max_width);
 5972|    146|        auto w_it = read_while_code_unit(max_width_view, pred);
 5973|       |
 5974|    146|        if (want_skipped_width) {
  ------------------
  |  Branch (5974:13): [True: 146, False: 0]
  ------------------
 5975|    146|            return result_type{w_it.base(), max_width - w_it.count()};
 5976|    146|        }
 5977|      0|        return result_type{w_it.base(), 0};
 5978|    146|    }
 5979|       |
 5980|    246|    const auto fill_chars = fill.template get_code_units<char_type>();
 5981|    246|    if (max_width == 0) {
  ------------------
  |  Branch (5981:9): [True: 132, False: 114]
  ------------------
 5982|    132|        auto it = read_while_code_units(range, fill_chars);
 5983|       |
 5984|    132|        if (want_skipped_width) {
  ------------------
  |  Branch (5984:13): [True: 52, False: 80]
  ------------------
 5985|     52|            auto prefix_width =
 5986|     52|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5987|     52|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5988|     52|            return result_type{it, prefix_width};
 5989|     52|        }
 5990|     80|        return result_type{it, 0};
 5991|    132|    }
 5992|       |
 5993|    114|    auto max_width_view = take_width(range, max_width);
 5994|    114|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5995|       |
 5996|    114|    if (want_skipped_width) {
  ------------------
  |  Branch (5996:9): [True: 114, False: 0]
  ------------------
 5997|    114|        return result_type{w_it.base(), max_width - w_it.count()};
 5998|    114|    }
 5999|      0|    return result_type{w_it.base(), 0};
 6000|    114|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|  8.35k|{
 1976|  8.35k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  8.35k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|  8.59k|{
 1957|  8.59k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  8.59k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  8.59k|    }
 1960|  8.59k|    else {
 1961|  8.59k|        auto first = range.begin();
 1962|  8.59k|        for (; first != range.end(); ++first) {
 1963|  8.59k|            if (pred(*first)) {
 1964|  8.59k|                return first;
 1965|  8.59k|            }
 1966|  8.59k|        }
 1967|  8.59k|        return first;
 1968|  8.59k|    }
 1969|  8.59k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_LPv0EEEOSH_:
  753|  8.27k|    {
  754|  8.27k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_LPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  8.70k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  8.70k|              cvref<T> obj = *get<T>(fn);
  745|  8.70k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  8.70k|                  obj(static_cast<decltype(args)>(args)...);
  747|  8.70k|              }
  748|  8.70k|              else {
  749|  8.70k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  8.70k|              }
  751|  8.70k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlcE_EEDaNS3_7storageE:
  683|  8.70k|    {
  684|  8.70k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  8.70k|            return static_cast<T*>(s.m_cp);
  686|  8.70k|        }
  687|  8.70k|        else if constexpr (std::is_object_v<T>) {
  688|  8.70k|            return static_cast<T*>(s.m_p);
  689|  8.70k|        }
  690|  8.70k|        else {
  691|  8.70k|            return reinterpret_cast<T*>(s.m_fp);
  692|  8.70k|        }
  693|  8.70k|    }
_ZZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlcE_clEc:
 5956|  8.70k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_LPv0EEEPKSH_:
  666|  8.27k|        {
  667|  8.27k|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1975|    560|{
 1976|    560|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    560|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1956|  1.14k|{
 1957|  1.14k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  1.14k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  1.14k|    }
 1960|  1.14k|    else {
 1961|  1.14k|        auto first = range.begin();
 1962|  24.9k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 24.3k, False: 586]
  ------------------
 1963|  24.3k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 556, False: 23.8k]
  ------------------
 1964|    556|                return first;
 1965|    556|            }
 1966|  24.3k|        }
 1967|    586|        return first;
 1968|  1.14k|    }
 1969|  1.14k|}
_ZN3scn2v34impl21read_while_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 2036|    132|{
 2037|    132|    static_assert(ranges::common_range<CodeUnits>);
 2038|       |
 2039|    132|    auto it = range.begin();
 2040|    168|    while (it != range.end()) {
  ------------------
  |  Branch (2040:12): [True: 168, False: 0]
  ------------------
 2041|    168|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2042|    168|                                           needle.size());
 2043|    168|        if (!r) {
  ------------------
  |  Branch (2043:13): [True: 6, False: 162]
  ------------------
 2044|      6|            return it;
 2045|      6|        }
 2046|    162|        static_assert(
 2047|    162|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2048|    162|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2048:13): [True: 126, False: 36]
  ------------------
 2049|    126|            return it;
 2050|    126|        }
 2051|     36|        it = *r;
 2052|     36|    }
 2053|      0|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2054|      0|    return it;
 2055|      0|}
_ZN3scn2v34impl21read_while_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEESI_RKT0_:
 2036|    114|{
 2037|    114|    static_assert(ranges::common_range<CodeUnits>);
 2038|       |
 2039|    114|    auto it = range.begin();
 2040|    168|    while (it != range.end()) {
  ------------------
  |  Branch (2040:12): [True: 132, False: 36]
  ------------------
 2041|    132|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2042|    132|                                           needle.size());
 2043|    132|        if (!r) {
  ------------------
  |  Branch (2043:13): [True: 30, False: 102]
  ------------------
 2044|     30|            return it;
 2045|     30|        }
 2046|    102|        static_assert(
 2047|    102|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2048|    102|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2048:13): [True: 48, False: 54]
  ------------------
 2049|     48|            return it;
 2050|     48|        }
 2051|     54|        it = *r;
 2052|     54|    }
 2053|     36|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|     36|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|     36|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2054|     36|    return it;
 2055|     36|}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 2950|  1.23k|{
 2951|  1.23k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 0, False: 1.23k]
  ------------------
 2952|      0|        auto it = read_while_classic_space(range);
 2953|      0|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|      0|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|      0|        return it;
 2959|      0|    }
 2960|       |
 2961|  1.23k|    return read_while_classic_space(range);
 2962|  1.23k|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2116|  1.23k|{
 2117|  1.23k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  1.23k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  1.23k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  1.23k|        auto buf = make_contiguous_buffer(range);
 2121|  1.23k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  1.23k|        return ranges::next(range.begin(),
 2123|  1.23k|                            ranges::distance(buf.view().begin(), it));
 2124|  1.23k|    }
 2125|  1.23k|    else {
 2126|  1.23k|        auto it = range.begin();
 2127|       |
 2128|  1.23k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  1.23k|            auto seg = get_contiguous_beginning(range);
 2130|  1.23k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  1.23k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 0, False: 1.23k]
  ------------------
 2132|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|      0|            }
 2134|  1.23k|            ranges::advance(it, seg.size());
 2135|  1.23k|        }
 2136|       |
 2137|  1.23k|        return read_while_code_point(
 2138|  1.23k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  1.23k|    }
 2140|  1.23k|}
_ZN3scn2v34impl24get_contiguous_beginningINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDaT_:
 1038|  2.81k|{
 1039|  2.81k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1039:19): [Folded - Ignored]
  |  Branch (1039:19): [Folded - Ignored]
  ------------------
 1040|  2.81k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1040:19): [Folded - Ignored]
  ------------------
 1041|  2.81k|        return r;
 1042|  2.81k|    }
 1043|  2.81k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1043:24): [Folded - Ignored]
  ------------------
 1044|  2.81k|                           ranges::const_iterator_t<Range>,
 1045|  2.81k|                           typename detail::basic_scan_buffer<
 1046|  2.81k|                               detail::char_t<Range>>::forward_iterator>) {
 1047|  2.81k|        if constexpr (ranges::common_range<Range>) {
 1048|  2.81k|            auto seg = r.begin().contiguous_segment();
 1049|  2.81k|            auto dist =
 1050|  2.81k|                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|  2.81k|            return seg.substr(0, std::min(seg.size(), dist));
 1052|  2.81k|        }
 1053|  2.81k|        else {
 1054|  2.81k|            return r.begin().contiguous_segment();
 1055|  2.81k|        }
 1056|  2.81k|    }
 1057|  2.81k|    else {
 1058|  2.81k|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|  2.81k|    }
 1060|  2.81k|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2081|  2.44k|{
 2082|  2.44k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  2.44k|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2060|  2.68k|{
 2061|  2.68k|    auto it = range.begin();
 2062|   236k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 235k, False: 878]
  ------------------
 2063|   235k|        const auto val =
 2064|   235k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   235k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   235k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 223k, False: 11.7k]
  |  |  ------------------
  ------------------
 2066|   223k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   223k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   223k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 1.81k, False: 222k]
  ------------------
 2069|  1.81k|                return it;
 2070|  1.81k|            }
 2071|   223k|        }
 2072|   233k|        it = val.iterator;
 2073|   233k|    }
 2074|       |
 2075|    878|    return it;
 2076|  2.68k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 1898|   273k|{
 1899|   273k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   273k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   273k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   273k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   273k|    auto it = range.begin();
 1903|   273k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   273k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   273k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.9k, False: 252k]
  |  |  ------------------
  ------------------
 1906|  20.9k|        ++it;
 1907|  20.9k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  20.9k|        return {it, {}};
 1909|  20.9k|    }
 1910|       |
 1911|   252k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 231k, False: 21.2k]
  ------------------
 1912|   231k|        ++it;
 1913|   231k|        return {it, string_type(1, *range.begin())};
 1914|   231k|    }
 1915|       |
 1916|  21.2k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  21.2k|    return {it, string_type{range.begin(), it}};
 1918|   252k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_:
 1154|  20.9k|{
 1155|  20.9k|    auto it = input.begin();
 1156|  37.7k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 37.4k, False: 324]
  ------------------
 1157|  37.4k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 20.6k, False: 16.7k]
  ------------------
 1158|  20.6k|            break;
 1159|  20.6k|        }
 1160|  37.4k|    }
 1161|  20.9k|    return it;
 1162|  20.9k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  282|  21.2k|    {
  283|  21.2k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  21.2k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  226|  21.2k|    {
  227|  21.2k|        constexpr iter_difference_t<I> zero{0};
  228|  21.2k|        iter_difference_t<I> counter{0};
  229|       |
  230|  21.2k|        if (n < zero) {
  ------------------
  |  Branch (230:13): [True: 0, False: 21.2k]
  ------------------
  231|      0|            do {
  232|      0|                --i;
  233|      0|                --counter;  // Yes, really
  234|      0|            } while (++n < zero && i != bound);
  ------------------
  |  Branch (234:22): [True: 0, False: 0]
  |  Branch (234:36): [True: 0, False: 0]
  ------------------
  235|      0|        }
  236|  21.2k|        else {
  237|  68.1k|            while (n-- > zero && i != bound) {
  ------------------
  |  Branch (237:20): [True: 47.1k, False: 20.9k]
  |  Branch (237:34): [True: 46.8k, False: 258]
  ------------------
  238|  46.8k|                ++i;
  239|  46.8k|                ++counter;
  240|  46.8k|            }
  241|  21.2k|        }
  242|       |
  243|  21.2k|        return counter;
  244|  21.2k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|  1.23k|    {
  754|  1.23k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|  7.27k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.27k|              cvref<T> obj = *get<T>(fn);
  745|  7.27k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  7.27k|                  obj(static_cast<decltype(args)>(args)...);
  747|  7.27k|              }
  748|  7.27k|              else {
  749|  7.27k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.27k|              }
  751|  7.27k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  7.27k|    {
  684|  7.27k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  7.27k|            return static_cast<T*>(s.m_cp);
  686|  7.27k|        }
  687|  7.27k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  7.27k|            return static_cast<T*>(s.m_p);
  689|  7.27k|        }
  690|  7.27k|        else {
  691|  7.27k|            return reinterpret_cast<T*>(s.m_fp);
  692|  7.27k|        }
  693|  7.27k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2138|  7.27k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|  1.23k|        {
  662|  1.23k|        }
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  8.39k|{
 2951|  8.39k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 7.99k, False: 404]
  ------------------
 2952|  7.99k|        auto it = read_while_classic_space(range);
 2953|  7.99k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  7.99k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.99k]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|  7.99k|        return it;
 2959|  7.99k|    }
 2960|       |
 2961|    404|    return read_while_classic_space(range);
 2962|  8.39k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  19.1k|{
 2117|  19.1k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  19.1k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  19.1k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  19.1k|        auto buf = make_contiguous_buffer(range);
 2121|  19.1k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  19.1k|        return ranges::next(range.begin(),
 2123|  19.1k|                            ranges::distance(buf.view().begin(), it));
 2124|  19.1k|    }
 2125|  19.1k|    else {
 2126|  19.1k|        auto it = range.begin();
 2127|       |
 2128|  19.1k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|  19.1k|            auto seg = get_contiguous_beginning(range);
 2130|  19.1k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  19.1k|                seg_it != seg.end()) {
 2132|  19.1k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  19.1k|            }
 2134|  19.1k|            ranges::advance(it, seg.size());
 2135|  19.1k|        }
 2136|       |
 2137|  19.1k|        return read_while_code_point(
 2138|  19.1k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  19.1k|    }
 2140|  19.1k|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  22.2k|{
 1683|  22.2k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  22.2k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  22.2k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  22.2k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  22.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  22.2k|    }
 1688|  22.2k|    else {
 1689|  22.2k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  22.2k|    }
 1691|  22.2k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|  22.2k|    {
 1490|  22.2k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  42.6k|    {
 3040|  42.6k|        reader_error_handler eh{};
 3041|  42.6k|        get_derived().check_specs_impl(specs, eh);
 3042|  42.6k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  42.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40.8k, False: 1.79k]
  |  |  ------------------
  ------------------
 3043|  40.8k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  40.8k|        }
 3045|  1.79k|        return {};
 3046|  42.6k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
 3050|  42.6k|    {
 3051|  42.6k|        return static_cast<Derived&>(*this);
 3052|  42.6k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3484|  42.6k|    {
 3485|  42.6k|        detail::check_int_type_specs(specs, eh);
 3486|  42.6k|    }
_ZNK3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
 3034|  3.28k|    {
 3035|  3.28k|        return true;
 3036|  3.28k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    552|    {
 3539|    552|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    552|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    552|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    552|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    552|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 552]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    552|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    552|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    552|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    552|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 552]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    552|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 552]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    552|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    552|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 544, False: 8]
  |  |  ------------------
  ------------------
 3565|    544|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    544|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    544|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    544|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    544|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 544, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    544|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    544|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    544|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    544|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    544|    }                                                  \
  |  |  |  | 3671|    544|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      8|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      8|            localized_number_formatting_options<CharT>{loc};
 3586|      8|#endif
 3587|       |
 3588|      8|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      8|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      8|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      8|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      8|    }                                                  \
  |  |  |  | 3671|      8|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    318|    {
 3539|    318|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    318|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    318|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    318|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    318|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 318]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    318|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    318|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    318|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    318|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 318]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    318|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 318]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    318|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    318|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 260, False: 58]
  |  |  ------------------
  ------------------
 3565|    260|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    260|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    260|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    260|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    260|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 260]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    260|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    260|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    260|                    parse_integer_digits_without_thsep(
 3567|    260|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    260|                        prefix_result.parsed_base));
 3569|       |
 3570|    260|            auto buf = make_contiguous_buffer(
 3571|    260|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    260|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    260|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    260|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    260|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    260|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 260, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    260|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    260|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    260|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    260|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    260|    }                                                  \
  |  |  |  | 3671|    260|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    260|        }
 3580|       |
 3581|     58|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     58|            localized_number_formatting_options<CharT>{loc};
 3586|     58|#endif
 3587|       |
 3588|     58|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     58|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     58|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     58|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     58|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 58, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     58|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     58|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     58|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     58|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     58|    }                                                  \
  |  |  |  | 3671|     58|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    552|    {
 3539|    552|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    552|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    552|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    552|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    552|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 552]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    552|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    552|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    552|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    552|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 552]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    552|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 552]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    552|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    552|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 544, False: 8]
  |  |  ------------------
  ------------------
 3565|    544|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    544|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    544|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    544|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    544|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 544, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    544|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    544|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    544|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    544|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    544|    }                                                  \
  |  |  |  | 3671|    544|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      8|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      8|            localized_number_formatting_options<CharT>{loc};
 3586|      8|#endif
 3587|       |
 3588|      8|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      8|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      8|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      8|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      8|    }                                                  \
  |  |  |  | 3671|      8|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    318|    {
 3539|    318|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    318|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    318|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    318|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    318|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 318]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    318|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    318|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    318|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    318|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 318]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    318|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 318]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    318|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    318|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 260, False: 58]
  |  |  ------------------
  ------------------
 3565|    260|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    260|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    260|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    260|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    260|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 260]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    260|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    260|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    260|                    parse_integer_digits_without_thsep(
 3567|    260|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    260|                        prefix_result.parsed_base));
 3569|       |
 3570|    260|            auto buf = make_contiguous_buffer(
 3571|    260|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    260|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    260|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    260|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    260|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    260|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 260, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    260|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    260|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    260|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    260|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    260|    }                                                  \
  |  |  |  | 3671|    260|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    260|        }
 3580|       |
 3581|     58|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     58|            localized_number_formatting_options<CharT>{loc};
 3586|     58|#endif
 3587|       |
 3588|     58|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     58|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     58|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     58|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     58|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 58, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     58|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     58|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     58|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     58|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     58|    }                                                  \
  |  |  |  | 3671|     58|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    522|    {
 3539|    522|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    522|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    522|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    522|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    522|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 522]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    522|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    522|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    522|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    522|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 522]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    522|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 522]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    522|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    522|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 522, False: 0]
  |  |  ------------------
  ------------------
 3565|    522|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    522|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    522|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    522|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    522|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 522, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    522|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    522|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    522|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    522|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    522|    }                                                  \
  |  |  |  | 3671|    522|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    988|    {
 3539|    988|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    988|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    988|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    988|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    988|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 988]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    988|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    988|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    988|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    988|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 988]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    988|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 988]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    988|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    988|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 988, False: 0]
  |  |  ------------------
  ------------------
 3565|    988|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    988|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    988|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    988|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    988|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 988]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    988|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    988|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    988|                    parse_integer_digits_without_thsep(
 3567|    988|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    988|                        prefix_result.parsed_base));
 3569|       |
 3570|    988|            auto buf = make_contiguous_buffer(
 3571|    988|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    988|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    988|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    988|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    988|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    988|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 988, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    988|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    988|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    988|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    988|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    988|    }                                                  \
  |  |  |  | 3671|    988|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    988|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  21.3k|    {
 3040|  21.3k|        reader_error_handler eh{};
 3041|  21.3k|        get_derived().check_specs_impl(specs, eh);
 3042|  21.3k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  21.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.4k, False: 912]
  |  |  ------------------
  ------------------
 3043|  20.4k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  20.4k|        }
 3045|    912|        return {};
 3046|  21.3k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3050|  21.3k|    {
 3051|  21.3k|        return static_cast<Derived&>(*this);
 3052|  21.3k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|  21.3k|    {
 4145|  21.3k|        detail::check_float_type_specs(specs, eh);
 4146|  21.3k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3034|  1.65k|    {
 3035|  1.65k|        return true;
 3036|  1.65k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4216|    886|    {
 4217|    886|        unsigned options{};
 4218|    886|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 72, False: 814]
  ------------------
 4219|     72|            options |= float_reader_base::allow_thsep;
 4220|     72|        }
 4221|       |
 4222|    886|        SCN_GCC_COMPAT_PUSH
 4223|    886|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|    886|        switch (specs.type) {
 4226|     32|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 32, False: 854]
  ------------------
 4227|     32|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|      6|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 6, False: 880]
  ------------------
 4230|      6|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|     70|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 70, False: 816]
  ------------------
 4233|     70|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|      6|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 6, False: 880]
  ------------------
 4236|      6|                return options | float_reader_base::allow_scientific |
 4237|      6|                       float_reader_base::allow_fixed;
 4238|       |
 4239|    772|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 772, False: 114]
  ------------------
 4240|    772|                return options | float_reader_base::allow_scientific |
 4241|    772|                       float_reader_base::allow_fixed |
 4242|    772|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 886]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|    886|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|    886|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|    886|    }
_ZN3scn2v34impl12float_readerIcEC2Ej:
 3659|    886|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2Ev:
 1770|  1.63k|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIcEC2Ev:
 1531|  3.26k|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIcE17handle_separatorsEv:
 4056|  1.05k|    {
 4057|  1.05k|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 1.05k, False: 0]
  ------------------
 4058|  1.05k|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 1.05k, False: 0]
  ------------------
 4059|  1.05k|            return;
 4060|  1.05k|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1586|  1.60k|    {
 1587|  1.60k|        return m_storage.has_value();
 1588|  1.60k|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1591|    804|    {
 1592|    804|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|    804|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    804|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|    804|        return *m_storage;
 1594|    804|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  762|    552|    {
  763|    552|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    552|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    552|    }
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3678|      8|    {
 3679|      8|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|      8|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|      8|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 8]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|      8|        return read_source_impl(range);
 3685|      8|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3704|    552|    {
 3705|    552|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|    552|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    552|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    552|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    552|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 552]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    552|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    552|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|    552|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|    552|        auto it = sign_result.first;
 3708|    552|        m_sign = sign_result.second;
 3709|       |
 3710|    552|        auto digits_begin = it;
 3711|    552|        auto r = ranges::subrange{it, range.end()};
 3712|    552|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|    552|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|    552|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|    552|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|    552|                SCN_TRY_ASSIGN(
 3717|    552|                    it,
 3718|    552|                    do_read_source_impl(
 3719|    552|                        r,
 3720|    552|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|    552|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|    552|            }
 3723|    552|            else {
 3724|    552|                auto cb = [&](const auto& rr)
 3725|    552|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    552|                    auto res = read_all(rr);
 3727|    552|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|    552|                        return unexpected_scan_error(
 3729|    552|                            scan_error::invalid_scanned_value,
 3730|    552|                            "Invalid float value");
 3731|    552|                    }
 3732|    552|                    return res;
 3733|    552|                };
 3734|    552|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|    552|            }
 3736|    552|        }
 3737|    552|        else {
 3738|    552|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|    552|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    552|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    552|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 552, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    552|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    552|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    552|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    552|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    552|    }                                                  \
  |  | 3671|    552|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    552|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|      0|                it,
 3740|      0|                do_read_source_impl(
 3741|      0|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|      0|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|      0|        }
 3744|       |
 3745|      0|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 0, False: 0]
  |  Branch (3747:48): [True: 0, False: 0]
  ------------------
 3748|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 0, False: 0]
  ------------------
 3749|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 0, False: 0]
  ------------------
 3750|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|      0|        }
 3752|       |
 3753|      0|        handle_separators();
 3754|       |
 3755|      0|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 0]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|      0|        return it;
 3768|      0|    }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 3999|    552|    {
 4000|    552|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|    552|        const bool allowed_nonhex =
 4002|    552|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|    552|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|    552|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 552, False: 0]
  |  Branch (4005:45): [True: 0, False: 552]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|    552|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 552]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|    552|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 552, False: 0]
  |  Branch (4014:45): [True: 0, False: 552]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|    552|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 552]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|    552|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 534, False: 18]
  |  Branch (4021:28): [True: 6, False: 528]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|      6|            auto it = range.begin();
 4025|       |
 4026|      6|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 0, False: 6]
  ------------------
 4027|      0|                m_kind = float_kind::hex_with_prefix;
 4028|      0|                it = *r;
 4029|      0|            }
 4030|      6|            else {
 4031|      6|                m_kind = float_kind::hex_without_prefix;
 4032|      6|            }
 4033|       |
 4034|      6|            return read_hex(ranges::subrange{it, range.end()});
 4035|      6|        }
 4036|    546|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 18, False: 528]
  |  Branch (4036:29): [True: 18, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|     18|            m_kind = float_kind::generic;
 4040|     18|            return read_regular_float(range);
 4041|     18|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|    528|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    528|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 528]
  |  |  ------------------
  ------------------
 4047|      0|            m_kind = float_kind::hex_with_prefix;
 4048|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4049|      0|        }
 4050|       |
 4051|    528|        m_kind = float_kind::generic;
 4052|    528|        return read_regular(range);
 4053|    528|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3810|    552|    {
 3811|    552|        auto it = range.begin();
 3812|    552|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 552, False: 0]
  ------------------
 3813|    552|            return unexpected(r.error());
 3814|    552|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3833|    552|    {
 3834|    552|        auto it = range.begin();
 3835|    552|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 552, False: 0]
  ------------------
 3836|    552|            return r.transform_error(map_parse_error_to_scan_error(
 3837|    552|                scan_error::invalid_scanned_value,
 3838|    552|                "Invalid floating-point NaN value"));
 3839|    552|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3803|    534|    {
 3804|    534|        return read_matching_string_classic_nocase(range, "0x");
 3805|    534|    }
_ZN3scn2v34impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3903|      6|    {
 3904|      6|        auto it = range.begin();
 3905|       |
 3906|      6|        std::ptrdiff_t digits_count = 0;
 3907|      6|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|      6|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  ------------------
  ------------------
 3909|      6|            return r.transform_error(map_parse_error_to_scan_error(
 3910|      6|                scan_error::invalid_scanned_value,
 3911|      6|                "Invalid hexadecimal floating-point value"));
 3912|      6|        }
 3913|      0|        else {
 3914|      0|            digits_count += ranges::distance(it, *r);
 3915|      0|            it = *r;
 3916|      0|        }
 3917|       |
 3918|      0|        m_integral_part_length = digits_count;
 3919|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 0, False: 0]
  ------------------
 3920|      0|                                             m_locale_options.decimal_point)) {
 3921|      0|            it = *r;
 3922|      0|        }
 3923|       |
 3924|      0|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 0, False: 0]
  ------------------
 3925|      0|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|      0|            digits_count += ranges::distance(it, *r);
 3927|      0|            it = *r;
 3928|      0|        }
 3929|       |
 3930|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|      0|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|      0|        return it;
 3938|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3788|      6|    {
 3789|      6|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6]
  |  |  |  Branch (859:45): [True: 0, False: 6]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|      6|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|      6|        return read_while1_code_unit(
 3798|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|      6|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_:
  753|      6|    {
  754|      6|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES12_c:
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|      6|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      6|                  obj(static_cast<decltype(args)>(args)...);
  747|      6|              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|      6|    {
  684|      6|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      6|            return static_cast<T*>(s.m_cp);
  686|      6|        }
  687|      6|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      6|            return static_cast<T*>(s.m_p);
  689|      6|        }
  690|      6|        else {
  691|      6|            return reinterpret_cast<T*>(s.m_fp);
  692|      6|        }
  693|      6|    }
_ZZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3798|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_LPv0EEEPSR_:
  661|      6|        {
  662|      6|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3943|    546|    {
 3944|    546|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|    546|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 532, False: 14]
  |  Branch (3945:50): [True: 0, False: 532]
  ------------------
 3946|       |
 3947|    546|        auto it = ranges::begin(range);
 3948|    546|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|    546|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|    546|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    546|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 546, False: 0]
  |  |  ------------------
  ------------------
 3952|    546|            return r.transform_error(
 3953|    546|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|    546|                                              "Invalid floating-point value"));
 3955|    546|        }
 3956|      0|        else {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        m_integral_part_length = digits_count;
 3962|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 0]
  ------------------
 3963|      0|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|      0|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 0]
  ------------------
 3968|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|      0|        auto beg_exp_it = it;
 3979|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 0, False: 0]
  ------------------
 3980|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|      0|        }
 3982|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 0, False: 0]
  |  Branch (3982:29): [True: 0, False: 0]
  ------------------
 3983|      0|            return unexpected_scan_error(
 3984|      0|                scan_error::invalid_scanned_value,
 3985|      0|                "No exponent given to scientific float");
 3986|      0|        }
 3987|       |
 3988|      0|        m_kind =
 3989|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 0, False: 0]
  ------------------
 3990|       |
 3991|      0|        return it;
 3992|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3773|    546|    {
 3774|    546|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|    546|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 546]
  |  |  |  Branch (859:45): [True: 0, False: 546]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|    546|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|    546|        return read_while1_code_unit(
 3783|    546|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|    546|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_:
  753|    546|    {
  754|    546|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES12_c:
  743|    546|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    546|              cvref<T> obj = *get<T>(fn);
  745|    546|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    546|                  obj(static_cast<decltype(args)>(args)...);
  747|    546|              }
  748|    546|              else {
  749|    546|                  return obj(static_cast<decltype(args)>(args)...);
  750|    546|              }
  751|    546|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|    546|    {
  684|    546|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    546|            return static_cast<T*>(s.m_cp);
  686|    546|        }
  687|    546|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    546|            return static_cast<T*>(s.m_p);
  689|    546|        }
  690|    546|        else {
  691|    546|            return reinterpret_cast<T*>(s.m_fp);
  692|    546|        }
  693|    546|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3783|    546|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_LPv0EEEPSR_:
  661|    546|        {
  662|    546|        }
_ZN3scn2v34impl12float_readerIcE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3664|    544|    {
 3665|    544|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    544|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 544]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|    544|        return read_source_impl(range);
 3671|    544|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|  1.08k|    {
  763|  1.08k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  1.08k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.08k|    }
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|     64|    {
 3679|     64|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|     64|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|     64|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 64]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|     64|        return read_source_impl(range);
 3685|     64|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|  1.08k|    {
 3705|  1.08k|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|  1.08k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.08k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.08k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.08k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.08k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.08k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|  1.08k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|  1.08k|        auto it = sign_result.first;
 3708|  1.08k|        m_sign = sign_result.second;
 3709|       |
 3710|  1.08k|        auto digits_begin = it;
 3711|  1.08k|        auto r = ranges::subrange{it, range.end()};
 3712|  1.08k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|  1.08k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|  1.08k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  2.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.08k]
  |  |  |  Branch (859:45): [True: 0, False: 1.08k]
  |  |  |  Branch (859:45): [True: 0, False: 1.08k]
  |  |  ------------------
  ------------------
 3715|  1.08k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      0|    }                                                  \
  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|  1.08k|            else {
 3724|  1.08k|                auto cb = [&](const auto& rr)
 3725|  1.08k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  1.08k|                    auto res = read_all(rr);
 3727|  1.08k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|  1.08k|                        return unexpected_scan_error(
 3729|  1.08k|                            scan_error::invalid_scanned_value,
 3730|  1.08k|                            "Invalid float value");
 3731|  1.08k|                    }
 3732|  1.08k|                    return res;
 3733|  1.08k|                };
 3734|  1.08k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3667|  1.08k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  1.08k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  1.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 26, False: 1.05k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|     26|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|     26|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|     26|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|     26|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|     26|    }                                                  \
  |  | 3671|  1.08k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  1.08k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|  1.05k|            }
 3736|  1.08k|        }
 3737|  1.05k|        else {
 3738|  1.05k|            SCN_TRY_ASSIGN(
 3739|  1.05k|                it,
 3740|  1.05k|                do_read_source_impl(
 3741|  1.05k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|  1.05k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|  1.05k|        }
 3744|       |
 3745|  1.05k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.05k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.05k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|  1.05k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 1.05k, False: 0]
  |  Branch (3747:48): [True: 1.05k, False: 0]
  ------------------
 3748|  1.05k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 1.05k, False: 0]
  ------------------
 3749|  1.05k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 1.05k, False: 0]
  ------------------
 3750|  1.05k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|  1.05k|        }
 3752|       |
 3753|  1.05k|        handle_separators();
 3754|       |
 3755|  1.05k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 1.05k]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|  1.05k|        return it;
 3768|  1.05k|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|  1.08k|    {
 3811|  1.08k|        auto it = range.begin();
 3812|  1.08k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 1.08k, False: 0]
  ------------------
 3813|  1.08k|            return unexpected(r.error());
 3814|  1.08k|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|  1.08k|    {
 3834|  1.08k|        auto it = range.begin();
 3835|  1.08k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 1.08k, False: 0]
  ------------------
 3836|  1.08k|            return r.transform_error(map_parse_error_to_scan_error(
 3837|  1.08k|                scan_error::invalid_scanned_value,
 3838|  1.08k|                "Invalid floating-point NaN value"));
 3839|  1.08k|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|  1.05k|    {
 3804|  1.05k|        return read_matching_string_classic_nocase(range, "0x");
 3805|  1.05k|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|     26|{
 1996|     26|    auto it = read_while_code_unit(range, pred);
 1997|     26|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 26, False: 0]
  ------------------
 1998|     26|        return unexpected(parse_error::error);
 1999|     26|    }
 2000|      0|    return it;
 2001|     26|}
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|     26|    {
 3944|     26|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|     26|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 8, False: 18]
  |  Branch (3945:50): [True: 6, False: 2]
  ------------------
 3946|       |
 3947|     26|        auto it = ranges::begin(range);
 3948|     26|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|     26|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|     26|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26, False: 0]
  |  |  ------------------
  ------------------
 3952|     26|            return r.transform_error(
 3953|     26|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|     26|                                              "Invalid floating-point value"));
 3955|     26|        }
 3956|      0|        else {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        m_integral_part_length = digits_count;
 3962|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 0]
  ------------------
 3963|      0|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|      0|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 0]
  ------------------
 3968|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|      0|        auto beg_exp_it = it;
 3979|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 0, False: 0]
  ------------------
 3980|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|      0|        }
 3982|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 0, False: 0]
  |  Branch (3982:29): [True: 0, False: 0]
  ------------------
 3983|      0|            return unexpected_scan_error(
 3984|      0|                scan_error::invalid_scanned_value,
 3985|      0|                "No exponent given to scientific float");
 3986|      0|        }
 3987|       |
 3988|      0|        m_kind =
 3989|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 0, False: 0]
  ------------------
 3990|       |
 3991|      0|        return it;
 3992|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|     26|    {
 3774|     26|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 26]
  |  |  |  Branch (859:45): [True: 0, False: 26]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|     26|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|     26|        return read_while1_code_unit(
 3783|     26|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|     26|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_:
  753|     26|    {
  754|     26|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESU_c:
  743|     26|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     26|              cvref<T> obj = *get<T>(fn);
  745|     26|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     26|                  obj(static_cast<decltype(args)>(args)...);
  747|     26|              }
  748|     26|              else {
  749|     26|                  return obj(static_cast<decltype(args)>(args)...);
  750|     26|              }
  751|     26|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|     26|    {
  684|     26|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     26|            return static_cast<T*>(s.m_cp);
  686|     26|        }
  687|     26|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     26|            return static_cast<T*>(s.m_p);
  689|     26|        }
  690|     26|        else {
  691|     26|            return reinterpret_cast<T*>(s.m_fp);
  692|     26|        }
  693|     26|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3783|     26|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_LPv0EEEPSJ_:
  661|     26|        {
  662|     26|        }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|  1.08k|    {
 4000|  1.08k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|  1.08k|        const bool allowed_nonhex =
 4002|  1.08k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|  1.08k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|  1.08k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 1.08k, False: 0]
  |  Branch (4005:45): [True: 0, False: 1.08k]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|  1.08k|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 1.08k]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|  1.08k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 1.08k, False: 0]
  |  Branch (4014:45): [True: 0, False: 1.08k]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|  1.08k|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 1.08k]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|  1.08k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 1.05k, False: 26]
  |  Branch (4021:28): [True: 64, False: 990]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|     64|            auto it = range.begin();
 4025|       |
 4026|     64|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 0, False: 64]
  ------------------
 4027|      0|                m_kind = float_kind::hex_with_prefix;
 4028|      0|                it = *r;
 4029|      0|            }
 4030|     64|            else {
 4031|     64|                m_kind = float_kind::hex_without_prefix;
 4032|     64|            }
 4033|       |
 4034|     64|            return read_hex(ranges::subrange{it, range.end()});
 4035|     64|        }
 4036|  1.01k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 26, False: 990]
  |  Branch (4036:29): [True: 26, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|     26|            m_kind = float_kind::generic;
 4040|     26|            return read_regular_float(range);
 4041|     26|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|    990|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    990|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 990]
  |  |  ------------------
  ------------------
 4047|      0|            m_kind = float_kind::hex_with_prefix;
 4048|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4049|      0|        }
 4050|       |
 4051|    990|        m_kind = float_kind::generic;
 4052|    990|        return read_regular(range);
 4053|    990|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|  1.05k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  1.05k|                    auto res = read_all(rr);
 3727|  1.05k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|  1.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.05k]
  |  |  ------------------
  ------------------
 3728|      0|                        return unexpected_scan_error(
 3729|      0|                            scan_error::invalid_scanned_value,
 3730|      0|                            "Invalid float value");
 3731|      0|                    }
 3732|  1.05k|                    return res;
 3733|  1.05k|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|  1.05k|{
 1839|  1.05k|    return ranges::next(range.begin(), range.end());
 1840|  1.05k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|  1.05k|    {
  313|  1.05k|        ranges::advance(x, bound);
  314|  1.05k|        return x;
  315|  1.05k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|  1.05k|    {
  275|  1.05k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|  1.05k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|  1.12k|    {
  190|  1.12k|        i = std::move(bound);
  191|  1.12k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEvOT_:
 1576|  1.05k|    {
 1577|  1.05k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  1.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  1.05k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1620|  1.05k|    {
 1621|  1.05k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  1.05k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  1.05k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  1.05k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  1.05k|            m_storage.reset();
 1627|  1.05k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  1.05k|        }
 1629|  1.05k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|  1.05k|                                          std::basic_string<CharT>>) {
 1631|  1.05k|            m_storage.emplace(SCN_FWD(range));
 1632|  1.05k|            m_view = string_view_type{*m_storage};
 1633|  1.05k|        }
 1634|  1.05k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|  1.05k|                                          typename detail::basic_scan_buffer<
 1636|  1.05k|                                              value_t>::forward_iterator> &&
 1637|  1.05k|                           ranges::common_range<Range>) {
 1638|  1.05k|            auto beg_seg = range.begin().contiguous_segment();
 1639|  1.05k|            auto end_seg = range.end().contiguous_segment();
 1640|  1.05k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  1.05k|                             detail::to_address(end_seg.end()))) {
 1642|  1.05k|                auto& str = m_storage.emplace();
 1643|  1.05k|                str.reserve(range.end().position() - range.begin().position());
 1644|  1.05k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  1.05k|                m_view = string_view_type{str};
 1646|  1.05k|                return;
 1647|  1.05k|            }
 1648|       |
 1649|  1.05k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  1.05k|                                                            end_seg.data());
 1651|  1.05k|            m_storage.reset();
 1652|  1.05k|        }
 1653|  1.05k|        else {
 1654|  1.05k|            auto& str = m_storage.emplace();
 1655|  1.05k|            if constexpr (ranges::sized_range<Range>) {
 1656|  1.05k|                str.reserve(range.size());
 1657|  1.05k|            }
 1658|  1.05k|            if constexpr (ranges::common_range<Range>) {
 1659|  1.05k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  1.05k|                          std::back_inserter(str));
 1661|  1.05k|            }
 1662|  1.05k|            else {
 1663|  1.05k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  1.05k|                     ++it) {
 1665|  1.05k|                    str.push_back(*it);
 1666|  1.05k|                }
 1667|  1.05k|            }
 1668|  1.05k|            m_view = string_view_type{str};
 1669|  1.05k|        }
 1670|  1.05k|    }
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|  1.01k|    {
 3665|  1.01k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|  1.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.01k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|  1.01k|        return read_source_impl(range);
 3671|  1.01k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|  1.05k|    {
 3691|  1.05k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.05k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.05k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|  1.05k|        const std::ptrdiff_t sign_len =
 3694|  1.05k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 0, False: 1.05k]
  ------------------
 3695|       |
 3696|  1.05k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|  1.05k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.05k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.05k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.05k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.05k|    }                                                  \
  |  |  |  | 3671|  1.05k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|  1.05k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4169|    552|    {
 4170|    552|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|    552|#if !SCN_DISABLE_LOCALE
 4173|    552|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 8, False: 544]
  ------------------
 4174|      8|            return read_impl<Range>(
 4175|      8|                range, rd,
 4176|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      8|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|      8|                },
 4179|      8|                value, loc);
 4180|      8|        }
 4181|    544|#endif
 4182|       |
 4183|    544|        return read_impl<Range>(
 4184|    544|            range, rd,
 4185|    544|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    544|                return r.read_source(SCN_FWD(args)...);
 4187|    544|            },
 4188|    544|            value);
 4189|    552|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIcEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|    552|    {
 4206|    552|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|    552|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    552|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 552, False: 0]
  |  |  ------------------
  ------------------
 4208|    552|            return unexpected(r.error());
 4209|    552|        }
 4210|       |
 4211|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|      0|        return ranges::next(range.begin(), n);
 4213|      0|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_LPv0EEEOSU_:
  753|      8|    {
  754|      8|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_LPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1D_SC_SJ_SL_:
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|      8|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      8|                  obj(static_cast<decltype(args)>(args)...);
  747|      8|              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|      8|    {
  684|      8|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      8|            return static_cast<T*>(s.m_cp);
  686|      8|        }
  687|      8|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      8|            return static_cast<T*>(s.m_p);
  689|      8|        }
  690|      8|        else {
  691|      8|            return reinterpret_cast<T*>(s.m_fp);
  692|      8|        }
  693|      8|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSD_ST_EEEDaSW_SZ_:
 4176|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      8|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|      8|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSL_:
  661|      8|        {
  662|      8|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_:
  753|    544|    {
  754|    544|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1D_SC_SJ_SL_:
  743|    544|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    544|              cvref<T> obj = *get<T>(fn);
  745|    544|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    544|                  obj(static_cast<decltype(args)>(args)...);
  747|    544|              }
  748|    544|              else {
  749|    544|                  return obj(static_cast<decltype(args)>(args)...);
  750|    544|              }
  751|    544|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|    544|    {
  684|    544|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    544|            return static_cast<T*>(s.m_cp);
  686|    544|        }
  687|    544|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    544|            return static_cast<T*>(s.m_p);
  689|    544|        }
  690|    544|        else {
  691|    544|            return reinterpret_cast<T*>(s.m_fp);
  692|    544|        }
  693|    544|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4185|    544|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    544|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    544|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|    544|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSL_:
  661|    544|        {
  662|    544|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|    334|    {
 4170|    334|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|    334|#if !SCN_DISABLE_LOCALE
 4173|    334|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 64, False: 270]
  ------------------
 4174|     64|            return read_impl<Range>(
 4175|     64|                range, rd,
 4176|     64|                [](float_reader<CharT>& r, auto&&... args) {
 4177|     64|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|     64|                },
 4179|     64|                value, loc);
 4180|     64|        }
 4181|    270|#endif
 4182|       |
 4183|    270|        return read_impl<Range>(
 4184|    270|            range, rd,
 4185|    270|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    270|                return r.read_source(SCN_FWD(args)...);
 4187|    270|            },
 4188|    270|            value);
 4189|    334|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|  1.08k|    {
 4206|  1.08k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|  1.08k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26, False: 1.05k]
  |  |  ------------------
  ------------------
 4208|     26|            return unexpected(r.error());
 4209|     26|        }
 4210|       |
 4211|  1.05k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|  1.05k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.05k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.05k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.05k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.05k|    }                                                  \
  |  |  |  | 3671|  1.05k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|      0|        return ranges::next(range.begin(), n);
 4213|  1.05k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|     64|    {
  754|     64|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|     64|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     64|              cvref<T> obj = *get<T>(fn);
  745|     64|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     64|                  obj(static_cast<decltype(args)>(args)...);
  747|     64|              }
  748|     64|              else {
  749|     64|                  return obj(static_cast<decltype(args)>(args)...);
  750|     64|              }
  751|     64|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|     64|    {
  684|     64|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     64|            return static_cast<T*>(s.m_cp);
  686|     64|        }
  687|     64|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     64|            return static_cast<T*>(s.m_p);
  689|     64|        }
  690|     64|        else {
  691|     64|            return reinterpret_cast<T*>(s.m_fp);
  692|     64|        }
  693|     64|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|     64|                [](float_reader<CharT>& r, auto&&... args) {
 4177|     64|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|     64|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|     64|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|     64|        {
  662|     64|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|    270|    {
  754|    270|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|    270|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    270|              cvref<T> obj = *get<T>(fn);
  745|    270|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    270|                  obj(static_cast<decltype(args)>(args)...);
  747|    270|              }
  748|    270|              else {
  749|    270|                  return obj(static_cast<decltype(args)>(args)...);
  750|    270|              }
  751|    270|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|    270|    {
  684|    270|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    270|            return static_cast<T*>(s.m_cp);
  686|    270|        }
  687|    270|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    270|            return static_cast<T*>(s.m_p);
  689|    270|        }
  690|    270|        else {
  691|    270|            return reinterpret_cast<T*>(s.m_fp);
  692|    270|        }
  693|    270|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|    270|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    270|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    270|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|    270|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|    270|        {
  662|    270|        }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5808|  21.9k|{
 5809|  21.9k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  21.9k|        return reader_impl_for_bool<CharT>{};
 5811|  21.9k|    }
 5812|  21.9k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  21.9k|        return reader_impl_for_char<CharT>{};
 5814|  21.9k|    }
 5815|  21.9k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  21.9k|        return reader_impl_for_wchar<CharT>{};
 5817|  21.9k|    }
 5818|  21.9k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  21.9k|        return reader_impl_for_code_point<CharT>{};
 5820|  21.9k|    }
 5821|  21.9k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  21.9k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  21.9k|        return reader_impl_for_string<CharT>{};
 5824|  21.9k|    }
 5825|  21.9k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  21.9k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  21.9k|        return reader_impl_for_string<CharT>{};
 5828|  21.9k|    }
 5829|  21.9k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  21.9k|                       std::is_same_v<T, wregex_matches>) {
 5831|  21.9k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  21.9k|    }
 5833|  21.9k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  21.9k|        return reader_impl_for_voidptr<CharT>{};
 5835|  21.9k|    }
 5836|  21.9k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  21.9k|        return reader_impl_for_float<CharT>{};
 5838|  21.9k|    }
 5839|  21.9k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  21.9k|                       !std::is_same_v<T, wchar_t> &&
 5841|  21.9k|                       !std::is_same_v<T, char32_t> &&
 5842|  21.9k|                       !std::is_same_v<T, bool>) {
 5843|  21.9k|        return reader_impl_for_int<CharT>{};
 5844|  21.9k|    }
 5845|  21.9k|    else {
 5846|  21.9k|        return reader_impl_for_monostate<CharT>{};
 5847|  21.9k|    }
 5848|  21.9k|}
_ZN3scn2v34impl13string_readerIcEC2Ev:
 5205|  65.8k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  63.6k|    {
 3040|  63.6k|        reader_error_handler eh{};
 3041|  63.6k|        get_derived().check_specs_impl(specs, eh);
 3042|  63.6k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  63.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 402, False: 63.2k]
  |  |  ------------------
  ------------------
 3043|    402|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|    402|        }
 3045|  63.2k|        return {};
 3046|  63.6k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3050|  63.6k|    {
 3051|  63.6k|        return static_cast<Derived&>(*this);
 3052|  63.6k|    }
_ZN3scn2v34impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5209|  63.6k|    {
 5210|  63.6k|        detail::check_string_type_specs(specs, eh);
 5211|       |
 5212|  63.6k|        SCN_GCC_PUSH
 5213|  63.6k|        SCN_GCC_IGNORE("-Wswitch")
 5214|  63.6k|        SCN_GCC_IGNORE("-Wswitch-default")
 5215|       |
 5216|  63.6k|        SCN_CLANG_PUSH
 5217|  63.6k|        SCN_CLANG_IGNORE("-Wswitch")
 5218|  63.6k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5219|       |
 5220|  63.6k|        switch (specs.type) {
  ------------------
  |  Branch (5220:17): [True: 396, False: 63.2k]
  ------------------
 5221|  2.31k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5221:13): [True: 2.31k, False: 61.3k]
  ------------------
 5222|  2.31k|                m_type = reader_type::word;
 5223|  2.31k|                break;
 5224|       |
 5225|    546|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5225:13): [True: 546, False: 63.0k]
  ------------------
 5226|    546|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5226:21): [True: 84, False: 462]
  ------------------
 5227|    546|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5227:21): [True: 240, False: 222]
  ------------------
 5228|    324|                    m_type = reader_type::custom_word;
 5229|    324|                }
 5230|    222|                else {
 5231|    222|                    m_type = reader_type::word;
 5232|    222|                }
 5233|    546|                break;
 5234|      0|            }
 5235|       |
 5236|    120|            case detail::presentation_type::character:
  ------------------
  |  Branch (5236:13): [True: 120, False: 63.5k]
  ------------------
 5237|    120|                m_type = reader_type::character;
 5238|    120|                break;
 5239|       |
 5240|  9.93k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5240:13): [True: 9.93k, False: 53.6k]
  ------------------
 5241|  9.93k|                m_type = reader_type::character_set;
 5242|  9.93k|                break;
 5243|       |
 5244|  43.3k|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5244:13): [True: 43.3k, False: 20.2k]
  ------------------
 5245|  43.3k|                m_type = reader_type::regex;
 5246|  43.3k|                break;
 5247|       |
 5248|  6.96k|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5248:13): [True: 6.96k, False: 56.6k]
  ------------------
 5249|  6.96k|                m_type = reader_type::regex_escaped;
 5250|  6.96k|                break;
 5251|  63.6k|        }
 5252|       |
 5253|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5254|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5255|  63.6k|    }
_ZNK3scn2v34impl13string_readerIcE19skip_ws_before_readEv:
 5258|  76.3k|    {
 5259|  76.3k|        return m_type == reader_type::word;
 5260|  76.3k|    }
_ZN3scn2v34impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  22.8k|{
 1132|  22.8k|    auto it = src.begin();
 1133|  2.93M|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 2.91M, False: 18.5k]
  ------------------
 1134|  2.91M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|  2.91M|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 2.58k, False: 2.91M]
  ------------------
 1136|  2.58k|            return false;
 1137|  2.58k|        }
 1138|  2.91M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 318, False: 2.91M]
  ------------------
 1139|    318|            return false;
 1140|    318|        }
 1141|  2.91M|        const auto cp = detail::decode_code_point_exhaustive(
 1142|  2.91M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|  2.91M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 1.30k, False: 2.91M]
  ------------------
 1144|  1.30k|            return false;
 1145|  1.30k|        }
 1146|  2.91M|        it += len;
 1147|  2.91M|    }
 1148|  18.5k|    return true;
 1149|  22.8k|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|    804|{
 2993|    804|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|    804|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2994:13): [True: 804, False: 0]
  ------------------
 2995|    804|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|    804|    static_cast<    \
  |  |  929|    804|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2996|    804|        }
 2997|      0|        else {
 2998|      0|            dest.assign(source.view());
 2999|      0|        }
 3000|    804|    }
 3001|    804|    else {
 3002|    804|        return transcode_impl(source.view(), dest);
 3003|    804|    }
 3004|       |
 3005|    804|    return {};
 3006|    804|}
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5102|  9.89k|        {
 5103|  9.89k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5103:17): [True: 1.23k, False: 8.65k]
  ------------------
 5104|  1.23k|                return {};
 5105|  1.23k|            }
 5106|       |
 5107|  8.65k|            auto charset_string = specs.charset_string<SourceCharT>();
 5108|  8.65k|            auto it = detail::to_address(charset_string.begin());
 5109|  8.65k|            auto set = detail::parse_presentation_set(
 5110|  8.65k|                it, detail::to_address(charset_string.end()), nonascii);
 5111|  8.65k|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|  8.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.65k]
  |  |  ------------------
  ------------------
 5112|      0|                return nonascii.err;
 5113|      0|            }
 5114|  8.65k|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|  8.65k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.65k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5115|  8.65k|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|  8.65k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.65k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5116|       |
 5117|  8.65k|            std::sort(nonascii.extra_ranges.begin(),
 5118|  8.65k|                      nonascii.extra_ranges.end());
 5119|  8.65k|            return {};
 5120|  8.65k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback28on_classic_with_extra_rangesEDi:
 5137|  2.14M|        {
 5138|  2.14M|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (5138:17): [True: 242k, False: 1.89M]
  ------------------
 5139|   242k|                return helper.is_char_set_in_extra_literals(cp);
 5140|   242k|            }
 5141|       |
 5142|  1.89M|            return helper.is_char_set_in_literals(static_cast<char>(cp));
 5143|  2.14M|        }
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDi:
 5085|   242k|        {
 5086|       |            // TODO: binary search?
 5087|   242k|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (5087:17): [True: 0, False: 242k]
  ------------------
 5088|      0|                return false;
 5089|      0|            }
 5090|       |
 5091|   242k|            const auto cp_val = static_cast<uint32_t>(cp);
 5092|   242k|            return std::find_if(
 5093|   242k|                       nonascii.extra_ranges.begin(),
 5094|   242k|                       nonascii.extra_ranges.end(),
 5095|   242k|                       [cp_val](const auto& pair) noexcept {
 5096|   242k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
 5097|   242k|                                  static_cast<uint32_t>(pair.second) > cp_val;
 5098|   242k|                       }) != nonascii.extra_ranges.end();
 5099|   242k|        }
_ZZNK3scn2v34impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
 5095|  63.9M|                       [cp_val](const auto& pair) noexcept {
 5096|  63.9M|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (5096:35): [True: 63.9M, False: 18.7k]
  ------------------
 5097|  63.9M|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (5097:35): [True: 238k, False: 63.6M]
  ------------------
 5098|  63.9M|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5075|  1.91M|        {
 5076|  1.91M|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|  1.91M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.91M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5077|  1.91M|            const auto val =
 5078|  1.91M|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5079|  1.91M|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5080|  1.91M|                    (val % 8)) &
 5081|  1.91M|                   1u;
 5082|  1.91M|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5128|  25.7k|        {
 5129|  25.7k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5129:17): [True: 8.29k, False: 17.4k]
  ------------------
 5130|  8.29k|                return false;
 5131|  8.29k|            }
 5132|       |
 5133|  17.4k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5134|  25.7k|        }
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5072|  9.89k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5276|  2.16k|    {
 5277|  2.16k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  2.16k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  2.16k|        return read_impl(range, specs, value);
 5279|  2.16k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5294|  2.16k|    {
 5295|  2.16k|        SCN_CLANG_PUSH
 5296|  2.16k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  2.16k|        switch (m_type) {
 5299|    526|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 526, False: 1.64k]
  ------------------
 5300|    526|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     62|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 62, False: 2.10k]
  ------------------
 5303|     62|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     62|                                                                   value);
 5305|       |
 5306|     38|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 38, False: 2.12k]
  ------------------
 5307|     38|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    782|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 782, False: 1.38k]
  ------------------
 5310|    782|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    782|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      2|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2, False: 2.16k]
  ------------------
 5315|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      2|                    range, specs.charset_string<SourceCharT>(),
 5317|      2|                    specs.regexp_flags, value);
 5318|       |
 5319|    756|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 756, False: 1.41k]
  ------------------
 5320|    756|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    756|                    range,
 5322|    756|                    get_unescaped_regex_pattern(
 5323|    756|                        specs.charset_string<SourceCharT>()),
 5324|    756|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 2.16k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  2.16k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  2.16k|        }
 5331|       |
 5332|  2.16k|        SCN_CLANG_POP
 5333|  2.16k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4819|    526|    {
 4820|    526|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    526|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4751|    626|{
 4752|    626|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    626|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    626|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 254, False: 372]
  ------------------
 4756|    254|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    254|                                     "Invalid encoding in scanned string");
 4758|    254|    }
 4759|    372|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    372|    static_cast<    \
  |  |  929|    372|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    372|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    372|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 372]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    372|    return SCN_MOVE(result);
  ------------------
  |  |  928|    372|    static_cast<    \
  |  |  929|    372|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    372|}
_ZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2087|  1.57k|{
 2088|  1.57k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  1.57k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  1.57k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  1.57k|        auto buf = make_contiguous_buffer(range);
 2092|  1.57k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  1.57k|        return ranges::next(range.begin(),
 2094|  1.57k|                            ranges::distance(buf.view().begin(), it));
 2095|  1.57k|    }
 2096|  1.57k|    else {
 2097|  1.57k|        auto it = range.begin();
 2098|       |
 2099|  1.57k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|  1.57k|            auto seg = get_contiguous_beginning(range);
 2101|  1.57k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  1.57k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2102:17): [True: 0, False: 1.57k]
  ------------------
 2103|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|      0|            }
 2105|  1.57k|            ranges::advance(it, seg.size());
 2106|  1.57k|        }
 2107|       |
 2108|  1.57k|        return read_until_code_point(
 2109|  1.57k|            ranges::subrange{it, range.end()},
 2110|  1.57k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  1.57k|    }
 2112|  1.57k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2060|  1.57k|{
 2061|  1.57k|    auto it = range.begin();
 2062|  39.2k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 38.1k, False: 1.02k]
  ------------------
 2063|  38.1k|        const auto val =
 2064|  38.1k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  38.1k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  38.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 28.9k, False: 9.24k]
  |  |  ------------------
  ------------------
 2066|  28.9k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  28.9k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  28.9k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 558, False: 28.3k]
  ------------------
 2069|    558|                return it;
 2070|    558|            }
 2071|  28.9k|        }
 2072|  37.6k|        it = val.iterator;
 2073|  37.6k|    }
 2074|       |
 2075|  1.02k|    return it;
 2076|  1.57k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|  1.57k|    {
  754|  1.57k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|  28.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  28.9k|              cvref<T> obj = *get<T>(fn);
  745|  28.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  28.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  28.9k|              }
  748|  28.9k|              else {
  749|  28.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  28.9k|              }
  751|  28.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  28.9k|    {
  684|  28.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  28.9k|            return static_cast<T*>(s.m_cp);
  686|  28.9k|        }
  687|  28.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  28.9k|            return static_cast<T*>(s.m_p);
  689|  28.9k|        }
  690|  28.9k|        else {
  691|  28.9k|            return reinterpret_cast<T*>(s.m_fp);
  692|  28.9k|        }
  693|  28.9k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2110|  28.9k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|  1.57k|        {
  662|  1.57k|        }
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4840|     62|    {
 4841|     62|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 34, False: 28]
  ------------------
 4842|     34|            return read_string_impl(
 4843|     34|                range,
 4844|     34|                read_until_code_unit(
 4845|     34|                    range,
 4846|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     34|                        SourceCharT ch) { return ch == until; }),
 4848|     34|                value);
 4849|     34|        }
 4850|     28|        return read_string_impl(
 4851|     28|            range,
 4852|     28|            read_until_code_units(
 4853|     28|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|     28|            value);
 4855|     62|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_LPv0EEEOSL_:
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES18_c:
  743|    782|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    782|              cvref<T> obj = *get<T>(fn);
  745|    782|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    782|                  obj(static_cast<decltype(args)>(args)...);
  747|    782|              }
  748|    782|              else {
  749|    782|                  return obj(static_cast<decltype(args)>(args)...);
  750|    782|              }
  751|    782|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|    782|    {
  684|    782|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    782|            return static_cast<T*>(s.m_cp);
  686|    782|        }
  687|    782|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    782|            return static_cast<T*>(s.m_p);
  689|    782|        }
  690|    782|        else {
  691|    782|            return reinterpret_cast<T*>(s.m_fp);
  692|    782|        }
  693|    782|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlcE_clEc:
 4847|    782|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_LPv0EEEPSL_:
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl21read_until_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEESI_RKT0_:
 2006|     84|{
 2007|     84|    static_assert(ranges::common_range<CodeUnits>);
 2008|       |
 2009|     84|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (2009:19): [Folded - Ignored]
  ------------------
 2010|     84|        return std::search(range.begin(), range.end(), needle.begin(),
 2011|     84|                           needle.end());
 2012|     84|    }
 2013|     84|    else {
 2014|     84|        auto first = range.begin();
 2015|    354|        while (true) {
  ------------------
  |  Branch (2015:16): [Folded - Ignored]
  ------------------
 2016|    354|            auto it = first;
 2017|    498|            for (auto needle_it = needle.begin();; ++it, (void)++needle_it) {
 2018|    498|                if (needle_it == needle.end()) {
  ------------------
  |  Branch (2018:21): [True: 42, False: 456]
  ------------------
 2019|     42|                    return first;
 2020|     42|                }
 2021|    456|                if (it == range.end()) {
  ------------------
  |  Branch (2021:21): [True: 42, False: 414]
  ------------------
 2022|     42|                    return it;
 2023|     42|                }
 2024|    414|                if (*it != *needle_it) {
  ------------------
  |  Branch (2024:21): [True: 270, False: 144]
  ------------------
 2025|    270|                    break;
 2026|    270|                }
 2027|    414|            }
 2028|    270|            ++first;
 2029|    270|        }
 2030|     84|    }
 2031|     84|}
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4946|     38|    {
 4947|     38|        return read_impl(
 4948|     38|            range,
 4949|     38|            [&](const auto& rng) {
 4950|     38|                return read_string_impl(rng, read_all(rng), value);
 4951|     38|            },
 4952|     38|            detail::priority_tag<1>{});
 4953|     38|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     38|    {
 4974|     38|        return read_cb(range);
 4975|     38|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4949|     38|            [&](const auto& rng) {
 4950|     38|                return read_string_impl(rng, read_all(rng), value);
 4951|     38|            },
_ZN3scn2v34impl8read_allINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 1838|    114|{
 1839|    114|    return ranges::next(range.begin(), range.end());
 1840|    114|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS1_6detail9subrange_8subrangeIS9_S9_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EESL_E4typeESL_SM_:
  312|    114|    {
  313|    114|        ranges::advance(x, bound);
  314|    114|        return x;
  315|    114|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EEvE4typeERSL_SM_:
  274|    114|    {
  275|    114|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    114|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEvRT_T0_NS0_6detail12priority_tagILm0EEE:
  202|    114|    {
  203|  2.87k|        while (i != bound) {
  ------------------
  |  Branch (203:16): [True: 2.76k, False: 114]
  ------------------
  204|  2.76k|            ++i;
  205|  2.76k|        }
  206|    114|    }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5047|    782|    {
 5048|    782|        auto it = read_source_impl(range, {specs});
 5049|    782|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    782|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22, False: 760]
  |  |  ------------------
  ------------------
 5050|     22|            return unexpected(it.error());
 5051|     22|        }
 5052|       |
 5053|    760|        return read_string_impl(range, *it, value);
 5054|    782|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperE:
 5152|  2.34k|    {
 5153|  2.34k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|  2.34k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|  2.34k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.34k]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|  2.34k|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|  2.34k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 1.45k, False: 894]
  ------------------
 5163|  1.45k|            const auto cb = [&](char32_t cp) {
 5164|  1.45k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|  1.45k|            };
 5166|       |
 5167|  1.45k|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 240, False: 1.21k]
  ------------------
 5168|    240|                auto it = read_until_code_point(range, cb);
 5169|    240|                return check_nonempty(it, range);
 5170|    240|            }
 5171|  1.21k|            auto it = read_while_code_point(range, cb);
 5172|  1.21k|            return check_nonempty(it, range);
 5173|  1.45k|        }
 5174|       |
 5175|    894|        const auto cb = [&](SourceCharT ch) {
 5176|    894|            return cb_wrapper.on_ascii_only(ch);
 5177|    894|        };
 5178|       |
 5179|    894|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 480, False: 414]
  ------------------
 5180|    480|            auto it = read_until_code_unit(range, cb);
 5181|    480|            return check_nonempty(it, range);
 5182|    480|        }
 5183|    414|        auto it = read_while_code_unit(range, cb);
 5184|    414|        return check_nonempty(it, range);
 5185|    894|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_LPv0EEEOSL_:
  753|  1.45k|    {
  754|  1.45k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   216k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   216k|              cvref<T> obj = *get<T>(fn);
  745|   216k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   216k|                  obj(static_cast<decltype(args)>(args)...);
  747|   216k|              }
  748|   216k|              else {
  749|   216k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   216k|              }
  751|   216k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|   216k|    {
  684|   216k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   216k|            return static_cast<T*>(s.m_cp);
  686|   216k|        }
  687|   216k|        else if constexpr (std::is_object_v<T>) {
  688|   216k|            return static_cast<T*>(s.m_p);
  689|   216k|        }
  690|   216k|        else {
  691|   216k|            return reinterpret_cast<T*>(s.m_fp);
  692|   216k|        }
  693|   216k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlDiE_clEDi:
 5163|   216k|            const auto cb = [&](char32_t cp) {
 5164|   216k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|   216k|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_LPv0EEEPKSL_:
  666|  1.45k|        {
  667|  1.45k|        }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEEEEENS0_13scan_expectedIT_EERKSI_T0_:
 5190|  2.34k|    {
 5191|  2.34k|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 66, False: 2.28k]
  ------------------
 5192|     66|            return unexpected_scan_error(
 5193|     66|                scan_error::invalid_scanned_value,
 5194|     66|                "No characters matched in [character set]");
 5195|     66|        }
 5196|       |
 5197|  2.28k|        return it;
 5198|  2.34k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_LPv0EEEOSL_:
  753|    894|    {
  754|    894|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clESZ_c:
  743|  21.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  21.6k|              cvref<T> obj = *get<T>(fn);
  745|  21.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  21.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  21.6k|              }
  748|  21.6k|              else {
  749|  21.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  21.6k|              }
  751|  21.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  21.6k|    {
  684|  21.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  21.6k|            return static_cast<T*>(s.m_cp);
  686|  21.6k|        }
  687|  21.6k|        else if constexpr (std::is_object_v<T>) {
  688|  21.6k|            return static_cast<T*>(s.m_p);
  689|  21.6k|        }
  690|  21.6k|        else {
  691|  21.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  21.6k|        }
  693|  21.6k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlcE_clEc:
 5175|  21.6k|        const auto cb = [&](SourceCharT ch) {
 5176|  21.6k|            return cb_wrapper.on_ascii_only(ch);
 5177|  21.6k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_LPv0EEEPKSL_:
  666|    894|        {
  667|    894|        }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4751|    760|{
 4752|    760|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    760|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    760|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 328, False: 432]
  ------------------
 4756|    328|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    328|                                     "Invalid encoding in scanned string");
 4758|    328|    }
 4759|    432|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    432|    static_cast<    \
  |  |  929|    432|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    432|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    432|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 432]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    432|    return SCN_MOVE(result);
  ------------------
  |  |  928|    432|    static_cast<    \
  |  |  929|    432|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    432|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4890|    758|    {
 4891|    758|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|    758|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    758|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    758|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    758|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 758, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    758|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    758|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    758|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    758|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    758|    }                                                  \
  |  |  |  | 3671|    758|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|    758|    }
_ZN3scn2v34impl24regex_string_reader_implIcE4implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 4912|  2.27k|    {
 4913|  2.27k|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|  4.54k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4913:23): [Folded - Ignored]
  |  Branch (4913:23): [Folded - Ignored]
  ------------------
 4914|  2.27k|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4914:23): [Folded - Ignored]
  ------------------
 4915|  2.27k|            return unexpected_scan_error(
 4916|  2.27k|                scan_error::invalid_scanned_value,
 4917|  2.27k|                "Regex backend doesn't support wide strings as input");
 4918|  2.27k|        }
 4919|  2.27k|        else {
 4920|  2.27k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4920:17): [True: 2.27k, False: 0]
  ------------------
 4921|  2.27k|                return unexpected_scan_error(
 4922|  2.27k|                    scan_error::invalid_scanned_value,
 4923|  2.27k|                    "Cannot use regex with a non-contiguous source "
 4924|  2.27k|                    "range");
 4925|  2.27k|            }
 4926|       |
 4927|      0|            auto input = get_as_contiguous(range);
 4928|      0|            SCN_TRY(it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4929|      0|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4930|      0|            return ranges::next(range.begin(),
 4931|      0|                                ranges::distance(input.begin(), it));
 4932|      0|        }
 4933|  2.27k|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  958|  2.27k|{
  959|  2.27k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|  2.27k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|  2.27k|        return true;
  962|  2.27k|    }
  963|  2.27k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (963:24): [Folded - Ignored]
  ------------------
  964|  2.27k|                           ranges::const_iterator_t<Range>,
  965|  2.27k|                           typename detail::basic_scan_buffer<
  966|  2.27k|                               detail::char_t<Range>>::forward_iterator>) {
  967|  2.27k|        auto beg = r.begin();
  968|  2.27k|        if (!beg.stores_parent()) {
  969|  2.27k|            return true;
  970|  2.27k|        }
  971|  2.27k|        return beg.parent()->is_contiguous();
  972|  2.27k|    }
  973|  2.27k|    else {
  974|  2.27k|        return false;
  975|  2.27k|    }
  976|  2.27k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  18.8k|    {
 5277|  18.8k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  18.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  18.8k|        return read_impl(range, specs, value);
 5279|  18.8k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  18.8k|    {
 5295|  18.8k|        SCN_CLANG_PUSH
 5296|  18.8k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  18.8k|        switch (m_type) {
 5299|    302|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 302, False: 18.5k]
  ------------------
 5300|    302|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     46|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 46, False: 18.8k]
  ------------------
 5303|     46|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     46|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 18.8k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  2.51k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 2.51k, False: 16.3k]
  ------------------
 5310|  2.51k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  2.51k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  14.4k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 14.4k, False: 4.43k]
  ------------------
 5315|  14.4k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  14.4k|                    range, specs.charset_string<SourceCharT>(),
 5317|  14.4k|                    specs.regexp_flags, value);
 5318|       |
 5319|  1.56k|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 1.56k, False: 17.3k]
  ------------------
 5320|  1.56k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|  1.56k|                    range,
 5322|  1.56k|                    get_unescaped_regex_pattern(
 5323|  1.56k|                        specs.charset_string<SourceCharT>()),
 5324|  1.56k|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 18.8k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  18.8k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  18.8k|        }
 5331|       |
 5332|  18.8k|        SCN_CLANG_POP
 5333|  18.8k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|  1.04k|    {
 4820|  1.04k|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|  1.04k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|  1.09k|{
 4752|  1.09k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  1.09k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  1.09k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 428, False: 666]
  ------------------
 4756|    428|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    428|                                     "Invalid encoding in scanned string");
 4758|    428|    }
 4759|    666|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    666|    static_cast<    \
  |  |  929|    666|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    666|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    666|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 666]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    666|    return SCN_MOVE(result);
  ------------------
  |  |  928|    666|    static_cast<    \
  |  |  929|    666|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    666|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  3.84k|{
 3012|  3.84k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|  3.84k|        dest.assign(source.view());
 3014|  3.84k|    }
 3015|  3.84k|    else {
 3016|  3.84k|        return transcode_impl(source.view(), dest);
 3017|  3.84k|    }
 3018|       |
 3019|  3.84k|    return {};
 3020|  3.84k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2087|  3.14k|{
 2088|  3.14k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  3.14k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  3.14k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  3.14k|        auto buf = make_contiguous_buffer(range);
 2092|  3.14k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  3.14k|        return ranges::next(range.begin(),
 2094|  3.14k|                            ranges::distance(buf.view().begin(), it));
 2095|  3.14k|    }
 2096|  3.14k|    else {
 2097|  3.14k|        auto it = range.begin();
 2098|       |
 2099|  3.14k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|  3.14k|            auto seg = get_contiguous_beginning(range);
 2101|  3.14k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  3.14k|                seg_it != seg.end()) {
 2103|  3.14k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  3.14k|            }
 2105|  3.14k|            ranges::advance(it, seg.size());
 2106|  3.14k|        }
 2107|       |
 2108|  3.14k|        return read_until_code_point(
 2109|  3.14k|            ranges::subrange{it, range.end()},
 2110|  3.14k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  3.14k|    }
 2112|  3.14k|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4840|     46|    {
 4841|     46|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 32, False: 14]
  ------------------
 4842|     32|            return read_string_impl(
 4843|     32|                range,
 4844|     32|                read_until_code_unit(
 4845|     32|                    range,
 4846|     32|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     32|                        SourceCharT ch) { return ch == until; }),
 4848|     32|                value);
 4849|     32|        }
 4850|     14|        return read_string_impl(
 4851|     14|            range,
 4852|     14|            read_until_code_units(
 4853|     14|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|     14|            value);
 4855|     46|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_:
  753|     32|    {
  754|     32|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|    454|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    454|              cvref<T> obj = *get<T>(fn);
  745|    454|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    454|                  obj(static_cast<decltype(args)>(args)...);
  747|    454|              }
  748|    454|              else {
  749|    454|                  return obj(static_cast<decltype(args)>(args)...);
  750|    454|              }
  751|    454|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    454|    {
  684|    454|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    454|            return static_cast<T*>(s.m_cp);
  686|    454|        }
  687|    454|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    454|            return static_cast<T*>(s.m_p);
  689|    454|        }
  690|    454|        else {
  691|    454|            return reinterpret_cast<T*>(s.m_fp);
  692|    454|        }
  693|    454|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlcE_clEc:
 4847|    454|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_LPv0EEEPSJ_:
  661|     32|        {
  662|     32|        }
_ZN3scn2v34impl21read_until_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 2006|     42|{
 2007|     42|    static_assert(ranges::common_range<CodeUnits>);
 2008|       |
 2009|     42|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (2009:19): [Folded - Ignored]
  ------------------
 2010|     42|        return std::search(range.begin(), range.end(), needle.begin(),
 2011|     42|                           needle.end());
 2012|     42|    }
 2013|     42|    else {
 2014|     42|        auto first = range.begin();
 2015|     42|        while (true) {
 2016|     42|            auto it = first;
 2017|     42|            for (auto needle_it = needle.begin();; ++it, (void)++needle_it) {
 2018|     42|                if (needle_it == needle.end()) {
 2019|     42|                    return first;
 2020|     42|                }
 2021|     42|                if (it == range.end()) {
 2022|     42|                    return it;
 2023|     42|                }
 2024|     42|                if (*it != *needle_it) {
 2025|     42|                    break;
 2026|     42|                }
 2027|     42|            }
 2028|     42|            ++first;
 2029|     42|        }
 2030|     42|    }
 2031|     42|}
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|  2.51k|    {
 5048|  2.51k|        auto it = read_source_impl(range, {specs});
 5049|  2.51k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 566, False: 1.95k]
  |  |  ------------------
  ------------------
 5050|    566|            return unexpected(it.error());
 5051|    566|        }
 5052|       |
 5053|  1.95k|        return read_string_impl(range, *it, value);
 5054|  2.51k|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5152|  7.54k|    {
 5153|  7.54k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|  7.54k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|  7.54k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.54k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.54k]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|  7.54k|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|  7.54k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 7.20k, False: 342]
  ------------------
 5163|  7.20k|            const auto cb = [&](char32_t cp) {
 5164|  7.20k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|  7.20k|            };
 5166|       |
 5167|  7.20k|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 456, False: 6.75k]
  ------------------
 5168|    456|                auto it = read_until_code_point(range, cb);
 5169|    456|                return check_nonempty(it, range);
 5170|    456|            }
 5171|  6.75k|            auto it = read_while_code_point(range, cb);
 5172|  6.75k|            return check_nonempty(it, range);
 5173|  7.20k|        }
 5174|       |
 5175|    342|        const auto cb = [&](SourceCharT ch) {
 5176|    342|            return cb_wrapper.on_ascii_only(ch);
 5177|    342|        };
 5178|       |
 5179|    342|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 150, False: 192]
  ------------------
 5180|    150|            auto it = read_until_code_unit(range, cb);
 5181|    150|            return check_nonempty(it, range);
 5182|    150|        }
 5183|    192|        auto it = read_while_code_unit(range, cb);
 5184|    192|        return check_nonempty(it, range);
 5185|    342|    }
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|  7.20k|{
 2061|  7.20k|    auto it = range.begin();
 2062|  1.93M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 1.93M, False: 486]
  ------------------
 2063|  1.93M|        const auto val =
 2064|  1.93M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  1.93M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  1.93M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.92M, False: 5.37k]
  |  |  ------------------
  ------------------
 2066|  1.92M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  1.92M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  1.92M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 6.72k, False: 1.91M]
  ------------------
 2069|  6.72k|                return it;
 2070|  6.72k|            }
 2071|  1.92M|        }
 2072|  1.92M|        it = val.iterator;
 2073|  1.92M|    }
 2074|       |
 2075|    486|    return it;
 2076|  7.20k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|  1.93M|{
 1899|  1.93M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  1.93M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.93M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  1.93M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  1.93M|    auto it = range.begin();
 1903|  1.93M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  1.93M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.93M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.37k, False: 1.92M]
  |  |  ------------------
  ------------------
 1906|  5.37k|        ++it;
 1907|  5.37k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  5.37k|        return {it, {}};
 1909|  5.37k|    }
 1910|       |
 1911|  1.92M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 1.69M, False: 227k]
  ------------------
 1912|  1.69M|        ++it;
 1913|  1.69M|        return {it, string_type(1, *range.begin())};
 1914|  1.69M|    }
 1915|       |
 1916|   227k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|   227k|    return {it, string_type{range.begin(), it}};
 1918|  1.92M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1154|  5.37k|{
 1155|  5.37k|    auto it = input.begin();
 1156|  9.72k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 9.68k, False: 42]
  ------------------
 1157|  9.68k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 5.32k, False: 4.35k]
  ------------------
 1158|  5.32k|            break;
 1159|  5.32k|        }
 1160|  9.68k|    }
 1161|  5.37k|    return it;
 1162|  5.37k|}
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeERSA_SE_SB_:
  282|   227k|    {
  283|   227k|        return n - fn::impl_i_n_s(i, n, bound);
  284|   227k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeERSB_SE_SA_:
  211|   227k|    {
  212|   227k|        if (fn::abs(n) >= fn::abs(bound - i)) {
  ------------------
  |  Branch (212:13): [True: 72, False: 226k]
  ------------------
  213|     72|            auto dist = bound - i;
  214|     72|            fn::impl_i_s(i, bound, priority_tag<2>{});
  215|     72|            return dist;
  216|     72|        }
  217|   226k|        fn::impl_i_n(i, n, priority_tag<1>{});
  218|   226k|        return n;
  219|   227k|    }
_ZN3scn2v36ranges6detail8advance_2fn3absIlEET_S6_:
  131|   454k|    {
  132|   454k|        if (t < T{0}) {
  ------------------
  |  Branch (132:13): [True: 0, False: 454k]
  ------------------
  133|      0|            return -t;
  134|      0|        }
  135|   454k|        return t;
  136|   454k|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKccE8is_validEv:
 1889|  1.93M|    {
 1890|  1.93M|        return !codepoint.empty();
 1891|  1.93M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_LPv0EEEOSJ_:
  753|  7.20k|    {
  754|  7.20k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESX_Di:
  743|  1.92M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.92M|              cvref<T> obj = *get<T>(fn);
  745|  1.92M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.92M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.92M|              }
  748|  1.92M|              else {
  749|  1.92M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.92M|              }
  751|  1.92M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  1.92M|    {
  684|  1.92M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.92M|            return static_cast<T*>(s.m_cp);
  686|  1.92M|        }
  687|  1.92M|        else if constexpr (std::is_object_v<T>) {
  688|  1.92M|            return static_cast<T*>(s.m_p);
  689|  1.92M|        }
  690|  1.92M|        else {
  691|  1.92M|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.92M|        }
  693|  1.92M|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlDiE_clEDi:
 5163|  1.92M|            const auto cb = [&](char32_t cp) {
 5164|  1.92M|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|  1.92M|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_LPv0EEEPKSJ_:
  666|  7.20k|        {
  667|  7.20k|        }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5190|  7.54k|    {
 5191|  7.54k|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 1.69k, False: 5.85k]
  ------------------
 5192|  1.69k|            return unexpected_scan_error(
 5193|  1.69k|                scan_error::invalid_scanned_value,
 5194|  1.69k|                "No characters matched in [character set]");
 5195|  1.69k|        }
 5196|       |
 5197|  5.85k|        return it;
 5198|  7.54k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|  6.75k|{
 2082|  6.75k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  6.75k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_LPv0EEEOSJ_:
  753|    342|    {
  754|    342|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  4.08k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.08k|              cvref<T> obj = *get<T>(fn);
  745|  4.08k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  4.08k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.08k|              }
  748|  4.08k|              else {
  749|  4.08k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.08k|              }
  751|  4.08k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  4.08k|    {
  684|  4.08k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  4.08k|            return static_cast<T*>(s.m_cp);
  686|  4.08k|        }
  687|  4.08k|        else if constexpr (std::is_object_v<T>) {
  688|  4.08k|            return static_cast<T*>(s.m_p);
  689|  4.08k|        }
  690|  4.08k|        else {
  691|  4.08k|            return reinterpret_cast<T*>(s.m_fp);
  692|  4.08k|        }
  693|  4.08k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5175|  4.08k|        const auto cb = [&](SourceCharT ch) {
 5176|  4.08k|            return cb_wrapper.on_ascii_only(ch);
 5177|  4.08k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_LPv0EEEPKSJ_:
  666|    342|        {
  667|    342|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|  3.57k|{
 4752|  3.57k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  3.57k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  3.57k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 394, False: 3.17k]
  ------------------
 4756|    394|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    394|                                     "Invalid encoding in scanned string");
 4758|    394|    }
 4759|  3.17k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  3.17k|    static_cast<    \
  |  |  929|  3.17k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|  3.17k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.17k]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|  3.17k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  3.17k|    static_cast<    \
  |  |  929|  3.17k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|  3.17k|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4890|  16.0k|    {
 4891|  16.0k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  16.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  16.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  16.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  16.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14.3k, False: 1.62k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  14.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  14.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  14.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  14.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  14.3k|    }                                                  \
  |  |  |  | 3671|  16.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|  1.62k|        return read_string_impl(range, it, value);
 4893|  16.0k|    }
_ZN3scn2v34impl24regex_string_reader_implIcE4implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 4912|  48.0k|    {
 4913|  48.0k|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|  96.0k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4913:23): [Folded - Ignored]
  |  Branch (4913:23): [Folded - Ignored]
  ------------------
 4914|  48.0k|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4914:23): [Folded - Ignored]
  ------------------
 4915|  48.0k|            return unexpected_scan_error(
 4916|  48.0k|                scan_error::invalid_scanned_value,
 4917|  48.0k|                "Regex backend doesn't support wide strings as input");
 4918|  48.0k|        }
 4919|  48.0k|        else {
 4920|  48.0k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4920:17): [True: 0, False: 48.0k]
  ------------------
 4921|      0|                return unexpected_scan_error(
 4922|      0|                    scan_error::invalid_scanned_value,
 4923|      0|                    "Cannot use regex with a non-contiguous source "
 4924|      0|                    "range");
 4925|      0|            }
 4926|       |
 4927|  48.0k|            auto input = get_as_contiguous(range);
 4928|  48.0k|            SCN_TRY(it,
  ------------------
  |  | 3672|  48.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  48.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  48.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  48.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 43.1k, False: 4.86k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  43.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  43.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  43.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  43.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  43.1k|    }                                                  \
  |  |  |  | 3671|  48.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.86k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4929|  4.86k|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4930|  4.86k|            return ranges::next(range.begin(),
 4931|  4.86k|                                ranges::distance(input.begin(), it));
 4932|  48.0k|        }
 4933|  48.0k|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  958|  48.0k|{
  959|  48.0k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|  48.0k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|  48.0k|        return true;
  962|  48.0k|    }
  963|  48.0k|    else if constexpr (std::is_same_v<
  964|  48.0k|                           ranges::const_iterator_t<Range>,
  965|  48.0k|                           typename detail::basic_scan_buffer<
  966|  48.0k|                               detail::char_t<Range>>::forward_iterator>) {
  967|  48.0k|        auto beg = r.begin();
  968|  48.0k|        if (!beg.stores_parent()) {
  969|  48.0k|            return true;
  970|  48.0k|        }
  971|  48.0k|        return beg.parent()->is_contiguous();
  972|  48.0k|    }
  973|  48.0k|    else {
  974|  48.0k|        return false;
  975|  48.0k|    }
  976|  48.0k|}
_ZN3scn2v34impl17get_as_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaT_:
 1064|  48.0k|{
 1065|  48.0k|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  |  924|  48.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  48.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1066|       |
 1067|  48.0k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1067:19): [Folded - Ignored]
  |  Branch (1067:19): [Folded - Ignored]
  ------------------
 1068|  48.0k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1068:19): [Folded - Ignored]
  ------------------
 1069|  48.0k|        return r;
 1070|  48.0k|    }
 1071|  48.0k|    else if constexpr (std::is_same_v<
 1072|  48.0k|                           ranges::const_iterator_t<Range>,
 1073|  48.0k|                           typename detail::basic_scan_buffer<
 1074|  48.0k|                               detail::char_t<Range>>::forward_iterator>) {
 1075|  48.0k|        if constexpr (ranges::common_range<Range>) {
 1076|  48.0k|            return detail::make_string_view_from_pointers(
 1077|  48.0k|                r.begin().to_contiguous_segment_iterator(),
 1078|  48.0k|                r.end().to_contiguous_segment_iterator());
 1079|  48.0k|        }
 1080|  48.0k|        else {
 1081|  48.0k|            return r.begin().contiguous_segment();
 1082|  48.0k|        }
 1083|  48.0k|    }
 1084|  48.0k|    else {
 1085|  48.0k|        SCN_EXPECT(false);
 1086|  48.0k|        SCN_UNREACHABLE;
 1087|       |        // for return type deduction
 1088|  48.0k|        return std::basic_string_view<detail::char_t<Range>>{};
 1089|  48.0k|    }
 1090|  48.0k|}
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  980|  48.0k|{
  981|  48.0k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  48.0k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  48.0k|        return true;
  984|  48.0k|    }
  985|  48.0k|    else if constexpr (std::is_same_v<
  986|  48.0k|                           ranges::const_iterator_t<Range>,
  987|  48.0k|                           typename detail::basic_scan_buffer<
  988|  48.0k|                               detail::char_t<Range>>::forward_iterator>) {
  989|  48.0k|        auto beg = r.begin();
  990|  48.0k|        if (beg.contiguous_segment().empty()) {
  991|  48.0k|            return false;
  992|  48.0k|        }
  993|  48.0k|        if constexpr (ranges::common_range<Range>) {
  994|  48.0k|            return beg.contiguous_segment().end() ==
  995|  48.0k|                   ranges::end(r).contiguous_segment().end();
  996|  48.0k|        }
  997|  48.0k|        else {
  998|  48.0k|            if (beg.stores_parent()) {
  999|  48.0k|                return beg.contiguous_segment().end() ==
 1000|  48.0k|                       beg.parent()->current_view().end();
 1001|  48.0k|            }
 1002|  48.0k|            return true;
 1003|  48.0k|        }
 1004|  48.0k|    }
 1005|  48.0k|    else {
 1006|  48.0k|        return false;
 1007|  48.0k|    }
 1008|  48.0k|}
_ZN3scn2v34impl22read_regex_string_implIcNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_:
 4345|  48.0k|{
 4346|  48.0k|    static_assert(ranges::contiguous_range<Input> &&
 4347|  48.0k|                  ranges::borrowed_range<Input> &&
 4348|  48.0k|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
 4349|       |
 4350|  48.0k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 4351|  48.0k|    std::basic_regex<CharT> re{};
 4352|  48.0k|    try {
 4353|  48.0k|        SCN_TRY(re_flags, make_regex_flags(flags));
  ------------------
  |  | 3672|  48.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  48.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  48.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  48.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 48.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  48.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  48.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4354|  48.0k|        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
 4355|  48.0k|                                     re_flags | std::regex_constants::nosubs};
 4356|  48.0k|    }
 4357|  48.0k|    catch (const std::regex_error& err) {
 4358|  32.7k|        return unexpected_scan_error(scan_error::invalid_format_string,
 4359|  32.7k|                                     "Invalid regex");
 4360|  32.7k|    }
 4361|       |
 4362|  15.3k|    std::match_results<const CharT*> matches{};
 4363|  15.3k|    try {
 4364|  15.3k|        bool found = std::regex_search(input.data(),
 4365|  15.3k|                                       input.data() + input.size(), matches, re,
 4366|  15.3k|                                       std::regex_constants::match_continuous);
 4367|  15.3k|        if (!found || matches.prefix().matched) {
  ------------------
  |  Branch (4367:13): [True: 10.4k, False: 4.86k]
  |  Branch (4367:23): [True: 0, False: 4.86k]
  ------------------
 4368|  9.75k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4369|  9.75k|                                         "Regular expression didn't match");
 4370|  9.75k|        }
 4371|  15.3k|    }
 4372|  15.3k|    catch (const std::regex_error& err) {
 4373|    726|        return unexpected_scan_error(scan_error::invalid_format_string,
 4374|    726|                                     "Regex matching failed with an error");
 4375|    726|    }
 4376|       |
 4377|  4.86k|    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4378|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
 4379|       |    auto re =
 4380|       |#if SCN_REGEX_BOOST_USE_ICU
 4381|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
 4382|       |                             make_regex_flags(flags) |
 4383|       |                                 boost::regex_constants::no_except |
 4384|       |                                 boost::regex_constants::nosubs);
 4385|       |#else
 4386|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
 4387|       |                                  make_regex_flags(flags) |
 4388|       |                                      boost::regex_constants::no_except |
 4389|       |                                      boost::regex_constants::nosubs};
 4390|       |#endif
 4391|       |    if (re.status() != 0) {
 4392|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4393|       |                                     "Invalid regex");
 4394|       |    }
 4395|       |
 4396|       |    boost::match_results<const CharT*> matches{};
 4397|       |    try {
 4398|       |        bool found =
 4399|       |#if SCN_REGEX_BOOST_USE_ICU
 4400|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
 4401|       |                                   matches, re,
 4402|       |                                   boost::regex_constants::match_continuous);
 4403|       |#else
 4404|       |            boost::regex_search(input.data(), input.data() + input.size(),
 4405|       |                                matches, re,
 4406|       |                                boost::regex_constants::match_continuous);
 4407|       |#endif
 4408|       |        if (!found || matches.prefix().matched) {
 4409|       |            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4410|       |                                         "Regular expression didn't match");
 4411|       |        }
 4412|       |    }
 4413|       |    catch (const std::runtime_error& err) {
 4414|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4415|       |                                     "Regex matching failed with an error");
 4416|       |    }
 4417|       |
 4418|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4419|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
 4420|       |    static_assert(std::is_same_v<CharT, char>);
 4421|       |    std::string flagged_pattern{};
 4422|       |    auto re = [&]() {
 4423|       |        auto [opts, flagstr] = make_regex_flags(flags);
 4424|       |        opts.set_never_capture(true);
 4425|       |        if (flagstr.empty()) {
 4426|       |            return re2::RE2{pattern, opts};
 4427|       |        }
 4428|       |        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4429|       |        flagged_pattern.append(flagstr);
 4430|       |        flagged_pattern.append(pattern);
 4431|       |        return re2::RE2{flagged_pattern, opts};
 4432|       |    }();
 4433|       |    if (!re.ok()) {
 4434|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4435|       |                                     "Failed to parse regular expression");
 4436|       |    }
 4437|       |
 4438|       |    auto new_input = detail::make_string_view_from_pointers(
 4439|       |        detail::to_address(input.begin()), detail::to_address(input.end()));
 4440|       |    bool found = re2::RE2::Consume(&new_input, re);
 4441|       |    if (!found) {
 4442|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4443|       |                                     "Regular expression didn't match");
 4444|       |    }
 4445|       |    return input.begin() + ranges::distance(input.data(), new_input.data());
 4446|       |#endif  // SCN_REGEX_BACKEND == ...
 4447|  15.3k|}
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEcEEDav:
 5808|  21.9k|{
 5809|  21.9k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  21.9k|        return reader_impl_for_bool<CharT>{};
 5811|  21.9k|    }
 5812|  21.9k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  21.9k|        return reader_impl_for_char<CharT>{};
 5814|  21.9k|    }
 5815|  21.9k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  21.9k|        return reader_impl_for_wchar<CharT>{};
 5817|  21.9k|    }
 5818|  21.9k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  21.9k|        return reader_impl_for_code_point<CharT>{};
 5820|  21.9k|    }
 5821|  21.9k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  21.9k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  21.9k|        return reader_impl_for_string<CharT>{};
 5824|  21.9k|    }
 5825|  21.9k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  21.9k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  21.9k|        return reader_impl_for_string<CharT>{};
 5828|  21.9k|    }
 5829|  21.9k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  21.9k|                       std::is_same_v<T, wregex_matches>) {
 5831|  21.9k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  21.9k|    }
 5833|  21.9k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  21.9k|        return reader_impl_for_voidptr<CharT>{};
 5835|  21.9k|    }
 5836|  21.9k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  21.9k|        return reader_impl_for_float<CharT>{};
 5838|  21.9k|    }
 5839|  21.9k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  21.9k|                       !std::is_same_v<T, wchar_t> &&
 5841|  21.9k|                       !std::is_same_v<T, char32_t> &&
 5842|  21.9k|                       !std::is_same_v<T, bool>) {
 5843|  21.9k|        return reader_impl_for_int<CharT>{};
 5844|  21.9k|    }
 5845|  21.9k|    else {
 5846|  21.9k|        return reader_impl_for_monostate<CharT>{};
 5847|  21.9k|    }
 5848|  21.9k|}
_ZN3scn2v34impl22transcode_if_necessaryIcwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|    804|{
 2993|    804|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|    804|        if (source.stores_allocated_string()) {
 2995|    804|            dest.assign(SCN_MOVE(source.get_allocated_string()));
 2996|    804|        }
 2997|    804|        else {
 2998|    804|            dest.assign(source.view());
 2999|    804|        }
 3000|    804|    }
 3001|    804|    else {
 3002|    804|        return transcode_impl(source.view(), dest);
 3003|    804|    }
 3004|       |
 3005|      0|    return {};
 3006|    804|}
_ZN3scn2v34impl14transcode_implIcwEENS0_10scan_errorENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEERNS4_12basic_stringIT0_NS7_ISB_EENS4_9allocatorISB_EEEE:
 2967|  4.64k|{
 2968|  4.64k|    dst.clear();
 2969|  4.64k|    transcode_valid_to_string(src, dst);
 2970|  4.64k|    return {};
 2971|  4.64k|}
_ZN3scn2v34impl25transcode_valid_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1402|  4.64k|{
 1403|  4.64k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1404|       |
 1405|  4.64k|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  |  924|  4.64k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.64k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1406|  4.64k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1406:19): [Folded - Ignored]
  ------------------
 1407|  4.64k|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1407:23): [Folded - Ignored]
  ------------------
 1408|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1409|  4.64k|            std::u32string tmp;
 1410|  4.64k|            transcode_valid_to_string_impl_to32(src, tmp);
 1411|  4.64k|            return transcode_to_string_impl_32to16<true>(
 1412|  4.64k|                std::u32string_view{tmp}, dest);
 1413|  4.64k|        }
 1414|  4.64k|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1414:28): [Folded - Ignored]
  ------------------
 1415|  4.64k|            return transcode_valid_to_string_impl_to32(src, dest);
 1416|  4.64k|        }
 1417|  4.64k|    }
 1418|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1419|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1420|      0|            std::u32string tmp;
 1421|      0|            transcode_valid_to_string_impl_to32(src, tmp);
 1422|      0|            return transcode_to_string_impl_32to8<true>(
 1423|      0|                std::u32string_view{tmp}, dest);
 1424|      0|        }
 1425|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1426|      0|            return trasncode_valid_to_string_impl_to32(src, dest);
 1427|      0|        }
 1428|      0|    }
 1429|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1430|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1431|      0|            return transcode_to_string_impl_32to8<true>(src, dest);
 1432|      0|        }
 1433|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1434|      0|            return transcode_to_string_impl_32to16<true>(src, dest);
 1435|      0|        }
 1436|      0|    }
 1437|       |
 1438|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1439|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1440|      0|}
_ZN3scn2v34impl35transcode_valid_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1276|  4.64k|{
 1277|  4.64k|    static_assert(sizeof(DestCharT) == 4);
 1278|       |
 1279|  4.64k|    auto it = src.begin();
 1280|   712k|    while (it != src.end()) {
  ------------------
  |  Branch (1280:12): [True: 707k, False: 4.64k]
  ------------------
 1281|   707k|        auto res = get_next_code_point_valid(
 1282|   707k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1283|   707k|                                                                 src.end()));
 1284|   707k|        SCN_EXPECT(res.value < detail::invalid_code_point);
  ------------------
  |  |  924|   707k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   707k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1285|   707k|        dest.push_back(res.value);
 1286|   707k|        it = detail::make_string_view_iterator(src, res.iterator);
 1287|   707k|    }
 1288|  4.64k|}
_ZN3scn2v34impl25get_next_code_point_validIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1188|   707k|{
 1189|   707k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   707k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   707k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1190|       |
 1191|   707k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1192|   707k|    SCN_EXPECT(len <= input.size());
  ------------------
  |  |  924|   707k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   707k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1193|       |
 1194|   707k|    return {input.begin() + len,
 1195|   707k|            detail::decode_code_point_exhaustive_valid(input.substr(0, len))};
 1196|   707k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5276|  2.16k|    {
 5277|  2.16k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  2.16k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  2.16k|        return read_impl(range, specs, value);
 5279|  2.16k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5294|  2.16k|    {
 5295|  2.16k|        SCN_CLANG_PUSH
 5296|  2.16k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  2.16k|        switch (m_type) {
 5299|    526|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 526, False: 1.64k]
  ------------------
 5300|    526|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     62|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 62, False: 2.10k]
  ------------------
 5303|     62|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     62|                                                                   value);
 5305|       |
 5306|     38|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 38, False: 2.12k]
  ------------------
 5307|     38|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    782|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 782, False: 1.38k]
  ------------------
 5310|    782|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    782|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      2|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2, False: 2.16k]
  ------------------
 5315|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      2|                    range, specs.charset_string<SourceCharT>(),
 5317|      2|                    specs.regexp_flags, value);
 5318|       |
 5319|    756|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 756, False: 1.41k]
  ------------------
 5320|    756|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    756|                    range,
 5322|    756|                    get_unescaped_regex_pattern(
 5323|    756|                        specs.charset_string<SourceCharT>()),
 5324|    756|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 2.16k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  2.16k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  2.16k|        }
 5331|       |
 5332|  2.16k|        SCN_CLANG_POP
 5333|  2.16k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4819|    526|    {
 4820|    526|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    526|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4751|    626|{
 4752|    626|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    626|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    626|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 254, False: 372]
  ------------------
 4756|    254|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    254|                                     "Invalid encoding in scanned string");
 4758|    254|    }
 4759|    372|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    372|    static_cast<    \
  |  |  929|    372|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    372|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    372|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 372]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    372|    return SCN_MOVE(result);
  ------------------
  |  |  928|    372|    static_cast<    \
  |  |  929|    372|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    372|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4840|     62|    {
 4841|     62|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 34, False: 28]
  ------------------
 4842|     34|            return read_string_impl(
 4843|     34|                range,
 4844|     34|                read_until_code_unit(
 4845|     34|                    range,
 4846|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     34|                        SourceCharT ch) { return ch == until; }),
 4848|     34|                value);
 4849|     34|        }
 4850|     28|        return read_string_impl(
 4851|     28|            range,
 4852|     28|            read_until_code_units(
 4853|     28|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|     28|            value);
 4855|     62|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_LPv0EEEOSL_:
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES18_c:
  743|    782|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    782|              cvref<T> obj = *get<T>(fn);
  745|    782|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    782|                  obj(static_cast<decltype(args)>(args)...);
  747|    782|              }
  748|    782|              else {
  749|    782|                  return obj(static_cast<decltype(args)>(args)...);
  750|    782|              }
  751|    782|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|    782|    {
  684|    782|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    782|            return static_cast<T*>(s.m_cp);
  686|    782|        }
  687|    782|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    782|            return static_cast<T*>(s.m_p);
  689|    782|        }
  690|    782|        else {
  691|    782|            return reinterpret_cast<T*>(s.m_fp);
  692|    782|        }
  693|    782|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlcE_clEc:
 4847|    782|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_LPv0EEEPSL_:
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4946|     38|    {
 4947|     38|        return read_impl(
 4948|     38|            range,
 4949|     38|            [&](const auto& rng) {
 4950|     38|                return read_string_impl(rng, read_all(rng), value);
 4951|     38|            },
 4952|     38|            detail::priority_tag<1>{});
 4953|     38|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     38|    {
 4974|     38|        return read_cb(range);
 4975|     38|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4949|     38|            [&](const auto& rng) {
 4950|     38|                return read_string_impl(rng, read_all(rng), value);
 4951|     38|            },
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5047|    782|    {
 5048|    782|        auto it = read_source_impl(range, {specs});
 5049|    782|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    782|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22, False: 760]
  |  |  ------------------
  ------------------
 5050|     22|            return unexpected(it.error());
 5051|     22|        }
 5052|       |
 5053|    760|        return read_string_impl(range, *it, value);
 5054|    782|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4751|    760|{
 4752|    760|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    760|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    760|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 328, False: 432]
  ------------------
 4756|    328|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    328|                                     "Invalid encoding in scanned string");
 4758|    328|    }
 4759|    432|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    432|    static_cast<    \
  |  |  929|    432|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    432|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    432|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 432]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    432|    return SCN_MOVE(result);
  ------------------
  |  |  928|    432|    static_cast<    \
  |  |  929|    432|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    432|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4890|    758|    {
 4891|    758|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|    758|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    758|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    758|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    758|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 758, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    758|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    758|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    758|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    758|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    758|    }                                                  \
  |  |  |  | 3671|    758|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|    758|    }
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  18.8k|    {
 5277|  18.8k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  18.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  18.8k|        return read_impl(range, specs, value);
 5279|  18.8k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  18.8k|    {
 5295|  18.8k|        SCN_CLANG_PUSH
 5296|  18.8k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  18.8k|        switch (m_type) {
 5299|    302|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 302, False: 18.5k]
  ------------------
 5300|    302|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     46|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 46, False: 18.8k]
  ------------------
 5303|     46|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     46|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 18.8k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  2.51k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 2.51k, False: 16.3k]
  ------------------
 5310|  2.51k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  2.51k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  14.4k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 14.4k, False: 4.43k]
  ------------------
 5315|  14.4k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  14.4k|                    range, specs.charset_string<SourceCharT>(),
 5317|  14.4k|                    specs.regexp_flags, value);
 5318|       |
 5319|  1.56k|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 1.56k, False: 17.3k]
  ------------------
 5320|  1.56k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|  1.56k|                    range,
 5322|  1.56k|                    get_unescaped_regex_pattern(
 5323|  1.56k|                        specs.charset_string<SourceCharT>()),
 5324|  1.56k|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 18.8k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  18.8k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  18.8k|        }
 5331|       |
 5332|  18.8k|        SCN_CLANG_POP
 5333|  18.8k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|  1.04k|    {
 4820|  1.04k|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|  1.04k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|  1.09k|{
 4752|  1.09k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  1.09k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  1.09k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 428, False: 666]
  ------------------
 4756|    428|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    428|                                     "Invalid encoding in scanned string");
 4758|    428|    }
 4759|    666|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    666|    static_cast<    \
  |  |  929|    666|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    666|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    666|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 666]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    666|    return SCN_MOVE(result);
  ------------------
  |  |  928|    666|    static_cast<    \
  |  |  929|    666|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    666|}
_ZN3scn2v34impl22transcode_if_necessaryIcwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  3.84k|{
 3012|  3.84k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|  3.84k|        dest.assign(source.view());
 3014|  3.84k|    }
 3015|  3.84k|    else {
 3016|  3.84k|        return transcode_impl(source.view(), dest);
 3017|  3.84k|    }
 3018|       |
 3019|      0|    return {};
 3020|  3.84k|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4840|     46|    {
 4841|     46|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 32, False: 14]
  ------------------
 4842|     32|            return read_string_impl(
 4843|     32|                range,
 4844|     32|                read_until_code_unit(
 4845|     32|                    range,
 4846|     32|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     32|                        SourceCharT ch) { return ch == until; }),
 4848|     32|                value);
 4849|     32|        }
 4850|     14|        return read_string_impl(
 4851|     14|            range,
 4852|     14|            read_until_code_units(
 4853|     14|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|     14|            value);
 4855|     46|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_:
  753|     32|    {
  754|     32|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|    454|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    454|              cvref<T> obj = *get<T>(fn);
  745|    454|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    454|                  obj(static_cast<decltype(args)>(args)...);
  747|    454|              }
  748|    454|              else {
  749|    454|                  return obj(static_cast<decltype(args)>(args)...);
  750|    454|              }
  751|    454|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    454|    {
  684|    454|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    454|            return static_cast<T*>(s.m_cp);
  686|    454|        }
  687|    454|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    454|            return static_cast<T*>(s.m_p);
  689|    454|        }
  690|    454|        else {
  691|    454|            return reinterpret_cast<T*>(s.m_fp);
  692|    454|        }
  693|    454|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlcE_clEc:
 4847|    454|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_LPv0EEEPSJ_:
  661|     32|        {
  662|     32|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|  2.51k|    {
 5048|  2.51k|        auto it = read_source_impl(range, {specs});
 5049|  2.51k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 566, False: 1.95k]
  |  |  ------------------
  ------------------
 5050|    566|            return unexpected(it.error());
 5051|    566|        }
 5052|       |
 5053|  1.95k|        return read_string_impl(range, *it, value);
 5054|  2.51k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|  3.57k|{
 4752|  3.57k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  3.57k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  3.57k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 394, False: 3.17k]
  ------------------
 4756|    394|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    394|                                     "Invalid encoding in scanned string");
 4758|    394|    }
 4759|  3.17k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  3.17k|    static_cast<    \
  |  |  929|  3.17k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|  3.17k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.17k]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|  3.17k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  3.17k|    static_cast<    \
  |  |  929|  3.17k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|  3.17k|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4890|  16.0k|    {
 4891|  16.0k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  16.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  16.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  16.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  16.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14.3k, False: 1.62k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  14.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  14.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  14.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  14.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  14.3k|    }                                                  \
  |  |  |  | 3671|  16.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|  1.62k|        return read_string_impl(range, it, value);
 4893|  16.0k|    }
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5808|  21.9k|{
 5809|  21.9k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  21.9k|        return reader_impl_for_bool<CharT>{};
 5811|  21.9k|    }
 5812|  21.9k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  21.9k|        return reader_impl_for_char<CharT>{};
 5814|  21.9k|    }
 5815|  21.9k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  21.9k|        return reader_impl_for_wchar<CharT>{};
 5817|  21.9k|    }
 5818|  21.9k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  21.9k|        return reader_impl_for_code_point<CharT>{};
 5820|  21.9k|    }
 5821|  21.9k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  21.9k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  21.9k|        return reader_impl_for_string<CharT>{};
 5824|  21.9k|    }
 5825|  21.9k|    else if constexpr (std::is_same_v<T, std::string> ||
 5826|  21.9k|                       std::is_same_v<T, std::wstring>) {
 5827|  21.9k|        return reader_impl_for_string<CharT>{};
 5828|  21.9k|    }
 5829|  21.9k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  21.9k|                       std::is_same_v<T, wregex_matches>) {
 5831|  21.9k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  21.9k|    }
 5833|  21.9k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  21.9k|        return reader_impl_for_voidptr<CharT>{};
 5835|  21.9k|    }
 5836|  21.9k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  21.9k|        return reader_impl_for_float<CharT>{};
 5838|  21.9k|    }
 5839|  21.9k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  21.9k|                       !std::is_same_v<T, wchar_t> &&
 5841|  21.9k|                       !std::is_same_v<T, char32_t> &&
 5842|  21.9k|                       !std::is_same_v<T, bool>) {
 5843|  21.9k|        return reader_impl_for_int<CharT>{};
 5844|  21.9k|    }
 5845|  21.9k|    else {
 5846|  21.9k|        return reader_impl_for_monostate<CharT>{};
 5847|  21.9k|    }
 5848|  21.9k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  2.16k|    {
 5277|  2.16k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  2.16k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  2.16k|        return read_impl(range, specs, value);
 5279|  2.16k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  2.16k|    {
 5295|  2.16k|        SCN_CLANG_PUSH
 5296|  2.16k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  2.16k|        switch (m_type) {
 5299|    526|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 526, False: 1.64k]
  ------------------
 5300|    526|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     62|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 62, False: 2.10k]
  ------------------
 5303|     62|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     62|                                                                   value);
 5305|       |
 5306|     38|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 38, False: 2.12k]
  ------------------
 5307|     38|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    782|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 782, False: 1.38k]
  ------------------
 5310|    782|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    782|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      2|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2, False: 2.16k]
  ------------------
 5315|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      2|                    range, specs.charset_string<SourceCharT>(),
 5317|      2|                    specs.regexp_flags, value);
 5318|       |
 5319|    756|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 756, False: 1.41k]
  ------------------
 5320|    756|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    756|                    range,
 5322|    756|                    get_unescaped_regex_pattern(
 5323|    756|                        specs.charset_string<SourceCharT>()),
 5324|    756|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 2.16k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  2.16k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  2.16k|        }
 5331|       |
 5332|  2.16k|        SCN_CLANG_POP
 5333|  2.16k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4826|    526|    {
 4827|    526|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|    526|                                     value);
 4829|    526|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4772|    626|{
 4773|    626|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    626|    auto src = [&]() {
 4776|    626|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    626|            return make_contiguous_buffer(
 4778|    626|                ranges::subrange{range.begin().base(), result.base()});
 4779|    626|        }
 4780|    626|        else {
 4781|    626|            return make_contiguous_buffer(
 4782|    626|                ranges::subrange{range.begin(), result});
 4783|    626|        }
 4784|    626|    }();
 4785|    626|    using src_type = decltype(src);
 4786|       |
 4787|    626|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    626|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    626|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    626|                                     "Cannot read a string_view from "
 4796|    626|                                     "this source range (would require "
 4797|    626|                                     "transcoding)");
 4798|    626|    }
 4799|    626|    else {
 4800|    626|        const auto view = src.view();
 4801|    626|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    626|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 254, False: 372]
  ------------------
 4804|    254|            return unexpected_scan_error(
 4805|    254|                scan_error::invalid_scanned_value,
 4806|    254|                "Invalid encoding in scanned string_view");
 4807|    254|        }
 4808|       |
 4809|    372|        return SCN_MOVE(result);
  ------------------
  |  |  928|    372|    static_cast<    \
  |  |  929|    372|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    626|    }
 4811|    626|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4775|    626|    auto src = [&]() {
 4776|    626|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    626|            return make_contiguous_buffer(
 4778|    626|                ranges::subrange{range.begin().base(), result.base()});
 4779|    626|        }
 4780|    626|        else {
 4781|    626|            return make_contiguous_buffer(
 4782|    626|                ranges::subrange{range.begin(), result});
 4783|    626|        }
 4784|    626|    }();
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 4862|     62|    {
 4863|     62|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4863:13): [True: 34, False: 28]
  ------------------
 4864|     34|            return read_string_view_impl(
 4865|     34|                range,
 4866|     34|                read_until_code_unit(
 4867|     34|                    range,
 4868|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4869|     34|                        SourceCharT ch) { return ch == until; }),
 4870|     34|                value);
 4871|     34|        }
 4872|     28|        return read_string_view_impl(
 4873|     28|            range,
 4874|     28|            read_until_code_units(
 4875|     28|                range, specs.fill.template get_code_units<SourceCharT>()),
 4876|     28|            value);
 4877|     62|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_S11_LPv0EEEOSL_:
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_S11_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|    782|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    782|              cvref<T> obj = *get<T>(fn);
  745|    782|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    782|                  obj(static_cast<decltype(args)>(args)...);
  747|    782|              }
  748|    782|              else {
  749|    782|                  return obj(static_cast<decltype(args)>(args)...);
  750|    782|              }
  751|    782|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_17basic_string_viewIT0_NSI_11char_traitsISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|    782|    {
  684|    782|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    782|            return static_cast<T*>(s.m_cp);
  686|    782|        }
  687|    782|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    782|            return static_cast<T*>(s.m_p);
  689|    782|        }
  690|    782|        else {
  691|    782|            return reinterpret_cast<T*>(s.m_fp);
  692|    782|        }
  693|    782|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEEENKUlcE_clEc:
 4869|    782|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_LPv0EEEPSL_:
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4958|     38|    {
 4959|     38|        return read_impl(
 4960|     38|            range,
 4961|     38|            [&](const auto& rng) {
 4962|     38|                return read_string_view_impl(rng, read_all(rng), value);
 4963|     38|            },
 4964|     38|            detail::priority_tag<1>{});
 4965|     38|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_17basic_string_viewIT0_NSG_11char_traitsISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSX_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     38|    {
 4974|     38|        return read_cb(range);
 4975|     38|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEEENKUlRKSH_E_clISD_EEDaSU_:
 4961|     38|            [&](const auto& rng) {
 4962|     38|                return read_string_view_impl(rng, read_all(rng), value);
 4963|     38|            },
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 5061|    782|    {
 5062|    782|        auto it = read_source_impl(range, {specs});
 5063|    782|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    782|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22, False: 760]
  |  |  ------------------
  ------------------
 5064|     22|            return unexpected(it.error());
 5065|     22|        }
 5066|       |
 5067|    760|        return read_string_view_impl(range, *it, value);
 5068|    782|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEE:
 4772|    760|{
 4773|    760|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    760|    auto src = [&]() {
 4776|    760|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    760|            return make_contiguous_buffer(
 4778|    760|                ranges::subrange{range.begin().base(), result.base()});
 4779|    760|        }
 4780|    760|        else {
 4781|    760|            return make_contiguous_buffer(
 4782|    760|                ranges::subrange{range.begin(), result});
 4783|    760|        }
 4784|    760|    }();
 4785|    760|    using src_type = decltype(src);
 4786|       |
 4787|    760|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    760|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    760|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    760|                                     "Cannot read a string_view from "
 4796|    760|                                     "this source range (would require "
 4797|    760|                                     "transcoding)");
 4798|    760|    }
 4799|    760|    else {
 4800|    760|        const auto view = src.view();
 4801|    760|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    760|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 328, False: 432]
  ------------------
 4804|    328|            return unexpected_scan_error(
 4805|    328|                scan_error::invalid_scanned_value,
 4806|    328|                "Invalid encoding in scanned string_view");
 4807|    328|        }
 4808|       |
 4809|    432|        return SCN_MOVE(result);
  ------------------
  |  |  928|    432|    static_cast<    \
  |  |  929|    432|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    760|    }
 4811|    760|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEEENKUlvE_clEv:
 4775|    760|    auto src = [&]() {
 4776|    760|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    760|            return make_contiguous_buffer(
 4778|    760|                ranges::subrange{range.begin().base(), result.base()});
 4779|    760|        }
 4780|    760|        else {
 4781|    760|            return make_contiguous_buffer(
 4782|    760|                ranges::subrange{range.begin(), result});
 4783|    760|        }
 4784|    760|    }();
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSN_IT0_NSO_IST_EEEE:
 4901|    758|    {
 4902|    758|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|    758|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    758|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    758|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    758|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 758, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    758|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    758|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    758|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    758|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    758|    }                                                  \
  |  |  |  | 3671|    758|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4903|      0|        return read_string_view_impl(range, it, value);
 4904|    758|    }
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5276|  18.8k|    {
 5277|  18.8k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  18.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  18.8k|        return read_impl(range, specs, value);
 5279|  18.8k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5294|  18.8k|    {
 5295|  18.8k|        SCN_CLANG_PUSH
 5296|  18.8k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  18.8k|        switch (m_type) {
 5299|    302|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 302, False: 18.5k]
  ------------------
 5300|    302|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     46|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 46, False: 18.8k]
  ------------------
 5303|     46|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     46|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 18.8k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  2.51k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 2.51k, False: 16.3k]
  ------------------
 5310|  2.51k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  2.51k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  14.4k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 14.4k, False: 4.43k]
  ------------------
 5315|  14.4k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  14.4k|                    range, specs.charset_string<SourceCharT>(),
 5317|  14.4k|                    specs.regexp_flags, value);
 5318|       |
 5319|  1.56k|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 1.56k, False: 17.3k]
  ------------------
 5320|  1.56k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|  1.56k|                    range,
 5322|  1.56k|                    get_unescaped_regex_pattern(
 5323|  1.56k|                        specs.charset_string<SourceCharT>()),
 5324|  1.56k|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 18.8k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  18.8k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  18.8k|        }
 5331|       |
 5332|  18.8k|        SCN_CLANG_POP
 5333|  18.8k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4826|  1.04k|    {
 4827|  1.04k|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|  1.04k|                                     value);
 4829|  1.04k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4772|  1.09k|{
 4773|  1.09k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|  1.09k|    auto src = [&]() {
 4776|  1.09k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|  1.09k|            return make_contiguous_buffer(
 4778|  1.09k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  1.09k|        }
 4780|  1.09k|        else {
 4781|  1.09k|            return make_contiguous_buffer(
 4782|  1.09k|                ranges::subrange{range.begin(), result});
 4783|  1.09k|        }
 4784|  1.09k|    }();
 4785|  1.09k|    using src_type = decltype(src);
 4786|       |
 4787|  1.09k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|  1.09k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|  1.09k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|  1.09k|                                     "Cannot read a string_view from "
 4796|  1.09k|                                     "this source range (would require "
 4797|  1.09k|                                     "transcoding)");
 4798|  1.09k|    }
 4799|  1.09k|    else {
 4800|  1.09k|        const auto view = src.view();
 4801|  1.09k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|  1.09k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 428, False: 666]
  ------------------
 4804|    428|            return unexpected_scan_error(
 4805|    428|                scan_error::invalid_scanned_value,
 4806|    428|                "Invalid encoding in scanned string_view");
 4807|    428|        }
 4808|       |
 4809|    666|        return SCN_MOVE(result);
  ------------------
  |  |  928|    666|    static_cast<    \
  |  |  929|    666|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|  1.09k|    }
 4811|  1.09k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4775|  1.09k|    auto src = [&]() {
 4776|  1.09k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|  1.09k|            return make_contiguous_buffer(
 4778|  1.09k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  1.09k|        }
 4780|  1.09k|        else {
 4781|  1.09k|            return make_contiguous_buffer(
 4782|  1.09k|                ranges::subrange{range.begin(), result});
 4783|  1.09k|        }
 4784|  1.09k|    }();
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4862|     46|    {
 4863|     46|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4863:13): [True: 32, False: 14]
  ------------------
 4864|     32|            return read_string_view_impl(
 4865|     32|                range,
 4866|     32|                read_until_code_unit(
 4867|     32|                    range,
 4868|     32|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4869|     32|                        SourceCharT ch) { return ch == until; }),
 4870|     32|                value);
 4871|     32|        }
 4872|     14|        return read_string_view_impl(
 4873|     14|            range,
 4874|     14|            read_until_code_units(
 4875|     14|                range, specs.fill.template get_code_units<SourceCharT>()),
 4876|     14|            value);
 4877|     46|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_SZ_LPv0EEEOSJ_:
  753|     32|    {
  754|     32|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_SZ_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES14_c:
  743|    454|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    454|              cvref<T> obj = *get<T>(fn);
  745|    454|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    454|                  obj(static_cast<decltype(args)>(args)...);
  747|    454|              }
  748|    454|              else {
  749|    454|                  return obj(static_cast<decltype(args)>(args)...);
  750|    454|              }
  751|    454|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_17basic_string_viewIT0_NSG_11char_traitsIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    454|    {
  684|    454|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    454|            return static_cast<T*>(s.m_cp);
  686|    454|        }
  687|    454|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    454|            return static_cast<T*>(s.m_p);
  689|    454|        }
  690|    454|        else {
  691|    454|            return reinterpret_cast<T*>(s.m_fp);
  692|    454|        }
  693|    454|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEEENKUlcE_clEc:
 4869|    454|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_LPv0EEEPSJ_:
  661|     32|        {
  662|     32|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5061|  2.51k|    {
 5062|  2.51k|        auto it = read_source_impl(range, {specs});
 5063|  2.51k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 566, False: 1.95k]
  |  |  ------------------
  ------------------
 5064|    566|            return unexpected(it.error());
 5065|    566|        }
 5066|       |
 5067|  1.95k|        return read_string_view_impl(range, *it, value);
 5068|  2.51k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4772|  3.57k|{
 4773|  3.57k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|  3.57k|    auto src = [&]() {
 4776|  3.57k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|  3.57k|            return make_contiguous_buffer(
 4778|  3.57k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  3.57k|        }
 4780|  3.57k|        else {
 4781|  3.57k|            return make_contiguous_buffer(
 4782|  3.57k|                ranges::subrange{range.begin(), result});
 4783|  3.57k|        }
 4784|  3.57k|    }();
 4785|  3.57k|    using src_type = decltype(src);
 4786|       |
 4787|  3.57k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|  3.57k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|  3.57k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|  3.57k|                                     "Cannot read a string_view from "
 4796|  3.57k|                                     "this source range (would require "
 4797|  3.57k|                                     "transcoding)");
 4798|  3.57k|    }
 4799|  3.57k|    else {
 4800|  3.57k|        const auto view = src.view();
 4801|  3.57k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|  3.57k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 394, False: 3.17k]
  ------------------
 4804|    394|            return unexpected_scan_error(
 4805|    394|                scan_error::invalid_scanned_value,
 4806|    394|                "Invalid encoding in scanned string_view");
 4807|    394|        }
 4808|       |
 4809|  3.17k|        return SCN_MOVE(result);
  ------------------
  |  |  928|  3.17k|    static_cast<    \
  |  |  929|  3.17k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|  3.57k|    }
 4811|  3.57k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4775|  3.57k|    auto src = [&]() {
 4776|  3.57k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|  3.57k|            return make_contiguous_buffer(
 4778|  3.57k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  3.57k|        }
 4780|  3.57k|        else {
 4781|  3.57k|            return make_contiguous_buffer(
 4782|  3.57k|                ranges::subrange{range.begin(), result});
 4783|  3.57k|        }
 4784|  3.57k|    }();
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSL_IT0_NSM_ISR_EEEE:
 4901|  16.0k|    {
 4902|  16.0k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  16.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  16.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  16.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  16.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14.3k, False: 1.62k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  14.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  14.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  14.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  14.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  14.3k|    }                                                  \
  |  |  |  | 3671|  16.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4903|  1.62k|        return read_string_view_impl(range, it, value);
 4904|  16.0k|    }
_ZN3scn2v34impl16char_reader_baseIwE11check_specsERKNS0_6detail12format_specsE:
 5623|  13.0k|    {
 5624|  13.0k|        reader_error_handler eh{};
 5625|  13.0k|        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
  ------------------
  |  Branch (5625:23): [Folded - Ignored]
  ------------------
 5626|  13.0k|            detail::check_code_point_type_specs(specs, eh);
 5627|  13.0k|        }
 5628|  13.0k|        else {
 5629|  13.0k|            detail::check_char_type_specs(specs, eh);
 5630|  13.0k|        }
 5631|  13.0k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  13.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.3k, False: 718]
  |  |  ------------------
  ------------------
 5632|  12.3k|            return {scan_error::invalid_format_string, eh.m_msg};
 5633|  12.3k|        }
 5634|    718|        return {};
 5635|  13.0k|    }
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  15.8k|    {
  763|  15.8k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  15.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  15.8k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  2.35k|    {
  754|  2.35k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  743|  5.67k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.67k|              cvref<T> obj = *get<T>(fn);
  745|  5.67k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  5.67k|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.67k|              }
  748|  5.67k|              else {
  749|  5.67k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.67k|              }
  751|  5.67k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  5.67k|    {
  684|  5.67k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  5.67k|            return static_cast<T*>(s.m_cp);
  686|  5.67k|        }
  687|  5.67k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  5.67k|            return static_cast<T*>(s.m_p);
  689|  5.67k|        }
  690|  5.67k|        else {
  691|  5.67k|            return reinterpret_cast<T*>(s.m_fp);
  692|  5.67k|        }
  693|  5.67k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  661|  2.35k|        {
  662|  2.35k|        }
_ZNK3scn2v34impl16char_reader_baseIwE19skip_ws_before_readEv:
 5618|  2.08k|    {
 5619|  2.08k|        return false;
 5620|  2.08k|    }
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1779|    184|    {
 1780|    184|        auto stdloc = loc.get<std::locale>();
 1781|    184|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|    184|        grouping = numpunct.grouping();
 1783|    184|        thousands_sep =
 1784|    184|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 184]
  ------------------
 1785|    184|        decimal_point = numpunct.decimal_point();
 1786|    184|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1716|    252|{
 1717|    252|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 252, False: 0]
  ------------------
 1718|    252|        return std::use_facet<Facet>(stdloc);
 1719|    252|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|    252|}
_ZN3scn2v34impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2348|  7.39k|{
 2349|  7.39k|    size_t count{0};
 2350|  7.39k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  7.39k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  7.39k|    });
 2353|  7.39k|    return count;
 2354|  7.39k|}
_ZN3scn2v34impl19for_each_code_pointIwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1445|  7.39k|{
 1446|       |    // TODO: Could be optimized by being eager
 1447|  7.39k|    auto it = input.begin();
 1448|  15.2k|    while (it != input.end()) {
  ------------------
  |  Branch (1448:12): [True: 7.83k, False: 7.39k]
  ------------------
 1449|  7.83k|        auto res = get_next_code_point(
 1450|  7.83k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1451|  7.83k|        cb(res.value);
 1452|  7.83k|        it = detail::make_string_view_iterator(input, res.iterator);
 1453|  7.83k|    }
 1454|  7.39k|}
_ZN3scn2v34impl19get_next_code_pointIwEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|  1.37G|{
 1169|  1.37G|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|  1.37G|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.37G|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|  1.37G|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|  1.37G|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.37G|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.37G]
  |  |  ------------------
  ------------------
 1173|      0|        return {get_start_for_next_code_point(input),
 1174|      0|                detail::invalid_code_point};
 1175|      0|    }
 1176|  1.37G|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|  1.37G|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.37G]
  |  |  ------------------
  ------------------
 1177|      0|        return {input.end(), detail::invalid_code_point};
 1178|      0|    }
 1179|       |
 1180|  1.37G|    return {input.begin() + len,
 1181|  1.37G|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|  1.37G|}
_ZN3scn2v34impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_:
  753|  7.39k|    {
  754|  7.39k|    }
_ZZN3scn2v34impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESI_Di:
  743|  7.83k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.83k|              cvref<T> obj = *get<T>(fn);
  745|  7.83k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  7.83k|                  obj(static_cast<decltype(args)>(args)...);
  747|  7.83k|              }
  748|  7.83k|              else {
  749|  7.83k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.83k|              }
  751|  7.83k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|  7.83k|    {
  684|  7.83k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  7.83k|            return static_cast<T*>(s.m_cp);
  686|  7.83k|        }
  687|  7.83k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  7.83k|            return static_cast<T*>(s.m_p);
  689|  7.83k|        }
  690|  7.83k|        else {
  691|  7.83k|            return reinterpret_cast<T*>(s.m_fp);
  692|  7.83k|        }
  693|  7.83k|    }
_ZZN3scn2v34impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2350|  7.83k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  7.83k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  7.83k|    });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_LPv0EEEPS9_:
  661|  7.39k|        {
  662|  7.39k|        }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1581|  3.10k|    {
 1582|  3.10k|        return m_view;
 1583|  3.10k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1571|  3.56k|    ~contiguous_range_factory() = default;
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E14multibyte_leftEv:
 2420|    470|    {
 2421|    470|        return m_multibyte_left;
 2422|    470|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EdeEv:
 2425|  99.4k|    {
 2426|  99.4k|        return *m_current;
 2427|  99.4k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EppEv:
 2434|  66.4k|    {
 2435|  66.4k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  66.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  66.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2436|  66.4k|        _increment_current();
 2437|  66.4k|        return *this;
 2438|  66.4k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E18_increment_currentEv:
 2667|  66.4k|    {
 2668|  66.4k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2668:13): [True: 66.4k, False: 0]
  ------------------
 2669|  66.4k|            auto cplen = _get_cp_length_at_current();
 2670|  66.4k|            m_multibyte_left = cplen - 1;
 2671|  66.4k|            m_count -= _get_width_at_current_cp_start(cplen);
 2672|  66.4k|        }
 2673|      0|        else {
 2674|      0|            --m_multibyte_left;
 2675|      0|        }
 2676|       |
 2677|  66.4k|        ++m_current;
 2678|  66.4k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E25_get_cp_length_at_currentEv:
 2638|  66.4k|    {
 2639|  66.4k|        return static_cast<difference_type>(
 2640|  66.4k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2641|  66.4k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E30_get_width_at_current_cp_startEl:
 2644|  66.4k|    {
 2645|  66.4k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|  66.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 66.4k]
  |  |  ------------------
  ------------------
 2646|      0|            return 0;
 2647|      0|        }
 2648|       |
 2649|  66.4k|        if (cplen == 1) {
  ------------------
  |  Branch (2649:13): [True: 66.4k, False: 0]
  ------------------
 2650|  66.4k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  66.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  66.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2651|  66.4k|            auto cp = static_cast<char32_t>(*m_current);
 2652|  66.4k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2653|  66.4k|        }
 2654|       |
 2655|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2656|      0|                                           cplen);
 2657|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2658|      0|            return 0;
 2659|      0|        }
 2660|       |
 2661|      0|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2662|      0|        return static_cast<difference_type>(
 2663|      0|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2664|      0|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|  7.29k|{
 1857|  7.29k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  7.29k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.29k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  7.29k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  7.29k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  7.29k|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 142, False: 7.15k]
  ------------------
 1862|    142|            return unexpected(eof_error::eof);
 1863|    142|        }
 1864|       |
 1865|  7.15k|        return ranges::next(range.begin(), count);
 1866|  7.29k|    }
 1867|  7.29k|    else {
 1868|  7.29k|        auto it = range.begin();
 1869|  7.29k|        if (guaranteed_minimum_size(range) >= count) {
 1870|  7.29k|            return ranges::next(it, count);
 1871|  7.29k|        }
 1872|       |
 1873|  7.29k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|  7.29k|            if (it == range.end()) {
 1875|  7.29k|                return unexpected(eof_error::eof);
 1876|  7.29k|            }
 1877|  7.29k|        }
 1878|       |
 1879|  7.29k|        return it;
 1880|  7.29k|    }
 1881|  7.29k|}
_ZN3scn2v34impl27counted_width_iterator_implneIPKwS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2530|  24.5k|    {
 2531|  24.5k|        return !(a == b);
 2532|  24.5k|    }
_ZN3scn2v34impl27counted_width_iterator_impleqIPKwS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2522|  25.6k|    {
 2523|  25.6k|        return a.m_current == b.m_current;
 2524|  25.6k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EdeEv:
 2429|  3.76k|    {
 2430|  3.76k|        return *m_current;
 2431|  3.76k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEwE8is_validEv:
 1889|  32.3k|    {
 1890|  32.3k|        return !codepoint.empty();
 1891|  32.3k|    }
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EESB_EEEEDaOT_:
 1682|    622|{
 1683|    622|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|    622|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|    622|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|    622|        return string_view_wrapper{SCN_FWD(range)};
 1687|    622|    }
 1688|    622|    else {
 1689|    622|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|    622|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1690|    622|    }
 1691|    622|}
_ZN3scn2v34impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EELPv0EEEOT_:
 1536|    622|    {
 1537|    622|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|    622|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1538|    622|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEvOT_:
 1620|    622|    {
 1621|    622|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|    622|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|    622|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|    622|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|    622|            m_storage.reset();
 1627|    622|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|    622|        }
 1629|    622|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|    622|                                          std::basic_string<CharT>>) {
 1631|    622|            m_storage.emplace(SCN_FWD(range));
 1632|    622|            m_view = string_view_type{*m_storage};
 1633|    622|        }
 1634|    622|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|    622|                                          typename detail::basic_scan_buffer<
 1636|    622|                                              value_t>::forward_iterator> &&
 1637|    622|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|    622|            auto beg_seg = range.begin().contiguous_segment();
 1639|    622|            auto end_seg = range.end().contiguous_segment();
 1640|    622|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|    622|                             detail::to_address(end_seg.end()))) {
 1642|    622|                auto& str = m_storage.emplace();
 1643|    622|                str.reserve(range.end().position() - range.begin().position());
 1644|    622|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|    622|                m_view = string_view_type{str};
 1646|    622|                return;
 1647|    622|            }
 1648|       |
 1649|    622|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|    622|                                                            end_seg.data());
 1651|    622|            m_storage.reset();
 1652|    622|        }
 1653|    622|        else {
 1654|    622|            auto& str = m_storage.emplace();
 1655|    622|            if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1655:27): [Folded - Ignored]
  ------------------
 1656|    622|                str.reserve(range.size());
 1657|    622|            }
 1658|    622|            if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1658:27): [Folded - Ignored]
  ------------------
 1659|    622|                std::copy(ranges::begin(range), ranges::end(range),
 1660|    622|                          std::back_inserter(str));
 1661|    622|            }
 1662|    622|            else {
 1663|    622|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|    622|                     ++it) {
 1665|    622|                    str.push_back(*it);
 1666|    622|                }
 1667|    622|            }
 1668|    622|            m_view = string_view_type{str};
 1669|    622|        }
 1670|    622|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EC2ES5_S5_l:
 2381|  15.5k|    {
 2382|  15.5k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E4baseEv:
 2412|  90.1k|    {
 2413|  90.1k|        return m_current;
 2414|  90.1k|    }
_ZN3scn2v34impl24read_while_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2116|  43.1k|{
 2117|  43.1k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  43.1k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  43.1k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  43.1k|        auto buf = make_contiguous_buffer(range);
 2121|  43.1k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  43.1k|        return ranges::next(range.begin(),
 2123|  43.1k|                            ranges::distance(buf.view().begin(), it));
 2124|  43.1k|    }
 2125|  43.1k|    else {
 2126|  43.1k|        auto it = range.begin();
 2127|       |
 2128|  43.1k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  43.1k|            auto seg = get_contiguous_beginning(range);
 2130|  43.1k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  43.1k|                seg_it != seg.end()) {
 2132|  43.1k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  43.1k|            }
 2134|  43.1k|            ranges::advance(it, seg.size());
 2135|  43.1k|        }
 2136|       |
 2137|  43.1k|        return read_while_code_point(
 2138|  43.1k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  43.1k|    }
 2140|  43.1k|}
_ZN3scn2v34impl21read_while_code_pointINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_NS1_12function_refIFbDiESG_EE:
 2081|  43.1k|{
 2082|  43.1k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  43.1k|}
_ZN3scn2v34impl21read_until_code_pointINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_NS1_12function_refIFbDiESG_EE:
 2060|  43.1k|{
 2061|  43.1k|    auto it = range.begin();
 2062|  58.9k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 57.6k, False: 1.30k]
  ------------------
 2063|  57.6k|        const auto val =
 2064|  57.6k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  57.6k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  57.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 57.6k, False: 0]
  |  |  ------------------
  ------------------
 2066|  57.6k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  57.6k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  57.6k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 41.8k, False: 15.7k]
  ------------------
 2069|  41.8k|                return it;
 2070|  41.8k|            }
 2071|  57.6k|        }
 2072|  15.7k|        it = val.iterator;
 2073|  15.7k|    }
 2074|       |
 2075|  1.30k|    return it;
 2076|  43.1k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|   193k|{
 1899|   193k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   193k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   193k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   193k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   193k|    auto it = range.begin();
 1903|   193k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   193k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   193k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 193k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|   193k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 193k, False: 0]
  ------------------
 1912|   193k|        ++it;
 1913|   193k|        return {it, string_type(1, *range.begin())};
 1914|   193k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|   193k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|   221k|{
  944|   221k|    return is_range_eof(r.begin(), r.end());
  945|   221k|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|  1.37G|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  1.37G|    {
  937|  1.37G|        return begin == end;
  938|  1.37G|    }
  939|  1.37G|}
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|  1.17k|    {
  190|  1.17k|        i = std::move(bound);
  191|  1.17k|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1889|   193k|    {
 1890|   193k|        return !codepoint.empty();
 1891|   193k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_LPv0EEEOSE_:
  753|  43.1k|    {
  754|  43.1k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_LPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  743|  57.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  57.6k|              cvref<T> obj = *get<T>(fn);
  745|  57.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  57.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  57.6k|              }
  748|  57.6k|              else {
  749|  57.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  57.6k|              }
  751|  57.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|  57.6k|    {
  684|  57.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  57.6k|            return static_cast<T*>(s.m_cp);
  686|  57.6k|        }
  687|  57.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  57.6k|            return static_cast<T*>(s.m_p);
  689|  57.6k|        }
  690|  57.6k|        else {
  691|  57.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  57.6k|        }
  693|  57.6k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2138|  57.6k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_LPv0EEEPSE_:
  661|  43.1k|        {
  662|  43.1k|        }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|  27.4k|{
  950|  27.4k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  27.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 27.4k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  27.4k|    return eof_error::good;
  954|  27.4k|}
_ZNK3scn2v34impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2831|  5.55k|    {
 2832|  5.55k|        return take_width_view{r, n};
 2833|  5.55k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2ERKS9_l:
 2800|  5.55k|    {
 2801|  5.55k|    }
_ZN3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEvEC2ERKS9_:
 2713|  5.55k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl21reader_impl_for_wcharIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERwNSN_10locale_refE:
 5698|    250|    {
 5699|    250|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5699:13): [True: 218, False: 32]
  ------------------
 5700|    250|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5700:13): [True: 0, False: 32]
  ------------------
 5701|    218|            return read_default(range, value, loc);
 5702|    218|        }
 5703|       |
 5704|     32|        reader_impl_for_int<CharT> reader{};
 5705|     32|        using integer_type =
 5706|     32|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5707|     32|        integer_type tmp_value{};
 5708|     32|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5709|     32|        value = static_cast<integer_type>(value);
 5710|     32|        return ret;
 5711|    250|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RwNS0_6detail10locale_refE:
 5682|    218|    {
 5683|    218|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    218|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5684|    218|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5684:23): [Folded - Ignored]
  ------------------
 5685|    218|            return code_point_reader<wchar_t>{}.read(range, value);
 5686|    218|        }
 5687|    218|        else {
 5688|    218|            return code_unit_reader<wchar_t>{}.read(range, value);
 5689|    218|        }
 5690|    218|    }
_ZN3scn2v34impl16code_unit_readerIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rw:
 5563|    218|    {
 5564|    218|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3672|    218|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    218|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    218|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    218|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 218]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    218|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    218|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5565|    218|        ch = *range.begin();
 5566|    218|        return it;
 5567|    218|    }
_ZN3scn2v34impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1845|  1.88k|{
 1846|  1.88k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.88k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  1.88k|    return ranges::next(range.begin());
 1851|  1.88k|}
_ZN3scn2v34impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_9eof_errorET_:
  949|  1.88k|{
  950|  1.88k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.88k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  1.88k|    return eof_error::good;
  954|  1.88k|}
_ZN3scn2v34impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEbT_:
  943|  1.88k|{
  944|  1.88k|    return is_range_eof(r.begin(), r.end());
  945|  1.88k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  927|  34.2k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  34.2k|    {
  937|  34.2k|        return begin == end;
  938|  34.2k|    }
  939|  34.2k|}
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2769|  86.4k|        {
 2770|  86.4k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2770:21): [True: 470, False: 85.9k]
  |  Branch (2770:39): [True: 470, False: 0]
  ------------------
 2771|  86.4k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2771:20): [True: 546, False: 85.4k]
  ------------------
 2772|  86.4k|        }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE3endEv:
 2815|  19.4k|    {
 2816|  19.4k|        return sentinel<true>{m_base.get().end()};
 2817|  19.4k|    }
_ZNK3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEvE3getEv:
 2716|  50.6k|    {
 2717|  50.6k|        return view;
 2718|  50.6k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE8sentinelILb1EEC2ES8_:
 2750|  19.4k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|  1.92k|    {
  296|  1.92k|        ++x;
  297|  1.92k|        return x;
  298|  1.92k|    }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 2809|  15.5k|    {
 2810|  15.5k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2811|  15.5k|                                      m_count};
 2812|  15.5k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    314|    {
 3539|    314|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    314|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    314|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    314|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    314|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 314]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    314|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    314|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    314|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    314|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 314]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    314|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 314]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    314|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    314|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 282, False: 32]
  |  |  ------------------
  ------------------
 3565|    282|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    282|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    282|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    282|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    282|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 282, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    282|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    282|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    282|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    282|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    282|    }                                                  \
  |  |  |  | 3671|    282|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|     32|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     32|            localized_number_formatting_options<CharT>{loc};
 3586|     32|#endif
 3587|       |
 3588|     32|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     32|    }                                                  \
  |  |  |  | 3671|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3325|    818|{
 3326|    818|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3672|    818|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    818|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    818|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    818|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 818]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    818|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    818|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|    818|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|    818|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|    818|        parse_integer_base_prefix(
 3331|    818|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|    818|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 818]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it = base_prefix_begin_it;
 3337|      0|        }
 3338|      0|        else {
 3339|      0|            parsed_zero = false;
 3340|      0|        }
 3341|      0|    }
 3342|    818|    else {
 3343|    818|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 0, False: 818]
  |  Branch (3343:13): [True: 818, False: 0]
  ------------------
 3344|    818|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 818, False: 0]
  ------------------
 3345|    818|            digits_begin_it = base_prefix_begin_it;
 3346|    818|        }
 3347|    818|    }
 3348|       |
 3349|    818|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 818, False: 0]
  ------------------
 3350|    818|        sign = sign_type::plus_sign;
 3351|    818|    }
 3352|    818|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|    818|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|    818|}
_ZN3scn2v34impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3140|  1.10k|{
 3141|  1.10k|    auto r = read_one_of_code_unit(range, "+-");
 3142|  1.10k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 1.10k, False: 0]
  ------------------
 3143|  1.10k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 1.10k, False: 0]
  ------------------
 3144|  1.10k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  1.10k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  1.10k|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2271|  1.10k|{
 2272|  1.10k|    auto it = read_code_unit(range);
 2273|  1.10k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.10k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  2.20k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 2.20k, False: 1.10k]
  ------------------
 2278|  2.20k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 2.20k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  2.20k|    }
 2282|       |
 2283|  1.10k|    return unexpected(parse_error::error);
 2284|  1.10k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3292|    818|{
 3293|    818|    switch (base) {
 3294|      6|        case 2:
  ------------------
  |  Branch (3294:9): [True: 6, False: 812]
  ------------------
 3295|       |            // allow 0b/0B
 3296|      6|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|      6|                    false};
 3298|       |
 3299|     30|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 30, False: 788]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     30|            bool zero_parsed = false;
 3302|     30|            auto it = apply_opt(
 3303|     30|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     30|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|    228|        case 16:
  ------------------
  |  Branch (3307:9): [True: 228, False: 590]
  ------------------
 3308|       |            // allow 0x/0X
 3309|    228|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|    228|                    false};
 3311|       |
 3312|     12|        case 0:
  ------------------
  |  Branch (3312:9): [True: 12, False: 806]
  ------------------
 3313|       |            // detect base
 3314|     12|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|    542|        default:
  ------------------
  |  Branch (3316:9): [True: 542, False: 276]
  ------------------
 3317|       |            // no base prefix allowed
 3318|    542|            return {range.begin(), base, false};
 3319|    818|    }
 3320|    818|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2290|    264|{
 2291|    264|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 264, False: 0]
  ------------------
 2292|    264|        return range.begin();
 2293|    264|    }
 2294|      0|    return *result;
 2295|    264|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3243|     18|{
 3244|     18|    return read_matching_string_classic_nocase(range, "0b");
 3245|     18|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2230|  1.12k|{
 2231|  1.12k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  1.12k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  1.12k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  1.12k|        if (range.size() < str.size()) {
 2236|  1.12k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  1.12k|        }
 2238|  1.12k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  1.12k|            return unexpected(parse_error::error);
 2240|  1.12k|        }
 2241|  1.12k|        return ranges::next(range.begin(), str.size());
 2242|  1.12k|    }
 2243|  1.12k|    else {
 2244|  1.12k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.12k|            if (ch < 'A' || ch > 'Z') {
 2246|  1.12k|                return ch;
 2247|  1.12k|            }
 2248|  1.12k|            return static_cast<char_type>(ch +
 2249|  1.12k|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.12k|        };
 2251|       |
 2252|  1.12k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  1.12k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.12k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.12k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 86, False: 1.04k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     86|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     86|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     86|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     86|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     86|    }                                                  \
  |  |  |  | 3671|  1.12k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  1.04k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  1.04k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  1.04k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  1.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.04k, False: 0]
  |  |  ------------------
  ------------------
 2257|  1.04k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  1.04k|                    return ascii_tolower(a) ==
 2259|  1.04k|                           static_cast<detail::char_t<Range>>(b);
 2260|  1.04k|                }))) {
 2261|  1.04k|            return unexpected(parse_error::error);
 2262|  1.04k|        }
 2263|       |
 2264|      0|        return it;
 2265|  1.04k|    }
 2266|  1.12k|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1856|  1.12k|{
 1857|  1.12k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  1.12k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.12k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  1.12k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  1.12k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  1.12k|        if (sz < count) {
 1862|  1.12k|            return unexpected(eof_error::eof);
 1863|  1.12k|        }
 1864|       |
 1865|  1.12k|        return ranges::next(range.begin(), count);
 1866|  1.12k|    }
 1867|  1.12k|    else {
 1868|  1.12k|        auto it = range.begin();
 1869|  1.12k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 1.12k]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  3.84k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 2.80k, False: 1.04k]
  ------------------
 1874|  2.80k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 86, False: 2.71k]
  ------------------
 1875|     86|                return unexpected(eof_error::eof);
 1876|     86|            }
 1877|  2.80k|        }
 1878|       |
 1879|  1.04k|        return it;
 1880|  1.12k|    }
 1881|  1.12k|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1094|  1.12k|{
 1095|  1.12k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|  1.12k|        return r.size();
 1097|  1.12k|    }
 1098|  1.12k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|  1.12k|                           ranges::const_iterator_t<Range>,
 1100|  1.12k|                           typename detail::basic_scan_buffer<
 1101|  1.12k|                               detail::char_t<Range>>::forward_iterator>) {
 1102|  1.12k|        if constexpr (ranges::common_range<Range>) {
 1103|  1.12k|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|  1.12k|        }
 1105|  1.12k|        else {
 1106|  1.12k|            if (r.begin().stores_parent()) {
 1107|  1.12k|                return static_cast<size_t>(
 1108|  1.12k|                    r.begin().parent()->chars_available() -
 1109|  1.12k|                    r.begin().position());
 1110|  1.12k|            }
 1111|  1.12k|            return r.begin().contiguous_segment().size();
 1112|  1.12k|        }
 1113|  1.12k|    }
 1114|  1.12k|    else {
 1115|  1.12k|        return 0;
 1116|  1.12k|    }
 1117|  1.12k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlwE_clEw:
 2244|  1.04k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.04k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 22, False: 1.01k]
  |  Branch (2245:29): [True: 1.01k, False: 0]
  ------------------
 2246|  1.04k|                return ch;
 2247|  1.04k|            }
 2248|      0|            return static_cast<char_type>(ch +
 2249|      0|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.04k|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_Rb:
 3257|     42|{
 3258|     42|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 42]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     42|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 42]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     42|    return unexpected(parse_error::error);
 3268|     42|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NDTcl4implISL_EEE4typeE:
 2145|     42|{
 2146|     42|    auto it = read_code_unit(range);
 2147|     42|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 42]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|     42|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 0]
  |  |  ------------------
  ------------------
 2152|     42|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|     42|        return unexpected(parse_error::error);
 2154|     42|    }
 2155|       |
 2156|      0|    return *it;
 2157|     42|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 1845|     42|{
 1846|     42|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 42]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|     42|    return ranges::next(range.begin());
 1851|     42|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|     42|{
  950|     42|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 42]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|     42|    return eof_error::good;
  954|     42|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  943|  32.4k|{
  944|  32.4k|    return is_range_eof(r.begin(), r.end());
  945|  32.4k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3250|    240|{
 3251|    240|    return read_matching_string_classic_nocase(range, "0x");
 3252|    240|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_:
 3273|     12|{
 3274|     12|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 12]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|     12|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 12]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|     12|    {
 3281|     12|        bool zero_parsed{false};
 3282|     12|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 12]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|     12|    }
 3286|     12|    return {range.begin(), 10, false};
 3287|     12|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3359|    754|{
 3360|    754|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|    754|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3362:19): [Folded - Ignored]
  ------------------
 3363|    754|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3364|    754|            return unexpected_scan_error(
 3365|    754|                scan_error::invalid_scanned_value,
 3366|    754|                "Failed to parse integer: No digits found");
 3367|    754|        }
 3368|    754|        return range.end();
 3369|    754|    }
 3370|    754|    else {
 3371|    754|        return read_while1_code_unit(range,
 3372|    754|                                     [&](char_type ch) noexcept {
 3373|    754|                                         return char_to_int(ch) < base;
 3374|    754|                                     })
 3375|    754|            .transform_error(map_parse_error_to_scan_error(
 3376|    754|                scan_error::invalid_scanned_value,
 3377|    754|                "Failed to parse integer: No digits found"));
 3378|    754|    }
 3379|    754|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 1995|  1.03k|{
 1996|  1.03k|    auto it = read_while_code_unit(range, pred);
 1997|  1.03k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 1.03k, False: 0]
  ------------------
 1998|  1.03k|        return unexpected(parse_error::error);
 1999|  1.03k|    }
 2000|      0|    return it;
 2001|  1.03k|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1975|  1.03k|{
 1976|  1.03k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  1.03k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1956|  1.03k|{
 1957|  1.03k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  1.03k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  1.03k|    }
 1960|  1.03k|    else {
 1961|  1.03k|        auto first = range.begin();
 1962|  1.03k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 1.03k, False: 0]
  ------------------
 1963|  1.03k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 1.03k, False: 0]
  ------------------
 1964|  1.03k|                return first;
 1965|  1.03k|            }
 1966|  1.03k|        }
 1967|      0|        return first;
 1968|  1.03k|    }
 1969|  1.03k|}
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2780|  40.2k|        {
 2781|  40.2k|            return !(y == x);
 2782|  40.2k|        }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_SV_LPv0EEEOSP_:
  753|    754|    {
  754|    754|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_SV_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  743|    754|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    754|              cvref<T> obj = *get<T>(fn);
  745|    754|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    754|                  obj(static_cast<decltype(args)>(args)...);
  747|    754|              }
  748|    754|              else {
  749|    754|                  return obj(static_cast<decltype(args)>(args)...);
  750|    754|              }
  751|    754|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlwE_EEDaNS3_7storageE:
  683|    754|    {
  684|    754|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    754|            return static_cast<T*>(s.m_cp);
  686|    754|        }
  687|    754|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    754|            return static_cast<T*>(s.m_p);
  689|    754|        }
  690|    754|        else {
  691|    754|            return reinterpret_cast<T*>(s.m_fp);
  692|    754|        }
  693|    754|    }
_ZZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlwE_clEw:
 3372|    754|                                     [&](char_type ch) noexcept {
 3373|    754|                                         return char_to_int(ch) < base;
 3374|    754|                                     })
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_LPv0EEEPSP_:
  661|    754|        {
  662|    754|        }
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEENSJ_12basic_stringIT0_NSJ_11char_traitsISS_EENSJ_9allocatorISS_EEEENSR_IcNST_IcEENSV_IcEEEEEEEEESM_iRKNS1_35localized_number_formatting_optionsISS_EE:
 3389|     64|{
 3390|     64|    std::basic_string<CharT> output;
 3391|     64|    std::string thsep_indices;
 3392|     64|    auto it = range.begin();
 3393|     64|    bool digit_matched = false;
 3394|     64|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 64, False: 0]
  ------------------
 3395|     64|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 0, False: 64]
  ------------------
 3396|      0|            thsep_indices.push_back(
 3397|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|      0|        }
 3399|     64|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 64, False: 0]
  ------------------
 3400|     64|            break;
 3401|     64|        }
 3402|      0|        else {
 3403|      0|            output.push_back(*it);
 3404|      0|            digit_matched = true;
 3405|      0|        }
 3406|     64|    }
 3407|     64|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     64|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 64, False: 0]
  |  |  ------------------
  ------------------
 3408|     64|        return unexpected_scan_error(
 3409|     64|            scan_error::invalid_scanned_value,
 3410|     64|            "Failed to parse integer: No digits found");
 3411|     64|    }
 3412|      0|    return std::tuple{it, output, thsep_indices};
 3413|     64|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E5countEv:
 2416|  87.3k|    {
 2417|  87.3k|        return m_count;
 2418|  87.3k|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERwNSL_10locale_refE:
 5698|    466|    {
 5699|    466|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5699:13): [True: 448, False: 18]
  ------------------
 5700|    466|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5700:13): [True: 0, False: 18]
  ------------------
 5701|    448|            return read_default(range, value, loc);
 5702|    448|        }
 5703|       |
 5704|     18|        reader_impl_for_int<CharT> reader{};
 5705|     18|        using integer_type =
 5706|     18|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5707|     18|        integer_type tmp_value{};
 5708|     18|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5709|     18|        value = static_cast<integer_type>(value);
 5710|     18|        return ret;
 5711|    466|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RwNS0_6detail10locale_refE:
 5682|  1.15k|    {
 5683|  1.15k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.15k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5684|  1.15k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5684:23): [Folded - Ignored]
  ------------------
 5685|  1.15k|            return code_point_reader<wchar_t>{}.read(range, value);
 5686|  1.15k|        }
 5687|  1.15k|        else {
 5688|  1.15k|            return code_unit_reader<wchar_t>{}.read(range, value);
 5689|  1.15k|        }
 5690|  1.15k|    }
_ZN3scn2v34impl16code_unit_readerIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rw:
 5563|  1.15k|    {
 5564|  1.15k|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3672|  1.15k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.15k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.15k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.15k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.15k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5565|  1.15k|        ch = *range.begin();
 5566|  1.15k|        return it;
 5567|  1.15k|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  8.36k|{
 1846|  8.36k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  8.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.36k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  8.36k|    return ranges::next(range.begin());
 1851|  8.36k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  1.37G|    {
  296|  1.37G|        ++x;
  297|  1.37G|        return x;
  298|  1.37G|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    520|    {
 3539|    520|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    520|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    520|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    520|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    520|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 520]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    520|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    520|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    520|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    520|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 520]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    520|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 520]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    520|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    520|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 484, False: 36]
  |  |  ------------------
  ------------------
 3565|    484|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    484|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    484|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    484|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    484|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 484]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    484|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    484|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    484|                    parse_integer_digits_without_thsep(
 3567|    484|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    484|                        prefix_result.parsed_base));
 3569|       |
 3570|    484|            auto buf = make_contiguous_buffer(
 3571|    484|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    484|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    484|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    484|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    484|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    484|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 484, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    484|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    484|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    484|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    484|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    484|    }                                                  \
  |  |  |  | 3671|    484|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    484|        }
 3580|       |
 3581|     36|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     36|            localized_number_formatting_options<CharT>{loc};
 3586|     36|#endif
 3587|       |
 3588|     36|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     36|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     36|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     36|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     36|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 36, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     36|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     36|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     36|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     36|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     36|    }                                                  \
  |  |  |  | 3671|     36|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3325|  3.58k|{
 3326|  3.58k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3672|  3.58k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.58k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.58k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 3.58k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  3.58k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.58k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|  3.58k|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|  3.58k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|  3.58k|        parse_integer_base_prefix(
 3331|  3.58k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|  3.58k|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 3.58k]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it = base_prefix_begin_it;
 3337|      0|        }
 3338|      0|        else {
 3339|      0|            parsed_zero = false;
 3340|      0|        }
 3341|      0|    }
 3342|  3.58k|    else {
 3343|  3.58k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 0, False: 3.58k]
  ------------------
 3344|  3.58k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 3.58k, False: 0]
  ------------------
 3345|  3.58k|            digits_begin_it = base_prefix_begin_it;
 3346|  3.58k|        }
 3347|  3.58k|    }
 3348|       |
 3349|  3.58k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 3.58k, False: 0]
  ------------------
 3350|  3.58k|        sign = sign_type::plus_sign;
 3351|  3.58k|    }
 3352|  3.58k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|  3.58k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|  3.58k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  4.77k|{
 3141|  4.77k|    auto r = read_one_of_code_unit(range, "+-");
 3142|  4.77k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 4.77k, False: 0]
  ------------------
 3143|  4.77k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 4.77k, False: 0]
  ------------------
 3144|  4.77k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  4.77k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  4.77k|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  4.77k|{
 2272|  4.77k|    auto it = read_code_unit(range);
 2273|  4.77k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  4.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.77k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  9.54k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 9.54k, False: 4.77k]
  ------------------
 2278|  9.54k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 9.54k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  9.54k|    }
 2282|       |
 2283|  4.77k|    return unexpected(parse_error::error);
 2284|  4.77k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3292|  3.58k|{
 3293|  3.58k|    switch (base) {
 3294|     12|        case 2:
  ------------------
  |  Branch (3294:9): [True: 12, False: 3.57k]
  ------------------
 3295|       |            // allow 0b/0B
 3296|     12|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|     12|                    false};
 3298|       |
 3299|     10|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 10, False: 3.57k]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     10|            bool zero_parsed = false;
 3302|     10|            auto it = apply_opt(
 3303|     10|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     10|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|  1.20k|        case 16:
  ------------------
  |  Branch (3307:9): [True: 1.20k, False: 2.38k]
  ------------------
 3308|       |            // allow 0x/0X
 3309|  1.20k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|  1.20k|                    false};
 3311|       |
 3312|     16|        case 0:
  ------------------
  |  Branch (3312:9): [True: 16, False: 3.56k]
  ------------------
 3313|       |            // detect base
 3314|     16|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|  2.34k|        default:
  ------------------
  |  Branch (3316:9): [True: 2.34k, False: 1.23k]
  ------------------
 3317|       |            // no base prefix allowed
 3318|  2.34k|            return {range.begin(), base, false};
 3319|  3.58k|    }
 3320|  3.58k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2290|  1.22k|{
 2291|  1.22k|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 1.22k, False: 0]
  ------------------
 2292|  1.22k|        return range.begin();
 2293|  1.22k|    }
 2294|      0|    return *result;
 2295|  1.22k|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3243|     28|{
 3244|     28|    return read_matching_string_classic_nocase(range, "0b");
 3245|     28|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  4.82k|{
 2231|  4.82k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  4.82k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  4.82k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  4.82k|        if (range.size() < str.size()) {
 2236|  4.82k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  4.82k|        }
 2238|  4.82k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  4.82k|            return unexpected(parse_error::error);
 2240|  4.82k|        }
 2241|  4.82k|        return ranges::next(range.begin(), str.size());
 2242|  4.82k|    }
 2243|  4.82k|    else {
 2244|  4.82k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  4.82k|            if (ch < 'A' || ch > 'Z') {
 2246|  4.82k|                return ch;
 2247|  4.82k|            }
 2248|  4.82k|            return static_cast<char_type>(ch +
 2249|  4.82k|                                          static_cast<char_type>('a' - 'A'));
 2250|  4.82k|        };
 2251|       |
 2252|  4.82k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  4.82k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  4.82k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  4.82k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4, False: 4.81k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      4|    }                                                  \
  |  |  |  | 3671|  4.82k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.81k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  4.81k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  4.81k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  4.81k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  4.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.81k, False: 0]
  |  |  ------------------
  ------------------
 2257|  4.81k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  4.81k|                    return ascii_tolower(a) ==
 2259|  4.81k|                           static_cast<detail::char_t<Range>>(b);
 2260|  4.81k|                }))) {
 2261|  4.81k|            return unexpected(parse_error::error);
 2262|  4.81k|        }
 2263|       |
 2264|      0|        return it;
 2265|  4.81k|    }
 2266|  4.82k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2244|  4.81k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  4.81k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 38, False: 4.77k]
  |  Branch (2245:29): [True: 4.77k, False: 0]
  ------------------
 2246|  4.81k|                return ch;
 2247|  4.81k|            }
 2248|      0|            return static_cast<char_type>(ch +
 2249|      0|                                          static_cast<char_type>('a' - 'A'));
 2250|  4.81k|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3257|     26|{
 3258|     26|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 26]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     26|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 26]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     26|    return unexpected(parse_error::error);
 3268|     26|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|  2.44k|{
 2146|  2.44k|    auto it = read_code_unit(range);
 2147|  2.44k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.44k]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|  2.44k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  2.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.44k, False: 0]
  |  |  ------------------
  ------------------
 2152|  2.44k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  2.44k|        return unexpected(parse_error::error);
 2154|  2.44k|    }
 2155|       |
 2156|      0|    return *it;
 2157|  2.44k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3250|  1.21k|{
 3251|  1.21k|    return read_matching_string_classic_nocase(range, "0x");
 3252|  1.21k|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3273|     16|{
 3274|     16|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 16]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|     16|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 16]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|     16|    {
 3281|     16|        bool zero_parsed{false};
 3282|     16|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 16]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|     16|    }
 3286|     16|    return {range.begin(), 10, false};
 3287|     16|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3359|  3.51k|{
 3360|  3.51k|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|  3.51k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3362:19): [Folded - Ignored]
  ------------------
 3363|  3.51k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.51k]
  |  |  ------------------
  ------------------
 3364|      0|            return unexpected_scan_error(
 3365|      0|                scan_error::invalid_scanned_value,
 3366|      0|                "Failed to parse integer: No digits found");
 3367|      0|        }
 3368|  3.51k|        return range.end();
 3369|  3.51k|    }
 3370|  3.51k|    else {
 3371|  3.51k|        return read_while1_code_unit(range,
 3372|  3.51k|                                     [&](char_type ch) noexcept {
 3373|  3.51k|                                         return char_to_int(ch) < base;
 3374|  3.51k|                                     })
 3375|  3.51k|            .transform_error(map_parse_error_to_scan_error(
 3376|  3.51k|                scan_error::invalid_scanned_value,
 3377|  3.51k|                "Failed to parse integer: No digits found"));
 3378|  3.51k|    }
 3379|  3.51k|}
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3389|     72|{
 3390|     72|    std::basic_string<CharT> output;
 3391|     72|    std::string thsep_indices;
 3392|     72|    auto it = range.begin();
 3393|     72|    bool digit_matched = false;
 3394|     72|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 72, False: 0]
  ------------------
 3395|     72|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 0, False: 72]
  ------------------
 3396|      0|            thsep_indices.push_back(
 3397|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|      0|        }
 3399|     72|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 72, False: 0]
  ------------------
 3400|     72|            break;
 3401|     72|        }
 3402|      0|        else {
 3403|      0|            output.push_back(*it);
 3404|      0|            digit_matched = true;
 3405|      0|        }
 3406|     72|    }
 3407|     72|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     72|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 72, False: 0]
  |  |  ------------------
  ------------------
 3408|     72|        return unexpected_scan_error(
 3409|     72|            scan_error::invalid_scanned_value,
 3410|     72|            "Failed to parse integer: No digits found");
 3411|     72|    }
 3412|      0|    return std::tuple{it, output, thsep_indices};
 3413|     72|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1682|  20.3k|{
 1683|  20.3k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  20.3k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  20.3k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  20.3k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  20.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  20.3k|    }
 1688|  20.3k|    else {
 1689|  20.3k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  20.3k|    }
 1691|  20.3k|}
_ZN3scn2v34impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_:
 1489|  20.3k|    {
 1490|  20.3k|    }
_ZNK3scn2v34impl19string_view_wrapperIwE4viewEv:
 1502|  24.1k|    {
 1503|  24.1k|        return sv;
 1504|  24.1k|    }
_ZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 5950|    566|{
 5951|    566|    using char_type = detail::char_t<Range>;
 5952|    566|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5953|       |
 5954|    566|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5954:9): [True: 566, False: 0]
  ------------------
 5955|    566|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5956|    566|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5957|       |
 5958|    566|        if (max_width == 0) {
  ------------------
  |  Branch (5958:13): [True: 502, False: 64]
  ------------------
 5959|    502|            auto it = read_while_code_unit(range, pred);
 5960|       |
 5961|    502|            if (want_skipped_width) {
  ------------------
  |  Branch (5961:17): [True: 42, False: 460]
  ------------------
 5962|     42|                auto prefix_width =
 5963|     42|                    static_cast<std::ptrdiff_t>(
 5964|     42|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5965|     42|                    ranges::distance(range.begin(), it);
 5966|     42|                return result_type{it, prefix_width};
 5967|     42|            }
 5968|    460|            return result_type{it, 0};
 5969|    502|        }
 5970|       |
 5971|     64|        auto max_width_view = take_width(range, max_width);
 5972|     64|        auto w_it = read_while_code_unit(max_width_view, pred);
 5973|       |
 5974|     64|        if (want_skipped_width) {
  ------------------
  |  Branch (5974:13): [True: 64, False: 0]
  ------------------
 5975|     64|            return result_type{w_it.base(), max_width - w_it.count()};
 5976|     64|        }
 5977|      0|        return result_type{w_it.base(), 0};
 5978|     64|    }
 5979|       |
 5980|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 5981|      0|    if (max_width == 0) {
  ------------------
  |  Branch (5981:9): [True: 0, False: 0]
  ------------------
 5982|      0|        auto it = read_while_code_units(range, fill_chars);
 5983|       |
 5984|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5984:13): [True: 0, False: 0]
  ------------------
 5985|      0|            auto prefix_width =
 5986|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5987|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5988|      0|            return result_type{it, prefix_width};
 5989|      0|        }
 5990|      0|        return result_type{it, 0};
 5991|      0|    }
 5992|       |
 5993|      0|    auto max_width_view = take_width(range, max_width);
 5994|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5995|       |
 5996|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (5996:9): [True: 0, False: 0]
  ------------------
 5997|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 5998|      0|    }
 5999|      0|    return result_type{w_it.base(), 0};
 6000|      0|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|    822|{
 1976|    822|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    822|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|  1.16k|{
 1957|  1.16k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  1.16k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  1.16k|    }
 1960|  1.16k|    else {
 1961|  1.16k|        auto first = range.begin();
 1962|  1.16k|        for (; first != range.end(); ++first) {
 1963|  1.16k|            if (pred(*first)) {
 1964|  1.16k|                return first;
 1965|  1.16k|            }
 1966|  1.16k|        }
 1967|  1.16k|        return first;
 1968|  1.16k|    }
 1969|  1.16k|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_LPv0EEEOSH_:
  753|    566|    {
  754|    566|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_LPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|    690|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    690|              cvref<T> obj = *get<T>(fn);
  745|    690|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    690|                  obj(static_cast<decltype(args)>(args)...);
  747|    690|              }
  748|    690|              else {
  749|    690|                  return obj(static_cast<decltype(args)>(args)...);
  750|    690|              }
  751|    690|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlwE_EEDaNS3_7storageE:
  683|    690|    {
  684|    690|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    690|            return static_cast<T*>(s.m_cp);
  686|    690|        }
  687|    690|        else if constexpr (std::is_object_v<T>) {
  688|    690|            return static_cast<T*>(s.m_p);
  689|    690|        }
  690|    690|        else {
  691|    690|            return reinterpret_cast<T*>(s.m_fp);
  692|    690|        }
  693|    690|    }
_ZZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlwE_clEw:
 5956|    690|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_LPv0EEEPKSH_:
  666|    566|        {
  667|    566|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1975|     64|{
 1976|     64|    return read_until_code_unit(range, std::not_fn(pred));
 1977|     64|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1956|    190|{
 1957|    190|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    190|        return std::find_if(range.begin(), range.end(), pred);
 1959|    190|    }
 1960|    190|    else {
 1961|    190|        auto first = range.begin();
 1962|  1.40k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 1.27k, False: 128]
  ------------------
 1963|  1.27k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 62, False: 1.21k]
  ------------------
 1964|     62|                return first;
 1965|     62|            }
 1966|  1.27k|        }
 1967|    128|        return first;
 1968|    190|    }
 1969|    190|}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 2950|    192|{
 2951|    192|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 0, False: 192]
  ------------------
 2952|      0|        auto it = read_while_classic_space(range);
 2953|      0|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|      0|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|      0|        return it;
 2959|      0|    }
 2960|       |
 2961|    192|    return read_while_classic_space(range);
 2962|    192|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2116|    192|{
 2117|    192|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|    192|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|    192|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|    192|        auto buf = make_contiguous_buffer(range);
 2121|    192|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|    192|        return ranges::next(range.begin(),
 2123|    192|                            ranges::distance(buf.view().begin(), it));
 2124|    192|    }
 2125|    192|    else {
 2126|    192|        auto it = range.begin();
 2127|       |
 2128|    192|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|    192|            auto seg = get_contiguous_beginning(range);
 2130|    192|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|    192|                seg_it != seg.end()) {
 2132|    192|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|    192|            }
 2134|    192|            ranges::advance(it, seg.size());
 2135|    192|        }
 2136|       |
 2137|    192|        return read_while_code_point(
 2138|    192|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|    192|    }
 2140|    192|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2081|    192|{
 2082|    192|    return read_until_code_point(range, std::not_fn(pred));
 2083|    192|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2060|    192|{
 2061|    192|    auto it = range.begin();
 2062|    192|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 192, False: 0]
  ------------------
 2063|    192|        const auto val =
 2064|    192|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|    192|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|    192|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 192, False: 0]
  |  |  ------------------
  ------------------
 2066|    192|            const auto cp = detail::decode_code_point_exhaustive(
 2067|    192|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|    192|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 192, False: 0]
  ------------------
 2069|    192|                return it;
 2070|    192|            }
 2071|    192|        }
 2072|      0|        it = val.iterator;
 2073|      0|    }
 2074|       |
 2075|      0|    return it;
 2076|    192|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 1898|  32.3k|{
 1899|  32.3k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  32.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  32.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  32.3k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  32.3k|    auto it = range.begin();
 1903|  32.3k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  32.3k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  32.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 32.3k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  32.3k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 32.3k, False: 0]
  ------------------
 1912|  32.3k|        ++it;
 1913|  32.3k|        return {it, string_type(1, *range.begin())};
 1914|  32.3k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|  32.3k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|    192|    {
  754|    192|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|    192|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    192|              cvref<T> obj = *get<T>(fn);
  745|    192|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    192|                  obj(static_cast<decltype(args)>(args)...);
  747|    192|              }
  748|    192|              else {
  749|    192|                  return obj(static_cast<decltype(args)>(args)...);
  750|    192|              }
  751|    192|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|    192|    {
  684|    192|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    192|            return static_cast<T*>(s.m_cp);
  686|    192|        }
  687|    192|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    192|            return static_cast<T*>(s.m_p);
  689|    192|        }
  690|    192|        else {
  691|    192|            return reinterpret_cast<T*>(s.m_fp);
  692|    192|        }
  693|    192|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2138|    192|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|    192|        {
  662|    192|        }
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  10.9k|{
 2951|  10.9k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 9.18k, False: 1.74k]
  ------------------
 2952|  9.18k|        auto it = read_while_classic_space(range);
 2953|  9.18k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  9.18k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  9.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.18k]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|  9.18k|        return it;
 2959|  9.18k|    }
 2960|       |
 2961|  1.74k|    return read_while_classic_space(range);
 2962|  10.9k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  54.1k|{
 2117|  54.1k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  54.1k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  54.1k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  54.1k|        auto buf = make_contiguous_buffer(range);
 2121|  54.1k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  54.1k|        return ranges::next(range.begin(),
 2123|  54.1k|                            ranges::distance(buf.view().begin(), it));
 2124|  54.1k|    }
 2125|  54.1k|    else {
 2126|  54.1k|        auto it = range.begin();
 2127|       |
 2128|  54.1k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  54.1k|            auto seg = get_contiguous_beginning(range);
 2130|  54.1k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  54.1k|                seg_it != seg.end()) {
 2132|  54.1k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  54.1k|            }
 2134|  54.1k|            ranges::advance(it, seg.size());
 2135|  54.1k|        }
 2136|       |
 2137|  54.1k|        return read_while_code_point(
 2138|  54.1k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  54.1k|    }
 2140|  54.1k|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|  54.9k|{
 2082|  54.9k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  54.9k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|  58.7k|{
 2061|  58.7k|    auto it = range.begin();
 2062|   139k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 136k, False: 3.65k]
  ------------------
 2063|   136k|        const auto val =
 2064|   136k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   136k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   136k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 136k, False: 0]
  |  |  ------------------
  ------------------
 2066|   136k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   136k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   136k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 55.0k, False: 80.9k]
  ------------------
 2069|  55.0k|                return it;
 2070|  55.0k|            }
 2071|   136k|        }
 2072|  80.9k|        it = val.iterator;
 2073|  80.9k|    }
 2074|       |
 2075|  3.65k|    return it;
 2076|  58.7k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|  54.1k|    {
  754|  54.1k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|  57.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  57.1k|              cvref<T> obj = *get<T>(fn);
  745|  57.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  57.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  57.1k|              }
  748|  57.1k|              else {
  749|  57.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  57.1k|              }
  751|  57.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  57.1k|    {
  684|  57.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  57.1k|            return static_cast<T*>(s.m_cp);
  686|  57.1k|        }
  687|  57.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  57.1k|            return static_cast<T*>(s.m_p);
  689|  57.1k|        }
  690|  57.1k|        else {
  691|  57.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  57.1k|        }
  693|  57.1k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2138|  57.1k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|  54.1k|        {
  662|  54.1k|        }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  26.3k|    {
 3040|  26.3k|        reader_error_handler eh{};
 3041|  26.3k|        get_derived().check_specs_impl(specs, eh);
 3042|  26.3k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  26.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.7k, False: 1.57k]
  |  |  ------------------
  ------------------
 3043|  24.7k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  24.7k|        }
 3045|  1.57k|        return {};
 3046|  26.3k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
 3050|  26.3k|    {
 3051|  26.3k|        return static_cast<Derived&>(*this);
 3052|  26.3k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3484|  26.3k|    {
 3485|  26.3k|        detail::check_int_type_specs(specs, eh);
 3486|  26.3k|    }
_ZNK3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
 3034|  2.98k|    {
 3035|  2.98k|        return true;
 3036|  2.98k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    282|    {
 3539|    282|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    282|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    282|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    282|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    282|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 282]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    282|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    282|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    282|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    282|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 282]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    282|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 282]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    282|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    282|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 250, False: 32]
  |  |  ------------------
  ------------------
 3565|    250|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    250|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    250|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    250|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    250|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 250, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    250|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    250|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    250|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    250|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    250|    }                                                  \
  |  |  |  | 3671|    250|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|     32|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     32|            localized_number_formatting_options<CharT>{loc};
 3586|     32|#endif
 3587|       |
 3588|     32|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     32|    }                                                  \
  |  |  |  | 3671|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    502|    {
 3539|    502|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    502|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    502|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    502|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    502|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 502]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    502|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    502|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    502|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    502|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 502]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    502|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 502]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    502|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    502|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 466, False: 36]
  |  |  ------------------
  ------------------
 3565|    466|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    466|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    466|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    466|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    466|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 466]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    466|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    466|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    466|                    parse_integer_digits_without_thsep(
 3567|    466|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    466|                        prefix_result.parsed_base));
 3569|       |
 3570|    466|            auto buf = make_contiguous_buffer(
 3571|    466|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    466|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    466|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    466|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    466|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    466|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 466, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    466|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    466|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    466|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    466|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    466|    }                                                  \
  |  |  |  | 3671|    466|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    466|        }
 3580|       |
 3581|     36|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     36|            localized_number_formatting_options<CharT>{loc};
 3586|     36|#endif
 3587|       |
 3588|     36|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     36|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     36|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     36|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     36|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 36, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     36|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     36|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     36|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     36|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     36|    }                                                  \
  |  |  |  | 3671|     36|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    222|    {
 3539|    222|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    222|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    222|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    222|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    222|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 222]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    222|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    222|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    222|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    222|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 222]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    222|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 222]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    222|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    222|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 222, False: 0]
  |  |  ------------------
  ------------------
 3565|    222|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    222|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    222|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    222|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    222|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 222, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    222|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    222|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    222|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    222|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    222|    }                                                  \
  |  |  |  | 3671|    222|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|  1.15k|    {
 3539|  1.15k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|  1.15k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.15k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.15k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.15k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.15k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|  1.15k|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|  1.15k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 1.15k]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|  1.15k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 1.15k]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|  1.15k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  1.15k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.15k, False: 0]
  |  |  ------------------
  ------------------
 3565|  1.15k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|  1.15k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.15k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.15k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.15k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.15k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|  1.15k|                    parse_integer_digits_without_thsep(
 3567|  1.15k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|  1.15k|                        prefix_result.parsed_base));
 3569|       |
 3570|  1.15k|            auto buf = make_contiguous_buffer(
 3571|  1.15k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|  1.15k|            SCN_TRY(result_it,
  ------------------
  |  | 3672|  1.15k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.15k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.15k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.15k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.15k|    }                                                  \
  |  |  |  | 3671|  1.15k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|  1.15k|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  13.1k|    {
 3040|  13.1k|        reader_error_handler eh{};
 3041|  13.1k|        get_derived().check_specs_impl(specs, eh);
 3042|  13.1k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  13.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.3k, False: 772]
  |  |  ------------------
  ------------------
 3043|  12.3k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  12.3k|        }
 3045|    772|        return {};
 3046|  13.1k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3050|  13.1k|    {
 3051|  13.1k|        return static_cast<Derived&>(*this);
 3052|  13.1k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|  13.1k|    {
 4145|  13.1k|        detail::check_float_type_specs(specs, eh);
 4146|  13.1k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3034|  1.47k|    {
 3035|  1.47k|        return true;
 3036|  1.47k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4216|    766|    {
 4217|    766|        unsigned options{};
 4218|    766|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 48, False: 718]
  ------------------
 4219|     48|            options |= float_reader_base::allow_thsep;
 4220|     48|        }
 4221|       |
 4222|    766|        SCN_GCC_COMPAT_PUSH
 4223|    766|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|    766|        switch (specs.type) {
 4226|     20|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 20, False: 746]
  ------------------
 4227|     20|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|     14|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 14, False: 752]
  ------------------
 4230|     14|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|     26|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 26, False: 740]
  ------------------
 4233|     26|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|      0|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 0, False: 766]
  ------------------
 4236|      0|                return options | float_reader_base::allow_scientific |
 4237|      0|                       float_reader_base::allow_fixed;
 4238|       |
 4239|    706|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 706, False: 60]
  ------------------
 4240|    706|                return options | float_reader_base::allow_scientific |
 4241|    706|                       float_reader_base::allow_fixed |
 4242|    706|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 766]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|    766|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|    766|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|    766|    }
_ZN3scn2v34impl12float_readerIwEC2Ej:
 3659|    766|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2Ev:
 1770|  1.47k|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIwEC2Ev:
 1531|  2.94k|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIwE17handle_separatorsEv:
 4056|  1.17k|    {
 4057|  1.17k|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 1.17k, False: 0]
  ------------------
 4058|  1.17k|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 1.17k, False: 0]
  ------------------
 4059|  1.17k|            return;
 4060|  1.17k|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1586|    268|    {
 1587|    268|        return m_storage.has_value();
 1588|    268|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1591|    134|    {
 1592|    134|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|    134|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    134|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|    134|        return *m_storage;
 1594|    134|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  762|    282|    {
  763|    282|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    282|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    282|    }
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3678|     32|    {
 3679|     32|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|     32|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|     32|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 32]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|     32|        return read_source_impl(range);
 3685|     32|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3704|    282|    {
 3705|    282|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|    282|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    282|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    282|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    282|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 282]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    282|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    282|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|    282|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|    282|        auto it = sign_result.first;
 3708|    282|        m_sign = sign_result.second;
 3709|       |
 3710|    282|        auto digits_begin = it;
 3711|    282|        auto r = ranges::subrange{it, range.end()};
 3712|    282|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|    282|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|    282|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|    282|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|    282|                SCN_TRY_ASSIGN(
 3717|    282|                    it,
 3718|    282|                    do_read_source_impl(
 3719|    282|                        r,
 3720|    282|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|    282|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|    282|            }
 3723|    282|            else {
 3724|    282|                auto cb = [&](const auto& rr)
 3725|    282|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    282|                    auto res = read_all(rr);
 3727|    282|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|    282|                        return unexpected_scan_error(
 3729|    282|                            scan_error::invalid_scanned_value,
 3730|    282|                            "Invalid float value");
 3731|    282|                    }
 3732|    282|                    return res;
 3733|    282|                };
 3734|    282|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|    282|            }
 3736|    282|        }
 3737|    282|        else {
 3738|    282|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|    282|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    282|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    282|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 282, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    282|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    282|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    282|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    282|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    282|    }                                                  \
  |  | 3671|    282|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    282|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|      0|                it,
 3740|      0|                do_read_source_impl(
 3741|      0|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|      0|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|      0|        }
 3744|       |
 3745|      0|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 0, False: 0]
  |  Branch (3747:48): [True: 0, False: 0]
  ------------------
 3748|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 0, False: 0]
  ------------------
 3749|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 0, False: 0]
  ------------------
 3750|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|      0|        }
 3752|       |
 3753|      0|        handle_separators();
 3754|       |
 3755|      0|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 0]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|      0|        return it;
 3768|      0|    }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 3999|    282|    {
 4000|    282|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|    282|        const bool allowed_nonhex =
 4002|    282|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|    282|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|    282|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 282, False: 0]
  |  Branch (4005:45): [True: 0, False: 282]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|    282|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 282]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|    282|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 282, False: 0]
  |  Branch (4014:45): [True: 0, False: 282]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|    282|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 282]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|    282|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 262, False: 20]
  |  Branch (4021:28): [True: 12, False: 250]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|     12|            auto it = range.begin();
 4025|       |
 4026|     12|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 0, False: 12]
  ------------------
 4027|      0|                m_kind = float_kind::hex_with_prefix;
 4028|      0|                it = *r;
 4029|      0|            }
 4030|     12|            else {
 4031|     12|                m_kind = float_kind::hex_without_prefix;
 4032|     12|            }
 4033|       |
 4034|     12|            return read_hex(ranges::subrange{it, range.end()});
 4035|     12|        }
 4036|    270|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 20, False: 250]
  |  Branch (4036:29): [True: 20, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|     20|            m_kind = float_kind::generic;
 4040|     20|            return read_regular_float(range);
 4041|     20|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|    250|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    250|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 250]
  |  |  ------------------
  ------------------
 4047|      0|            m_kind = float_kind::hex_with_prefix;
 4048|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4049|      0|        }
 4050|       |
 4051|    250|        m_kind = float_kind::generic;
 4052|    250|        return read_regular(range);
 4053|    250|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3810|    282|    {
 3811|    282|        auto it = range.begin();
 3812|    282|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 282, False: 0]
  ------------------
 3813|    282|            return unexpected(r.error());
 3814|    282|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3833|    282|    {
 3834|    282|        auto it = range.begin();
 3835|    282|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 282, False: 0]
  ------------------
 3836|    282|            return r.transform_error(map_parse_error_to_scan_error(
 3837|    282|                scan_error::invalid_scanned_value,
 3838|    282|                "Invalid floating-point NaN value"));
 3839|    282|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3803|    262|    {
 3804|    262|        return read_matching_string_classic_nocase(range, "0x");
 3805|    262|    }
_ZN3scn2v34impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3903|     12|    {
 3904|     12|        auto it = range.begin();
 3905|       |
 3906|     12|        std::ptrdiff_t digits_count = 0;
 3907|     12|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|     12|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 0]
  |  |  ------------------
  ------------------
 3909|     12|            return r.transform_error(map_parse_error_to_scan_error(
 3910|     12|                scan_error::invalid_scanned_value,
 3911|     12|                "Invalid hexadecimal floating-point value"));
 3912|     12|        }
 3913|      0|        else {
 3914|      0|            digits_count += ranges::distance(it, *r);
 3915|      0|            it = *r;
 3916|      0|        }
 3917|       |
 3918|      0|        m_integral_part_length = digits_count;
 3919|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 0, False: 0]
  ------------------
 3920|      0|                                             m_locale_options.decimal_point)) {
 3921|      0|            it = *r;
 3922|      0|        }
 3923|       |
 3924|      0|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 0, False: 0]
  ------------------
 3925|      0|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|      0|            digits_count += ranges::distance(it, *r);
 3927|      0|            it = *r;
 3928|      0|        }
 3929|       |
 3930|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|      0|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|      0|        return it;
 3938|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3788|     12|    {
 3789|     12|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12]
  |  |  |  Branch (859:45): [True: 0, False: 12]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|     12|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|     12|        return read_while1_code_unit(
 3798|     12|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|     12|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_LPv0EEEOSR_:
  753|     12|    {
  754|     12|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEwE_clES12_w:
  743|     12|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     12|              cvref<T> obj = *get<T>(fn);
  745|     12|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     12|                  obj(static_cast<decltype(args)>(args)...);
  747|     12|              }
  748|     12|              else {
  749|     12|                  return obj(static_cast<decltype(args)>(args)...);
  750|     12|              }
  751|     12|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlwE0_EEDaNS3_7storageE:
  683|     12|    {
  684|     12|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     12|            return static_cast<T*>(s.m_cp);
  686|     12|        }
  687|     12|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     12|            return static_cast<T*>(s.m_p);
  689|     12|        }
  690|     12|        else {
  691|     12|            return reinterpret_cast<T*>(s.m_fp);
  692|     12|        }
  693|     12|    }
_ZZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlwE0_clEw:
 3798|     12|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_LPv0EEEPSR_:
  661|     12|        {
  662|     12|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3943|    270|    {
 3944|    270|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|    270|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 262, False: 8]
  |  Branch (3945:50): [True: 12, False: 250]
  ------------------
 3946|       |
 3947|    270|        auto it = ranges::begin(range);
 3948|    270|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|    270|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|    270|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    270|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 270, False: 0]
  |  |  ------------------
  ------------------
 3952|    270|            return r.transform_error(
 3953|    270|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|    270|                                              "Invalid floating-point value"));
 3955|    270|        }
 3956|      0|        else {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        m_integral_part_length = digits_count;
 3962|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 0]
  ------------------
 3963|      0|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|      0|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 0]
  ------------------
 3968|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|      0|        auto beg_exp_it = it;
 3979|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 0, False: 0]
  ------------------
 3980|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|      0|        }
 3982|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 0, False: 0]
  |  Branch (3982:29): [True: 0, False: 0]
  ------------------
 3983|      0|            return unexpected_scan_error(
 3984|      0|                scan_error::invalid_scanned_value,
 3985|      0|                "No exponent given to scientific float");
 3986|      0|        }
 3987|       |
 3988|      0|        m_kind =
 3989|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 0, False: 0]
  ------------------
 3990|       |
 3991|      0|        return it;
 3992|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3773|    270|    {
 3774|    270|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|    270|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 270]
  |  |  |  Branch (859:45): [True: 0, False: 270]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|    270|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|    270|        return read_while1_code_unit(
 3783|    270|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|    270|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_LPv0EEEOSR_:
  753|    270|    {
  754|    270|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEwE_clES12_w:
  743|    270|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    270|              cvref<T> obj = *get<T>(fn);
  745|    270|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    270|                  obj(static_cast<decltype(args)>(args)...);
  747|    270|              }
  748|    270|              else {
  749|    270|                  return obj(static_cast<decltype(args)>(args)...);
  750|    270|              }
  751|    270|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlwE0_EEDaNS3_7storageE:
  683|    270|    {
  684|    270|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    270|            return static_cast<T*>(s.m_cp);
  686|    270|        }
  687|    270|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    270|            return static_cast<T*>(s.m_p);
  689|    270|        }
  690|    270|        else {
  691|    270|            return reinterpret_cast<T*>(s.m_fp);
  692|    270|        }
  693|    270|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlwE0_clEw:
 3783|    270|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_LPv0EEEPSR_:
  661|    270|        {
  662|    270|        }
_ZN3scn2v34impl12float_readerIwE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3664|    250|    {
 3665|    250|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    250|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 250]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|    250|        return read_source_impl(range);
 3671|    250|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|  1.18k|    {
  763|  1.18k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  1.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.18k|    }
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|     16|    {
 3679|     16|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|     16|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|     16|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 16]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|     16|        return read_source_impl(range);
 3685|     16|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|  1.18k|    {
 3705|  1.18k|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|  1.18k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.18k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.18k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.18k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.18k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|  1.18k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|  1.18k|        auto it = sign_result.first;
 3708|  1.18k|        m_sign = sign_result.second;
 3709|       |
 3710|  1.18k|        auto digits_begin = it;
 3711|  1.18k|        auto r = ranges::subrange{it, range.end()};
 3712|  1.18k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|  1.18k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|  1.18k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  2.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.18k]
  |  |  |  Branch (859:45): [True: 0, False: 1.18k]
  |  |  |  Branch (859:45): [True: 0, False: 1.18k]
  |  |  ------------------
  ------------------
 3715|  1.18k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      0|    }                                                  \
  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|  1.18k|            else {
 3724|  1.18k|                auto cb = [&](const auto& rr)
 3725|  1.18k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  1.18k|                    auto res = read_all(rr);
 3727|  1.18k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|  1.18k|                        return unexpected_scan_error(
 3729|  1.18k|                            scan_error::invalid_scanned_value,
 3730|  1.18k|                            "Invalid float value");
 3731|  1.18k|                    }
 3732|  1.18k|                    return res;
 3733|  1.18k|                };
 3734|  1.18k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3667|  1.18k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  1.18k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  1.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 14, False: 1.17k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|     14|    }                                                  \
  |  | 3671|  1.18k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  1.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|  1.17k|            }
 3736|  1.18k|        }
 3737|  1.17k|        else {
 3738|  1.17k|            SCN_TRY_ASSIGN(
 3739|  1.17k|                it,
 3740|  1.17k|                do_read_source_impl(
 3741|  1.17k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|  1.17k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|  1.17k|        }
 3744|       |
 3745|  1.17k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.17k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.17k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|  1.17k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 1.17k, False: 0]
  |  Branch (3747:48): [True: 1.17k, False: 0]
  ------------------
 3748|  1.17k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 1.17k, False: 0]
  ------------------
 3749|  1.17k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 1.17k, False: 0]
  ------------------
 3750|  1.17k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|  1.17k|        }
 3752|       |
 3753|  1.17k|        handle_separators();
 3754|       |
 3755|  1.17k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 1.17k]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|  1.17k|        return it;
 3768|  1.17k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|  1.18k|    {
 3811|  1.18k|        auto it = range.begin();
 3812|  1.18k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 1.18k, False: 0]
  ------------------
 3813|  1.18k|            return unexpected(r.error());
 3814|  1.18k|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|  1.18k|    {
 3834|  1.18k|        auto it = range.begin();
 3835|  1.18k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 1.18k, False: 0]
  ------------------
 3836|  1.18k|            return r.transform_error(map_parse_error_to_scan_error(
 3837|  1.18k|                scan_error::invalid_scanned_value,
 3838|  1.18k|                "Invalid floating-point NaN value"));
 3839|  1.18k|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|  1.17k|    {
 3804|  1.17k|        return read_matching_string_classic_nocase(range, "0x");
 3805|  1.17k|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|     14|{
 1996|     14|    auto it = read_while_code_unit(range, pred);
 1997|     14|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 14, False: 0]
  ------------------
 1998|     14|        return unexpected(parse_error::error);
 1999|     14|    }
 2000|      0|    return it;
 2001|     14|}
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|     14|    {
 3944|     14|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|     14|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 2, False: 12]
  |  Branch (3945:50): [True: 2, False: 0]
  ------------------
 3946|       |
 3947|     14|        auto it = ranges::begin(range);
 3948|     14|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|     14|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|     14|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14, False: 0]
  |  |  ------------------
  ------------------
 3952|     14|            return r.transform_error(
 3953|     14|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|     14|                                              "Invalid floating-point value"));
 3955|     14|        }
 3956|      0|        else {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        m_integral_part_length = digits_count;
 3962|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 0]
  ------------------
 3963|      0|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|      0|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 0]
  ------------------
 3968|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|      0|        auto beg_exp_it = it;
 3979|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 0, False: 0]
  ------------------
 3980|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|      0|        }
 3982|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 0, False: 0]
  |  Branch (3982:29): [True: 0, False: 0]
  ------------------
 3983|      0|            return unexpected_scan_error(
 3984|      0|                scan_error::invalid_scanned_value,
 3985|      0|                "No exponent given to scientific float");
 3986|      0|        }
 3987|       |
 3988|      0|        m_kind =
 3989|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 0, False: 0]
  ------------------
 3990|       |
 3991|      0|        return it;
 3992|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|     14|    {
 3774|     14|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 14]
  |  |  |  Branch (859:45): [True: 0, False: 14]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|     14|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|     14|        return read_while1_code_unit(
 3783|     14|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|     14|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_:
  753|     14|    {
  754|     14|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESU_w:
  743|     14|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     14|              cvref<T> obj = *get<T>(fn);
  745|     14|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     14|                  obj(static_cast<decltype(args)>(args)...);
  747|     14|              }
  748|     14|              else {
  749|     14|                  return obj(static_cast<decltype(args)>(args)...);
  750|     14|              }
  751|     14|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|     14|    {
  684|     14|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     14|            return static_cast<T*>(s.m_cp);
  686|     14|        }
  687|     14|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     14|            return static_cast<T*>(s.m_p);
  689|     14|        }
  690|     14|        else {
  691|     14|            return reinterpret_cast<T*>(s.m_fp);
  692|     14|        }
  693|     14|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3783|     14|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_LPv0EEEPSJ_:
  661|     14|        {
  662|     14|        }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|  1.18k|    {
 4000|  1.18k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|  1.18k|        const bool allowed_nonhex =
 4002|  1.18k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|  1.18k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|  1.18k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 1.18k, False: 0]
  |  Branch (4005:45): [True: 0, False: 1.18k]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|  1.18k|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 1.18k]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|  1.18k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 1.18k, False: 0]
  |  Branch (4014:45): [True: 0, False: 1.18k]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|  1.18k|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 1.18k]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|  1.18k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 1.17k, False: 14]
  |  Branch (4021:28): [True: 14, False: 1.16k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|     14|            auto it = range.begin();
 4025|       |
 4026|     14|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 0, False: 14]
  ------------------
 4027|      0|                m_kind = float_kind::hex_with_prefix;
 4028|      0|                it = *r;
 4029|      0|            }
 4030|     14|            else {
 4031|     14|                m_kind = float_kind::hex_without_prefix;
 4032|     14|            }
 4033|       |
 4034|     14|            return read_hex(ranges::subrange{it, range.end()});
 4035|     14|        }
 4036|  1.17k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 14, False: 1.16k]
  |  Branch (4036:29): [True: 14, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|     14|            m_kind = float_kind::generic;
 4040|     14|            return read_regular_float(range);
 4041|     14|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|  1.16k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|  1.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.16k]
  |  |  ------------------
  ------------------
 4047|      0|            m_kind = float_kind::hex_with_prefix;
 4048|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4049|      0|        }
 4050|       |
 4051|  1.16k|        m_kind = float_kind::generic;
 4052|  1.16k|        return read_regular(range);
 4053|  1.16k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|  1.17k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  1.17k|                    auto res = read_all(rr);
 3727|  1.17k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|  1.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.17k]
  |  |  ------------------
  ------------------
 3728|      0|                        return unexpected_scan_error(
 3729|      0|                            scan_error::invalid_scanned_value,
 3730|      0|                            "Invalid float value");
 3731|      0|                    }
 3732|  1.17k|                    return res;
 3733|  1.17k|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|  1.17k|{
 1839|  1.17k|    return ranges::next(range.begin(), range.end());
 1840|  1.17k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|  1.17k|    {
  313|  1.17k|        ranges::advance(x, bound);
  314|  1.17k|        return x;
  315|  1.17k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|  1.17k|    {
  275|  1.17k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|  1.17k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEvOT_:
 1576|  1.17k|    {
 1577|  1.17k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  1.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  1.17k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1620|  1.17k|    {
 1621|  1.17k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  1.17k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  1.17k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  1.17k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  1.17k|            m_storage.reset();
 1627|  1.17k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  1.17k|        }
 1629|  1.17k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|  1.17k|                                          std::basic_string<CharT>>) {
 1631|  1.17k|            m_storage.emplace(SCN_FWD(range));
 1632|  1.17k|            m_view = string_view_type{*m_storage};
 1633|  1.17k|        }
 1634|  1.17k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|  1.17k|                                          typename detail::basic_scan_buffer<
 1636|  1.17k|                                              value_t>::forward_iterator> &&
 1637|  1.17k|                           ranges::common_range<Range>) {
 1638|  1.17k|            auto beg_seg = range.begin().contiguous_segment();
 1639|  1.17k|            auto end_seg = range.end().contiguous_segment();
 1640|  1.17k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  1.17k|                             detail::to_address(end_seg.end()))) {
 1642|  1.17k|                auto& str = m_storage.emplace();
 1643|  1.17k|                str.reserve(range.end().position() - range.begin().position());
 1644|  1.17k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  1.17k|                m_view = string_view_type{str};
 1646|  1.17k|                return;
 1647|  1.17k|            }
 1648|       |
 1649|  1.17k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  1.17k|                                                            end_seg.data());
 1651|  1.17k|            m_storage.reset();
 1652|  1.17k|        }
 1653|  1.17k|        else {
 1654|  1.17k|            auto& str = m_storage.emplace();
 1655|  1.17k|            if constexpr (ranges::sized_range<Range>) {
 1656|  1.17k|                str.reserve(range.size());
 1657|  1.17k|            }
 1658|  1.17k|            if constexpr (ranges::common_range<Range>) {
 1659|  1.17k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  1.17k|                          std::back_inserter(str));
 1661|  1.17k|            }
 1662|  1.17k|            else {
 1663|  1.17k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  1.17k|                     ++it) {
 1665|  1.17k|                    str.push_back(*it);
 1666|  1.17k|                }
 1667|  1.17k|            }
 1668|  1.17k|            m_view = string_view_type{str};
 1669|  1.17k|        }
 1670|  1.17k|    }
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|  1.17k|    {
 3665|  1.17k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|  1.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.17k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|  1.17k|        return read_source_impl(range);
 3671|  1.17k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|  1.17k|    {
 3691|  1.17k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.17k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.17k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|  1.17k|        const std::ptrdiff_t sign_len =
 3694|  1.17k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 0, False: 1.17k]
  ------------------
 3695|       |
 3696|  1.17k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|  1.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.17k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.17k|    }                                                  \
  |  |  |  | 3671|  1.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|  1.17k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4169|    282|    {
 4170|    282|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|    282|#if !SCN_DISABLE_LOCALE
 4173|    282|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 32, False: 250]
  ------------------
 4174|     32|            return read_impl<Range>(
 4175|     32|                range, rd,
 4176|     32|                [](float_reader<CharT>& r, auto&&... args) {
 4177|     32|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|     32|                },
 4179|     32|                value, loc);
 4180|     32|        }
 4181|    250|#endif
 4182|       |
 4183|    250|        return read_impl<Range>(
 4184|    250|            range, rd,
 4185|    250|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    250|                return r.read_source(SCN_FWD(args)...);
 4187|    250|            },
 4188|    250|            value);
 4189|    282|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIwEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|    282|    {
 4206|    282|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|    282|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    282|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 282, False: 0]
  |  |  ------------------
  ------------------
 4208|    282|            return unexpected(r.error());
 4209|    282|        }
 4210|       |
 4211|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|      0|        return ranges::next(range.begin(), n);
 4213|      0|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_LPv0EEEOSU_:
  753|     32|    {
  754|     32|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_LPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1D_SC_SJ_SL_:
  743|     32|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     32|              cvref<T> obj = *get<T>(fn);
  745|     32|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     32|                  obj(static_cast<decltype(args)>(args)...);
  747|     32|              }
  748|     32|              else {
  749|     32|                  return obj(static_cast<decltype(args)>(args)...);
  750|     32|              }
  751|     32|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|     32|    {
  684|     32|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     32|            return static_cast<T*>(s.m_cp);
  686|     32|        }
  687|     32|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     32|            return static_cast<T*>(s.m_p);
  689|     32|        }
  690|     32|        else {
  691|     32|            return reinterpret_cast<T*>(s.m_fp);
  692|     32|        }
  693|     32|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSD_ST_EEEDaSW_SZ_:
 4176|     32|                [](float_reader<CharT>& r, auto&&... args) {
 4177|     32|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|     32|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|     32|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSL_:
  661|     32|        {
  662|     32|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_:
  753|    250|    {
  754|    250|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1D_SC_SJ_SL_:
  743|    250|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    250|              cvref<T> obj = *get<T>(fn);
  745|    250|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    250|                  obj(static_cast<decltype(args)>(args)...);
  747|    250|              }
  748|    250|              else {
  749|    250|                  return obj(static_cast<decltype(args)>(args)...);
  750|    250|              }
  751|    250|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|    250|    {
  684|    250|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    250|            return static_cast<T*>(s.m_cp);
  686|    250|        }
  687|    250|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    250|            return static_cast<T*>(s.m_p);
  689|    250|        }
  690|    250|        else {
  691|    250|            return reinterpret_cast<T*>(s.m_fp);
  692|    250|        }
  693|    250|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4185|    250|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    250|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    250|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|    250|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSL_:
  661|    250|        {
  662|    250|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|    484|    {
 4170|    484|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|    484|#if !SCN_DISABLE_LOCALE
 4173|    484|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 16, False: 468]
  ------------------
 4174|     16|            return read_impl<Range>(
 4175|     16|                range, rd,
 4176|     16|                [](float_reader<CharT>& r, auto&&... args) {
 4177|     16|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|     16|                },
 4179|     16|                value, loc);
 4180|     16|        }
 4181|    468|#endif
 4182|       |
 4183|    468|        return read_impl<Range>(
 4184|    468|            range, rd,
 4185|    468|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    468|                return r.read_source(SCN_FWD(args)...);
 4187|    468|            },
 4188|    468|            value);
 4189|    484|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|  1.18k|    {
 4206|  1.18k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|  1.18k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14, False: 1.17k]
  |  |  ------------------
  ------------------
 4208|     14|            return unexpected(r.error());
 4209|     14|        }
 4210|       |
 4211|  1.17k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|  1.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.17k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.17k|    }                                                  \
  |  |  |  | 3671|  1.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|      0|        return ranges::next(range.begin(), n);
 4213|  1.17k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|     16|    {
  754|     16|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|     16|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     16|              cvref<T> obj = *get<T>(fn);
  745|     16|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     16|                  obj(static_cast<decltype(args)>(args)...);
  747|     16|              }
  748|     16|              else {
  749|     16|                  return obj(static_cast<decltype(args)>(args)...);
  750|     16|              }
  751|     16|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|     16|    {
  684|     16|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     16|            return static_cast<T*>(s.m_cp);
  686|     16|        }
  687|     16|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     16|            return static_cast<T*>(s.m_p);
  689|     16|        }
  690|     16|        else {
  691|     16|            return reinterpret_cast<T*>(s.m_fp);
  692|     16|        }
  693|     16|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|     16|                [](float_reader<CharT>& r, auto&&... args) {
 4177|     16|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|     16|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|     16|        {
  662|     16|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|    468|    {
  754|    468|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|    468|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    468|              cvref<T> obj = *get<T>(fn);
  745|    468|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    468|                  obj(static_cast<decltype(args)>(args)...);
  747|    468|              }
  748|    468|              else {
  749|    468|                  return obj(static_cast<decltype(args)>(args)...);
  750|    468|              }
  751|    468|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|    468|    {
  684|    468|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    468|            return static_cast<T*>(s.m_cp);
  686|    468|        }
  687|    468|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    468|            return static_cast<T*>(s.m_p);
  689|    468|        }
  690|    468|        else {
  691|    468|            return reinterpret_cast<T*>(s.m_fp);
  692|    468|        }
  693|    468|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|    468|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    468|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    468|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|    468|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|    468|        {
  662|    468|        }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEwEEDav:
 5808|  13.7k|{
 5809|  13.7k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  13.7k|        return reader_impl_for_bool<CharT>{};
 5811|  13.7k|    }
 5812|  13.7k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  13.7k|        return reader_impl_for_char<CharT>{};
 5814|  13.7k|    }
 5815|  13.7k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  13.7k|        return reader_impl_for_wchar<CharT>{};
 5817|  13.7k|    }
 5818|  13.7k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  13.7k|        return reader_impl_for_code_point<CharT>{};
 5820|  13.7k|    }
 5821|  13.7k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  13.7k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  13.7k|        return reader_impl_for_string<CharT>{};
 5824|  13.7k|    }
 5825|  13.7k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  13.7k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  13.7k|        return reader_impl_for_string<CharT>{};
 5828|  13.7k|    }
 5829|  13.7k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  13.7k|                       std::is_same_v<T, wregex_matches>) {
 5831|  13.7k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  13.7k|    }
 5833|  13.7k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  13.7k|        return reader_impl_for_voidptr<CharT>{};
 5835|  13.7k|    }
 5836|  13.7k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  13.7k|        return reader_impl_for_float<CharT>{};
 5838|  13.7k|    }
 5839|  13.7k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  13.7k|                       !std::is_same_v<T, wchar_t> &&
 5841|  13.7k|                       !std::is_same_v<T, char32_t> &&
 5842|  13.7k|                       !std::is_same_v<T, bool>) {
 5843|  13.7k|        return reader_impl_for_int<CharT>{};
 5844|  13.7k|    }
 5845|  13.7k|    else {
 5846|  13.7k|        return reader_impl_for_monostate<CharT>{};
 5847|  13.7k|    }
 5848|  13.7k|}
_ZN3scn2v34impl13string_readerIwEC2Ev:
 5205|  41.2k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  39.1k|    {
 3040|  39.1k|        reader_error_handler eh{};
 3041|  39.1k|        get_derived().check_specs_impl(specs, eh);
 3042|  39.1k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  39.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 342, False: 38.8k]
  |  |  ------------------
  ------------------
 3043|    342|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|    342|        }
 3045|  38.8k|        return {};
 3046|  39.1k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3050|  39.1k|    {
 3051|  39.1k|        return static_cast<Derived&>(*this);
 3052|  39.1k|    }
_ZN3scn2v34impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5209|  39.1k|    {
 5210|  39.1k|        detail::check_string_type_specs(specs, eh);
 5211|       |
 5212|  39.1k|        SCN_GCC_PUSH
 5213|  39.1k|        SCN_GCC_IGNORE("-Wswitch")
 5214|  39.1k|        SCN_GCC_IGNORE("-Wswitch-default")
 5215|       |
 5216|  39.1k|        SCN_CLANG_PUSH
 5217|  39.1k|        SCN_CLANG_IGNORE("-Wswitch")
 5218|  39.1k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5219|       |
 5220|  39.1k|        switch (specs.type) {
  ------------------
  |  Branch (5220:17): [True: 336, False: 38.8k]
  ------------------
 5221|  2.00k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5221:13): [True: 2.00k, False: 37.1k]
  ------------------
 5222|  2.00k|                m_type = reader_type::word;
 5223|  2.00k|                break;
 5224|       |
 5225|    288|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5225:13): [True: 288, False: 38.8k]
  ------------------
 5226|    288|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5226:21): [True: 126, False: 162]
  ------------------
 5227|    288|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5227:21): [True: 108, False: 54]
  ------------------
 5228|    234|                    m_type = reader_type::custom_word;
 5229|    234|                }
 5230|     54|                else {
 5231|     54|                    m_type = reader_type::word;
 5232|     54|                }
 5233|    288|                break;
 5234|      0|            }
 5235|       |
 5236|    102|            case detail::presentation_type::character:
  ------------------
  |  Branch (5236:13): [True: 102, False: 39.0k]
  ------------------
 5237|    102|                m_type = reader_type::character;
 5238|    102|                break;
 5239|       |
 5240|  1.65k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5240:13): [True: 1.65k, False: 37.5k]
  ------------------
 5241|  1.65k|                m_type = reader_type::character_set;
 5242|  1.65k|                break;
 5243|       |
 5244|  34.1k|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5244:13): [True: 34.1k, False: 5.07k]
  ------------------
 5245|  34.1k|                m_type = reader_type::regex;
 5246|  34.1k|                break;
 5247|       |
 5248|    696|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5248:13): [True: 696, False: 38.4k]
  ------------------
 5249|    696|                m_type = reader_type::regex_escaped;
 5250|    696|                break;
 5251|  39.1k|        }
 5252|       |
 5253|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5254|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5255|  39.1k|    }
_ZNK3scn2v34impl13string_readerIwE19skip_ws_before_readEv:
 5258|  44.8k|    {
 5259|  44.8k|        return m_type == reader_type::word;
 5260|  44.8k|    }
_ZN3scn2v34impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  11.9k|{
 1132|  11.9k|    auto it = src.begin();
 1133|  99.5k|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 91.4k, False: 8.10k]
  ------------------
 1134|  91.4k|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|  91.4k|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 0, False: 91.4k]
  ------------------
 1136|      0|            return false;
 1137|      0|        }
 1138|  91.4k|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 0, False: 91.4k]
  ------------------
 1139|      0|            return false;
 1140|      0|        }
 1141|  91.4k|        const auto cp = detail::decode_code_point_exhaustive(
 1142|  91.4k|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|  91.4k|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 3.85k, False: 87.5k]
  ------------------
 1144|  3.85k|            return false;
 1145|  3.85k|        }
 1146|  87.5k|        it += len;
 1147|  87.5k|    }
 1148|  8.10k|    return true;
 1149|  11.9k|}
_ZN3scn2v34impl22transcode_if_necessaryIwcEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|    134|{
 2993|    134|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|    134|        if (source.stores_allocated_string()) {
 2995|    134|            dest.assign(SCN_MOVE(source.get_allocated_string()));
 2996|    134|        }
 2997|    134|        else {
 2998|    134|            dest.assign(source.view());
 2999|    134|        }
 3000|    134|    }
 3001|    134|    else {
 3002|    134|        return transcode_impl(source.view(), dest);
 3003|    134|    }
 3004|       |
 3005|      0|    return {};
 3006|    134|}
_ZN3scn2v34impl14transcode_implIwcEENS0_10scan_errorENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEERNS4_12basic_stringIT0_NS7_ISB_EENS4_9allocatorISB_EEEE:
 2967|  2.02k|{
 2968|  2.02k|    dst.clear();
 2969|  2.02k|    transcode_valid_to_string(src, dst);
 2970|  2.02k|    return {};
 2971|  2.02k|}
_ZN3scn2v34impl25transcode_valid_to_stringIwcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1402|  2.02k|{
 1403|  2.02k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1404|       |
 1405|  2.02k|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  |  924|  2.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1406|  2.02k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1406:19): [Folded - Ignored]
  ------------------
 1407|  2.02k|        if constexpr (sizeof(DestCharT) == 2) {
 1408|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1409|  2.02k|            std::u32string tmp;
 1410|  2.02k|            transcode_valid_to_string_impl_to32(src, tmp);
 1411|  2.02k|            return transcode_to_string_impl_32to16<true>(
 1412|  2.02k|                std::u32string_view{tmp}, dest);
 1413|  2.02k|        }
 1414|  2.02k|        else if constexpr (sizeof(DestCharT) == 4) {
 1415|  2.02k|            return transcode_valid_to_string_impl_to32(src, dest);
 1416|  2.02k|        }
 1417|  2.02k|    }
 1418|  2.02k|    else if constexpr (sizeof(SourceCharT) == 2) {
  ------------------
  |  Branch (1418:24): [Folded - Ignored]
  ------------------
 1419|  2.02k|        if constexpr (sizeof(DestCharT) == 1) {
 1420|  2.02k|            std::u32string tmp;
 1421|  2.02k|            transcode_valid_to_string_impl_to32(src, tmp);
 1422|  2.02k|            return transcode_to_string_impl_32to8<true>(
 1423|  2.02k|                std::u32string_view{tmp}, dest);
 1424|  2.02k|        }
 1425|  2.02k|        else if constexpr (sizeof(DestCharT) == 4) {
 1426|  2.02k|            return trasncode_valid_to_string_impl_to32(src, dest);
 1427|  2.02k|        }
 1428|  2.02k|    }
 1429|  2.02k|    else if constexpr (sizeof(SourceCharT) == 4) {
  ------------------
  |  Branch (1429:24): [Folded - Ignored]
  ------------------
 1430|  2.02k|        if constexpr (sizeof(DestCharT) == 1) {
  ------------------
  |  Branch (1430:23): [Folded - Ignored]
  ------------------
 1431|  2.02k|            return transcode_to_string_impl_32to8<true>(src, dest);
 1432|  2.02k|        }
 1433|  2.02k|        else if constexpr (sizeof(DestCharT) == 2) {
 1434|  2.02k|            return transcode_to_string_impl_32to16<true>(src, dest);
 1435|  2.02k|        }
 1436|  2.02k|    }
 1437|       |
 1438|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1439|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1440|      0|}
_ZN3scn2v34impl30transcode_to_string_impl_32to8ILb1EwcEEvNSt3__117basic_string_viewIT0_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT1_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1293|  2.02k|{
 1294|  2.02k|    static_assert(sizeof(SourceCharT) == 4);
 1295|  2.02k|    static_assert(sizeof(DestCharT) == 1);
 1296|       |
 1297|  15.7k|    for (auto cp : src) {
  ------------------
  |  Branch (1297:18): [True: 15.7k, False: 2.02k]
  ------------------
 1298|  15.7k|        const auto u32cp = static_cast<uint32_t>(cp);
 1299|  15.7k|        if (SCN_UNLIKELY(!VerifiedValid && cp >= detail::invalid_code_point)) {
  ------------------
  |  |  859|  15.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [Folded - Ignored]
  |  |  |  Branch (859:45): [Folded - Ignored]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1300|       |            // Replacement character
 1301|      0|            dest.push_back(static_cast<char>(0xef));
 1302|      0|            dest.push_back(static_cast<char>(0xbf));
 1303|      0|            dest.push_back(static_cast<char>(0xbd));
 1304|      0|        }
 1305|  15.7k|        else if (cp < 128) {
  ------------------
  |  Branch (1305:18): [True: 13.1k, False: 2.53k]
  ------------------
 1306|  13.1k|            dest.push_back(static_cast<char>(cp));
 1307|  13.1k|        }
 1308|  2.53k|        else if (cp < 2048) {
  ------------------
  |  Branch (1308:18): [True: 792, False: 1.74k]
  ------------------
 1309|    792|            dest.push_back(
 1310|    792|                static_cast<char>(0xc0 | (static_cast<char>(u32cp >> 6))));
 1311|    792|            dest.push_back(
 1312|    792|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1313|    792|        }
 1314|  1.74k|        else if (cp < 65536) {
  ------------------
  |  Branch (1314:18): [True: 856, False: 884]
  ------------------
 1315|    856|            dest.push_back(
 1316|    856|                static_cast<char>(0xe0 | (static_cast<char>(u32cp >> 12))));
 1317|    856|            dest.push_back(static_cast<char>(
 1318|    856|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1319|    856|            dest.push_back(
 1320|    856|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1321|    856|        }
 1322|    884|        else {
 1323|    884|            dest.push_back(
 1324|    884|                static_cast<char>(0xf0 | (static_cast<char>(u32cp >> 18))));
 1325|    884|            dest.push_back(static_cast<char>(
 1326|    884|                0x80 | (static_cast<char>(u32cp >> 12) & 0x3f)));
 1327|    884|            dest.push_back(static_cast<char>(
 1328|    884|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1329|    884|            dest.push_back(
 1330|    884|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1331|    884|        }
 1332|  15.7k|    }
 1333|  2.02k|}
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helper15handle_nonasciiEv:
 5102|  1.65k|        {
 5103|  1.65k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5103:17): [True: 546, False: 1.10k]
  ------------------
 5104|    546|                return {};
 5105|    546|            }
 5106|       |
 5107|  1.10k|            auto charset_string = specs.charset_string<SourceCharT>();
 5108|  1.10k|            auto it = detail::to_address(charset_string.begin());
 5109|  1.10k|            auto set = detail::parse_presentation_set(
 5110|  1.10k|                it, detail::to_address(charset_string.end()), nonascii);
 5111|  1.10k|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|  1.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.10k]
  |  |  ------------------
  ------------------
 5112|      0|                return nonascii.err;
 5113|      0|            }
 5114|  1.10k|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|  1.10k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.10k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5115|  1.10k|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|  1.10k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.10k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5116|       |
 5117|  1.10k|            std::sort(nonascii.extra_ranges.begin(),
 5118|  1.10k|                      nonascii.extra_ranges.end());
 5119|  1.10k|            return {};
 5120|  1.10k|        }
_ZNK3scn2v34impl25character_set_reader_implIwE20read_source_callback28on_classic_with_extra_rangesEDi:
 5137|  17.2k|        {
 5138|  17.2k|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (5138:17): [True: 3.00k, False: 14.2k]
  ------------------
 5139|  3.00k|                return helper.is_char_set_in_extra_literals(cp);
 5140|  3.00k|            }
 5141|       |
 5142|  14.2k|            return helper.is_char_set_in_literals(static_cast<char>(cp));
 5143|  17.2k|        }
_ZNK3scn2v34impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDi:
 5085|  3.00k|        {
 5086|       |            // TODO: binary search?
 5087|  3.00k|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (5087:17): [True: 0, False: 3.00k]
  ------------------
 5088|      0|                return false;
 5089|      0|            }
 5090|       |
 5091|  3.00k|            const auto cp_val = static_cast<uint32_t>(cp);
 5092|  3.00k|            return std::find_if(
 5093|  3.00k|                       nonascii.extra_ranges.begin(),
 5094|  3.00k|                       nonascii.extra_ranges.end(),
 5095|  3.00k|                       [cp_val](const auto& pair) noexcept {
 5096|  3.00k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
 5097|  3.00k|                                  static_cast<uint32_t>(pair.second) > cp_val;
 5098|  3.00k|                       }) != nonascii.extra_ranges.end();
 5099|  3.00k|        }
_ZZNK3scn2v34impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
 5095|  12.2k|                       [cp_val](const auto& pair) noexcept {
 5096|  12.2k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (5096:35): [True: 12.0k, False: 156]
  ------------------
 5097|  12.2k|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (5097:35): [True: 2.85k, False: 9.21k]
  ------------------
 5098|  12.2k|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v34impl25character_set_reader_implIwE12specs_helper23is_char_set_in_literalsEc:
 5075|  18.5k|        {
 5076|  18.5k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|  18.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5077|  18.5k|            const auto val =
 5078|  18.5k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5079|  18.5k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5080|  18.5k|                    (val % 8)) &
 5081|  18.5k|                   1u;
 5082|  18.5k|        }
_ZNK3scn2v34impl25character_set_reader_implIwE20read_source_callback13on_ascii_onlyEw:
 5128|  4.36k|        {
 5129|  4.36k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5129:17): [True: 84, False: 4.27k]
  ------------------
 5130|     84|                return false;
 5131|     84|            }
 5132|       |
 5133|  4.27k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5134|  4.36k|        }
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helperC2ERKNS0_6detail12format_specsE:
 5072|  1.65k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5276|    324|    {
 5277|    324|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    324|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    324|        return read_impl(range, specs, value);
 5279|    324|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5294|    324|    {
 5295|    324|        SCN_CLANG_PUSH
 5296|    324|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    324|        switch (m_type) {
 5299|    222|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 222, False: 102]
  ------------------
 5300|    222|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     42|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 42, False: 282]
  ------------------
 5303|     42|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     42|                                                                   value);
 5305|       |
 5306|     32|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 32, False: 292]
  ------------------
 5307|     32|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 0, False: 324]
  ------------------
 5310|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|      0|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|     10|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 10, False: 314]
  ------------------
 5315|     10|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|     10|                    range, specs.charset_string<SourceCharT>(),
 5317|     10|                    specs.regexp_flags, value);
 5318|       |
 5319|     18|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 18, False: 306]
  ------------------
 5320|     18|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|     18|                    range,
 5322|     18|                    get_unescaped_regex_pattern(
 5323|     18|                        specs.charset_string<SourceCharT>()),
 5324|     18|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 324]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    324|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    324|        }
 5331|       |
 5332|    324|        SCN_CLANG_POP
 5333|    324|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4819|    222|    {
 4820|    222|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    222|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4751|    296|{
 4752|    296|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    296|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    296|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 162, False: 134]
  ------------------
 4756|    162|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    162|                                     "Invalid encoding in scanned string");
 4758|    162|    }
 4759|    134|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    134|    static_cast<    \
  |  |  929|    134|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    134|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    134|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 134]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    134|    return SCN_MOVE(result);
  ------------------
  |  |  928|    134|    static_cast<    \
  |  |  929|    134|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    134|}
_ZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2087|    666|{
 2088|    666|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|    666|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|    666|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|    666|        auto buf = make_contiguous_buffer(range);
 2092|    666|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|    666|        return ranges::next(range.begin(),
 2094|    666|                            ranges::distance(buf.view().begin(), it));
 2095|    666|    }
 2096|    666|    else {
 2097|    666|        auto it = range.begin();
 2098|       |
 2099|    666|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|    666|            auto seg = get_contiguous_beginning(range);
 2101|    666|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|    666|                seg_it != seg.end()) {
 2103|    666|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|    666|            }
 2105|    666|            ranges::advance(it, seg.size());
 2106|    666|        }
 2107|       |
 2108|    666|        return read_until_code_point(
 2109|    666|            ranges::subrange{it, range.end()},
 2110|    666|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|    666|    }
 2112|    666|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2060|    666|{
 2061|    666|    auto it = range.begin();
 2062|  32.7k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 32.1k, False: 606]
  ------------------
 2063|  32.1k|        const auto val =
 2064|  32.1k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  32.1k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  32.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 32.1k, False: 0]
  |  |  ------------------
  ------------------
 2066|  32.1k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  32.1k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  32.1k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 60, False: 32.1k]
  ------------------
 2069|     60|                return it;
 2070|     60|            }
 2071|  32.1k|        }
 2072|  32.1k|        it = val.iterator;
 2073|  32.1k|    }
 2074|       |
 2075|    606|    return it;
 2076|    666|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|    666|    {
  754|    666|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|  32.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  32.1k|              cvref<T> obj = *get<T>(fn);
  745|  32.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  32.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  32.1k|              }
  748|  32.1k|              else {
  749|  32.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  32.1k|              }
  751|  32.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  32.1k|    {
  684|  32.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  32.1k|            return static_cast<T*>(s.m_cp);
  686|  32.1k|        }
  687|  32.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  32.1k|            return static_cast<T*>(s.m_p);
  689|  32.1k|        }
  690|  32.1k|        else {
  691|  32.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  32.1k|        }
  693|  32.1k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2110|  32.1k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|    666|        {
  662|    666|        }
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4840|     42|    {
 4841|     42|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 42, False: 0]
  ------------------
 4842|     42|            return read_string_impl(
 4843|     42|                range,
 4844|     42|                read_until_code_unit(
 4845|     42|                    range,
 4846|     42|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     42|                        SourceCharT ch) { return ch == until; }),
 4848|     42|                value);
 4849|     42|        }
 4850|      0|        return read_string_impl(
 4851|      0|            range,
 4852|      0|            read_until_code_units(
 4853|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|      0|            value);
 4855|     42|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_LPv0EEEOSL_:
  753|     42|    {
  754|     42|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES18_w:
  743|    396|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    396|              cvref<T> obj = *get<T>(fn);
  745|    396|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    396|                  obj(static_cast<decltype(args)>(args)...);
  747|    396|              }
  748|    396|              else {
  749|    396|                  return obj(static_cast<decltype(args)>(args)...);
  750|    396|              }
  751|    396|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|    396|    {
  684|    396|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    396|            return static_cast<T*>(s.m_cp);
  686|    396|        }
  687|    396|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    396|            return static_cast<T*>(s.m_p);
  689|    396|        }
  690|    396|        else {
  691|    396|            return reinterpret_cast<T*>(s.m_fp);
  692|    396|        }
  693|    396|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlwE_clEw:
 4847|    396|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_LPv0EEEPSL_:
  661|     42|        {
  662|     42|        }
_ZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4946|     32|    {
 4947|     32|        return read_impl(
 4948|     32|            range,
 4949|     32|            [&](const auto& rng) {
 4950|     32|                return read_string_impl(rng, read_all(rng), value);
 4951|     32|            },
 4952|     32|            detail::priority_tag<1>{});
 4953|     32|    }
_ZN3scn2v34impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     32|    {
 4974|     32|        return read_cb(range);
 4975|     32|    }
_ZZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4949|     32|            [&](const auto& rng) {
 4950|     32|                return read_string_impl(rng, read_all(rng), value);
 4951|     32|            },
_ZN3scn2v34impl8read_allINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 1838|     96|{
 1839|     96|    return ranges::next(range.begin(), range.end());
 1840|     96|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS1_6detail9subrange_8subrangeIS9_S9_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EESL_E4typeESL_SM_:
  312|     96|    {
  313|     96|        ranges::advance(x, bound);
  314|     96|        return x;
  315|     96|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EEvE4typeERSL_SM_:
  274|     96|    {
  275|     96|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|     96|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEvRT_T0_NS0_6detail12priority_tagILm0EEE:
  202|     96|    {
  203|  1.00k|        while (i != bound) {
  ------------------
  |  Branch (203:16): [True: 912, False: 96]
  ------------------
  204|    912|            ++i;
  205|    912|        }
  206|     96|    }
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4890|     28|    {
 4891|     28|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|     28|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     28|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     28|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     28|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 28, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     28|    }                                                  \
  |  |  |  | 3671|     28|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|     28|    }
_ZN3scn2v34impl24regex_string_reader_implIwE4implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsE:
 4912|     84|    {
 4913|     84|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|    168|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4913:23): [Folded - Ignored]
  |  Branch (4913:23): [Folded - Ignored]
  ------------------
 4914|     84|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4914:23): [Folded - Ignored]
  ------------------
 4915|     84|            return unexpected_scan_error(
 4916|     84|                scan_error::invalid_scanned_value,
 4917|     84|                "Regex backend doesn't support wide strings as input");
 4918|     84|        }
 4919|     84|        else {
 4920|     84|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4920:17): [True: 84, False: 0]
  ------------------
 4921|     84|                return unexpected_scan_error(
 4922|     84|                    scan_error::invalid_scanned_value,
 4923|     84|                    "Cannot use regex with a non-contiguous source "
 4924|     84|                    "range");
 4925|     84|            }
 4926|       |
 4927|      0|            auto input = get_as_contiguous(range);
 4928|      0|            SCN_TRY(it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4929|      0|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4930|      0|            return ranges::next(range.begin(),
 4931|      0|                                ranges::distance(input.begin(), it));
 4932|      0|        }
 4933|     84|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEbT_:
  958|     84|{
  959|     84|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|     84|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|     84|        return true;
  962|     84|    }
  963|     84|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (963:24): [Folded - Ignored]
  ------------------
  964|     84|                           ranges::const_iterator_t<Range>,
  965|     84|                           typename detail::basic_scan_buffer<
  966|     84|                               detail::char_t<Range>>::forward_iterator>) {
  967|     84|        auto beg = r.begin();
  968|     84|        if (!beg.stores_parent()) {
  969|     84|            return true;
  970|     84|        }
  971|     84|        return beg.parent()->is_contiguous();
  972|     84|    }
  973|     84|    else {
  974|     84|        return false;
  975|     84|    }
  976|     84|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  12.6k|    {
 5277|  12.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  12.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  12.6k|        return read_impl(range, specs, value);
 5279|  12.6k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  12.6k|    {
 5295|  12.6k|        SCN_CLANG_PUSH
 5296|  12.6k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  12.6k|        switch (m_type) {
 5299|    462|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 462, False: 12.1k]
  ------------------
 5300|    462|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     34|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 34, False: 12.5k]
  ------------------
 5303|     34|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     34|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 12.6k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    550|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 550, False: 12.0k]
  ------------------
 5310|    550|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    550|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  11.3k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 11.3k, False: 1.26k]
  ------------------
 5315|  11.3k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  11.3k|                    range, specs.charset_string<SourceCharT>(),
 5317|  11.3k|                    specs.regexp_flags, value);
 5318|       |
 5319|    214|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 214, False: 12.3k]
  ------------------
 5320|    214|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    214|                    range,
 5322|    214|                    get_unescaped_regex_pattern(
 5323|    214|                        specs.charset_string<SourceCharT>()),
 5324|    214|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 12.6k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  12.6k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  12.6k|        }
 5331|       |
 5332|  12.6k|        SCN_CLANG_POP
 5333|  12.6k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|  1.16k|    {
 4820|  1.16k|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|  1.16k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|  1.20k|{
 4752|  1.20k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  1.20k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  1.20k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 380, False: 820]
  ------------------
 4756|    380|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    380|                                     "Invalid encoding in scanned string");
 4758|    380|    }
 4759|    820|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    820|    static_cast<    \
  |  |  929|    820|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    820|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    820|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 820]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    820|    return SCN_MOVE(result);
  ------------------
  |  |  928|    820|    static_cast<    \
  |  |  929|    820|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    820|}
_ZN3scn2v34impl22transcode_if_necessaryIwcEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  1.89k|{
 3012|  1.89k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|  1.89k|        dest.assign(source.view());
 3014|  1.89k|    }
 3015|  1.89k|    else {
 3016|  1.89k|        return transcode_impl(source.view(), dest);
 3017|  1.89k|    }
 3018|       |
 3019|      0|    return {};
 3020|  1.89k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2087|  3.49k|{
 2088|  3.49k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  3.49k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  3.49k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  3.49k|        auto buf = make_contiguous_buffer(range);
 2092|  3.49k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  3.49k|        return ranges::next(range.begin(),
 2094|  3.49k|                            ranges::distance(buf.view().begin(), it));
 2095|  3.49k|    }
 2096|  3.49k|    else {
 2097|  3.49k|        auto it = range.begin();
 2098|       |
 2099|  3.49k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|  3.49k|            auto seg = get_contiguous_beginning(range);
 2101|  3.49k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  3.49k|                seg_it != seg.end()) {
 2103|  3.49k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  3.49k|            }
 2105|  3.49k|            ranges::advance(it, seg.size());
 2106|  3.49k|        }
 2107|       |
 2108|  3.49k|        return read_until_code_point(
 2109|  3.49k|            ranges::subrange{it, range.end()},
 2110|  3.49k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  3.49k|    }
 2112|  3.49k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|  3.49k|    {
  754|  3.49k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|  61.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  61.6k|              cvref<T> obj = *get<T>(fn);
  745|  61.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  61.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  61.6k|              }
  748|  61.6k|              else {
  749|  61.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  61.6k|              }
  751|  61.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  61.6k|    {
  684|  61.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  61.6k|            return static_cast<T*>(s.m_cp);
  686|  61.6k|        }
  687|  61.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  61.6k|            return static_cast<T*>(s.m_p);
  689|  61.6k|        }
  690|  61.6k|        else {
  691|  61.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  61.6k|        }
  693|  61.6k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2110|  61.6k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|  3.49k|        {
  662|  3.49k|        }
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4840|     34|    {
 4841|     34|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 34, False: 0]
  ------------------
 4842|     34|            return read_string_impl(
 4843|     34|                range,
 4844|     34|                read_until_code_unit(
 4845|     34|                    range,
 4846|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     34|                        SourceCharT ch) { return ch == until; }),
 4848|     34|                value);
 4849|     34|        }
 4850|      0|        return read_string_impl(
 4851|      0|            range,
 4852|      0|            read_until_code_units(
 4853|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|      0|            value);
 4855|     34|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_LPv0EEEOSJ_:
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|    806|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    806|              cvref<T> obj = *get<T>(fn);
  745|    806|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    806|                  obj(static_cast<decltype(args)>(args)...);
  747|    806|              }
  748|    806|              else {
  749|    806|                  return obj(static_cast<decltype(args)>(args)...);
  750|    806|              }
  751|    806|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    806|    {
  684|    806|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    806|            return static_cast<T*>(s.m_cp);
  686|    806|        }
  687|    806|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    806|            return static_cast<T*>(s.m_p);
  689|    806|        }
  690|    806|        else {
  691|    806|            return reinterpret_cast<T*>(s.m_fp);
  692|    806|        }
  693|    806|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlwE_clEw:
 4847|    806|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_LPv0EEEPSJ_:
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|    550|    {
 5048|    550|        auto it = read_source_impl(range, {specs});
 5049|    550|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    550|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 84, False: 466]
  |  |  ------------------
  ------------------
 5050|     84|            return unexpected(it.error());
 5051|     84|        }
 5052|       |
 5053|    466|        return read_string_impl(range, *it, value);
 5054|    550|    }
_ZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5152|  1.65k|    {
 5153|  1.65k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|  1.65k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|  1.65k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.65k]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|  1.65k|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|  1.65k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 1.10k, False: 546]
  ------------------
 5163|  1.10k|            const auto cb = [&](char32_t cp) {
 5164|  1.10k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|  1.10k|            };
 5166|       |
 5167|  1.10k|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 264, False: 840]
  ------------------
 5168|    264|                auto it = read_until_code_point(range, cb);
 5169|    264|                return check_nonempty(it, range);
 5170|    264|            }
 5171|    840|            auto it = read_while_code_point(range, cb);
 5172|    840|            return check_nonempty(it, range);
 5173|  1.10k|        }
 5174|       |
 5175|    546|        const auto cb = [&](SourceCharT ch) {
 5176|    546|            return cb_wrapper.on_ascii_only(ch);
 5177|    546|        };
 5178|       |
 5179|    546|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 240, False: 306]
  ------------------
 5180|    240|            auto it = read_until_code_unit(range, cb);
 5181|    240|            return check_nonempty(it, range);
 5182|    240|        }
 5183|    306|        auto it = read_while_code_unit(range, cb);
 5184|    306|        return check_nonempty(it, range);
 5185|    546|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_LPv0EEEOSJ_:
  753|  1.10k|    {
  754|  1.10k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESX_Di:
  743|  17.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  17.2k|              cvref<T> obj = *get<T>(fn);
  745|  17.2k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  17.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  17.2k|              }
  748|  17.2k|              else {
  749|  17.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  17.2k|              }
  751|  17.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  17.2k|    {
  684|  17.2k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  17.2k|            return static_cast<T*>(s.m_cp);
  686|  17.2k|        }
  687|  17.2k|        else if constexpr (std::is_object_v<T>) {
  688|  17.2k|            return static_cast<T*>(s.m_p);
  689|  17.2k|        }
  690|  17.2k|        else {
  691|  17.2k|            return reinterpret_cast<T*>(s.m_fp);
  692|  17.2k|        }
  693|  17.2k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlDiE_clEDi:
 5163|  17.2k|            const auto cb = [&](char32_t cp) {
 5164|  17.2k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|  17.2k|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_LPv0EEEPKSJ_:
  666|  1.10k|        {
  667|  1.10k|        }
_ZN3scn2v34impl25character_set_reader_implIwE14check_nonemptyIPKwNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5190|  1.65k|    {
 5191|  1.65k|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 252, False: 1.39k]
  ------------------
 5192|    252|            return unexpected_scan_error(
 5193|    252|                scan_error::invalid_scanned_value,
 5194|    252|                "No characters matched in [character set]");
 5195|    252|        }
 5196|       |
 5197|  1.39k|        return it;
 5198|  1.65k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_LPv0EEEOSJ_:
  753|    546|    {
  754|    546|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|  4.36k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.36k|              cvref<T> obj = *get<T>(fn);
  745|  4.36k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  4.36k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.36k|              }
  748|  4.36k|              else {
  749|  4.36k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.36k|              }
  751|  4.36k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  4.36k|    {
  684|  4.36k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  4.36k|            return static_cast<T*>(s.m_cp);
  686|  4.36k|        }
  687|  4.36k|        else if constexpr (std::is_object_v<T>) {
  688|  4.36k|            return static_cast<T*>(s.m_p);
  689|  4.36k|        }
  690|  4.36k|        else {
  691|  4.36k|            return reinterpret_cast<T*>(s.m_fp);
  692|  4.36k|        }
  693|  4.36k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlwE_clEw:
 5175|  4.36k|        const auto cb = [&](SourceCharT ch) {
 5176|  4.36k|            return cb_wrapper.on_ascii_only(ch);
 5177|  4.36k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_LPv0EEEPKSJ_:
  666|    546|        {
  667|    546|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|  1.81k|{
 4752|  1.81k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  1.81k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  1.81k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 744, False: 1.07k]
  ------------------
 4756|    744|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    744|                                     "Invalid encoding in scanned string");
 4758|    744|    }
 4759|  1.07k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  1.07k|    static_cast<    \
  |  |  929|  1.07k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|  1.07k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.07k]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|  1.07k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  1.07k|    static_cast<    \
  |  |  929|  1.07k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|  1.07k|}
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4890|  11.5k|    {
 4891|  11.5k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  11.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  11.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  11.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10.2k, False: 1.35k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  10.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  10.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  10.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  10.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  10.2k|    }                                                  \
  |  |  |  | 3671|  11.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.35k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|  1.35k|        return read_string_impl(range, it, value);
 4893|  11.5k|    }
_ZN3scn2v34impl24regex_string_reader_implIwE4implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsE:
 4912|  34.6k|    {
 4913|  34.6k|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|  69.3k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4913:23): [Folded - Ignored]
  |  Branch (4913:23): [Folded - Ignored]
  ------------------
 4914|  34.6k|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4914:23): [Folded - Ignored]
  ------------------
 4915|  34.6k|            return unexpected_scan_error(
 4916|  34.6k|                scan_error::invalid_scanned_value,
 4917|  34.6k|                "Regex backend doesn't support wide strings as input");
 4918|  34.6k|        }
 4919|  34.6k|        else {
 4920|  34.6k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4920:17): [True: 0, False: 34.6k]
  ------------------
 4921|      0|                return unexpected_scan_error(
 4922|      0|                    scan_error::invalid_scanned_value,
 4923|      0|                    "Cannot use regex with a non-contiguous source "
 4924|      0|                    "range");
 4925|      0|            }
 4926|       |
 4927|  34.6k|            auto input = get_as_contiguous(range);
 4928|  34.6k|            SCN_TRY(it,
  ------------------
  |  | 3672|  34.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  34.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  34.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  34.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 30.6k, False: 4.05k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  30.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  30.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  30.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  30.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  30.6k|    }                                                  \
  |  |  |  | 3671|  34.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4929|  4.05k|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4930|  4.05k|            return ranges::next(range.begin(),
 4931|  4.05k|                                ranges::distance(input.begin(), it));
 4932|  34.6k|        }
 4933|  34.6k|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  958|  34.6k|{
  959|  34.6k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|  34.6k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|  34.6k|        return true;
  962|  34.6k|    }
  963|  34.6k|    else if constexpr (std::is_same_v<
  964|  34.6k|                           ranges::const_iterator_t<Range>,
  965|  34.6k|                           typename detail::basic_scan_buffer<
  966|  34.6k|                               detail::char_t<Range>>::forward_iterator>) {
  967|  34.6k|        auto beg = r.begin();
  968|  34.6k|        if (!beg.stores_parent()) {
  969|  34.6k|            return true;
  970|  34.6k|        }
  971|  34.6k|        return beg.parent()->is_contiguous();
  972|  34.6k|    }
  973|  34.6k|    else {
  974|  34.6k|        return false;
  975|  34.6k|    }
  976|  34.6k|}
_ZN3scn2v34impl17get_as_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaT_:
 1064|  34.6k|{
 1065|  34.6k|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  |  924|  34.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  34.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1066|       |
 1067|  34.6k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1067:19): [Folded - Ignored]
  |  Branch (1067:19): [Folded - Ignored]
  ------------------
 1068|  34.6k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1068:19): [Folded - Ignored]
  ------------------
 1069|  34.6k|        return r;
 1070|  34.6k|    }
 1071|  34.6k|    else if constexpr (std::is_same_v<
 1072|  34.6k|                           ranges::const_iterator_t<Range>,
 1073|  34.6k|                           typename detail::basic_scan_buffer<
 1074|  34.6k|                               detail::char_t<Range>>::forward_iterator>) {
 1075|  34.6k|        if constexpr (ranges::common_range<Range>) {
 1076|  34.6k|            return detail::make_string_view_from_pointers(
 1077|  34.6k|                r.begin().to_contiguous_segment_iterator(),
 1078|  34.6k|                r.end().to_contiguous_segment_iterator());
 1079|  34.6k|        }
 1080|  34.6k|        else {
 1081|  34.6k|            return r.begin().contiguous_segment();
 1082|  34.6k|        }
 1083|  34.6k|    }
 1084|  34.6k|    else {
 1085|  34.6k|        SCN_EXPECT(false);
 1086|  34.6k|        SCN_UNREACHABLE;
 1087|       |        // for return type deduction
 1088|  34.6k|        return std::basic_string_view<detail::char_t<Range>>{};
 1089|  34.6k|    }
 1090|  34.6k|}
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  980|  34.6k|{
  981|  34.6k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  34.6k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  34.6k|        return true;
  984|  34.6k|    }
  985|  34.6k|    else if constexpr (std::is_same_v<
  986|  34.6k|                           ranges::const_iterator_t<Range>,
  987|  34.6k|                           typename detail::basic_scan_buffer<
  988|  34.6k|                               detail::char_t<Range>>::forward_iterator>) {
  989|  34.6k|        auto beg = r.begin();
  990|  34.6k|        if (beg.contiguous_segment().empty()) {
  991|  34.6k|            return false;
  992|  34.6k|        }
  993|  34.6k|        if constexpr (ranges::common_range<Range>) {
  994|  34.6k|            return beg.contiguous_segment().end() ==
  995|  34.6k|                   ranges::end(r).contiguous_segment().end();
  996|  34.6k|        }
  997|  34.6k|        else {
  998|  34.6k|            if (beg.stores_parent()) {
  999|  34.6k|                return beg.contiguous_segment().end() ==
 1000|  34.6k|                       beg.parent()->current_view().end();
 1001|  34.6k|            }
 1002|  34.6k|            return true;
 1003|  34.6k|        }
 1004|  34.6k|    }
 1005|  34.6k|    else {
 1006|  34.6k|        return false;
 1007|  34.6k|    }
 1008|  34.6k|}
_ZN3scn2v34impl22read_regex_string_implIwNS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_:
 4345|  34.6k|{
 4346|  34.6k|    static_assert(ranges::contiguous_range<Input> &&
 4347|  34.6k|                  ranges::borrowed_range<Input> &&
 4348|  34.6k|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
 4349|       |
 4350|  34.6k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 4351|  34.6k|    std::basic_regex<CharT> re{};
 4352|  34.6k|    try {
 4353|  34.6k|        SCN_TRY(re_flags, make_regex_flags(flags));
  ------------------
  |  | 3672|  34.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  34.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  34.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  34.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 34.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  34.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  34.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4354|  34.6k|        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
 4355|  34.6k|                                     re_flags | std::regex_constants::nosubs};
 4356|  34.6k|    }
 4357|  34.6k|    catch (const std::regex_error& err) {
 4358|  13.9k|        return unexpected_scan_error(scan_error::invalid_format_string,
 4359|  13.9k|                                     "Invalid regex");
 4360|  13.9k|    }
 4361|       |
 4362|  20.7k|    std::match_results<const CharT*> matches{};
 4363|  20.7k|    try {
 4364|  20.7k|        bool found = std::regex_search(input.data(),
 4365|  20.7k|                                       input.data() + input.size(), matches, re,
 4366|  20.7k|                                       std::regex_constants::match_continuous);
 4367|  20.7k|        if (!found || matches.prefix().matched) {
  ------------------
  |  Branch (4367:13): [True: 16.7k, False: 4.05k]
  |  Branch (4367:23): [True: 0, False: 4.05k]
  ------------------
 4368|  16.6k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4369|  16.6k|                                         "Regular expression didn't match");
 4370|  16.6k|        }
 4371|  20.7k|    }
 4372|  20.7k|    catch (const std::regex_error& err) {
 4373|     24|        return unexpected_scan_error(scan_error::invalid_format_string,
 4374|     24|                                     "Regex matching failed with an error");
 4375|     24|    }
 4376|       |
 4377|  4.05k|    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4378|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
 4379|       |    auto re =
 4380|       |#if SCN_REGEX_BOOST_USE_ICU
 4381|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
 4382|       |                             make_regex_flags(flags) |
 4383|       |                                 boost::regex_constants::no_except |
 4384|       |                                 boost::regex_constants::nosubs);
 4385|       |#else
 4386|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
 4387|       |                                  make_regex_flags(flags) |
 4388|       |                                      boost::regex_constants::no_except |
 4389|       |                                      boost::regex_constants::nosubs};
 4390|       |#endif
 4391|       |    if (re.status() != 0) {
 4392|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4393|       |                                     "Invalid regex");
 4394|       |    }
 4395|       |
 4396|       |    boost::match_results<const CharT*> matches{};
 4397|       |    try {
 4398|       |        bool found =
 4399|       |#if SCN_REGEX_BOOST_USE_ICU
 4400|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
 4401|       |                                   matches, re,
 4402|       |                                   boost::regex_constants::match_continuous);
 4403|       |#else
 4404|       |            boost::regex_search(input.data(), input.data() + input.size(),
 4405|       |                                matches, re,
 4406|       |                                boost::regex_constants::match_continuous);
 4407|       |#endif
 4408|       |        if (!found || matches.prefix().matched) {
 4409|       |            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4410|       |                                         "Regular expression didn't match");
 4411|       |        }
 4412|       |    }
 4413|       |    catch (const std::runtime_error& err) {
 4414|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4415|       |                                     "Regex matching failed with an error");
 4416|       |    }
 4417|       |
 4418|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4419|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
 4420|       |    static_assert(std::is_same_v<CharT, char>);
 4421|       |    std::string flagged_pattern{};
 4422|       |    auto re = [&]() {
 4423|       |        auto [opts, flagstr] = make_regex_flags(flags);
 4424|       |        opts.set_never_capture(true);
 4425|       |        if (flagstr.empty()) {
 4426|       |            return re2::RE2{pattern, opts};
 4427|       |        }
 4428|       |        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4429|       |        flagged_pattern.append(flagstr);
 4430|       |        flagged_pattern.append(pattern);
 4431|       |        return re2::RE2{flagged_pattern, opts};
 4432|       |    }();
 4433|       |    if (!re.ok()) {
 4434|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4435|       |                                     "Failed to parse regular expression");
 4436|       |    }
 4437|       |
 4438|       |    auto new_input = detail::make_string_view_from_pointers(
 4439|       |        detail::to_address(input.begin()), detail::to_address(input.end()));
 4440|       |    bool found = re2::RE2::Consume(&new_input, re);
 4441|       |    if (!found) {
 4442|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4443|       |                                     "Regular expression didn't match");
 4444|       |    }
 4445|       |    return input.begin() + ranges::distance(input.data(), new_input.data());
 4446|       |#endif  // SCN_REGEX_BACKEND == ...
 4447|  20.7k|}
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5808|  13.7k|{
 5809|  13.7k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  13.7k|        return reader_impl_for_bool<CharT>{};
 5811|  13.7k|    }
 5812|  13.7k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  13.7k|        return reader_impl_for_char<CharT>{};
 5814|  13.7k|    }
 5815|  13.7k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  13.7k|        return reader_impl_for_wchar<CharT>{};
 5817|  13.7k|    }
 5818|  13.7k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  13.7k|        return reader_impl_for_code_point<CharT>{};
 5820|  13.7k|    }
 5821|  13.7k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  13.7k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  13.7k|        return reader_impl_for_string<CharT>{};
 5824|  13.7k|    }
 5825|  13.7k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  13.7k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  13.7k|        return reader_impl_for_string<CharT>{};
 5828|  13.7k|    }
 5829|  13.7k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  13.7k|                       std::is_same_v<T, wregex_matches>) {
 5831|  13.7k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  13.7k|    }
 5833|  13.7k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  13.7k|        return reader_impl_for_voidptr<CharT>{};
 5835|  13.7k|    }
 5836|  13.7k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  13.7k|        return reader_impl_for_float<CharT>{};
 5838|  13.7k|    }
 5839|  13.7k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  13.7k|                       !std::is_same_v<T, wchar_t> &&
 5841|  13.7k|                       !std::is_same_v<T, char32_t> &&
 5842|  13.7k|                       !std::is_same_v<T, bool>) {
 5843|  13.7k|        return reader_impl_for_int<CharT>{};
 5844|  13.7k|    }
 5845|  13.7k|    else {
 5846|  13.7k|        return reader_impl_for_monostate<CharT>{};
 5847|  13.7k|    }
 5848|  13.7k|}
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|    134|{
 2993|    134|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|    134|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2994:13): [True: 134, False: 0]
  ------------------
 2995|    134|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|    134|    static_cast<    \
  |  |  929|    134|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2996|    134|        }
 2997|      0|        else {
 2998|      0|            dest.assign(source.view());
 2999|      0|        }
 3000|    134|    }
 3001|    134|    else {
 3002|    134|        return transcode_impl(source.view(), dest);
 3003|    134|    }
 3004|       |
 3005|    134|    return {};
 3006|    134|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5276|    324|    {
 5277|    324|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    324|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    324|        return read_impl(range, specs, value);
 5279|    324|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5294|    324|    {
 5295|    324|        SCN_CLANG_PUSH
 5296|    324|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    324|        switch (m_type) {
 5299|    222|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 222, False: 102]
  ------------------
 5300|    222|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     42|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 42, False: 282]
  ------------------
 5303|     42|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     42|                                                                   value);
 5305|       |
 5306|     32|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 32, False: 292]
  ------------------
 5307|     32|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 0, False: 324]
  ------------------
 5310|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|      0|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|     10|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 10, False: 314]
  ------------------
 5315|     10|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|     10|                    range, specs.charset_string<SourceCharT>(),
 5317|     10|                    specs.regexp_flags, value);
 5318|       |
 5319|     18|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 18, False: 306]
  ------------------
 5320|     18|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|     18|                    range,
 5322|     18|                    get_unescaped_regex_pattern(
 5323|     18|                        specs.charset_string<SourceCharT>()),
 5324|     18|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 324]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    324|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    324|        }
 5331|       |
 5332|    324|        SCN_CLANG_POP
 5333|    324|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4819|    222|    {
 4820|    222|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    222|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4751|    296|{
 4752|    296|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    296|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    296|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 162, False: 134]
  ------------------
 4756|    162|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    162|                                     "Invalid encoding in scanned string");
 4758|    162|    }
 4759|    134|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    134|    static_cast<    \
  |  |  929|    134|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    134|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    134|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 134]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    134|    return SCN_MOVE(result);
  ------------------
  |  |  928|    134|    static_cast<    \
  |  |  929|    134|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    134|}
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4840|     42|    {
 4841|     42|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 42, False: 0]
  ------------------
 4842|     42|            return read_string_impl(
 4843|     42|                range,
 4844|     42|                read_until_code_unit(
 4845|     42|                    range,
 4846|     42|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     42|                        SourceCharT ch) { return ch == until; }),
 4848|     42|                value);
 4849|     42|        }
 4850|      0|        return read_string_impl(
 4851|      0|            range,
 4852|      0|            read_until_code_units(
 4853|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|      0|            value);
 4855|     42|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_LPv0EEEOSL_:
  753|     42|    {
  754|     42|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES18_w:
  743|    396|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    396|              cvref<T> obj = *get<T>(fn);
  745|    396|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    396|                  obj(static_cast<decltype(args)>(args)...);
  747|    396|              }
  748|    396|              else {
  749|    396|                  return obj(static_cast<decltype(args)>(args)...);
  750|    396|              }
  751|    396|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|    396|    {
  684|    396|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    396|            return static_cast<T*>(s.m_cp);
  686|    396|        }
  687|    396|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    396|            return static_cast<T*>(s.m_p);
  689|    396|        }
  690|    396|        else {
  691|    396|            return reinterpret_cast<T*>(s.m_fp);
  692|    396|        }
  693|    396|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlwE_clEw:
 4847|    396|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_LPv0EEEPSL_:
  661|     42|        {
  662|     42|        }
_ZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4946|     32|    {
 4947|     32|        return read_impl(
 4948|     32|            range,
 4949|     32|            [&](const auto& rng) {
 4950|     32|                return read_string_impl(rng, read_all(rng), value);
 4951|     32|            },
 4952|     32|            detail::priority_tag<1>{});
 4953|     32|    }
_ZN3scn2v34impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     32|    {
 4974|     32|        return read_cb(range);
 4975|     32|    }
_ZZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4949|     32|            [&](const auto& rng) {
 4950|     32|                return read_string_impl(rng, read_all(rng), value);
 4951|     32|            },
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4890|     28|    {
 4891|     28|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|     28|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     28|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     28|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     28|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 28, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     28|    }                                                  \
  |  |  |  | 3671|     28|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|     28|    }
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  12.6k|    {
 5277|  12.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  12.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  12.6k|        return read_impl(range, specs, value);
 5279|  12.6k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  12.6k|    {
 5295|  12.6k|        SCN_CLANG_PUSH
 5296|  12.6k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  12.6k|        switch (m_type) {
 5299|    462|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 462, False: 12.1k]
  ------------------
 5300|    462|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     34|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 34, False: 12.5k]
  ------------------
 5303|     34|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     34|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 12.6k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    550|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 550, False: 12.0k]
  ------------------
 5310|    550|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    550|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  11.3k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 11.3k, False: 1.26k]
  ------------------
 5315|  11.3k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  11.3k|                    range, specs.charset_string<SourceCharT>(),
 5317|  11.3k|                    specs.regexp_flags, value);
 5318|       |
 5319|    214|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 214, False: 12.3k]
  ------------------
 5320|    214|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    214|                    range,
 5322|    214|                    get_unescaped_regex_pattern(
 5323|    214|                        specs.charset_string<SourceCharT>()),
 5324|    214|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 12.6k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  12.6k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  12.6k|        }
 5331|       |
 5332|  12.6k|        SCN_CLANG_POP
 5333|  12.6k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|  1.16k|    {
 4820|  1.16k|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|  1.16k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|  1.20k|{
 4752|  1.20k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  1.20k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  1.20k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 380, False: 820]
  ------------------
 4756|    380|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    380|                                     "Invalid encoding in scanned string");
 4758|    380|    }
 4759|    820|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    820|    static_cast<    \
  |  |  929|    820|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    820|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    820|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 820]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    820|    return SCN_MOVE(result);
  ------------------
  |  |  928|    820|    static_cast<    \
  |  |  929|    820|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    820|}
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  1.89k|{
 3012|  1.89k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|  1.89k|        dest.assign(source.view());
 3014|  1.89k|    }
 3015|  1.89k|    else {
 3016|  1.89k|        return transcode_impl(source.view(), dest);
 3017|  1.89k|    }
 3018|       |
 3019|  1.89k|    return {};
 3020|  1.89k|}
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4840|     34|    {
 4841|     34|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 34, False: 0]
  ------------------
 4842|     34|            return read_string_impl(
 4843|     34|                range,
 4844|     34|                read_until_code_unit(
 4845|     34|                    range,
 4846|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     34|                        SourceCharT ch) { return ch == until; }),
 4848|     34|                value);
 4849|     34|        }
 4850|      0|        return read_string_impl(
 4851|      0|            range,
 4852|      0|            read_until_code_units(
 4853|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|      0|            value);
 4855|     34|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_LPv0EEEOSJ_:
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|    806|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    806|              cvref<T> obj = *get<T>(fn);
  745|    806|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    806|                  obj(static_cast<decltype(args)>(args)...);
  747|    806|              }
  748|    806|              else {
  749|    806|                  return obj(static_cast<decltype(args)>(args)...);
  750|    806|              }
  751|    806|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    806|    {
  684|    806|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    806|            return static_cast<T*>(s.m_cp);
  686|    806|        }
  687|    806|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    806|            return static_cast<T*>(s.m_p);
  689|    806|        }
  690|    806|        else {
  691|    806|            return reinterpret_cast<T*>(s.m_fp);
  692|    806|        }
  693|    806|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlwE_clEw:
 4847|    806|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_LPv0EEEPSJ_:
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|    550|    {
 5048|    550|        auto it = read_source_impl(range, {specs});
 5049|    550|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    550|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 84, False: 466]
  |  |  ------------------
  ------------------
 5050|     84|            return unexpected(it.error());
 5051|     84|        }
 5052|       |
 5053|    466|        return read_string_impl(range, *it, value);
 5054|    550|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|  1.81k|{
 4752|  1.81k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  1.81k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  1.81k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 744, False: 1.07k]
  ------------------
 4756|    744|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    744|                                     "Invalid encoding in scanned string");
 4758|    744|    }
 4759|  1.07k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  1.07k|    static_cast<    \
  |  |  929|  1.07k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|  1.07k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.07k]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|  1.07k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  1.07k|    static_cast<    \
  |  |  929|  1.07k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|  1.07k|}
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4890|  11.5k|    {
 4891|  11.5k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  11.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  11.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  11.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10.2k, False: 1.35k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  10.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  10.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  10.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  10.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  10.2k|    }                                                  \
  |  |  |  | 3671|  11.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.35k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|  1.35k|        return read_string_impl(range, it, value);
 4893|  11.5k|    }
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5808|  13.7k|{
 5809|  13.7k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  13.7k|        return reader_impl_for_bool<CharT>{};
 5811|  13.7k|    }
 5812|  13.7k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  13.7k|        return reader_impl_for_char<CharT>{};
 5814|  13.7k|    }
 5815|  13.7k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  13.7k|        return reader_impl_for_wchar<CharT>{};
 5817|  13.7k|    }
 5818|  13.7k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  13.7k|        return reader_impl_for_code_point<CharT>{};
 5820|  13.7k|    }
 5821|  13.7k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  13.7k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  13.7k|        return reader_impl_for_string<CharT>{};
 5824|  13.7k|    }
 5825|  13.7k|    else if constexpr (std::is_same_v<T, std::string> ||
 5826|  13.7k|                       std::is_same_v<T, std::wstring>) {
 5827|  13.7k|        return reader_impl_for_string<CharT>{};
 5828|  13.7k|    }
 5829|  13.7k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  13.7k|                       std::is_same_v<T, wregex_matches>) {
 5831|  13.7k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  13.7k|    }
 5833|  13.7k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  13.7k|        return reader_impl_for_voidptr<CharT>{};
 5835|  13.7k|    }
 5836|  13.7k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  13.7k|        return reader_impl_for_float<CharT>{};
 5838|  13.7k|    }
 5839|  13.7k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  13.7k|                       !std::is_same_v<T, wchar_t> &&
 5841|  13.7k|                       !std::is_same_v<T, char32_t> &&
 5842|  13.7k|                       !std::is_same_v<T, bool>) {
 5843|  13.7k|        return reader_impl_for_int<CharT>{};
 5844|  13.7k|    }
 5845|  13.7k|    else {
 5846|  13.7k|        return reader_impl_for_monostate<CharT>{};
 5847|  13.7k|    }
 5848|  13.7k|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|    324|    {
 5277|    324|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    324|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    324|        return read_impl(range, specs, value);
 5279|    324|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|    324|    {
 5295|    324|        SCN_CLANG_PUSH
 5296|    324|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    324|        switch (m_type) {
 5299|    222|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 222, False: 102]
  ------------------
 5300|    222|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     42|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 42, False: 282]
  ------------------
 5303|     42|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     42|                                                                   value);
 5305|       |
 5306|     32|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 32, False: 292]
  ------------------
 5307|     32|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 0, False: 324]
  ------------------
 5310|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|      0|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|     10|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 10, False: 314]
  ------------------
 5315|     10|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|     10|                    range, specs.charset_string<SourceCharT>(),
 5317|     10|                    specs.regexp_flags, value);
 5318|       |
 5319|     18|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 18, False: 306]
  ------------------
 5320|     18|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|     18|                    range,
 5322|     18|                    get_unescaped_regex_pattern(
 5323|     18|                        specs.charset_string<SourceCharT>()),
 5324|     18|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 324]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    324|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    324|        }
 5331|       |
 5332|    324|        SCN_CLANG_POP
 5333|    324|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4826|    222|    {
 4827|    222|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|    222|                                     value);
 4829|    222|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4772|    296|{
 4773|    296|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    296|    auto src = [&]() {
 4776|    296|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    296|            return make_contiguous_buffer(
 4778|    296|                ranges::subrange{range.begin().base(), result.base()});
 4779|    296|        }
 4780|    296|        else {
 4781|    296|            return make_contiguous_buffer(
 4782|    296|                ranges::subrange{range.begin(), result});
 4783|    296|        }
 4784|    296|    }();
 4785|    296|    using src_type = decltype(src);
 4786|       |
 4787|    296|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    296|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    296|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    296|                                     "Cannot read a string_view from "
 4796|    296|                                     "this source range (would require "
 4797|    296|                                     "transcoding)");
 4798|    296|    }
 4799|    296|    else {
 4800|    296|        const auto view = src.view();
 4801|    296|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    296|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 162, False: 134]
  ------------------
 4804|    162|            return unexpected_scan_error(
 4805|    162|                scan_error::invalid_scanned_value,
 4806|    162|                "Invalid encoding in scanned string_view");
 4807|    162|        }
 4808|       |
 4809|    134|        return SCN_MOVE(result);
  ------------------
  |  |  928|    134|    static_cast<    \
  |  |  929|    134|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    296|    }
 4811|    296|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4775|    296|    auto src = [&]() {
 4776|    296|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    296|            return make_contiguous_buffer(
 4778|    296|                ranges::subrange{range.begin().base(), result.base()});
 4779|    296|        }
 4780|    296|        else {
 4781|    296|            return make_contiguous_buffer(
 4782|    296|                ranges::subrange{range.begin(), result});
 4783|    296|        }
 4784|    296|    }();
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 4862|     42|    {
 4863|     42|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4863:13): [True: 42, False: 0]
  ------------------
 4864|     42|            return read_string_view_impl(
 4865|     42|                range,
 4866|     42|                read_until_code_unit(
 4867|     42|                    range,
 4868|     42|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4869|     42|                        SourceCharT ch) { return ch == until; }),
 4870|     42|                value);
 4871|     42|        }
 4872|      0|        return read_string_view_impl(
 4873|      0|            range,
 4874|      0|            read_until_code_units(
 4875|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4876|      0|            value);
 4877|     42|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_S11_LPv0EEEOSL_:
  753|     42|    {
  754|     42|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_S11_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|    396|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    396|              cvref<T> obj = *get<T>(fn);
  745|    396|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    396|                  obj(static_cast<decltype(args)>(args)...);
  747|    396|              }
  748|    396|              else {
  749|    396|                  return obj(static_cast<decltype(args)>(args)...);
  750|    396|              }
  751|    396|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_17basic_string_viewIT0_NSI_11char_traitsISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|    396|    {
  684|    396|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    396|            return static_cast<T*>(s.m_cp);
  686|    396|        }
  687|    396|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    396|            return static_cast<T*>(s.m_p);
  689|    396|        }
  690|    396|        else {
  691|    396|            return reinterpret_cast<T*>(s.m_fp);
  692|    396|        }
  693|    396|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEEENKUlwE_clEw:
 4869|    396|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_LPv0EEEPSL_:
  661|     42|        {
  662|     42|        }
_ZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4958|     32|    {
 4959|     32|        return read_impl(
 4960|     32|            range,
 4961|     32|            [&](const auto& rng) {
 4962|     32|                return read_string_view_impl(rng, read_all(rng), value);
 4963|     32|            },
 4964|     32|            detail::priority_tag<1>{});
 4965|     32|    }
_ZN3scn2v34impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_17basic_string_viewIT0_NSG_11char_traitsISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSX_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     32|    {
 4974|     32|        return read_cb(range);
 4975|     32|    }
_ZZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEEENKUlRKSH_E_clISD_EEDaSU_:
 4961|     32|            [&](const auto& rng) {
 4962|     32|                return read_string_view_impl(rng, read_all(rng), value);
 4963|     32|            },
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSN_IT0_NSO_IST_EEEE:
 4901|     28|    {
 4902|     28|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|     28|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     28|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     28|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     28|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 28, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     28|    }                                                  \
  |  |  |  | 3671|     28|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4903|      0|        return read_string_view_impl(range, it, value);
 4904|     28|    }
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5276|  12.6k|    {
 5277|  12.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  12.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  12.6k|        return read_impl(range, specs, value);
 5279|  12.6k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5294|  12.6k|    {
 5295|  12.6k|        SCN_CLANG_PUSH
 5296|  12.6k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  12.6k|        switch (m_type) {
 5299|    462|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 462, False: 12.1k]
  ------------------
 5300|    462|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     34|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 34, False: 12.5k]
  ------------------
 5303|     34|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     34|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 12.6k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    550|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 550, False: 12.0k]
  ------------------
 5310|    550|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    550|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  11.3k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 11.3k, False: 1.26k]
  ------------------
 5315|  11.3k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  11.3k|                    range, specs.charset_string<SourceCharT>(),
 5317|  11.3k|                    specs.regexp_flags, value);
 5318|       |
 5319|    214|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 214, False: 12.3k]
  ------------------
 5320|    214|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    214|                    range,
 5322|    214|                    get_unescaped_regex_pattern(
 5323|    214|                        specs.charset_string<SourceCharT>()),
 5324|    214|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 12.6k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  12.6k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  12.6k|        }
 5331|       |
 5332|  12.6k|        SCN_CLANG_POP
 5333|  12.6k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4826|  1.16k|    {
 4827|  1.16k|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|  1.16k|                                     value);
 4829|  1.16k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4772|  1.20k|{
 4773|  1.20k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|  1.20k|    auto src = [&]() {
 4776|  1.20k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|  1.20k|            return make_contiguous_buffer(
 4778|  1.20k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  1.20k|        }
 4780|  1.20k|        else {
 4781|  1.20k|            return make_contiguous_buffer(
 4782|  1.20k|                ranges::subrange{range.begin(), result});
 4783|  1.20k|        }
 4784|  1.20k|    }();
 4785|  1.20k|    using src_type = decltype(src);
 4786|       |
 4787|  1.20k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|  1.20k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|  1.20k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|  1.20k|                                     "Cannot read a string_view from "
 4796|  1.20k|                                     "this source range (would require "
 4797|  1.20k|                                     "transcoding)");
 4798|  1.20k|    }
 4799|  1.20k|    else {
 4800|  1.20k|        const auto view = src.view();
 4801|  1.20k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|  1.20k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 380, False: 820]
  ------------------
 4804|    380|            return unexpected_scan_error(
 4805|    380|                scan_error::invalid_scanned_value,
 4806|    380|                "Invalid encoding in scanned string_view");
 4807|    380|        }
 4808|       |
 4809|    820|        return SCN_MOVE(result);
  ------------------
  |  |  928|    820|    static_cast<    \
  |  |  929|    820|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|  1.20k|    }
 4811|  1.20k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4775|  1.20k|    auto src = [&]() {
 4776|  1.20k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|  1.20k|            return make_contiguous_buffer(
 4778|  1.20k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  1.20k|        }
 4780|  1.20k|        else {
 4781|  1.20k|            return make_contiguous_buffer(
 4782|  1.20k|                ranges::subrange{range.begin(), result});
 4783|  1.20k|        }
 4784|  1.20k|    }();
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4862|     34|    {
 4863|     34|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4863:13): [True: 34, False: 0]
  ------------------
 4864|     34|            return read_string_view_impl(
 4865|     34|                range,
 4866|     34|                read_until_code_unit(
 4867|     34|                    range,
 4868|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4869|     34|                        SourceCharT ch) { return ch == until; }),
 4870|     34|                value);
 4871|     34|        }
 4872|      0|        return read_string_view_impl(
 4873|      0|            range,
 4874|      0|            read_until_code_units(
 4875|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4876|      0|            value);
 4877|     34|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_SZ_LPv0EEEOSJ_:
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_SZ_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES14_w:
  743|    806|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    806|              cvref<T> obj = *get<T>(fn);
  745|    806|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    806|                  obj(static_cast<decltype(args)>(args)...);
  747|    806|              }
  748|    806|              else {
  749|    806|                  return obj(static_cast<decltype(args)>(args)...);
  750|    806|              }
  751|    806|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_17basic_string_viewIT0_NSG_11char_traitsIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    806|    {
  684|    806|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    806|            return static_cast<T*>(s.m_cp);
  686|    806|        }
  687|    806|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    806|            return static_cast<T*>(s.m_p);
  689|    806|        }
  690|    806|        else {
  691|    806|            return reinterpret_cast<T*>(s.m_fp);
  692|    806|        }
  693|    806|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEEENKUlwE_clEw:
 4869|    806|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_LPv0EEEPSJ_:
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5061|    550|    {
 5062|    550|        auto it = read_source_impl(range, {specs});
 5063|    550|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    550|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 84, False: 466]
  |  |  ------------------
  ------------------
 5064|     84|            return unexpected(it.error());
 5065|     84|        }
 5066|       |
 5067|    466|        return read_string_view_impl(range, *it, value);
 5068|    550|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4772|  1.81k|{
 4773|  1.81k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|  1.81k|    auto src = [&]() {
 4776|  1.81k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|  1.81k|            return make_contiguous_buffer(
 4778|  1.81k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  1.81k|        }
 4780|  1.81k|        else {
 4781|  1.81k|            return make_contiguous_buffer(
 4782|  1.81k|                ranges::subrange{range.begin(), result});
 4783|  1.81k|        }
 4784|  1.81k|    }();
 4785|  1.81k|    using src_type = decltype(src);
 4786|       |
 4787|  1.81k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|  1.81k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|  1.81k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|  1.81k|                                     "Cannot read a string_view from "
 4796|  1.81k|                                     "this source range (would require "
 4797|  1.81k|                                     "transcoding)");
 4798|  1.81k|    }
 4799|  1.81k|    else {
 4800|  1.81k|        const auto view = src.view();
 4801|  1.81k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|  1.81k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 744, False: 1.07k]
  ------------------
 4804|    744|            return unexpected_scan_error(
 4805|    744|                scan_error::invalid_scanned_value,
 4806|    744|                "Invalid encoding in scanned string_view");
 4807|    744|        }
 4808|       |
 4809|  1.07k|        return SCN_MOVE(result);
  ------------------
  |  |  928|  1.07k|    static_cast<    \
  |  |  929|  1.07k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|  1.81k|    }
 4811|  1.81k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4775|  1.81k|    auto src = [&]() {
 4776|  1.81k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|  1.81k|            return make_contiguous_buffer(
 4778|  1.81k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  1.81k|        }
 4780|  1.81k|        else {
 4781|  1.81k|            return make_contiguous_buffer(
 4782|  1.81k|                ranges::subrange{range.begin(), result});
 4783|  1.81k|        }
 4784|  1.81k|    }();
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSL_IT0_NSM_ISR_EEEE:
 4901|  11.5k|    {
 4902|  11.5k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  11.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  11.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  11.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10.2k, False: 1.35k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  10.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  10.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  10.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  10.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  10.2k|    }                                                  \
  |  |  |  | 3671|  11.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.35k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4903|  1.35k|        return read_string_view_impl(range, it, value);
 4904|  11.5k|    }
_ZN3scn2v34impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1682|  10.7k|{
 1683|  10.7k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  10.7k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  10.7k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  10.7k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  10.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  10.7k|    }
 1688|  10.7k|    else {
 1689|  10.7k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  10.7k|    }
 1691|  10.7k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEELPv0EEEOT_:
 1489|  10.7k|    {
 1490|  10.7k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIdEET_S5_:
 4099|  1.05k|    {
 4100|  1.05k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 0, False: 1.05k]
  ------------------
 4101|      0|            return std::copysign(value, T{-1.0});
 4102|      0|        }
 4103|  1.05k|        return std::copysign(value, T{1.0});
 4104|  1.05k|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIdEET_S5_:
 4099|  1.17k|    {
 4100|  1.17k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 0, False: 1.17k]
  ------------------
 4101|      0|            return std::copysign(value, T{-1.0});
 4102|      0|        }
 4103|  1.17k|        return std::copysign(value, T{1.0});
 4104|  1.17k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|  6.71k|{
 5795|  6.71k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.71k]
  |  |  ------------------
  ------------------
 5796|      0|        return unexpected(e);
 5797|      0|    }
 5798|       |
 5799|  6.71k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 746, False: 5.96k]
  ------------------
 5800|    746|        return range.begin();
 5801|    746|    }
 5802|       |
 5803|  5.96k|    return skip_classic_whitespace(range);
 5804|  6.71k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
 5870|    746|    {
 5871|    746|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    746|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    746|                          basic_contiguous_scan_context<char_type>>) {
 5875|    746|            auto rd = make_reader<T, char_type>();
 5876|    746|            return impl(rd, range, value);
 5877|    746|        }
 5878|    746|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    746|            auto rd = make_reader<T, char_type>();
 5880|    746|            if (!is_segment_contiguous(range)) {
 5881|    746|                return impl(rd, range, value);
 5882|    746|            }
 5883|    746|            auto crange = get_as_contiguous(range);
 5884|    746|            SCN_TRY(it, impl(rd, crange, value));
 5885|    746|            return ranges::next(range.begin(),
 5886|    746|                                ranges::distance(crange.begin(), it));
 5887|    746|        }
 5888|    746|        else {
 5889|    746|            SCN_EXPECT(false);
 5890|    746|            SCN_UNREACHABLE;
 5891|    746|        }
 5892|    746|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    746|    {
 5863|    746|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    746|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    746|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    746|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    746|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 746]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    746|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    746|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    746|                        .transform_error(make_eof_scan_error));
 5865|    746|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    746|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|    746|    {
 3528|    746|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    746|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|    746|        return read_default_with_base(range, value, 10);
 3530|    746|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
 5870|    746|    {
 5871|    746|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    746|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    746|                          basic_contiguous_scan_context<char_type>>) {
 5875|    746|            auto rd = make_reader<T, char_type>();
 5876|    746|            return impl(rd, range, value);
 5877|    746|        }
 5878|    746|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    746|            auto rd = make_reader<T, char_type>();
 5880|    746|            if (!is_segment_contiguous(range)) {
 5881|    746|                return impl(rd, range, value);
 5882|    746|            }
 5883|    746|            auto crange = get_as_contiguous(range);
 5884|    746|            SCN_TRY(it, impl(rd, crange, value));
 5885|    746|            return ranges::next(range.begin(),
 5886|    746|                                ranges::distance(crange.begin(), it));
 5887|    746|        }
 5888|    746|        else {
 5889|    746|            SCN_EXPECT(false);
 5890|    746|            SCN_UNREACHABLE;
 5891|    746|        }
 5892|    746|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    746|    {
 5863|    746|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    746|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    746|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    746|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    746|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 746]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    746|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    746|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    746|                        .transform_error(make_eof_scan_error));
 5865|    746|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    746|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|    746|    {
 3528|    746|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    746|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|    746|        return read_default_with_base(range, value, 10);
 3530|    746|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIPvEENS0_13scan_expectedIPKcEERT_:
 5870|    746|    {
 5871|    746|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    746|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    746|                          basic_contiguous_scan_context<char_type>>) {
 5875|    746|            auto rd = make_reader<T, char_type>();
 5876|    746|            return impl(rd, range, value);
 5877|    746|        }
 5878|    746|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    746|            auto rd = make_reader<T, char_type>();
 5880|    746|            if (!is_segment_contiguous(range)) {
 5881|    746|                return impl(rd, range, value);
 5882|    746|            }
 5883|    746|            auto crange = get_as_contiguous(range);
 5884|    746|            SCN_TRY(it, impl(rd, crange, value));
 5885|    746|            return ranges::next(range.begin(),
 5886|    746|                                ranges::distance(crange.begin(), it));
 5887|    746|        }
 5888|    746|        else {
 5889|    746|            SCN_EXPECT(false);
 5890|    746|            SCN_UNREACHABLE;
 5891|    746|        }
 5892|    746|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_23reader_impl_for_voidptrIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5862|    746|    {
 5863|    746|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    746|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    746|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    746|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    746|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 746]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    746|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    746|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    746|                        .transform_error(make_eof_scan_error));
 5865|    746|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    746|    }
_ZNK3scn2v34impl23reader_impl_for_voidptrIcE19skip_ws_before_readEv:
 5747|  1.52k|    {
 5748|  1.52k|        return true;
 5749|  1.52k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5764|    988|    {
 5765|    988|        detail::format_specs specs{};
 5766|    988|        specs.type = detail::presentation_type::int_hex;
 5767|       |
 5768|    988|        std::uintptr_t intvalue{};
 5769|    988|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3672|    988|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    988|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    988|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    988|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 988, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    988|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    988|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    988|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    988|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    988|    }                                                  \
  |  |  |  | 3671|    988|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5770|      0|                                                                intvalue, loc));
 5771|      0|        value = reinterpret_cast<void*>(intvalue);
 5772|      0|        return result;
 5773|    988|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIbEENS0_13scan_expectedIPKcEERT_:
 5870|    746|    {
 5871|    746|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    746|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    746|                          basic_contiguous_scan_context<char_type>>) {
 5875|    746|            auto rd = make_reader<T, char_type>();
 5876|    746|            return impl(rd, range, value);
 5877|    746|        }
 5878|    746|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    746|            auto rd = make_reader<T, char_type>();
 5880|    746|            if (!is_segment_contiguous(range)) {
 5881|    746|                return impl(rd, range, value);
 5882|    746|            }
 5883|    746|            auto crange = get_as_contiguous(range);
 5884|    746|            SCN_TRY(it, impl(rd, crange, value));
 5885|    746|            return ranges::next(range.begin(),
 5886|    746|                                ranges::distance(crange.begin(), it));
 5887|    746|        }
 5888|    746|        else {
 5889|    746|            SCN_EXPECT(false);
 5890|    746|            SCN_UNREACHABLE;
 5891|    746|        }
 5892|    746|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_boolIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    746|    {
 5863|    746|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    746|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    746|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    746|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    746|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 746]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    746|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    746|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    746|                        .transform_error(make_eof_scan_error));
 5865|    746|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    746|    }
_ZNK3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE19skip_ws_before_readEv:
 3034|  1.83k|    {
 3035|  1.83k|        return true;
 3036|  1.83k|    }
_ZNK3scn2v34impl20reader_impl_for_boolIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5503|    746|    {
 5504|    746|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    746|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5505|       |
 5506|    746|        return bool_reader<CharT>{}.read_classic(range, value);
 5507|    746|    }
_ZN3scn2v34impl16bool_reader_baseC2Ev:
 5348|  1.45k|    constexpr bool_reader_base() = default;
_ZNK3scn2v34impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5354|  1.11k|    {
 5355|  1.11k|        scan_error err{scan_error::invalid_scanned_value,
 5356|  1.11k|                       "Failed to read boolean"};
 5357|       |
 5358|  1.11k|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5358:13): [True: 1.00k, False: 110]
  ------------------
 5359|  1.00k|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5359:22): [True: 0, False: 1.00k]
  ------------------
 5360|      0|                return *r;
 5361|      0|            }
 5362|  1.00k|            else {
 5363|  1.00k|                err = r.error();
 5364|  1.00k|            }
 5365|  1.00k|        }
 5366|       |
 5367|  1.11k|        if (m_options & allow_text) {
  ------------------
  |  Branch (5367:13): [True: 1.09k, False: 22]
  ------------------
 5368|  1.09k|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5368:22): [True: 0, False: 1.09k]
  ------------------
 5369|      0|                return *r;
 5370|      0|            }
 5371|  1.09k|            else {
 5372|  1.09k|                err = r.error();
 5373|  1.09k|            }
 5374|  1.09k|        }
 5375|       |
 5376|  1.11k|        return unexpected(err);
 5377|  1.11k|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5383|  1.06k|    {
 5384|  1.06k|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5384:18): [True: 0, False: 1.06k]
  ------------------
 5385|      0|            value = false;
 5386|      0|            return *r;
 5387|      0|        }
 5388|  1.06k|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5388:18): [True: 0, False: 1.06k]
  ------------------
 5389|      0|            value = true;
 5390|      0|            return *r;
 5391|      0|        }
 5392|       |
 5393|  1.06k|        return unexpected_scan_error(
 5394|  1.06k|            scan_error::invalid_scanned_value,
 5395|  1.06k|            "Failed to read numeric boolean value: No match");
 5396|  1.06k|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5401|  1.09k|    {
 5402|  1.09k|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5402:18): [True: 0, False: 1.09k]
  ------------------
 5403|      0|            value = true;
 5404|      0|            return *r;
 5405|      0|        }
 5406|  1.09k|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5406:18): [True: 0, False: 1.09k]
  ------------------
 5407|      0|            value = false;
 5408|      0|            return *r;
 5409|      0|        }
 5410|       |
 5411|  1.09k|        return unexpected_scan_error(
 5412|  1.09k|            scan_error::invalid_scanned_value,
 5413|  1.09k|            "Failed to read textual boolean value: No match");
 5414|  1.09k|    }
_ZN3scn2v34impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2193|  2.18k|{
 2194|  2.18k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  2.18k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.18k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.18k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 100, False: 2.08k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    100|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    100|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    100|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    100|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    100|    }                                                  \
  |  |  |  | 3671|  2.18k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.08k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|  2.08k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|  2.08k|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|  2.08k|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|  2.08k|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|  2.08k|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|  2.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.08k, False: 0]
  |  |  ------------------
  ------------------
 2201|  2.08k|            return unexpected(parse_error::error);
 2202|  2.08k|        }
 2203|      0|        return it;
 2204|  2.08k|    }
 2205|  2.08k|    else {
 2206|  2.08k|        auto range_it = range.begin();
 2207|  2.08k|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2208|  2.08k|            if (SCN_UNLIKELY(*range_it !=
 2209|  2.08k|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|  2.08k|                return unexpected(parse_error::error);
 2211|  2.08k|            }
 2212|  2.08k|        }
 2213|  2.08k|        return it;
 2214|  2.08k|    }
 2215|  2.08k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIcEENS0_13scan_expectedIPKcEERT_:
 5870|    746|    {
 5871|    746|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    746|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    746|                          basic_contiguous_scan_context<char_type>>) {
 5875|    746|            auto rd = make_reader<T, char_type>();
 5876|    746|            return impl(rd, range, value);
 5877|    746|        }
 5878|    746|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    746|            auto rd = make_reader<T, char_type>();
 5880|    746|            if (!is_segment_contiguous(range)) {
 5881|    746|                return impl(rd, range, value);
 5882|    746|            }
 5883|    746|            auto crange = get_as_contiguous(range);
 5884|    746|            SCN_TRY(it, impl(rd, crange, value));
 5885|    746|            return ranges::next(range.begin(),
 5886|    746|                                ranges::distance(crange.begin(), it));
 5887|    746|        }
 5888|    746|        else {
 5889|    746|            SCN_EXPECT(false);
 5890|    746|            SCN_UNREACHABLE;
 5891|    746|        }
 5892|    746|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_charIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    746|    {
 5863|    746|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    746|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    746|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    746|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    746|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 746]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    746|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    746|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    746|                        .transform_error(make_eof_scan_error));
 5865|    746|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    746|    }
_ZN3scn2v34impl12float_readerIcEC2Ev:
 3657|    746|    constexpr float_reader() = default;
_ZN3scn2v34impl17float_reader_baseC2Ev:
 3643|  1.45k|    constexpr float_reader_base() = default;
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 5870|    746|    {
 5871|    746|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    746|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    746|                          basic_contiguous_scan_context<char_type>>) {
 5875|    746|            auto rd = make_reader<T, char_type>();
 5876|    746|            return impl(rd, range, value);
 5877|    746|        }
 5878|    746|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    746|            auto rd = make_reader<T, char_type>();
 5880|    746|            if (!is_segment_contiguous(range)) {
 5881|    746|                return impl(rd, range, value);
 5882|    746|            }
 5883|    746|            auto crange = get_as_contiguous(range);
 5884|    746|            SCN_TRY(it, impl(rd, crange, value));
 5885|    746|            return ranges::next(range.begin(),
 5886|    746|                                ranges::distance(crange.begin(), it));
 5887|    746|        }
 5888|    746|        else {
 5889|    746|            SCN_EXPECT(false);
 5890|    746|            SCN_UNREACHABLE;
 5891|    746|        }
 5892|    746|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    746|    {
 5863|    746|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    746|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    746|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    746|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    746|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 746]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    746|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    746|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    746|                        .transform_error(make_eof_scan_error));
 5865|    746|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    746|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|    746|    {
 4152|    746|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    746|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|    746|        float_reader<CharT> rd{};
 4155|    746|        return read_impl<Range>(
 4156|    746|            range, rd,
 4157|    746|            [](float_reader<CharT>& r, auto&&... args) {
 4158|    746|                return r.read_source(SCN_FWD(args)...);
 4159|    746|            },
 4160|    746|            value);
 4161|    746|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|    746|    {
  754|    746|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|    746|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    746|              cvref<T> obj = *get<T>(fn);
  745|    746|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    746|                  obj(static_cast<decltype(args)>(args)...);
  747|    746|              }
  748|    746|              else {
  749|    746|                  return obj(static_cast<decltype(args)>(args)...);
  750|    746|              }
  751|    746|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|    746|    {
  684|    746|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    746|            return static_cast<T*>(s.m_cp);
  686|    746|        }
  687|    746|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    746|            return static_cast<T*>(s.m_p);
  689|    746|        }
  690|    746|        else {
  691|    746|            return reinterpret_cast<T*>(s.m_fp);
  692|    746|        }
  693|    746|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|    746|            [](float_reader<CharT>& r, auto&&... args) {
 4158|    746|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    746|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|    746|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|    746|        {
  662|    746|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|    746|    {
 5871|    746|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    746|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    746|                          basic_contiguous_scan_context<char_type>>) {
 5875|    746|            auto rd = make_reader<T, char_type>();
 5876|    746|            return impl(rd, range, value);
 5877|    746|        }
 5878|    746|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    746|            auto rd = make_reader<T, char_type>();
 5880|    746|            if (!is_segment_contiguous(range)) {
 5881|    746|                return impl(rd, range, value);
 5882|    746|            }
 5883|    746|            auto crange = get_as_contiguous(range);
 5884|    746|            SCN_TRY(it, impl(rd, crange, value));
 5885|    746|            return ranges::next(range.begin(),
 5886|    746|                                ranges::distance(crange.begin(), it));
 5887|    746|        }
 5888|    746|        else {
 5889|    746|            SCN_EXPECT(false);
 5890|    746|            SCN_UNREACHABLE;
 5891|    746|        }
 5892|    746|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5862|    746|    {
 5863|    746|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    746|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    746|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    746|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    746|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 746]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    746|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    746|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    746|                        .transform_error(make_eof_scan_error));
 5865|    746|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    746|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5265|    746|    {
 5266|    746|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    746|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    746|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    746|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|    746|    {
 5871|    746|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    746|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    746|                          basic_contiguous_scan_context<char_type>>) {
 5875|    746|            auto rd = make_reader<T, char_type>();
 5876|    746|            return impl(rd, range, value);
 5877|    746|        }
 5878|    746|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    746|            auto rd = make_reader<T, char_type>();
 5880|    746|            if (!is_segment_contiguous(range)) {
 5881|    746|                return impl(rd, range, value);
 5882|    746|            }
 5883|    746|            auto crange = get_as_contiguous(range);
 5884|    746|            SCN_TRY(it, impl(rd, crange, value));
 5885|    746|            return ranges::next(range.begin(),
 5886|    746|                                ranges::distance(crange.begin(), it));
 5887|    746|        }
 5888|    746|        else {
 5889|    746|            SCN_EXPECT(false);
 5890|    746|            SCN_UNREACHABLE;
 5891|    746|        }
 5892|    746|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|    746|    {
 5863|    746|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    746|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    746|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    746|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    746|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 746]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    746|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    746|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    746|                        .transform_error(make_eof_scan_error));
 5865|    746|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    746|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|    746|    {
 5266|    746|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    746|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    746|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    746|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|    746|    {
 5871|    746|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    746|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    746|                          basic_contiguous_scan_context<char_type>>) {
 5875|    746|            auto rd = make_reader<T, char_type>();
 5876|    746|            return impl(rd, range, value);
 5877|    746|        }
 5878|    746|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    746|            auto rd = make_reader<T, char_type>();
 5880|    746|            if (!is_segment_contiguous(range)) {
 5881|    746|                return impl(rd, range, value);
 5882|    746|            }
 5883|    746|            auto crange = get_as_contiguous(range);
 5884|    746|            SCN_TRY(it, impl(rd, crange, value));
 5885|    746|            return ranges::next(range.begin(),
 5886|    746|                                ranges::distance(crange.begin(), it));
 5887|    746|        }
 5888|    746|        else {
 5889|    746|            SCN_EXPECT(false);
 5890|    746|            SCN_UNREACHABLE;
 5891|    746|        }
 5892|    746|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|    746|    {
 5863|    746|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    746|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    746|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    746|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    746|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 746]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    746|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    746|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    746|                        .transform_error(make_eof_scan_error));
 5865|    746|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    746|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|    746|    {
 5266|    746|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    746|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    746|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    746|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2878|   336k|    {
 2879|   336k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2882|   654k|    {
 2883|   654k|        return m_current;
 2884|   654k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2887|   418k|    {
 2888|   418k|        return m_range.end();
 2889|   418k|    }
_ZN3scn2v34impl19is_first_char_spaceIcEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1220|   102k|{
 1221|       |    // TODO: optimize
 1222|   102k|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  924|   102k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   102k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1223|   102k|    auto res = get_next_code_point(str);
 1224|   102k|    return {res.iterator, res.value, is_cp_space(res.value)};
 1225|   102k|}
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2902|   105k|    {
 2903|   105k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   105k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   105k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|   105k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|   105k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 105k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|   105k|        }
 2909|   105k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   105k|    static_cast<    \
  |  |  929|   105k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|   105k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2892|   209k|    {
 2893|   209k|        return ranges::subrange{begin(), end()};
 2894|   209k|    }
_ZN3scn2v34impl24read_while_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2116|  10.7k|{
 2117|  10.7k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  10.7k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  10.7k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  10.7k|        auto buf = make_contiguous_buffer(range);
 2121|  10.7k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  10.7k|        return ranges::next(range.begin(),
 2123|  10.7k|                            ranges::distance(buf.view().begin(), it));
 2124|  10.7k|    }
 2125|  10.7k|    else {
 2126|  10.7k|        auto it = range.begin();
 2127|       |
 2128|  10.7k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|  10.7k|            auto seg = get_contiguous_beginning(range);
 2130|  10.7k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  10.7k|                seg_it != seg.end()) {
 2132|  10.7k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  10.7k|            }
 2134|  10.7k|            ranges::advance(it, seg.size());
 2135|  10.7k|        }
 2136|       |
 2137|  10.7k|        return read_while_code_point(
 2138|  10.7k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  10.7k|    }
 2140|  10.7k|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_b:
 6036|  10.0k|    {
 6037|  10.0k|        const bool need_skipped_width =
 6038|  10.0k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 184, False: 9.89k]
  |  Branch (6038:33): [True: 9.89k, False: 0]
  ------------------
 6039|  10.0k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  10.0k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 856, False: 9.22k]
  ------------------
 6043|  10.0k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 556, False: 8.67k]
  ------------------
 6044|  1.41k|            return skip_fill(rng, specs.precision, specs.fill,
 6045|  1.41k|                             need_skipped_width);
 6046|  1.41k|        }
 6047|  8.67k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 8.28k, False: 388]
  |  Branch (6047:56): [True: 4.10k, False: 4.17k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  4.10k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 4.10k, False: 0]
  ------------------
 6051|  4.10k|                auto max_width_view = take_width(rng, specs.precision);
 6052|  4.10k|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|  4.10k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  4.10k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  4.10k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 134, False: 3.97k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    134|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    134|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    134|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    134|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    134|    }                                                  \
  |  |  |  | 3671|  4.10k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.97k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|  3.97k|                                  .transform_error(make_eof_scan_error));
 6054|  3.97k|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|  4.10k|            }
 6056|      0|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|      0|                            make_eof_scan_error));
 6058|       |
 6059|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 0]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|      0|            return result_type{it, 0};
 6067|      0|        }
 6068|       |
 6069|  4.56k|        return result_type{rng.begin(), 0};
 6070|  8.67k|    }
_ZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEb:
 5950|  1.41k|{
 5951|  1.41k|    using char_type = detail::char_t<Range>;
 5952|  1.41k|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5953|       |
 5954|  1.41k|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5954:9): [True: 1.14k, False: 264]
  ------------------
 5955|  1.14k|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5956|  1.14k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5957|       |
 5958|  1.14k|        if (max_width == 0) {
  ------------------
  |  Branch (5958:13): [True: 0, False: 1.14k]
  ------------------
 5959|      0|            auto it = read_while_code_unit(range, pred);
 5960|       |
 5961|      0|            if (want_skipped_width) {
  ------------------
  |  Branch (5961:17): [True: 0, False: 0]
  ------------------
 5962|      0|                auto prefix_width =
 5963|      0|                    static_cast<std::ptrdiff_t>(
 5964|      0|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5965|      0|                    ranges::distance(range.begin(), it);
 5966|      0|                return result_type{it, prefix_width};
 5967|      0|            }
 5968|      0|            return result_type{it, 0};
 5969|      0|        }
 5970|       |
 5971|  1.14k|        auto max_width_view = take_width(range, max_width);
 5972|  1.14k|        auto w_it = read_while_code_unit(max_width_view, pred);
 5973|       |
 5974|  1.14k|        if (want_skipped_width) {
  ------------------
  |  Branch (5974:13): [True: 1.14k, False: 0]
  ------------------
 5975|  1.14k|            return result_type{w_it.base(), max_width - w_it.count()};
 5976|  1.14k|        }
 5977|      0|        return result_type{w_it.base(), 0};
 5978|  1.14k|    }
 5979|       |
 5980|    264|    const auto fill_chars = fill.template get_code_units<char_type>();
 5981|    264|    if (max_width == 0) {
  ------------------
  |  Branch (5981:9): [True: 0, False: 264]
  ------------------
 5982|      0|        auto it = read_while_code_units(range, fill_chars);
 5983|       |
 5984|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5984:13): [True: 0, False: 0]
  ------------------
 5985|      0|            auto prefix_width =
 5986|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5987|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5988|      0|            return result_type{it, prefix_width};
 5989|      0|        }
 5990|      0|        return result_type{it, 0};
 5991|      0|    }
 5992|       |
 5993|    264|    auto max_width_view = take_width(range, max_width);
 5994|    264|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5995|       |
 5996|    264|    if (want_skipped_width) {
  ------------------
  |  Branch (5996:9): [True: 264, False: 0]
  ------------------
 5997|    264|        return result_type{w_it.base(), max_width - w_it.count()};
 5998|    264|    }
 5999|      0|    return result_type{w_it.base(), 0};
 6000|    264|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_ST_LPv0EEEOSJ_:
  753|  1.14k|    {
  754|  1.14k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_ST_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESZ_c:
  743|  1.46k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.46k|              cvref<T> obj = *get<T>(fn);
  745|  1.46k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.46k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.46k|              }
  748|  1.46k|              else {
  749|  1.46k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.46k|              }
  751|  1.46k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESI_lRKNS0_6detail9fill_typeEbEUlcE_EEDaNS3_7storageE:
  683|  1.46k|    {
  684|  1.46k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.46k|            return static_cast<T*>(s.m_cp);
  686|  1.46k|        }
  687|  1.46k|        else if constexpr (std::is_object_v<T>) {
  688|  1.46k|            return static_cast<T*>(s.m_p);
  689|  1.46k|        }
  690|  1.46k|        else {
  691|  1.46k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.46k|        }
  693|  1.46k|    }
_ZZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEbENKUlcE_clEc:
 5956|  1.46k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_LPv0EEEPKSJ_:
  666|  1.14k|        {
  667|  1.14k|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|  1.14k|{
 1976|  1.14k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  1.14k|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|  1.14k|{
 1957|  1.14k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  1.14k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  1.14k|    }
 1960|  1.14k|    else {
 1961|  1.14k|        auto first = range.begin();
 1962|  1.54k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 1.46k, False: 84]
  ------------------
 1963|  1.46k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 1.06k, False: 398]
  ------------------
 1964|  1.06k|                return first;
 1965|  1.06k|            }
 1966|  1.46k|        }
 1967|     84|        return first;
 1968|  1.14k|    }
 1969|  1.14k|}
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE5beginEv:
 2809|  9.62k|    {
 2810|  9.62k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2811|  9.62k|                                      m_count};
 2812|  9.62k|    }
_ZNK3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEvE3getEv:
 2716|  36.2k|    {
 2717|  36.2k|        return view;
 2718|  36.2k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEC2ES6_SF_l:
 2381|  9.62k|    {
 2382|  9.62k|    }
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2780|  8.65k|        {
 2781|  8.65k|            return !(y == x);
 2782|  8.65k|        }
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2769|  18.9k|        {
 2770|  18.9k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2770:21): [True: 674, False: 18.2k]
  |  Branch (2770:39): [True: 438, False: 236]
  ------------------
 2771|  18.9k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2771:20): [True: 0, False: 18.5k]
  ------------------
 2772|  18.9k|        }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE14multibyte_leftEv:
 2420|    674|    {
 2421|    674|        return m_multibyte_left;
 2422|    674|    }
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE3endEv:
 2815|  17.0k|    {
 2816|  17.0k|        return sentinel<true>{m_base.get().end()};
 2817|  17.0k|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE8sentinelILb1EEC2ENSA_8sentinelILb1EEE:
 2750|  17.0k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEdeEv:
 2425|  13.1k|    {
 2426|  13.1k|        return *m_current;
 2427|  13.1k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEppEv:
 2434|  10.0k|    {
 2435|  10.0k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  10.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2436|  10.0k|        _increment_current();
 2437|  10.0k|        return *this;
 2438|  10.0k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE18_increment_currentEv:
 2667|  10.0k|    {
 2668|  10.0k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2668:13): [True: 7.38k, False: 2.71k]
  ------------------
 2669|  7.38k|            auto cplen = _get_cp_length_at_current();
 2670|  7.38k|            m_multibyte_left = cplen - 1;
 2671|  7.38k|            m_count -= _get_width_at_current_cp_start(cplen);
 2672|  7.38k|        }
 2673|  2.71k|        else {
 2674|  2.71k|            --m_multibyte_left;
 2675|  2.71k|        }
 2676|       |
 2677|  10.0k|        ++m_current;
 2678|  10.0k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE25_get_cp_length_at_currentEv:
 2638|  7.38k|    {
 2639|  7.38k|        return static_cast<difference_type>(
 2640|  7.38k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2641|  7.38k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE30_get_width_at_current_cp_startEl:
 2644|  7.38k|    {
 2645|  7.38k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|  7.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.38k]
  |  |  ------------------
  ------------------
 2646|      0|            return 0;
 2647|      0|        }
 2648|       |
 2649|  7.38k|        if (cplen == 1) {
  ------------------
  |  Branch (2649:13): [True: 5.74k, False: 1.64k]
  ------------------
 2650|  5.74k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  5.74k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.74k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2651|  5.74k|            auto cp = static_cast<char32_t>(*m_current);
 2652|  5.74k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2653|  5.74k|        }
 2654|       |
 2655|  1.64k|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2656|  1.64k|                                           cplen);
 2657|  1.64k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.64k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.64k]
  |  |  ------------------
  ------------------
 2658|      0|            return 0;
 2659|      0|        }
 2660|       |
 2661|  1.64k|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2662|  1.64k|        return static_cast<difference_type>(
 2663|  1.64k|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2664|  1.64k|    }
_ZN3scn2v34impl21read_while_code_unitsINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENSt3__117basic_string_viewIcNSD_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEESJ_RKT0_:
 2036|    264|{
 2037|    264|    static_assert(ranges::common_range<CodeUnits>);
 2038|       |
 2039|    264|    auto it = range.begin();
 2040|    264|    while (it != range.end()) {
  ------------------
  |  Branch (2040:12): [True: 264, False: 0]
  ------------------
 2041|    264|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2042|    264|                                           needle.size());
 2043|    264|        if (!r) {
  ------------------
  |  Branch (2043:13): [True: 86, False: 178]
  ------------------
 2044|     86|            return it;
 2045|     86|        }
 2046|    178|        static_assert(
 2047|    178|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2048|    178|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2048:13): [True: 178, False: 0]
  ------------------
 2049|    178|            return it;
 2050|    178|        }
 2051|      0|        it = *r;
 2052|      0|    }
 2053|      0|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2054|      0|    return it;
 2055|      0|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_l:
 1856|    264|{
 1857|    264|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    264|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    264|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|    264|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|    264|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|    264|        if (sz < count) {
 1862|    264|            return unexpected(eof_error::eof);
 1863|    264|        }
 1864|       |
 1865|    264|        return ranges::next(range.begin(), count);
 1866|    264|    }
 1867|    264|    else {
 1868|    264|        auto it = range.begin();
 1869|    264|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 264]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  1.03k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 856, False: 178]
  ------------------
 1874|    856|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 86, False: 770]
  ------------------
 1875|     86|                return unexpected(eof_error::eof);
 1876|     86|            }
 1877|    856|        }
 1878|       |
 1879|    178|        return it;
 1880|    264|    }
 1881|    264|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEmT_:
 1094|    264|{
 1095|    264|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|    264|        return r.size();
 1097|    264|    }
 1098|    264|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|    264|                           ranges::const_iterator_t<Range>,
 1100|    264|                           typename detail::basic_scan_buffer<
 1101|    264|                               detail::char_t<Range>>::forward_iterator>) {
 1102|    264|        if constexpr (ranges::common_range<Range>) {
 1103|    264|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|    264|        }
 1105|    264|        else {
 1106|    264|            if (r.begin().stores_parent()) {
 1107|    264|                return static_cast<size_t>(
 1108|    264|                    r.begin().parent()->chars_available() -
 1109|    264|                    r.begin().position());
 1110|    264|            }
 1111|    264|            return r.begin().contiguous_segment().size();
 1112|    264|        }
 1113|    264|    }
 1114|    264|    else {
 1115|    264|        return 0;
 1116|    264|    }
 1117|    264|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSM_NS1_20incrementable_traitsISM_E15difference_typeE:
  267|  4.10k|    {
  268|  4.10k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  4.10k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISM_EEvE4typeERSM_NS1_20incrementable_traitsISM_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|  4.10k|    {
  161|  4.10k|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|  4.10k|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 0, False: 4.10k]
  ------------------
  164|      0|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 0, False: 0]
  ------------------
  165|      0|                ++i;
  166|      0|            }
  167|      0|        }
  168|  4.10k|        else {
  169|  4.10k|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 4.10k]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|  4.10k|        }
  173|  4.10k|    }
_ZN3scn2v34impl27counted_width_iterator_implneINS2_22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEDTeqclscPFRKS7_vELDnEEclscPFRKT_vELDnEEERKNS4_IS7_SG_EERKNS4_ISL_T0_EE:
 2530|  3.91k|    {
 2531|  3.91k|        return !(a == b);
 2532|  3.91k|    }
_ZN3scn2v34impl27counted_width_iterator_impleqINS2_22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEDTeqclscPFRKS7_vELDnEEclscPFRKT_vELDnEEERKNS4_IS7_SG_EERKNS4_ISL_T0_EE:
 2522|  3.91k|    {
 2523|  3.91k|        return a.m_current == b.m_current;
 2524|  3.91k|    }
_ZNK3scn2v34impl14_take_width_fnclINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEEDTtlS4_fp_fp0_EERKT_l:
 2831|  5.51k|    {
 2832|  5.51k|        return take_width_view{r, n};
 2833|  5.51k|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEEC2ERKSA_l:
 2800|  5.51k|    {
 2801|  5.51k|    }
_ZN3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEvEC2ERKSB_:
 2713|  5.51k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|  4.10k|{
 2951|  4.10k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 4.10k, False: 0]
  ------------------
 2952|  4.10k|        auto it = read_while_classic_space(range);
 2953|  4.10k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  4.10k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 134, False: 3.97k]
  |  |  ------------------
  ------------------
 2955|    134|            return unexpected(e);
 2956|    134|        }
 2957|       |
 2958|  3.97k|        return it;
 2959|  4.10k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  4.10k|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|  4.10k|{
 2117|  4.10k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  4.10k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  4.10k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  4.10k|        auto buf = make_contiguous_buffer(range);
 2121|  4.10k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  4.10k|        return ranges::next(range.begin(),
 2123|  4.10k|                            ranges::distance(buf.view().begin(), it));
 2124|  4.10k|    }
 2125|  4.10k|    else {
 2126|  4.10k|        auto it = range.begin();
 2127|       |
 2128|  4.10k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  4.10k|            auto seg = get_contiguous_beginning(range);
 2130|  4.10k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  4.10k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 0, False: 4.10k]
  ------------------
 2132|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|      0|            }
 2134|  4.10k|            ranges::advance(it, seg.size());
 2135|  4.10k|        }
 2136|       |
 2137|  4.10k|        return read_while_code_point(
 2138|  4.10k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  4.10k|    }
 2140|  4.10k|}
_ZN3scn2v34impl24get_contiguous_beginningINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDaT_:
 1038|  4.10k|{
 1039|  4.10k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1039:19): [Folded - Ignored]
  |  Branch (1039:19): [Folded - Ignored]
  ------------------
 1040|  4.10k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1040:19): [Folded - Ignored]
  ------------------
 1041|  4.10k|        return r;
 1042|  4.10k|    }
 1043|  4.10k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1043:24): [Folded - Ignored]
  ------------------
 1044|  4.10k|                           ranges::const_iterator_t<Range>,
 1045|  4.10k|                           typename detail::basic_scan_buffer<
 1046|  4.10k|                               detail::char_t<Range>>::forward_iterator>) {
 1047|  4.10k|        if constexpr (ranges::common_range<Range>) {
 1048|  4.10k|            auto seg = r.begin().contiguous_segment();
 1049|  4.10k|            auto dist =
 1050|  4.10k|                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|  4.10k|            return seg.substr(0, std::min(seg.size(), dist));
 1052|  4.10k|        }
 1053|  4.10k|        else {
 1054|  4.10k|            return r.begin().contiguous_segment();
 1055|  4.10k|        }
 1056|  4.10k|    }
 1057|  4.10k|    else {
 1058|  4.10k|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|  4.10k|    }
 1060|  4.10k|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|  4.10k|{
 2082|  4.10k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  4.10k|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|  4.10k|{
 2061|  4.10k|    auto it = range.begin();
 2062|  5.48k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 5.34k, False: 134]
  ------------------
 2063|  5.34k|        const auto val =
 2064|  5.34k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  5.34k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  5.34k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 5.34k, False: 0]
  |  |  ------------------
  ------------------
 2066|  5.34k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  5.34k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  5.34k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 3.97k, False: 1.37k]
  ------------------
 2069|  3.97k|                return it;
 2070|  3.97k|            }
 2071|  5.34k|        }
 2072|  1.37k|        it = val.iterator;
 2073|  1.37k|    }
 2074|       |
 2075|    134|    return it;
 2076|  4.10k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISP_EEE4typeEEESP_:
 1898|  5.34k|{
 1899|  5.34k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  5.34k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.34k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  5.34k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  5.34k|    auto it = range.begin();
 1903|  5.34k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  5.34k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  5.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.34k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  5.34k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 4.84k, False: 504]
  ------------------
 1912|  4.84k|        ++it;
 1913|  4.84k|        return {it, string_type(1, *range.begin())};
 1914|  4.84k|    }
 1915|       |
 1916|    504|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|    504|    return {it, string_type{range.begin(), it}};
 1918|  5.34k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEbT_:
  943|  9.45k|{
  944|  9.45k|    return is_range_eof(r.begin(), r.end());
  945|  9.45k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS8_ISE_E8sentinelILb1EEEEEbT_T0_:
  927|  9.45k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  9.45k|    {
  937|  9.45k|        return begin == end;
  938|  9.45k|    }
  939|  9.45k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSC_ISG_E8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SP_EENS1_20incrementable_traitsISP_E15difference_typeEE4typeERSP_ST_SQ_:
  282|    504|    {
  283|    504|        return n - fn::impl_i_n_s(i, n, bound);
  284|    504|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSC_ISG_E8sentinelILb1EEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SP_EENS1_20incrementable_traitsISP_E15difference_typeEE4typeERSP_ST_SQ_:
  226|    504|    {
  227|    504|        constexpr iter_difference_t<I> zero{0};
  228|    504|        iter_difference_t<I> counter{0};
  229|       |
  230|    504|        if (n < zero) {
  ------------------
  |  Branch (230:13): [True: 0, False: 504]
  ------------------
  231|      0|            do {
  232|      0|                --i;
  233|      0|                --counter;  // Yes, really
  234|      0|            } while (++n < zero && i != bound);
  ------------------
  |  Branch (234:22): [True: 0, False: 0]
  |  Branch (234:36): [True: 0, False: 0]
  ------------------
  235|      0|        }
  236|    504|        else {
  237|  1.86k|            while (n-- > zero && i != bound) {
  ------------------
  |  Branch (237:20): [True: 1.36k, False: 504]
  |  Branch (237:34): [True: 1.36k, False: 0]
  ------------------
  238|  1.36k|                ++i;
  239|  1.36k|                ++counter;
  240|  1.36k|            }
  241|    504|        }
  242|       |
  243|    504|        return counter;
  244|    504|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEcE8is_validEv:
 1889|  5.34k|    {
 1890|  5.34k|        return !codepoint.empty();
 1891|  5.34k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|  4.10k|    {
  754|  4.10k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|  5.34k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.34k|              cvref<T> obj = *get<T>(fn);
  745|  5.34k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  5.34k|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.34k|              }
  748|  5.34k|              else {
  749|  5.34k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.34k|              }
  751|  5.34k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS6_INS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  5.34k|    {
  684|  5.34k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  5.34k|            return static_cast<T*>(s.m_cp);
  686|  5.34k|        }
  687|  5.34k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  5.34k|            return static_cast<T*>(s.m_p);
  689|  5.34k|        }
  690|  5.34k|        else {
  691|  5.34k|            return reinterpret_cast<T*>(s.m_fp);
  692|  5.34k|        }
  693|  5.34k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  5.34k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|  4.10k|        {
  662|  4.10k|        }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|  4.10k|{
  950|  4.10k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  4.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 134, False: 3.97k]
  |  |  ------------------
  ------------------
  951|    134|        return eof_error::eof;
  952|    134|    }
  953|  3.97k|    return eof_error::good;
  954|  4.10k|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE4baseEv:
 2412|  23.9k|    {
 2413|  23.9k|        return m_current;
 2414|  23.9k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE5countEv:
 2416|  24.3k|    {
 2417|  24.3k|        return m_count;
 2418|  24.3k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|  58.5k|    {
 6037|  58.5k|        const bool need_skipped_width =
 6038|  58.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 2.15k, False: 56.3k]
  |  Branch (6038:33): [True: 0, False: 56.3k]
  ------------------
 6039|  58.5k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  58.5k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 362, False: 58.1k]
  ------------------
 6043|  58.5k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 7.69k, False: 50.4k]
  ------------------
 6044|  8.05k|            return skip_fill(rng, specs.precision, specs.fill,
 6045|  8.05k|                             need_skipped_width);
 6046|  8.05k|        }
 6047|  50.4k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 50.0k, False: 402]
  |  Branch (6047:56): [True: 2.02k, False: 48.0k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  2.02k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 2.02k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  4.04k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|  2.02k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.02k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.02k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.02k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  2.02k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  4.04k|                            make_eof_scan_error));
 6058|       |
 6059|  4.04k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 1.14k, False: 878]
  ------------------
 6060|  1.14k|                return result_type{
 6061|  1.14k|                    it,
 6062|  1.14k|                    calculate_text_width(make_contiguous_buffer(
 6063|  1.14k|                                             ranges::subrange{rng.begin(), it})
 6064|  1.14k|                                             .view())};
 6065|  1.14k|            }
 6066|    878|            return result_type{it, 0};
 6067|  4.04k|        }
 6068|       |
 6069|  48.4k|        return result_type{rng.begin(), 0};
 6070|  50.4k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|  11.6k|    {
 6079|  11.6k|        const bool need_skipped_width =
 6080|  11.6k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 674, False: 10.9k]
  |  Branch (6080:33): [True: 2.54k, False: 8.45k]
  ------------------
 6081|  11.6k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  11.6k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 202, False: 11.4k]
  ------------------
 6084|  11.6k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 362, False: 11.1k]
  ------------------
 6085|    564|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 258, False: 306]
  ------------------
 6086|    564|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 96, False: 162]
  ------------------
 6087|     96|                return result_type{rng.begin(), 0};
 6088|     96|            }
 6089|    468|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|    468|                             specs.fill, need_skipped_width);
 6091|    564|        }
 6092|  11.1k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 10.6k, False: 432]
  ------------------
 6093|  11.1k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 9.96k, False: 708]
  ------------------
 6094|  11.1k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 444, False: 9.51k]
  |  Branch (6094:35): [True: 408, False: 36]
  ------------------
 6095|  9.96k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 1.33k, False: 8.21k]
  ------------------
 6096|  9.55k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 1.23k, False: 106]
  ------------------
 6097|  1.64k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 1.23k, False: 404]
  ------------------
 6098|  1.23k|                const auto initial_width =
 6099|  1.23k|                    specs.precision - prefix_width - value_width;
 6100|  1.23k|                auto max_width_view = take_width(rng, initial_width);
 6101|  1.23k|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|  1.23k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.23k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.23k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.23k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.23k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|  1.23k|                                  .transform_error(make_eof_scan_error));
 6103|  1.23k|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|  1.23k|            }
 6105|    808|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|    404|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    404|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    404|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    404|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 404]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    404|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    404|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|    808|                            make_eof_scan_error));
 6107|       |
 6108|    808|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 404, False: 0]
  ------------------
 6109|    404|                return result_type{
 6110|    404|                    it,
 6111|    404|                    calculate_text_width(make_contiguous_buffer(
 6112|    404|                                             ranges::subrange{rng.begin(), it})
 6113|    404|                                             .view())};
 6114|    404|            }
 6115|      0|            return result_type{it, 0};
 6116|    808|        }
 6117|  9.46k|        return result_type{rng.begin(), 0};
 6118|  11.1k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
 6192|  21.3k|    {
 6193|  21.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  21.3k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  21.3k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  21.3k|            auto rd = make_reader<T, char_type>();
 6198|  21.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  21.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.4k, False: 896]
  |  |  ------------------
  ------------------
 6199|  20.4k|                return unexpected(e);
 6200|  20.4k|            }
 6201|       |
 6202|    896|            return impl(rd, range, value);
 6203|  21.3k|        }
 6204|  21.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  21.3k|            auto rd = make_reader<T, char_type>();
 6206|  21.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  21.3k|                return unexpected(e);
 6208|  21.3k|            }
 6209|       |
 6210|  21.3k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  21.3k|                specs.width != 0) {
 6212|  21.3k|                return impl(rd, range, value);
 6213|  21.3k|            }
 6214|       |
 6215|  21.3k|            auto crange = get_as_contiguous(range);
 6216|  21.3k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  21.3k|            return ranges::next(range.begin(),
 6218|  21.3k|                                ranges::distance(crange.begin(), it));
 6219|  21.3k|        }
 6220|  21.3k|        else {
 6221|  21.3k|            SCN_EXPECT(false);
 6222|  21.3k|            SCN_UNREACHABLE;
 6223|  21.3k|        }
 6224|  21.3k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    896|    {
 6124|    896|        const bool need_skipped_width =
 6125|    896|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 182, False: 714]
  |  Branch (6125:33): [True: 572, False: 142]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    896|        auto it = rng.begin();
 6129|    896|        std::ptrdiff_t prefix_width = 0;
 6130|    896|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 578, False: 318]
  ------------------
 6131|    578|            auto max_width_view = take_width(rng, specs.precision);
 6132|    578|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    578|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    578|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    578|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    578|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 558]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     20|    }                                                  \
  |  |  |  | 3671|    578|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    558|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    558|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    558|            it = prefix_result.first.base();
 6135|    558|            prefix_width = prefix_result.second;
 6136|    558|        }
 6137|    318|        else {
 6138|    318|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    318|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    318|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    318|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    318|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 318]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    318|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    318|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    318|            std::tie(it, prefix_width) = prefix_result;
 6140|    318|        }
 6141|    876|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    876|        std::ptrdiff_t value_width = 0;
 6145|    876|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 558, False: 318]
  ------------------
 6146|    558|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 552]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    552|            const auto initial_width = specs.precision - prefix_width;
 6154|    552|            auto max_width_view =
 6155|    552|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    552|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    552|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    552|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    552|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    552|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 552, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    552|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    552|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    552|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    552|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    552|    }                                                  \
  |  |  |  | 3671|    552|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    318|        else {
 6161|    318|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    318|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    318|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    318|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 318, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    318|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    318|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    318|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    318|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    318|    }                                                  \
  |  | 3671|    318|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    318|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
 6192|  21.3k|    {
 6193|  21.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  21.3k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  21.3k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  21.3k|            auto rd = make_reader<T, char_type>();
 6198|  21.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  21.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.4k, False: 896]
  |  |  ------------------
  ------------------
 6199|  20.4k|                return unexpected(e);
 6200|  20.4k|            }
 6201|       |
 6202|    896|            return impl(rd, range, value);
 6203|  21.3k|        }
 6204|  21.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  21.3k|            auto rd = make_reader<T, char_type>();
 6206|  21.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  21.3k|                return unexpected(e);
 6208|  21.3k|            }
 6209|       |
 6210|  21.3k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  21.3k|                specs.width != 0) {
 6212|  21.3k|                return impl(rd, range, value);
 6213|  21.3k|            }
 6214|       |
 6215|  21.3k|            auto crange = get_as_contiguous(range);
 6216|  21.3k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  21.3k|            return ranges::next(range.begin(),
 6218|  21.3k|                                ranges::distance(crange.begin(), it));
 6219|  21.3k|        }
 6220|  21.3k|        else {
 6221|  21.3k|            SCN_EXPECT(false);
 6222|  21.3k|            SCN_UNREACHABLE;
 6223|  21.3k|        }
 6224|  21.3k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    896|    {
 6124|    896|        const bool need_skipped_width =
 6125|    896|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 182, False: 714]
  |  Branch (6125:33): [True: 572, False: 142]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    896|        auto it = rng.begin();
 6129|    896|        std::ptrdiff_t prefix_width = 0;
 6130|    896|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 578, False: 318]
  ------------------
 6131|    578|            auto max_width_view = take_width(rng, specs.precision);
 6132|    578|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    578|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    578|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    578|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    578|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 558]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     20|    }                                                  \
  |  |  |  | 3671|    578|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    558|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    558|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    558|            it = prefix_result.first.base();
 6135|    558|            prefix_width = prefix_result.second;
 6136|    558|        }
 6137|    318|        else {
 6138|    318|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    318|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    318|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    318|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    318|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 318]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    318|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    318|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    318|            std::tie(it, prefix_width) = prefix_result;
 6140|    318|        }
 6141|    876|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    876|        std::ptrdiff_t value_width = 0;
 6145|    876|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 558, False: 318]
  ------------------
 6146|    558|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 552]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    552|            const auto initial_width = specs.precision - prefix_width;
 6154|    552|            auto max_width_view =
 6155|    552|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    552|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    552|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    552|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    552|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    552|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 552, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    552|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    552|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    552|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    552|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    552|    }                                                  \
  |  |  |  | 3671|    552|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    318|        else {
 6161|    318|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    318|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    318|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    318|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 318, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    318|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    318|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    318|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    318|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    318|    }                                                  \
  |  | 3671|    318|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    318|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIPvEENS0_13scan_expectedIPKcEERT_:
 6192|  21.2k|    {
 6193|  21.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  21.2k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  21.2k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  21.2k|            auto rd = make_reader<T, char_type>();
 6198|  21.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  21.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.4k, False: 778]
  |  |  ------------------
  ------------------
 6199|  20.4k|                return unexpected(e);
 6200|  20.4k|            }
 6201|       |
 6202|    778|            return impl(rd, range, value);
 6203|  21.2k|        }
 6204|  21.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  21.2k|            auto rd = make_reader<T, char_type>();
 6206|  21.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  21.2k|                return unexpected(e);
 6208|  21.2k|            }
 6209|       |
 6210|  21.2k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  21.2k|                specs.width != 0) {
 6212|  21.2k|                return impl(rd, range, value);
 6213|  21.2k|            }
 6214|       |
 6215|  21.2k|            auto crange = get_as_contiguous(range);
 6216|  21.2k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  21.2k|            return ranges::next(range.begin(),
 6218|  21.2k|                                ranges::distance(crange.begin(), it));
 6219|  21.2k|        }
 6220|  21.2k|        else {
 6221|  21.2k|            SCN_EXPECT(false);
 6222|  21.2k|            SCN_UNREACHABLE;
 6223|  21.2k|        }
 6224|  21.2k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE11check_specsERKNS0_6detail12format_specsE:
 5752|  21.2k|    {
 5753|  21.2k|        reader_error_handler eh{};
 5754|  21.2k|        detail::check_pointer_type_specs(specs, eh);
 5755|  21.2k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  21.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.4k, False: 778]
  |  |  ------------------
  ------------------
 5756|  20.4k|            return {scan_error::invalid_format_string, eh.m_msg};
 5757|  20.4k|        }
 5758|    778|        return {};
 5759|  21.2k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_23reader_impl_for_voidptrIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6123|    778|    {
 6124|    778|        const bool need_skipped_width =
 6125|    778|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 178, False: 600]
  |  Branch (6125:33): [True: 530, False: 70]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    778|        auto it = rng.begin();
 6129|    778|        std::ptrdiff_t prefix_width = 0;
 6130|    778|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 536, False: 242]
  ------------------
 6131|    536|            auto max_width_view = take_width(rng, specs.precision);
 6132|    536|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    536|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    536|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    536|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    536|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 526]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     10|    }                                                  \
  |  |  |  | 3671|    536|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    526|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    526|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    526|            it = prefix_result.first.base();
 6135|    526|            prefix_width = prefix_result.second;
 6136|    526|        }
 6137|    242|        else {
 6138|    242|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    242|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    242|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    242|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    242|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 242]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    242|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    242|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    242|            std::tie(it, prefix_width) = prefix_result;
 6140|    242|        }
 6141|    768|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    768|        std::ptrdiff_t value_width = 0;
 6145|    768|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 526, False: 242]
  ------------------
 6146|    526|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 4, False: 522]
  ------------------
 6147|      4|                return unexpected_scan_error(
 6148|      4|                    scan_error::invalid_scanned_value,
 6149|      4|                    "Too many fill characters before value, "
 6150|      4|                    "precision exceeded before reading value");
 6151|      4|            }
 6152|       |
 6153|    522|            const auto initial_width = specs.precision - prefix_width;
 6154|    522|            auto max_width_view =
 6155|    522|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    522|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    522|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    522|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    522|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    522|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 522, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    522|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    522|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    522|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    522|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    522|    }                                                  \
  |  |  |  | 3671|    522|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    242|        else {
 6161|    242|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    242|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    242|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    242|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 242, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    242|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    242|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    242|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    242|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    242|    }                                                  \
  |  | 3671|    242|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    242|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5781|    522|    {
 5782|    522|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    522|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5783|    522|        return read_default(range, value, loc);
 5784|    522|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5764|    522|    {
 5765|    522|        detail::format_specs specs{};
 5766|    522|        specs.type = detail::presentation_type::int_hex;
 5767|       |
 5768|    522|        std::uintptr_t intvalue{};
 5769|    522|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3672|    522|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    522|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    522|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    522|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 522, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    522|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    522|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    522|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    522|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    522|    }                                                  \
  |  |  |  | 3671|    522|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5770|      0|                                                                intvalue, loc));
 5771|      0|        value = reinterpret_cast<void*>(intvalue);
 5772|      0|        return result;
 5773|    522|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5781|    242|    {
 5782|    242|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    242|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5783|    242|        return read_default(range, value, loc);
 5784|    242|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIbEENS0_13scan_expectedIPKcEERT_:
 6192|  21.3k|    {
 6193|  21.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  21.3k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  21.3k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  21.3k|            auto rd = make_reader<T, char_type>();
 6198|  21.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  21.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.2k, False: 1.08k]
  |  |  ------------------
  ------------------
 6199|  20.2k|                return unexpected(e);
 6200|  20.2k|            }
 6201|       |
 6202|  1.08k|            return impl(rd, range, value);
 6203|  21.3k|        }
 6204|  21.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  21.3k|            auto rd = make_reader<T, char_type>();
 6206|  21.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  21.3k|                return unexpected(e);
 6208|  21.3k|            }
 6209|       |
 6210|  21.3k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  21.3k|                specs.width != 0) {
 6212|  21.3k|                return impl(rd, range, value);
 6213|  21.3k|            }
 6214|       |
 6215|  21.3k|            auto crange = get_as_contiguous(range);
 6216|  21.3k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  21.3k|            return ranges::next(range.begin(),
 6218|  21.3k|                                ranges::distance(crange.begin(), it));
 6219|  21.3k|        }
 6220|  21.3k|        else {
 6221|  21.3k|            SCN_EXPECT(false);
 6222|  21.3k|            SCN_UNREACHABLE;
 6223|  21.3k|        }
 6224|  21.3k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  21.3k|    {
 3040|  21.3k|        reader_error_handler eh{};
 3041|  21.3k|        get_derived().check_specs_impl(specs, eh);
 3042|  21.3k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  21.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.2k, False: 1.08k]
  |  |  ------------------
  ------------------
 3043|  20.2k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  20.2k|        }
 3045|  1.08k|        return {};
 3046|  21.3k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11get_derivedEv:
 3050|  21.3k|    {
 3051|  21.3k|        return static_cast<Derived&>(*this);
 3052|  21.3k|    }
_ZN3scn2v34impl20reader_impl_for_boolIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5496|  21.3k|    {
 5497|  21.3k|        detail::check_bool_type_specs(specs, eh);
 5498|  21.3k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_boolIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|  1.08k|    {
 6124|  1.08k|        const bool need_skipped_width =
 6125|  1.08k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 192, False: 894]
  |  Branch (6125:33): [True: 646, False: 248]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  1.08k|        auto it = rng.begin();
 6129|  1.08k|        std::ptrdiff_t prefix_width = 0;
 6130|  1.08k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 654, False: 432]
  ------------------
 6131|    654|            auto max_width_view = take_width(rng, specs.precision);
 6132|    654|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    654|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    654|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    654|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    654|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 24, False: 630]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     24|    }                                                  \
  |  |  |  | 3671|    654|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    630|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    630|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    630|            it = prefix_result.first.base();
 6135|    630|            prefix_width = prefix_result.second;
 6136|    630|        }
 6137|    432|        else {
 6138|    432|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    432|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    432|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    432|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    432|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 432]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    432|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    432|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    432|            std::tie(it, prefix_width) = prefix_result;
 6140|    432|        }
 6141|  1.06k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  1.06k|        std::ptrdiff_t value_width = 0;
 6145|  1.06k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 630, False: 432]
  ------------------
 6146|    630|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 624]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    624|            const auto initial_width = specs.precision - prefix_width;
 6154|    624|            auto max_width_view =
 6155|    624|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    624|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    624|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    624|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    624|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    624|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 624, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    624|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    624|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    624|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    624|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    624|    }                                                  \
  |  |  |  | 3671|    624|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    432|        else {
 6161|    432|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    432|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    432|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    432|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 432, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    432|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    432|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    432|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    432|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    432|    }                                                  \
  |  | 3671|    432|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    432|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZNK3scn2v34impl20reader_impl_for_boolIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5515|    624|    {
 5516|    624|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5517|       |
 5518|    624|#if !SCN_DISABLE_LOCALE
 5519|    624|        if (specs.localized) {
  ------------------
  |  Branch (5519:13): [True: 12, False: 612]
  ------------------
 5520|     12|            return rd.read_localized(range, loc, value);
 5521|     12|        }
 5522|    612|#endif
 5523|       |
 5524|    612|        return rd.read_classic(range, value);
 5525|    624|    }
_ZN3scn2v34impl20reader_impl_for_boolIcE11get_optionsERKNS0_6detail12format_specsE:
 5528|  1.05k|    {
 5529|  1.05k|        SCN_GCC_COMPAT_PUSH
 5530|  1.05k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5531|       |
 5532|  1.05k|        switch (specs.type) {
 5533|    182|            case detail::presentation_type::string:
  ------------------
  |  Branch (5533:13): [True: 182, False: 874]
  ------------------
 5534|    182|                return bool_reader_base::allow_text;
 5535|       |
 5536|     10|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5536:13): [True: 10, False: 1.04k]
  ------------------
 5537|     20|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5537:13): [True: 10, False: 1.04k]
  ------------------
 5538|     26|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5538:13): [True: 6, False: 1.05k]
  ------------------
 5539|     36|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5539:13): [True: 10, False: 1.04k]
  ------------------
 5540|     98|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5540:13): [True: 62, False: 994]
  ------------------
 5541|    102|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5541:13): [True: 4, False: 1.05k]
  ------------------
 5542|    102|                return bool_reader_base::allow_numeric;
 5543|       |
 5544|    772|            default:
  ------------------
  |  Branch (5544:13): [True: 772, False: 284]
  ------------------
 5545|    772|                return bool_reader_base::allow_text |
 5546|    772|                       bool_reader_base::allow_numeric;
 5547|  1.05k|        }
 5548|       |
 5549|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5550|  1.05k|    }
_ZNK3scn2v34impl11bool_readerIcE14read_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refERb:
 5427|     12|    {
 5428|     12|        scan_error err{scan_error::invalid_scanned_value,
 5429|     12|                       "Failed to read boolean"};
 5430|       |
 5431|     12|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5431:13): [True: 10, False: 2]
  ------------------
 5432|     10|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5432:22): [True: 0, False: 10]
  ------------------
 5433|      0|                return *r;
 5434|      0|            }
 5435|     10|            else {
 5436|     10|                err = r.error();
 5437|     10|            }
 5438|     10|        }
 5439|       |
 5440|     12|        if (m_options & allow_text) {
  ------------------
  |  Branch (5440:13): [True: 10, False: 2]
  ------------------
 5441|     10|            auto stdloc = loc.get<std::locale>();
 5442|     10|            const auto& numpunct =
 5443|     10|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5444|     10|            const auto truename = numpunct.truename();
 5445|     10|            const auto falsename = numpunct.falsename();
 5446|       |
 5447|     10|            if (auto r =
  ------------------
  |  Branch (5447:22): [True: 0, False: 10]
  ------------------
 5448|     10|                    read_textual_custom(range, value, truename, falsename)) {
 5449|      0|                return *r;
 5450|      0|            }
 5451|     10|            else {
 5452|     10|                err = r.error();
 5453|     10|            }
 5454|     10|        }
 5455|       |
 5456|     12|        return unexpected(err);
 5457|     12|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5383|    554|    {
 5384|    554|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5384:18): [True: 0, False: 554]
  ------------------
 5385|      0|            value = false;
 5386|      0|            return *r;
 5387|      0|        }
 5388|    554|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5388:18): [True: 0, False: 554]
  ------------------
 5389|      0|            value = true;
 5390|      0|            return *r;
 5391|      0|        }
 5392|       |
 5393|    554|        return unexpected_scan_error(
 5394|    554|            scan_error::invalid_scanned_value,
 5395|    554|            "Failed to read numeric boolean value: No match");
 5396|    554|    }
_ZN3scn2v34impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2145|  1.10k|{
 2146|  1.10k|    auto it = read_code_unit(range);
 2147|  1.10k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.10k]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|  1.10k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  1.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.10k, False: 0]
  |  |  ------------------
  ------------------
 2152|  1.10k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  1.10k|        return unexpected(parse_error::error);
 2154|  1.10k|    }
 2155|       |
 2156|      0|    return *it;
 2157|  1.10k|}
_ZNK3scn2v34impl11bool_readerIcE19read_textual_customINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RbNSF_17basic_string_viewIcNSF_11char_traitsIcEEEESR_:
 5467|     10|    {
 5468|     10|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5469|     10|        const auto shorter = std::pair{
 5470|     10|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5470:13): [True: 10, False: 0]
  ------------------
 5471|     10|        const auto longer = std::pair{
 5472|     10|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5472:13): [True: 0, False: 10]
  ------------------
 5473|       |
 5474|     10|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5474:18): [True: 0, False: 10]
  ------------------
 5475|      0|            value = shorter.second;
 5476|      0|            return *r;
 5477|      0|        }
 5478|     10|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5478:18): [True: 0, False: 10]
  ------------------
 5479|      0|            value = longer.second;
 5480|      0|            return *r;
 5481|      0|        }
 5482|       |
 5483|     10|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5484|     10|                                     "read_textual: No match");
 5485|     10|    }
_ZN3scn2v34impl20read_matching_stringINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewINDTcl4implISF_EEE4typeENSD_11char_traitsISN_EEEE:
 2178|     20|{
 2179|     20|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     12|    }                                                  \
  |  |  |  | 3671|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|      8|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|      8|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|      8|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|      8|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 0]
  |  |  ------------------
  ------------------
 2185|      8|        return unexpected(parse_error::error);
 2186|      8|    }
 2187|      0|    return it;
 2188|      8|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1856|  1.19k|{
 1857|  1.19k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  1.19k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.19k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  1.19k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  1.19k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  1.19k|        if (sz < count) {
 1862|  1.19k|            return unexpected(eof_error::eof);
 1863|  1.19k|        }
 1864|       |
 1865|  1.19k|        return ranges::next(range.begin(), count);
 1866|  1.19k|    }
 1867|  1.19k|    else {
 1868|  1.19k|        auto it = range.begin();
 1869|  1.19k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 1.19k]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  6.18k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 5.14k, False: 1.04k]
  ------------------
 1874|  5.14k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 152, False: 4.99k]
  ------------------
 1875|    152|                return unexpected(eof_error::eof);
 1876|    152|            }
 1877|  5.14k|        }
 1878|       |
 1879|  1.04k|        return it;
 1880|  1.19k|    }
 1881|  1.19k|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEmT_:
 1094|  1.19k|{
 1095|  1.19k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|  1.19k|        return r.size();
 1097|  1.19k|    }
 1098|  1.19k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|  1.19k|                           ranges::const_iterator_t<Range>,
 1100|  1.19k|                           typename detail::basic_scan_buffer<
 1101|  1.19k|                               detail::char_t<Range>>::forward_iterator>) {
 1102|  1.19k|        if constexpr (ranges::common_range<Range>) {
 1103|  1.19k|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|  1.19k|        }
 1105|  1.19k|        else {
 1106|  1.19k|            if (r.begin().stores_parent()) {
 1107|  1.19k|                return static_cast<size_t>(
 1108|  1.19k|                    r.begin().parent()->chars_available() -
 1109|  1.19k|                    r.begin().position());
 1110|  1.19k|            }
 1111|  1.19k|            return r.begin().contiguous_segment().size();
 1112|  1.19k|        }
 1113|  1.19k|    }
 1114|  1.19k|    else {
 1115|  1.19k|        return 0;
 1116|  1.19k|    }
 1117|  1.19k|}
_ZNK3scn2v34impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5354|    612|    {
 5355|    612|        scan_error err{scan_error::invalid_scanned_value,
 5356|    612|                       "Failed to read boolean"};
 5357|       |
 5358|    612|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5358:13): [True: 544, False: 68]
  ------------------
 5359|    544|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5359:22): [True: 0, False: 544]
  ------------------
 5360|      0|                return *r;
 5361|      0|            }
 5362|    544|            else {
 5363|    544|                err = r.error();
 5364|    544|            }
 5365|    544|        }
 5366|       |
 5367|    612|        if (m_options & allow_text) {
  ------------------
  |  Branch (5367:13): [True: 588, False: 24]
  ------------------
 5368|    588|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5368:22): [True: 0, False: 588]
  ------------------
 5369|      0|                return *r;
 5370|      0|            }
 5371|    588|            else {
 5372|    588|                err = r.error();
 5373|    588|            }
 5374|    588|        }
 5375|       |
 5376|    612|        return unexpected(err);
 5377|    612|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5401|    588|    {
 5402|    588|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5402:18): [True: 0, False: 588]
  ------------------
 5403|      0|            value = true;
 5404|      0|            return *r;
 5405|      0|        }
 5406|    588|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5406:18): [True: 0, False: 588]
  ------------------
 5407|      0|            value = false;
 5408|      0|            return *r;
 5409|      0|        }
 5410|       |
 5411|    588|        return unexpected_scan_error(
 5412|    588|            scan_error::invalid_scanned_value,
 5413|    588|            "Failed to read textual boolean value: No match");
 5414|    588|    }
_ZN3scn2v34impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2193|  1.17k|{
 2194|  1.17k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  1.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 140, False: 1.03k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    140|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    140|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    140|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    140|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    140|    }                                                  \
  |  |  |  | 3671|  1.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|  1.03k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|  1.03k|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|  1.03k|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|  1.03k|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|  1.03k|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|  1.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.03k, False: 0]
  |  |  ------------------
  ------------------
 2201|  1.03k|            return unexpected(parse_error::error);
 2202|  1.03k|        }
 2203|      0|        return it;
 2204|  1.03k|    }
 2205|  1.03k|    else {
 2206|  1.03k|        auto range_it = range.begin();
 2207|  1.03k|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2208|  1.03k|            if (SCN_UNLIKELY(*range_it !=
 2209|  1.03k|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|  1.03k|                return unexpected(parse_error::error);
 2211|  1.03k|            }
 2212|  1.03k|        }
 2213|  1.03k|        return it;
 2214|  1.03k|    }
 2215|  1.03k|}
_ZNK3scn2v34impl20reader_impl_for_boolIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5515|    432|    {
 5516|    432|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5517|       |
 5518|    432|#if !SCN_DISABLE_LOCALE
 5519|    432|        if (specs.localized) {
  ------------------
  |  Branch (5519:13): [True: 62, False: 370]
  ------------------
 5520|     62|            return rd.read_localized(range, loc, value);
 5521|     62|        }
 5522|    370|#endif
 5523|       |
 5524|    370|        return rd.read_classic(range, value);
 5525|    432|    }
_ZNK3scn2v34impl11bool_readerIcE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5427|     62|    {
 5428|     62|        scan_error err{scan_error::invalid_scanned_value,
 5429|     62|                       "Failed to read boolean"};
 5430|       |
 5431|     62|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5431:13): [True: 60, False: 2]
  ------------------
 5432|     60|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5432:22): [True: 0, False: 60]
  ------------------
 5433|      0|                return *r;
 5434|      0|            }
 5435|     60|            else {
 5436|     60|                err = r.error();
 5437|     60|            }
 5438|     60|        }
 5439|       |
 5440|     62|        if (m_options & allow_text) {
  ------------------
  |  Branch (5440:13): [True: 8, False: 54]
  ------------------
 5441|      8|            auto stdloc = loc.get<std::locale>();
 5442|      8|            const auto& numpunct =
 5443|      8|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5444|      8|            const auto truename = numpunct.truename();
 5445|      8|            const auto falsename = numpunct.falsename();
 5446|       |
 5447|      8|            if (auto r =
  ------------------
  |  Branch (5447:22): [True: 0, False: 8]
  ------------------
 5448|      8|                    read_textual_custom(range, value, truename, falsename)) {
 5449|      0|                return *r;
 5450|      0|            }
 5451|      8|            else {
 5452|      8|                err = r.error();
 5453|      8|            }
 5454|      8|        }
 5455|       |
 5456|     62|        return unexpected(err);
 5457|     62|    }
_ZNK3scn2v34impl11bool_readerIcE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIcNSD_11char_traitsIcEEEESP_:
 5467|      8|    {
 5468|      8|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5469|      8|        const auto shorter = std::pair{
 5470|      8|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5470:13): [True: 8, False: 0]
  ------------------
 5471|      8|        const auto longer = std::pair{
 5472|      8|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5472:13): [True: 0, False: 8]
  ------------------
 5473|       |
 5474|      8|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5474:18): [True: 0, False: 8]
  ------------------
 5475|      0|            value = shorter.second;
 5476|      0|            return *r;
 5477|      0|        }
 5478|      8|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5478:18): [True: 0, False: 8]
  ------------------
 5479|      0|            value = longer.second;
 5480|      0|            return *r;
 5481|      0|        }
 5482|       |
 5483|      8|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5484|      8|                                     "read_textual: No match");
 5485|      8|    }
_ZN3scn2v34impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2178|     16|{
 2179|     16|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2, False: 14]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      2|    }                                                  \
  |  |  |  | 3671|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     14|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|     14|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|     14|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|     14|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|     14|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14, False: 0]
  |  |  ------------------
  ------------------
 2185|     14|        return unexpected(parse_error::error);
 2186|     14|    }
 2187|      0|    return it;
 2188|     14|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIcEENS0_13scan_expectedIPKcEERT_:
 6192|  21.2k|    {
 6193|  21.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  21.2k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  21.2k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  21.2k|            auto rd = make_reader<T, char_type>();
 6198|  21.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  21.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.3k, False: 830]
  |  |  ------------------
  ------------------
 6199|  20.3k|                return unexpected(e);
 6200|  20.3k|            }
 6201|       |
 6202|    830|            return impl(rd, range, value);
 6203|  21.2k|        }
 6204|  21.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  21.2k|            auto rd = make_reader<T, char_type>();
 6206|  21.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  21.2k|                return unexpected(e);
 6208|  21.2k|            }
 6209|       |
 6210|  21.2k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  21.2k|                specs.width != 0) {
 6212|  21.2k|                return impl(rd, range, value);
 6213|  21.2k|            }
 6214|       |
 6215|  21.2k|            auto crange = get_as_contiguous(range);
 6216|  21.2k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  21.2k|            return ranges::next(range.begin(),
 6218|  21.2k|                                ranges::distance(crange.begin(), it));
 6219|  21.2k|        }
 6220|  21.2k|        else {
 6221|  21.2k|            SCN_EXPECT(false);
 6222|  21.2k|            SCN_UNREACHABLE;
 6223|  21.2k|        }
 6224|  21.2k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_charIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    830|    {
 6124|    830|        const bool need_skipped_width =
 6125|    830|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 180, False: 650]
  |  Branch (6125:33): [True: 564, False: 86]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    830|        auto it = rng.begin();
 6129|    830|        std::ptrdiff_t prefix_width = 0;
 6130|    830|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 570, False: 260]
  ------------------
 6131|    570|            auto max_width_view = take_width(rng, specs.precision);
 6132|    570|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    570|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    570|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    570|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    570|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 570]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    570|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    570|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    570|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    570|            it = prefix_result.first.base();
 6135|    570|            prefix_width = prefix_result.second;
 6136|    570|        }
 6137|    260|        else {
 6138|    260|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    260|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    260|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    260|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    260|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 260]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    260|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    260|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    260|            std::tie(it, prefix_width) = prefix_result;
 6140|    260|        }
 6141|    830|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    830|        std::ptrdiff_t value_width = 0;
 6145|    830|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 570, False: 260]
  ------------------
 6146|    570|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 564]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    564|            const auto initial_width = specs.precision - prefix_width;
 6154|    564|            auto max_width_view =
 6155|    564|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    564|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    564|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    564|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    564|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    564|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 34, False: 530]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     34|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     34|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     34|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     34|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     34|    }                                                  \
  |  |  |  | 3671|    564|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    530|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    530|            it = w_it.base();
 6158|    530|            value_width = initial_width - w_it.count();
 6159|    530|        }
 6160|    260|        else {
 6161|    260|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    260|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    260|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    260|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 22, False: 238]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|     22|    }                                                  \
  |  | 3671|    260|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    260|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|    238|                                             specs, value, loc));
 6163|       |
 6164|    238|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 170, False: 68]
  ------------------
 6165|    170|                value_width = calculate_text_width(
 6166|    170|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    170|                        .view());
 6168|    170|            }
 6169|    238|        }
 6170|       |
 6171|       |        // Read postfix
 6172|    768|        std::ptrdiff_t postfix_width = 0;
 6173|    768|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 768, False: 0]
  ------------------
 6174|    768|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    768|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    768|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    768|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    768|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 768]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    768|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    768|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    768|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    768|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    768|                                 value_width));
 6178|    768|            std::tie(it, postfix_width) = postfix_result;
 6179|    768|        }
 6180|       |
 6181|    768|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|    768|                                                 value_width, postfix_width);
 6183|    768|            !e) {
  ------------------
  |  Branch (6183:13): [True: 158, False: 610]
  ------------------
 6184|    158|            return unexpected(e);
 6185|    158|        }
 6186|       |
 6187|    610|        return it;
 6188|    768|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 6192|  21.3k|    {
 6193|  21.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  21.3k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  21.3k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  21.3k|            auto rd = make_reader<T, char_type>();
 6198|  21.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  21.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.4k, False: 912]
  |  |  ------------------
  ------------------
 6199|  20.4k|                return unexpected(e);
 6200|  20.4k|            }
 6201|       |
 6202|    912|            return impl(rd, range, value);
 6203|  21.3k|        }
 6204|  21.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  21.3k|            auto rd = make_reader<T, char_type>();
 6206|  21.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  21.3k|                return unexpected(e);
 6208|  21.3k|            }
 6209|       |
 6210|  21.3k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  21.3k|                specs.width != 0) {
 6212|  21.3k|                return impl(rd, range, value);
 6213|  21.3k|            }
 6214|       |
 6215|  21.3k|            auto crange = get_as_contiguous(range);
 6216|  21.3k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  21.3k|            return ranges::next(range.begin(),
 6218|  21.3k|                                ranges::distance(crange.begin(), it));
 6219|  21.3k|        }
 6220|  21.3k|        else {
 6221|  21.3k|            SCN_EXPECT(false);
 6222|  21.3k|            SCN_UNREACHABLE;
 6223|  21.3k|        }
 6224|  21.3k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    912|    {
 6124|    912|        const bool need_skipped_width =
 6125|    912|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 188, False: 724]
  |  Branch (6125:33): [True: 570, False: 154]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    912|        auto it = rng.begin();
 6129|    912|        std::ptrdiff_t prefix_width = 0;
 6130|    912|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 578, False: 334]
  ------------------
 6131|    578|            auto max_width_view = take_width(rng, specs.precision);
 6132|    578|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    578|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    578|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    578|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    578|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18, False: 560]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     18|    }                                                  \
  |  |  |  | 3671|    578|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    560|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    560|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    560|            it = prefix_result.first.base();
 6135|    560|            prefix_width = prefix_result.second;
 6136|    560|        }
 6137|    334|        else {
 6138|    334|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    334|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    334|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    334|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    334|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 334]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    334|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    334|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    334|            std::tie(it, prefix_width) = prefix_result;
 6140|    334|        }
 6141|    894|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    894|        std::ptrdiff_t value_width = 0;
 6145|    894|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 560, False: 334]
  ------------------
 6146|    560|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 8, False: 552]
  ------------------
 6147|      8|                return unexpected_scan_error(
 6148|      8|                    scan_error::invalid_scanned_value,
 6149|      8|                    "Too many fill characters before value, "
 6150|      8|                    "precision exceeded before reading value");
 6151|      8|            }
 6152|       |
 6153|    552|            const auto initial_width = specs.precision - prefix_width;
 6154|    552|            auto max_width_view =
 6155|    552|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    552|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    552|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    552|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    552|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    552|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 552, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    552|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    552|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    552|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    552|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    552|    }                                                  \
  |  |  |  | 3671|    552|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    334|        else {
 6161|    334|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    334|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    334|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    334|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 334, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    334|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    334|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    334|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    334|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    334|    }                                                  \
  |  | 3671|    334|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    334|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6192|  21.2k|    {
 6193|  21.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  21.2k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  21.2k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  21.2k|            auto rd = make_reader<T, char_type>();
 6198|  21.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  21.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 134, False: 21.0k]
  |  |  ------------------
  ------------------
 6199|    134|                return unexpected(e);
 6200|    134|            }
 6201|       |
 6202|  21.0k|            return impl(rd, range, value);
 6203|  21.2k|        }
 6204|  21.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  21.2k|            auto rd = make_reader<T, char_type>();
 6206|  21.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  21.2k|                return unexpected(e);
 6208|  21.2k|            }
 6209|       |
 6210|  21.2k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  21.2k|                specs.width != 0) {
 6212|  21.2k|                return impl(rd, range, value);
 6213|  21.2k|            }
 6214|       |
 6215|  21.2k|            auto crange = get_as_contiguous(range);
 6216|  21.2k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  21.2k|            return ranges::next(range.begin(),
 6218|  21.2k|                                ranges::distance(crange.begin(), it));
 6219|  21.2k|        }
 6220|  21.2k|        else {
 6221|  21.2k|            SCN_EXPECT(false);
 6222|  21.2k|            SCN_UNREACHABLE;
 6223|  21.2k|        }
 6224|  21.2k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6123|  21.0k|    {
 6124|  21.0k|        const bool need_skipped_width =
 6125|  21.0k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 412, False: 20.6k]
  |  Branch (6125:33): [True: 2.14k, False: 18.5k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  21.0k|        auto it = rng.begin();
 6129|  21.0k|        std::ptrdiff_t prefix_width = 0;
 6130|  21.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 2.19k, False: 18.8k]
  ------------------
 6131|  2.19k|            auto max_width_view = take_width(rng, specs.precision);
 6132|  2.19k|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|  2.19k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.19k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.19k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14, False: 2.18k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     14|    }                                                  \
  |  |  |  | 3671|  2.19k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|  2.18k|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|  2.18k|            it = prefix_result.first.base();
 6135|  2.18k|            prefix_width = prefix_result.second;
 6136|  2.18k|        }
 6137|  18.8k|        else {
 6138|  18.8k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  18.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  18.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  18.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  18.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 18.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  18.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  18.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  18.8k|            std::tie(it, prefix_width) = prefix_result;
 6140|  18.8k|        }
 6141|  21.0k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  21.0k|        std::ptrdiff_t value_width = 0;
 6145|  21.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 2.18k, False: 18.8k]
  ------------------
 6146|  2.18k|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 16, False: 2.16k]
  ------------------
 6147|     16|                return unexpected_scan_error(
 6148|     16|                    scan_error::invalid_scanned_value,
 6149|     16|                    "Too many fill characters before value, "
 6150|     16|                    "precision exceeded before reading value");
 6151|     16|            }
 6152|       |
 6153|  2.16k|            const auto initial_width = specs.precision - prefix_width;
 6154|  2.16k|            auto max_width_view =
 6155|  2.16k|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|  2.16k|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|  2.16k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.16k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.16k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.36k, False: 804]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.36k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.36k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.36k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.36k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.36k|    }                                                  \
  |  |  |  | 3671|  2.16k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    804|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    804|            it = w_it.base();
 6158|    804|            value_width = initial_width - w_it.count();
 6159|    804|        }
 6160|  18.8k|        else {
 6161|  18.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  18.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  18.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  18.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 15.4k, False: 3.44k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  15.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  15.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  15.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  15.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  15.4k|    }                                                  \
  |  | 3671|  18.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  18.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  3.44k|                                             specs, value, loc));
 6163|       |
 6164|  3.44k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 310, False: 3.13k]
  ------------------
 6165|    310|                value_width = calculate_text_width(
 6166|    310|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    310|                        .view());
 6168|    310|            }
 6169|  3.44k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  4.25k|        std::ptrdiff_t postfix_width = 0;
 6173|  4.25k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 3.63k, False: 618]
  ------------------
 6174|  3.63k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  3.63k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.63k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.63k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 3.63k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  3.63k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.63k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  3.63k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  3.63k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  3.63k|                                 value_width));
 6178|  3.63k|            std::tie(it, postfix_width) = postfix_result;
 6179|  3.63k|        }
 6180|       |
 6181|  4.25k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  4.25k|                                                 value_width, postfix_width);
 6183|  4.25k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 196, False: 4.05k]
  ------------------
 6184|    196|            return unexpected(e);
 6185|    196|        }
 6186|       |
 6187|  4.05k|        return it;
 6188|  4.25k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6192|  21.2k|    {
 6193|  21.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  21.2k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  21.2k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  21.2k|            auto rd = make_reader<T, char_type>();
 6198|  21.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  21.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 134, False: 21.0k]
  |  |  ------------------
  ------------------
 6199|    134|                return unexpected(e);
 6200|    134|            }
 6201|       |
 6202|  21.0k|            return impl(rd, range, value);
 6203|  21.2k|        }
 6204|  21.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  21.2k|            auto rd = make_reader<T, char_type>();
 6206|  21.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  21.2k|                return unexpected(e);
 6208|  21.2k|            }
 6209|       |
 6210|  21.2k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  21.2k|                specs.width != 0) {
 6212|  21.2k|                return impl(rd, range, value);
 6213|  21.2k|            }
 6214|       |
 6215|  21.2k|            auto crange = get_as_contiguous(range);
 6216|  21.2k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  21.2k|            return ranges::next(range.begin(),
 6218|  21.2k|                                ranges::distance(crange.begin(), it));
 6219|  21.2k|        }
 6220|  21.2k|        else {
 6221|  21.2k|            SCN_EXPECT(false);
 6222|  21.2k|            SCN_UNREACHABLE;
 6223|  21.2k|        }
 6224|  21.2k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|  21.0k|    {
 6124|  21.0k|        const bool need_skipped_width =
 6125|  21.0k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 412, False: 20.6k]
  |  Branch (6125:33): [True: 2.14k, False: 18.5k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  21.0k|        auto it = rng.begin();
 6129|  21.0k|        std::ptrdiff_t prefix_width = 0;
 6130|  21.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 2.19k, False: 18.8k]
  ------------------
 6131|  2.19k|            auto max_width_view = take_width(rng, specs.precision);
 6132|  2.19k|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|  2.19k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.19k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.19k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14, False: 2.18k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     14|    }                                                  \
  |  |  |  | 3671|  2.19k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|  2.18k|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|  2.18k|            it = prefix_result.first.base();
 6135|  2.18k|            prefix_width = prefix_result.second;
 6136|  2.18k|        }
 6137|  18.8k|        else {
 6138|  18.8k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  18.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  18.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  18.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  18.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 18.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  18.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  18.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  18.8k|            std::tie(it, prefix_width) = prefix_result;
 6140|  18.8k|        }
 6141|  21.0k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  21.0k|        std::ptrdiff_t value_width = 0;
 6145|  21.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 2.18k, False: 18.8k]
  ------------------
 6146|  2.18k|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 16, False: 2.16k]
  ------------------
 6147|     16|                return unexpected_scan_error(
 6148|     16|                    scan_error::invalid_scanned_value,
 6149|     16|                    "Too many fill characters before value, "
 6150|     16|                    "precision exceeded before reading value");
 6151|     16|            }
 6152|       |
 6153|  2.16k|            const auto initial_width = specs.precision - prefix_width;
 6154|  2.16k|            auto max_width_view =
 6155|  2.16k|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|  2.16k|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|  2.16k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.16k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.16k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.36k, False: 804]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.36k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.36k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.36k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.36k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.36k|    }                                                  \
  |  |  |  | 3671|  2.16k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    804|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    804|            it = w_it.base();
 6158|    804|            value_width = initial_width - w_it.count();
 6159|    804|        }
 6160|  18.8k|        else {
 6161|  18.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  18.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  18.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  18.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 15.4k, False: 3.44k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  15.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  15.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  15.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  15.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  15.4k|    }                                                  \
  |  | 3671|  18.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  18.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  3.44k|                                             specs, value, loc));
 6163|       |
 6164|  3.44k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 310, False: 3.13k]
  ------------------
 6165|    310|                value_width = calculate_text_width(
 6166|    310|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    310|                        .view());
 6168|    310|            }
 6169|  3.44k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  4.25k|        std::ptrdiff_t postfix_width = 0;
 6173|  4.25k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 3.63k, False: 618]
  ------------------
 6174|  3.63k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  3.63k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.63k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.63k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 3.63k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  3.63k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.63k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  3.63k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  3.63k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  3.63k|                                 value_width));
 6178|  3.63k|            std::tie(it, postfix_width) = postfix_result;
 6179|  3.63k|        }
 6180|       |
 6181|  4.25k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  4.25k|                                                 value_width, postfix_width);
 6183|  4.25k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 196, False: 4.05k]
  ------------------
 6184|    196|            return unexpected(e);
 6185|    196|        }
 6186|       |
 6187|  4.05k|        return it;
 6188|  4.25k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKcEERT_:
 6192|  21.2k|    {
 6193|  21.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  21.2k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  21.2k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  21.2k|            auto rd = make_reader<T, char_type>();
 6198|  21.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  21.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 134, False: 21.0k]
  |  |  ------------------
  ------------------
 6199|    134|                return unexpected(e);
 6200|    134|            }
 6201|       |
 6202|  21.0k|            return impl(rd, range, value);
 6203|  21.2k|        }
 6204|  21.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  21.2k|            auto rd = make_reader<T, char_type>();
 6206|  21.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  21.2k|                return unexpected(e);
 6208|  21.2k|            }
 6209|       |
 6210|  21.2k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  21.2k|                specs.width != 0) {
 6212|  21.2k|                return impl(rd, range, value);
 6213|  21.2k|            }
 6214|       |
 6215|  21.2k|            auto crange = get_as_contiguous(range);
 6216|  21.2k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  21.2k|            return ranges::next(range.begin(),
 6218|  21.2k|                                ranges::distance(crange.begin(), it));
 6219|  21.2k|        }
 6220|  21.2k|        else {
 6221|  21.2k|            SCN_EXPECT(false);
 6222|  21.2k|            SCN_UNREACHABLE;
 6223|  21.2k|        }
 6224|  21.2k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|  21.0k|    {
 6124|  21.0k|        const bool need_skipped_width =
 6125|  21.0k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 412, False: 20.6k]
  |  Branch (6125:33): [True: 2.14k, False: 18.5k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  21.0k|        auto it = rng.begin();
 6129|  21.0k|        std::ptrdiff_t prefix_width = 0;
 6130|  21.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 2.19k, False: 18.8k]
  ------------------
 6131|  2.19k|            auto max_width_view = take_width(rng, specs.precision);
 6132|  2.19k|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|  2.19k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.19k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.19k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14, False: 2.18k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     14|    }                                                  \
  |  |  |  | 3671|  2.19k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|  2.18k|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|  2.18k|            it = prefix_result.first.base();
 6135|  2.18k|            prefix_width = prefix_result.second;
 6136|  2.18k|        }
 6137|  18.8k|        else {
 6138|  18.8k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  18.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  18.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  18.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  18.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 18.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  18.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  18.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  18.8k|            std::tie(it, prefix_width) = prefix_result;
 6140|  18.8k|        }
 6141|  21.0k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  21.0k|        std::ptrdiff_t value_width = 0;
 6145|  21.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 2.18k, False: 18.8k]
  ------------------
 6146|  2.18k|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 16, False: 2.16k]
  ------------------
 6147|     16|                return unexpected_scan_error(
 6148|     16|                    scan_error::invalid_scanned_value,
 6149|     16|                    "Too many fill characters before value, "
 6150|     16|                    "precision exceeded before reading value");
 6151|     16|            }
 6152|       |
 6153|  2.16k|            const auto initial_width = specs.precision - prefix_width;
 6154|  2.16k|            auto max_width_view =
 6155|  2.16k|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|  2.16k|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|  2.16k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.16k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.16k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.36k, False: 804]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.36k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.36k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.36k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.36k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.36k|    }                                                  \
  |  |  |  | 3671|  2.16k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    804|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    804|            it = w_it.base();
 6158|    804|            value_width = initial_width - w_it.count();
 6159|    804|        }
 6160|  18.8k|        else {
 6161|  18.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  18.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  18.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  18.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 15.4k, False: 3.44k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  15.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  15.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  15.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  15.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  15.4k|    }                                                  \
  |  | 3671|  18.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  18.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  3.44k|                                             specs, value, loc));
 6163|       |
 6164|  3.44k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 310, False: 3.13k]
  ------------------
 6165|    310|                value_width = calculate_text_width(
 6166|    310|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    310|                        .view());
 6168|    310|            }
 6169|  3.44k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  4.25k|        std::ptrdiff_t postfix_width = 0;
 6173|  4.25k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 3.63k, False: 618]
  ------------------
 6174|  3.63k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  3.63k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.63k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.63k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 3.63k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  3.63k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.63k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  3.63k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  3.63k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  3.63k|                                 value_width));
 6178|  3.63k|            std::tie(it, postfix_width) = postfix_result;
 6179|  3.63k|        }
 6180|       |
 6181|  4.25k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  4.25k|                                                 value_width, postfix_width);
 6183|  4.25k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 196, False: 4.05k]
  ------------------
 6184|    196|            return unexpected(e);
 6185|    196|        }
 6186|       |
 6187|  4.05k|        return it;
 6188|  4.25k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|  6.33k|{
 5795|  6.33k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.33k]
  |  |  ------------------
  ------------------
 5796|      0|        return unexpected(e);
 5797|      0|    }
 5798|       |
 5799|  6.33k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 704, False: 5.63k]
  ------------------
 5800|    704|        return range.begin();
 5801|    704|    }
 5802|       |
 5803|  5.63k|    return skip_classic_whitespace(range);
 5804|  6.33k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
 5870|    704|    {
 5871|    704|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    704|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    704|                          basic_contiguous_scan_context<char_type>>) {
 5875|    704|            auto rd = make_reader<T, char_type>();
 5876|    704|            return impl(rd, range, value);
 5877|    704|        }
 5878|    704|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    704|            auto rd = make_reader<T, char_type>();
 5880|    704|            if (!is_segment_contiguous(range)) {
 5881|    704|                return impl(rd, range, value);
 5882|    704|            }
 5883|    704|            auto crange = get_as_contiguous(range);
 5884|    704|            SCN_TRY(it, impl(rd, crange, value));
 5885|    704|            return ranges::next(range.begin(),
 5886|    704|                                ranges::distance(crange.begin(), it));
 5887|    704|        }
 5888|    704|        else {
 5889|    704|            SCN_EXPECT(false);
 5890|    704|            SCN_UNREACHABLE;
 5891|    704|        }
 5892|    704|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    704|    {
 5863|    704|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    704|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    704|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    704|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    704|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 704]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    704|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    704|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    704|                        .transform_error(make_eof_scan_error));
 5865|    704|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    704|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|    704|    {
 3528|    704|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    704|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|    704|        return read_default_with_base(range, value, 10);
 3530|    704|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|    704|    {
 3492|    704|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|    704|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    704|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    704|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    704|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 704]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    704|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    704|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|    704|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|    704|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|    704|            if (prefix_result.sign == sign_type::minus_sign) {
 3497|    704|                return unexpected_scan_error(
 3498|    704|                    scan_error::invalid_scanned_value,
 3499|    704|                    "Unexpected '-' sign when parsing an "
 3500|    704|                    "unsigned value");
 3501|    704|            }
 3502|    704|        }
 3503|       |
 3504|    704|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 704]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  1.40k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    704|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    704|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    704|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    704|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 704]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    704|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    704|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  1.40k|                parse_integer_digits_without_thsep(
 3511|  1.40k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  1.40k|                    prefix_result.parsed_base));
 3513|       |
 3514|  1.40k|        auto buf = make_contiguous_buffer(
 3515|  1.40k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  1.40k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|    704|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    704|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    704|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    704|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 704, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    704|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    704|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    704|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    704|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    704|    }                                                  \
  |  |  |  | 3671|    704|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|      0|                                    prefix_result.parsed_base));
 3519|       |
 3520|      0|        return ranges::next(prefix_result.iterator,
 3521|      0|                            ranges::distance(buf.view().begin(), result_it));
 3522|  1.40k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
 5870|    704|    {
 5871|    704|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    704|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    704|                          basic_contiguous_scan_context<char_type>>) {
 5875|    704|            auto rd = make_reader<T, char_type>();
 5876|    704|            return impl(rd, range, value);
 5877|    704|        }
 5878|    704|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    704|            auto rd = make_reader<T, char_type>();
 5880|    704|            if (!is_segment_contiguous(range)) {
 5881|    704|                return impl(rd, range, value);
 5882|    704|            }
 5883|    704|            auto crange = get_as_contiguous(range);
 5884|    704|            SCN_TRY(it, impl(rd, crange, value));
 5885|    704|            return ranges::next(range.begin(),
 5886|    704|                                ranges::distance(crange.begin(), it));
 5887|    704|        }
 5888|    704|        else {
 5889|    704|            SCN_EXPECT(false);
 5890|    704|            SCN_UNREACHABLE;
 5891|    704|        }
 5892|    704|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    704|    {
 5863|    704|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    704|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    704|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    704|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    704|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 704]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    704|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    704|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    704|                        .transform_error(make_eof_scan_error));
 5865|    704|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    704|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|    704|    {
 3528|    704|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    704|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|    704|        return read_default_with_base(range, value, 10);
 3530|    704|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|    704|    {
 3492|    704|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|    704|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    704|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    704|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    704|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 704]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    704|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    704|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|    704|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|    704|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|    704|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3496:17): [True: 0, False: 704]
  ------------------
 3497|      0|                return unexpected_scan_error(
 3498|      0|                    scan_error::invalid_scanned_value,
 3499|      0|                    "Unexpected '-' sign when parsing an "
 3500|      0|                    "unsigned value");
 3501|      0|            }
 3502|    704|        }
 3503|       |
 3504|    704|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 704]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  1.40k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    704|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    704|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    704|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    704|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 704]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    704|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    704|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  1.40k|                parse_integer_digits_without_thsep(
 3511|  1.40k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  1.40k|                    prefix_result.parsed_base));
 3513|       |
 3514|  1.40k|        auto buf = make_contiguous_buffer(
 3515|  1.40k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  1.40k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|    704|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    704|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    704|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    704|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 704, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    704|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    704|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    704|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    704|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    704|    }                                                  \
  |  |  |  | 3671|    704|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|      0|                                    prefix_result.parsed_base));
 3519|       |
 3520|      0|        return ranges::next(prefix_result.iterator,
 3521|      0|                            ranges::distance(buf.view().begin(), result_it));
 3522|  1.40k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIPvEENS0_13scan_expectedIPKwEERT_:
 5870|    704|    {
 5871|    704|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    704|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    704|                          basic_contiguous_scan_context<char_type>>) {
 5875|    704|            auto rd = make_reader<T, char_type>();
 5876|    704|            return impl(rd, range, value);
 5877|    704|        }
 5878|    704|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    704|            auto rd = make_reader<T, char_type>();
 5880|    704|            if (!is_segment_contiguous(range)) {
 5881|    704|                return impl(rd, range, value);
 5882|    704|            }
 5883|    704|            auto crange = get_as_contiguous(range);
 5884|    704|            SCN_TRY(it, impl(rd, crange, value));
 5885|    704|            return ranges::next(range.begin(),
 5886|    704|                                ranges::distance(crange.begin(), it));
 5887|    704|        }
 5888|    704|        else {
 5889|    704|            SCN_EXPECT(false);
 5890|    704|            SCN_UNREACHABLE;
 5891|    704|        }
 5892|    704|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_23reader_impl_for_voidptrIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5862|    704|    {
 5863|    704|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    704|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    704|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    704|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    704|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 704]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    704|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    704|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    704|                        .transform_error(make_eof_scan_error));
 5865|    704|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    704|    }
_ZNK3scn2v34impl23reader_impl_for_voidptrIwE19skip_ws_before_readEv:
 5747|  1.37k|    {
 5748|  1.37k|        return true;
 5749|  1.37k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5764|  1.15k|    {
 5765|  1.15k|        detail::format_specs specs{};
 5766|  1.15k|        specs.type = detail::presentation_type::int_hex;
 5767|       |
 5768|  1.15k|        std::uintptr_t intvalue{};
 5769|  1.15k|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3672|  1.15k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.15k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.15k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.15k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.15k|    }                                                  \
  |  |  |  | 3671|  1.15k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5770|      0|                                                                intvalue, loc));
 5771|      0|        value = reinterpret_cast<void*>(intvalue);
 5772|      0|        return result;
 5773|  1.15k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIbEENS0_13scan_expectedIPKwEERT_:
 5870|    704|    {
 5871|    704|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    704|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    704|                          basic_contiguous_scan_context<char_type>>) {
 5875|    704|            auto rd = make_reader<T, char_type>();
 5876|    704|            return impl(rd, range, value);
 5877|    704|        }
 5878|    704|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    704|            auto rd = make_reader<T, char_type>();
 5880|    704|            if (!is_segment_contiguous(range)) {
 5881|    704|                return impl(rd, range, value);
 5882|    704|            }
 5883|    704|            auto crange = get_as_contiguous(range);
 5884|    704|            SCN_TRY(it, impl(rd, crange, value));
 5885|    704|            return ranges::next(range.begin(),
 5886|    704|                                ranges::distance(crange.begin(), it));
 5887|    704|        }
 5888|    704|        else {
 5889|    704|            SCN_EXPECT(false);
 5890|    704|            SCN_UNREACHABLE;
 5891|    704|        }
 5892|    704|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_20reader_impl_for_boolIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    704|    {
 5863|    704|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    704|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    704|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    704|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    704|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 704]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    704|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    704|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    704|                        .transform_error(make_eof_scan_error));
 5865|    704|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    704|    }
_ZNK3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE19skip_ws_before_readEv:
 3034|  1.61k|    {
 3035|  1.61k|        return true;
 3036|  1.61k|    }
_ZNK3scn2v34impl20reader_impl_for_boolIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5503|    704|    {
 5504|    704|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    704|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5505|       |
 5506|    704|        return bool_reader<CharT>{}.read_classic(range, value);
 5507|    704|    }
_ZNK3scn2v34impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5354|  1.21k|    {
 5355|  1.21k|        scan_error err{scan_error::invalid_scanned_value,
 5356|  1.21k|                       "Failed to read boolean"};
 5357|       |
 5358|  1.21k|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5358:13): [True: 1.17k, False: 48]
  ------------------
 5359|  1.17k|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5359:22): [True: 0, False: 1.17k]
  ------------------
 5360|      0|                return *r;
 5361|      0|            }
 5362|  1.17k|            else {
 5363|  1.17k|                err = r.error();
 5364|  1.17k|            }
 5365|  1.17k|        }
 5366|       |
 5367|  1.21k|        if (m_options & allow_text) {
  ------------------
  |  Branch (5367:13): [True: 1.20k, False: 18]
  ------------------
 5368|  1.20k|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5368:22): [True: 0, False: 1.20k]
  ------------------
 5369|      0|                return *r;
 5370|      0|            }
 5371|  1.20k|            else {
 5372|  1.20k|                err = r.error();
 5373|  1.20k|            }
 5374|  1.20k|        }
 5375|       |
 5376|  1.21k|        return unexpected(err);
 5377|  1.21k|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5383|  1.20k|    {
 5384|  1.20k|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5384:18): [True: 0, False: 1.20k]
  ------------------
 5385|      0|            value = false;
 5386|      0|            return *r;
 5387|      0|        }
 5388|  1.20k|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5388:18): [True: 0, False: 1.20k]
  ------------------
 5389|      0|            value = true;
 5390|      0|            return *r;
 5391|      0|        }
 5392|       |
 5393|  1.20k|        return unexpected_scan_error(
 5394|  1.20k|            scan_error::invalid_scanned_value,
 5395|  1.20k|            "Failed to read numeric boolean value: No match");
 5396|  1.20k|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5401|  1.20k|    {
 5402|  1.20k|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5402:18): [True: 0, False: 1.20k]
  ------------------
 5403|      0|            value = true;
 5404|      0|            return *r;
 5405|      0|        }
 5406|  1.20k|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5406:18): [True: 0, False: 1.20k]
  ------------------
 5407|      0|            value = false;
 5408|      0|            return *r;
 5409|      0|        }
 5410|       |
 5411|  1.20k|        return unexpected_scan_error(
 5412|  1.20k|            scan_error::invalid_scanned_value,
 5413|  1.20k|            "Failed to read textual boolean value: No match");
 5414|  1.20k|    }
_ZN3scn2v34impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2193|  2.40k|{
 2194|  2.40k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  2.40k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.40k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.40k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 134, False: 2.26k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    134|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    134|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    134|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    134|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    134|    }                                                  \
  |  |  |  | 3671|  2.40k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.26k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|  2.26k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|  2.26k|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|  2.26k|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|  2.26k|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|  2.26k|        if (SCN_UNLIKELY(sv.view() != str)) {
 2201|  2.26k|            return unexpected(parse_error::error);
 2202|  2.26k|        }
 2203|  2.26k|        return it;
 2204|  2.26k|    }
 2205|  2.26k|    else {
 2206|  2.26k|        auto range_it = range.begin();
 2207|  2.26k|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2207:28): [True: 2.26k, False: 0]
  ------------------
 2208|  2.26k|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  859|  2.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.26k, False: 0]
  |  |  ------------------
  ------------------
 2209|  2.26k|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|  2.26k|                return unexpected(parse_error::error);
 2211|  2.26k|            }
 2212|  2.26k|        }
 2213|      0|        return it;
 2214|  2.26k|    }
 2215|  2.26k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIwEENS0_13scan_expectedIPKwEERT_:
 5870|    704|    {
 5871|    704|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    704|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    704|                          basic_contiguous_scan_context<char_type>>) {
 5875|    704|            auto rd = make_reader<T, char_type>();
 5876|    704|            return impl(rd, range, value);
 5877|    704|        }
 5878|    704|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    704|            auto rd = make_reader<T, char_type>();
 5880|    704|            if (!is_segment_contiguous(range)) {
 5881|    704|                return impl(rd, range, value);
 5882|    704|            }
 5883|    704|            auto crange = get_as_contiguous(range);
 5884|    704|            SCN_TRY(it, impl(rd, crange, value));
 5885|    704|            return ranges::next(range.begin(),
 5886|    704|                                ranges::distance(crange.begin(), it));
 5887|    704|        }
 5888|    704|        else {
 5889|    704|            SCN_EXPECT(false);
 5890|    704|            SCN_UNREACHABLE;
 5891|    704|        }
 5892|    704|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_wcharIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    704|    {
 5863|    704|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    704|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    704|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    704|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    704|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 704]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    704|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    704|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    704|                        .transform_error(make_eof_scan_error));
 5865|    704|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    704|    }
_ZN3scn2v34impl12float_readerIwEC2Ev:
 3657|    704|    constexpr float_reader() = default;
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 5870|    704|    {
 5871|    704|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    704|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    704|                          basic_contiguous_scan_context<char_type>>) {
 5875|    704|            auto rd = make_reader<T, char_type>();
 5876|    704|            return impl(rd, range, value);
 5877|    704|        }
 5878|    704|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    704|            auto rd = make_reader<T, char_type>();
 5880|    704|            if (!is_segment_contiguous(range)) {
 5881|    704|                return impl(rd, range, value);
 5882|    704|            }
 5883|    704|            auto crange = get_as_contiguous(range);
 5884|    704|            SCN_TRY(it, impl(rd, crange, value));
 5885|    704|            return ranges::next(range.begin(),
 5886|    704|                                ranges::distance(crange.begin(), it));
 5887|    704|        }
 5888|    704|        else {
 5889|    704|            SCN_EXPECT(false);
 5890|    704|            SCN_UNREACHABLE;
 5891|    704|        }
 5892|    704|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    704|    {
 5863|    704|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    704|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    704|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    704|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    704|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 704]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    704|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    704|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    704|                        .transform_error(make_eof_scan_error));
 5865|    704|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    704|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|    704|    {
 4152|    704|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    704|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|    704|        float_reader<CharT> rd{};
 4155|    704|        return read_impl<Range>(
 4156|    704|            range, rd,
 4157|    704|            [](float_reader<CharT>& r, auto&&... args) {
 4158|    704|                return r.read_source(SCN_FWD(args)...);
 4159|    704|            },
 4160|    704|            value);
 4161|    704|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|    704|    {
  754|    704|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|    704|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    704|              cvref<T> obj = *get<T>(fn);
  745|    704|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    704|                  obj(static_cast<decltype(args)>(args)...);
  747|    704|              }
  748|    704|              else {
  749|    704|                  return obj(static_cast<decltype(args)>(args)...);
  750|    704|              }
  751|    704|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|    704|    {
  684|    704|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    704|            return static_cast<T*>(s.m_cp);
  686|    704|        }
  687|    704|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    704|            return static_cast<T*>(s.m_p);
  689|    704|        }
  690|    704|        else {
  691|    704|            return reinterpret_cast<T*>(s.m_fp);
  692|    704|        }
  693|    704|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|    704|            [](float_reader<CharT>& r, auto&&... args) {
 4158|    704|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    704|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|    704|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|    704|        {
  662|    704|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|    704|    {
 5871|    704|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    704|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    704|                          basic_contiguous_scan_context<char_type>>) {
 5875|    704|            auto rd = make_reader<T, char_type>();
 5876|    704|            return impl(rd, range, value);
 5877|    704|        }
 5878|    704|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    704|            auto rd = make_reader<T, char_type>();
 5880|    704|            if (!is_segment_contiguous(range)) {
 5881|    704|                return impl(rd, range, value);
 5882|    704|            }
 5883|    704|            auto crange = get_as_contiguous(range);
 5884|    704|            SCN_TRY(it, impl(rd, crange, value));
 5885|    704|            return ranges::next(range.begin(),
 5886|    704|                                ranges::distance(crange.begin(), it));
 5887|    704|        }
 5888|    704|        else {
 5889|    704|            SCN_EXPECT(false);
 5890|    704|            SCN_UNREACHABLE;
 5891|    704|        }
 5892|    704|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|    704|    {
 5863|    704|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    704|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    704|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    704|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    704|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 704]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    704|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    704|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    704|                        .transform_error(make_eof_scan_error));
 5865|    704|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    704|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|    704|    {
 5266|    704|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    704|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    704|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    704|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|    704|    {
 5871|    704|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    704|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    704|                          basic_contiguous_scan_context<char_type>>) {
 5875|    704|            auto rd = make_reader<T, char_type>();
 5876|    704|            return impl(rd, range, value);
 5877|    704|        }
 5878|    704|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    704|            auto rd = make_reader<T, char_type>();
 5880|    704|            if (!is_segment_contiguous(range)) {
 5881|    704|                return impl(rd, range, value);
 5882|    704|            }
 5883|    704|            auto crange = get_as_contiguous(range);
 5884|    704|            SCN_TRY(it, impl(rd, crange, value));
 5885|    704|            return ranges::next(range.begin(),
 5886|    704|                                ranges::distance(crange.begin(), it));
 5887|    704|        }
 5888|    704|        else {
 5889|    704|            SCN_EXPECT(false);
 5890|    704|            SCN_UNREACHABLE;
 5891|    704|        }
 5892|    704|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5862|    704|    {
 5863|    704|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    704|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    704|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    704|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    704|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 704]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    704|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    704|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    704|                        .transform_error(make_eof_scan_error));
 5865|    704|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    704|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5265|    704|    {
 5266|    704|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    704|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    704|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    704|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|    704|    {
 5871|    704|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    704|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    704|                          basic_contiguous_scan_context<char_type>>) {
 5875|    704|            auto rd = make_reader<T, char_type>();
 5876|    704|            return impl(rd, range, value);
 5877|    704|        }
 5878|    704|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    704|            auto rd = make_reader<T, char_type>();
 5880|    704|            if (!is_segment_contiguous(range)) {
 5881|    704|                return impl(rd, range, value);
 5882|    704|            }
 5883|    704|            auto crange = get_as_contiguous(range);
 5884|    704|            SCN_TRY(it, impl(rd, crange, value));
 5885|    704|            return ranges::next(range.begin(),
 5886|    704|                                ranges::distance(crange.begin(), it));
 5887|    704|        }
 5888|    704|        else {
 5889|    704|            SCN_EXPECT(false);
 5890|    704|            SCN_UNREACHABLE;
 5891|    704|        }
 5892|    704|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|    704|    {
 5863|    704|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    704|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    704|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    704|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    704|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 704]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    704|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    704|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    704|                        .transform_error(make_eof_scan_error));
 5865|    704|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    704|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|    704|    {
 5266|    704|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    704|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    704|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    704|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2878|   672k|    {
 2879|   672k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2882|  1.37G|    {
 2883|  1.37G|        return m_current;
 2884|  1.37G|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2887|  2.75G|    {
 2888|  2.75G|        return m_range.end();
 2889|  2.75G|    }
_ZN3scn2v34impl19is_first_char_spaceIwEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1220|  1.37G|{
 1221|       |    // TODO: optimize
 1222|  1.37G|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  924|  1.37G|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.37G|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1223|  1.37G|    auto res = get_next_code_point(str);
 1224|  1.37G|    return {res.iterator, res.value, is_cp_space(res.value)};
 1225|  1.37G|}
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2902|  1.37G|    {
 2903|  1.37G|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  1.37G|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.37G|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|  1.37G|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|  1.37G|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 1.37G]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|  1.37G|        }
 2909|  1.37G|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  1.37G|    static_cast<    \
  |  |  929|  1.37G|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|  1.37G|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2892|   168k|    {
 2893|   168k|        return ranges::subrange{begin(), end()};
 2894|   168k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_b:
 6036|  2.67k|    {
 6037|  2.67k|        const bool need_skipped_width =
 6038|  2.67k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 124, False: 2.55k]
  |  Branch (6038:33): [True: 2.55k, False: 0]
  ------------------
 6039|  2.67k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  2.67k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 90, False: 2.58k]
  ------------------
 6043|  2.67k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 346, False: 2.24k]
  ------------------
 6044|    436|            return skip_fill(rng, specs.precision, specs.fill,
 6045|    436|                             need_skipped_width);
 6046|    436|        }
 6047|  2.24k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 2.10k, False: 134]
  |  Branch (6047:56): [True: 1.74k, False: 360]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  1.74k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 1.74k, False: 0]
  ------------------
 6051|  1.74k|                auto max_width_view = take_width(rng, specs.precision);
 6052|  1.74k|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|  1.74k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.74k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.74k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.74k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.74k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.74k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|  1.74k|                                  .transform_error(make_eof_scan_error));
 6054|  1.74k|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|  1.74k|            }
 6056|      0|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|      0|                            make_eof_scan_error));
 6058|       |
 6059|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 0]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|      0|            return result_type{it, 0};
 6067|      0|        }
 6068|       |
 6069|    494|        return result_type{rng.begin(), 0};
 6070|  2.24k|    }
_ZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEb:
 5950|    436|{
 5951|    436|    using char_type = detail::char_t<Range>;
 5952|    436|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5953|       |
 5954|    436|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5954:9): [True: 436, False: 0]
  ------------------
 5955|    436|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5956|    436|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5957|       |
 5958|    436|        if (max_width == 0) {
  ------------------
  |  Branch (5958:13): [True: 0, False: 436]
  ------------------
 5959|      0|            auto it = read_while_code_unit(range, pred);
 5960|       |
 5961|      0|            if (want_skipped_width) {
  ------------------
  |  Branch (5961:17): [True: 0, False: 0]
  ------------------
 5962|      0|                auto prefix_width =
 5963|      0|                    static_cast<std::ptrdiff_t>(
 5964|      0|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5965|      0|                    ranges::distance(range.begin(), it);
 5966|      0|                return result_type{it, prefix_width};
 5967|      0|            }
 5968|      0|            return result_type{it, 0};
 5969|      0|        }
 5970|       |
 5971|    436|        auto max_width_view = take_width(range, max_width);
 5972|    436|        auto w_it = read_while_code_unit(max_width_view, pred);
 5973|       |
 5974|    436|        if (want_skipped_width) {
  ------------------
  |  Branch (5974:13): [True: 436, False: 0]
  ------------------
 5975|    436|            return result_type{w_it.base(), max_width - w_it.count()};
 5976|    436|        }
 5977|      0|        return result_type{w_it.base(), 0};
 5978|    436|    }
 5979|       |
 5980|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 5981|      0|    if (max_width == 0) {
  ------------------
  |  Branch (5981:9): [True: 0, False: 0]
  ------------------
 5982|      0|        auto it = read_while_code_units(range, fill_chars);
 5983|       |
 5984|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5984:13): [True: 0, False: 0]
  ------------------
 5985|      0|            auto prefix_width =
 5986|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5987|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5988|      0|            return result_type{it, prefix_width};
 5989|      0|        }
 5990|      0|        return result_type{it, 0};
 5991|      0|    }
 5992|       |
 5993|      0|    auto max_width_view = take_width(range, max_width);
 5994|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5995|       |
 5996|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (5996:9): [True: 0, False: 0]
  ------------------
 5997|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 5998|      0|    }
 5999|      0|    return result_type{w_it.base(), 0};
 6000|      0|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_ST_LPv0EEEOSJ_:
  753|    436|    {
  754|    436|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_ST_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESZ_w:
  743|    510|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    510|              cvref<T> obj = *get<T>(fn);
  745|    510|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    510|                  obj(static_cast<decltype(args)>(args)...);
  747|    510|              }
  748|    510|              else {
  749|    510|                  return obj(static_cast<decltype(args)>(args)...);
  750|    510|              }
  751|    510|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESI_lRKNS0_6detail9fill_typeEbEUlwE_EEDaNS3_7storageE:
  683|    510|    {
  684|    510|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    510|            return static_cast<T*>(s.m_cp);
  686|    510|        }
  687|    510|        else if constexpr (std::is_object_v<T>) {
  688|    510|            return static_cast<T*>(s.m_p);
  689|    510|        }
  690|    510|        else {
  691|    510|            return reinterpret_cast<T*>(s.m_fp);
  692|    510|        }
  693|    510|    }
_ZZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEbENKUlwE_clEw:
 5956|    510|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_LPv0EEEPKSJ_:
  666|    436|        {
  667|    436|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|    436|{
 1976|    436|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    436|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|    436|{
 1957|    436|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    436|        return std::find_if(range.begin(), range.end(), pred);
 1959|    436|    }
 1960|    436|    else {
 1961|    436|        auto first = range.begin();
 1962|    570|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 510, False: 60]
  ------------------
 1963|    510|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 376, False: 134]
  ------------------
 1964|    376|                return first;
 1965|    376|            }
 1966|    510|        }
 1967|     60|        return first;
 1968|    436|    }
 1969|    436|}
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE5beginEv:
 2809|  3.93k|    {
 2810|  3.93k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2811|  3.93k|                                      m_count};
 2812|  3.93k|    }
_ZNK3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEvE3getEv:
 2716|  13.6k|    {
 2717|  13.6k|        return view;
 2718|  13.6k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEC2ES6_SF_l:
 2381|  3.93k|    {
 2382|  3.93k|    }
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2780|  2.31k|        {
 2781|  2.31k|            return !(y == x);
 2782|  2.31k|        }
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2769|  5.81k|        {
 2770|  5.81k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2770:21): [True: 60, False: 5.75k]
  |  Branch (2770:39): [True: 60, False: 0]
  ------------------
 2771|  5.81k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2771:20): [True: 0, False: 5.75k]
  ------------------
 2772|  5.81k|        }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE14multibyte_leftEv:
 2420|     60|    {
 2421|     60|        return m_multibyte_left;
 2422|     60|    }
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE3endEv:
 2815|  5.81k|    {
 2816|  5.81k|        return sentinel<true>{m_base.get().end()};
 2817|  5.81k|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE8sentinelILb1EEC2ENSA_8sentinelILb1EEE:
 2750|  5.81k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEdeEv:
 2425|  4.00k|    {
 2426|  4.00k|        return *m_current;
 2427|  4.00k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEppEv:
 2434|  1.88k|    {
 2435|  1.88k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  1.88k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.88k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2436|  1.88k|        _increment_current();
 2437|  1.88k|        return *this;
 2438|  1.88k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE18_increment_currentEv:
 2667|  1.88k|    {
 2668|  1.88k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2668:13): [True: 1.88k, False: 0]
  ------------------
 2669|  1.88k|            auto cplen = _get_cp_length_at_current();
 2670|  1.88k|            m_multibyte_left = cplen - 1;
 2671|  1.88k|            m_count -= _get_width_at_current_cp_start(cplen);
 2672|  1.88k|        }
 2673|      0|        else {
 2674|      0|            --m_multibyte_left;
 2675|      0|        }
 2676|       |
 2677|  1.88k|        ++m_current;
 2678|  1.88k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE25_get_cp_length_at_currentEv:
 2638|  1.88k|    {
 2639|  1.88k|        return static_cast<difference_type>(
 2640|  1.88k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2641|  1.88k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE30_get_width_at_current_cp_startEl:
 2644|  1.88k|    {
 2645|  1.88k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|  1.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.88k]
  |  |  ------------------
  ------------------
 2646|      0|            return 0;
 2647|      0|        }
 2648|       |
 2649|  1.88k|        if (cplen == 1) {
  ------------------
  |  Branch (2649:13): [True: 1.88k, False: 0]
  ------------------
 2650|  1.88k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  1.88k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.88k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2651|  1.88k|            auto cp = static_cast<char32_t>(*m_current);
 2652|  1.88k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2653|  1.88k|        }
 2654|       |
 2655|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2656|      0|                                           cplen);
 2657|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2658|      0|            return 0;
 2659|      0|        }
 2660|       |
 2661|      0|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2662|      0|        return static_cast<difference_type>(
 2663|      0|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2664|      0|    }
_ZNK3scn2v34impl14_take_width_fnclINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEEDTtlS4_fp_fp0_EERKT_l:
 2831|  2.18k|    {
 2832|  2.18k|        return take_width_view{r, n};
 2833|  2.18k|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEEC2ERKSA_l:
 2800|  2.18k|    {
 2801|  2.18k|    }
_ZN3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEvEC2ERKSB_:
 2713|  2.18k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|  1.74k|{
 2951|  1.74k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 1.74k, False: 0]
  ------------------
 2952|  1.74k|        auto it = read_while_classic_space(range);
 2953|  1.74k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  1.74k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.74k]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|  1.74k|        return it;
 2959|  1.74k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  1.74k|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|  1.74k|{
 2117|  1.74k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  1.74k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  1.74k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  1.74k|        auto buf = make_contiguous_buffer(range);
 2121|  1.74k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  1.74k|        return ranges::next(range.begin(),
 2123|  1.74k|                            ranges::distance(buf.view().begin(), it));
 2124|  1.74k|    }
 2125|  1.74k|    else {
 2126|  1.74k|        auto it = range.begin();
 2127|       |
 2128|  1.74k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  1.74k|            auto seg = get_contiguous_beginning(range);
 2130|  1.74k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  1.74k|                seg_it != seg.end()) {
 2132|  1.74k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  1.74k|            }
 2134|  1.74k|            ranges::advance(it, seg.size());
 2135|  1.74k|        }
 2136|       |
 2137|  1.74k|        return read_while_code_point(
 2138|  1.74k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  1.74k|    }
 2140|  1.74k|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|  1.74k|{
 2082|  1.74k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  1.74k|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|  1.74k|{
 2061|  1.74k|    auto it = range.begin();
 2062|  1.74k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 1.74k, False: 0]
  ------------------
 2063|  1.74k|        const auto val =
 2064|  1.74k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  1.74k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  1.74k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.74k, False: 0]
  |  |  ------------------
  ------------------
 2066|  1.74k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  1.74k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  1.74k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 1.74k, False: 0]
  ------------------
 2069|  1.74k|                return it;
 2070|  1.74k|            }
 2071|  1.74k|        }
 2072|      0|        it = val.iterator;
 2073|      0|    }
 2074|       |
 2075|      0|    return it;
 2076|  1.74k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISP_EEE4typeEEESP_:
 1898|  1.74k|{
 1899|  1.74k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  1.74k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.74k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  1.74k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  1.74k|    auto it = range.begin();
 1903|  1.74k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  1.74k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.74k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  1.74k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 1.74k, False: 0]
  ------------------
 1912|  1.74k|        ++it;
 1913|  1.74k|        return {it, string_type(1, *range.begin())};
 1914|  1.74k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|  1.74k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEbT_:
  943|  3.49k|{
  944|  3.49k|    return is_range_eof(r.begin(), r.end());
  945|  3.49k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS8_ISE_E8sentinelILb1EEEEEbT_T0_:
  927|  3.49k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  3.49k|    {
  937|  3.49k|        return begin == end;
  938|  3.49k|    }
  939|  3.49k|}
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEwE8is_validEv:
 1889|  1.74k|    {
 1890|  1.74k|        return !codepoint.empty();
 1891|  1.74k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|  1.74k|    {
  754|  1.74k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|  1.74k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.74k|              cvref<T> obj = *get<T>(fn);
  745|  1.74k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.74k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.74k|              }
  748|  1.74k|              else {
  749|  1.74k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.74k|              }
  751|  1.74k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS6_INS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.74k|    {
  684|  1.74k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.74k|            return static_cast<T*>(s.m_cp);
  686|  1.74k|        }
  687|  1.74k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.74k|            return static_cast<T*>(s.m_p);
  689|  1.74k|        }
  690|  1.74k|        else {
  691|  1.74k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.74k|        }
  693|  1.74k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  1.74k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|  1.74k|        {
  662|  1.74k|        }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|  1.74k|{
  950|  1.74k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.74k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  1.74k|    return eof_error::good;
  954|  1.74k|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE4baseEv:
 2412|  7.93k|    {
 2413|  7.93k|        return m_current;
 2414|  7.93k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE5countEv:
 2416|  7.99k|    {
 2417|  7.99k|        return m_count;
 2418|  7.99k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|  40.8k|    {
 6037|  40.8k|        const bool need_skipped_width =
 6038|  40.8k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 32.0k, False: 8.80k]
  |  Branch (6038:33): [True: 0, False: 8.80k]
  ------------------
 6039|  40.8k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  40.8k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 72, False: 40.7k]
  ------------------
 6043|  40.8k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 306, False: 40.4k]
  ------------------
 6044|    378|            return skip_fill(rng, specs.precision, specs.fill,
 6045|    378|                             need_skipped_width);
 6046|    378|        }
 6047|  40.4k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 38.8k, False: 1.53k]
  |  Branch (6047:56): [True: 3.55k, False: 35.3k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  3.55k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 3.55k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  7.10k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|  3.55k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.55k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.55k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.55k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 3.55k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  3.55k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.55k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  7.10k|                            make_eof_scan_error));
 6058|       |
 6059|  7.10k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 2.86k, False: 690]
  ------------------
 6060|  2.86k|                return result_type{
 6061|  2.86k|                    it,
 6062|  2.86k|                    calculate_text_width(make_contiguous_buffer(
 6063|  2.86k|                                             ranges::subrange{rng.begin(), it})
 6064|  2.86k|                                             .view())};
 6065|  2.86k|            }
 6066|    690|            return result_type{it, 0};
 6067|  7.10k|        }
 6068|       |
 6069|  36.8k|        return result_type{rng.begin(), 0};
 6070|  40.4k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|  4.54k|    {
 6079|  4.54k|        const bool need_skipped_width =
 6080|  4.54k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 2.14k, False: 2.40k]
  |  Branch (6080:33): [True: 404, False: 1.99k]
  ------------------
 6081|  4.54k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  4.54k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 100, False: 4.44k]
  ------------------
 6084|  4.54k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 156, False: 4.28k]
  ------------------
 6085|    256|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 114, False: 142]
  ------------------
 6086|    256|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 68, False: 46]
  ------------------
 6087|     68|                return result_type{rng.begin(), 0};
 6088|     68|            }
 6089|    188|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|    188|                             specs.fill, need_skipped_width);
 6091|    256|        }
 6092|  4.28k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 4.26k, False: 24]
  ------------------
 6093|  4.28k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 3.78k, False: 474]
  ------------------
 6094|  4.28k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 1.77k, False: 2.01k]
  |  Branch (6094:35): [True: 1.74k, False: 32]
  ------------------
 6095|  3.78k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 236, False: 1.80k]
  ------------------
 6096|  2.04k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 192, False: 44]
  ------------------
 6097|  1.93k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 192, False: 1.74k]
  ------------------
 6098|    192|                const auto initial_width =
 6099|    192|                    specs.precision - prefix_width - value_width;
 6100|    192|                auto max_width_view = take_width(rng, initial_width);
 6101|    192|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|    192|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    192|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    192|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    192|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 192]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    192|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    192|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|    192|                                  .transform_error(make_eof_scan_error));
 6103|    192|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|    192|            }
 6105|  3.48k|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|  1.74k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.74k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.74k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.74k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.74k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.74k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|  3.48k|                            make_eof_scan_error));
 6107|       |
 6108|  3.48k|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 1.74k, False: 0]
  ------------------
 6109|  1.74k|                return result_type{
 6110|  1.74k|                    it,
 6111|  1.74k|                    calculate_text_width(make_contiguous_buffer(
 6112|  1.74k|                                             ranges::subrange{rng.begin(), it})
 6113|  1.74k|                                             .view())};
 6114|  1.74k|            }
 6115|      0|            return result_type{it, 0};
 6116|  3.48k|        }
 6117|  2.35k|        return result_type{rng.begin(), 0};
 6118|  4.28k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
 6192|  13.1k|    {
 6193|  13.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  13.1k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  13.1k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  13.1k|            auto rd = make_reader<T, char_type>();
 6198|  13.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  13.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.3k, False: 786]
  |  |  ------------------
  ------------------
 6199|  12.3k|                return unexpected(e);
 6200|  12.3k|            }
 6201|       |
 6202|    786|            return impl(rd, range, value);
 6203|  13.1k|        }
 6204|  13.1k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  13.1k|            auto rd = make_reader<T, char_type>();
 6206|  13.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  13.1k|                return unexpected(e);
 6208|  13.1k|            }
 6209|       |
 6210|  13.1k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  13.1k|                specs.width != 0) {
 6212|  13.1k|                return impl(rd, range, value);
 6213|  13.1k|            }
 6214|       |
 6215|  13.1k|            auto crange = get_as_contiguous(range);
 6216|  13.1k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  13.1k|            return ranges::next(range.begin(),
 6218|  13.1k|                                ranges::distance(crange.begin(), it));
 6219|  13.1k|        }
 6220|  13.1k|        else {
 6221|  13.1k|            SCN_EXPECT(false);
 6222|  13.1k|            SCN_UNREACHABLE;
 6223|  13.1k|        }
 6224|  13.1k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    786|    {
 6124|    786|        const bool need_skipped_width =
 6125|    786|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 374, False: 412]
  |  Branch (6125:33): [True: 272, False: 140]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    786|        auto it = rng.begin();
 6129|    786|        std::ptrdiff_t prefix_width = 0;
 6130|    786|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 284, False: 502]
  ------------------
 6131|    284|            auto max_width_view = take_width(rng, specs.precision);
 6132|    284|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    284|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    284|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    284|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    284|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 284]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    284|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    284|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    284|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    284|            it = prefix_result.first.base();
 6135|    284|            prefix_width = prefix_result.second;
 6136|    284|        }
 6137|    502|        else {
 6138|    502|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    502|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    502|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    502|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    502|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 502]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    502|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    502|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    502|            std::tie(it, prefix_width) = prefix_result;
 6140|    502|        }
 6141|    786|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    786|        std::ptrdiff_t value_width = 0;
 6145|    786|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 284, False: 502]
  ------------------
 6146|    284|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 2, False: 282]
  ------------------
 6147|      2|                return unexpected_scan_error(
 6148|      2|                    scan_error::invalid_scanned_value,
 6149|      2|                    "Too many fill characters before value, "
 6150|      2|                    "precision exceeded before reading value");
 6151|      2|            }
 6152|       |
 6153|    282|            const auto initial_width = specs.precision - prefix_width;
 6154|    282|            auto max_width_view =
 6155|    282|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    282|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    282|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    282|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    282|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    282|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 282, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    282|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    282|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    282|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    282|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    282|    }                                                  \
  |  |  |  | 3671|    282|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    502|        else {
 6161|    502|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    502|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    502|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    502|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 502, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    502|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    502|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    502|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    502|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    502|    }                                                  \
  |  | 3671|    502|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    502|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
 6192|  13.1k|    {
 6193|  13.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  13.1k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  13.1k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  13.1k|            auto rd = make_reader<T, char_type>();
 6198|  13.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  13.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.3k, False: 786]
  |  |  ------------------
  ------------------
 6199|  12.3k|                return unexpected(e);
 6200|  12.3k|            }
 6201|       |
 6202|    786|            return impl(rd, range, value);
 6203|  13.1k|        }
 6204|  13.1k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  13.1k|            auto rd = make_reader<T, char_type>();
 6206|  13.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  13.1k|                return unexpected(e);
 6208|  13.1k|            }
 6209|       |
 6210|  13.1k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  13.1k|                specs.width != 0) {
 6212|  13.1k|                return impl(rd, range, value);
 6213|  13.1k|            }
 6214|       |
 6215|  13.1k|            auto crange = get_as_contiguous(range);
 6216|  13.1k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  13.1k|            return ranges::next(range.begin(),
 6218|  13.1k|                                ranges::distance(crange.begin(), it));
 6219|  13.1k|        }
 6220|  13.1k|        else {
 6221|  13.1k|            SCN_EXPECT(false);
 6222|  13.1k|            SCN_UNREACHABLE;
 6223|  13.1k|        }
 6224|  13.1k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    786|    {
 6124|    786|        const bool need_skipped_width =
 6125|    786|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 374, False: 412]
  |  Branch (6125:33): [True: 272, False: 140]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    786|        auto it = rng.begin();
 6129|    786|        std::ptrdiff_t prefix_width = 0;
 6130|    786|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 284, False: 502]
  ------------------
 6131|    284|            auto max_width_view = take_width(rng, specs.precision);
 6132|    284|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    284|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    284|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    284|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    284|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 284]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    284|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    284|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    284|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    284|            it = prefix_result.first.base();
 6135|    284|            prefix_width = prefix_result.second;
 6136|    284|        }
 6137|    502|        else {
 6138|    502|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    502|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    502|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    502|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    502|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 502]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    502|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    502|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    502|            std::tie(it, prefix_width) = prefix_result;
 6140|    502|        }
 6141|    786|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    786|        std::ptrdiff_t value_width = 0;
 6145|    786|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 284, False: 502]
  ------------------
 6146|    284|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 2, False: 282]
  ------------------
 6147|      2|                return unexpected_scan_error(
 6148|      2|                    scan_error::invalid_scanned_value,
 6149|      2|                    "Too many fill characters before value, "
 6150|      2|                    "precision exceeded before reading value");
 6151|      2|            }
 6152|       |
 6153|    282|            const auto initial_width = specs.precision - prefix_width;
 6154|    282|            auto max_width_view =
 6155|    282|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    282|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    282|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    282|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    282|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    282|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 282, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    282|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    282|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    282|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    282|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    282|    }                                                  \
  |  |  |  | 3671|    282|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    502|        else {
 6161|    502|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    502|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    502|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    502|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 502, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    502|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    502|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    502|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    502|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    502|    }                                                  \
  |  | 3671|    502|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    502|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIPvEENS0_13scan_expectedIPKwEERT_:
 6192|  13.0k|    {
 6193|  13.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  13.0k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  13.0k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  13.0k|            auto rd = make_reader<T, char_type>();
 6198|  13.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  13.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.3k, False: 674]
  |  |  ------------------
  ------------------
 6199|  12.3k|                return unexpected(e);
 6200|  12.3k|            }
 6201|       |
 6202|    674|            return impl(rd, range, value);
 6203|  13.0k|        }
 6204|  13.0k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  13.0k|            auto rd = make_reader<T, char_type>();
 6206|  13.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  13.0k|                return unexpected(e);
 6208|  13.0k|            }
 6209|       |
 6210|  13.0k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  13.0k|                specs.width != 0) {
 6212|  13.0k|                return impl(rd, range, value);
 6213|  13.0k|            }
 6214|       |
 6215|  13.0k|            auto crange = get_as_contiguous(range);
 6216|  13.0k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  13.0k|            return ranges::next(range.begin(),
 6218|  13.0k|                                ranges::distance(crange.begin(), it));
 6219|  13.0k|        }
 6220|  13.0k|        else {
 6221|  13.0k|            SCN_EXPECT(false);
 6222|  13.0k|            SCN_UNREACHABLE;
 6223|  13.0k|        }
 6224|  13.0k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE11check_specsERKNS0_6detail12format_specsE:
 5752|  13.0k|    {
 5753|  13.0k|        reader_error_handler eh{};
 5754|  13.0k|        detail::check_pointer_type_specs(specs, eh);
 5755|  13.0k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  13.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.3k, False: 674]
  |  |  ------------------
  ------------------
 5756|  12.3k|            return {scan_error::invalid_format_string, eh.m_msg};
 5757|  12.3k|        }
 5758|    674|        return {};
 5759|  13.0k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_23reader_impl_for_voidptrIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6123|    674|    {
 6124|    674|        const bool need_skipped_width =
 6125|    674|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 372, False: 302]
  |  Branch (6125:33): [True: 212, False: 90]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    674|        auto it = rng.begin();
 6129|    674|        std::ptrdiff_t prefix_width = 0;
 6130|    674|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 224, False: 450]
  ------------------
 6131|    224|            auto max_width_view = take_width(rng, specs.precision);
 6132|    224|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    224|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    224|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    224|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    224|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 224]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    224|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    224|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    224|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    224|            it = prefix_result.first.base();
 6135|    224|            prefix_width = prefix_result.second;
 6136|    224|        }
 6137|    450|        else {
 6138|    450|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    450|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    450|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    450|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    450|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 450]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    450|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    450|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    450|            std::tie(it, prefix_width) = prefix_result;
 6140|    450|        }
 6141|    674|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    674|        std::ptrdiff_t value_width = 0;
 6145|    674|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 224, False: 450]
  ------------------
 6146|    224|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 2, False: 222]
  ------------------
 6147|      2|                return unexpected_scan_error(
 6148|      2|                    scan_error::invalid_scanned_value,
 6149|      2|                    "Too many fill characters before value, "
 6150|      2|                    "precision exceeded before reading value");
 6151|      2|            }
 6152|       |
 6153|    222|            const auto initial_width = specs.precision - prefix_width;
 6154|    222|            auto max_width_view =
 6155|    222|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    222|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    222|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    222|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    222|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    222|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 222, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    222|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    222|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    222|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    222|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    222|    }                                                  \
  |  |  |  | 3671|    222|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    450|        else {
 6161|    450|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    450|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    450|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    450|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 450, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    450|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    450|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    450|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    450|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    450|    }                                                  \
  |  | 3671|    450|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    450|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5781|    222|    {
 5782|    222|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    222|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5783|    222|        return read_default(range, value, loc);
 5784|    222|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5764|    222|    {
 5765|    222|        detail::format_specs specs{};
 5766|    222|        specs.type = detail::presentation_type::int_hex;
 5767|       |
 5768|    222|        std::uintptr_t intvalue{};
 5769|    222|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3672|    222|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    222|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    222|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    222|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 222, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    222|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    222|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    222|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    222|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    222|    }                                                  \
  |  |  |  | 3671|    222|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5770|      0|                                                                intvalue, loc));
 5771|      0|        value = reinterpret_cast<void*>(intvalue);
 5772|      0|        return result;
 5773|    222|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5781|    450|    {
 5782|    450|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    450|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5783|    450|        return read_default(range, value, loc);
 5784|    450|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIbEENS0_13scan_expectedIPKwEERT_:
 6192|  13.1k|    {
 6193|  13.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  13.1k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  13.1k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  13.1k|            auto rd = make_reader<T, char_type>();
 6198|  13.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  13.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.2k, False: 912]
  |  |  ------------------
  ------------------
 6199|  12.2k|                return unexpected(e);
 6200|  12.2k|            }
 6201|       |
 6202|    912|            return impl(rd, range, value);
 6203|  13.1k|        }
 6204|  13.1k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  13.1k|            auto rd = make_reader<T, char_type>();
 6206|  13.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  13.1k|                return unexpected(e);
 6208|  13.1k|            }
 6209|       |
 6210|  13.1k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  13.1k|                specs.width != 0) {
 6212|  13.1k|                return impl(rd, range, value);
 6213|  13.1k|            }
 6214|       |
 6215|  13.1k|            auto crange = get_as_contiguous(range);
 6216|  13.1k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  13.1k|            return ranges::next(range.begin(),
 6218|  13.1k|                                ranges::distance(crange.begin(), it));
 6219|  13.1k|        }
 6220|  13.1k|        else {
 6221|  13.1k|            SCN_EXPECT(false);
 6222|  13.1k|            SCN_UNREACHABLE;
 6223|  13.1k|        }
 6224|  13.1k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  13.1k|    {
 3040|  13.1k|        reader_error_handler eh{};
 3041|  13.1k|        get_derived().check_specs_impl(specs, eh);
 3042|  13.1k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  13.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.2k, False: 912]
  |  |  ------------------
  ------------------
 3043|  12.2k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  12.2k|        }
 3045|    912|        return {};
 3046|  13.1k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11get_derivedEv:
 3050|  13.1k|    {
 3051|  13.1k|        return static_cast<Derived&>(*this);
 3052|  13.1k|    }
_ZN3scn2v34impl20reader_impl_for_boolIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5496|  13.1k|    {
 5497|  13.1k|        detail::check_bool_type_specs(specs, eh);
 5498|  13.1k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_20reader_impl_for_boolIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    912|    {
 6124|    912|        const bool need_skipped_width =
 6125|    912|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 386, False: 526]
  |  Branch (6125:33): [True: 318, False: 208]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    912|        auto it = rng.begin();
 6129|    912|        std::ptrdiff_t prefix_width = 0;
 6130|    912|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 332, False: 580]
  ------------------
 6131|    332|            auto max_width_view = take_width(rng, specs.precision);
 6132|    332|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    332|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    332|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    332|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    332|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 332]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    332|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    332|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    332|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    332|            it = prefix_result.first.base();
 6135|    332|            prefix_width = prefix_result.second;
 6136|    332|        }
 6137|    580|        else {
 6138|    580|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    580|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    580|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    580|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    580|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 580]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    580|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    580|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    580|            std::tie(it, prefix_width) = prefix_result;
 6140|    580|        }
 6141|    912|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    912|        std::ptrdiff_t value_width = 0;
 6145|    912|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 332, False: 580]
  ------------------
 6146|    332|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 4, False: 328]
  ------------------
 6147|      4|                return unexpected_scan_error(
 6148|      4|                    scan_error::invalid_scanned_value,
 6149|      4|                    "Too many fill characters before value, "
 6150|      4|                    "precision exceeded before reading value");
 6151|      4|            }
 6152|       |
 6153|    328|            const auto initial_width = specs.precision - prefix_width;
 6154|    328|            auto max_width_view =
 6155|    328|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    328|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    328|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    328|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    328|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    328|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 328, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    328|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    328|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    328|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    328|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    328|    }                                                  \
  |  |  |  | 3671|    328|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    580|        else {
 6161|    580|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    580|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    580|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    580|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 580, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    580|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    580|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    580|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    580|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    580|    }                                                  \
  |  | 3671|    580|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    580|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZNK3scn2v34impl20reader_impl_for_boolIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5515|    328|    {
 5516|    328|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5517|       |
 5518|    328|#if !SCN_DISABLE_LOCALE
 5519|    328|        if (specs.localized) {
  ------------------
  |  Branch (5519:13): [True: 32, False: 296]
  ------------------
 5520|     32|            return rd.read_localized(range, loc, value);
 5521|     32|        }
 5522|    296|#endif
 5523|       |
 5524|    296|        return rd.read_classic(range, value);
 5525|    328|    }
_ZN3scn2v34impl20reader_impl_for_boolIwE11get_optionsERKNS0_6detail12format_specsE:
 5528|    908|    {
 5529|    908|        SCN_GCC_COMPAT_PUSH
 5530|    908|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5531|       |
 5532|    908|        switch (specs.type) {
 5533|    122|            case detail::presentation_type::string:
  ------------------
  |  Branch (5533:13): [True: 122, False: 786]
  ------------------
 5534|    122|                return bool_reader_base::allow_text;
 5535|       |
 5536|     10|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5536:13): [True: 10, False: 898]
  ------------------
 5537|     18|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5537:13): [True: 8, False: 900]
  ------------------
 5538|     24|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5538:13): [True: 6, False: 902]
  ------------------
 5539|     48|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5539:13): [True: 24, False: 884]
  ------------------
 5540|     62|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5540:13): [True: 14, False: 894]
  ------------------
 5541|     80|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5541:13): [True: 18, False: 890]
  ------------------
 5542|     80|                return bool_reader_base::allow_numeric;
 5543|       |
 5544|    706|            default:
  ------------------
  |  Branch (5544:13): [True: 706, False: 202]
  ------------------
 5545|    706|                return bool_reader_base::allow_text |
 5546|    706|                       bool_reader_base::allow_numeric;
 5547|    908|        }
 5548|       |
 5549|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5550|    908|    }
_ZNK3scn2v34impl11bool_readerIwE14read_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refERb:
 5427|     32|    {
 5428|     32|        scan_error err{scan_error::invalid_scanned_value,
 5429|     32|                       "Failed to read boolean"};
 5430|       |
 5431|     32|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5431:13): [True: 32, False: 0]
  ------------------
 5432|     32|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5432:22): [True: 0, False: 32]
  ------------------
 5433|      0|                return *r;
 5434|      0|            }
 5435|     32|            else {
 5436|     32|                err = r.error();
 5437|     32|            }
 5438|     32|        }
 5439|       |
 5440|     32|        if (m_options & allow_text) {
  ------------------
  |  Branch (5440:13): [True: 32, False: 0]
  ------------------
 5441|     32|            auto stdloc = loc.get<std::locale>();
 5442|     32|            const auto& numpunct =
 5443|     32|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5444|     32|            const auto truename = numpunct.truename();
 5445|     32|            const auto falsename = numpunct.falsename();
 5446|       |
 5447|     32|            if (auto r =
  ------------------
  |  Branch (5447:22): [True: 0, False: 32]
  ------------------
 5448|     32|                    read_textual_custom(range, value, truename, falsename)) {
 5449|      0|                return *r;
 5450|      0|            }
 5451|     32|            else {
 5452|     32|                err = r.error();
 5453|     32|            }
 5454|     32|        }
 5455|       |
 5456|     32|        return unexpected(err);
 5457|     32|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5383|    282|    {
 5384|    282|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5384:18): [True: 0, False: 282]
  ------------------
 5385|      0|            value = false;
 5386|      0|            return *r;
 5387|      0|        }
 5388|    282|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5388:18): [True: 0, False: 282]
  ------------------
 5389|      0|            value = true;
 5390|      0|            return *r;
 5391|      0|        }
 5392|       |
 5393|    282|        return unexpected_scan_error(
 5394|    282|            scan_error::invalid_scanned_value,
 5395|    282|            "Failed to read numeric boolean value: No match");
 5396|    282|    }
_ZN3scn2v34impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2145|    564|{
 2146|    564|    auto it = read_code_unit(range);
 2147|    564|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    564|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 564]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|    564|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|    564|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 564, False: 0]
  |  |  ------------------
  ------------------
 2152|    564|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|    564|        return unexpected(parse_error::error);
 2154|    564|    }
 2155|       |
 2156|      0|    return *it;
 2157|    564|}
_ZNK3scn2v34impl11bool_readerIwE19read_textual_customINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RbNSF_17basic_string_viewIwNSF_11char_traitsIwEEEESR_:
 5467|     32|    {
 5468|     32|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5469|     32|        const auto shorter = std::pair{
 5470|     32|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5470:13): [True: 32, False: 0]
  ------------------
 5471|     32|        const auto longer = std::pair{
 5472|     32|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5472:13): [True: 0, False: 32]
  ------------------
 5473|       |
 5474|     32|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5474:18): [True: 0, False: 32]
  ------------------
 5475|      0|            value = shorter.second;
 5476|      0|            return *r;
 5477|      0|        }
 5478|     32|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5478:18): [True: 0, False: 32]
  ------------------
 5479|      0|            value = longer.second;
 5480|      0|            return *r;
 5481|      0|        }
 5482|       |
 5483|     32|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5484|     32|                                     "read_textual: No match");
 5485|     32|    }
_ZN3scn2v34impl20read_matching_stringINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewINDTcl4implISF_EEE4typeENSD_11char_traitsISN_EEEE:
 2178|     64|{
 2179|     64|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|     64|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     64|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     64|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     64|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 34, False: 30]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     34|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     34|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     34|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     34|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     34|    }                                                  \
  |  |  |  | 3671|     64|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     30|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|     30|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|     30|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|     30|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|     30|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     30|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 30, False: 0]
  |  |  ------------------
  ------------------
 2185|     30|        return unexpected(parse_error::error);
 2186|     30|    }
 2187|      0|    return it;
 2188|     30|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1856|    592|{
 1857|    592|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    592|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    592|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|    592|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|    592|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|    592|        if (sz < count) {
 1862|    592|            return unexpected(eof_error::eof);
 1863|    592|        }
 1864|       |
 1865|    592|        return ranges::next(range.begin(), count);
 1866|    592|    }
 1867|    592|    else {
 1868|    592|        auto it = range.begin();
 1869|    592|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 592]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  3.03k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 2.54k, False: 492]
  ------------------
 1874|  2.54k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 100, False: 2.44k]
  ------------------
 1875|    100|                return unexpected(eof_error::eof);
 1876|    100|            }
 1877|  2.54k|        }
 1878|       |
 1879|    492|        return it;
 1880|    592|    }
 1881|    592|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEmT_:
 1094|    592|{
 1095|    592|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|    592|        return r.size();
 1097|    592|    }
 1098|    592|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|    592|                           ranges::const_iterator_t<Range>,
 1100|    592|                           typename detail::basic_scan_buffer<
 1101|    592|                               detail::char_t<Range>>::forward_iterator>) {
 1102|    592|        if constexpr (ranges::common_range<Range>) {
 1103|    592|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|    592|        }
 1105|    592|        else {
 1106|    592|            if (r.begin().stores_parent()) {
 1107|    592|                return static_cast<size_t>(
 1108|    592|                    r.begin().parent()->chars_available() -
 1109|    592|                    r.begin().position());
 1110|    592|            }
 1111|    592|            return r.begin().contiguous_segment().size();
 1112|    592|        }
 1113|    592|    }
 1114|    592|    else {
 1115|    592|        return 0;
 1116|    592|    }
 1117|    592|}
_ZNK3scn2v34impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5354|    296|    {
 5355|    296|        scan_error err{scan_error::invalid_scanned_value,
 5356|    296|                       "Failed to read boolean"};
 5357|       |
 5358|    296|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5358:13): [True: 250, False: 46]
  ------------------
 5359|    250|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5359:22): [True: 0, False: 250]
  ------------------
 5360|      0|                return *r;
 5361|      0|            }
 5362|    250|            else {
 5363|    250|                err = r.error();
 5364|    250|            }
 5365|    250|        }
 5366|       |
 5367|    296|        if (m_options & allow_text) {
  ------------------
  |  Branch (5367:13): [True: 264, False: 32]
  ------------------
 5368|    264|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5368:22): [True: 0, False: 264]
  ------------------
 5369|      0|                return *r;
 5370|      0|            }
 5371|    264|            else {
 5372|    264|                err = r.error();
 5373|    264|            }
 5374|    264|        }
 5375|       |
 5376|    296|        return unexpected(err);
 5377|    296|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5401|    264|    {
 5402|    264|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5402:18): [True: 0, False: 264]
  ------------------
 5403|      0|            value = true;
 5404|      0|            return *r;
 5405|      0|        }
 5406|    264|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5406:18): [True: 0, False: 264]
  ------------------
 5407|      0|            value = false;
 5408|      0|            return *r;
 5409|      0|        }
 5410|       |
 5411|    264|        return unexpected_scan_error(
 5412|    264|            scan_error::invalid_scanned_value,
 5413|    264|            "Failed to read textual boolean value: No match");
 5414|    264|    }
_ZN3scn2v34impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2193|    528|{
 2194|    528|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|    528|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    528|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    528|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    528|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 66, False: 462]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     66|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     66|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     66|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     66|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     66|    }                                                  \
  |  |  |  | 3671|    528|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    462|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|    462|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|    462|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|    462|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|    462|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|    462|        if (SCN_UNLIKELY(sv.view() != str)) {
 2201|    462|            return unexpected(parse_error::error);
 2202|    462|        }
 2203|    462|        return it;
 2204|    462|    }
 2205|    462|    else {
 2206|    462|        auto range_it = range.begin();
 2207|    462|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2207:28): [True: 462, False: 0]
  ------------------
 2208|    462|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  859|    462|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 462, False: 0]
  |  |  ------------------
  ------------------
 2209|    462|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|    462|                return unexpected(parse_error::error);
 2211|    462|            }
 2212|    462|        }
 2213|      0|        return it;
 2214|    462|    }
 2215|    462|}
_ZNK3scn2v34impl20reader_impl_for_boolIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5515|    580|    {
 5516|    580|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5517|       |
 5518|    580|#if !SCN_DISABLE_LOCALE
 5519|    580|        if (specs.localized) {
  ------------------
  |  Branch (5519:13): [True: 66, False: 514]
  ------------------
 5520|     66|            return rd.read_localized(range, loc, value);
 5521|     66|        }
 5522|    514|#endif
 5523|       |
 5524|    514|        return rd.read_classic(range, value);
 5525|    580|    }
_ZNK3scn2v34impl11bool_readerIwE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5427|     66|    {
 5428|     66|        scan_error err{scan_error::invalid_scanned_value,
 5429|     66|                       "Failed to read boolean"};
 5430|       |
 5431|     66|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5431:13): [True: 38, False: 28]
  ------------------
 5432|     38|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5432:22): [True: 0, False: 38]
  ------------------
 5433|      0|                return *r;
 5434|      0|            }
 5435|     38|            else {
 5436|     38|                err = r.error();
 5437|     38|            }
 5438|     38|        }
 5439|       |
 5440|     66|        if (m_options & allow_text) {
  ------------------
  |  Branch (5440:13): [True: 36, False: 30]
  ------------------
 5441|     36|            auto stdloc = loc.get<std::locale>();
 5442|     36|            const auto& numpunct =
 5443|     36|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5444|     36|            const auto truename = numpunct.truename();
 5445|     36|            const auto falsename = numpunct.falsename();
 5446|       |
 5447|     36|            if (auto r =
  ------------------
  |  Branch (5447:22): [True: 0, False: 36]
  ------------------
 5448|     36|                    read_textual_custom(range, value, truename, falsename)) {
 5449|      0|                return *r;
 5450|      0|            }
 5451|     36|            else {
 5452|     36|                err = r.error();
 5453|     36|            }
 5454|     36|        }
 5455|       |
 5456|     66|        return unexpected(err);
 5457|     66|    }
_ZNK3scn2v34impl11bool_readerIwE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIwNSD_11char_traitsIwEEEESP_:
 5467|     36|    {
 5468|     36|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5469|     36|        const auto shorter = std::pair{
 5470|     36|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5470:13): [True: 36, False: 0]
  ------------------
 5471|     36|        const auto longer = std::pair{
 5472|     36|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5472:13): [True: 0, False: 36]
  ------------------
 5473|       |
 5474|     36|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5474:18): [True: 0, False: 36]
  ------------------
 5475|      0|            value = shorter.second;
 5476|      0|            return *r;
 5477|      0|        }
 5478|     36|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5478:18): [True: 0, False: 36]
  ------------------
 5479|      0|            value = longer.second;
 5480|      0|            return *r;
 5481|      0|        }
 5482|       |
 5483|     36|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5484|     36|                                     "read_textual: No match");
 5485|     36|    }
_ZN3scn2v34impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2178|     72|{
 2179|     72|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|     72|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     72|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     72|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     72|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4, False: 68]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      4|    }                                                  \
  |  |  |  | 3671|     72|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     68|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|     68|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|     68|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|     68|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|     68|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     68|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 68, False: 0]
  |  |  ------------------
  ------------------
 2185|     68|        return unexpected(parse_error::error);
 2186|     68|    }
 2187|      0|    return it;
 2188|     68|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIwEENS0_13scan_expectedIPKwEERT_:
 6192|  13.0k|    {
 6193|  13.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  13.0k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  13.0k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  13.0k|            auto rd = make_reader<T, char_type>();
 6198|  13.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  13.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.3k, False: 718]
  |  |  ------------------
  ------------------
 6199|  12.3k|                return unexpected(e);
 6200|  12.3k|            }
 6201|       |
 6202|    718|            return impl(rd, range, value);
 6203|  13.0k|        }
 6204|  13.0k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  13.0k|            auto rd = make_reader<T, char_type>();
 6206|  13.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  13.0k|                return unexpected(e);
 6208|  13.0k|            }
 6209|       |
 6210|  13.0k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  13.0k|                specs.width != 0) {
 6212|  13.0k|                return impl(rd, range, value);
 6213|  13.0k|            }
 6214|       |
 6215|  13.0k|            auto crange = get_as_contiguous(range);
 6216|  13.0k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  13.0k|            return ranges::next(range.begin(),
 6218|  13.0k|                                ranges::distance(crange.begin(), it));
 6219|  13.0k|        }
 6220|  13.0k|        else {
 6221|  13.0k|            SCN_EXPECT(false);
 6222|  13.0k|            SCN_UNREACHABLE;
 6223|  13.0k|        }
 6224|  13.0k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_wcharIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    718|    {
 6124|    718|        const bool need_skipped_width =
 6125|    718|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 374, False: 344]
  |  Branch (6125:33): [True: 240, False: 104]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    718|        auto it = rng.begin();
 6129|    718|        std::ptrdiff_t prefix_width = 0;
 6130|    718|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 252, False: 466]
  ------------------
 6131|    252|            auto max_width_view = take_width(rng, specs.precision);
 6132|    252|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    252|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    252|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    252|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    252|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 252]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    252|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    252|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    252|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    252|            it = prefix_result.first.base();
 6135|    252|            prefix_width = prefix_result.second;
 6136|    252|        }
 6137|    466|        else {
 6138|    466|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    466|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    466|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    466|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    466|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 466]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    466|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    466|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    466|            std::tie(it, prefix_width) = prefix_result;
 6140|    466|        }
 6141|    718|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    718|        std::ptrdiff_t value_width = 0;
 6145|    718|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 252, False: 466]
  ------------------
 6146|    252|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 2, False: 250]
  ------------------
 6147|      2|                return unexpected_scan_error(
 6148|      2|                    scan_error::invalid_scanned_value,
 6149|      2|                    "Too many fill characters before value, "
 6150|      2|                    "precision exceeded before reading value");
 6151|      2|            }
 6152|       |
 6153|    250|            const auto initial_width = specs.precision - prefix_width;
 6154|    250|            auto max_width_view =
 6155|    250|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    250|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    250|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    250|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    250|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    250|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32, False: 218]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     32|    }                                                  \
  |  |  |  | 3671|    250|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    218|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    218|            it = w_it.base();
 6158|    218|            value_width = initial_width - w_it.count();
 6159|    218|        }
 6160|    466|        else {
 6161|    466|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    466|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    466|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    466|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 18, False: 448]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|     18|    }                                                  \
  |  | 3671|    466|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    466|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|    448|                                             specs, value, loc));
 6163|       |
 6164|    448|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 360, False: 88]
  ------------------
 6165|    360|                value_width = calculate_text_width(
 6166|    360|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    360|                        .view());
 6168|    360|            }
 6169|    448|        }
 6170|       |
 6171|       |        // Read postfix
 6172|    666|        std::ptrdiff_t postfix_width = 0;
 6173|    666|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 666, False: 0]
  ------------------
 6174|    666|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    666|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    666|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    666|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    666|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 666]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    666|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    666|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    666|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    666|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    666|                                 value_width));
 6178|    666|            std::tie(it, postfix_width) = postfix_result;
 6179|    666|        }
 6180|       |
 6181|    666|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|    666|                                                 value_width, postfix_width);
 6183|    666|            !e) {
  ------------------
  |  Branch (6183:13): [True: 358, False: 308]
  ------------------
 6184|    358|            return unexpected(e);
 6185|    358|        }
 6186|       |
 6187|    308|        return it;
 6188|    666|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 6192|  13.1k|    {
 6193|  13.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  13.1k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  13.1k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  13.1k|            auto rd = make_reader<T, char_type>();
 6198|  13.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  13.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.3k, False: 772]
  |  |  ------------------
  ------------------
 6199|  12.3k|                return unexpected(e);
 6200|  12.3k|            }
 6201|       |
 6202|    772|            return impl(rd, range, value);
 6203|  13.1k|        }
 6204|  13.1k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  13.1k|            auto rd = make_reader<T, char_type>();
 6206|  13.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  13.1k|                return unexpected(e);
 6208|  13.1k|            }
 6209|       |
 6210|  13.1k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  13.1k|                specs.width != 0) {
 6212|  13.1k|                return impl(rd, range, value);
 6213|  13.1k|            }
 6214|       |
 6215|  13.1k|            auto crange = get_as_contiguous(range);
 6216|  13.1k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  13.1k|            return ranges::next(range.begin(),
 6218|  13.1k|                                ranges::distance(crange.begin(), it));
 6219|  13.1k|        }
 6220|  13.1k|        else {
 6221|  13.1k|            SCN_EXPECT(false);
 6222|  13.1k|            SCN_UNREACHABLE;
 6223|  13.1k|        }
 6224|  13.1k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    772|    {
 6124|    772|        const bool need_skipped_width =
 6125|    772|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 378, False: 394]
  |  Branch (6125:33): [True: 274, False: 120]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    772|        auto it = rng.begin();
 6129|    772|        std::ptrdiff_t prefix_width = 0;
 6130|    772|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 288, False: 484]
  ------------------
 6131|    288|            auto max_width_view = take_width(rng, specs.precision);
 6132|    288|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    288|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    288|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    288|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    288|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 288]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    288|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    288|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    288|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    288|            it = prefix_result.first.base();
 6135|    288|            prefix_width = prefix_result.second;
 6136|    288|        }
 6137|    484|        else {
 6138|    484|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    484|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    484|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    484|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    484|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 484]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    484|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    484|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    484|            std::tie(it, prefix_width) = prefix_result;
 6140|    484|        }
 6141|    772|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    772|        std::ptrdiff_t value_width = 0;
 6145|    772|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 288, False: 484]
  ------------------
 6146|    288|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 282]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    282|            const auto initial_width = specs.precision - prefix_width;
 6154|    282|            auto max_width_view =
 6155|    282|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    282|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    282|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    282|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    282|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    282|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 282, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    282|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    282|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    282|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    282|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    282|    }                                                  \
  |  |  |  | 3671|    282|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    484|        else {
 6161|    484|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    484|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    484|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    484|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 484, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    484|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    484|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    484|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    484|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    484|    }                                                  \
  |  | 3671|    484|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    484|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKwEERT_:
 6192|  13.0k|    {
 6193|  13.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  13.0k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  13.0k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  13.0k|            auto rd = make_reader<T, char_type>();
 6198|  13.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  13.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 114, False: 12.9k]
  |  |  ------------------
  ------------------
 6199|    114|                return unexpected(e);
 6200|    114|            }
 6201|       |
 6202|  12.9k|            return impl(rd, range, value);
 6203|  13.0k|        }
 6204|  13.0k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  13.0k|            auto rd = make_reader<T, char_type>();
 6206|  13.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  13.0k|                return unexpected(e);
 6208|  13.0k|            }
 6209|       |
 6210|  13.0k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  13.0k|                specs.width != 0) {
 6212|  13.0k|                return impl(rd, range, value);
 6213|  13.0k|            }
 6214|       |
 6215|  13.0k|            auto crange = get_as_contiguous(range);
 6216|  13.0k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  13.0k|            return ranges::next(range.begin(),
 6218|  13.0k|                                ranges::distance(crange.begin(), it));
 6219|  13.0k|        }
 6220|  13.0k|        else {
 6221|  13.0k|            SCN_EXPECT(false);
 6222|  13.0k|            SCN_UNREACHABLE;
 6223|  13.0k|        }
 6224|  13.0k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|  12.9k|    {
 6124|  12.9k|        const bool need_skipped_width =
 6125|  12.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 9.95k, False: 2.99k]
  |  Branch (6125:33): [True: 322, False: 2.66k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  12.9k|        auto it = rng.begin();
 6129|  12.9k|        std::ptrdiff_t prefix_width = 0;
 6130|  12.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 338, False: 12.6k]
  ------------------
 6131|    338|            auto max_width_view = take_width(rng, specs.precision);
 6132|    338|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    338|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    338|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    338|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    338|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 338]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    338|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    338|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    338|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    338|            it = prefix_result.first.base();
 6135|    338|            prefix_width = prefix_result.second;
 6136|    338|        }
 6137|  12.6k|        else {
 6138|  12.6k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 12.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  12.6k|            std::tie(it, prefix_width) = prefix_result;
 6140|  12.6k|        }
 6141|  12.9k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  12.9k|        std::ptrdiff_t value_width = 0;
 6145|  12.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 338, False: 12.6k]
  ------------------
 6146|    338|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 14, False: 324]
  ------------------
 6147|     14|                return unexpected_scan_error(
 6148|     14|                    scan_error::invalid_scanned_value,
 6149|     14|                    "Too many fill characters before value, "
 6150|     14|                    "precision exceeded before reading value");
 6151|     14|            }
 6152|       |
 6153|    324|            const auto initial_width = specs.precision - prefix_width;
 6154|    324|            auto max_width_view =
 6155|    324|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    324|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    324|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    324|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    324|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    324|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 190, False: 134]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    190|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    190|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    190|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    190|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    190|    }                                                  \
  |  |  |  | 3671|    324|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    134|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    134|            it = w_it.base();
 6158|    134|            value_width = initial_width - w_it.count();
 6159|    134|        }
 6160|  12.6k|        else {
 6161|  12.6k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 11.1k, False: 1.50k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  11.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  11.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  11.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  11.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  11.1k|    }                                                  \
  |  | 3671|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  12.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  1.50k|                                             specs, value, loc));
 6163|       |
 6164|  1.50k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 810, False: 696]
  ------------------
 6165|    810|                value_width = calculate_text_width(
 6166|    810|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    810|                        .view());
 6168|    810|            }
 6169|  1.50k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  1.64k|        std::ptrdiff_t postfix_width = 0;
 6173|  1.64k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 1.29k, False: 348]
  ------------------
 6174|  1.29k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  1.29k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.29k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.29k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.29k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.29k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.29k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  1.29k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  1.29k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  1.29k|                                 value_width));
 6178|  1.29k|            std::tie(it, postfix_width) = postfix_result;
 6179|  1.29k|        }
 6180|       |
 6181|  1.64k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  1.64k|                                                 value_width, postfix_width);
 6183|  1.64k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 506, False: 1.13k]
  ------------------
 6184|    506|            return unexpected(e);
 6185|    506|        }
 6186|       |
 6187|  1.13k|        return it;
 6188|  1.64k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6192|  13.0k|    {
 6193|  13.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  13.0k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  13.0k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  13.0k|            auto rd = make_reader<T, char_type>();
 6198|  13.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  13.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 114, False: 12.9k]
  |  |  ------------------
  ------------------
 6199|    114|                return unexpected(e);
 6200|    114|            }
 6201|       |
 6202|  12.9k|            return impl(rd, range, value);
 6203|  13.0k|        }
 6204|  13.0k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  13.0k|            auto rd = make_reader<T, char_type>();
 6206|  13.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  13.0k|                return unexpected(e);
 6208|  13.0k|            }
 6209|       |
 6210|  13.0k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  13.0k|                specs.width != 0) {
 6212|  13.0k|                return impl(rd, range, value);
 6213|  13.0k|            }
 6214|       |
 6215|  13.0k|            auto crange = get_as_contiguous(range);
 6216|  13.0k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  13.0k|            return ranges::next(range.begin(),
 6218|  13.0k|                                ranges::distance(crange.begin(), it));
 6219|  13.0k|        }
 6220|  13.0k|        else {
 6221|  13.0k|            SCN_EXPECT(false);
 6222|  13.0k|            SCN_UNREACHABLE;
 6223|  13.0k|        }
 6224|  13.0k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6123|  12.9k|    {
 6124|  12.9k|        const bool need_skipped_width =
 6125|  12.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 9.95k, False: 2.99k]
  |  Branch (6125:33): [True: 322, False: 2.66k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  12.9k|        auto it = rng.begin();
 6129|  12.9k|        std::ptrdiff_t prefix_width = 0;
 6130|  12.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 338, False: 12.6k]
  ------------------
 6131|    338|            auto max_width_view = take_width(rng, specs.precision);
 6132|    338|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    338|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    338|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    338|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    338|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 338]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    338|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    338|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    338|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    338|            it = prefix_result.first.base();
 6135|    338|            prefix_width = prefix_result.second;
 6136|    338|        }
 6137|  12.6k|        else {
 6138|  12.6k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 12.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  12.6k|            std::tie(it, prefix_width) = prefix_result;
 6140|  12.6k|        }
 6141|  12.9k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  12.9k|        std::ptrdiff_t value_width = 0;
 6145|  12.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 338, False: 12.6k]
  ------------------
 6146|    338|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 14, False: 324]
  ------------------
 6147|     14|                return unexpected_scan_error(
 6148|     14|                    scan_error::invalid_scanned_value,
 6149|     14|                    "Too many fill characters before value, "
 6150|     14|                    "precision exceeded before reading value");
 6151|     14|            }
 6152|       |
 6153|    324|            const auto initial_width = specs.precision - prefix_width;
 6154|    324|            auto max_width_view =
 6155|    324|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    324|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    324|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    324|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    324|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    324|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 190, False: 134]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    190|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    190|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    190|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    190|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    190|    }                                                  \
  |  |  |  | 3671|    324|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    134|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    134|            it = w_it.base();
 6158|    134|            value_width = initial_width - w_it.count();
 6159|    134|        }
 6160|  12.6k|        else {
 6161|  12.6k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 11.1k, False: 1.50k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  11.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  11.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  11.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  11.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  11.1k|    }                                                  \
  |  | 3671|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  12.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  1.50k|                                             specs, value, loc));
 6163|       |
 6164|  1.50k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 810, False: 696]
  ------------------
 6165|    810|                value_width = calculate_text_width(
 6166|    810|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    810|                        .view());
 6168|    810|            }
 6169|  1.50k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  1.64k|        std::ptrdiff_t postfix_width = 0;
 6173|  1.64k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 1.29k, False: 348]
  ------------------
 6174|  1.29k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  1.29k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.29k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.29k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.29k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.29k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.29k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  1.29k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  1.29k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  1.29k|                                 value_width));
 6178|  1.29k|            std::tie(it, postfix_width) = postfix_result;
 6179|  1.29k|        }
 6180|       |
 6181|  1.64k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  1.64k|                                                 value_width, postfix_width);
 6183|  1.64k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 506, False: 1.13k]
  ------------------
 6184|    506|            return unexpected(e);
 6185|    506|        }
 6186|       |
 6187|  1.13k|        return it;
 6188|  1.64k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6192|  13.0k|    {
 6193|  13.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  13.0k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  13.0k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  13.0k|            auto rd = make_reader<T, char_type>();
 6198|  13.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  13.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 114, False: 12.9k]
  |  |  ------------------
  ------------------
 6199|    114|                return unexpected(e);
 6200|    114|            }
 6201|       |
 6202|  12.9k|            return impl(rd, range, value);
 6203|  13.0k|        }
 6204|  13.0k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  13.0k|            auto rd = make_reader<T, char_type>();
 6206|  13.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  13.0k|                return unexpected(e);
 6208|  13.0k|            }
 6209|       |
 6210|  13.0k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  13.0k|                specs.width != 0) {
 6212|  13.0k|                return impl(rd, range, value);
 6213|  13.0k|            }
 6214|       |
 6215|  13.0k|            auto crange = get_as_contiguous(range);
 6216|  13.0k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  13.0k|            return ranges::next(range.begin(),
 6218|  13.0k|                                ranges::distance(crange.begin(), it));
 6219|  13.0k|        }
 6220|  13.0k|        else {
 6221|  13.0k|            SCN_EXPECT(false);
 6222|  13.0k|            SCN_UNREACHABLE;
 6223|  13.0k|        }
 6224|  13.0k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|  12.9k|    {
 6124|  12.9k|        const bool need_skipped_width =
 6125|  12.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 9.95k, False: 2.99k]
  |  Branch (6125:33): [True: 322, False: 2.66k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  12.9k|        auto it = rng.begin();
 6129|  12.9k|        std::ptrdiff_t prefix_width = 0;
 6130|  12.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 338, False: 12.6k]
  ------------------
 6131|    338|            auto max_width_view = take_width(rng, specs.precision);
 6132|    338|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    338|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    338|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    338|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    338|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 338]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    338|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    338|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    338|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    338|            it = prefix_result.first.base();
 6135|    338|            prefix_width = prefix_result.second;
 6136|    338|        }
 6137|  12.6k|        else {
 6138|  12.6k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 12.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  12.6k|            std::tie(it, prefix_width) = prefix_result;
 6140|  12.6k|        }
 6141|  12.9k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  12.9k|        std::ptrdiff_t value_width = 0;
 6145|  12.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 338, False: 12.6k]
  ------------------
 6146|    338|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 14, False: 324]
  ------------------
 6147|     14|                return unexpected_scan_error(
 6148|     14|                    scan_error::invalid_scanned_value,
 6149|     14|                    "Too many fill characters before value, "
 6150|     14|                    "precision exceeded before reading value");
 6151|     14|            }
 6152|       |
 6153|    324|            const auto initial_width = specs.precision - prefix_width;
 6154|    324|            auto max_width_view =
 6155|    324|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    324|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    324|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    324|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    324|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    324|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 190, False: 134]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    190|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    190|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    190|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    190|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    190|    }                                                  \
  |  |  |  | 3671|    324|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    134|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    134|            it = w_it.base();
 6158|    134|            value_width = initial_width - w_it.count();
 6159|    134|        }
 6160|  12.6k|        else {
 6161|  12.6k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 11.1k, False: 1.50k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  11.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  11.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  11.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  11.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  11.1k|    }                                                  \
  |  | 3671|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  12.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  1.50k|                                             specs, value, loc));
 6163|       |
 6164|  1.50k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 810, False: 696]
  ------------------
 6165|    810|                value_width = calculate_text_width(
 6166|    810|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    810|                        .view());
 6168|    810|            }
 6169|  1.50k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  1.64k|        std::ptrdiff_t postfix_width = 0;
 6173|  1.64k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 1.29k, False: 348]
  ------------------
 6174|  1.29k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  1.29k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.29k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.29k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.29k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.29k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.29k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  1.29k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  1.29k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  1.29k|                                 value_width));
 6178|  1.29k|            std::tie(it, postfix_width) = postfix_result;
 6179|  1.29k|        }
 6180|       |
 6181|  1.64k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  1.64k|                                                 value_width, postfix_width);
 6183|  1.64k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 506, False: 1.13k]
  ------------------
 6184|    506|            return unexpected(e);
 6185|    506|        }
 6186|       |
 6187|  1.13k|        return it;
 6188|  1.64k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|    746|    {
 3492|    746|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|    746|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    746|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    746|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    746|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 746]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    746|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    746|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|    746|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|    746|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|    746|            if (prefix_result.sign == sign_type::minus_sign) {
 3497|    746|                return unexpected_scan_error(
 3498|    746|                    scan_error::invalid_scanned_value,
 3499|    746|                    "Unexpected '-' sign when parsing an "
 3500|    746|                    "unsigned value");
 3501|    746|            }
 3502|    746|        }
 3503|       |
 3504|    746|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 746]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  1.49k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    746|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    746|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    746|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    746|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 746]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    746|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    746|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  1.49k|                parse_integer_digits_without_thsep(
 3511|  1.49k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  1.49k|                    prefix_result.parsed_base));
 3513|       |
 3514|  1.49k|        auto buf = make_contiguous_buffer(
 3515|  1.49k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  1.49k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|    746|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    746|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    746|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    746|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 746, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    746|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    746|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    746|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    746|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    746|    }                                                  \
  |  |  |  | 3671|    746|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|      0|                                    prefix_result.parsed_base));
 3519|       |
 3520|      0|        return ranges::next(prefix_result.iterator,
 3521|      0|                            ranges::distance(buf.view().begin(), result_it));
 3522|  1.49k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|    746|    {
 3492|    746|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|    746|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    746|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    746|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    746|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 746]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    746|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    746|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|    746|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|    746|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|    746|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3496:17): [True: 0, False: 746]
  ------------------
 3497|      0|                return unexpected_scan_error(
 3498|      0|                    scan_error::invalid_scanned_value,
 3499|      0|                    "Unexpected '-' sign when parsing an "
 3500|      0|                    "unsigned value");
 3501|      0|            }
 3502|    746|        }
 3503|       |
 3504|    746|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 746]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  1.49k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    746|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    746|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    746|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    746|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 746]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    746|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    746|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  1.49k|                parse_integer_digits_without_thsep(
 3511|  1.49k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  1.49k|                    prefix_result.parsed_base));
 3513|       |
 3514|  1.49k|        auto buf = make_contiguous_buffer(
 3515|  1.49k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  1.49k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|    746|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    746|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    746|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    746|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 746, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    746|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    746|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    746|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    746|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    746|    }                                                  \
  |  |  |  | 3671|    746|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|      0|                                    prefix_result.parsed_base));
 3519|       |
 3520|      0|        return ranges::next(prefix_result.iterator,
 3521|      0|                            ranges::distance(buf.view().begin(), result_it));
 3522|  1.49k|    }

LLVMFuzzerTestOneInput:
   68|  18.6k|{
   69|  18.6k|    scn::fuzz::run(data, size);
   70|  18.6k|    return 0;
   71|  18.6k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   51|  18.6k|{
   52|  18.6k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (52:9): [True: 0, False: 18.6k]
  |  Branch (52:35): [True: 0, False: 18.6k]
  ------------------
   53|      0|        return;
   54|      0|    }
   55|       |
   56|  18.6k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   57|       |
   58|  18.6k|    run_for_source(sv);
   59|  18.6k|    run_for_source(wsv_reinterpret);
   60|  18.6k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (60:9): [True: 18.6k, False: 0]
  ------------------
   61|  18.6k|        run_for_source(wsv_transcode);
   62|  18.6k|    }
   63|  18.6k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT_:
   36|  18.6k|{
   37|  18.6k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  18.6k|    run_for_type<char_type>(source);
   40|  18.6k|    run_for_type<int>(source);
   41|  18.6k|    run_for_type<unsigned>(source);
   42|  18.6k|    run_for_type<double>(source);
   43|  18.6k|    run_for_type<bool>(source);
   44|  18.6k|    run_for_type<void*>(source);
   45|  18.6k|    run_for_type<std::string>(source);
   46|  18.6k|    run_for_type<std::wstring>(source);
   47|  18.6k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  18.6k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIcNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  18.6k|{
   25|  18.6k|    {
   26|  18.6k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  18.6k|    }
   28|  18.6k|    {
   29|  18.6k|        auto _ =
   30|  18.6k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  18.6k|    }
   32|  18.6k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  18.6k|{
   25|  18.6k|    {
   26|  18.6k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  18.6k|    }
   28|  18.6k|    {
   29|  18.6k|        auto _ =
   30|  18.6k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  18.6k|    }
   32|  18.6k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  18.6k|{
   25|  18.6k|    {
   26|  18.6k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  18.6k|    }
   28|  18.6k|    {
   29|  18.6k|        auto _ =
   30|  18.6k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  18.6k|    }
   32|  18.6k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  18.6k|{
   25|  18.6k|    {
   26|  18.6k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  18.6k|    }
   28|  18.6k|    {
   29|  18.6k|        auto _ =
   30|  18.6k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  18.6k|    }
   32|  18.6k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  18.6k|{
   25|  18.6k|    {
   26|  18.6k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  18.6k|    }
   28|  18.6k|    {
   29|  18.6k|        auto _ =
   30|  18.6k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  18.6k|    }
   32|  18.6k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEvRT0_:
   24|  18.6k|{
   25|  18.6k|    {
   26|  18.6k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  18.6k|    }
   28|  18.6k|    {
   29|  18.6k|        auto _ =
   30|  18.6k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  18.6k|    }
   32|  18.6k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIcS6_EEEEvRT0_:
   24|  18.6k|{
   25|  18.6k|    {
   26|  18.6k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  18.6k|    }
   28|  18.6k|    {
   29|  18.6k|        auto _ =
   30|  18.6k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  18.6k|    }
   32|  18.6k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIcNS5_IcEEEEEEvRT0_:
   24|  18.6k|{
   25|  18.6k|    {
   26|  18.6k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  18.6k|    }
   28|  18.6k|    {
   29|  18.6k|        auto _ =
   30|  18.6k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  18.6k|    }
   32|  18.6k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEES7_EEvRT0_:
   24|  18.6k|{
   25|  18.6k|    {
   26|  18.6k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  18.6k|    }
   28|  18.6k|    {
   29|  18.6k|        auto _ =
   30|  18.6k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  18.6k|    }
   32|  18.6k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT_:
   36|  37.3k|{
   37|  37.3k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  37.3k|    run_for_type<char_type>(source);
   40|  37.3k|    run_for_type<int>(source);
   41|  37.3k|    run_for_type<unsigned>(source);
   42|  37.3k|    run_for_type<double>(source);
   43|  37.3k|    run_for_type<bool>(source);
   44|  37.3k|    run_for_type<void*>(source);
   45|  37.3k|    run_for_type<std::string>(source);
   46|  37.3k|    run_for_type<std::wstring>(source);
   47|  37.3k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  37.3k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIwNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  37.3k|{
   25|  37.3k|    {
   26|  37.3k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  37.3k|    }
   28|  37.3k|    {
   29|  37.3k|        auto _ =
   30|  37.3k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  37.3k|    }
   32|  37.3k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  37.3k|{
   25|  37.3k|    {
   26|  37.3k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  37.3k|    }
   28|  37.3k|    {
   29|  37.3k|        auto _ =
   30|  37.3k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  37.3k|    }
   32|  37.3k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  37.3k|{
   25|  37.3k|    {
   26|  37.3k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  37.3k|    }
   28|  37.3k|    {
   29|  37.3k|        auto _ =
   30|  37.3k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  37.3k|    }
   32|  37.3k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  37.3k|{
   25|  37.3k|    {
   26|  37.3k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  37.3k|    }
   28|  37.3k|    {
   29|  37.3k|        auto _ =
   30|  37.3k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  37.3k|    }
   32|  37.3k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  37.3k|{
   25|  37.3k|    {
   26|  37.3k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  37.3k|    }
   28|  37.3k|    {
   29|  37.3k|        auto _ =
   30|  37.3k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  37.3k|    }
   32|  37.3k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEvRT0_:
   24|  37.3k|{
   25|  37.3k|    {
   26|  37.3k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  37.3k|    }
   28|  37.3k|    {
   29|  37.3k|        auto _ =
   30|  37.3k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  37.3k|    }
   32|  37.3k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIwNS5_IwEEEEEEvRT0_:
   24|  37.3k|{
   25|  37.3k|    {
   26|  37.3k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  37.3k|    }
   28|  37.3k|    {
   29|  37.3k|        auto _ =
   30|  37.3k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  37.3k|    }
   32|  37.3k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIwS6_EEEEvRT0_:
   24|  37.3k|{
   25|  37.3k|    {
   26|  37.3k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  37.3k|    }
   28|  37.3k|    {
   29|  37.3k|        auto _ =
   30|  37.3k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  37.3k|    }
   32|  37.3k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEES7_EEvRT0_:
   24|  37.3k|{
   25|  37.3k|    {
   26|  37.3k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  37.3k|    }
   28|  37.3k|    {
   29|  37.3k|        auto _ =
   30|  37.3k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  37.3k|    }
   32|  37.3k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  18.6k|{
   52|  18.6k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  18.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  18.6k|    string_buffer.resize(size);
   56|  18.6k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  18.6k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  18.6k|    const auto wsv_reinterpret_size =
   61|  18.6k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 94, False: 18.5k]
  ------------------
   62|  18.6k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  18.6k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  18.6k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  18.6k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  18.6k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  18.6k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  18.6k|}

