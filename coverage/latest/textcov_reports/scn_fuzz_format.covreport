_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIccEEDaSL_SV_:
 1039|  1.35k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIwcEEDaSL_SV_:
 1039|    938|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
 1039|  4.54k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v46detail39code_point_length_by_starting_code_unitIcEEmT_:
 4085|  5.55M|{
 4086|  5.55M|    if constexpr (sizeof(U) == 1) {
 4087|  5.55M|        return utf8_code_point_length_by_starting_code_unit(ch);
 4088|       |    }
 4089|       |    else if constexpr (sizeof(U) == 2) {
 4090|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4091|       |    }
 4092|       |    else {
 4093|       |        // utf-32
 4094|       |        static_assert(sizeof(U) == 4);
 4095|       |        SCN_UNUSED(ch);
 4096|       |        return 1;
 4097|       |    }
 4098|  5.55M|}
_ZN3scn2v46detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 4049|  5.55M|{
 4050|  5.55M|    static_assert(sizeof(U8) == 1);
 4051|       |
 4052|  5.55M|    SCN_GCC_COMPAT_PUSH
 4053|  5.55M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 4054|  5.55M|    constexpr char lengths[] =
 4055|  5.55M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 4056|  5.55M|        "\1\1\1\1\1\1\1\1"
 4057|  5.55M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 4058|       |                            // byte
 4059|  5.55M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 4060|  5.55M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 4061|  5.55M|        "\4";               // highest bits 11110 -> 4-byte cp
 4062|  5.55M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 4063|  5.55M|    SCN_GCC_COMPAT_POP
 4064|  5.55M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4291|  5.17M|{
 4292|  5.17M|    if constexpr (sizeof(CharT) == 1) {
 4293|  5.17M|        return decode_utf8_code_point_exhaustive(input);
 4294|       |    }
 4295|       |    else if constexpr (sizeof(CharT) == 2) {
 4296|       |        return decode_utf16_code_point_exhaustive(input);
 4297|       |    }
 4298|       |    else {
 4299|       |        SCN_EXPECT(input.size() == 1);
 4300|       |        auto cp = static_cast<char32_t>(input.front());
 4301|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4302|       |            return invalid_code_point;
 4303|       |        }
 4304|       |        return cp;
 4305|       |    }
 4306|  5.17M|}
_ZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4104|  5.17M|{
 4105|  5.17M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  | 1104|  5.17M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  5.17M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4106|       |
 4107|  5.17M|    const auto is_trailing_code_unit = [](char ch) {
 4108|  5.17M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4109|  5.17M|    };
 4110|       |
 4111|  5.17M|    if (input.size() == 1) {
  ------------------
  |  Branch (4111:9): [True: 4.26M, False: 908k]
  ------------------
 4112|  4.26M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (4112:13): [True: 132, False: 4.26M]
  ------------------
 4113|    132|            SCN_UNLIKELY_ATTR
 4114|    132|            return invalid_code_point;
 4115|    132|        }
 4116|  4.26M|        return static_cast<char32_t>(input[0]);
 4117|  4.26M|    }
 4118|       |
 4119|   908k|    if (input.size() == 2) {
  ------------------
  |  Branch (4119:9): [True: 857k, False: 51.8k]
  ------------------
 4120|   857k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (4120:13): [True: 18, False: 857k]
  ------------------
 4121|     18|            SCN_UNLIKELY_ATTR
 4122|     18|            return invalid_code_point;
 4123|     18|        }
 4124|   857k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (4124:13): [True: 4.57k, False: 852k]
  ------------------
 4125|  4.57k|            SCN_UNLIKELY_ATTR
 4126|  4.57k|            return invalid_code_point;
 4127|  4.57k|        }
 4128|       |
 4129|   852k|        char32_t cp{};
 4130|   852k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4131|   852k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4132|   852k|        return cp;
 4133|   857k|    }
 4134|       |
 4135|  51.8k|    if (input.size() == 3) {
  ------------------
  |  Branch (4135:9): [True: 46.2k, False: 5.62k]
  ------------------
 4136|  46.2k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (4136:13): [True: 18, False: 46.2k]
  ------------------
 4137|     18|            SCN_UNLIKELY_ATTR
 4138|     18|            return invalid_code_point;
 4139|     18|        }
 4140|  46.2k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4140:13): [True: 1.35k, False: 44.8k]
  ------------------
 4141|  46.2k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (4141:13): [True: 331, False: 44.5k]
  ------------------
 4142|  1.68k|            SCN_UNLIKELY_ATTR
 4143|  1.68k|            return invalid_code_point;
 4144|  1.68k|        }
 4145|       |
 4146|  44.5k|        char32_t cp{};
 4147|  44.5k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4148|  44.5k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4149|  44.5k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4150|  44.5k|        return cp;
 4151|  46.2k|    }
 4152|       |
 4153|  5.62k|    if (input.size() == 4) {
  ------------------
  |  Branch (4153:9): [True: 5.62k, False: 0]
  ------------------
 4154|  5.62k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (4154:13): [True: 0, False: 5.62k]
  ------------------
 4155|      0|            SCN_UNLIKELY_ATTR
 4156|      0|            return invalid_code_point;
 4157|      0|        }
 4158|  5.62k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (4158:13): [True: 414, False: 5.20k]
  ------------------
 4159|    414|            SCN_UNLIKELY_ATTR
 4160|    414|            return invalid_code_point;
 4161|    414|        }
 4162|  5.20k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4162:13): [True: 857, False: 4.34k]
  ------------------
 4163|  5.20k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (4163:13): [True: 291, False: 4.05k]
  ------------------
 4164|  5.20k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (4164:13): [True: 589, False: 3.46k]
  ------------------
 4165|  1.73k|            SCN_UNLIKELY_ATTR
 4166|  1.73k|            return invalid_code_point;
 4167|  1.73k|        }
 4168|       |
 4169|  3.46k|        char32_t cp{};
 4170|  3.46k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4171|  3.46k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4172|  3.46k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4173|  3.46k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4174|  3.46k|        return cp;
 4175|  5.20k|    }
 4176|       |
 4177|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4178|       |    // gcc 7 thinks we'll get here, even when we won't
 4179|      0|    SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4180|      0|#endif
 4181|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4182|      0|}
_ZZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4107|   961k|    const auto is_trailing_code_unit = [](char ch) {
 4108|   961k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4109|   961k|    };
_ZN3scn2v46detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3977|  1.48M|{
 3978|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3979|       |                                          decltype(first), decltype(last)> &&
 3980|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3981|       |        return {first, last};
 3982|       |    }
 3983|  1.48M|    else {
 3984|  1.48M|        return {to_address(first), static_cast<size_t>(std::distance(
 3985|  1.48M|                                       to_address(first), to_address(last)))};
 3986|  1.48M|    }
 3987|  1.48M|}
_ZN3scn2v46detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  330|  4.50M|{
  331|  4.50M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1110|  4.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  332|  4.50M|}
_ZN3scn2v46detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  308|  4.67M|{
  309|  4.67M|    return p;
  310|  4.67M|}
_ZN3scn2v46detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 4008|   594k|{
 4009|       |    if constexpr (std::is_constructible_v<
 4010|       |                      typename std::basic_string_view<CharT>::iterator,
 4011|       |                      decltype(it)> &&
 4012|   594k|                  !SCN_MSVC_DEBUG_ITERATORS) {
 4013|   594k|        SCN_UNUSED(sv);
  ------------------
  |  | 1089|   594k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4014|   594k|        return it;
 4015|       |    }
 4016|       |    else {
 4017|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4018|       |    }
 4019|   594k|}
_ZN3scn2v44scanIJcERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 9892|  3.46k|{
 9893|  3.46k|    auto result = make_scan_result<Source, Args...>();
 9894|  3.46k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  3.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  3.46k|                                   make_scan_args(result->values())));
 9896|  3.46k|    return result;
 9897|  3.46k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEEDav:
 9848|  6.92k|{
 9849|  6.92k|    return scan_result_type<Source, Args...>();
 9850|  6.92k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2Ev:
 1565|  6.92k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2Ev:
  441|  6.92k|        : m_value(T{}), m_has_value(true)
  442|  6.92k|    {
  443|  6.92k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJcEEC2Ev:
 6692|  6.92k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2Ev:
 6535|  62.2k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2Ev:
 3473|  62.2k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJcEEC2Ev:
 6466|  6.92k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9833|  6.92k|{
 9834|  6.92k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  6.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.64k, False: 278]
  |  |  ------------------
  ------------------
 9835|  6.64k|        out = unexpected(in.error());
 9836|  6.64k|    }
 9837|    278|    else {
 9838|    278|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|    278|    static_cast<    \
  |  | 1109|    278|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|    278|    }
 9840|  6.92k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1753|  62.2k|    {
 1754|  62.2k|        return has_value();
 1755|  62.2k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  504|   124k|    {
  505|   124k|        return m_has_value;
  506|   124k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1759|  59.5k|    {
 1760|  59.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  59.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  59.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  59.5k|        return this->get_unexpected().error();
 1762|  59.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  59.5k|    {
  488|  59.5k|        return m_unexpected;
  489|  59.5k|    }
_ZNR3scn2v410unexpectedINS0_10scan_errorEE5errorEv:
  379|  1.65M|    {
  380|  1.65M|        return m_unexpected;
  381|  1.65M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  364|   830k|        : m_unexpected(std::forward<Err>(e))
  365|   830k|    {
  366|   830k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|   830k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|   830k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1629|  6.64k|        : base(unexpect, std::move(e.error())),
 1630|  6.64k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  6.64k|    {
 1632|  6.64k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|  6.64k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  6.64k|          m_has_value(false)
  466|  6.64k|    {
  467|  6.64k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  373|  1.01M|        : m_unexpected(std::forward<Args>(args)...)
  374|  1.01M|    {
  375|  1.01M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  1.01M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  376|  1.01M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  6.64k|    {
 1330|  6.64k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEaSEOSC_:
 1570|  6.64k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorEvEaSEOSD_:
  916|  6.64k|    {
  917|  6.64k|        assign_common(std::move(other));
  918|  6.64k|        return *this;
  919|  6.64k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  963|  6.64k|    {
  964|  6.64k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 6.64k, False: 0]
  ------------------
  965|  6.64k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 6.64k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  6.64k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  6.64k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  20.4k|    {
  505|  20.4k|        return m_has_value;
  506|  20.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  7.19k|    {
  471|  7.19k|        return m_value;
  472|  7.19k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1059|  6.64k|    {
 1060|  6.64k|        this->destroy_value();
 1061|  6.64k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  6.64k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  6.64k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  518|  6.64k|    {
  519|  6.64k|        scn::detail::construct_at(&get_unexpected(),
  520|  6.64k|                                  std::forward<Args>(args)...);
  521|  6.64k|        m_has_value = false;
  522|  6.64k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJS5_EEEPT_S7_DpOT0_:
  410|   182k|{
  411|   182k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|   182k|        T(std::forward<Args>(args)...);
  413|   182k|}
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  6.64k|    {
  488|  6.64k|        return m_unexpected;
  489|  6.64k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  6.64k|    {
  496|  6.64k|        return std::move(m_unexpected);
  497|  6.64k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE9set_rangeIS9_EEvOT_:
 6566|  2.68k|    {
 6567|  2.68k|        m_range = std::forward<Other>(r);
 6568|  2.68k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1808|  2.68k|    {
 1809|  2.68k|        return value();
 1810|  2.68k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1782|  2.68k|    {
 1783|  2.68k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  2.68k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.68k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  2.68k|        return this->get_value();
 1785|  2.68k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  470|  2.68k|    {
  471|  2.68k|        return m_value;
  472|  2.68k|    }
_ZN3scn2v45vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextINSF_16buffer_range_tagEcEEEE:
 9654|  31.1k|{
 9655|  31.1k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  | 1110|  31.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9656|  31.1k|}
_ZN3scn2v46detail13vscan_genericIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESN_EEEE:
 9591|  31.1k|{
 9592|  31.1k|    auto buffer = make_scan_buffer(range);
 9593|       |
 9594|  31.1k|    auto result = vscan_impl(buffer, format, args);
 9595|  31.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  31.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 29.7k, False: 1.34k]
  |  |  ------------------
  ------------------
 9596|  29.7k|        return unexpected(result.error());
 9597|  29.7k|    }
 9598|  1.34k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  1.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9599|  31.1k|}
_ZN3scn2v46detail16make_scan_bufferINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRKT_:
 5398|  62.2k|{
 5399|  62.2k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5400|       |
 5401|  62.2k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5402|  62.2k|                  "\n"
 5403|  62.2k|                  "Unsupported range type given as input to a scanning "
 5404|  62.2k|                  "function.\n"
 5405|  62.2k|                  "A range needs to have a character type (value type) "
 5406|  62.2k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5407|  62.2k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5408|  62.2k|                  "to be included.\n"
 5409|  62.2k|                  "See the scnlib documentation for more details.");
 5410|  62.2k|    static_assert(
 5411|  62.2k|        !std::is_same_v<T, custom_char_traits>,
 5412|  62.2k|        "\n"
 5413|  62.2k|        "Unsupported range type given as input to a scanning "
 5414|  62.2k|        "function.\n"
 5415|  62.2k|        "String types (std::basic_string, and std::basic_string_view) "
 5416|  62.2k|        "need to use std::char_traits. Strings with custom Traits are "
 5417|  62.2k|        "not supported.");
 5418|  62.2k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5419|  62.2k|                  "\n"
 5420|  62.2k|                  "Unsupported range type given as input to a scanning "
 5421|  62.2k|                  "function.\n"
 5422|  62.2k|                  "file_marker_found cannot be used as an "
 5423|  62.2k|                  "source range type to scn::scan.\n"
 5424|  62.2k|                  "To read from stdin, use scn::input or scn::prompt, "
 5425|  62.2k|                  "and do not provide an explicit source range, "
 5426|  62.2k|                  "or use scn::scan with a FILE* directly.");
 5427|  62.2k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5428|  62.2k|                  "\n"
 5429|  62.2k|                  "Unsupported range type given as input to a scanning "
 5430|  62.2k|                  "function.\n"
 5431|  62.2k|                  "In order to be scannable, a range needs to satisfy "
 5432|  62.2k|                  "`forward_range`. `input_range` is not sufficient.");
 5433|  62.2k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5434|  62.2k|                  "\n"
 5435|  62.2k|                  "Unsupported range type given as input to a scanning "
 5436|  62.2k|                  "function.\n"
 5437|  62.2k|                  "A range needs to model forward_range and have a valid "
 5438|  62.2k|                  "character type (char or wchar_t) to be scannable.\n"
 5439|  62.2k|                  "Examples of scannable ranges are std::string, "
 5440|  62.2k|                  "std::string_view, "
 5441|  62.2k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5442|  62.2k|                  "See the scnlib documentation for more details.");
 5443|       |
 5444|  62.2k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5445|  62.2k|}
_ZN3scn2v46detail17_make_scan_buffer4implIcEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 5290|  62.2k|{
 5291|  62.2k|    if constexpr (is_valid_char_type<CharT>) {
 5292|  62.2k|        return r;
 5293|       |        // return make_string_scan_buffer(r);
 5294|       |    }
 5295|       |    else {
 5296|       |        return invalid_char_type{};
 5297|       |    }
 5298|  62.2k|}
_ZNK3scn2v48expectedIlNS0_10scan_errorEEcvbEv:
 1753|   192k|    {
 1754|   192k|        return has_value();
 1755|   192k|    }
_ZNK3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  504|   387k|    {
  505|   387k|        return m_has_value;
  506|   387k|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5errorEv:
 1759|   189k|    {
 1760|   189k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   189k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   189k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   189k|        return this->get_unexpected().error();
 1762|   189k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  487|   189k|    {
  488|   189k|        return m_unexpected;
  489|   189k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1629|  59.5k|        : base(unexpect, std::move(e.error())),
 1630|  59.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  59.5k|    {
 1632|  59.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  464|  59.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  59.5k|          m_has_value(false)
  466|  59.5k|    {
  467|  59.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  62.2k|    {
 1330|  62.2k|    }
_ZN3scn2v46detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 6796|  2.68k|{
 6797|       |    if constexpr (ranges::random_access_iterator<
 6798|  2.68k|                      ranges::iterator_t<SourceRange>>) {
 6799|  2.68k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6800|       |    }
 6801|       |    else {
 6802|       |        auto it = ranges::begin(source);
 6803|       |        while (n > 0) {
 6804|       |            --n;
 6805|       |            ++it;
 6806|       |        }
 6807|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6808|       |    }
 6809|  2.68k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  2.68k|    {
 2883|  2.68k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  2.68k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  2.68k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  2.68k|    {
 2864|  2.68k|        return decay_copy(t.begin());
 2865|  2.68k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 2107|   166k|{
 2108|   166k|    return SCN_FWD(t);
  ------------------
  |  | 1110|   166k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|   166k|}
_ZN3scn2v46detail27make_vscan_result_range_endINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRT_:
 6783|  2.68k|{
 6784|  2.68k|    return ranges::end(source);
 6785|  2.68k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|  2.68k|    {
 2940|  2.68k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  2.68k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  2.68k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|  2.68k|    {
 2922|  2.68k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|  2.68k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|  2.68k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3478|   874k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   874k|    static_cast<    \
  |  | 1109|   874k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   874k|    static_cast<    \
  |  | 1109|   874k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|   874k|    {
 3480|   874k|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1808|  4.83k|    {
 1809|  4.83k|        return value();
 1810|  4.83k|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1782|  5.05k|    {
 1783|  5.05k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  5.05k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  5.05k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  5.05k|        return this->get_value();
 1785|  5.05k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  470|  5.05k|    {
  471|  5.05k|        return m_value;
  472|  5.05k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1583|  2.68k|        : base(std::in_place, std::forward<U>(val)),
 1584|  2.68k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  2.68k|    {
 1586|  2.68k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  455|  2.68k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  2.68k|    {
  457|  2.68k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEcvS6_Ev:
 8854|  6.92k|    {
 8855|  6.92k|        return m_str;
 8856|  6.92k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJcEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|  6.92k|{
 6196|  6.92k|    detail::check_scan_arg_types<Args...>();
 6197|  6.92k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  6.92k|}
_ZN3scn2v46detail20check_scan_arg_typesIJcEEEbv:
 5910|  6.92k|{
 5911|  6.92k|    constexpr bool default_constructible_constraint =
 5912|  6.92k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5913|  6.92k|    static_assert(default_constructible_constraint,
 5914|  6.92k|                  "Scan argument types must be default constructible");
 5915|       |
 5916|  6.92k|    constexpr bool destructible_constraint =
 5917|  6.92k|        std::conjunction_v<std::is_destructible<Args>...>;
 5918|  6.92k|    static_assert(destructible_constraint,
 5919|  6.92k|                  "Scan argument types must be Destructible");
 5920|       |
 5921|  6.92k|    constexpr bool non_reference_constraint =
 5922|  6.92k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5923|  6.92k|    static_assert(non_reference_constraint,
 5924|  6.92k|                  "Scan argument types must not be references");
 5925|       |
 5926|  6.92k|    constexpr bool movable_constraint =
 5927|  6.92k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5928|  6.92k|    static_assert(movable_constraint,
 5929|  6.92k|                  "Scan argument types must be move constructible");
 5930|       |
 5931|  6.92k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5931:12): [Folded - Ignored]
  |  Branch (5931:48): [Folded - Ignored]
  ------------------
 5932|  6.92k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5932:12): [Folded - Ignored]
  |  Branch (5932:40): [Folded - Ignored]
  ------------------
 5933|  6.92k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJcEEC2ERNSt3__15tupleIJcEEE:
 6171|  6.92k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  6.92k|    {
 6173|  6.92k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJcEE12make_argptrsIJcEEENSt3__15arrayIPvLm1EEEDpRT_:
 6180|  6.92k|    {
 6181|  6.92k|        return {detail::make_arg<
 6182|  6.92k|            kind, Context,
 6183|  6.92k|            mapped_type_constant<remove_cvref_t<A>,
 6184|  6.92k|                                 typename Context::char_type>::value>(args)...};
 6185|  6.92k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE14EcvEEPvRT2_:
 5960|  6.92k|{
 5961|  6.92k|    return make_value<Context>(value).ref_value;
 5962|  6.92k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEcEEDaRT0_:
 5895|  6.92k|{
 5896|  6.92k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|  6.92k|                                  needs_context_tag>) {
 5900|  6.92k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|  6.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|  6.92k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERc:
 5753|  6.92k|    {
 5754|       |        if constexpr (std::is_same_v<char_type, char> &&
 5755|  6.92k|                      !is_type_disabled<char_type>) {
 5756|  6.92k|            return val;
 5757|       |        }
 5758|       |        else if constexpr (is_type_disabled<char_type>) {
 5759|       |            return unscannable_disabled{val};
 5760|       |        }
 5761|       |        else {
 5762|       |            SCN_UNUSED(val);
 5763|       |            return unscannable_char{};
 5764|       |        }
 5765|  6.92k|    }
_ZN3scn2v46detail15make_value_implIcRcEEDaOT0_:
 5864|  6.92k|{
 5865|  6.92k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|  6.92k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|  6.92k|    constexpr bool scannable_char =
 5869|  6.92k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|  6.92k|    static_assert(scannable_char,
 5871|  6.92k|                  "Cannot scan an argument of an unsupported character "
 5872|  6.92k|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|  6.92k|    constexpr bool scannable_const =
 5875|  6.92k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|  6.92k|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|  6.92k|    constexpr bool scannable_disabled =
 5879|  6.92k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|  6.92k|    static_assert(scannable_disabled,
 5881|  6.92k|                  "Cannot scan an argument that has been disabled by "
 5882|  6.92k|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|  6.92k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|  6.92k|    static_assert(
 5886|  6.92k|        scannable,
 5887|  6.92k|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|  6.92k|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|  6.92k|    return arg_value{arg};
 5891|  6.92k|}
_ZN3scn2v46detail9arg_valueC2IcEERT_:
 5645|  6.92k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5646|  6.92k|    {
 5647|  6.92k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEptEv:
 1828|  7.19k|    {
 1829|  7.19k|        return &value();
 1830|  7.19k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|  7.19k|    {
 1783|  7.19k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  7.19k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  7.19k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  7.19k|        return this->get_value();
 1785|  7.19k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJcEE6valuesEv:
 6475|  6.92k|    {
 6476|  6.92k|        return m_values;
 6477|  6.92k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJcEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  6.92k|        : basic_scan_args(store.desc, store.args.data())
 6222|  6.92k|    {
 6223|  6.92k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2EmPKPv:
 6273|  62.2k|        : m_desc(desc), m_builtin_values(data)
 6274|  62.2k|    {
 6275|  62.2k|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 8531|  62.2k|{
 8532|  62.2k|    return s;
 8533|  62.2k|}
_ZN3scn2v46detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 8508|  62.2k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|  6.92k|        : m_str(r.str)
 8850|  6.92k|    {
 8851|  6.92k|    }
_ZN3scn2v44scanIJcENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 9961|  3.46k|{
 9962|  3.46k|    auto result = make_scan_result<Source, Args...>();
 9963|  3.46k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  3.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  3.46k|                                   make_scan_args(result->values())));
 9965|  3.46k|    return result;
 9966|  3.46k|}
_ZN3scn2v45vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS2_6localeEvEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEERKT0_OSB_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextINSG_16buffer_range_tagEcEEEE:
 9672|  31.1k|{
 9673|  31.1k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  | 1110|  31.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9674|  31.1k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESR_EEEE:
 9607|  31.1k|{
 9608|  31.1k|#if !SCN_DISABLE_LOCALE
 9609|  31.1k|    auto buffer = detail::make_scan_buffer(range);
 9610|       |
 9611|  31.1k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9612|  31.1k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9613|  31.1k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9614|       |
 9615|  31.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  31.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 29.7k, False: 1.34k]
  |  |  ------------------
  ------------------
 9616|  29.7k|        return unexpected(result.error());
 9617|  29.7k|    }
 9618|  1.34k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  1.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9619|       |#else
 9620|       |    static_assert(dependent_false<Locale>::value,
 9621|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9622|       |
 9623|       |    return {};
 9624|       |#endif
 9625|  31.1k|}
_ZN3scn2v44scanIJiERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 9892|  3.46k|{
 9893|  3.46k|    auto result = make_scan_result<Source, Args...>();
 9894|  3.46k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  3.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  3.46k|                                   make_scan_args(result->values())));
 9896|  3.46k|    return result;
 9897|  3.46k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEEDav:
 9848|  6.92k|{
 9849|  6.92k|    return scan_result_type<Source, Args...>();
 9850|  6.92k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2Ev:
 1565|  6.92k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2Ev:
  441|  6.92k|        : m_value(T{}), m_has_value(true)
  442|  6.92k|    {
  443|  6.92k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEC2Ev:
 6692|  6.92k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJiEEC2Ev:
 6466|  20.7k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9833|  6.92k|{
 9834|  6.92k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  6.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.92k, False: 0]
  |  |  ------------------
  ------------------
 9835|  6.92k|        out = unexpected(in.error());
 9836|  6.92k|    }
 9837|      0|    else {
 9838|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|      0|    }
 9840|  6.92k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1629|  6.92k|        : base(unexpect, std::move(e.error())),
 1630|  6.92k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  6.92k|    {
 1632|  6.92k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|  6.92k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  6.92k|          m_has_value(false)
  466|  6.92k|    {
  467|  6.92k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  6.92k|    {
 1330|  6.92k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEaSEOSC_:
 1570|  6.92k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorEvEaSEOSD_:
  916|  6.92k|    {
  917|  6.92k|        assign_common(std::move(other));
  918|  6.92k|        return *this;
  919|  6.92k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  963|  6.92k|    {
  964|  6.92k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 6.92k, False: 0]
  ------------------
  965|  6.92k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 6.92k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  6.92k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  6.92k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  20.7k|    {
  505|  20.7k|        return m_has_value;
  506|  20.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  6.92k|    {
  471|  6.92k|        return m_value;
  472|  6.92k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1059|  6.92k|    {
 1060|  6.92k|        this->destroy_value();
 1061|  6.92k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  6.92k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  6.92k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  518|  6.92k|    {
  519|  6.92k|        scn::detail::construct_at(&get_unexpected(),
  520|  6.92k|                                  std::forward<Args>(args)...);
  521|  6.92k|        m_has_value = false;
  522|  6.92k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  6.92k|    {
  488|  6.92k|        return m_unexpected;
  489|  6.92k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  6.92k|    {
  496|  6.92k|        return std::move(m_unexpected);
  497|  6.92k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEcvS6_Ev:
 8854|  6.92k|    {
 8855|  6.92k|        return m_str;
 8856|  6.92k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJiEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|  6.92k|{
 6196|  6.92k|    detail::check_scan_arg_types<Args...>();
 6197|  6.92k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  6.92k|}
_ZN3scn2v46detail20check_scan_arg_typesIJiEEEbv:
 5910|  20.7k|{
 5911|  20.7k|    constexpr bool default_constructible_constraint =
 5912|  20.7k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5913|  20.7k|    static_assert(default_constructible_constraint,
 5914|  20.7k|                  "Scan argument types must be default constructible");
 5915|       |
 5916|  20.7k|    constexpr bool destructible_constraint =
 5917|  20.7k|        std::conjunction_v<std::is_destructible<Args>...>;
 5918|  20.7k|    static_assert(destructible_constraint,
 5919|  20.7k|                  "Scan argument types must be Destructible");
 5920|       |
 5921|  20.7k|    constexpr bool non_reference_constraint =
 5922|  20.7k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5923|  20.7k|    static_assert(non_reference_constraint,
 5924|  20.7k|                  "Scan argument types must not be references");
 5925|       |
 5926|  20.7k|    constexpr bool movable_constraint =
 5927|  20.7k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5928|  20.7k|    static_assert(movable_constraint,
 5929|  20.7k|                  "Scan argument types must be move constructible");
 5930|       |
 5931|  20.7k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5931:12): [Folded - Ignored]
  |  Branch (5931:48): [Folded - Ignored]
  ------------------
 5932|  20.7k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5932:12): [Folded - Ignored]
  |  Branch (5932:40): [Folded - Ignored]
  ------------------
 5933|  20.7k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJiEEC2ERNSt3__15tupleIJiEEE:
 6171|  6.92k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  6.92k|    {
 6173|  6.92k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 6180|  6.92k|    {
 6181|  6.92k|        return {detail::make_arg<
 6182|  6.92k|            kind, Context,
 6183|  6.92k|            mapped_type_constant<remove_cvref_t<A>,
 6184|  6.92k|                                 typename Context::char_type>::value>(args)...};
 6185|  6.92k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE3EivEEPvRT2_:
 5960|  6.92k|{
 5961|  6.92k|    return make_value<Context>(value).ref_value;
 5962|  6.92k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEiEEDaRT0_:
 5895|  6.92k|{
 5896|  6.92k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|  6.92k|                                  needs_context_tag>) {
 5900|  6.92k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|  6.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|  6.92k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERi:
 5702|  6.92k|    {                                                                        \
 5703|  6.92k|        return val;                                                          \
 5704|  6.92k|    }
_ZN3scn2v46detail15make_value_implIiRiEEDaOT0_:
 5864|  20.7k|{
 5865|  20.7k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|  20.7k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|  20.7k|    constexpr bool scannable_char =
 5869|  20.7k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|  20.7k|    static_assert(scannable_char,
 5871|  20.7k|                  "Cannot scan an argument of an unsupported character "
 5872|  20.7k|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|  20.7k|    constexpr bool scannable_const =
 5875|  20.7k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|  20.7k|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|  20.7k|    constexpr bool scannable_disabled =
 5879|  20.7k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|  20.7k|    static_assert(scannable_disabled,
 5881|  20.7k|                  "Cannot scan an argument that has been disabled by "
 5882|  20.7k|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|  20.7k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|  20.7k|    static_assert(
 5886|  20.7k|        scannable,
 5887|  20.7k|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|  20.7k|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|  20.7k|    return arg_value{arg};
 5891|  20.7k|}
_ZN3scn2v46detail9arg_valueC2IiEERT_:
 5645|  20.7k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5646|  20.7k|    {
 5647|  20.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEptEv:
 1828|  6.92k|    {
 1829|  6.92k|        return &value();
 1830|  6.92k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|  6.92k|    {
 1783|  6.92k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  6.92k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  6.92k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  6.92k|        return this->get_value();
 1785|  6.92k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJiEE6valuesEv:
 6475|  20.7k|    {
 6476|  20.7k|        return m_values;
 6477|  20.7k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJiEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  6.92k|        : basic_scan_args(store.desc, store.args.data())
 6222|  6.92k|    {
 6223|  6.92k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|  6.92k|        : m_str(r.str)
 8850|  6.92k|    {
 8851|  6.92k|    }
_ZN3scn2v44scanIJiENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 9961|  3.46k|{
 9962|  3.46k|    auto result = make_scan_result<Source, Args...>();
 9963|  3.46k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  3.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  3.46k|                                   make_scan_args(result->values())));
 9965|  3.46k|    return result;
 9966|  3.46k|}
_ZN3scn2v44scanIJjERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 9892|  3.46k|{
 9893|  3.46k|    auto result = make_scan_result<Source, Args...>();
 9894|  3.46k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  3.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  3.46k|                                   make_scan_args(result->values())));
 9896|  3.46k|    return result;
 9897|  3.46k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEEDav:
 9848|  6.92k|{
 9849|  6.92k|    return scan_result_type<Source, Args...>();
 9850|  6.92k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2Ev:
 1565|  6.92k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2Ev:
  441|  6.92k|        : m_value(T{}), m_has_value(true)
  442|  6.92k|    {
  443|  6.92k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEC2Ev:
 6692|  6.92k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJjEEC2Ev:
 6466|  20.7k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9833|  6.92k|{
 9834|  6.92k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  6.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.92k, False: 0]
  |  |  ------------------
  ------------------
 9835|  6.92k|        out = unexpected(in.error());
 9836|  6.92k|    }
 9837|      0|    else {
 9838|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|      0|    }
 9840|  6.92k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1629|  6.92k|        : base(unexpect, std::move(e.error())),
 1630|  6.92k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  6.92k|    {
 1632|  6.92k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|  6.92k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  6.92k|          m_has_value(false)
  466|  6.92k|    {
  467|  6.92k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  6.92k|    {
 1330|  6.92k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEaSEOSC_:
 1570|  6.92k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorEvEaSEOSD_:
  916|  6.92k|    {
  917|  6.92k|        assign_common(std::move(other));
  918|  6.92k|        return *this;
  919|  6.92k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  963|  6.92k|    {
  964|  6.92k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 6.92k, False: 0]
  ------------------
  965|  6.92k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 6.92k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  6.92k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  6.92k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  20.7k|    {
  505|  20.7k|        return m_has_value;
  506|  20.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  6.92k|    {
  471|  6.92k|        return m_value;
  472|  6.92k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1059|  6.92k|    {
 1060|  6.92k|        this->destroy_value();
 1061|  6.92k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  6.92k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  6.92k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  518|  6.92k|    {
  519|  6.92k|        scn::detail::construct_at(&get_unexpected(),
  520|  6.92k|                                  std::forward<Args>(args)...);
  521|  6.92k|        m_has_value = false;
  522|  6.92k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  6.92k|    {
  488|  6.92k|        return m_unexpected;
  489|  6.92k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  6.92k|    {
  496|  6.92k|        return std::move(m_unexpected);
  497|  6.92k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEcvS6_Ev:
 8854|  6.92k|    {
 8855|  6.92k|        return m_str;
 8856|  6.92k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJjEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|  6.92k|{
 6196|  6.92k|    detail::check_scan_arg_types<Args...>();
 6197|  6.92k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  6.92k|}
_ZN3scn2v46detail20check_scan_arg_typesIJjEEEbv:
 5910|  20.7k|{
 5911|  20.7k|    constexpr bool default_constructible_constraint =
 5912|  20.7k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5913|  20.7k|    static_assert(default_constructible_constraint,
 5914|  20.7k|                  "Scan argument types must be default constructible");
 5915|       |
 5916|  20.7k|    constexpr bool destructible_constraint =
 5917|  20.7k|        std::conjunction_v<std::is_destructible<Args>...>;
 5918|  20.7k|    static_assert(destructible_constraint,
 5919|  20.7k|                  "Scan argument types must be Destructible");
 5920|       |
 5921|  20.7k|    constexpr bool non_reference_constraint =
 5922|  20.7k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5923|  20.7k|    static_assert(non_reference_constraint,
 5924|  20.7k|                  "Scan argument types must not be references");
 5925|       |
 5926|  20.7k|    constexpr bool movable_constraint =
 5927|  20.7k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5928|  20.7k|    static_assert(movable_constraint,
 5929|  20.7k|                  "Scan argument types must be move constructible");
 5930|       |
 5931|  20.7k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5931:12): [Folded - Ignored]
  |  Branch (5931:48): [Folded - Ignored]
  ------------------
 5932|  20.7k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5932:12): [Folded - Ignored]
  |  Branch (5932:40): [Folded - Ignored]
  ------------------
 5933|  20.7k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJjEEC2ERNSt3__15tupleIJjEEE:
 6171|  6.92k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  6.92k|    {
 6173|  6.92k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 6180|  6.92k|    {
 6181|  6.92k|        return {detail::make_arg<
 6182|  6.92k|            kind, Context,
 6183|  6.92k|            mapped_type_constant<remove_cvref_t<A>,
 6184|  6.92k|                                 typename Context::char_type>::value>(args)...};
 6185|  6.92k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE9EjvEEPvRT2_:
 5960|  6.92k|{
 5961|  6.92k|    return make_value<Context>(value).ref_value;
 5962|  6.92k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEjEEDaRT0_:
 5895|  6.92k|{
 5896|  6.92k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|  6.92k|                                  needs_context_tag>) {
 5900|  6.92k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|  6.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|  6.92k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERj:
 5702|  6.92k|    {                                                                        \
 5703|  6.92k|        return val;                                                          \
 5704|  6.92k|    }
_ZN3scn2v46detail15make_value_implIjRjEEDaOT0_:
 5864|  20.7k|{
 5865|  20.7k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|  20.7k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|  20.7k|    constexpr bool scannable_char =
 5869|  20.7k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|  20.7k|    static_assert(scannable_char,
 5871|  20.7k|                  "Cannot scan an argument of an unsupported character "
 5872|  20.7k|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|  20.7k|    constexpr bool scannable_const =
 5875|  20.7k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|  20.7k|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|  20.7k|    constexpr bool scannable_disabled =
 5879|  20.7k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|  20.7k|    static_assert(scannable_disabled,
 5881|  20.7k|                  "Cannot scan an argument that has been disabled by "
 5882|  20.7k|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|  20.7k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|  20.7k|    static_assert(
 5886|  20.7k|        scannable,
 5887|  20.7k|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|  20.7k|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|  20.7k|    return arg_value{arg};
 5891|  20.7k|}
_ZN3scn2v46detail9arg_valueC2IjEERT_:
 5645|  20.7k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5646|  20.7k|    {
 5647|  20.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEptEv:
 1828|  6.92k|    {
 1829|  6.92k|        return &value();
 1830|  6.92k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|  6.92k|    {
 1783|  6.92k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  6.92k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  6.92k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  6.92k|        return this->get_value();
 1785|  6.92k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJjEE6valuesEv:
 6475|  20.7k|    {
 6476|  20.7k|        return m_values;
 6477|  20.7k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJjEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  6.92k|        : basic_scan_args(store.desc, store.args.data())
 6222|  6.92k|    {
 6223|  6.92k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|  6.92k|        : m_str(r.str)
 8850|  6.92k|    {
 8851|  6.92k|    }
_ZN3scn2v44scanIJjENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 9961|  3.46k|{
 9962|  3.46k|    auto result = make_scan_result<Source, Args...>();
 9963|  3.46k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  3.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  3.46k|                                   make_scan_args(result->values())));
 9965|  3.46k|    return result;
 9966|  3.46k|}
_ZN3scn2v44scanIJdERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 9892|  3.46k|{
 9893|  3.46k|    auto result = make_scan_result<Source, Args...>();
 9894|  3.46k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  3.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  3.46k|                                   make_scan_args(result->values())));
 9896|  3.46k|    return result;
 9897|  3.46k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEEDav:
 9848|  6.92k|{
 9849|  6.92k|    return scan_result_type<Source, Args...>();
 9850|  6.92k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2Ev:
 1565|  6.92k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  441|  6.92k|        : m_value(T{}), m_has_value(true)
  442|  6.92k|    {
  443|  6.92k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2Ev:
 6692|  6.92k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJdEEC2Ev:
 6466|  20.7k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9833|  6.92k|{
 9834|  6.92k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  6.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.92k, False: 0]
  |  |  ------------------
  ------------------
 9835|  6.92k|        out = unexpected(in.error());
 9836|  6.92k|    }
 9837|      0|    else {
 9838|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|      0|    }
 9840|  6.92k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1629|  6.92k|        : base(unexpect, std::move(e.error())),
 1630|  6.92k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  6.92k|    {
 1632|  6.92k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|  6.92k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  6.92k|          m_has_value(false)
  466|  6.92k|    {
  467|  6.92k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  6.92k|    {
 1330|  6.92k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEaSEOSC_:
 1570|  6.92k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvEaSEOSD_:
  916|  6.92k|    {
  917|  6.92k|        assign_common(std::move(other));
  918|  6.92k|        return *this;
  919|  6.92k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  963|  6.92k|    {
  964|  6.92k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 6.92k, False: 0]
  ------------------
  965|  6.92k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 6.92k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  6.92k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  6.92k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  20.7k|    {
  505|  20.7k|        return m_has_value;
  506|  20.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  6.92k|    {
  471|  6.92k|        return m_value;
  472|  6.92k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1059|  6.92k|    {
 1060|  6.92k|        this->destroy_value();
 1061|  6.92k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  6.92k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  6.92k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  518|  6.92k|    {
  519|  6.92k|        scn::detail::construct_at(&get_unexpected(),
  520|  6.92k|                                  std::forward<Args>(args)...);
  521|  6.92k|        m_has_value = false;
  522|  6.92k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  6.92k|    {
  488|  6.92k|        return m_unexpected;
  489|  6.92k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  6.92k|    {
  496|  6.92k|        return std::move(m_unexpected);
  497|  6.92k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEcvS6_Ev:
 8854|  6.92k|    {
 8855|  6.92k|        return m_str;
 8856|  6.92k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJdEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|  6.92k|{
 6196|  6.92k|    detail::check_scan_arg_types<Args...>();
 6197|  6.92k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  6.92k|}
_ZN3scn2v46detail20check_scan_arg_typesIJdEEEbv:
 5910|  20.7k|{
 5911|  20.7k|    constexpr bool default_constructible_constraint =
 5912|  20.7k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5913|  20.7k|    static_assert(default_constructible_constraint,
 5914|  20.7k|                  "Scan argument types must be default constructible");
 5915|       |
 5916|  20.7k|    constexpr bool destructible_constraint =
 5917|  20.7k|        std::conjunction_v<std::is_destructible<Args>...>;
 5918|  20.7k|    static_assert(destructible_constraint,
 5919|  20.7k|                  "Scan argument types must be Destructible");
 5920|       |
 5921|  20.7k|    constexpr bool non_reference_constraint =
 5922|  20.7k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5923|  20.7k|    static_assert(non_reference_constraint,
 5924|  20.7k|                  "Scan argument types must not be references");
 5925|       |
 5926|  20.7k|    constexpr bool movable_constraint =
 5927|  20.7k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5928|  20.7k|    static_assert(movable_constraint,
 5929|  20.7k|                  "Scan argument types must be move constructible");
 5930|       |
 5931|  20.7k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5931:12): [Folded - Ignored]
  |  Branch (5931:48): [Folded - Ignored]
  ------------------
 5932|  20.7k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5932:12): [Folded - Ignored]
  |  Branch (5932:40): [Folded - Ignored]
  ------------------
 5933|  20.7k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJdEEC2ERNSt3__15tupleIJdEEE:
 6171|  6.92k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  6.92k|    {
 6173|  6.92k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 6180|  6.92k|    {
 6181|  6.92k|        return {detail::make_arg<
 6182|  6.92k|            kind, Context,
 6183|  6.92k|            mapped_type_constant<remove_cvref_t<A>,
 6184|  6.92k|                                 typename Context::char_type>::value>(args)...};
 6185|  6.92k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE19EdvEEPvRT2_:
 5960|  6.92k|{
 5961|  6.92k|    return make_value<Context>(value).ref_value;
 5962|  6.92k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEdEEDaRT0_:
 5895|  6.92k|{
 5896|  6.92k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|  6.92k|                                  needs_context_tag>) {
 5900|  6.92k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|  6.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|  6.92k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERd:
 5702|  6.92k|    {                                                                        \
 5703|  6.92k|        return val;                                                          \
 5704|  6.92k|    }
_ZN3scn2v46detail15make_value_implIdRdEEDaOT0_:
 5864|  20.7k|{
 5865|  20.7k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|  20.7k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|  20.7k|    constexpr bool scannable_char =
 5869|  20.7k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|  20.7k|    static_assert(scannable_char,
 5871|  20.7k|                  "Cannot scan an argument of an unsupported character "
 5872|  20.7k|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|  20.7k|    constexpr bool scannable_const =
 5875|  20.7k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|  20.7k|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|  20.7k|    constexpr bool scannable_disabled =
 5879|  20.7k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|  20.7k|    static_assert(scannable_disabled,
 5881|  20.7k|                  "Cannot scan an argument that has been disabled by "
 5882|  20.7k|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|  20.7k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|  20.7k|    static_assert(
 5886|  20.7k|        scannable,
 5887|  20.7k|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|  20.7k|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|  20.7k|    return arg_value{arg};
 5891|  20.7k|}
_ZN3scn2v46detail9arg_valueC2IdEERT_:
 5645|  20.7k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5646|  20.7k|    {
 5647|  20.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEptEv:
 1828|  6.92k|    {
 1829|  6.92k|        return &value();
 1830|  6.92k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|  6.92k|    {
 1783|  6.92k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  6.92k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  6.92k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  6.92k|        return this->get_value();
 1785|  6.92k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJdEE6valuesEv:
 6475|  20.7k|    {
 6476|  20.7k|        return m_values;
 6477|  20.7k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJdEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  6.92k|        : basic_scan_args(store.desc, store.args.data())
 6222|  6.92k|    {
 6223|  6.92k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|  6.92k|        : m_str(r.str)
 8850|  6.92k|    {
 8851|  6.92k|    }
_ZN3scn2v44scanIJdENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 9961|  3.46k|{
 9962|  3.46k|    auto result = make_scan_result<Source, Args...>();
 9963|  3.46k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  3.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  3.46k|                                   make_scan_args(result->values())));
 9965|  3.46k|    return result;
 9966|  3.46k|}
_ZN3scn2v44scanIJbERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 9892|  3.46k|{
 9893|  3.46k|    auto result = make_scan_result<Source, Args...>();
 9894|  3.46k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  3.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  3.46k|                                   make_scan_args(result->values())));
 9896|  3.46k|    return result;
 9897|  3.46k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEEDav:
 9848|  6.92k|{
 9849|  6.92k|    return scan_result_type<Source, Args...>();
 9850|  6.92k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEC2Ev:
 1565|  6.92k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2Ev:
  441|  6.92k|        : m_value(T{}), m_has_value(true)
  442|  6.92k|    {
  443|  6.92k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJbEEC2Ev:
 6692|  6.92k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJbEEC2Ev:
 6466|  20.7k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9833|  6.92k|{
 9834|  6.92k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  6.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.92k, False: 0]
  |  |  ------------------
  ------------------
 9835|  6.92k|        out = unexpected(in.error());
 9836|  6.92k|    }
 9837|      0|    else {
 9838|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|      0|    }
 9840|  6.92k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1629|  6.92k|        : base(unexpect, std::move(e.error())),
 1630|  6.92k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  6.92k|    {
 1632|  6.92k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|  6.92k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  6.92k|          m_has_value(false)
  466|  6.92k|    {
  467|  6.92k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  6.92k|    {
 1330|  6.92k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEaSEOSC_:
 1570|  6.92k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorEvEaSEOSD_:
  916|  6.92k|    {
  917|  6.92k|        assign_common(std::move(other));
  918|  6.92k|        return *this;
  919|  6.92k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  963|  6.92k|    {
  964|  6.92k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 6.92k, False: 0]
  ------------------
  965|  6.92k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 6.92k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  6.92k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  6.92k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  20.7k|    {
  505|  20.7k|        return m_has_value;
  506|  20.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  6.92k|    {
  471|  6.92k|        return m_value;
  472|  6.92k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1059|  6.92k|    {
 1060|  6.92k|        this->destroy_value();
 1061|  6.92k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  6.92k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  6.92k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  518|  6.92k|    {
  519|  6.92k|        scn::detail::construct_at(&get_unexpected(),
  520|  6.92k|                                  std::forward<Args>(args)...);
  521|  6.92k|        m_has_value = false;
  522|  6.92k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  6.92k|    {
  488|  6.92k|        return m_unexpected;
  489|  6.92k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  6.92k|    {
  496|  6.92k|        return std::move(m_unexpected);
  497|  6.92k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEcvS6_Ev:
 8854|  6.92k|    {
 8855|  6.92k|        return m_str;
 8856|  6.92k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJbEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|  6.92k|{
 6196|  6.92k|    detail::check_scan_arg_types<Args...>();
 6197|  6.92k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  6.92k|}
_ZN3scn2v46detail20check_scan_arg_typesIJbEEEbv:
 5910|  20.7k|{
 5911|  20.7k|    constexpr bool default_constructible_constraint =
 5912|  20.7k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5913|  20.7k|    static_assert(default_constructible_constraint,
 5914|  20.7k|                  "Scan argument types must be default constructible");
 5915|       |
 5916|  20.7k|    constexpr bool destructible_constraint =
 5917|  20.7k|        std::conjunction_v<std::is_destructible<Args>...>;
 5918|  20.7k|    static_assert(destructible_constraint,
 5919|  20.7k|                  "Scan argument types must be Destructible");
 5920|       |
 5921|  20.7k|    constexpr bool non_reference_constraint =
 5922|  20.7k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5923|  20.7k|    static_assert(non_reference_constraint,
 5924|  20.7k|                  "Scan argument types must not be references");
 5925|       |
 5926|  20.7k|    constexpr bool movable_constraint =
 5927|  20.7k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5928|  20.7k|    static_assert(movable_constraint,
 5929|  20.7k|                  "Scan argument types must be move constructible");
 5930|       |
 5931|  20.7k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5931:12): [Folded - Ignored]
  |  Branch (5931:48): [Folded - Ignored]
  ------------------
 5932|  20.7k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5932:12): [Folded - Ignored]
  |  Branch (5932:40): [Folded - Ignored]
  ------------------
 5933|  20.7k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJbEEC2ERNSt3__15tupleIJbEEE:
 6171|  6.92k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  6.92k|    {
 6173|  6.92k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 6180|  6.92k|    {
 6181|  6.92k|        return {detail::make_arg<
 6182|  6.92k|            kind, Context,
 6183|  6.92k|            mapped_type_constant<remove_cvref_t<A>,
 6184|  6.92k|                                 typename Context::char_type>::value>(args)...};
 6185|  6.92k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE13EbvEEPvRT2_:
 5960|  6.92k|{
 5961|  6.92k|    return make_value<Context>(value).ref_value;
 5962|  6.92k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEbEEDaRT0_:
 5895|  6.92k|{
 5896|  6.92k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|  6.92k|                                  needs_context_tag>) {
 5900|  6.92k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|  6.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|  6.92k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERb:
 5702|  6.92k|    {                                                                        \
 5703|  6.92k|        return val;                                                          \
 5704|  6.92k|    }
_ZN3scn2v46detail15make_value_implIbRbEEDaOT0_:
 5864|  20.7k|{
 5865|  20.7k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|  20.7k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|  20.7k|    constexpr bool scannable_char =
 5869|  20.7k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|  20.7k|    static_assert(scannable_char,
 5871|  20.7k|                  "Cannot scan an argument of an unsupported character "
 5872|  20.7k|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|  20.7k|    constexpr bool scannable_const =
 5875|  20.7k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|  20.7k|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|  20.7k|    constexpr bool scannable_disabled =
 5879|  20.7k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|  20.7k|    static_assert(scannable_disabled,
 5881|  20.7k|                  "Cannot scan an argument that has been disabled by "
 5882|  20.7k|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|  20.7k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|  20.7k|    static_assert(
 5886|  20.7k|        scannable,
 5887|  20.7k|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|  20.7k|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|  20.7k|    return arg_value{arg};
 5891|  20.7k|}
_ZN3scn2v46detail9arg_valueC2IbEERT_:
 5645|  20.7k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5646|  20.7k|    {
 5647|  20.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEptEv:
 1828|  6.92k|    {
 1829|  6.92k|        return &value();
 1830|  6.92k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|  6.92k|    {
 1783|  6.92k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  6.92k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  6.92k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  6.92k|        return this->get_value();
 1785|  6.92k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJbEE6valuesEv:
 6475|  20.7k|    {
 6476|  20.7k|        return m_values;
 6477|  20.7k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJbEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  6.92k|        : basic_scan_args(store.desc, store.args.data())
 6222|  6.92k|    {
 6223|  6.92k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|  6.92k|        : m_str(r.str)
 8850|  6.92k|    {
 8851|  6.92k|    }
_ZN3scn2v44scanIJbENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 9961|  3.46k|{
 9962|  3.46k|    auto result = make_scan_result<Source, Args...>();
 9963|  3.46k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  3.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  3.46k|                                   make_scan_args(result->values())));
 9965|  3.46k|    return result;
 9966|  3.46k|}
_ZN3scn2v44scanIJPvERNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
 9892|  3.46k|{
 9893|  3.46k|    auto result = make_scan_result<Source, Args...>();
 9894|  3.46k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  3.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  3.46k|                                   make_scan_args(result->values())));
 9896|  3.46k|    return result;
 9897|  3.46k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEEDav:
 9848|  6.92k|{
 9849|  6.92k|    return scan_result_type<Source, Args...>();
 9850|  6.92k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEC2Ev:
 1565|  6.92k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2Ev:
  441|  6.92k|        : m_value(T{}), m_has_value(true)
  442|  6.92k|    {
  443|  6.92k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJPvEEC2Ev:
 6692|  6.92k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJPvEEC2Ev:
 6466|  20.7k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELSA_0EEEvRNS0_13scan_expectedISG_EEONSR_ISM_EE:
 9833|  6.92k|{
 9834|  6.92k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  6.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.92k, False: 0]
  |  |  ------------------
  ------------------
 9835|  6.92k|        out = unexpected(in.error());
 9836|  6.92k|    }
 9837|      0|    else {
 9838|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|      0|    }
 9840|  6.92k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELSA_0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSA_0EEEONS0_10unexpectedISH_EE:
 1629|  6.92k|        : base(unexpect, std::move(e.error())),
 1630|  6.92k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  6.92k|    {
 1632|  6.92k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  464|  6.92k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  6.92k|          m_has_value(false)
  466|  6.92k|    {
  467|  6.92k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  6.92k|    {
 1330|  6.92k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEaSEOSD_:
 1570|  6.92k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorEvEaSEOSE_:
  916|  6.92k|    {
  917|  6.92k|        assign_common(std::move(other));
  918|  6.92k|        return *this;
  919|  6.92k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  963|  6.92k|    {
  964|  6.92k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 6.92k, False: 0]
  ------------------
  965|  6.92k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 6.92k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  6.92k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  6.92k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  20.7k|    {
  505|  20.7k|        return m_has_value;
  506|  20.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  6.92k|    {
  471|  6.92k|        return m_value;
  472|  6.92k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1059|  6.92k|    {
 1060|  6.92k|        this->destroy_value();
 1061|  6.92k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  6.92k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  6.92k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  518|  6.92k|    {
  519|  6.92k|        scn::detail::construct_at(&get_unexpected(),
  520|  6.92k|                                  std::forward<Args>(args)...);
  521|  6.92k|        m_has_value = false;
  522|  6.92k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  6.92k|    {
  488|  6.92k|        return m_unexpected;
  489|  6.92k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  6.92k|    {
  496|  6.92k|        return std::move(m_unexpected);
  497|  6.92k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEcvS6_Ev:
 8854|  6.92k|    {
 8855|  6.92k|        return m_str;
 8856|  6.92k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJPvEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|  6.92k|{
 6196|  6.92k|    detail::check_scan_arg_types<Args...>();
 6197|  6.92k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  6.92k|}
_ZN3scn2v46detail20check_scan_arg_typesIJPvEEEbv:
 5910|  20.7k|{
 5911|  20.7k|    constexpr bool default_constructible_constraint =
 5912|  20.7k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5913|  20.7k|    static_assert(default_constructible_constraint,
 5914|  20.7k|                  "Scan argument types must be default constructible");
 5915|       |
 5916|  20.7k|    constexpr bool destructible_constraint =
 5917|  20.7k|        std::conjunction_v<std::is_destructible<Args>...>;
 5918|  20.7k|    static_assert(destructible_constraint,
 5919|  20.7k|                  "Scan argument types must be Destructible");
 5920|       |
 5921|  20.7k|    constexpr bool non_reference_constraint =
 5922|  20.7k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5923|  20.7k|    static_assert(non_reference_constraint,
 5924|  20.7k|                  "Scan argument types must not be references");
 5925|       |
 5926|  20.7k|    constexpr bool movable_constraint =
 5927|  20.7k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5928|  20.7k|    static_assert(movable_constraint,
 5929|  20.7k|                  "Scan argument types must be move constructible");
 5930|       |
 5931|  20.7k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5931:12): [Folded - Ignored]
  |  Branch (5931:48): [Folded - Ignored]
  ------------------
 5932|  20.7k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5932:12): [Folded - Ignored]
  |  Branch (5932:40): [Folded - Ignored]
  ------------------
 5933|  20.7k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJPvEEC2ERNSt3__15tupleIJS6_EEE:
 6171|  6.92k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  6.92k|    {
 6173|  6.92k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJPvEE12make_argptrsIJS6_EEENSt3__15arrayIS6_Lm1EEEDpRT_:
 6180|  6.92k|    {
 6181|  6.92k|        return {detail::make_arg<
 6182|  6.92k|            kind, Context,
 6183|  6.92k|            mapped_type_constant<remove_cvref_t<A>,
 6184|  6.92k|                                 typename Context::char_type>::value>(args)...};
 6185|  6.92k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE17EPvvEES8_RT2_:
 5960|  6.92k|{
 5961|  6.92k|    return make_value<Context>(value).ref_value;
 5962|  6.92k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEPvEEDaRT0_:
 5895|  6.92k|{
 5896|  6.92k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|  6.92k|                                  needs_context_tag>) {
 5900|  6.92k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|  6.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|  6.92k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERPv:
 5702|  6.92k|    {                                                                        \
 5703|  6.92k|        return val;                                                          \
 5704|  6.92k|    }
_ZN3scn2v46detail15make_value_implIPvRS3_EEDaOT0_:
 5864|  20.7k|{
 5865|  20.7k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|  20.7k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|  20.7k|    constexpr bool scannable_char =
 5869|  20.7k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|  20.7k|    static_assert(scannable_char,
 5871|  20.7k|                  "Cannot scan an argument of an unsupported character "
 5872|  20.7k|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|  20.7k|    constexpr bool scannable_const =
 5875|  20.7k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|  20.7k|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|  20.7k|    constexpr bool scannable_disabled =
 5879|  20.7k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|  20.7k|    static_assert(scannable_disabled,
 5881|  20.7k|                  "Cannot scan an argument that has been disabled by "
 5882|  20.7k|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|  20.7k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|  20.7k|    static_assert(
 5886|  20.7k|        scannable,
 5887|  20.7k|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|  20.7k|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|  20.7k|    return arg_value{arg};
 5891|  20.7k|}
_ZN3scn2v46detail9arg_valueC2IPvEERT_:
 5645|  20.7k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5646|  20.7k|    {
 5647|  20.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEptEv:
 1828|  6.92k|    {
 1829|  6.92k|        return &value();
 1830|  6.92k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELSA_0EEERSH_v:
 1782|  6.92k|    {
 1783|  6.92k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  6.92k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  6.92k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  6.92k|        return this->get_value();
 1785|  6.92k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJPvEE6valuesEv:
 6475|  20.7k|    {
 6476|  20.7k|        return m_values;
 6477|  20.7k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJPvEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  6.92k|        : basic_scan_args(store.desc, store.args.data())
 6222|  6.92k|    {
 6223|  6.92k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|  6.92k|        : m_str(r.str)
 8850|  6.92k|    {
 8851|  6.92k|    }
_ZN3scn2v44scanIJPvENSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
 9961|  3.46k|{
 9962|  3.46k|    auto result = make_scan_result<Source, Args...>();
 9963|  3.46k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  3.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  3.46k|                                   make_scan_args(result->values())));
 9965|  3.46k|    return result;
 9966|  3.46k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIcS5_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSW_ISQ_E4typeEEEE:
 9892|  3.46k|{
 9893|  3.46k|    auto result = make_scan_result<Source, Args...>();
 9894|  3.46k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  3.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  3.46k|                                   make_scan_args(result->values())));
 9896|  3.46k|    return result;
 9897|  3.46k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEEDav:
 9848|  6.92k|{
 9849|  6.92k|    return scan_result_type<Source, Args...>();
 9850|  6.92k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2Ev:
 1565|  6.92k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2Ev:
  626|  6.92k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  627|  6.92k|    {
  628|  6.92k|        construct();
  629|  6.92k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  708|  6.92k|    {
  709|  6.92k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  710|  6.92k|        m_has_value = true;
  711|  6.92k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJEEEPT_SK_DpOT0_:
  410|  6.92k|{
  411|  6.92k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|  6.92k|        T(std::forward<Args>(args)...);
  413|  6.92k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2Ev:
 6692|  6.92k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2Ev:
 6466|  20.7k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  732|  21.5k|    {
  733|  21.5k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1074|  21.5k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  734|  21.5k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9833|  6.92k|{
 9834|  6.92k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  6.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.11k, False: 802]
  |  |  ------------------
  ------------------
 9835|  6.11k|        out = unexpected(in.error());
 9836|  6.11k|    }
 9837|    802|    else {
 9838|    802|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|    802|    static_cast<    \
  |  | 1109|    802|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|    802|    }
 9840|  6.92k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1629|  6.11k|        : base(unexpect, std::move(e.error())),
 1630|  6.11k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  6.11k|    {
 1632|  6.11k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  651|  6.11k|        : m_has_value(false)
  652|  6.11k|    {
  653|  6.11k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  654|  6.11k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  715|  6.11k|    {
  716|  6.11k|        scn::detail::construct_at(unexpected_ptr(),
  717|  6.11k|                                  std::forward<Args>(args)...);
  718|  6.11k|        m_has_value = false;
  719|  6.11k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  410|  38.9k|{
  411|  38.9k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|  38.9k|        T(std::forward<Args>(args)...);
  413|  38.9k|}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  744|  30.5k|    {
  745|  30.5k|        return reinterpret_cast<unexpected<E>*>(
  746|  30.5k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1074|  30.5k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  747|  30.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  6.11k|    {
 1330|  6.11k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1570|  6.11k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvEaSEOSK_:
  916|  6.11k|    {
  917|  6.11k|        assign_common(std::move(other));
  918|  6.11k|        return *this;
  919|  6.11k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  963|  6.11k|    {
  964|  6.11k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 6.11k, False: 0]
  ------------------
  965|  6.11k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 6.11k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  6.11k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  6.11k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  701|  32.9k|    {
  702|  32.9k|        return m_has_value;
  703|  32.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  667|  7.72k|    {
  668|  7.72k|        return *value_ptr();
  669|  7.72k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1059|  6.11k|    {
 1060|  6.11k|        this->destroy_value();
 1061|  6.11k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  6.11k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  722|  6.92k|    {
  723|  6.92k|        scn::detail::destroy_at(value_ptr());
  724|  6.92k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  416|  6.92k|{
  417|       |    if constexpr (std::is_array_v<T>) {
  418|       |        for (auto& elem : *p) {
  419|       |            scn::detail::destroy_at(&elem);
  420|       |        }
  421|       |    }
  422|  6.92k|    else {
  423|  6.92k|        p->~T();
  424|  6.92k|    }
  425|  6.92k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 6699|  6.92k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  715|  6.11k|    {
  716|  6.11k|        scn::detail::construct_at(unexpected_ptr(),
  717|  6.11k|                                  std::forward<Args>(args)...);
  718|  6.11k|        m_has_value = false;
  719|  6.11k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  692|  6.11k|    {
  693|  6.11k|        return std::move(*unexpected_ptr());
  694|  6.11k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  726|  12.2k|    {
  727|  12.2k|        scn::detail::destroy_at(unexpected_ptr());
  728|  12.2k|    }
_ZN3scn2v46detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  416|  77.6k|{
  417|       |    if constexpr (std::is_array_v<T>) {
  418|       |        for (auto& elem : *p) {
  419|       |            scn::detail::destroy_at(&elem);
  420|       |        }
  421|       |    }
  422|  77.6k|    else {
  423|  77.6k|        p->~T();
  424|  77.6k|    }
  425|  77.6k|}
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEcvS6_Ev:
 8854|  6.92k|    {
 8855|  6.92k|        return m_str;
 8856|  6.92k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6195|  6.92k|{
 6196|  6.92k|    detail::check_scan_arg_types<Args...>();
 6197|  6.92k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  6.92k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEbv:
 5910|  20.7k|{
 5911|  20.7k|    constexpr bool default_constructible_constraint =
 5912|  20.7k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5913|  20.7k|    static_assert(default_constructible_constraint,
 5914|  20.7k|                  "Scan argument types must be default constructible");
 5915|       |
 5916|  20.7k|    constexpr bool destructible_constraint =
 5917|  20.7k|        std::conjunction_v<std::is_destructible<Args>...>;
 5918|  20.7k|    static_assert(destructible_constraint,
 5919|  20.7k|                  "Scan argument types must be Destructible");
 5920|       |
 5921|  20.7k|    constexpr bool non_reference_constraint =
 5922|  20.7k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5923|  20.7k|    static_assert(non_reference_constraint,
 5924|  20.7k|                  "Scan argument types must not be references");
 5925|       |
 5926|  20.7k|    constexpr bool movable_constraint =
 5927|  20.7k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5928|  20.7k|    static_assert(movable_constraint,
 5929|  20.7k|                  "Scan argument types must be move constructible");
 5930|       |
 5931|  20.7k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5931:12): [Folded - Ignored]
  |  Branch (5931:48): [Folded - Ignored]
  ------------------
 5932|  20.7k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5932:12): [Folded - Ignored]
  |  Branch (5932:40): [Folded - Ignored]
  ------------------
 5933|  20.7k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6171|  6.92k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  6.92k|    {
 6173|  6.92k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6180|  6.92k|    {
 6181|  6.92k|        return {detail::make_arg<
 6182|  6.92k|            kind, Context,
 6183|  6.92k|            mapped_type_constant<remove_cvref_t<A>,
 6184|  6.92k|                                 typename Context::char_type>::value>(args)...};
 6185|  6.92k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE27ENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEvEEPvRT2_:
 5960|  6.92k|{
 5961|  6.92k|    return make_value<Context>(value).ref_value;
 5962|  6.92k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDaRT0_:
 5895|  6.92k|{
 5896|  6.92k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|  6.92k|                                  needs_context_tag>) {
 5900|  6.92k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|  6.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|  6.92k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 5702|  6.92k|    {                                                                        \
 5703|  6.92k|        return val;                                                          \
 5704|  6.92k|    }
_ZN3scn2v46detail15make_value_implINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERS9_EEDaOT0_:
 5864|  20.7k|{
 5865|  20.7k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|  20.7k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|  20.7k|    constexpr bool scannable_char =
 5869|  20.7k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|  20.7k|    static_assert(scannable_char,
 5871|  20.7k|                  "Cannot scan an argument of an unsupported character "
 5872|  20.7k|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|  20.7k|    constexpr bool scannable_const =
 5875|  20.7k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|  20.7k|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|  20.7k|    constexpr bool scannable_disabled =
 5879|  20.7k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|  20.7k|    static_assert(scannable_disabled,
 5881|  20.7k|                  "Cannot scan an argument that has been disabled by "
 5882|  20.7k|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|  20.7k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|  20.7k|    static_assert(
 5886|  20.7k|        scannable,
 5887|  20.7k|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|  20.7k|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|  20.7k|    return arg_value{arg};
 5891|  20.7k|}
_ZN3scn2v46detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 5645|  20.7k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5646|  20.7k|    {
 5647|  20.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1828|  7.72k|    {
 1829|  7.72k|        return &value();
 1830|  7.72k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1782|  7.72k|    {
 1783|  7.72k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  7.72k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  7.72k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  7.72k|        return this->get_value();
 1785|  7.72k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE6valuesEv:
 6475|  20.7k|    {
 6476|  20.7k|        return m_values;
 6477|  20.7k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  6.92k|        : basic_scan_args(store.desc, store.args.data())
 6222|  6.92k|    {
 6223|  6.92k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|  6.92k|        : m_str(r.str)
 8850|  6.92k|    {
 8851|  6.92k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  657|  13.0k|    {
  658|  13.0k|        if (has_value()) {
  ------------------
  |  Branch (658:13): [True: 802, False: 12.2k]
  ------------------
  659|    802|            destroy_value();
  660|    802|        }
  661|  12.2k|        else {
  662|  12.2k|            destroy_unexpected();
  663|  12.2k|        }
  664|  13.0k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIcS5_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNS10_ISR_E4typeEEEE:
 9961|  3.46k|{
 9962|  3.46k|    auto result = make_scan_result<Source, Args...>();
 9963|  3.46k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  3.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  3.46k|                                   make_scan_args(result->values())));
 9965|  3.46k|    return result;
 9966|  3.46k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIcNS4_IcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNSX_ISR_E4typeEEEE:
 9892|  3.46k|{
 9893|  3.46k|    auto result = make_scan_result<Source, Args...>();
 9894|  3.46k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  3.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  3.46k|                                   make_scan_args(result->values())));
 9896|  3.46k|    return result;
 9897|  3.46k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEEDav:
 9848|  6.92k|{
 9849|  6.92k|    return scan_result_type<Source, Args...>();
 9850|  6.92k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2Ev:
 1565|  6.92k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2Ev:
  626|  6.92k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  627|  6.92k|    {
  628|  6.92k|        construct();
  629|  6.92k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  708|  6.92k|    {
  709|  6.92k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  710|  6.92k|        m_has_value = true;
  711|  6.92k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJEEEPT_SK_DpOT0_:
  410|  6.92k|{
  411|  6.92k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|  6.92k|        T(std::forward<Args>(args)...);
  413|  6.92k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2Ev:
 6692|  6.92k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2Ev:
 6466|  20.7k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  732|  21.5k|    {
  733|  21.5k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1074|  21.5k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  734|  21.5k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9833|  6.92k|{
 9834|  6.92k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  6.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.11k, False: 802]
  |  |  ------------------
  ------------------
 9835|  6.11k|        out = unexpected(in.error());
 9836|  6.11k|    }
 9837|    802|    else {
 9838|    802|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|    802|    static_cast<    \
  |  | 1109|    802|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|    802|    }
 9840|  6.92k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1629|  6.11k|        : base(unexpect, std::move(e.error())),
 1630|  6.11k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  6.11k|    {
 1632|  6.11k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  651|  6.11k|        : m_has_value(false)
  652|  6.11k|    {
  653|  6.11k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  654|  6.11k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  715|  6.11k|    {
  716|  6.11k|        scn::detail::construct_at(unexpected_ptr(),
  717|  6.11k|                                  std::forward<Args>(args)...);
  718|  6.11k|        m_has_value = false;
  719|  6.11k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  744|  30.5k|    {
  745|  30.5k|        return reinterpret_cast<unexpected<E>*>(
  746|  30.5k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1074|  30.5k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  747|  30.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  6.11k|    {
 1330|  6.11k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1570|  6.11k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvEaSEOSK_:
  916|  6.11k|    {
  917|  6.11k|        assign_common(std::move(other));
  918|  6.11k|        return *this;
  919|  6.11k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  963|  6.11k|    {
  964|  6.11k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 6.11k, False: 0]
  ------------------
  965|  6.11k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 6.11k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  6.11k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  6.11k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  701|  32.9k|    {
  702|  32.9k|        return m_has_value;
  703|  32.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  667|  7.72k|    {
  668|  7.72k|        return *value_ptr();
  669|  7.72k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1059|  6.11k|    {
 1060|  6.11k|        this->destroy_value();
 1061|  6.11k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  6.11k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  722|  6.92k|    {
  723|  6.92k|        scn::detail::destroy_at(value_ptr());
  724|  6.92k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  416|  6.92k|{
  417|       |    if constexpr (std::is_array_v<T>) {
  418|       |        for (auto& elem : *p) {
  419|       |            scn::detail::destroy_at(&elem);
  420|       |        }
  421|       |    }
  422|  6.92k|    else {
  423|  6.92k|        p->~T();
  424|  6.92k|    }
  425|  6.92k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 6699|  6.92k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  715|  6.11k|    {
  716|  6.11k|        scn::detail::construct_at(unexpected_ptr(),
  717|  6.11k|                                  std::forward<Args>(args)...);
  718|  6.11k|        m_has_value = false;
  719|  6.11k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  692|  6.11k|    {
  693|  6.11k|        return std::move(*unexpected_ptr());
  694|  6.11k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  726|  12.2k|    {
  727|  12.2k|        scn::detail::destroy_at(unexpected_ptr());
  728|  12.2k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEcvS6_Ev:
 8854|  6.92k|    {
 8855|  6.92k|        return m_str;
 8856|  6.92k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6195|  6.92k|{
 6196|  6.92k|    detail::check_scan_arg_types<Args...>();
 6197|  6.92k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  6.92k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEbv:
 5910|  20.7k|{
 5911|  20.7k|    constexpr bool default_constructible_constraint =
 5912|  20.7k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5913|  20.7k|    static_assert(default_constructible_constraint,
 5914|  20.7k|                  "Scan argument types must be default constructible");
 5915|       |
 5916|  20.7k|    constexpr bool destructible_constraint =
 5917|  20.7k|        std::conjunction_v<std::is_destructible<Args>...>;
 5918|  20.7k|    static_assert(destructible_constraint,
 5919|  20.7k|                  "Scan argument types must be Destructible");
 5920|       |
 5921|  20.7k|    constexpr bool non_reference_constraint =
 5922|  20.7k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5923|  20.7k|    static_assert(non_reference_constraint,
 5924|  20.7k|                  "Scan argument types must not be references");
 5925|       |
 5926|  20.7k|    constexpr bool movable_constraint =
 5927|  20.7k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5928|  20.7k|    static_assert(movable_constraint,
 5929|  20.7k|                  "Scan argument types must be move constructible");
 5930|       |
 5931|  20.7k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5931:12): [Folded - Ignored]
  |  Branch (5931:48): [Folded - Ignored]
  ------------------
 5932|  20.7k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5932:12): [Folded - Ignored]
  |  Branch (5932:40): [Folded - Ignored]
  ------------------
 5933|  20.7k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6171|  6.92k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  6.92k|    {
 6173|  6.92k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6180|  6.92k|    {
 6181|  6.92k|        return {detail::make_arg<
 6182|  6.92k|            kind, Context,
 6183|  6.92k|            mapped_type_constant<remove_cvref_t<A>,
 6184|  6.92k|                                 typename Context::char_type>::value>(args)...};
 6185|  6.92k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE28ENSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEvEEPvRT2_:
 5960|  6.92k|{
 5961|  6.92k|    return make_value<Context>(value).ref_value;
 5962|  6.92k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEDaRT0_:
 5895|  6.92k|{
 5896|  6.92k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|  6.92k|                                  needs_context_tag>) {
 5900|  6.92k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|  6.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|  6.92k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 5702|  6.92k|    {                                                                        \
 5703|  6.92k|        return val;                                                          \
 5704|  6.92k|    }
_ZN3scn2v46detail15make_value_implINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEERS9_EEDaOT0_:
 5864|  20.7k|{
 5865|  20.7k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|  20.7k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|  20.7k|    constexpr bool scannable_char =
 5869|  20.7k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|  20.7k|    static_assert(scannable_char,
 5871|  20.7k|                  "Cannot scan an argument of an unsupported character "
 5872|  20.7k|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|  20.7k|    constexpr bool scannable_const =
 5875|  20.7k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|  20.7k|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|  20.7k|    constexpr bool scannable_disabled =
 5879|  20.7k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|  20.7k|    static_assert(scannable_disabled,
 5881|  20.7k|                  "Cannot scan an argument that has been disabled by "
 5882|  20.7k|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|  20.7k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|  20.7k|    static_assert(
 5886|  20.7k|        scannable,
 5887|  20.7k|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|  20.7k|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|  20.7k|    return arg_value{arg};
 5891|  20.7k|}
_ZN3scn2v46detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 5645|  20.7k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5646|  20.7k|    {
 5647|  20.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1828|  7.72k|    {
 1829|  7.72k|        return &value();
 1830|  7.72k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1782|  7.72k|    {
 1783|  7.72k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  7.72k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  7.72k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  7.72k|        return this->get_value();
 1785|  7.72k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEE6valuesEv:
 6475|  20.7k|    {
 6476|  20.7k|        return m_values;
 6477|  20.7k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  6.92k|        : basic_scan_args(store.desc, store.args.data())
 6222|  6.92k|    {
 6223|  6.92k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|  6.92k|        : m_str(r.str)
 8850|  6.92k|    {
 8851|  6.92k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  657|  13.0k|    {
  658|  13.0k|        if (has_value()) {
  ------------------
  |  Branch (658:13): [True: 802, False: 12.2k]
  ------------------
  659|    802|            destroy_value();
  660|    802|        }
  661|  12.2k|        else {
  662|  12.2k|            destroy_unexpected();
  663|  12.2k|        }
  664|  13.0k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIcNS4_IcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNS11_ISS_E4typeEEEE:
 9961|  3.46k|{
 9962|  3.46k|    auto result = make_scan_result<Source, Args...>();
 9963|  3.46k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  3.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  3.46k|                                   make_scan_args(result->values())));
 9965|  3.46k|    return result;
 9966|  3.46k|}
_ZN3scn2v44scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEERS6_vEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 9892|  3.46k|{
 9893|  3.46k|    auto result = make_scan_result<Source, Args...>();
 9894|  3.46k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  3.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  3.46k|                                   make_scan_args(result->values())));
 9896|  3.46k|    return result;
 9897|  3.46k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEEDav:
 9848|  6.92k|{
 9849|  6.92k|    return scan_result_type<Source, Args...>();
 9850|  6.92k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2Ev:
 1565|  6.92k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2Ev:
  441|  6.92k|        : m_value(T{}), m_has_value(true)
  442|  6.92k|    {
  443|  6.92k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2Ev:
 6692|  6.92k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2Ev:
 6466|  6.92k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSJ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISJ_EEONSV_ISP_EE:
 9833|  6.92k|{
 9834|  6.92k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  6.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.11k, False: 802]
  |  |  ------------------
  ------------------
 9835|  6.11k|        out = unexpected(in.error());
 9836|  6.11k|    }
 9837|    802|    else {
 9838|    802|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|    802|    static_cast<    \
  |  | 1109|    802|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|    802|    }
 9840|  6.92k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1629|  6.11k|        : base(unexpect, std::move(e.error())),
 1630|  6.11k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  6.11k|    {
 1632|  6.11k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  464|  6.11k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  6.11k|          m_has_value(false)
  466|  6.11k|    {
  467|  6.11k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  6.11k|    {
 1330|  6.11k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEaSEOSH_:
 1570|  6.11k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvEaSEOSI_:
  916|  6.11k|    {
  917|  6.11k|        assign_common(std::move(other));
  918|  6.11k|        return *this;
  919|  6.11k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvE13assign_commonISI_EEvOT_:
  963|  6.11k|    {
  964|  6.11k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 6.11k, False: 0]
  ------------------
  965|  6.11k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 6.11k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  6.11k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  6.11k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  19.9k|    {
  505|  19.9k|        return m_has_value;
  506|  19.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  7.72k|    {
  471|  7.72k|        return m_value;
  472|  7.72k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISI_EEvOT_:
 1059|  6.11k|    {
 1060|  6.11k|        this->destroy_value();
 1061|  6.11k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  6.11k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  6.11k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISH_EEEEEvDpOT_:
  518|  6.11k|    {
  519|  6.11k|        scn::detail::construct_at(&get_unexpected(),
  520|  6.11k|                                  std::forward<Args>(args)...);
  521|  6.11k|        m_has_value = false;
  522|  6.11k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  6.11k|    {
  488|  6.11k|        return m_unexpected;
  489|  6.11k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  6.11k|    {
  496|  6.11k|        return std::move(m_unexpected);
  497|  6.11k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEcvS6_Ev:
 8854|  6.92k|    {
 8855|  6.92k|        return m_str;
 8856|  6.92k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6195|  6.92k|{
 6196|  6.92k|    detail::check_scan_arg_types<Args...>();
 6197|  6.92k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  6.92k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEbv:
 5910|  6.92k|{
 5911|  6.92k|    constexpr bool default_constructible_constraint =
 5912|  6.92k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5913|  6.92k|    static_assert(default_constructible_constraint,
 5914|  6.92k|                  "Scan argument types must be default constructible");
 5915|       |
 5916|  6.92k|    constexpr bool destructible_constraint =
 5917|  6.92k|        std::conjunction_v<std::is_destructible<Args>...>;
 5918|  6.92k|    static_assert(destructible_constraint,
 5919|  6.92k|                  "Scan argument types must be Destructible");
 5920|       |
 5921|  6.92k|    constexpr bool non_reference_constraint =
 5922|  6.92k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5923|  6.92k|    static_assert(non_reference_constraint,
 5924|  6.92k|                  "Scan argument types must not be references");
 5925|       |
 5926|  6.92k|    constexpr bool movable_constraint =
 5927|  6.92k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5928|  6.92k|    static_assert(movable_constraint,
 5929|  6.92k|                  "Scan argument types must be move constructible");
 5930|       |
 5931|  6.92k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5931:12): [Folded - Ignored]
  |  Branch (5931:48): [Folded - Ignored]
  ------------------
 5932|  6.92k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5932:12): [Folded - Ignored]
  |  Branch (5932:40): [Folded - Ignored]
  ------------------
 5933|  6.92k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEC2ERNS6_5tupleIJSA_EEE:
 6171|  6.92k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  6.92k|    {
 6173|  6.92k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEE12make_argptrsIJSA_EEENS6_5arrayIPvLm1EEEDpRT_:
 6180|  6.92k|    {
 6181|  6.92k|        return {detail::make_arg<
 6182|  6.92k|            kind, Context,
 6183|  6.92k|            mapped_type_constant<remove_cvref_t<A>,
 6184|  6.92k|                                 typename Context::char_type>::value>(args)...};
 6185|  6.92k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE26ENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEvEEPvRT2_:
 5960|  6.92k|{
 5961|  6.92k|    return make_value<Context>(value).ref_value;
 5962|  6.92k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDaRT0_:
 5895|  6.92k|{
 5896|  6.92k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|  6.92k|                                  needs_context_tag>) {
 5900|  6.92k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|  6.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|  6.92k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 5702|  6.92k|    {                                                                        \
 5703|  6.92k|        return val;                                                          \
 5704|  6.92k|    }
_ZN3scn2v46detail15make_value_implINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEERS7_EEDaOT0_:
 5864|  6.92k|{
 5865|  6.92k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|  6.92k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|  6.92k|    constexpr bool scannable_char =
 5869|  6.92k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|  6.92k|    static_assert(scannable_char,
 5871|  6.92k|                  "Cannot scan an argument of an unsupported character "
 5872|  6.92k|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|  6.92k|    constexpr bool scannable_const =
 5875|  6.92k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|  6.92k|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|  6.92k|    constexpr bool scannable_disabled =
 5879|  6.92k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|  6.92k|    static_assert(scannable_disabled,
 5881|  6.92k|                  "Cannot scan an argument that has been disabled by "
 5882|  6.92k|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|  6.92k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|  6.92k|    static_assert(
 5886|  6.92k|        scannable,
 5887|  6.92k|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|  6.92k|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|  6.92k|    return arg_value{arg};
 5891|  6.92k|}
_ZN3scn2v46detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 5645|  6.92k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5646|  6.92k|    {
 5647|  6.92k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEptEv:
 1828|  7.72k|    {
 1829|  7.72k|        return &value();
 1830|  7.72k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1782|  7.72k|    {
 1783|  7.72k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  7.72k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  7.72k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  7.72k|        return this->get_value();
 1785|  7.72k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEE6valuesEv:
 6475|  6.92k|    {
 6476|  6.92k|        return m_values;
 6477|  6.92k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  6.92k|        : basic_scan_args(store.desc, store.args.data())
 6222|  6.92k|    {
 6223|  6.92k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|  6.92k|        : m_str(r.str)
 8850|  6.92k|    {
 8851|  6.92k|    }
_ZN3scn2v44scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeERS6_vvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 9961|  3.46k|{
 9962|  3.46k|    auto result = make_scan_result<Source, Args...>();
 9963|  3.46k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  3.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  3.46k|                                   make_scan_args(result->values())));
 9965|  3.46k|    return result;
 9966|  3.46k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEEDav:
 9848|  13.8k|{
 9849|  13.8k|    return scan_result_type<Source, Args...>();
 9850|  13.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2Ev:
 1565|  13.8k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2Ev:
  441|  13.8k|        : m_value(T{}), m_has_value(true)
  442|  13.8k|    {
  443|  13.8k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJwEEC2Ev:
 6692|  13.8k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2Ev:
 6535|   124k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2Ev:
 3473|   124k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJwEEC2Ev:
 6466|  13.8k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9833|  13.8k|{
 9834|  13.8k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 13.5k, False: 264]
  |  |  ------------------
  ------------------
 9835|  13.5k|        out = unexpected(in.error());
 9836|  13.5k|    }
 9837|    264|    else {
 9838|    264|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|    264|    static_cast<    \
  |  | 1109|    264|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|    264|    }
 9840|  13.8k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1753|   124k|    {
 1754|   124k|        return has_value();
 1755|   124k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  504|   249k|    {
  505|   249k|        return m_has_value;
  506|   249k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1759|   122k|    {
 1760|   122k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   122k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   122k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   122k|        return this->get_unexpected().error();
 1762|   122k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|   122k|    {
  488|   122k|        return m_unexpected;
  489|   122k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1629|  13.5k|        : base(unexpect, std::move(e.error())),
 1630|  13.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  13.5k|    {
 1632|  13.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|  13.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  13.5k|          m_has_value(false)
  466|  13.5k|    {
  467|  13.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  13.5k|    {
 1330|  13.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEaSEOSC_:
 1570|  13.5k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorEvEaSEOSD_:
  916|  13.5k|    {
  917|  13.5k|        assign_common(std::move(other));
  918|  13.5k|        return *this;
  919|  13.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  963|  13.5k|    {
  964|  13.5k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 13.5k, False: 0]
  ------------------
  965|  13.5k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 13.5k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  13.5k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  13.5k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  41.2k|    {
  505|  41.2k|        return m_has_value;
  506|  41.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  14.1k|    {
  471|  14.1k|        return m_value;
  472|  14.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1059|  13.5k|    {
 1060|  13.5k|        this->destroy_value();
 1061|  13.5k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  13.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  13.5k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  518|  13.5k|    {
  519|  13.5k|        scn::detail::construct_at(&get_unexpected(),
  520|  13.5k|                                  std::forward<Args>(args)...);
  521|  13.5k|        m_has_value = false;
  522|  13.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  13.5k|    {
  488|  13.5k|        return m_unexpected;
  489|  13.5k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  13.5k|    {
  496|  13.5k|        return std::move(m_unexpected);
  497|  13.5k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE9set_rangeIS9_EEvOT_:
 6566|  2.15k|    {
 6567|  2.15k|        m_range = std::forward<Other>(r);
 6568|  2.15k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1808|  2.15k|    {
 1809|  2.15k|        return value();
 1810|  2.15k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1782|  2.15k|    {
 1783|  2.15k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  2.15k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.15k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  2.15k|        return this->get_value();
 1785|  2.15k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  470|  2.15k|    {
  471|  2.15k|        return m_value;
  472|  2.15k|    }
_ZN3scn2v46detail13vscan_genericIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESN_EEEE:
 9591|  62.2k|{
 9592|  62.2k|    auto buffer = make_scan_buffer(range);
 9593|       |
 9594|  62.2k|    auto result = vscan_impl(buffer, format, args);
 9595|  62.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  62.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 61.2k, False: 1.07k]
  |  |  ------------------
  ------------------
 9596|  61.2k|        return unexpected(result.error());
 9597|  61.2k|    }
 9598|  1.07k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  1.07k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9599|  62.2k|}
_ZN3scn2v46detail16make_scan_bufferINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRKT_:
 5398|   124k|{
 5399|   124k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5400|       |
 5401|   124k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5402|   124k|                  "\n"
 5403|   124k|                  "Unsupported range type given as input to a scanning "
 5404|   124k|                  "function.\n"
 5405|   124k|                  "A range needs to have a character type (value type) "
 5406|   124k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5407|   124k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5408|   124k|                  "to be included.\n"
 5409|   124k|                  "See the scnlib documentation for more details.");
 5410|   124k|    static_assert(
 5411|   124k|        !std::is_same_v<T, custom_char_traits>,
 5412|   124k|        "\n"
 5413|   124k|        "Unsupported range type given as input to a scanning "
 5414|   124k|        "function.\n"
 5415|   124k|        "String types (std::basic_string, and std::basic_string_view) "
 5416|   124k|        "need to use std::char_traits. Strings with custom Traits are "
 5417|   124k|        "not supported.");
 5418|   124k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5419|   124k|                  "\n"
 5420|   124k|                  "Unsupported range type given as input to a scanning "
 5421|   124k|                  "function.\n"
 5422|   124k|                  "file_marker_found cannot be used as an "
 5423|   124k|                  "source range type to scn::scan.\n"
 5424|   124k|                  "To read from stdin, use scn::input or scn::prompt, "
 5425|   124k|                  "and do not provide an explicit source range, "
 5426|   124k|                  "or use scn::scan with a FILE* directly.");
 5427|   124k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5428|   124k|                  "\n"
 5429|   124k|                  "Unsupported range type given as input to a scanning "
 5430|   124k|                  "function.\n"
 5431|   124k|                  "In order to be scannable, a range needs to satisfy "
 5432|   124k|                  "`forward_range`. `input_range` is not sufficient.");
 5433|   124k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5434|   124k|                  "\n"
 5435|   124k|                  "Unsupported range type given as input to a scanning "
 5436|   124k|                  "function.\n"
 5437|   124k|                  "A range needs to model forward_range and have a valid "
 5438|   124k|                  "character type (char or wchar_t) to be scannable.\n"
 5439|   124k|                  "Examples of scannable ranges are std::string, "
 5440|   124k|                  "std::string_view, "
 5441|   124k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5442|   124k|                  "See the scnlib documentation for more details.");
 5443|       |
 5444|   124k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5445|   124k|}
_ZN3scn2v46detail17_make_scan_buffer4implIwEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 5290|   124k|{
 5291|   124k|    if constexpr (is_valid_char_type<CharT>) {
 5292|   124k|        return r;
 5293|       |        // return make_string_scan_buffer(r);
 5294|       |    }
 5295|       |    else {
 5296|       |        return invalid_char_type{};
 5297|       |    }
 5298|   124k|}
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1629|   122k|        : base(unexpect, std::move(e.error())),
 1630|   122k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   122k|    {
 1632|   122k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  464|   122k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   122k|          m_has_value(false)
  466|   122k|    {
  467|   122k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   124k|    {
 1330|   124k|    }
_ZN3scn2v46detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 6796|  2.15k|{
 6797|       |    if constexpr (ranges::random_access_iterator<
 6798|  2.15k|                      ranges::iterator_t<SourceRange>>) {
 6799|  2.15k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6800|       |    }
 6801|       |    else {
 6802|       |        auto it = ranges::begin(source);
 6803|       |        while (n > 0) {
 6804|       |            --n;
 6805|       |            ++it;
 6806|       |        }
 6807|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6808|       |    }
 6809|  2.15k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  2.15k|    {
 2883|  2.15k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  2.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  2.15k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  2.15k|    {
 2864|  2.15k|        return decay_copy(t.begin());
 2865|  2.15k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 2107|   265k|{
 2108|   265k|    return SCN_FWD(t);
  ------------------
  |  | 1110|   265k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|   265k|}
_ZN3scn2v46detail27make_vscan_result_range_endINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRT_:
 6783|  2.15k|{
 6784|  2.15k|    return ranges::end(source);
 6785|  2.15k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|  2.15k|    {
 2940|  2.15k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  2.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  2.15k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|  2.15k|    {
 2922|  2.15k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|  2.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|  2.15k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3478|   411k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   411k|    static_cast<    \
  |  | 1109|   411k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   411k|    static_cast<    \
  |  | 1109|   411k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|   411k|    {
 3480|   411k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1583|  2.15k|        : base(std::in_place, std::forward<U>(val)),
 1584|  2.15k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  2.15k|    {
 1586|  2.15k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  455|  2.15k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  2.15k|    {
  457|  2.15k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEcvS6_Ev:
 8854|  13.8k|    {
 8855|  13.8k|        return m_str;
 8856|  13.8k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJwEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|  13.8k|{
 6196|  13.8k|    detail::check_scan_arg_types<Args...>();
 6197|  13.8k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  13.8k|}
_ZN3scn2v46detail20check_scan_arg_typesIJwEEEbv:
 5910|  13.8k|{
 5911|  13.8k|    constexpr bool default_constructible_constraint =
 5912|  13.8k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5913|  13.8k|    static_assert(default_constructible_constraint,
 5914|  13.8k|                  "Scan argument types must be default constructible");
 5915|       |
 5916|  13.8k|    constexpr bool destructible_constraint =
 5917|  13.8k|        std::conjunction_v<std::is_destructible<Args>...>;
 5918|  13.8k|    static_assert(destructible_constraint,
 5919|  13.8k|                  "Scan argument types must be Destructible");
 5920|       |
 5921|  13.8k|    constexpr bool non_reference_constraint =
 5922|  13.8k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5923|  13.8k|    static_assert(non_reference_constraint,
 5924|  13.8k|                  "Scan argument types must not be references");
 5925|       |
 5926|  13.8k|    constexpr bool movable_constraint =
 5927|  13.8k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5928|  13.8k|    static_assert(movable_constraint,
 5929|  13.8k|                  "Scan argument types must be move constructible");
 5930|       |
 5931|  13.8k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5931:12): [Folded - Ignored]
  |  Branch (5931:48): [Folded - Ignored]
  ------------------
 5932|  13.8k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5932:12): [Folded - Ignored]
  |  Branch (5932:40): [Folded - Ignored]
  ------------------
 5933|  13.8k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJwEEC2ERNSt3__15tupleIJwEEE:
 6171|  13.8k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  13.8k|    {
 6173|  13.8k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJwEE12make_argptrsIJwEEENSt3__15arrayIPvLm1EEEDpRT_:
 6180|  13.8k|    {
 6181|  13.8k|        return {detail::make_arg<
 6182|  13.8k|            kind, Context,
 6183|  13.8k|            mapped_type_constant<remove_cvref_t<A>,
 6184|  13.8k|                                 typename Context::char_type>::value>(args)...};
 6185|  13.8k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE15EwvEEPvRT2_:
 5960|  13.8k|{
 5961|  13.8k|    return make_value<Context>(value).ref_value;
 5962|  13.8k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEwEEDaRT0_:
 5895|  13.8k|{
 5896|  13.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|  13.8k|                                  needs_context_tag>) {
 5900|  13.8k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|  13.8k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERw:
 5702|  13.8k|    {                                                                        \
 5703|  13.8k|        return val;                                                          \
 5704|  13.8k|    }
_ZN3scn2v46detail15make_value_implIwRwEEDaOT0_:
 5864|  13.8k|{
 5865|  13.8k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|  13.8k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|  13.8k|    constexpr bool scannable_char =
 5869|  13.8k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|  13.8k|    static_assert(scannable_char,
 5871|  13.8k|                  "Cannot scan an argument of an unsupported character "
 5872|  13.8k|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|  13.8k|    constexpr bool scannable_const =
 5875|  13.8k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|  13.8k|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|  13.8k|    constexpr bool scannable_disabled =
 5879|  13.8k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|  13.8k|    static_assert(scannable_disabled,
 5881|  13.8k|                  "Cannot scan an argument that has been disabled by "
 5882|  13.8k|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|  13.8k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|  13.8k|    static_assert(
 5886|  13.8k|        scannable,
 5887|  13.8k|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|  13.8k|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|  13.8k|    return arg_value{arg};
 5891|  13.8k|}
_ZN3scn2v46detail9arg_valueC2IwEERT_:
 5645|  13.8k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5646|  13.8k|    {
 5647|  13.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEptEv:
 1828|  14.1k|    {
 1829|  14.1k|        return &value();
 1830|  14.1k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|  14.1k|    {
 1783|  14.1k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  14.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  14.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  14.1k|        return this->get_value();
 1785|  14.1k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJwEE6valuesEv:
 6475|  13.8k|    {
 6476|  13.8k|        return m_values;
 6477|  13.8k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJwEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  13.8k|        : basic_scan_args(store.desc, store.args.data())
 6222|  13.8k|    {
 6223|  13.8k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2EmPKPv:
 6273|   124k|        : m_desc(desc), m_builtin_values(data)
 6274|   124k|    {
 6275|   124k|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 8536|   124k|{
 8537|   124k|    return s;
 8538|   124k|}
_ZN3scn2v46detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 8508|   124k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|  13.8k|        : m_str(r.str)
 8850|  13.8k|    {
 8851|  13.8k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESR_EEEE:
 9607|  62.2k|{
 9608|  62.2k|#if !SCN_DISABLE_LOCALE
 9609|  62.2k|    auto buffer = detail::make_scan_buffer(range);
 9610|       |
 9611|  62.2k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9612|  62.2k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9613|  62.2k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9614|       |
 9615|  62.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  62.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 61.2k, False: 1.07k]
  |  |  ------------------
  ------------------
 9616|  61.2k|        return unexpected(result.error());
 9617|  61.2k|    }
 9618|  1.07k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  1.07k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9619|       |#else
 9620|       |    static_assert(dependent_false<Locale>::value,
 9621|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9622|       |
 9623|       |    return {};
 9624|       |#endif
 9625|  62.2k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEEDav:
 9848|  13.8k|{
 9849|  13.8k|    return scan_result_type<Source, Args...>();
 9850|  13.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2Ev:
 1565|  13.8k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2Ev:
  441|  13.8k|        : m_value(T{}), m_has_value(true)
  442|  13.8k|    {
  443|  13.8k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEC2Ev:
 6692|  13.8k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9833|  13.8k|{
 9834|  13.8k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 13.8k, False: 40]
  |  |  ------------------
  ------------------
 9835|  13.8k|        out = unexpected(in.error());
 9836|  13.8k|    }
 9837|     40|    else {
 9838|     40|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|     40|    static_cast<    \
  |  | 1109|     40|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|     40|    }
 9840|  13.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1629|  13.8k|        : base(unexpect, std::move(e.error())),
 1630|  13.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  13.8k|    {
 1632|  13.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|  13.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  13.8k|          m_has_value(false)
  466|  13.8k|    {
  467|  13.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  13.8k|    {
 1330|  13.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEaSEOSC_:
 1570|  13.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorEvEaSEOSD_:
  916|  13.8k|    {
  917|  13.8k|        assign_common(std::move(other));
  918|  13.8k|        return *this;
  919|  13.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  963|  13.8k|    {
  964|  13.8k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 13.8k, False: 0]
  ------------------
  965|  13.8k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 13.8k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  13.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  13.8k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  41.4k|    {
  505|  41.4k|        return m_has_value;
  506|  41.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  13.8k|    {
  471|  13.8k|        return m_value;
  472|  13.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1059|  13.8k|    {
 1060|  13.8k|        this->destroy_value();
 1061|  13.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  13.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  13.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  518|  13.8k|    {
  519|  13.8k|        scn::detail::construct_at(&get_unexpected(),
  520|  13.8k|                                  std::forward<Args>(args)...);
  521|  13.8k|        m_has_value = false;
  522|  13.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  13.8k|    {
  488|  13.8k|        return m_unexpected;
  489|  13.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  13.8k|    {
  496|  13.8k|        return std::move(m_unexpected);
  497|  13.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEcvS6_Ev:
 8854|  13.8k|    {
 8855|  13.8k|        return m_str;
 8856|  13.8k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJiEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|  13.8k|{
 6196|  13.8k|    detail::check_scan_arg_types<Args...>();
 6197|  13.8k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  13.8k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJiEEC2ERNSt3__15tupleIJiEEE:
 6171|  13.8k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  13.8k|    {
 6173|  13.8k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 6180|  13.8k|    {
 6181|  13.8k|        return {detail::make_arg<
 6182|  13.8k|            kind, Context,
 6183|  13.8k|            mapped_type_constant<remove_cvref_t<A>,
 6184|  13.8k|                                 typename Context::char_type>::value>(args)...};
 6185|  13.8k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE3EivEEPvRT2_:
 5960|  13.8k|{
 5961|  13.8k|    return make_value<Context>(value).ref_value;
 5962|  13.8k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEiEEDaRT0_:
 5895|  13.8k|{
 5896|  13.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|  13.8k|                                  needs_context_tag>) {
 5900|  13.8k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|  13.8k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERi:
 5702|  13.8k|    {                                                                        \
 5703|  13.8k|        return val;                                                          \
 5704|  13.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEptEv:
 1828|  13.8k|    {
 1829|  13.8k|        return &value();
 1830|  13.8k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|  13.8k|    {
 1783|  13.8k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  13.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  13.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  13.8k|        return this->get_value();
 1785|  13.8k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJiEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  13.8k|        : basic_scan_args(store.desc, store.args.data())
 6222|  13.8k|    {
 6223|  13.8k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|  13.8k|        : m_str(r.str)
 8850|  13.8k|    {
 8851|  13.8k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEEDav:
 9848|  13.8k|{
 9849|  13.8k|    return scan_result_type<Source, Args...>();
 9850|  13.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2Ev:
 1565|  13.8k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2Ev:
  441|  13.8k|        : m_value(T{}), m_has_value(true)
  442|  13.8k|    {
  443|  13.8k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEC2Ev:
 6692|  13.8k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9833|  13.8k|{
 9834|  13.8k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 13.8k, False: 40]
  |  |  ------------------
  ------------------
 9835|  13.8k|        out = unexpected(in.error());
 9836|  13.8k|    }
 9837|     40|    else {
 9838|     40|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|     40|    static_cast<    \
  |  | 1109|     40|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|     40|    }
 9840|  13.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1629|  13.8k|        : base(unexpect, std::move(e.error())),
 1630|  13.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  13.8k|    {
 1632|  13.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|  13.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  13.8k|          m_has_value(false)
  466|  13.8k|    {
  467|  13.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  13.8k|    {
 1330|  13.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEaSEOSC_:
 1570|  13.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorEvEaSEOSD_:
  916|  13.8k|    {
  917|  13.8k|        assign_common(std::move(other));
  918|  13.8k|        return *this;
  919|  13.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  963|  13.8k|    {
  964|  13.8k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 13.8k, False: 0]
  ------------------
  965|  13.8k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 13.8k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  13.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  13.8k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  41.4k|    {
  505|  41.4k|        return m_has_value;
  506|  41.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  13.8k|    {
  471|  13.8k|        return m_value;
  472|  13.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1059|  13.8k|    {
 1060|  13.8k|        this->destroy_value();
 1061|  13.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  13.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  13.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  518|  13.8k|    {
  519|  13.8k|        scn::detail::construct_at(&get_unexpected(),
  520|  13.8k|                                  std::forward<Args>(args)...);
  521|  13.8k|        m_has_value = false;
  522|  13.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  13.8k|    {
  488|  13.8k|        return m_unexpected;
  489|  13.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  13.8k|    {
  496|  13.8k|        return std::move(m_unexpected);
  497|  13.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEcvS6_Ev:
 8854|  13.8k|    {
 8855|  13.8k|        return m_str;
 8856|  13.8k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJjEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|  13.8k|{
 6196|  13.8k|    detail::check_scan_arg_types<Args...>();
 6197|  13.8k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  13.8k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJjEEC2ERNSt3__15tupleIJjEEE:
 6171|  13.8k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  13.8k|    {
 6173|  13.8k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 6180|  13.8k|    {
 6181|  13.8k|        return {detail::make_arg<
 6182|  13.8k|            kind, Context,
 6183|  13.8k|            mapped_type_constant<remove_cvref_t<A>,
 6184|  13.8k|                                 typename Context::char_type>::value>(args)...};
 6185|  13.8k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE9EjvEEPvRT2_:
 5960|  13.8k|{
 5961|  13.8k|    return make_value<Context>(value).ref_value;
 5962|  13.8k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEjEEDaRT0_:
 5895|  13.8k|{
 5896|  13.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|  13.8k|                                  needs_context_tag>) {
 5900|  13.8k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|  13.8k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERj:
 5702|  13.8k|    {                                                                        \
 5703|  13.8k|        return val;                                                          \
 5704|  13.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEptEv:
 1828|  13.8k|    {
 1829|  13.8k|        return &value();
 1830|  13.8k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|  13.8k|    {
 1783|  13.8k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  13.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  13.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  13.8k|        return this->get_value();
 1785|  13.8k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJjEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  13.8k|        : basic_scan_args(store.desc, store.args.data())
 6222|  13.8k|    {
 6223|  13.8k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|  13.8k|        : m_str(r.str)
 8850|  13.8k|    {
 8851|  13.8k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEEDav:
 9848|  13.8k|{
 9849|  13.8k|    return scan_result_type<Source, Args...>();
 9850|  13.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2Ev:
 1565|  13.8k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  441|  13.8k|        : m_value(T{}), m_has_value(true)
  442|  13.8k|    {
  443|  13.8k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2Ev:
 6692|  13.8k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9833|  13.8k|{
 9834|  13.8k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 13.7k, False: 42]
  |  |  ------------------
  ------------------
 9835|  13.7k|        out = unexpected(in.error());
 9836|  13.7k|    }
 9837|     42|    else {
 9838|     42|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|     42|    static_cast<    \
  |  | 1109|     42|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|     42|    }
 9840|  13.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1629|  13.7k|        : base(unexpect, std::move(e.error())),
 1630|  13.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  13.7k|    {
 1632|  13.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|  13.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  13.7k|          m_has_value(false)
  466|  13.7k|    {
  467|  13.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  13.7k|    {
 1330|  13.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEaSEOSC_:
 1570|  13.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvEaSEOSD_:
  916|  13.7k|    {
  917|  13.7k|        assign_common(std::move(other));
  918|  13.7k|        return *this;
  919|  13.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  963|  13.7k|    {
  964|  13.7k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 13.7k, False: 0]
  ------------------
  965|  13.7k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 13.7k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  13.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  13.7k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  41.4k|    {
  505|  41.4k|        return m_has_value;
  506|  41.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  13.8k|    {
  471|  13.8k|        return m_value;
  472|  13.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1059|  13.7k|    {
 1060|  13.7k|        this->destroy_value();
 1061|  13.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  13.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  13.7k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  518|  13.7k|    {
  519|  13.7k|        scn::detail::construct_at(&get_unexpected(),
  520|  13.7k|                                  std::forward<Args>(args)...);
  521|  13.7k|        m_has_value = false;
  522|  13.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  13.7k|    {
  488|  13.7k|        return m_unexpected;
  489|  13.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  13.7k|    {
  496|  13.7k|        return std::move(m_unexpected);
  497|  13.7k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEcvS6_Ev:
 8854|  13.8k|    {
 8855|  13.8k|        return m_str;
 8856|  13.8k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJdEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|  13.8k|{
 6196|  13.8k|    detail::check_scan_arg_types<Args...>();
 6197|  13.8k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  13.8k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJdEEC2ERNSt3__15tupleIJdEEE:
 6171|  13.8k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  13.8k|    {
 6173|  13.8k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 6180|  13.8k|    {
 6181|  13.8k|        return {detail::make_arg<
 6182|  13.8k|            kind, Context,
 6183|  13.8k|            mapped_type_constant<remove_cvref_t<A>,
 6184|  13.8k|                                 typename Context::char_type>::value>(args)...};
 6185|  13.8k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE19EdvEEPvRT2_:
 5960|  13.8k|{
 5961|  13.8k|    return make_value<Context>(value).ref_value;
 5962|  13.8k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEdEEDaRT0_:
 5895|  13.8k|{
 5896|  13.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|  13.8k|                                  needs_context_tag>) {
 5900|  13.8k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|  13.8k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERd:
 5702|  13.8k|    {                                                                        \
 5703|  13.8k|        return val;                                                          \
 5704|  13.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEptEv:
 1828|  13.8k|    {
 1829|  13.8k|        return &value();
 1830|  13.8k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|  13.8k|    {
 1783|  13.8k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  13.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  13.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  13.8k|        return this->get_value();
 1785|  13.8k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJdEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  13.8k|        : basic_scan_args(store.desc, store.args.data())
 6222|  13.8k|    {
 6223|  13.8k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|  13.8k|        : m_str(r.str)
 8850|  13.8k|    {
 8851|  13.8k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEEDav:
 9848|  13.8k|{
 9849|  13.8k|    return scan_result_type<Source, Args...>();
 9850|  13.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEC2Ev:
 1565|  13.8k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2Ev:
  441|  13.8k|        : m_value(T{}), m_has_value(true)
  442|  13.8k|    {
  443|  13.8k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJbEEC2Ev:
 6692|  13.8k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9833|  13.8k|{
 9834|  13.8k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 13.8k, False: 40]
  |  |  ------------------
  ------------------
 9835|  13.8k|        out = unexpected(in.error());
 9836|  13.8k|    }
 9837|     40|    else {
 9838|     40|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|     40|    static_cast<    \
  |  | 1109|     40|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|     40|    }
 9840|  13.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1629|  13.8k|        : base(unexpect, std::move(e.error())),
 1630|  13.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  13.8k|    {
 1632|  13.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|  13.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  13.8k|          m_has_value(false)
  466|  13.8k|    {
  467|  13.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  13.8k|    {
 1330|  13.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEaSEOSC_:
 1570|  13.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorEvEaSEOSD_:
  916|  13.8k|    {
  917|  13.8k|        assign_common(std::move(other));
  918|  13.8k|        return *this;
  919|  13.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  963|  13.8k|    {
  964|  13.8k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 13.8k, False: 0]
  ------------------
  965|  13.8k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 13.8k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  13.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  13.8k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  41.4k|    {
  505|  41.4k|        return m_has_value;
  506|  41.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  13.8k|    {
  471|  13.8k|        return m_value;
  472|  13.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1059|  13.8k|    {
 1060|  13.8k|        this->destroy_value();
 1061|  13.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  13.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  13.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  518|  13.8k|    {
  519|  13.8k|        scn::detail::construct_at(&get_unexpected(),
  520|  13.8k|                                  std::forward<Args>(args)...);
  521|  13.8k|        m_has_value = false;
  522|  13.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  13.8k|    {
  488|  13.8k|        return m_unexpected;
  489|  13.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  13.8k|    {
  496|  13.8k|        return std::move(m_unexpected);
  497|  13.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEcvS6_Ev:
 8854|  13.8k|    {
 8855|  13.8k|        return m_str;
 8856|  13.8k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJbEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|  13.8k|{
 6196|  13.8k|    detail::check_scan_arg_types<Args...>();
 6197|  13.8k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  13.8k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJbEEC2ERNSt3__15tupleIJbEEE:
 6171|  13.8k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  13.8k|    {
 6173|  13.8k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 6180|  13.8k|    {
 6181|  13.8k|        return {detail::make_arg<
 6182|  13.8k|            kind, Context,
 6183|  13.8k|            mapped_type_constant<remove_cvref_t<A>,
 6184|  13.8k|                                 typename Context::char_type>::value>(args)...};
 6185|  13.8k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE13EbvEEPvRT2_:
 5960|  13.8k|{
 5961|  13.8k|    return make_value<Context>(value).ref_value;
 5962|  13.8k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEbEEDaRT0_:
 5895|  13.8k|{
 5896|  13.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|  13.8k|                                  needs_context_tag>) {
 5900|  13.8k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|  13.8k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERb:
 5702|  13.8k|    {                                                                        \
 5703|  13.8k|        return val;                                                          \
 5704|  13.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEptEv:
 1828|  13.8k|    {
 1829|  13.8k|        return &value();
 1830|  13.8k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|  13.8k|    {
 1783|  13.8k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  13.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  13.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  13.8k|        return this->get_value();
 1785|  13.8k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJbEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  13.8k|        : basic_scan_args(store.desc, store.args.data())
 6222|  13.8k|    {
 6223|  13.8k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|  13.8k|        : m_str(r.str)
 8850|  13.8k|    {
 8851|  13.8k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEEDav:
 9848|  13.8k|{
 9849|  13.8k|    return scan_result_type<Source, Args...>();
 9850|  13.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEC2Ev:
 1565|  13.8k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2Ev:
  441|  13.8k|        : m_value(T{}), m_has_value(true)
  442|  13.8k|    {
  443|  13.8k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJPvEEC2Ev:
 6692|  13.8k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELSA_0EEEvRNS0_13scan_expectedISG_EEONSR_ISM_EE:
 9833|  13.8k|{
 9834|  13.8k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 13.8k, False: 18]
  |  |  ------------------
  ------------------
 9835|  13.8k|        out = unexpected(in.error());
 9836|  13.8k|    }
 9837|     18|    else {
 9838|     18|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|     18|    static_cast<    \
  |  | 1109|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|     18|    }
 9840|  13.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELSA_0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSA_0EEEONS0_10unexpectedISH_EE:
 1629|  13.8k|        : base(unexpect, std::move(e.error())),
 1630|  13.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  13.8k|    {
 1632|  13.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  464|  13.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  13.8k|          m_has_value(false)
  466|  13.8k|    {
  467|  13.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  13.8k|    {
 1330|  13.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEaSEOSD_:
 1570|  13.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorEvEaSEOSE_:
  916|  13.8k|    {
  917|  13.8k|        assign_common(std::move(other));
  918|  13.8k|        return *this;
  919|  13.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  963|  13.8k|    {
  964|  13.8k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 13.8k, False: 0]
  ------------------
  965|  13.8k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 13.8k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  13.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  13.8k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  41.5k|    {
  505|  41.5k|        return m_has_value;
  506|  41.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  13.8k|    {
  471|  13.8k|        return m_value;
  472|  13.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1059|  13.8k|    {
 1060|  13.8k|        this->destroy_value();
 1061|  13.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  13.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  13.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  518|  13.8k|    {
  519|  13.8k|        scn::detail::construct_at(&get_unexpected(),
  520|  13.8k|                                  std::forward<Args>(args)...);
  521|  13.8k|        m_has_value = false;
  522|  13.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  13.8k|    {
  488|  13.8k|        return m_unexpected;
  489|  13.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  13.8k|    {
  496|  13.8k|        return std::move(m_unexpected);
  497|  13.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEcvS6_Ev:
 8854|  13.8k|    {
 8855|  13.8k|        return m_str;
 8856|  13.8k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJPvEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|  13.8k|{
 6196|  13.8k|    detail::check_scan_arg_types<Args...>();
 6197|  13.8k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  13.8k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJPvEEC2ERNSt3__15tupleIJS6_EEE:
 6171|  13.8k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  13.8k|    {
 6173|  13.8k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJPvEE12make_argptrsIJS6_EEENSt3__15arrayIS6_Lm1EEEDpRT_:
 6180|  13.8k|    {
 6181|  13.8k|        return {detail::make_arg<
 6182|  13.8k|            kind, Context,
 6183|  13.8k|            mapped_type_constant<remove_cvref_t<A>,
 6184|  13.8k|                                 typename Context::char_type>::value>(args)...};
 6185|  13.8k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE17EPvvEES8_RT2_:
 5960|  13.8k|{
 5961|  13.8k|    return make_value<Context>(value).ref_value;
 5962|  13.8k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEPvEEDaRT0_:
 5895|  13.8k|{
 5896|  13.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|  13.8k|                                  needs_context_tag>) {
 5900|  13.8k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|  13.8k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERPv:
 5702|  13.8k|    {                                                                        \
 5703|  13.8k|        return val;                                                          \
 5704|  13.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEptEv:
 1828|  13.8k|    {
 1829|  13.8k|        return &value();
 1830|  13.8k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELSA_0EEERSH_v:
 1782|  13.8k|    {
 1783|  13.8k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  13.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  13.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  13.8k|        return this->get_value();
 1785|  13.8k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJPvEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  13.8k|        : basic_scan_args(store.desc, store.args.data())
 6222|  13.8k|    {
 6223|  13.8k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|  13.8k|        : m_str(r.str)
 8850|  13.8k|    {
 8851|  13.8k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEEDav:
 9848|  13.8k|{
 9849|  13.8k|    return scan_result_type<Source, Args...>();
 9850|  13.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2Ev:
 1565|  13.8k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2Ev:
  626|  13.8k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  627|  13.8k|    {
  628|  13.8k|        construct();
  629|  13.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  708|  13.8k|    {
  709|  13.8k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  710|  13.8k|        m_has_value = true;
  711|  13.8k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJEEEPT_SK_DpOT0_:
  410|  13.8k|{
  411|  13.8k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|  13.8k|        T(std::forward<Args>(args)...);
  413|  13.8k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2Ev:
 6692|  13.8k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  732|  42.0k|    {
  733|  42.0k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1074|  42.0k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  734|  42.0k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9833|  13.8k|{
 9834|  13.8k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 13.2k, False: 570]
  |  |  ------------------
  ------------------
 9835|  13.2k|        out = unexpected(in.error());
 9836|  13.2k|    }
 9837|    570|    else {
 9838|    570|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|    570|    static_cast<    \
  |  | 1109|    570|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|    570|    }
 9840|  13.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1629|  13.2k|        : base(unexpect, std::move(e.error())),
 1630|  13.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  13.2k|    {
 1632|  13.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  651|  13.2k|        : m_has_value(false)
  652|  13.2k|    {
  653|  13.2k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  654|  13.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  715|  13.2k|    {
  716|  13.2k|        scn::detail::construct_at(unexpected_ptr(),
  717|  13.2k|                                  std::forward<Args>(args)...);
  718|  13.2k|        m_has_value = false;
  719|  13.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  744|  66.3k|    {
  745|  66.3k|        return reinterpret_cast<unexpected<E>*>(
  746|  66.3k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1074|  66.3k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  747|  66.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  13.2k|    {
 1330|  13.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1570|  13.2k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvEaSEOSK_:
  916|  13.2k|    {
  917|  13.2k|        assign_common(std::move(other));
  918|  13.2k|        return *this;
  919|  13.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  963|  13.2k|    {
  964|  13.2k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 13.2k, False: 0]
  ------------------
  965|  13.2k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 13.2k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  13.2k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  13.2k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  701|  68.0k|    {
  702|  68.0k|        return m_has_value;
  703|  68.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  667|  14.4k|    {
  668|  14.4k|        return *value_ptr();
  669|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1059|  13.2k|    {
 1060|  13.2k|        this->destroy_value();
 1061|  13.2k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  13.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  722|  13.8k|    {
  723|  13.8k|        scn::detail::destroy_at(value_ptr());
  724|  13.8k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  416|  13.8k|{
  417|       |    if constexpr (std::is_array_v<T>) {
  418|       |        for (auto& elem : *p) {
  419|       |            scn::detail::destroy_at(&elem);
  420|       |        }
  421|       |    }
  422|  13.8k|    else {
  423|  13.8k|        p->~T();
  424|  13.8k|    }
  425|  13.8k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 6699|  13.8k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  715|  13.2k|    {
  716|  13.2k|        scn::detail::construct_at(unexpected_ptr(),
  717|  13.2k|                                  std::forward<Args>(args)...);
  718|  13.2k|        m_has_value = false;
  719|  13.2k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  692|  13.2k|    {
  693|  13.2k|        return std::move(*unexpected_ptr());
  694|  13.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  726|  26.5k|    {
  727|  26.5k|        scn::detail::destroy_at(unexpected_ptr());
  728|  26.5k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEcvS6_Ev:
 8854|  13.8k|    {
 8855|  13.8k|        return m_str;
 8856|  13.8k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6195|  13.8k|{
 6196|  13.8k|    detail::check_scan_arg_types<Args...>();
 6197|  13.8k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  13.8k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6171|  13.8k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  13.8k|    {
 6173|  13.8k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6180|  13.8k|    {
 6181|  13.8k|        return {detail::make_arg<
 6182|  13.8k|            kind, Context,
 6183|  13.8k|            mapped_type_constant<remove_cvref_t<A>,
 6184|  13.8k|                                 typename Context::char_type>::value>(args)...};
 6185|  13.8k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE27ENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEvEEPvRT2_:
 5960|  13.8k|{
 5961|  13.8k|    return make_value<Context>(value).ref_value;
 5962|  13.8k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDaRT0_:
 5895|  13.8k|{
 5896|  13.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|  13.8k|                                  needs_context_tag>) {
 5900|  13.8k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|  13.8k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 5702|  13.8k|    {                                                                        \
 5703|  13.8k|        return val;                                                          \
 5704|  13.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1828|  14.4k|    {
 1829|  14.4k|        return &value();
 1830|  14.4k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1782|  14.4k|    {
 1783|  14.4k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  14.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  14.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  14.4k|        return this->get_value();
 1785|  14.4k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  13.8k|        : basic_scan_args(store.desc, store.args.data())
 6222|  13.8k|    {
 6223|  13.8k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|  13.8k|        : m_str(r.str)
 8850|  13.8k|    {
 8851|  13.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  657|  27.1k|    {
  658|  27.1k|        if (has_value()) {
  ------------------
  |  Branch (658:13): [True: 570, False: 26.5k]
  ------------------
  659|    570|            destroy_value();
  660|    570|        }
  661|  26.5k|        else {
  662|  26.5k|            destroy_unexpected();
  663|  26.5k|        }
  664|  27.1k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEEDav:
 9848|  13.8k|{
 9849|  13.8k|    return scan_result_type<Source, Args...>();
 9850|  13.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2Ev:
 1565|  13.8k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2Ev:
  626|  13.8k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  627|  13.8k|    {
  628|  13.8k|        construct();
  629|  13.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  708|  13.8k|    {
  709|  13.8k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  710|  13.8k|        m_has_value = true;
  711|  13.8k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJEEEPT_SK_DpOT0_:
  410|  13.8k|{
  411|  13.8k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|  13.8k|        T(std::forward<Args>(args)...);
  413|  13.8k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2Ev:
 6692|  13.8k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  732|  42.0k|    {
  733|  42.0k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1074|  42.0k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  734|  42.0k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9833|  13.8k|{
 9834|  13.8k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 13.2k, False: 570]
  |  |  ------------------
  ------------------
 9835|  13.2k|        out = unexpected(in.error());
 9836|  13.2k|    }
 9837|    570|    else {
 9838|    570|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|    570|    static_cast<    \
  |  | 1109|    570|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|    570|    }
 9840|  13.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1629|  13.2k|        : base(unexpect, std::move(e.error())),
 1630|  13.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  13.2k|    {
 1632|  13.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  651|  13.2k|        : m_has_value(false)
  652|  13.2k|    {
  653|  13.2k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  654|  13.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  715|  13.2k|    {
  716|  13.2k|        scn::detail::construct_at(unexpected_ptr(),
  717|  13.2k|                                  std::forward<Args>(args)...);
  718|  13.2k|        m_has_value = false;
  719|  13.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  744|  66.3k|    {
  745|  66.3k|        return reinterpret_cast<unexpected<E>*>(
  746|  66.3k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1074|  66.3k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  747|  66.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  13.2k|    {
 1330|  13.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1570|  13.2k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvEaSEOSK_:
  916|  13.2k|    {
  917|  13.2k|        assign_common(std::move(other));
  918|  13.2k|        return *this;
  919|  13.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  963|  13.2k|    {
  964|  13.2k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 13.2k, False: 0]
  ------------------
  965|  13.2k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 13.2k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  13.2k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  13.2k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  701|  68.0k|    {
  702|  68.0k|        return m_has_value;
  703|  68.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  667|  14.4k|    {
  668|  14.4k|        return *value_ptr();
  669|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1059|  13.2k|    {
 1060|  13.2k|        this->destroy_value();
 1061|  13.2k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  13.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  722|  13.8k|    {
  723|  13.8k|        scn::detail::destroy_at(value_ptr());
  724|  13.8k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  416|  13.8k|{
  417|       |    if constexpr (std::is_array_v<T>) {
  418|       |        for (auto& elem : *p) {
  419|       |            scn::detail::destroy_at(&elem);
  420|       |        }
  421|       |    }
  422|  13.8k|    else {
  423|  13.8k|        p->~T();
  424|  13.8k|    }
  425|  13.8k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 6699|  13.8k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  715|  13.2k|    {
  716|  13.2k|        scn::detail::construct_at(unexpected_ptr(),
  717|  13.2k|                                  std::forward<Args>(args)...);
  718|  13.2k|        m_has_value = false;
  719|  13.2k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  692|  13.2k|    {
  693|  13.2k|        return std::move(*unexpected_ptr());
  694|  13.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  726|  26.5k|    {
  727|  26.5k|        scn::detail::destroy_at(unexpected_ptr());
  728|  26.5k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEcvS6_Ev:
 8854|  13.8k|    {
 8855|  13.8k|        return m_str;
 8856|  13.8k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6195|  13.8k|{
 6196|  13.8k|    detail::check_scan_arg_types<Args...>();
 6197|  13.8k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  13.8k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6171|  13.8k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  13.8k|    {
 6173|  13.8k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6180|  13.8k|    {
 6181|  13.8k|        return {detail::make_arg<
 6182|  13.8k|            kind, Context,
 6183|  13.8k|            mapped_type_constant<remove_cvref_t<A>,
 6184|  13.8k|                                 typename Context::char_type>::value>(args)...};
 6185|  13.8k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE28ENSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEvEEPvRT2_:
 5960|  13.8k|{
 5961|  13.8k|    return make_value<Context>(value).ref_value;
 5962|  13.8k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEDaRT0_:
 5895|  13.8k|{
 5896|  13.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|  13.8k|                                  needs_context_tag>) {
 5900|  13.8k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|  13.8k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 5702|  13.8k|    {                                                                        \
 5703|  13.8k|        return val;                                                          \
 5704|  13.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1828|  14.4k|    {
 1829|  14.4k|        return &value();
 1830|  14.4k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1782|  14.4k|    {
 1783|  14.4k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  14.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  14.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  14.4k|        return this->get_value();
 1785|  14.4k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  13.8k|        : basic_scan_args(store.desc, store.args.data())
 6222|  13.8k|    {
 6223|  13.8k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|  13.8k|        : m_str(r.str)
 8850|  13.8k|    {
 8851|  13.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  657|  27.1k|    {
  658|  27.1k|        if (has_value()) {
  ------------------
  |  Branch (658:13): [True: 570, False: 26.5k]
  ------------------
  659|    570|            destroy_value();
  660|    570|        }
  661|  26.5k|        else {
  662|  26.5k|            destroy_unexpected();
  663|  26.5k|        }
  664|  27.1k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEEDav:
 9848|  13.8k|{
 9849|  13.8k|    return scan_result_type<Source, Args...>();
 9850|  13.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2Ev:
 1565|  13.8k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2Ev:
  441|  13.8k|        : m_value(T{}), m_has_value(true)
  442|  13.8k|    {
  443|  13.8k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2Ev:
 6692|  13.8k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2Ev:
 6466|  13.8k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSJ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISJ_EEONSV_ISP_EE:
 9833|  13.8k|{
 9834|  13.8k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 13.2k, False: 570]
  |  |  ------------------
  ------------------
 9835|  13.2k|        out = unexpected(in.error());
 9836|  13.2k|    }
 9837|    570|    else {
 9838|    570|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|    570|    static_cast<    \
  |  | 1109|    570|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|    570|    }
 9840|  13.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1629|  13.2k|        : base(unexpect, std::move(e.error())),
 1630|  13.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  13.2k|    {
 1632|  13.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  464|  13.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  13.2k|          m_has_value(false)
  466|  13.2k|    {
  467|  13.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  13.2k|    {
 1330|  13.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEaSEOSH_:
 1570|  13.2k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvEaSEOSI_:
  916|  13.2k|    {
  917|  13.2k|        assign_common(std::move(other));
  918|  13.2k|        return *this;
  919|  13.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvE13assign_commonISI_EEvOT_:
  963|  13.2k|    {
  964|  13.2k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 13.2k, False: 0]
  ------------------
  965|  13.2k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 13.2k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  13.2k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  13.2k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  40.9k|    {
  505|  40.9k|        return m_has_value;
  506|  40.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  14.4k|    {
  471|  14.4k|        return m_value;
  472|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISI_EEvOT_:
 1059|  13.2k|    {
 1060|  13.2k|        this->destroy_value();
 1061|  13.2k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  13.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  13.2k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISH_EEEEEvDpOT_:
  518|  13.2k|    {
  519|  13.2k|        scn::detail::construct_at(&get_unexpected(),
  520|  13.2k|                                  std::forward<Args>(args)...);
  521|  13.2k|        m_has_value = false;
  522|  13.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  13.2k|    {
  488|  13.2k|        return m_unexpected;
  489|  13.2k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  13.2k|    {
  496|  13.2k|        return std::move(m_unexpected);
  497|  13.2k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEcvS6_Ev:
 8854|  13.8k|    {
 8855|  13.8k|        return m_str;
 8856|  13.8k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6195|  13.8k|{
 6196|  13.8k|    detail::check_scan_arg_types<Args...>();
 6197|  13.8k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  13.8k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEbv:
 5910|  13.8k|{
 5911|  13.8k|    constexpr bool default_constructible_constraint =
 5912|  13.8k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5913|  13.8k|    static_assert(default_constructible_constraint,
 5914|  13.8k|                  "Scan argument types must be default constructible");
 5915|       |
 5916|  13.8k|    constexpr bool destructible_constraint =
 5917|  13.8k|        std::conjunction_v<std::is_destructible<Args>...>;
 5918|  13.8k|    static_assert(destructible_constraint,
 5919|  13.8k|                  "Scan argument types must be Destructible");
 5920|       |
 5921|  13.8k|    constexpr bool non_reference_constraint =
 5922|  13.8k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5923|  13.8k|    static_assert(non_reference_constraint,
 5924|  13.8k|                  "Scan argument types must not be references");
 5925|       |
 5926|  13.8k|    constexpr bool movable_constraint =
 5927|  13.8k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5928|  13.8k|    static_assert(movable_constraint,
 5929|  13.8k|                  "Scan argument types must be move constructible");
 5930|       |
 5931|  13.8k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5931:12): [Folded - Ignored]
  |  Branch (5931:48): [Folded - Ignored]
  ------------------
 5932|  13.8k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5932:12): [Folded - Ignored]
  |  Branch (5932:40): [Folded - Ignored]
  ------------------
 5933|  13.8k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEC2ERNS6_5tupleIJSA_EEE:
 6171|  13.8k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  13.8k|    {
 6173|  13.8k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEE12make_argptrsIJSA_EEENS6_5arrayIPvLm1EEEDpRT_:
 6180|  13.8k|    {
 6181|  13.8k|        return {detail::make_arg<
 6182|  13.8k|            kind, Context,
 6183|  13.8k|            mapped_type_constant<remove_cvref_t<A>,
 6184|  13.8k|                                 typename Context::char_type>::value>(args)...};
 6185|  13.8k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE26ENSt3__117basic_string_viewIwNS8_11char_traitsIwEEEEvEEPvRT2_:
 5960|  13.8k|{
 5961|  13.8k|    return make_value<Context>(value).ref_value;
 5962|  13.8k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDaRT0_:
 5895|  13.8k|{
 5896|  13.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|  13.8k|                                  needs_context_tag>) {
 5900|  13.8k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|  13.8k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 5702|  13.8k|    {                                                                        \
 5703|  13.8k|        return val;                                                          \
 5704|  13.8k|    }
_ZN3scn2v46detail15make_value_implINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEERS7_EEDaOT0_:
 5864|  13.8k|{
 5865|  13.8k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|  13.8k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|  13.8k|    constexpr bool scannable_char =
 5869|  13.8k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|  13.8k|    static_assert(scannable_char,
 5871|  13.8k|                  "Cannot scan an argument of an unsupported character "
 5872|  13.8k|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|  13.8k|    constexpr bool scannable_const =
 5875|  13.8k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|  13.8k|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|  13.8k|    constexpr bool scannable_disabled =
 5879|  13.8k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|  13.8k|    static_assert(scannable_disabled,
 5881|  13.8k|                  "Cannot scan an argument that has been disabled by "
 5882|  13.8k|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|  13.8k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|  13.8k|    static_assert(
 5886|  13.8k|        scannable,
 5887|  13.8k|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|  13.8k|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|  13.8k|    return arg_value{arg};
 5891|  13.8k|}
_ZN3scn2v46detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 5645|  13.8k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5646|  13.8k|    {
 5647|  13.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEptEv:
 1828|  14.4k|    {
 1829|  14.4k|        return &value();
 1830|  14.4k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1782|  14.4k|    {
 1783|  14.4k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  14.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  14.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  14.4k|        return this->get_value();
 1785|  14.4k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEE6valuesEv:
 6475|  13.8k|    {
 6476|  13.8k|        return m_values;
 6477|  13.8k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNSt3__117basic_string_viewIwNS8_11char_traitsIwEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  13.8k|        : basic_scan_args(store.desc, store.args.data())
 6222|  13.8k|    {
 6223|  13.8k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|  13.8k|        : m_str(r.str)
 8850|  13.8k|    {
 8851|  13.8k|    }
_ZN3scn2v410scan_errorC2ENS1_4codeEPKc:
 3758|   368k|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3759|   368k|    {
 3760|   368k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  | 1089|   368k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3761|   368k|    }
_ZNK3scn2v410scan_error4codeEv:
 3770|  3.75k|    {
 3771|  3.75k|        return m_code;
 3772|  3.75k|    }
_ZN3scn2v46detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3993|  88.3k|{
 3994|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3995|       |                                          const CharT*, const CharT*>) {
 3996|       |        return {first, last};
 3997|       |    }
 3998|  88.3k|    else {
 3999|  88.3k|        return {first, static_cast<size_t>(std::distance(first, last))};
 4000|  88.3k|    }
 4001|  88.3k|}
_ZNK3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE9has_valueEv:
  586|  3.92M|    {
  587|  3.92M|        return m_has_value;
  588|  3.92M|    }
_ZNR3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE14get_unexpectedEv:
  569|   208k|    {
  570|   208k|        return m_unexpected;
  571|   208k|    }
_ZNR3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1759|   203k|    {
 1760|   203k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   203k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   203k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   203k|        return this->get_unexpected().error();
 1762|   203k|    }
_ZNK3scn2v46detail9fill_type4sizeEv:
 7017|  5.20k|    {
 7018|  5.20k|        return m_size;
 7019|  5.20k|    }
_ZNK3scn2v46detail12format_specs8get_baseEv:
 7058|  5.40k|    {
 7059|  5.40k|        SCN_GCC_COMPAT_PUSH
 7060|  5.40k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 7061|  5.40k|        switch (type) {
 7062|  2.50k|            case presentation_type::none:
  ------------------
  |  Branch (7062:13): [True: 2.50k, False: 2.90k]
  ------------------
 7063|  2.50k|                return 10;
 7064|    112|            case presentation_type::int_generic:
  ------------------
  |  Branch (7064:13): [True: 112, False: 5.29k]
  ------------------
 7065|    112|                return 0;
 7066|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (7066:13): [True: 0, False: 5.40k]
  ------------------
 7067|      0|                return arbitrary_base;
 7068|       |
 7069|     88|            case presentation_type::int_binary:
  ------------------
  |  Branch (7069:13): [True: 88, False: 5.31k]
  ------------------
 7070|     88|                return 2;
 7071|    102|            case presentation_type::int_octal:
  ------------------
  |  Branch (7071:13): [True: 102, False: 5.30k]
  ------------------
 7072|    102|                return 8;
 7073|     40|            case presentation_type::int_decimal:
  ------------------
  |  Branch (7073:13): [True: 40, False: 5.36k]
  ------------------
 7074|    110|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (7074:13): [True: 70, False: 5.33k]
  ------------------
 7075|    110|                return 10;
 7076|  2.49k|            case presentation_type::int_hex:
  ------------------
  |  Branch (7076:13): [True: 2.49k, False: 2.91k]
  ------------------
 7077|  2.49k|                return 16;
 7078|       |
 7079|      0|            default:
  ------------------
  |  Branch (7079:13): [True: 0, False: 5.40k]
  ------------------
 7080|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7081|      0|                SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7082|  5.40k|        }
 7083|  5.40k|        SCN_GCC_COMPAT_POP
 7084|  5.40k|    }
_ZN3scn2v46detail12specs_setterC2ERNS1_12format_specsE:
 7096|  48.1k|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v46detail12specs_setter8on_alignENS1_10align_typeE:
 7099|  8.57k|    {
 7100|  8.57k|        m_specs.align = align;
 7101|  8.57k|    }
_ZN3scn2v46detail12specs_setter8on_widthEi:
 7119|  8.66k|    {
 7120|  8.66k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (7120:13): [True: 0, False: 8.66k]
  |  Branch (7120:39): [True: 0, False: 0]
  ------------------
 7121|       |            // clang-format off
 7122|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 7123|       |            // clang-format on
 7124|      0|        }
 7125|       |
 7126|  8.66k|        m_specs.width = width;
 7127|  8.66k|    }
_ZN3scn2v46detail12specs_setter12on_precisionEi:
 7129|  17.6k|    {
 7130|  17.6k|        if (m_specs.width > prec) {
  ------------------
  |  Branch (7130:13): [True: 68, False: 17.5k]
  ------------------
 7131|       |            // clang-format off
 7132|     68|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 7133|       |            // clang-format on
 7134|     68|        }
 7135|       |
 7136|  17.5k|        m_specs.precision = prec;
 7137|  17.5k|    }
_ZN3scn2v46detail12specs_setter7on_typeENS1_17presentation_typeE:
 7140|  56.0k|    {
 7141|  56.0k|        m_specs.type = type;
 7142|  56.0k|    }
_ZN3scn2v46detail12specs_setter17on_charset_singleEDi:
 7145|  2.41M|    {
 7146|  2.41M|        const auto cp_value = static_cast<unsigned>(cp);
 7147|  2.41M|        if (SCN_LIKELY(cp_value <= 127)) {
  ------------------
  |  | 1038|  2.41M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 1.98M, False: 438k]
  |  |  ------------------
  ------------------
 7148|  1.98M|            m_specs.charset_literals[cp_value / 8] |=
 7149|  1.98M|                static_cast<unsigned char>(1ul << (cp_value % 8));
 7150|  1.98M|        }
 7151|   438k|        else {
 7152|   438k|            m_specs.charset_has_nonascii = true;
 7153|   438k|        }
 7154|  2.41M|    }
_ZN3scn2v46detail12specs_setter16on_charset_rangeEDiDi:
 7157|  16.5k|    {
 7158|  16.5k|        const auto begin_value = static_cast<unsigned>(begin);
 7159|  16.5k|        const auto end_value = static_cast<unsigned>(end);
 7160|  16.5k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  | 1104|  16.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  16.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7161|       |
 7162|  16.5k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  | 1038|  16.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 8.30k, False: 8.29k]
  |  |  ------------------
  ------------------
 7163|       |            // No need to bit-twiddle with a mask, because with the
 7164|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 7165|  8.30k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  | 1058|  8.30k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 7166|   532k|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (7166:40): [True: 524k, False: 8.30k]
  ------------------
 7167|   524k|                m_specs.charset_literals[v / 8] |=
 7168|   524k|                    static_cast<unsigned char>(1ul << (v % 8));
 7169|   524k|            }
 7170|  8.30k|        }
 7171|  8.29k|        else {
 7172|  8.29k|            m_specs.charset_has_nonascii = true;
 7173|  8.29k|        }
 7174|  16.5k|    }
_ZN3scn2v46detail12specs_setter19on_charset_invertedEv:
 7177|  4.81k|    {
 7178|  4.81k|        m_specs.charset_is_inverted = true;
 7179|  4.81k|    }
_ZN3scn2v46detail12specs_setter14on_regex_flagsENS1_11regex_flagsE:
 7196|  3.90k|    {
 7197|  3.90k|        m_specs.regexp_flags = flags;
 7198|  3.90k|    }
_ZN3scn2v46detail12specs_setter8on_errorEPKc:
 7202|  10.8k|    {
 7203|  10.8k|        SCN_UNLIKELY_ATTR
 7204|  10.8k|        m_error = unexpected_scan_error(scan_error::invalid_format_string, msg);
 7205|  10.8k|    }
_ZNK3scn2v46detail12specs_setter9get_errorEv:
 7213|  2.49M|    {
 7214|  2.49M|        return m_error;
 7215|  2.49M|    }
_ZN3scn2v46detail21unexpected_scan_errorENS0_10scan_error4codeEPKc:
 3935|   174k|{
 3936|   174k|    return unexpected(scan_error{c, m});
 3937|   174k|}
_ZN3scn2v46detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4186|   216k|{
 4187|   216k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  | 1104|   216k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   216k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4188|       |
 4189|   216k|    const auto is_trailing_code_unit = [](char ch) {
 4190|   216k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4191|   216k|    };
 4192|       |
 4193|   216k|    if (input.size() == 1) {
  ------------------
  |  Branch (4193:9): [True: 180k, False: 36.0k]
  ------------------
 4194|   180k|        SCN_EXPECT(static_cast<unsigned char>(input[0]) < 0x80);
  ------------------
  |  | 1104|   180k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   180k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4195|   180k|        return static_cast<char32_t>(input[0]);
 4196|   180k|    }
 4197|       |
 4198|  36.0k|    if (input.size() == 2) {
  ------------------
  |  Branch (4198:9): [True: 34.9k, False: 1.04k]
  ------------------
 4199|  34.9k|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xe0) == 0xc0);
  ------------------
  |  | 1104|  34.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  34.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4200|  34.9k|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  | 1104|  34.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  34.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4201|       |
 4202|  34.9k|        char32_t cp{};
 4203|  34.9k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4204|  34.9k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4205|  34.9k|        return cp;
 4206|  34.9k|    }
 4207|       |
 4208|  1.04k|    if (input.size() == 3) {
  ------------------
  |  Branch (4208:9): [True: 892, False: 154]
  ------------------
 4209|    892|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf0) == 0xe0);
  ------------------
  |  | 1104|    892|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    892|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4210|    892|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  | 1104|    892|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    892|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4211|    892|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  | 1104|    892|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    892|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4212|       |
 4213|    892|        char32_t cp{};
 4214|    892|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4215|    892|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4216|    892|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4217|    892|        return cp;
 4218|    892|    }
 4219|       |
 4220|    154|    if (input.size() == 4) {
  ------------------
  |  Branch (4220:9): [True: 154, False: 0]
  ------------------
 4221|    154|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf8) == 0xf0);
  ------------------
  |  | 1104|    154|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    154|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4222|    154|        SCN_EXPECT(static_cast<unsigned char>(input[0]) <= 0xf4);
  ------------------
  |  | 1104|    154|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    154|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4223|    154|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  | 1104|    154|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    154|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4224|    154|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  | 1104|    154|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    154|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4225|    154|        SCN_EXPECT(is_trailing_code_unit(input[3]));
  ------------------
  |  | 1104|    154|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    154|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4226|       |
 4227|    154|        char32_t cp{};
 4228|    154|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4229|    154|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4230|    154|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4231|    154|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4232|    154|        return cp;
 4233|    154|    }
 4234|       |
 4235|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4236|       |    // gcc 7 thinks we'll get here, even when we won't
 4237|      0|    SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4238|      0|#endif
 4239|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4240|      0|}
_ZN3scn2v46detail11is_cp_spaceEDi:
 4325|   922k|{
 4326|       |    // Pattern_White_Space property
 4327|   922k|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4327:13): [True: 229k, False: 693k]
  |  Branch (4327:27): [True: 15.8k, False: 213k]
  ------------------
 4328|   922k|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4328:12): [True: 14.8k, False: 891k]
  ------------------
 4329|   922k|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4329:12): [True: 10.5k, False: 881k]
  ------------------
 4330|   922k|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4330:12): [True: 4.76k, False: 876k]
  ------------------
 4331|   922k|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4331:12): [True: 6.07k, False: 870k]
  ------------------
 4332|   922k|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4332:12): [True: 6.05k, False: 864k]
  ------------------
 4333|   922k|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4333:12): [True: 510, False: 863k]
  ------------------
 4334|   922k|}
_ZN3scn2v46detailanENS1_11regex_flagsES2_:
 6947|  2.08k|{
 6948|  2.08k|    return static_cast<regex_flags>(static_cast<unsigned>(a) &
 6949|  2.08k|                                    static_cast<unsigned>(b));
 6950|  2.08k|}
_ZN3scn2v46detailorENS1_11regex_flagsES2_:
 6952|    222|{
 6953|    222|    return static_cast<regex_flags>(static_cast<unsigned>(a) |
 6954|    222|                                    static_cast<unsigned>(b));
 6955|    222|}
_ZN3scn2v46detailoRERNS1_11regex_flagsES2_:
 6967|    222|{
 6968|    222|    return a = a | b;
 6969|    222|}
_ZN3scn2v46detail25get_category_for_arg_typeENS1_8arg_typeE:
 7896|  1.29k|{
 7897|  1.29k|    switch (type) {
 7898|    154|        case arg_type::none_type:
  ------------------
  |  Branch (7898:9): [True: 154, False: 1.14k]
  ------------------
 7899|    154|            return arg_type_category::none;
 7900|       |
 7901|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7901:9): [True: 0, False: 1.29k]
  ------------------
 7902|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7902:9): [True: 0, False: 1.29k]
  ------------------
 7903|    128|        case arg_type::int_type:
  ------------------
  |  Branch (7903:9): [True: 128, False: 1.16k]
  ------------------
 7904|    128|        case arg_type::long_type:
  ------------------
  |  Branch (7904:9): [True: 0, False: 1.29k]
  ------------------
 7905|    128|        case arg_type::llong_type:
  ------------------
  |  Branch (7905:9): [True: 0, False: 1.29k]
  ------------------
 7906|    128|        case arg_type::int128_type:
  ------------------
  |  Branch (7906:9): [True: 0, False: 1.29k]
  ------------------
 7907|    128|            return arg_type_category::integer;
 7908|       |
 7909|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7909:9): [True: 0, False: 1.29k]
  ------------------
 7910|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7910:9): [True: 0, False: 1.29k]
  ------------------
 7911|    128|        case arg_type::uint_type:
  ------------------
  |  Branch (7911:9): [True: 128, False: 1.16k]
  ------------------
 7912|    128|        case arg_type::ulong_type:
  ------------------
  |  Branch (7912:9): [True: 0, False: 1.29k]
  ------------------
 7913|    128|        case arg_type::ullong_type:
  ------------------
  |  Branch (7913:9): [True: 0, False: 1.29k]
  ------------------
 7914|    128|        case arg_type::uint128_type:
  ------------------
  |  Branch (7914:9): [True: 0, False: 1.29k]
  ------------------
 7915|    128|            return arg_type_category::unsigned_integer;
 7916|       |
 7917|    126|        case arg_type::pointer_type:
  ------------------
  |  Branch (7917:9): [True: 126, False: 1.17k]
  ------------------
 7918|    126|            return arg_type_category::pointer;
 7919|    128|        case arg_type::bool_type:
  ------------------
  |  Branch (7919:9): [True: 128, False: 1.16k]
  ------------------
 7920|    128|            return arg_type_category::boolean;
 7921|     58|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7921:9): [True: 58, False: 1.23k]
  ------------------
 7922|    126|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7922:9): [True: 68, False: 1.22k]
  ------------------
 7923|    126|        case arg_type::code_point_type:
  ------------------
  |  Branch (7923:9): [True: 0, False: 1.29k]
  ------------------
 7924|    126|            return arg_type_category::character;
 7925|       |
 7926|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7926:9): [True: 0, False: 1.29k]
  ------------------
 7927|    128|        case arg_type::double_type:
  ------------------
  |  Branch (7927:9): [True: 128, False: 1.16k]
  ------------------
 7928|    128|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7928:9): [True: 0, False: 1.29k]
  ------------------
 7929|    128|        case arg_type::float16_type:
  ------------------
  |  Branch (7929:9): [True: 0, False: 1.29k]
  ------------------
 7930|    128|        case arg_type::float32_type:
  ------------------
  |  Branch (7930:9): [True: 0, False: 1.29k]
  ------------------
 7931|    128|        case arg_type::float64_type:
  ------------------
  |  Branch (7931:9): [True: 0, False: 1.29k]
  ------------------
 7932|    128|        case arg_type::float128_type:
  ------------------
  |  Branch (7932:9): [True: 0, False: 1.29k]
  ------------------
 7933|    128|        case arg_type::bfloat16_type:
  ------------------
  |  Branch (7933:9): [True: 0, False: 1.29k]
  ------------------
 7934|    128|            return arg_type_category::floating;
 7935|       |
 7936|    126|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7936:9): [True: 126, False: 1.17k]
  ------------------
 7937|    252|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7937:9): [True: 126, False: 1.17k]
  ------------------
 7938|    378|        case arg_type::string_view_type:
  ------------------
  |  Branch (7938:9): [True: 126, False: 1.17k]
  ------------------
 7939|    378|            return arg_type_category::string;
 7940|       |
 7941|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7941:9): [True: 0, False: 1.29k]
  ------------------
 7942|      0|            return arg_type_category::custom;
 7943|       |
 7944|      0|            SCN_CLANG_PUSH
 7945|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7946|      0|        default:
  ------------------
  |  Branch (7946:9): [True: 0, False: 1.29k]
  ------------------
 7947|      0|            SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7948|  1.29k|            SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7949|  1.29k|            SCN_CLANG_POP
 7950|  1.29k|    }
 7951|       |
 7952|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7953|  1.29k|}
_ZNO3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1769|  5.08k|    {
 1770|  5.08k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  5.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  5.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|  5.08k|        return std::move(this->get_unexpected().error());
 1772|  5.08k|    }
_ZN3scn2v46detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7988|  9.31k|{
 7989|  9.31k|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  | 1039|  9.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.34k, False: 2.97k]
  |  |  ------------------
  ------------------
 7990|  6.34k|        return handler.on_error("Invalid type specifier for integer type");
 7991|  6.34k|    }
 7992|  2.97k|    if (specs.localized) {
  ------------------
  |  Branch (7992:9): [True: 176, False: 2.79k]
  ------------------
 7993|    176|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  | 1039|    176|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 16, False: 160]
  |  |  ------------------
  ------------------
 7994|       |            // clang-format off
 7995|     16|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 7996|       |            // clang-format on
 7997|     16|            return;
 7998|     16|        }
 7999|    160|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  | 1039|    160|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 160]
  |  |  ------------------
  ------------------
 8000|       |            // clang-format off
 8001|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 8002|       |            // clang-format on
 8003|      0|        }
 8004|    160|    }
 8005|  2.97k|}
_ZN3scn2v46ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 2107|   187k|{
 2108|   187k|    return SCN_FWD(t);
  ------------------
  |  | 1110|   187k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|   187k|}
_ZN3scn2v46ranges6detail5size_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3054|    106|    {
 3055|    106|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|    106|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|    106|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSE_:
 3088|    106|    {
 3089|    106|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|    106|    }
_ZN3scn2v46ranges6detail6ssize_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISE_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSE_:
 3111|    106|    {
 3112|    106|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 3113|    106|    }
_ZNK3scn2v46ranges6detail6ssize_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 3120|    106|    {
 3121|    106|        return fn::impl(std::forward<T>(t));
 3122|    106|    }
_ZN3scn2v46detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 8032|  4.65k|{
 8033|  4.65k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (8033:9): [True: 3.36k, False: 1.29k]
  ------------------
 8034|  4.65k|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (8034:10): [True: 194, False: 3.17k]
  ------------------
 8035|  3.36k|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (8035:10): [True: 2.95k, False: 216]
  ------------------
 8036|  3.15k|        SCN_UNLIKELY_ATTR
 8037|  3.15k|        return handler.on_error("Invalid type specifier for float type");
 8038|  3.15k|    }
 8039|  4.65k|}
_ZNK3scn2v48expectedIvNS0_10scan_errorEEcvbEv:
 1753|  3.71M|    {
 1754|  3.71M|        return has_value();
 1755|  3.71M|    }
_ZN3scn2v46detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 8044|  13.6k|{
 8045|  13.6k|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (8045:9): [True: 3.72k, False: 9.91k]
  ------------------
 8046|  13.6k|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (8046:9): [True: 1.15k, False: 8.76k]
  ------------------
 8047|  13.6k|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (8047:9): [True: 6.06k, False: 2.70k]
  ------------------
 8048|  13.6k|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (8048:9): [True: 102, False: 2.59k]
  ------------------
 8049|  13.6k|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (8049:9): [True: 1.17k, False: 1.42k]
  ------------------
 8050|  12.2k|        return;
 8051|  12.2k|    }
 8052|  1.42k|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (8052:9): [True: 276, False: 1.14k]
  ------------------
 8053|    276|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  | 1039|    276|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 12, False: 264]
  |  |  ------------------
  ------------------
 8054|       |            // clang-format off
 8055|     12|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 8056|       |            // clang-format on
 8057|     12|        }
 8058|    264|        return;
 8059|    276|    }
 8060|  1.14k|    SCN_UNLIKELY_ATTR
 8061|  1.14k|    handler.on_error("Invalid type specifier for string");
 8062|  1.14k|}
_ZN3scn2v46detail21check_bool_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 8078|  4.65k|{
 8079|  4.65k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (8079:9): [True: 3.36k, False: 1.29k]
  ------------------
 8080|  4.65k|        specs.type != presentation_type::string &&
  ------------------
  |  Branch (8080:9): [True: 2.96k, False: 402]
  ------------------
 8081|  4.65k|        specs.type != presentation_type::int_generic &&
  ------------------
  |  Branch (8081:9): [True: 2.91k, False: 46]
  ------------------
 8082|  4.65k|        specs.type != presentation_type::int_hex &&
  ------------------
  |  Branch (8082:9): [True: 2.89k, False: 26]
  ------------------
 8083|  4.65k|        specs.type != presentation_type::int_binary &&
  ------------------
  |  Branch (8083:9): [True: 2.85k, False: 40]
  ------------------
 8084|  4.65k|        specs.type != presentation_type::int_unsigned_decimal &&
  ------------------
  |  Branch (8084:9): [True: 2.82k, False: 26]
  ------------------
 8085|  4.65k|        specs.type != presentation_type::int_octal &&
  ------------------
  |  Branch (8085:9): [True: 2.78k, False: 40]
  ------------------
 8086|  4.65k|        specs.type != presentation_type::int_decimal) {
  ------------------
  |  Branch (8086:9): [True: 2.77k, False: 16]
  ------------------
 8087|  2.77k|        SCN_UNLIKELY_ATTR
 8088|  2.77k|        return handler.on_error("Invalid type specifier for boolean");
 8089|  2.77k|    }
 8090|  4.65k|}
_ZN3scn2v46detail21check_char_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 8010|  4.54k|{
 8011|  4.54k|    if (specs.type > presentation_type::int_hex ||
  ------------------
  |  Branch (8011:9): [True: 3.14k, False: 1.39k]
  ------------------
 8012|  4.54k|        specs.type == presentation_type::int_arbitrary_base) {
  ------------------
  |  Branch (8012:9): [True: 0, False: 1.39k]
  ------------------
 8013|  3.14k|        SCN_UNLIKELY_ATTR
 8014|  3.14k|        return handler.on_error("Invalid type specifier for character type");
 8015|  3.14k|    }
 8016|  4.54k|}
_ZN3scn2v46detail24check_pointer_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 8067|  4.54k|{
 8068|  4.54k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (8068:9): [True: 3.30k, False: 1.24k]
  ------------------
 8069|  4.54k|        specs.type != presentation_type::pointer) {
  ------------------
  |  Branch (8069:9): [True: 3.28k, False: 16]
  ------------------
 8070|  3.28k|        SCN_UNLIKELY_ATTR
 8071|  3.28k|        return handler.on_error("Invalid type specifier for pointer");
 8072|  3.28k|    }
 8073|  4.54k|}
_ZN3scn2v46detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3993|   704k|{
 3994|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3995|       |                                          const CharT*, const CharT*>) {
 3996|       |        return {first, last};
 3997|       |    }
 3998|   704k|    else {
 3999|   704k|        return {first, static_cast<size_t>(std::distance(first, last))};
 4000|   704k|    }
 4001|   704k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3493|  2.24M|    {
 3494|  2.24M|        return m_iterator;
 3495|  2.24M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3497|  2.34M|    {
 3498|  2.34M|        return m_sentinel;
 3499|  2.34M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3493|   788k|    {
 3494|   788k|        return m_iterator;
 3495|   788k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3497|  1.72M|    {
 3498|  1.72M|        return m_sentinel;
 3499|  1.72M|    }
_ZN3scn2v46detail10locale_refC2Ev:
 8870|   102k|    constexpr locale_ref() = default;
_ZN3scn2v46detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1363|    354|{
 1364|    354|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1365|    354|}
_ZNR3scn2v410unexpectedINS0_4impl9eof_errorEE5errorEv:
  379|  3.51k|    {
  380|  3.51k|        return m_unexpected;
  381|  3.51k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  364|   174k|        : m_unexpected(std::forward<Err>(e))
  365|   174k|    {
  366|   174k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|   174k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|   174k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1629|   185k|        : base(unexpect, std::move(e.error())),
 1630|   185k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   185k|    {
 1632|   185k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  464|   185k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   185k|          m_has_value(false)
  466|   185k|    {
  467|   185k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   190k|    {
 1330|   190k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1629|  38.1k|        : base(unexpect, std::move(e.error())),
 1630|  38.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  38.1k|    {
 1632|  38.1k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  464|  39.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  39.0k|          m_has_value(false)
  466|  39.0k|    {
  467|  39.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  65.7k|    {
 1330|  65.7k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1583|  24.0k|        : base(std::in_place, std::forward<U>(val)),
 1584|  24.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  24.0k|    {
 1586|  24.0k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|  24.0k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  24.0k|    {
  457|  24.0k|    }
_ZNK3scn2v48expectedIPKcNS0_10scan_errorEEcvbEv:
 1753|  66.6k|    {
 1754|  66.6k|        return has_value();
 1755|  66.6k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  504|   130k|    {
  505|   130k|        return m_has_value;
  506|   130k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5errorEv:
 1759|  38.1k|    {
 1760|  38.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  38.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  38.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  38.1k|        return this->get_unexpected().error();
 1762|  38.1k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  38.1k|    {
  488|  38.1k|        return m_unexpected;
  489|  38.1k|    }
_ZNO3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1818|  16.1k|    {
 1819|  16.1k|        return std::move(value());
 1820|  16.1k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1782|  25.7k|    {
 1783|  25.7k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  25.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  25.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  25.7k|        return this->get_value();
 1785|  25.7k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  470|  25.7k|    {
  471|  25.7k|        return m_value;
  472|  25.7k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1629|  21.6k|        : base(unexpect, std::move(e.error())),
 1630|  21.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  21.6k|    {
 1632|  21.6k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  464|  22.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  22.7k|          m_has_value(false)
  466|  22.7k|    {
  467|  22.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  45.4k|    {
 1330|  45.4k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1583|  21.9k|        : base(std::in_place, std::forward<U>(val)),
 1584|  21.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  21.9k|    {
 1586|  21.9k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|  21.9k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  21.9k|    {
  457|  21.9k|    }
_ZNK3scn2v48expectedIPKwNS0_10scan_errorEEcvbEv:
 1753|  46.5k|    {
 1754|  46.5k|        return has_value();
 1755|  46.5k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  504|  89.8k|    {
  505|  89.8k|        return m_has_value;
  506|  89.8k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5errorEv:
 1759|  21.7k|    {
 1760|  21.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  21.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  21.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  21.7k|        return this->get_unexpected().error();
 1762|  21.7k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  21.7k|    {
  488|  21.7k|        return m_unexpected;
  489|  21.7k|    }
_ZNO3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1818|  16.0k|    {
 1819|  16.0k|        return std::move(value());
 1820|  16.0k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1782|  21.6k|    {
 1783|  21.6k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  21.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  21.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  21.6k|        return this->get_value();
 1785|  21.6k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  470|  21.6k|    {
  471|  21.6k|        return m_value;
  472|  21.6k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1992|  8.48k|    {
 1993|  8.48k|        return detail::transform_error_impl(std::move(*this),
 1994|  8.48k|                                            std::forward<F>(f));
 1995|  8.48k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1475|  8.48k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  8.48k|    else {
 1486|  8.48k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  8.48k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  8.48k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 8.48k, False: 0]
  |  |  ------------------
  ------------------
 1488|  8.48k|                   ? result(*std::forward<Exp>(exp))
 1489|  8.48k|                   : result(unexpect,
 1490|      0|                            trivial_invoke(std::forward<F>(f),
 1491|      0|                                           std::forward<Exp>(exp).error()));
 1492|  8.48k|    }
 1493|  8.48k|}
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  504|   100k|    {
  505|   100k|        return m_has_value;
  506|   100k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1818|  10.4k|    {
 1819|  10.4k|        return std::move(value());
 1820|  10.4k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1782|  47.3k|    {
 1783|  47.3k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  47.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  47.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  47.3k|        return this->get_value();
 1785|  47.3k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  470|  47.3k|    {
  471|  47.3k|        return m_value;
  472|  47.3k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1769|    102|    {
 1770|    102|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|    102|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    102|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|    102|        return std::move(this->get_unexpected().error());
 1772|    102|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  487|    102|    {
  488|    102|        return m_unexpected;
  489|    102|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1639|    952|        : base(unexpect, std::forward<Args>(args)...),
 1640|    952|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|    952|    {
 1642|    952|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE4argsEv:
 8923|  5.96k|    {
 8924|  5.96k|        return m_args;
 8925|  5.96k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE6localeEv:
 8928|  34.3k|    {
 8929|  34.3k|        return m_locale;
 8930|  34.3k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2ES7_NS1_10locale_refE:
 8934|  62.2k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1108|  62.2k|    static_cast<    \
  |  | 1109|  62.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1108|  62.2k|    static_cast<    \
  |  | 1109|  62.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8935|  62.2k|    {
 8936|  62.2k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3013|  8.36k|    {
 3014|  8.36k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1110|  8.36k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3015|  8.36k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2994|  8.36k|    {
 2995|  8.36k|        return t.data();
 2996|  8.36k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE4argsEv:
 8923|  5.28k|    {
 8924|  5.28k|        return m_args;
 8925|  5.28k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE6localeEv:
 8928|  18.5k|    {
 8929|  18.5k|        return m_locale;
 8930|  18.5k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2ES7_NS1_10locale_refE:
 8934|   124k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1108|   124k|    static_cast<    \
  |  | 1109|   124k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1108|   124k|    static_cast<    \
  |  | 1109|   124k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8935|   124k|    {
 8936|   124k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1629|   385k|        : base(unexpect, std::move(e.error())),
 1630|   385k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   385k|    {
 1632|   385k|    }
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  563|   385k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  564|   385k|          m_has_value(false)
  565|   385k|    {
  566|   385k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIvNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   385k|    {
 1330|   385k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2Ev:
 1565|   470k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2Ev:
  543|   470k|        : m_deferred_init(), m_has_value(true)
  544|   470k|    {
  545|   470k|    }
_ZNK3scn2v46detail9fill_type13get_code_unitIcEET_v:
 7023|  1.37k|    {
 7024|  1.37k|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  | 1104|  1.37k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.37k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7025|  1.37k|        CharT r{};
 7026|  1.37k|        std::memcpy(&r, m_data, m_size);
 7027|  1.37k|        return r;
 7028|  1.37k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  364|  1.71k|        : m_unexpected(std::forward<Err>(e))
  365|  1.71k|    {
  366|  1.71k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  1.71k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|  1.71k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  373|  2.08k|        : m_unexpected(std::forward<Args>(args)...)
  374|  2.08k|    {
  375|  2.08k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  2.08k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  376|  2.08k|    }
_ZNK3scn2v46detail9fill_type14get_code_unitsIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 7032|  1.71k|    {
 7033|  1.71k|        return {reinterpret_cast<const CharT*>(m_data), m_size};
 7034|  1.71k|    }
_ZNK3scn2v46ranges6detail6ssize_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSD_:
 3120|    118|    {
 3121|    118|        return fn::impl(std::forward<T>(t));
 3122|    118|    }
_ZN3scn2v46ranges6detail6ssize_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISD_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeELm8EElSM_E4typeE_EEOSD_:
 3111|    118|    {
 3112|    118|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 3113|    118|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3088|    118|    {
 3089|    118|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|    118|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3054|    118|    {
 3055|    118|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|    118|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|    118|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  364|    368|        : m_unexpected(std::forward<Err>(e))
  365|    368|    {
  366|    368|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|    368|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|    368|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  364|     22|        : m_unexpected(std::forward<Err>(e))
  365|     22|    {
  366|     22|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|     22|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|     22|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_errorEE5errorEv:
  379|  22.9k|    {
  380|  22.9k|        return m_unexpected;
  381|  22.9k|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  373|  4.80k|        : m_unexpected(std::forward<Args>(args)...)
  374|  4.80k|    {
  375|  4.80k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  4.80k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  376|  4.80k|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  364|  33.7k|        : m_unexpected(std::forward<Err>(e))
  365|  33.7k|    {
  366|  33.7k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  33.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|  33.7k|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  379|  33.7k|    {
  380|  33.7k|        return m_unexpected;
  381|  33.7k|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  373|  33.7k|        : m_unexpected(std::forward<Args>(args)...)
  374|  33.7k|    {
  375|  33.7k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  33.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  376|  33.7k|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1363|  1.07k|{
 1364|  1.07k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1365|  1.07k|}
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  364|  3.71k|        : m_unexpected(std::forward<Err>(e))
  365|  3.71k|    {
  366|  3.71k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  3.71k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|  3.71k|    }
_ZN3scn2v46detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JS8_EvEEDcOT_DpOT0_:
 1363|  1.78k|{
 1364|  1.78k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1365|  1.78k|}
_ZNK3scn2v46ranges6detail6ssize_2fnclIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSF_:
 3120|     16|    {
 3121|     16|        return fn::impl(std::forward<T>(t));
 3122|     16|    }
_ZN3scn2v46ranges6detail6ssize_2fn4implIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISF_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSF_EEEEE15difference_typeEE4typeELm8EElSO_E4typeE_EEOSF_:
 3111|     16|    {
 3112|     16|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 3113|     16|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSF_:
 3088|     16|    {
 3089|     16|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|     16|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESG_E4typeEOSH_NS0_6detail12priority_tagILm2EEE:
 3054|     16|    {
 3055|     16|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|     16|    }
_ZN3scn2v46detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  330|   173k|{
  331|   173k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1110|   173k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  332|   173k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3509|   137k|    {
 3510|   137k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3511|   137k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1629|    530|        : base(unexpect, std::move(e.error())),
 1630|    530|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|    530|    {
 1632|    530|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  464|    530|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|    530|          m_has_value(false)
  466|    530|    {
  467|    530|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  53.2k|    {
 1330|  53.2k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1583|  52.6k|        : base(std::in_place, std::forward<U>(val)),
 1584|  52.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  52.6k|    {
 1586|  52.6k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|  52.6k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  52.6k|    {
  457|  52.6k|    }
_ZNK3scn2v48expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1753|  42.6k|    {
 1754|  42.6k|        return has_value();
 1755|  42.6k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1808|  36.8k|    {
 1809|  36.8k|        return value();
 1810|  36.8k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1583|  11.4k|        : base(std::in_place, std::forward<U>(val)),
 1584|  11.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  11.4k|    {
 1586|  11.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  455|  11.4k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  11.4k|    {
  457|  11.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  11.9k|    {
 1330|  11.9k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1629|    530|        : base(unexpect, std::move(e.error())),
 1630|    530|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|    530|    {
 1632|    530|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  464|    530|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|    530|          m_has_value(false)
  466|    530|    {
  467|    530|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEcvbEv:
 1753|  8.33k|    {
 1754|  8.33k|        return has_value();
 1755|  8.33k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9has_valueEv:
  504|  21.7k|    {
  505|  21.7k|        return m_has_value;
  506|  21.7k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1808|  6.24k|    {
 1809|  6.24k|        return value();
 1810|  6.24k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1782|  9.39k|    {
 1783|  9.39k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  9.39k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  9.39k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  9.39k|        return this->get_value();
 1785|  9.39k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9get_valueEv:
  470|  9.39k|    {
  471|  9.39k|        return m_value;
  472|  9.39k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1629|    238|        : base(unexpect, std::move(e.error())),
 1630|    238|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|    238|    {
 1632|    238|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|    238|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|    238|          m_has_value(false)
  466|    238|    {
  467|    238|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  6.06k|    {
 1330|  6.06k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEC2ISA_vEEOT_:
 1583|  5.82k|        : base(std::in_place, std::forward<U>(val)),
 1584|  5.82k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  5.82k|    {
 1586|  5.82k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2IJSB_EvEENS3_10in_place_tEDpOT_:
  455|  5.82k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  5.82k|    {
  457|  5.82k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1992|  1.00k|    {
 1993|  1.00k|        return detail::transform_error_impl(std::move(*this),
 1994|  1.00k|                                            std::forward<F>(f));
 1995|  1.00k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1475|  1.00k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  1.00k|    else {
 1486|  1.00k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  1.00k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  1.00k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 1.00k, False: 0]
  |  |  ------------------
  ------------------
 1488|  1.00k|                   ? result(*std::forward<Exp>(exp))
 1489|  1.00k|                   : result(unexpect,
 1490|      0|                            trivial_invoke(std::forward<F>(f),
 1491|      0|                                           std::forward<Exp>(exp).error()));
 1492|  1.00k|    }
 1493|  1.00k|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1818|  3.14k|    {
 1819|  3.14k|        return std::move(value());
 1820|  3.14k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1583|  2.85k|        : base(std::in_place, std::forward<U>(val)),
 1584|  2.85k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  2.85k|    {
 1586|  2.85k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  455|  2.85k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  2.85k|    {
  457|  2.85k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  12.0k|    {
 1330|  12.0k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5errorEv:
 1769|    460|    {
 1770|    460|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|    460|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    460|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|    460|        return std::move(this->get_unexpected().error());
 1772|    460|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  487|    460|    {
  488|    460|        return m_unexpected;
  489|    460|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1639|  1.91k|        : base(unexpect, std::forward<Args>(args)...),
 1640|  1.91k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|  1.91k|    {
 1642|  1.91k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  464|  8.28k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  8.28k|          m_has_value(false)
  466|  8.28k|    {
  467|  8.28k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  2.44k|    {
 2883|  2.44k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  2.44k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  2.44k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  2.44k|    {
 2864|  2.44k|        return decay_copy(t.begin());
 2865|  2.44k|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEEu7__decayIT_EOSA_:
 2107|  5.27k|{
 2108|  5.27k|    return SCN_FWD(t);
  ------------------
  |  | 1110|  5.27k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|  5.27k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E5beginEv:
 3493|  2.44k|    {
 3494|  2.44k|        return m_iterator;
 3495|  2.44k|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|  2.44k|    {
 2940|  2.44k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  2.44k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  2.44k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|  2.44k|    {
 2922|  2.44k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|  2.44k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|  2.44k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E3endEv:
 3497|  2.44k|    {
 3498|  2.44k|        return m_sentinel;
 3499|  2.44k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_EC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESF_SA_:
 3478|  2.44k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  2.44k|    static_cast<    \
  |  | 1109|  2.44k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  2.44k|    static_cast<    \
  |  | 1109|  2.44k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|  2.44k|    {
 3480|  2.44k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEcvbEv:
 1753|  6.06k|    {
 1754|  6.06k|        return has_value();
 1755|  6.06k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE9has_valueEv:
  504|  12.1k|    {
  505|  12.1k|        return m_has_value;
  506|  12.1k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEE5errorEv:
 1759|    238|    {
 1760|    238|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|    238|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    238|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|    238|        return this->get_unexpected().error();
 1762|    238|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|    238|    {
  488|    238|        return m_unexpected;
  489|    238|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1818|  5.82k|    {
 1819|  5.82k|        return std::move(value());
 1820|  5.82k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1782|  5.82k|    {
 1783|  5.82k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  5.82k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  5.82k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  5.82k|        return this->get_value();
 1785|  5.82k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE9get_valueEv:
  470|  5.82k|    {
  471|  5.82k|        return m_value;
  472|  5.82k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  11.9k|    {
 1330|  11.9k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1583|  11.9k|        : base(std::in_place, std::forward<U>(val)),
 1584|  11.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  11.9k|    {
 1586|  11.9k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  455|  11.9k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  11.9k|    {
  457|  11.9k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1753|  11.9k|    {
 1754|  11.9k|        return has_value();
 1755|  11.9k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  504|  23.8k|    {
  505|  23.8k|        return m_has_value;
  506|  23.8k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1818|  11.9k|    {
 1819|  11.9k|        return std::move(value());
 1820|  11.9k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1782|  11.9k|    {
 1783|  11.9k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  11.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  11.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  11.9k|        return this->get_value();
 1785|  11.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  470|  11.9k|    {
  471|  11.9k|        return m_value;
  472|  11.9k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1629|  6.36k|        : base(unexpect, std::move(e.error())),
 1630|  6.36k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  6.36k|    {
 1632|  6.36k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1629|    854|        : base(unexpect, std::move(e.error())),
 1630|    854|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|    854|    {
 1632|    854|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  464|  1.31k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  1.31k|          m_has_value(false)
  466|  1.31k|    {
  467|  1.31k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  9.51k|    {
 1330|  9.51k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2INS8_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S8_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1629|  6.06k|        : base(unexpect, std::move(e.error())),
 1630|  6.06k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  6.06k|    {
 1632|  6.06k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  464|  6.06k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  6.06k|          m_has_value(false)
  466|  6.06k|    {
  467|  6.06k|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEcvbEv:
 1753|  8.78k|    {
 1754|  8.78k|        return has_value();
 1755|  8.78k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9has_valueEv:
  504|  17.1k|    {
  505|  17.1k|        return m_has_value;
  506|  17.1k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1759|  3.18k|    {
 1760|  3.18k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  3.18k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.18k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  3.18k|        return this->get_unexpected().error();
 1762|  3.18k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  487|  4.31k|    {
  488|  4.31k|        return m_unexpected;
  489|  4.31k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1583|  1.54k|        : base(std::in_place, std::forward<U>(val)),
 1584|  1.54k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  1.54k|    {
 1586|  1.54k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  455|  1.54k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  1.54k|    {
  457|  1.54k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  1.54k|    {
 1330|  1.54k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1782|  2.14k|    {
 1783|  2.14k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  2.14k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.14k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  2.14k|        return this->get_value();
 1785|  2.14k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9get_valueEv:
  470|  2.14k|    {
  471|  2.14k|        return m_value;
  472|  2.14k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1753|  1.15k|    {
 1754|  1.15k|        return has_value();
 1755|  1.15k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  504|  3.08k|    {
  505|  3.08k|        return m_has_value;
  506|  3.08k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  1.15k|    {
 1330|  1.15k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1818|  1.54k|    {
 1819|  1.54k|        return std::move(value());
 1820|  1.54k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|  1.54k|    {
 1783|  1.54k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  1.54k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.54k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  1.54k|        return this->get_value();
 1785|  1.54k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  470|  1.54k|    {
  471|  1.54k|        return m_value;
  472|  1.54k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3497|   116k|    {
 3498|   116k|        return m_sentinel;
 3499|   116k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1992|  2.60k|    {
 1993|  2.60k|        return detail::transform_error_impl(std::move(*this),
 1994|  2.60k|                                            std::forward<F>(f));
 1995|  2.60k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1475|  2.60k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  2.60k|    else {
 1486|  2.60k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  2.60k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  2.60k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 2.14k, False: 460]
  |  |  ------------------
  ------------------
 1488|  2.60k|                   ? result(*std::forward<Exp>(exp))
 1489|  2.60k|                   : result(unexpect,
 1490|    460|                            trivial_invoke(std::forward<F>(f),
 1491|    460|                                           std::forward<Exp>(exp).error()));
 1492|  2.60k|    }
 1493|  2.60k|}
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1583|  2.14k|        : base(std::in_place, std::forward<U>(val)),
 1584|  2.14k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  2.14k|    {
 1586|  2.14k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  455|  2.14k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  2.14k|    {
  457|  2.14k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1639|    460|        : base(unexpect, std::forward<Args>(args)...),
 1640|    460|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|    460|    {
 1642|    460|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1818|  2.14k|    {
 1819|  2.14k|        return std::move(value());
 1820|  2.14k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3493|   132k|    {
 3494|   132k|        return m_iterator;
 3495|   132k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1583|  1.15k|        : base(std::in_place, std::forward<U>(val)),
 1584|  1.15k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  1.15k|    {
 1586|  1.15k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  455|  1.15k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  1.15k|    {
  457|  1.15k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1992|  1.15k|    {
 1993|  1.15k|        return detail::transform_error_impl(std::move(*this),
 1994|  1.15k|                                            std::forward<F>(f));
 1995|  1.15k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSJ_OT0_:
 1475|  1.15k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  1.15k|    else {
 1486|  1.15k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  1.15k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  1.15k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 1.15k, False: 0]
  |  |  ------------------
  ------------------
 1488|  1.15k|                   ? result(*std::forward<Exp>(exp))
 1489|  1.15k|                   : result(unexpect,
 1490|      0|                            trivial_invoke(std::forward<F>(f),
 1491|      0|                                           std::forward<Exp>(exp).error()));
 1492|  1.15k|    }
 1493|  1.15k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  504|  2.30k|    {
  505|  2.30k|        return m_has_value;
  506|  2.30k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1818|  1.15k|    {
 1819|  1.15k|        return std::move(value());
 1820|  1.15k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1782|  1.15k|    {
 1783|  1.15k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  1.15k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.15k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  1.15k|        return this->get_value();
 1785|  1.15k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  470|  1.15k|    {
  471|  1.15k|        return m_value;
  472|  1.15k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1583|  1.15k|        : base(std::in_place, std::forward<U>(val)),
 1584|  1.15k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  1.15k|    {
 1586|  1.15k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  455|  1.15k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  1.15k|    {
  457|  1.15k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  1.15k|    {
 1330|  1.15k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEcvbEv:
 1753|  1.15k|    {
 1754|  1.15k|        return has_value();
 1755|  1.15k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  2.30k|    {
  505|  2.30k|        return m_has_value;
  506|  2.30k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1818|  1.15k|    {
 1819|  1.15k|        return std::move(value());
 1820|  1.15k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1782|  1.15k|    {
 1783|  1.15k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  1.15k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.15k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  1.15k|        return this->get_value();
 1785|  1.15k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  1.15k|    {
  471|  1.15k|        return m_value;
  472|  1.15k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1992|  1.12k|    {
 1993|  1.12k|        return detail::transform_error_impl(std::move(*this),
 1994|  1.12k|                                            std::forward<F>(f));
 1995|  1.12k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1475|  1.12k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  1.12k|    else {
 1486|  1.12k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  1.12k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  1.12k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 1.12k]
  |  |  ------------------
  ------------------
 1488|  1.12k|                   ? result(*std::forward<Exp>(exp))
 1489|  1.12k|                   : result(unexpect,
 1490|  1.12k|                            trivial_invoke(std::forward<F>(f),
 1491|  1.12k|                                           std::forward<Exp>(exp).error()));
 1492|  1.12k|    }
 1493|  1.12k|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1769|  1.12k|    {
 1770|  1.12k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  1.12k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.12k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|  1.12k|        return std::move(this->get_unexpected().error());
 1772|  1.12k|    }
_ZN3scn2v413scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3928|  1.91k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1108|  1.91k|    static_cast<    \
  |  | 1109|  1.91k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3929|  1.91k|    {
 3930|  1.91k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESK_SF_:
 3478|  54.9k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  54.9k|    static_cast<    \
  |  | 1109|  54.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  54.9k|    static_cast<    \
  |  | 1109|  54.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|  54.9k|    {
 3480|  54.9k|    }
_ZN3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEC2ISH_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1629|     24|        : base(unexpect, std::move(e.error())),
 1630|     24|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|     24|    {
 1632|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  651|     24|        : m_has_value(false)
  652|     24|    {
  653|     24|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  654|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  715|     24|    {
  716|     24|        scn::detail::construct_at(unexpected_ptr(),
  717|     24|                                  std::forward<Args>(args)...);
  718|     24|        m_has_value = false;
  719|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  744|     72|    {
  745|     72|        return reinterpret_cast<unexpected<E>*>(
  746|     72|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1074|     72|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  747|     72|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|     24|    {
 1330|     24|    }
_ZNK3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEcvbEv:
 1753|     24|    {
 1754|     24|        return has_value();
 1755|     24|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE9has_valueEv:
  701|     72|    {
  702|     72|        return m_has_value;
  703|     72|    }
_ZNR3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEE5errorEv:
 1759|     24|    {
 1760|     24|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|     24|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|     24|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|     24|        return this->get_unexpected().error();
 1762|     24|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  684|     24|    {
  685|     24|        return *unexpected_ptr();
  686|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EED2Ev:
  657|     24|    {
  658|     24|        if (has_value()) {
  ------------------
  |  Branch (658:13): [True: 0, False: 24]
  ------------------
  659|      0|            destroy_value();
  660|      0|        }
  661|     24|        else {
  662|     24|            destroy_unexpected();
  663|     24|        }
  664|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  726|     24|    {
  727|     24|        scn::detail::destroy_at(unexpected_ptr());
  728|     24|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEcvbEv:
 1753|  12.4k|    {
 1754|  12.4k|        return has_value();
 1755|  12.4k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9has_valueEv:
  504|  24.0k|    {
  505|  24.0k|        return m_has_value;
  506|  24.0k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5errorEv:
 1759|  7.88k|    {
 1760|  7.88k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  7.88k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  7.88k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  7.88k|        return this->get_unexpected().error();
 1762|  7.88k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  7.88k|    {
  488|  7.88k|        return m_unexpected;
  489|  7.88k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1818|  2.85k|    {
 1819|  2.85k|        return std::move(value());
 1820|  2.85k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1782|  3.73k|    {
 1783|  3.73k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  3.73k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.73k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  3.73k|        return this->get_value();
 1785|  3.73k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9get_valueEv:
  470|  3.73k|    {
  471|  3.73k|        return m_value;
  472|  3.73k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1629|  1.04k|        : base(unexpect, std::move(e.error())),
 1630|  1.04k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  1.04k|    {
 1632|  1.04k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  464|  1.14k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  1.14k|          m_has_value(false)
  466|  1.14k|    {
  467|  1.14k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  14.5k|    {
 1330|  14.5k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1629|  11.4k|        : base(unexpect, std::move(e.error())),
 1630|  11.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  11.4k|    {
 1632|  11.4k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  464|  11.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  11.4k|          m_has_value(false)
  466|  11.4k|    {
  467|  11.4k|    }
_ZNK3scn2v48expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1753|  15.4k|    {
 1754|  15.4k|        return has_value();
 1755|  15.4k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  504|  24.1k|    {
  505|  24.1k|        return m_has_value;
  506|  24.1k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1759|  5.69k|    {
 1760|  5.69k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  5.69k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  5.69k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  5.69k|        return this->get_unexpected().error();
 1762|  5.69k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  487|  5.69k|    {
  488|  5.69k|        return m_unexpected;
  489|  5.69k|    }
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1583|  3.71k|        : base(std::in_place, std::forward<U>(val)),
 1584|  3.71k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  3.71k|    {
 1586|  3.71k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  455|  3.71k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  3.71k|    {
  457|  3.71k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  3.71k|    {
 1330|  3.71k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1782|  1.99k|    {
 1783|  1.99k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  1.99k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.99k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  1.99k|        return this->get_value();
 1785|  1.99k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  470|  1.99k|    {
  471|  1.99k|        return m_value;
  472|  1.99k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1753|  2.78k|    {
 1754|  2.78k|        return has_value();
 1755|  2.78k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  504|  7.42k|    {
  505|  7.42k|        return m_has_value;
  506|  7.42k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  2.78k|    {
 1330|  2.78k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1818|  3.71k|    {
 1819|  3.71k|        return std::move(value());
 1820|  3.71k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1782|  3.71k|    {
 1783|  3.71k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  3.71k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.71k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  3.71k|        return this->get_value();
 1785|  3.71k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  470|  3.71k|    {
  471|  3.71k|        return m_value;
  472|  3.71k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3388|   161k|    {
 3389|   161k|        return detail::to_address(ranges::begin(derived()));
 3390|   161k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   161k|    {
 2883|   161k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   161k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   161k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   161k|    {
 2864|   161k|        return decay_copy(t.begin());
 2865|   161k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3347|   161k|    {
 3348|   161k|        return static_cast<D&>(*this);
 3349|   161k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1583|  1.99k|        : base(std::in_place, std::forward<U>(val)),
 1584|  1.99k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  1.99k|    {
 1586|  1.99k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|  1.99k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  1.99k|    {
  457|  1.99k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1583|  2.78k|        : base(std::in_place, std::forward<U>(val)),
 1584|  2.78k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  2.78k|    {
 1586|  2.78k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  455|  2.78k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  2.78k|    {
  457|  2.78k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1992|  2.78k|    {
 1993|  2.78k|        return detail::transform_error_impl(std::move(*this),
 1994|  2.78k|                                            std::forward<F>(f));
 1995|  2.78k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1475|  2.78k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  2.78k|    else {
 1486|  2.78k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  2.78k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  2.78k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 2.78k, False: 0]
  |  |  ------------------
  ------------------
 1488|  2.78k|                   ? result(*std::forward<Exp>(exp))
 1489|  2.78k|                   : result(unexpect,
 1490|      0|                            trivial_invoke(std::forward<F>(f),
 1491|      0|                                           std::forward<Exp>(exp).error()));
 1492|  2.78k|    }
 1493|  2.78k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  504|  5.56k|    {
  505|  5.56k|        return m_has_value;
  506|  5.56k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1818|  2.78k|    {
 1819|  2.78k|        return std::move(value());
 1820|  2.78k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1782|  2.78k|    {
 1783|  2.78k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  2.78k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.78k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  2.78k|        return this->get_value();
 1785|  2.78k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  470|  2.78k|    {
  471|  2.78k|        return m_value;
  472|  2.78k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1583|  2.78k|        : base(std::in_place, std::forward<U>(val)),
 1584|  2.78k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  2.78k|    {
 1586|  2.78k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  455|  2.78k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  2.78k|    {
  457|  2.78k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  2.78k|    {
 1330|  2.78k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1753|  2.78k|    {
 1754|  2.78k|        return has_value();
 1755|  2.78k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  504|  5.56k|    {
  505|  5.56k|        return m_has_value;
  506|  5.56k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1818|  2.78k|    {
 1819|  2.78k|        return std::move(value());
 1820|  2.78k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1782|  2.78k|    {
 1783|  2.78k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  2.78k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.78k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  2.78k|        return this->get_value();
 1785|  2.78k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  470|  2.78k|    {
  471|  2.78k|        return m_value;
  472|  2.78k|    }
_ZN3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISD_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SD_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1629|     24|        : base(unexpect, std::move(e.error())),
 1630|     24|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|     24|    {
 1632|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  651|     24|        : m_has_value(false)
  652|     24|    {
  653|     24|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  654|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  715|     24|    {
  716|     24|        scn::detail::construct_at(unexpected_ptr(),
  717|     24|                                  std::forward<Args>(args)...);
  718|     24|        m_has_value = false;
  719|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  744|     72|    {
  745|     72|        return reinterpret_cast<unexpected<E>*>(
  746|     72|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1074|     72|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  747|     72|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|     24|    {
 1330|     24|    }
_ZNK3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1753|     24|    {
 1754|     24|        return has_value();
 1755|     24|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  701|     72|    {
  702|     72|        return m_has_value;
  703|     72|    }
_ZNR3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1759|     24|    {
 1760|     24|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|     24|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|     24|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|     24|        return this->get_unexpected().error();
 1762|     24|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  684|     24|    {
  685|     24|        return *unexpected_ptr();
  686|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  657|     24|    {
  658|     24|        if (has_value()) {
  ------------------
  |  Branch (658:13): [True: 0, False: 24]
  ------------------
  659|      0|            destroy_value();
  660|      0|        }
  661|     24|        else {
  662|     24|            destroy_unexpected();
  663|     24|        }
  664|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  726|     24|    {
  727|     24|        scn::detail::destroy_at(unexpected_ptr());
  728|     24|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3013|   157k|    {
 3014|   157k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1110|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3015|   157k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2994|   157k|    {
 2995|   157k|        return t.data();
 2996|   157k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1583|  5.05k|        : base(std::in_place, std::forward<U>(val)),
 1584|  5.05k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  5.05k|    {
 1586|  5.05k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  455|  5.05k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  5.05k|    {
  457|  5.05k|    }
_ZNO3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS7_v:
 1818|    212|    {
 1819|    212|        return std::move(value());
 1820|    212|    }
_ZN3scn2v46detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1363|  3.30k|{
 1364|  3.30k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1365|  3.30k|}
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 1992|    394|    {
 1993|    394|        return detail::transform_error_impl(std::move(*this),
 1994|    394|                                            std::forward<F>(f));
 1995|    394|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESG_EEDaOSK_OT0_:
 1475|    394|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|    394|    else {
 1486|    394|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|    394|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|    394|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 394, False: 0]
  |  |  ------------------
  ------------------
 1488|    394|                   ? result(*std::forward<Exp>(exp))
 1489|    394|                   : result(unexpect,
 1490|      0|                            trivial_invoke(std::forward<F>(f),
 1491|      0|                                           std::forward<Exp>(exp).error()));
 1492|    394|    }
 1493|    394|}
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1583|    394|        : base(std::in_place, std::forward<U>(val)),
 1584|    394|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|    394|    {
 1586|    394|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  455|    394|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|    394|    {
  457|    394|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|    394|    {
 1330|    394|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1753|    394|    {
 1754|    394|        return has_value();
 1755|    394|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  504|    788|    {
  505|    788|        return m_has_value;
  506|    788|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1818|    394|    {
 1819|    394|        return std::move(value());
 1820|    394|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|    394|    {
 1783|    394|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|    394|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    394|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|    394|        return this->get_value();
 1785|    394|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  470|    394|    {
  471|    394|        return m_value;
  472|    394|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1978|    788|    {
 1979|    788|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1980|    788|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSI_OT0_:
 1475|    788|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|    788|    else {
 1486|    788|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|    788|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|    788|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 788]
  |  |  ------------------
  ------------------
 1488|    788|                   ? result(*std::forward<Exp>(exp))
 1489|    788|                   : result(unexpect,
 1490|    788|                            trivial_invoke(std::forward<F>(f),
 1491|    788|                                           std::forward<Exp>(exp).error()));
 1492|    788|    }
 1493|    788|}
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1808|    882|    {
 1809|    882|        return value();
 1810|    882|    }
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3953|      8|    auto&& SCN_TRY_TMP = (x);                          \
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|    386|    {
 2883|    386|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|    386|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|    386|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|    386|    {
 2864|    386|        return decay_copy(t.begin());
 2865|    386|    }
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3953|    356|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1992|    930|    {
 1993|    930|        return detail::transform_error_impl(std::move(*this),
 1994|    930|                                            std::forward<F>(f));
 1995|    930|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1475|    930|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|    930|    else {
 1486|    930|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|    930|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|    930|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 930, False: 0]
  |  |  ------------------
  ------------------
 1488|    930|                   ? result(*std::forward<Exp>(exp))
 1489|    930|                   : result(unexpect,
 1490|      0|                            trivial_invoke(std::forward<F>(f),
 1491|      0|                                           std::forward<Exp>(exp).error()));
 1492|    930|    }
 1493|    930|}
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1583|    930|        : base(std::in_place, std::forward<U>(val)),
 1584|    930|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|    930|    {
 1586|    930|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  455|    930|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|    930|    {
  457|    930|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|    930|    {
 1330|    930|    }
_ZNK3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1753|    930|    {
 1754|    930|        return has_value();
 1755|    930|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.86k|    {
  505|  1.86k|        return m_has_value;
  506|  1.86k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1818|    930|    {
 1819|    930|        return std::move(value());
 1820|    930|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1782|    930|    {
 1783|    930|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|    930|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    930|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|    930|        return this->get_value();
 1785|    930|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  470|    930|    {
  471|    930|        return m_value;
  472|    930|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|    952|    {
 1979|    952|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1980|    952|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1475|    952|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|    952|    else {
 1486|    952|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|    952|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|    952|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 952]
  |  |  ------------------
  ------------------
 1488|    952|                   ? result(*std::forward<Exp>(exp))
 1489|    952|                   : result(unexpect,
 1490|    952|                            trivial_invoke(std::forward<F>(f),
 1491|    952|                                           std::forward<Exp>(exp).error()));
 1492|    952|    }
 1493|    952|}
_ZN3scn2v413scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3928|    952|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1108|    952|    static_cast<    \
  |  | 1109|    952|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3929|    952|    {
 3930|    952|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1808|  9.59k|    {
 1809|  9.59k|        return value();
 1810|  9.59k|    }
_ZN3scn2v46detail22parse_presentation_setIcRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
 7529|  4.11k|{
 7530|  4.11k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  4.11k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  4.11k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7531|  4.11k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  | 1104|  4.11k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  4.11k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7532|       |
 7533|  4.11k|    auto start = begin;
 7534|  4.11k|    ++begin;
 7535|       |
 7536|  4.11k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  4.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 4.11k]
  |  |  ------------------
  ------------------
 7537|       |        // clang-format off
 7538|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7539|       |        // clang-format on
 7540|      0|        return {};
 7541|      0|    }
 7542|  4.11k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7542:9): [True: 492, False: 3.61k]
  ------------------
 7543|    492|        handler.on_charset_inverted();
 7544|    492|        ++begin;
 7545|    492|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|    492|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 492]
  |  |  ------------------
  ------------------
 7546|       |            // clang-format off
 7547|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7548|       |            // clang-format on
 7549|      0|            return {};
 7550|      0|        }
 7551|    492|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7551:13): [True: 6, False: 486]
  ------------------
 7552|      6|            handler.on_charset_single(char32_t{']'});
 7553|      6|            ++begin;
 7554|      6|        }
 7555|    492|    }
 7556|  3.61k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7556:14): [True: 0, False: 3.61k]
  ------------------
 7557|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7558|      0|    }
 7559|       |
 7560|   803k|    while (begin != end) {
  ------------------
  |  Branch (7560:12): [True: 803k, False: 0]
  ------------------
 7561|   803k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1039|   803k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 803k]
  |  |  ------------------
  ------------------
 7562|      0|            break;
 7563|      0|        }
 7564|       |
 7565|   803k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7565:13): [True: 4.11k, False: 799k]
  ------------------
 7566|  4.11k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7567|  4.11k|        }
 7568|       |
 7569|   799k|        parse_presentation_set_literal(begin, end, handler);
 7570|   799k|    }
 7571|       |
 7572|      0|    SCN_UNLIKELY_ATTR
 7573|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7574|      0|    return {};
 7575|  4.11k|}
_ZN3scn2v46detail30parse_presentation_set_literalIcRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
 7493|   799k|{
 7494|   799k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   799k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   799k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7495|       |
 7496|   799k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7497|   799k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  | 1039|   799k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 799k]
  |  |  ------------------
  ------------------
 7498|      0|        return;
 7499|      0|    }
 7500|       |
 7501|   799k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7501:9): [True: 799k, False: 0]
  |  Branch (7501:25): [True: 4.37k, False: 795k]
  |  Branch (7501:49): [True: 4.37k, False: 0]
  ------------------
 7502|   799k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7502:9): [True: 4.30k, False: 72]
  ------------------
 7503|  4.30k|        ++begin;
 7504|       |
 7505|  4.30k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7506|  4.30k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  | 1039|  4.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 4.30k]
  |  |  ------------------
  ------------------
 7507|      0|            return;
 7508|      0|        }
 7509|       |
 7510|  4.30k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  | 1039|  4.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 4.30k]
  |  |  ------------------
  ------------------
 7511|       |            // clang-format off
 7512|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7513|       |            // clang-format on
 7514|      0|            return;
 7515|      0|        }
 7516|       |
 7517|  4.30k|        handler.on_charset_range(cp_first, cp_second + 1);
 7518|  4.30k|        return;
 7519|  4.30k|    }
 7520|       |
 7521|   795k|    handler.on_charset_single(cp_first);
 7522|   795k|}
_ZN3scn2v46detail33parse_presentation_set_code_pointIcRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
 7469|   804k|{
 7470|   804k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   804k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   804k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7471|       |
 7472|   804k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7473|   804k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  | 1039|  1.60M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 804k]
  |  |  |  Branch (1039:45): [True: 0, False: 804k]
  |  |  |  Branch (1039:45): [True: 0, False: 804k]
  |  |  ------------------
  ------------------
 7474|      0|        handler.on_error("Invalid encoding in format string");
 7475|      0|        return invalid_code_point;
 7476|      0|    }
 7477|       |
 7478|   804k|    const auto cp =
 7479|   804k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7480|   804k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  | 1039|   804k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 804k]
  |  |  ------------------
  ------------------
 7481|      0|        handler.on_error("Invalid encoding in format string");
 7482|      0|        return invalid_code_point;
 7483|      0|    }
 7484|       |
 7485|   804k|    begin += len;
 7486|   804k|    return cp;
 7487|   804k|}
_ZNK3scn2v46detail12format_specs14charset_stringIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 7088|  5.38k|    {
 7089|  5.38k|        return {reinterpret_cast<const CharT*>(charset_string_data),
 7090|  5.38k|                charset_string_size};
 7091|  5.38k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IRKS7_vEEOT_:
 1583|    882|        : base(std::in_place, std::forward<U>(val)),
 1584|    882|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|    882|    {
 1586|    882|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJRKS8_EvEENSt3__110in_place_tEDpOT_:
  455|    882|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|    882|    {
  457|    882|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1583|  2.62k|        : base(std::in_place, std::forward<U>(val)),
 1584|  2.62k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  2.62k|    {
 1586|  2.62k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  455|  2.62k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  2.62k|    {
  457|  2.62k|    }
_ZN3scn2v46detail34decode_code_point_exhaustive_validIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4311|   216k|{
 4312|   216k|    if constexpr (sizeof(CharT) == 1) {
 4313|   216k|        return decode_utf8_code_point_exhaustive_valid(input);
 4314|       |    }
 4315|       |    else if constexpr (sizeof(CharT) == 2) {
 4316|       |        return decode_utf16_code_point_exhaustive_valid(input);
 4317|       |    }
 4318|       |    else {
 4319|       |        SCN_EXPECT(input.size() == 1);
 4320|       |        return static_cast<char32_t>(input.front());
 4321|       |    }
 4322|   216k|}
_ZZN3scn2v46detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4189|  37.2k|    const auto is_trailing_code_unit = [](char ch) {
 4190|  37.2k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4191|  37.2k|    };
_ZNK3scn2v46detail9fill_type13get_code_unitIwEET_v:
 7023|  2.11k|    {
 7024|  2.11k|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  | 1104|  2.11k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.11k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7025|  2.11k|        CharT r{};
 7026|  2.11k|        std::memcpy(&r, m_data, m_size);
 7027|  2.11k|        return r;
 7028|  2.11k|    }
_ZN3scn2v46detail39code_point_length_by_starting_code_unitIwEEmT_:
 4085|   965k|{
 4086|       |    if constexpr (sizeof(U) == 1) {
 4087|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 4088|       |    }
 4089|       |    else if constexpr (sizeof(U) == 2) {
 4090|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4091|       |    }
 4092|   965k|    else {
 4093|       |        // utf-32
 4094|   965k|        static_assert(sizeof(U) == 4);
 4095|   965k|        SCN_UNUSED(ch);
  ------------------
  |  | 1089|   965k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4096|   965k|        return 1;
 4097|   965k|    }
 4098|   965k|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4291|   912k|{
 4292|       |    if constexpr (sizeof(CharT) == 1) {
 4293|       |        return decode_utf8_code_point_exhaustive(input);
 4294|       |    }
 4295|       |    else if constexpr (sizeof(CharT) == 2) {
 4296|       |        return decode_utf16_code_point_exhaustive(input);
 4297|       |    }
 4298|   912k|    else {
 4299|   912k|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  | 1104|   912k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   912k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4300|   912k|        auto cp = static_cast<char32_t>(input.front());
 4301|   912k|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  | 1039|   912k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 65.0k, False: 847k]
  |  |  ------------------
  ------------------
 4302|  65.0k|            return invalid_code_point;
 4303|  65.0k|        }
 4304|   847k|        return cp;
 4305|   912k|    }
 4306|   912k|}
_ZN3scn2v46detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3977|  70.5k|{
 3978|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3979|       |                                          decltype(first), decltype(last)> &&
 3980|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3981|       |        return {first, last};
 3982|       |    }
 3983|  70.5k|    else {
 3984|  70.5k|        return {to_address(first), static_cast<size_t>(std::distance(
 3985|  70.5k|                                       to_address(first), to_address(last)))};
 3986|  70.5k|    }
 3987|  70.5k|}
_ZN3scn2v46detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  330|   241k|{
  331|   241k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1110|   241k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  332|   241k|}
_ZN3scn2v46detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  308|   505k|{
  309|   505k|    return p;
  310|   505k|}
_ZN3scn2v46detail25make_string_view_iteratorIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 4008|  11.6k|{
 4009|       |    if constexpr (std::is_constructible_v<
 4010|       |                      typename std::basic_string_view<CharT>::iterator,
 4011|       |                      decltype(it)> &&
 4012|  11.6k|                  !SCN_MSVC_DEBUG_ITERATORS) {
 4013|  11.6k|        SCN_UNUSED(sv);
  ------------------
  |  | 1089|  11.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4014|  11.6k|        return it;
 4015|       |    }
 4016|       |    else {
 4017|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4018|       |    }
 4019|  11.6k|}
_ZN3scn2v46detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  330|   263k|{
  331|   263k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1110|   263k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  332|   263k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3509|   142k|    {
 3510|   142k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3511|   142k|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1629|    182|        : base(unexpect, std::move(e.error())),
 1630|    182|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|    182|    {
 1632|    182|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  464|    182|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|    182|          m_has_value(false)
  466|    182|    {
  467|    182|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  21.9k|    {
 1330|  21.9k|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1583|  21.7k|        : base(std::in_place, std::forward<U>(val)),
 1584|  21.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  21.7k|    {
 1586|  21.7k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|  21.7k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  21.7k|    {
  457|  21.7k|    }
_ZNK3scn2v48expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1753|  6.29k|    {
 1754|  6.29k|        return has_value();
 1755|  6.29k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  504|  37.5k|    {
  505|  37.5k|        return m_has_value;
  506|  37.5k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1808|     72|    {
 1809|     72|        return value();
 1810|     72|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1782|  15.5k|    {
 1783|  15.5k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  15.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  15.5k|        return this->get_value();
 1785|  15.5k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  470|  15.5k|    {
  471|  15.5k|        return m_value;
  472|  15.5k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1583|  3.59k|        : base(std::in_place, std::forward<U>(val)),
 1584|  3.59k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  3.59k|    {
 1586|  3.59k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  455|  3.59k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  3.59k|    {
  457|  3.59k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  3.93k|    {
 1330|  3.93k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1629|    340|        : base(unexpect, std::move(e.error())),
 1630|    340|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|    340|    {
 1632|    340|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  464|    340|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|    340|          m_has_value(false)
  466|    340|    {
  467|    340|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEcvbEv:
 1753|  1.61k|    {
 1754|  1.61k|        return has_value();
 1755|  1.61k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9has_valueEv:
  504|  6.31k|    {
  505|  6.31k|        return m_has_value;
  506|  6.31k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1808|     40|    {
 1809|     40|        return value();
 1810|     40|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1782|  2.03k|    {
 1783|  2.03k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  2.03k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.03k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  2.03k|        return this->get_value();
 1785|  2.03k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9get_valueEv:
  470|  2.03k|    {
  471|  2.03k|        return m_value;
  472|  2.03k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1629|    116|        : base(unexpect, std::move(e.error())),
 1630|    116|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|    116|    {
 1632|    116|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|    116|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|    116|          m_has_value(false)
  466|    116|    {
  467|    116|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  3.06k|    {
 1330|  3.06k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEC2ISA_vEEOT_:
 1583|  2.95k|        : base(std::in_place, std::forward<U>(val)),
 1584|  2.95k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  2.95k|    {
 1586|  2.95k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EEC2IJSB_EvEENS3_10in_place_tEDpOT_:
  455|  2.95k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  2.95k|    {
  457|  2.95k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1992|    714|    {
 1993|    714|        return detail::transform_error_impl(std::move(*this),
 1994|    714|                                            std::forward<F>(f));
 1995|    714|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1475|    714|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|    714|    else {
 1486|    714|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|    714|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|    714|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 714, False: 0]
  |  |  ------------------
  ------------------
 1488|    714|                   ? result(*std::forward<Exp>(exp))
 1489|    714|                   : result(unexpect,
 1490|      0|                            trivial_invoke(std::forward<F>(f),
 1491|      0|                                           std::forward<Exp>(exp).error()));
 1492|    714|    }
 1493|    714|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1818|  1.99k|    {
 1819|  1.99k|        return std::move(value());
 1820|  1.99k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1583|  2.01k|        : base(std::in_place, std::forward<U>(val)),
 1584|  2.01k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  2.01k|    {
 1586|  2.01k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  455|  2.01k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  2.01k|    {
  457|  2.01k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  6.35k|    {
 1330|  6.35k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5errorEv:
 1769|    326|    {
 1770|    326|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|    326|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    326|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|    326|        return std::move(this->get_unexpected().error());
 1772|    326|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  487|    340|    {
  488|    340|        return m_unexpected;
  489|    340|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1639|  1.12k|        : base(unexpect, std::forward<Args>(args)...),
 1640|  1.12k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|  1.12k|    {
 1642|  1.12k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  464|  3.76k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  3.76k|          m_has_value(false)
  466|  3.76k|    {
  467|  3.76k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|    968|    {
 2883|    968|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|    968|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|    968|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|    968|    {
 2864|    968|        return decay_copy(t.begin());
 2865|    968|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEEu7__decayIT_EOSA_:
 2107|  2.16k|{
 2108|  2.16k|    return SCN_FWD(t);
  ------------------
  |  | 1110|  2.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|  2.16k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_E5beginEv:
 3493|    968|    {
 3494|    968|        return m_iterator;
 3495|    968|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|    968|    {
 2940|    968|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|    968|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|    968|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|    968|    {
 2922|    968|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|    968|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|    968|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_E3endEv:
 3497|    968|    {
 3498|    968|        return m_sentinel;
 3499|    968|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_EC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESF_SA_:
 3478|    968|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|    968|    static_cast<    \
  |  | 1109|    968|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|    968|    static_cast<    \
  |  | 1109|    968|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|    968|    {
 3480|    968|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEcvbEv:
 1753|  3.06k|    {
 1754|  3.06k|        return has_value();
 1755|  3.06k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EE9has_valueEv:
  504|  6.13k|    {
  505|  6.13k|        return m_has_value;
  506|  6.13k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEE5errorEv:
 1759|    116|    {
 1760|    116|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|    116|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    116|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|    116|        return this->get_unexpected().error();
 1762|    116|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|    116|    {
  488|    116|        return m_unexpected;
  489|    116|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1818|  2.95k|    {
 1819|  2.95k|        return std::move(value());
 1820|  2.95k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1782|  2.95k|    {
 1783|  2.95k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  2.95k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.95k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  2.95k|        return this->get_value();
 1785|  2.95k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EE9get_valueEv:
  470|  2.95k|    {
  471|  2.95k|        return m_value;
  472|  2.95k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  7.66k|    {
 1330|  7.66k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1583|  7.66k|        : base(std::in_place, std::forward<U>(val)),
 1584|  7.66k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  7.66k|    {
 1586|  7.66k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  455|  7.66k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  7.66k|    {
  457|  7.66k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1992|  9.22k|    {
 1993|  9.22k|        return detail::transform_error_impl(std::move(*this),
 1994|  9.22k|                                            std::forward<F>(f));
 1995|  9.22k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1475|  9.22k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  9.22k|    else {
 1486|  9.22k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  9.22k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  9.22k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 9.22k, False: 0]
  |  |  ------------------
  ------------------
 1488|  9.22k|                   ? result(*std::forward<Exp>(exp))
 1489|  9.22k|                   : result(unexpect,
 1490|      0|                            trivial_invoke(std::forward<F>(f),
 1491|      0|                                           std::forward<Exp>(exp).error()));
 1492|  9.22k|    }
 1493|  9.22k|}
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1818|  15.4k|    {
 1819|  15.4k|        return std::move(value());
 1820|  15.4k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1769|    182|    {
 1770|    182|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|    182|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    182|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|    182|        return std::move(this->get_unexpected().error());
 1772|    182|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  487|    182|    {
  488|    182|        return m_unexpected;
  489|    182|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1639|  1.09k|        : base(unexpect, std::forward<Args>(args)...),
 1640|  1.09k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|  1.09k|    {
 1642|  1.09k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1753|  7.66k|    {
 1754|  7.66k|        return has_value();
 1755|  7.66k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  504|  15.3k|    {
  505|  15.3k|        return m_has_value;
  506|  15.3k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1818|  7.66k|    {
 1819|  7.66k|        return std::move(value());
 1820|  7.66k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1782|  7.66k|    {
 1783|  7.66k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  7.66k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  7.66k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  7.66k|        return this->get_value();
 1785|  7.66k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  470|  7.66k|    {
  471|  7.66k|        return m_value;
  472|  7.66k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1629|  2.63k|        : base(unexpect, std::move(e.error())),
 1630|  2.63k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  2.63k|    {
 1632|  2.63k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5errorEv:
 1759|     14|    {
 1760|     14|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|     14|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|     14|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|     14|        return this->get_unexpected().error();
 1762|     14|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1629|    586|        : base(unexpect, std::move(e.error())),
 1630|    586|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|    586|    {
 1632|    586|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  464|    912|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|    912|          m_has_value(false)
  466|    912|    {
  467|    912|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  6.10k|    {
 1330|  6.10k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IRS7_vEEOT_:
 1583|     58|        : base(std::in_place, std::forward<U>(val)),
 1584|     58|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|     58|    {
 1586|     58|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJRS8_EvEENSt3__110in_place_tEDpOT_:
  455|     58|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|     58|    {
  457|     58|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2INS8_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S8_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1629|  3.79k|        : base(unexpect, std::move(e.error())),
 1630|  3.79k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  3.79k|    {
 1632|  3.79k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  464|  3.79k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  3.79k|          m_has_value(false)
  466|  3.79k|    {
  467|  3.79k|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEcvbEv:
 1753|  5.65k|    {
 1754|  5.65k|        return has_value();
 1755|  5.65k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9has_valueEv:
  504|  10.9k|    {
  505|  10.9k|        return m_has_value;
  506|  10.9k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1759|  2.05k|    {
 1760|  2.05k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  2.05k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.05k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  2.05k|        return this->get_unexpected().error();
 1762|  2.05k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  487|  2.70k|    {
  488|  2.70k|        return m_unexpected;
  489|  2.70k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1583|  1.01k|        : base(std::in_place, std::forward<U>(val)),
 1584|  1.01k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  1.01k|    {
 1586|  1.01k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  455|  1.01k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  1.01k|    {
  457|  1.01k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  1.01k|    {
 1330|  1.01k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1808|    102|    {
 1809|    102|        return value();
 1810|    102|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1782|  1.42k|    {
 1783|  1.42k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  1.42k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.42k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  1.42k|        return this->get_value();
 1785|  1.42k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9get_valueEv:
  470|  1.42k|    {
  471|  1.42k|        return m_value;
  472|  1.42k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1753|    764|    {
 1754|    764|        return has_value();
 1755|    764|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  504|  2.02k|    {
  505|  2.02k|        return m_has_value;
  506|  2.02k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|    764|    {
 1330|    764|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1818|  1.01k|    {
 1819|  1.01k|        return std::move(value());
 1820|  1.01k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|  1.01k|    {
 1783|  1.01k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  1.01k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.01k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  1.01k|        return this->get_value();
 1785|  1.01k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  470|  1.01k|    {
  471|  1.01k|        return m_value;
  472|  1.01k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3497|  43.4k|    {
 3498|  43.4k|        return m_sentinel;
 3499|  43.4k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1992|  1.60k|    {
 1993|  1.60k|        return detail::transform_error_impl(std::move(*this),
 1994|  1.60k|                                            std::forward<F>(f));
 1995|  1.60k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1475|  1.60k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  1.60k|    else {
 1486|  1.60k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  1.60k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  1.60k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 1.28k, False: 326]
  |  |  ------------------
  ------------------
 1488|  1.60k|                   ? result(*std::forward<Exp>(exp))
 1489|  1.60k|                   : result(unexpect,
 1490|    326|                            trivial_invoke(std::forward<F>(f),
 1491|    326|                                           std::forward<Exp>(exp).error()));
 1492|  1.60k|    }
 1493|  1.60k|}
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1583|  1.34k|        : base(std::in_place, std::forward<U>(val)),
 1584|  1.34k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  1.34k|    {
 1586|  1.34k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  455|  1.34k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  1.34k|    {
  457|  1.34k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1639|    326|        : base(unexpect, std::forward<Args>(args)...),
 1640|    326|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|    326|    {
 1642|    326|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1818|  1.32k|    {
 1819|  1.32k|        return std::move(value());
 1820|  1.32k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3493|  56.1k|    {
 3494|  56.1k|        return m_iterator;
 3495|  56.1k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1583|    764|        : base(std::in_place, std::forward<U>(val)),
 1584|    764|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|    764|    {
 1586|    764|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  455|    764|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|    764|    {
  457|    764|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1992|    764|    {
 1993|    764|        return detail::transform_error_impl(std::move(*this),
 1994|    764|                                            std::forward<F>(f));
 1995|    764|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSJ_OT0_:
 1475|    764|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|    764|    else {
 1486|    764|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|    764|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|    764|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 764, False: 0]
  |  |  ------------------
  ------------------
 1488|    764|                   ? result(*std::forward<Exp>(exp))
 1489|    764|                   : result(unexpect,
 1490|      0|                            trivial_invoke(std::forward<F>(f),
 1491|      0|                                           std::forward<Exp>(exp).error()));
 1492|    764|    }
 1493|    764|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  504|  1.52k|    {
  505|  1.52k|        return m_has_value;
  506|  1.52k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1818|    764|    {
 1819|    764|        return std::move(value());
 1820|    764|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1782|    764|    {
 1783|    764|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|    764|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    764|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|    764|        return this->get_value();
 1785|    764|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  470|    764|    {
  471|    764|        return m_value;
  472|    764|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1583|    764|        : base(std::in_place, std::forward<U>(val)),
 1584|    764|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|    764|    {
 1586|    764|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  455|    764|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|    764|    {
  457|    764|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|    764|    {
 1330|    764|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEcvbEv:
 1753|    764|    {
 1754|    764|        return has_value();
 1755|    764|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.52k|    {
  505|  1.52k|        return m_has_value;
  506|  1.52k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1818|    764|    {
 1819|    764|        return std::move(value());
 1820|    764|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1782|    764|    {
 1783|    764|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|    764|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    764|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|    764|        return this->get_value();
 1785|    764|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  470|    764|    {
  471|    764|        return m_value;
  472|    764|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1992|    694|    {
 1993|    694|        return detail::transform_error_impl(std::move(*this),
 1994|    694|                                            std::forward<F>(f));
 1995|    694|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSJ_OT0_:
 1475|    694|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|    694|    else {
 1486|    694|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|    694|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|    694|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 38, False: 656]
  |  |  ------------------
  ------------------
 1488|    694|                   ? result(*std::forward<Exp>(exp))
 1489|    694|                   : result(unexpect,
 1490|    656|                            trivial_invoke(std::forward<F>(f),
 1491|    656|                                           std::forward<Exp>(exp).error()));
 1492|    694|    }
 1493|    694|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1769|    656|    {
 1770|    656|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|    656|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    656|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|    656|        return std::move(this->get_unexpected().error());
 1772|    656|    }
_ZN3scn2v413scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3928|  1.16k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1108|  1.16k|    static_cast<    \
  |  | 1109|  1.16k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3929|  1.16k|    {
 3930|  1.16k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESK_SF_:
 3478|  19.2k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  19.2k|    static_cast<    \
  |  | 1109|  19.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  19.2k|    static_cast<    \
  |  | 1109|  19.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|  19.2k|    {
 3480|  19.2k|    }
_ZN3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEC2ISK_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISK_OT_EEvE4typeELPv0ETnPNSN_IXsr3stdE16is_convertible_vISP_SK_EEvE4typeELST_0EEEONS0_10unexpectedISO_EE:
 1629|     44|        : base(unexpect, std::move(e.error())),
 1630|     44|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|     44|    {
 1632|     44|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EEC2IJSL_EvEENS0_10unexpect_tEDpOT_:
  651|     44|        : m_has_value(false)
  652|     44|    {
  653|     44|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  654|     44|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESL_EEEvDpOT_:
  715|     44|    {
  716|     44|        scn::detail::construct_at(unexpected_ptr(),
  717|     44|                                  std::forward<Args>(args)...);
  718|     44|        m_has_value = false;
  719|     44|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  744|    132|    {
  745|    132|        return reinterpret_cast<unexpected<E>*>(
  746|    132|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1074|    132|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  747|    132|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|     52|    {
 1330|     52|    }
_ZN3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEC2ISJ_vEEOT_:
 1583|      8|        : base(std::in_place, std::forward<U>(val)),
 1584|      8|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|      8|    {
 1586|      8|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EEC2IJSK_EvEENS3_10in_place_tEDpOT_:
  641|      8|        : m_has_value(true)
  642|      8|    {
  643|      8|        construct(std::forward<Args>(args)...);
  644|      8|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSK_EEEvDpOT_:
  708|      8|    {
  709|      8|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  710|      8|        m_has_value = true;
  711|      8|    }
_ZN3scn2v46detail12construct_atINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEEJSK_EEEPT_SM_DpOT0_:
  410|      8|{
  411|      8|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|      8|        T(std::forward<Args>(args)...);
  413|      8|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  732|     24|    {
  733|     24|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1074|     24|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  734|     24|    }
_ZNK3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1753|     52|    {
 1754|     52|        return has_value();
 1755|     52|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  701|    156|    {
  702|    156|        return m_has_value;
  703|    156|    }
_ZNR3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1759|     44|    {
 1760|     44|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|     44|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|     44|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|     44|        return this->get_unexpected().error();
 1762|     44|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  684|     44|    {
  685|     44|        return *unexpected_ptr();
  686|     44|    }
_ZNO3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEdeISJ_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSO_v:
 1818|      8|    {
 1819|      8|        return std::move(value());
 1820|      8|    }
_ZNR3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEE5valueISJ_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSO_v:
 1782|      8|    {
 1783|      8|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|      8|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      8|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|      8|        return this->get_value();
 1785|      8|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  667|      8|    {
  668|      8|        return *value_ptr();
  669|      8|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  657|     52|    {
  658|     52|        if (has_value()) {
  ------------------
  |  Branch (658:13): [True: 8, False: 44]
  ------------------
  659|      8|            destroy_value();
  660|      8|        }
  661|     44|        else {
  662|     44|            destroy_unexpected();
  663|     44|        }
  664|     52|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  722|      8|    {
  723|      8|        scn::detail::destroy_at(value_ptr());
  724|      8|    }
_ZN3scn2v46detail10destroy_atINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEEEEvPT_:
  416|      8|{
  417|       |    if constexpr (std::is_array_v<T>) {
  418|       |        for (auto& elem : *p) {
  419|       |            scn::detail::destroy_at(&elem);
  420|       |        }
  421|       |    }
  422|      8|    else {
  423|      8|        p->~T();
  424|      8|    }
  425|      8|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  726|     44|    {
  727|     44|        scn::detail::destroy_at(unexpected_ptr());
  728|     44|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEcvbEv:
 1753|  6.59k|    {
 1754|  6.59k|        return has_value();
 1755|  6.59k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9has_valueEv:
  504|  12.6k|    {
  505|  12.6k|        return m_has_value;
  506|  12.6k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5errorEv:
 1759|  3.51k|    {
 1760|  3.51k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  3.51k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.51k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  3.51k|        return this->get_unexpected().error();
 1762|  3.51k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  3.51k|    {
  488|  3.51k|        return m_unexpected;
  489|  3.51k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1818|  2.01k|    {
 1819|  2.01k|        return std::move(value());
 1820|  2.01k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1782|  2.56k|    {
 1783|  2.56k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  2.56k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.56k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  2.56k|        return this->get_value();
 1785|  2.56k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9get_valueEv:
  470|  2.56k|    {
  471|  2.56k|        return m_value;
  472|  2.56k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1629|  1.25k|        : base(unexpect, std::move(e.error())),
 1630|  1.25k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  1.25k|    {
 1632|  1.25k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  464|  1.44k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  1.44k|          m_has_value(false)
  466|  1.44k|    {
  467|  1.44k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  20.2k|    {
 1330|  20.2k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1583|    100|        : base(std::in_place, std::forward<U>(val)),
 1584|    100|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|    100|    {
 1586|    100|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  455|    100|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|    100|    {
  457|    100|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1629|  12.4k|        : base(unexpect, std::move(e.error())),
 1630|  12.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  12.4k|    {
 1632|  12.4k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  464|  12.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  12.4k|          m_has_value(false)
  466|  12.4k|    {
  467|  12.4k|    }
_ZNK3scn2v48expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1753|  21.3k|    {
 1754|  21.3k|        return has_value();
 1755|  21.3k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  504|  35.2k|    {
  505|  35.2k|        return m_has_value;
  506|  35.2k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1759|  6.53k|    {
 1760|  6.53k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  6.53k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  6.53k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  6.53k|        return this->get_unexpected().error();
 1762|  6.53k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  487|  6.53k|    {
  488|  6.53k|        return m_unexpected;
  489|  6.53k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1583|  4.17k|        : base(std::in_place, std::forward<U>(val)),
 1584|  4.17k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  4.17k|    {
 1586|  4.17k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  455|  4.17k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  4.17k|    {
  457|  4.17k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  4.17k|    {
 1330|  4.17k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1808|    112|    {
 1809|    112|        return value();
 1810|    112|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1782|  6.32k|    {
 1783|  6.32k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  6.32k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  6.32k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  6.32k|        return this->get_value();
 1785|  6.32k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  470|  6.32k|    {
  471|  6.32k|        return m_value;
  472|  6.32k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1753|  3.10k|    {
 1754|  3.10k|        return has_value();
 1755|  3.10k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  504|  8.35k|    {
  505|  8.35k|        return m_has_value;
  506|  8.35k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  3.10k|    {
 1330|  3.10k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1818|  4.17k|    {
 1819|  4.17k|        return std::move(value());
 1820|  4.17k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1782|  4.17k|    {
 1783|  4.17k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  4.17k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  4.17k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  4.17k|        return this->get_value();
 1785|  4.17k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  470|  4.17k|    {
  471|  4.17k|        return m_value;
  472|  4.17k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1992|  6.39k|    {
 1993|  6.39k|        return detail::transform_error_impl(std::move(*this),
 1994|  6.39k|                                            std::forward<F>(f));
 1995|  6.39k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1475|  6.39k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  6.39k|    else {
 1486|  6.39k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  6.39k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  6.39k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 6.21k, False: 182]
  |  |  ------------------
  ------------------
 1488|  6.39k|                   ? result(*std::forward<Exp>(exp))
 1489|  6.39k|                   : result(unexpect,
 1490|    182|                            trivial_invoke(std::forward<F>(f),
 1491|    182|                                           std::forward<Exp>(exp).error()));
 1492|  6.39k|    }
 1493|  6.39k|}
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1583|  6.21k|        : base(std::in_place, std::forward<U>(val)),
 1584|  6.21k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  6.21k|    {
 1586|  6.21k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|  6.21k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  6.21k|    {
  457|  6.21k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1639|    182|        : base(unexpect, std::forward<Args>(args)...),
 1640|    182|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|    182|    {
 1642|    182|    }
_ZNO3scn2v48expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1818|  6.21k|    {
 1819|  6.21k|        return std::move(value());
 1820|  6.21k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1583|  3.10k|        : base(std::in_place, std::forward<U>(val)),
 1584|  3.10k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  3.10k|    {
 1586|  3.10k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  455|  3.10k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  3.10k|    {
  457|  3.10k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1992|  3.10k|    {
 1993|  3.10k|        return detail::transform_error_impl(std::move(*this),
 1994|  3.10k|                                            std::forward<F>(f));
 1995|  3.10k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1475|  3.10k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  3.10k|    else {
 1486|  3.10k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  3.10k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  3.10k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 3.10k, False: 0]
  |  |  ------------------
  ------------------
 1488|  3.10k|                   ? result(*std::forward<Exp>(exp))
 1489|  3.10k|                   : result(unexpect,
 1490|      0|                            trivial_invoke(std::forward<F>(f),
 1491|      0|                                           std::forward<Exp>(exp).error()));
 1492|  3.10k|    }
 1493|  3.10k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  504|  6.20k|    {
  505|  6.20k|        return m_has_value;
  506|  6.20k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1818|  3.10k|    {
 1819|  3.10k|        return std::move(value());
 1820|  3.10k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1782|  3.10k|    {
 1783|  3.10k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  3.10k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.10k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  3.10k|        return this->get_value();
 1785|  3.10k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  470|  3.10k|    {
  471|  3.10k|        return m_value;
  472|  3.10k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1583|  3.10k|        : base(std::in_place, std::forward<U>(val)),
 1584|  3.10k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  3.10k|    {
 1586|  3.10k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  455|  3.10k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  3.10k|    {
  457|  3.10k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  3.10k|    {
 1330|  3.10k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1753|  3.10k|    {
 1754|  3.10k|        return has_value();
 1755|  3.10k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  504|  6.20k|    {
  505|  6.20k|        return m_has_value;
  506|  6.20k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1818|  3.10k|    {
 1819|  3.10k|        return std::move(value());
 1820|  3.10k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1782|  3.10k|    {
 1783|  3.10k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  3.10k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.10k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  3.10k|        return this->get_value();
 1785|  3.10k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  470|  3.10k|    {
  471|  3.10k|        return m_value;
  472|  3.10k|    }
_ZN3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1629|     44|        : base(unexpect, std::move(e.error())),
 1630|     44|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|     44|    {
 1632|     44|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  651|     44|        : m_has_value(false)
  652|     44|    {
  653|     44|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  654|     44|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  715|     44|    {
  716|     44|        scn::detail::construct_at(unexpected_ptr(),
  717|     44|                                  std::forward<Args>(args)...);
  718|     44|        m_has_value = false;
  719|     44|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  744|    132|    {
  745|    132|        return reinterpret_cast<unexpected<E>*>(
  746|    132|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1074|    132|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  747|    132|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|     52|    {
 1330|     52|    }
_ZN3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1583|      8|        : base(std::in_place, std::forward<U>(val)),
 1584|      8|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|      8|    {
 1586|      8|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSG_EvEENS3_10in_place_tEDpOT_:
  641|      8|        : m_has_value(true)
  642|      8|    {
  643|      8|        construct(std::forward<Args>(args)...);
  644|      8|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSG_EEEvDpOT_:
  708|      8|    {
  709|      8|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  710|      8|        m_has_value = true;
  711|      8|    }
_ZN3scn2v46detail12construct_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEJSG_EEEPT_SI_DpOT0_:
  410|      8|{
  411|      8|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|      8|        T(std::forward<Args>(args)...);
  413|      8|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  732|     24|    {
  733|     24|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1074|     24|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  734|     24|    }
_ZNK3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1753|     52|    {
 1754|     52|        return has_value();
 1755|     52|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  701|    156|    {
  702|    156|        return m_has_value;
  703|    156|    }
_ZNR3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1759|     44|    {
 1760|     44|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|     44|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|     44|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|     44|        return this->get_unexpected().error();
 1762|     44|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  684|     44|    {
  685|     44|        return *unexpected_ptr();
  686|     44|    }
_ZNO3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEdeISF_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSK_v:
 1818|      8|    {
 1819|      8|        return std::move(value());
 1820|      8|    }
_ZNR3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5valueISF_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1782|      8|    {
 1783|      8|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|      8|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      8|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|      8|        return this->get_value();
 1785|      8|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  667|      8|    {
  668|      8|        return *value_ptr();
  669|      8|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  657|     52|    {
  658|     52|        if (has_value()) {
  ------------------
  |  Branch (658:13): [True: 8, False: 44]
  ------------------
  659|      8|            destroy_value();
  660|      8|        }
  661|     44|        else {
  662|     44|            destroy_unexpected();
  663|     44|        }
  664|     52|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  722|      8|    {
  723|      8|        scn::detail::destroy_at(value_ptr());
  724|      8|    }
_ZN3scn2v46detail10destroy_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEEEvPT_:
  416|      8|{
  417|       |    if constexpr (std::is_array_v<T>) {
  418|       |        for (auto& elem : *p) {
  419|       |            scn::detail::destroy_at(&elem);
  420|       |        }
  421|       |    }
  422|      8|    else {
  423|      8|        p->~T();
  424|      8|    }
  425|      8|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  726|     44|    {
  727|     44|        scn::detail::destroy_at(unexpected_ptr());
  728|     44|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3013|   261k|    {
 3014|   261k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1110|   261k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3015|   261k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2994|   261k|    {
 2995|   261k|        return t.data();
 2996|   261k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3388|   261k|    {
 3389|   261k|        return detail::to_address(ranges::begin(derived()));
 3390|   261k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   261k|    {
 2883|   261k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   261k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   261k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   261k|    {
 2864|   261k|        return decay_copy(t.begin());
 2865|   261k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3347|   261k|    {
 3348|   261k|        return static_cast<D&>(*this);
 3349|   261k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 1992|    246|    {
 1993|    246|        return detail::transform_error_impl(std::move(*this),
 1994|    246|                                            std::forward<F>(f));
 1995|    246|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESG_EEDaOSK_OT0_:
 1475|    246|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|    246|    else {
 1486|    246|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|    246|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|    246|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 246, False: 0]
  |  |  ------------------
  ------------------
 1488|    246|                   ? result(*std::forward<Exp>(exp))
 1489|    246|                   : result(unexpect,
 1490|      0|                            trivial_invoke(std::forward<F>(f),
 1491|      0|                                           std::forward<Exp>(exp).error()));
 1492|    246|    }
 1493|    246|}
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1583|    246|        : base(std::in_place, std::forward<U>(val)),
 1584|    246|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|    246|    {
 1586|    246|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  455|    246|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|    246|    {
  457|    246|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|    246|    {
 1330|    246|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1753|    246|    {
 1754|    246|        return has_value();
 1755|    246|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  504|    492|    {
  505|    492|        return m_has_value;
  506|    492|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1818|    246|    {
 1819|    246|        return std::move(value());
 1820|    246|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|    246|    {
 1783|    246|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|    246|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    246|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|    246|        return this->get_value();
 1785|    246|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  470|    246|    {
  471|    246|        return m_value;
  472|    246|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1978|    470|    {
 1979|    470|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1980|    470|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSK_OT0_:
 1475|    470|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|    470|    else {
 1486|    470|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|    470|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|    470|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 470]
  |  |  ------------------
  ------------------
 1488|    470|                   ? result(*std::forward<Exp>(exp))
 1489|    470|                   : result(unexpect,
 1490|    470|                            trivial_invoke(std::forward<F>(f),
 1491|    470|                                           std::forward<Exp>(exp).error()));
 1492|    470|    }
 1493|    470|}
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IRS7_vEEOT_:
 1583|     44|        : base(std::in_place, std::forward<U>(val)),
 1584|     44|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|     44|    {
 1586|     44|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJRS8_EvEENSt3__110in_place_tEDpOT_:
  455|     44|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|     44|    {
  457|     44|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1808|    556|    {
 1809|    556|        return value();
 1810|    556|    }
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3953|     20|    auto&& SCN_TRY_TMP = (x);                          \
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|    226|    {
 2883|    226|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|    226|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|    226|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|    226|    {
 2864|    226|        return decay_copy(t.begin());
 2865|    226|    }
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3953|    214|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1992|  1.07k|    {
 1993|  1.07k|        return detail::transform_error_impl(std::move(*this),
 1994|  1.07k|                                            std::forward<F>(f));
 1995|  1.07k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1475|  1.07k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  1.07k|    else {
 1486|  1.07k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  1.07k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  1.07k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 1.07k, False: 0]
  |  |  ------------------
  ------------------
 1488|  1.07k|                   ? result(*std::forward<Exp>(exp))
 1489|  1.07k|                   : result(unexpect,
 1490|      0|                            trivial_invoke(std::forward<F>(f),
 1491|      0|                                           std::forward<Exp>(exp).error()));
 1492|  1.07k|    }
 1493|  1.07k|}
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1583|  1.07k|        : base(std::in_place, std::forward<U>(val)),
 1584|  1.07k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  1.07k|    {
 1586|  1.07k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  455|  1.07k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  1.07k|    {
  457|  1.07k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  1.07k|    {
 1330|  1.07k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1753|  1.07k|    {
 1754|  1.07k|        return has_value();
 1755|  1.07k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  2.15k|    {
  505|  2.15k|        return m_has_value;
  506|  2.15k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1818|  1.07k|    {
 1819|  1.07k|        return std::move(value());
 1820|  1.07k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1782|  1.07k|    {
 1783|  1.07k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  1.07k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.07k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  1.07k|        return this->get_value();
 1785|  1.07k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  1.07k|    {
  471|  1.07k|        return m_value;
  472|  1.07k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|  1.09k|    {
 1979|  1.09k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1980|  1.09k|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1475|  1.09k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  1.09k|    else {
 1486|  1.09k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  1.09k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  1.09k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 1.09k]
  |  |  ------------------
  ------------------
 1488|  1.09k|                   ? result(*std::forward<Exp>(exp))
 1489|  1.09k|                   : result(unexpect,
 1490|  1.09k|                            trivial_invoke(std::forward<F>(f),
 1491|  1.09k|                                           std::forward<Exp>(exp).error()));
 1492|  1.09k|    }
 1493|  1.09k|}
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IRS3_vEEOT_:
 1583|     88|        : base(std::in_place, std::forward<U>(val)),
 1584|     88|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|     88|    {
 1586|     88|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  455|     88|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|     88|    {
  457|     88|    }
_ZN3scn2v413scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3928|  1.09k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1108|  1.09k|    static_cast<    \
  |  | 1109|  1.09k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3929|  1.09k|    {
 3930|  1.09k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1808|  5.58k|    {
 1809|  5.58k|        return value();
 1810|  5.58k|    }
_ZN3scn2v46detail22parse_presentation_setIwRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
 7529|    930|{
 7530|    930|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|    930|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    930|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7531|    930|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  | 1104|    930|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    930|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7532|       |
 7533|    930|    auto start = begin;
 7534|    930|    ++begin;
 7535|       |
 7536|    930|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|    930|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 930]
  |  |  ------------------
  ------------------
 7537|       |        // clang-format off
 7538|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7539|       |        // clang-format on
 7540|      0|        return {};
 7541|      0|    }
 7542|    930|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7542:9): [True: 558, False: 372]
  ------------------
 7543|    558|        handler.on_charset_inverted();
 7544|    558|        ++begin;
 7545|    558|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|    558|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 558]
  |  |  ------------------
  ------------------
 7546|       |            // clang-format off
 7547|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7548|       |            // clang-format on
 7549|      0|            return {};
 7550|      0|        }
 7551|    558|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7551:13): [True: 6, False: 552]
  ------------------
 7552|      6|            handler.on_charset_single(char32_t{']'});
 7553|      6|            ++begin;
 7554|      6|        }
 7555|    558|    }
 7556|    372|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7556:14): [True: 0, False: 372]
  ------------------
 7557|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7558|      0|    }
 7559|       |
 7560|  9.55k|    while (begin != end) {
  ------------------
  |  Branch (7560:12): [True: 9.55k, False: 0]
  ------------------
 7561|  9.55k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1039|  9.55k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 9.55k]
  |  |  ------------------
  ------------------
 7562|      0|            break;
 7563|      0|        }
 7564|       |
 7565|  9.55k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7565:13): [True: 930, False: 8.62k]
  ------------------
 7566|    930|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7567|    930|        }
 7568|       |
 7569|  8.62k|        parse_presentation_set_literal(begin, end, handler);
 7570|  8.62k|    }
 7571|       |
 7572|      0|    SCN_UNLIKELY_ATTR
 7573|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7574|      0|    return {};
 7575|    930|}
_ZN3scn2v46detail30parse_presentation_set_literalIwRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
 7493|  8.62k|{
 7494|  8.62k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  8.62k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  8.62k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7495|       |
 7496|  8.62k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7497|  8.62k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  | 1039|  8.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 8.62k]
  |  |  ------------------
  ------------------
 7498|      0|        return;
 7499|      0|    }
 7500|       |
 7501|  8.62k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7501:9): [True: 8.62k, False: 0]
  |  Branch (7501:25): [True: 600, False: 8.02k]
  |  Branch (7501:49): [True: 600, False: 0]
  ------------------
 7502|  8.62k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7502:9): [True: 594, False: 6]
  ------------------
 7503|    594|        ++begin;
 7504|       |
 7505|    594|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7506|    594|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  | 1039|    594|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 594]
  |  |  ------------------
  ------------------
 7507|      0|            return;
 7508|      0|        }
 7509|       |
 7510|    594|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  | 1039|    594|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 594]
  |  |  ------------------
  ------------------
 7511|       |            // clang-format off
 7512|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7513|       |            // clang-format on
 7514|      0|            return;
 7515|      0|        }
 7516|       |
 7517|    594|        handler.on_charset_range(cp_first, cp_second + 1);
 7518|    594|        return;
 7519|    594|    }
 7520|       |
 7521|  8.03k|    handler.on_charset_single(cp_first);
 7522|  8.03k|}
_ZN3scn2v46detail33parse_presentation_set_code_pointIwRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
 7469|  9.22k|{
 7470|  9.22k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  9.22k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  9.22k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7471|       |
 7472|  9.22k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7473|  9.22k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  | 1039|  18.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 9.22k]
  |  |  |  Branch (1039:45): [True: 0, False: 9.22k]
  |  |  |  Branch (1039:45): [True: 0, False: 9.22k]
  |  |  ------------------
  ------------------
 7474|      0|        handler.on_error("Invalid encoding in format string");
 7475|      0|        return invalid_code_point;
 7476|      0|    }
 7477|       |
 7478|  9.22k|    const auto cp =
 7479|  9.22k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7480|  9.22k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  | 1039|  9.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 9.22k]
  |  |  ------------------
  ------------------
 7481|      0|        handler.on_error("Invalid encoding in format string");
 7482|      0|        return invalid_code_point;
 7483|      0|    }
 7484|       |
 7485|  9.22k|    begin += len;
 7486|  9.22k|    return cp;
 7487|  9.22k|}
_ZNK3scn2v46detail12format_specs14charset_stringIwEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 7088|    930|    {
 7089|    930|        return {reinterpret_cast<const CharT*>(charset_string_data),
 7090|    930|                charset_string_size};
 7091|    930|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IRKS7_vEEOT_:
 1583|    534|        : base(std::in_place, std::forward<U>(val)),
 1584|    534|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|    534|    {
 1586|    534|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJRKS8_EvEENSt3__110in_place_tEDpOT_:
  455|    534|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|    534|    {
  457|    534|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1583|    690|        : base(std::in_place, std::forward<U>(val)),
 1584|    690|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|    690|    {
 1586|    690|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  455|    690|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|    690|    {
  457|    690|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4sizeEv:
 6262|  62.2k|    {
 6263|  62.2k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1039|  62.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 62.2k]
  |  |  ------------------
  ------------------
 6264|      0|            return max_size();
 6265|      0|        }
 6266|       |
 6267|  62.2k|        return static_cast<std::size_t>(m_desc &
 6268|  62.2k|                                        ((1 << detail::packed_arg_bits) - 1));
 6269|  62.2k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE9is_packedEv:
 6288|   100k|    {
 6289|   100k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6290|   100k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE3getEm:
 6230|  37.9k|    {
 6231|  37.9k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1039|  37.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 37.9k]
  |  |  ------------------
  ------------------
 6232|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  | 1038|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6233|      0|                return m_args[id];
 6234|      0|            }
 6235|      0|            return {};
 6236|      0|        }
 6237|       |
 6238|  37.9k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  | 1039|  37.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 212, False: 37.7k]
  |  |  ------------------
  ------------------
 6239|    212|            return {};
 6240|    212|        }
 6241|       |
 6242|  37.7k|        const auto t = type(id);
 6243|  37.7k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  | 1039|  37.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.34k, False: 36.4k]
  |  |  ------------------
  ------------------
 6244|  1.34k|            return {};
 6245|  1.34k|        }
 6246|       |
 6247|  36.4k|        basic_scan_arg<Context> arg;
 6248|  36.4k|        arg.m_type = t;
 6249|  36.4k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6249:13): [True: 36.4k, False: 0]
  ------------------
 6250|  36.4k|            arg.m_value.ref_value = m_builtin_values[id];
 6251|  36.4k|        }
 6252|      0|        else {
 6253|      0|            arg.m_value = m_values[id];
 6254|      0|        }
 6255|  36.4k|        return arg;
 6256|  37.7k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6040|  37.9k|    constexpr basic_scan_arg() = default;
_ZN3scn2v46detail9arg_valueC2Ev:
 5641|  59.4k|    arg_value() = default;
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4typeEm:
 6297|  37.7k|    {
 6298|       |        // First (0th) index is size, types start after that
 6299|  37.7k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6300|  37.7k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6301|  37.7k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6302|  37.7k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15is_only_builtinEv:
 6292|  36.4k|    {
 6293|  36.4k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6294|  36.4k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEcvbEv:
 6046|  71.9k|    {
 6047|  71.9k|        return m_type != detail::arg_type::none_type;
 6048|  71.9k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9493|  5.68k|{
 9494|  5.68k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|  5.68k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|  5.68k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|  5.68k|{
 9353|  5.68k|#define SCN_VISIT(Type)                                                \
 9354|  5.68k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|  5.68k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|  5.68k|    }                                                                  \
 9357|  5.68k|    else {                                                             \
 9358|  5.68k|        return vis(monostate_val);                                     \
 9359|  5.68k|    }
 9360|       |
 9361|  5.68k|    monostate monostate_val{};
 9362|       |
 9363|  5.68k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 5.68k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 5.68k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|    632|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 632, False: 5.05k]
  ------------------
 9369|    632|            SCN_VISIT(int);
  ------------------
  |  | 9354|    632|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|    632|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|    632|    }                                                                  \
  |  | 9357|    632|    else {                                                             \
  |  | 9358|    632|        return vis(monostate_val);                                     \
  |  | 9359|    632|    }
  ------------------
 9370|    632|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 5.68k]
  ------------------
 9371|    632|            SCN_VISIT(long);
  ------------------
  |  | 9354|    632|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|    632|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|    632|    }                                                                  \
  |  | 9357|    632|    else {                                                             \
  |  | 9358|    632|        return vis(monostate_val);                                     \
  |  | 9359|    632|    }
  ------------------
 9372|    632|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 5.68k]
  ------------------
 9373|    632|            SCN_VISIT(long long);
  ------------------
  |  | 9354|    632|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|    632|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|    632|    }                                                                  \
  |  | 9357|    632|    else {                                                             \
  |  | 9358|    632|        return vis(monostate_val);                                     \
  |  | 9359|    632|    }
  ------------------
 9374|    632|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 5.68k]
  ------------------
 9375|    632|#if SCN_HAS_INT128
 9376|    632|            SCN_VISIT(int128)
  ------------------
  |  | 9354|    632|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|    632|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|    632|    }                                                                  \
  |  | 9357|    632|    else {                                                             \
  |  | 9358|    632|        return vis(monostate_val);                                     \
  |  | 9359|    632|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|    632|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 5.68k]
  ------------------
 9381|    632|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|    632|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|    632|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|    632|    }                                                                  \
  |  | 9357|    632|    else {                                                             \
  |  | 9358|    632|        return vis(monostate_val);                                     \
  |  | 9359|    632|    }
  ------------------
 9382|    632|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 5.68k]
  ------------------
 9383|    632|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|    632|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|    632|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|    632|    }                                                                  \
  |  | 9357|    632|    else {                                                             \
  |  | 9358|    632|        return vis(monostate_val);                                     \
  |  | 9359|    632|    }
  ------------------
 9384|  1.26k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 632, False: 5.05k]
  ------------------
 9385|  1.26k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|  1.26k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  1.26k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  1.26k|    }                                                                  \
  |  | 9357|  1.26k|    else {                                                             \
  |  | 9358|  1.26k|        return vis(monostate_val);                                     \
  |  | 9359|  1.26k|    }
  ------------------
 9386|  1.26k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 5.68k]
  ------------------
 9387|  1.26k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|  1.26k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  1.26k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  1.26k|    }                                                                  \
  |  | 9357|  1.26k|    else {                                                             \
  |  | 9358|  1.26k|        return vis(monostate_val);                                     \
  |  | 9359|  1.26k|    }
  ------------------
 9388|  1.26k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 5.68k]
  ------------------
 9389|  1.26k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|  1.26k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  1.26k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  1.26k|    }                                                                  \
  |  | 9357|  1.26k|    else {                                                             \
  |  | 9358|  1.26k|        return vis(monostate_val);                                     \
  |  | 9359|  1.26k|    }
  ------------------
 9390|  1.26k|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 5.68k]
  ------------------
 9391|  1.26k|#if SCN_HAS_INT128
 9392|  1.26k|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|  1.26k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  1.26k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  1.26k|    }                                                                  \
  |  | 9357|  1.26k|    else {                                                             \
  |  | 9358|  1.26k|        return vis(monostate_val);                                     \
  |  | 9359|  1.26k|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|  1.89k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 632, False: 5.05k]
  ------------------
 9397|  1.89k|            SCN_VISIT(void*);
  ------------------
  |  | 9354|  1.89k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  1.89k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  1.89k|    }                                                                  \
  |  | 9357|  1.89k|    else {                                                             \
  |  | 9358|  1.89k|        return vis(monostate_val);                                     \
  |  | 9359|  1.89k|    }
  ------------------
 9398|  2.52k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 632, False: 5.05k]
  ------------------
 9399|  2.52k|            SCN_VISIT(bool);
  ------------------
  |  | 9354|  2.52k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  2.52k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  2.52k|    }                                                                  \
  |  | 9357|  2.52k|    else {                                                             \
  |  | 9358|  2.52k|        return vis(monostate_val);                                     \
  |  | 9359|  2.52k|    }
  ------------------
 9400|  3.16k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 632, False: 5.05k]
  ------------------
 9401|  3.16k|            SCN_VISIT(char);
  ------------------
  |  | 9354|  3.16k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  3.16k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  3.16k|    }                                                                  \
  |  | 9357|  3.16k|    else {                                                             \
  |  | 9358|  3.16k|        return vis(monostate_val);                                     \
  |  | 9359|  3.16k|    }
  ------------------
 9402|  3.16k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 5.68k]
  ------------------
 9403|  3.16k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|  3.16k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  3.16k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  3.16k|    }                                                                  \
  |  | 9357|  3.16k|    else {                                                             \
  |  | 9358|  3.16k|        return vis(monostate_val);                                     \
  |  | 9359|  3.16k|    }
  ------------------
 9404|  3.16k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 5.68k]
  ------------------
 9405|  3.16k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|  3.16k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  3.16k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  3.16k|    }                                                                  \
  |  | 9357|  3.16k|    else {                                                             \
  |  | 9358|  3.16k|        return vis(monostate_val);                                     \
  |  | 9359|  3.16k|    }
  ------------------
 9406|  3.16k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 0, False: 5.68k]
  ------------------
 9407|  3.16k|            SCN_VISIT(float);
  ------------------
  |  | 9354|  3.16k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  3.16k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  3.16k|    }                                                                  \
  |  | 9357|  3.16k|    else {                                                             \
  |  | 9358|  3.16k|        return vis(monostate_val);                                     \
  |  | 9359|  3.16k|    }
  ------------------
 9408|  3.79k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 632, False: 5.05k]
  ------------------
 9409|  3.79k|            SCN_VISIT(double);
  ------------------
  |  | 9354|  3.79k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  3.79k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  3.79k|    }                                                                  \
  |  | 9357|  3.79k|    else {                                                             \
  |  | 9358|  3.79k|        return vis(monostate_val);                                     \
  |  | 9359|  3.79k|    }
  ------------------
 9410|  3.79k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 0, False: 5.68k]
  ------------------
 9411|  3.79k|            SCN_VISIT(long double);
  ------------------
  |  | 9354|  3.79k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  3.79k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  3.79k|    }                                                                  \
  |  | 9357|  3.79k|    else {                                                             \
  |  | 9358|  3.79k|        return vis(monostate_val);                                     \
  |  | 9359|  3.79k|    }
  ------------------
 9412|  3.79k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 5.68k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|  3.79k|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 5.68k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 5.68k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 5.68k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 5.68k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|    632|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 632, False: 5.05k]
  ------------------
 9443|    632|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|    632|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|    632|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|    632|    }                                                                  \
  |  | 9357|    632|    else {                                                             \
  |  | 9358|    632|        return vis(monostate_val);                                     \
  |  | 9359|    632|    }
  ------------------
 9444|  1.26k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 632, False: 5.05k]
  ------------------
 9445|  1.26k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|  1.26k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  1.26k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  1.26k|    }                                                                  \
  |  | 9357|  1.26k|    else {                                                             \
  |  | 9358|  1.26k|        return vis(monostate_val);                                     \
  |  | 9359|  1.26k|    }
  ------------------
 9446|  1.89k|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 632, False: 5.05k]
  ------------------
 9447|  1.89k|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|  1.89k|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9354|  1.89k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  1.89k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  1.89k|    }                                                                  \
  |  | 9357|  1.89k|    else {                                                             \
  |  | 9358|  1.89k|        return vis(monostate_val);                                     \
  |  | 9359|  1.89k|    }
  ------------------
 9449|       |            }
 9450|       |            else {
 9451|       |                SCN_VISIT(std::wstring_view);
 9452|       |            }
 9453|  1.89k|        }
 9454|       |
 9455|  1.89k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 5.68k]
  ------------------
 9456|  1.89k|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|  1.89k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|  1.89k|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 5.68k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 5.68k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|  5.68k|            SCN_CLANG_POP
 9473|  5.68k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6091|  97.9k|{
 6092|  97.9k|    return arg.m_type;
 6093|  97.9k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6103|  33.9k|{
 6104|  33.9k|    return arg.m_value;
 6105|  33.9k|}
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1992|  2.09k|    {
 1993|  2.09k|        return detail::transform_error_impl(std::move(*this),
 1994|  2.09k|                                            std::forward<F>(f));
 1995|  2.09k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1475|  2.09k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  2.09k|    else {
 1486|  2.09k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  2.09k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  2.09k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 1.99k, False: 102]
  |  |  ------------------
  ------------------
 1488|  2.09k|                   ? result(*std::forward<Exp>(exp))
 1489|  2.09k|                   : result(unexpect,
 1490|    102|                            trivial_invoke(std::forward<F>(f),
 1491|    102|                                           std::forward<Exp>(exp).error()));
 1492|  2.09k|    }
 1493|  2.09k|}
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1639|    102|        : base(unexpect, std::forward<Args>(args)...),
 1640|    102|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|    102|    {
 1642|    102|    }
_ZNO3scn2v48expectedIPKcNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1818|  1.99k|    {
 1819|  1.99k|        return std::move(value());
 1820|  1.99k|    }
_ZN3scn2v424basic_scan_parse_contextIcEC2IONS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSF_11char_traitsIcEEEEi:
 6361|  62.2k|        : m_format{format},
 6362|  62.2k|          m_next_arg_id{next_arg_id},
 6363|  62.2k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6363:27): [Folded - Ignored]
  ------------------
 6364|  62.2k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6364:27): [Folded - Ignored]
  ------------------
 6365|       |          m_is_borrowed(
 6366|  62.2k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6366:16): [Folded - Ignored]
  |  Branch (6366:41): [Folded - Ignored]
  ------------------
 6367|  62.2k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6367:15): [Folded - Ignored]
  ------------------
 6368|  62.2k|    {
 6369|  62.2k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3088|  62.2k|    {
 3089|  62.2k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|  62.2k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3054|  62.2k|    {
 3055|  62.2k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|  62.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|  62.2k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7877|  62.2k|{
 7878|  62.2k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7879|  62.2k|    handler.check_args_exhausted();
 7880|  62.2k|    return handler.get_error();
 7881|  62.2k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7842|  62.2k|{
 7843|       |    // TODO: memchr fast path with a larger (> 32) format string
 7844|       |
 7845|  62.2k|    auto begin = format.data();
 7846|  62.2k|    auto it = begin;
 7847|  62.2k|    const auto end = format.data() + format.size();
 7848|       |
 7849|   257k|    while (it != end) {
  ------------------
  |  Branch (7849:12): [True: 250k, False: 7.25k]
  ------------------
 7850|   250k|        const auto ch = *it++;
 7851|   250k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7851:13): [True: 67.1k, False: 183k]
  ------------------
 7852|  67.1k|            handler.on_literal_text(begin, it - 1);
 7853|       |
 7854|  67.1k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7855|  67.1k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7855:17): [True: 53.3k, False: 13.7k]
  ------------------
 7856|  53.3k|                return;
 7857|  53.3k|            }
 7858|  67.1k|        }
 7859|   183k|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7859:18): [True: 2.89k, False: 180k]
  ------------------
 7860|  2.89k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1039|  5.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.61k, False: 1.28k]
  |  |  |  Branch (1039:45): [True: 282, False: 2.61k]
  |  |  |  Branch (1039:45): [True: 1.33k, False: 1.28k]
  |  |  ------------------
  ------------------
 7861|  1.61k|                handler.on_error("Unmatched '}' in format string");
 7862|  1.61k|                return;
 7863|  1.61k|            }
 7864|       |
 7865|  1.28k|            handler.on_literal_text(begin, it);
 7866|  1.28k|            begin = ++it;
 7867|  1.28k|        }
 7868|   250k|    }
 7869|       |
 7870|  7.25k|    handler.on_literal_text(begin, end);
 7871|  7.25k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 7774|  67.1k|{
 7775|  67.1k|    struct id_adapter {
 7776|  67.1k|        constexpr void operator()()
 7777|  67.1k|        {
 7778|  67.1k|            arg_id = handler.on_arg_id();
 7779|  67.1k|        }
 7780|  67.1k|        constexpr void operator()(std::size_t id)
 7781|  67.1k|        {
 7782|  67.1k|            arg_id = handler.on_arg_id(id);
 7783|  67.1k|        }
 7784|       |
 7785|  67.1k|        constexpr void on_error(const char* msg)
 7786|  67.1k|        {
 7787|  67.1k|            SCN_UNLIKELY_ATTR
 7788|  67.1k|            handler.on_error(msg);
 7789|  67.1k|        }
 7790|       |
 7791|  67.1k|        Handler& handler;
 7792|  67.1k|        std::size_t arg_id;
 7793|  67.1k|    };
 7794|       |
 7795|  67.1k|    ++begin;
 7796|  67.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  67.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 206, False: 66.8k]
  |  |  ------------------
  ------------------
 7797|    206|        handler.on_error("Unexpected end of replacement field");
 7798|    206|        return begin;
 7799|    206|    }
 7800|       |
 7801|  66.8k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7801:9): [True: 5.67k, False: 61.2k]
  ------------------
 7802|  5.67k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7803|  5.67k|    }
 7804|  61.2k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7804:14): [True: 6.89k, False: 54.3k]
  ------------------
 7805|  6.89k|        handler.on_literal_text(begin, begin + 1);
 7806|  6.89k|    }
 7807|  54.3k|    else {
 7808|  54.3k|        auto adapter = id_adapter{handler, 0};
 7809|  54.3k|        begin = parse_arg_id(begin, end, adapter);
 7810|       |
 7811|  54.3k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  54.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 110, False: 54.2k]
  |  |  ------------------
  ------------------
 7812|    110|            handler.on_error("Missing '}' in format string");
 7813|    110|            return begin;
 7814|    110|        }
 7815|       |
 7816|  54.2k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7816:13): [True: 284, False: 53.9k]
  ------------------
 7817|    284|            handler.on_replacement_field(adapter.arg_id, begin);
 7818|    284|        }
 7819|  53.9k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7819:18): [True: 32.0k, False: 21.8k]
  ------------------
 7820|  32.0k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1039|  32.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 74, False: 32.0k]
  |  |  ------------------
  ------------------
 7821|     74|                handler.on_error("Unexpected end of replacement field");
 7822|     74|                return begin;
 7823|     74|            }
 7824|  32.0k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7825|  32.0k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1039|  64.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.30k, False: 28.7k]
  |  |  |  Branch (1039:45): [True: 0, False: 32.0k]
  |  |  |  Branch (1039:45): [True: 3.30k, False: 28.7k]
  |  |  ------------------
  ------------------
 7826|  3.30k|                handler.on_error("Unknown format specifier");
 7827|  3.30k|                return begin;
 7828|  3.30k|            }
 7829|  32.0k|        }
 7830|  21.8k|        else {
 7831|  21.8k|            SCN_UNLIKELY_ATTR
 7832|  21.8k|            handler.on_error("Missing '}' in format string");
 7833|  21.8k|            return begin;
 7834|  21.8k|        }
 7835|  54.2k|    }
 7836|  41.5k|    return begin + 1;
 7837|  66.8k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE3argEm:
 8918|  37.9k|    {
 8919|  37.9k|        return m_args.get(id);
 8920|  37.9k|    }
_ZN3scn2v424basic_scan_parse_contextIcE11next_arg_idEv:
 6396|  37.3k|    {
 6397|  37.3k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  | 1039|  37.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 42, False: 37.3k]
  |  |  ------------------
  ------------------
 6398|     42|            on_error(
 6399|     42|                "Cannot switch from manual to automatic argument indexing");
 6400|     42|            return 0;
 6401|     42|        }
 6402|       |
 6403|  37.3k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6404|  37.3k|        do_check_arg_id(id);
 6405|  37.3k|        return id;
 6406|  37.3k|    }
_ZN3scn2v424basic_scan_parse_contextIcE8on_errorEPKc:
 6426|    112|    {
 6427|    112|        m_error = unexpected(detail::handle_error(
 6428|    112|            scan_error{scan_error::invalid_format_string, msg}));
 6429|    112|        return m_error.error();
 6430|    112|    }
_ZN3scn2v424basic_scan_parse_contextIcE15do_check_arg_idEm:
 6890|  37.9k|{
 6891|  37.9k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6891:9): [Folded - Ignored]
  ------------------
 6892|  37.9k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  256|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  256|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6892:10): [Folded - Ignored]
  |  Branch (6892:22): [Folded - Ignored]
  ------------------
 6893|       |        // The cast below will cause an error on gcc pre-12
 6894|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6895|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6895:13): [True: 0, False: 0]
  ------------------
 6896|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6897|      0|            SCN_UNLIKELY_ATTR
 6898|      0|            on_error("Argument not found");
 6899|      0|        }
 6900|      0|    }
 6901|  37.9k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7275|  54.3k|{
 7276|  54.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  54.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  54.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7277|  54.3k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7277:9): [True: 54.3k, False: 0]
  |  Branch (7277:26): [True: 22.6k, False: 31.6k]
  ------------------
 7278|  22.6k|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1110|  22.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7279|  22.6k|    }
 7280|       |
 7281|  31.6k|    handler();
 7282|  31.6k|    return begin;
 7283|  54.3k|}
impl.cpp:_ZN3scn2v46detail15do_parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7245|  22.6k|{
 7246|  22.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  22.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  22.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7247|       |
 7248|  22.6k|    CharT c = *begin;
 7249|  22.6k|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (7249:9): [True: 21.6k, False: 988]
  |  Branch (7249:27): [True: 124, False: 864]
  ------------------
 7250|  21.7k|        handler.on_error("Invalid argument ID");
 7251|  21.7k|        return begin;
 7252|  21.7k|    }
 7253|       |
 7254|    864|    int idx = 0;
 7255|    864|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (7255:9): [True: 450, False: 414]
  ------------------
 7256|    450|        idx = parse_simple_int(begin, end);
 7257|    450|    }
 7258|    414|    else {
 7259|    414|        ++begin;
 7260|    414|    }
 7261|       |
 7262|    864|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (7262:9): [True: 110, False: 754]
  |  Branch (7262:26): [True: 470, False: 284]
  |  Branch (7262:50): [True: 72, False: 398]
  ------------------
 7263|    182|        handler.on_error("Invalid argument ID");
 7264|    182|        return begin;
 7265|    182|    }
 7266|    682|    handler(idx);
 7267|       |
 7268|    682|    return begin;
 7269|    864|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 7786|  21.9k|        {
 7787|  21.9k|            SCN_UNLIKELY_ATTR
 7788|  21.9k|            handler.on_error(msg);
 7789|  21.9k|        }
_ZN3scn2v46detail16parse_simple_intIcEEiRPKT_S5_:
 7224|  16.2k|{
 7225|  16.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  16.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  16.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7226|  16.2k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  | 1104|  16.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  16.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7227|       |
 7228|  16.2k|    unsigned long long value = 0;
 7229|  31.6k|    do {
 7230|  31.6k|        value *= 10;
 7231|  31.6k|        value += static_cast<unsigned long long>(*begin - '0');
 7232|  31.6k|        if (value >
  ------------------
  |  Branch (7232:13): [True: 116, False: 31.5k]
  ------------------
 7233|  31.6k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 7234|    116|            return -1;
 7235|    116|        }
 7236|  31.5k|        ++begin;
 7237|  31.5k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (7237:14): [True: 31.2k, False: 294]
  |  Branch (7237:30): [True: 27.1k, False: 4.12k]
  |  Branch (7237:47): [True: 15.4k, False: 11.6k]
  ------------------
 7238|  16.1k|    return static_cast<int>(value);
 7239|  16.2k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 7781|    682|        {
 7782|    682|            arg_id = handler.on_arg_id(id);
 7783|    682|        }
_ZN3scn2v424basic_scan_parse_contextIcE12check_arg_idEm:
 6409|    682|    {
 6410|    682|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  | 1039|    682|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 70, False: 612]
  |  |  ------------------
  ------------------
 6411|     70|            on_error(
 6412|     70|                "Cannot switch from manual to automatic argument indexing");
 6413|     70|            return;
 6414|     70|        }
 6415|    612|        m_next_arg_id = -1;
 6416|    612|        do_check_arg_id(id);
 6417|    612|    }
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7777|  31.6k|        {
 7778|  31.6k|            arg_id = handler.on_arg_id();
 7779|  31.6k|        }
_ZN3scn2v424basic_scan_parse_contextIcE10advance_toEPKc:
 6391|  28.4k|    {
 6392|  28.4k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6393|  28.4k|    }
_ZNK3scn2v424basic_scan_parse_contextIcE5beginEv:
 6380|  60.4k|    {
 6381|  60.4k|        return m_format.data();
 6382|  60.4k|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7960|  32.0k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1110|  32.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7961|  32.0k|    {
 7962|  32.0k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1104|  32.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  32.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7963|  32.0k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7690|  32.0k|{
 7691|  32.0k|    auto do_presentation = [&]() -> const CharT* {
 7692|  32.0k|        if (*begin == CharT{'['}) {
 7693|  32.0k|            auto set = parse_presentation_set(begin, end, handler);
 7694|  32.0k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7695|       |                // clang-format off
 7696|  32.0k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|  32.0k|                return begin;
 7699|  32.0k|            }
 7700|  32.0k|            handler.on_character_set_string(set);
 7701|  32.0k|            return begin;
 7702|  32.0k|        }
 7703|  32.0k|        if (*begin == CharT{'/'}) {
 7704|  32.0k|            return parse_presentation_regex(begin, end, handler);
 7705|  32.0k|        }
 7706|  32.0k|        presentation_type type = parse_presentation_type(*begin++);
 7707|  32.0k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7708|  32.0k|            handler.on_error("Invalid type specifier in format string");
 7709|  32.0k|            return begin;
 7710|  32.0k|        }
 7711|  32.0k|        handler.on_type(type);
 7712|  32.0k|        return begin;
 7713|  32.0k|    };
 7714|       |
 7715|  32.0k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7715:9): [True: 30.9k, False: 1.09k]
  |  Branch (7715:28): [True: 2.50k, False: 28.4k]
  ------------------
 7716|  32.0k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7716:9): [True: 968, False: 1.53k]
  |  Branch (7716:36): [True: 934, False: 34]
  ------------------
 7717|    934|        return do_presentation();
 7718|    934|    }
 7719|       |
 7720|  31.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  31.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 31.0k]
  |  |  ------------------
  ------------------
 7721|      0|        handler.on_error("Unexpected end of format string");
 7722|      0|        return begin;
 7723|      0|    }
 7724|       |
 7725|  31.0k|    begin = parse_align(begin, end, handler);
 7726|  31.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  31.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 126, False: 30.9k]
  |  |  ------------------
  ------------------
 7727|    126|        handler.on_error("Unexpected end of format string");
 7728|    126|        return begin;
 7729|    126|    }
 7730|       |
 7731|  30.9k|    begin = parse_width(begin, end, handler);
 7732|  30.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  30.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 102, False: 30.8k]
  |  |  ------------------
  ------------------
 7733|    102|        handler.on_error("Unexpected end of format string");
 7734|    102|        return begin;
 7735|    102|    }
 7736|       |
 7737|  30.8k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7737:9): [True: 11.8k, False: 19.0k]
  ------------------
 7738|  11.8k|        ++begin;
 7739|  11.8k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 34, False: 11.7k]
  |  |  ------------------
  ------------------
 7740|     34|            handler.on_error("Unexpected end of format string");
 7741|     34|            return begin;
 7742|     34|        }
 7743|  11.7k|        begin = parse_precision(begin, end, handler);
 7744|  11.7k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 114, False: 11.6k]
  |  |  ------------------
  ------------------
 7745|    114|            handler.on_error("Unexpected end of format string");
 7746|    114|            return begin;
 7747|    114|        }
 7748|  11.7k|    }
 7749|       |
 7750|  30.7k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7750:9): [True: 572, False: 30.1k]
  ------------------
 7751|    572|        handler.on_localized();
 7752|    572|        ++begin;
 7753|    572|    }
 7754|  30.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  30.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 52, False: 30.6k]
  |  |  ------------------
  ------------------
 7755|     52|        handler.on_error("Unexpected end of format string");
 7756|     52|        return begin;
 7757|     52|    }
 7758|       |
 7759|  30.6k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7759:9): [True: 30.6k, False: 0]
  |  Branch (7759:25): [True: 24.7k, False: 5.94k]
  ------------------
 7760|  24.7k|        do_presentation();
 7761|  24.7k|    }
 7762|  30.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  30.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.99k, False: 28.6k]
  |  |  ------------------
  ------------------
 7763|  1.99k|        handler.on_error("Unexpected end of format string");
 7764|  1.99k|        return begin;
 7765|  1.99k|    }
 7766|       |
 7767|  28.6k|    return begin;
 7768|  30.6k|}
_ZN3scn2v46detail15is_ascii_letterIcEEbT_:
 7339|  2.50k|{
 7340|  2.50k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7340:13): [True: 932, False: 1.57k]
  |  Branch (7340:33): [True: 880, False: 52]
  ------------------
 7341|  2.50k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7341:13): [True: 304, False: 1.32k]
  |  Branch (7341:33): [True: 88, False: 216]
  ------------------
 7342|  2.50k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7691|  25.6k|    auto do_presentation = [&]() -> const CharT* {
 7692|  25.6k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7692:13): [True: 15.1k, False: 10.5k]
  ------------------
 7693|  15.1k|            auto set = parse_presentation_set(begin, end, handler);
 7694|  15.1k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  | 1039|  15.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 810, False: 14.3k]
  |  |  ------------------
  ------------------
 7695|       |                // clang-format off
 7696|    810|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|    810|                return begin;
 7699|    810|            }
 7700|  14.3k|            handler.on_character_set_string(set);
 7701|  14.3k|            return begin;
 7702|  15.1k|        }
 7703|  10.5k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7703:13): [True: 4.27k, False: 6.25k]
  ------------------
 7704|  4.27k|            return parse_presentation_regex(begin, end, handler);
 7705|  4.27k|        }
 7706|  6.25k|        presentation_type type = parse_presentation_type(*begin++);
 7707|  6.25k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  | 1039|  6.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 916, False: 5.33k]
  |  |  ------------------
  ------------------
 7708|    916|            handler.on_error("Invalid type specifier in format string");
 7709|    916|            return begin;
 7710|    916|        }
 7711|  5.33k|        handler.on_type(type);
 7712|  5.33k|        return begin;
 7713|  6.25k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEENSt3__117basic_string_viewIT_NSI_11char_traitsISK_EEEERPKSK_SP_OT0_:
 7529|  15.1k|{
 7530|  15.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  15.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  15.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7531|  15.1k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  | 1104|  15.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  15.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7532|       |
 7533|  15.1k|    auto start = begin;
 7534|  15.1k|    ++begin;
 7535|       |
 7536|  15.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  15.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 42, False: 15.0k]
  |  |  ------------------
  ------------------
 7537|       |        // clang-format off
 7538|     42|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7539|       |        // clang-format on
 7540|     42|        return {};
 7541|     42|    }
 7542|  15.0k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7542:9): [True: 2.46k, False: 12.6k]
  ------------------
 7543|  2.46k|        handler.on_charset_inverted();
 7544|  2.46k|        ++begin;
 7545|  2.46k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  2.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 34, False: 2.42k]
  |  |  ------------------
  ------------------
 7546|       |            // clang-format off
 7547|     34|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7548|       |            // clang-format on
 7549|     34|            return {};
 7550|     34|        }
 7551|  2.42k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7551:13): [True: 52, False: 2.37k]
  ------------------
 7552|     52|            handler.on_charset_single(char32_t{']'});
 7553|     52|            ++begin;
 7554|     52|        }
 7555|  2.42k|    }
 7556|  12.6k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7556:14): [True: 34, False: 12.5k]
  ------------------
 7557|     34|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7558|     34|    }
 7559|       |
 7560|  2.42M|    while (begin != end) {
  ------------------
  |  Branch (7560:12): [True: 2.41M, False: 484]
  ------------------
 7561|  2.41M|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1039|  2.41M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 216, False: 2.41M]
  |  |  ------------------
  ------------------
 7562|    216|            break;
 7563|    216|        }
 7564|       |
 7565|  2.41M|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7565:13): [True: 14.3k, False: 2.40M]
  ------------------
 7566|  14.3k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7567|  14.3k|        }
 7568|       |
 7569|  2.40M|        parse_presentation_set_literal(begin, end, handler);
 7570|  2.40M|    }
 7571|       |
 7572|    700|    SCN_UNLIKELY_ATTR
 7573|    700|    handler.on_error("Invalid [character set] specifier in format string");
 7574|    700|    return {};
 7575|  15.0k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEvRPKT_SK_OT0_:
 7493|  2.40M|{
 7494|  2.40M|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  2.40M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.40M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7495|       |
 7496|  2.40M|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7497|  2.40M|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  | 1039|  2.40M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 94, False: 2.40M]
  |  |  ------------------
  ------------------
 7498|     94|        return;
 7499|     94|    }
 7500|       |
 7501|  2.40M|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7501:9): [True: 2.40M, False: 188]
  |  Branch (7501:25): [True: 14.5k, False: 2.39M]
  |  Branch (7501:49): [True: 14.4k, False: 34]
  ------------------
 7502|  2.40M|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7502:9): [True: 14.2k, False: 250]
  ------------------
 7503|  14.2k|        ++begin;
 7504|       |
 7505|  14.2k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7506|  14.2k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  | 1039|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 70, False: 14.1k]
  |  |  ------------------
  ------------------
 7507|     70|            return;
 7508|     70|        }
 7509|       |
 7510|  14.1k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  | 1039|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 34, False: 14.1k]
  |  |  ------------------
  ------------------
 7511|       |            // clang-format off
 7512|     34|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7513|       |            // clang-format on
 7514|     34|            return;
 7515|     34|        }
 7516|       |
 7517|  14.1k|        handler.on_charset_range(cp_first, cp_second + 1);
 7518|  14.1k|        return;
 7519|  14.1k|    }
 7520|       |
 7521|  2.39M|    handler.on_charset_single(cp_first);
 7522|  2.39M|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEDiRPKT_SK_OT0_:
 7469|  2.41M|{
 7470|  2.41M|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  2.41M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.41M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7471|       |
 7472|  2.41M|    auto len = code_point_length_by_starting_code_unit(*begin);
 7473|  2.41M|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  | 1039|  4.83M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 96, False: 2.41M]
  |  |  |  Branch (1039:45): [True: 70, False: 2.41M]
  |  |  |  Branch (1039:45): [True: 26, False: 2.41M]
  |  |  ------------------
  ------------------
 7474|     96|        handler.on_error("Invalid encoding in format string");
 7475|     96|        return invalid_code_point;
 7476|     96|    }
 7477|       |
 7478|  2.41M|    const auto cp =
 7479|  2.41M|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7480|  2.41M|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  | 1039|  2.41M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 68, False: 2.41M]
  |  |  ------------------
  ------------------
 7481|     68|        handler.on_error("Invalid encoding in format string");
 7482|     68|        return invalid_code_point;
 7483|     68|    }
 7484|       |
 7485|  2.41M|    begin += len;
 7486|  2.41M|    return cp;
 7487|  2.41M|}
_ZN3scn2v46detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7183|  14.3k|    {
 7184|  14.3k|        m_specs.charset_string_data = fmt.data();
 7185|  14.3k|        m_specs.charset_string_size = fmt.size();
 7186|  14.3k|        on_type(presentation_type::string_set);
 7187|  14.3k|    }
impl.cpp:_ZN3scn2v46detail24parse_presentation_regexIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_RSK_SK_OT0_:
 7581|  4.27k|{
 7582|  4.27k|#if !SCN_DISABLE_REGEX
 7583|  4.27k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  4.27k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  4.27k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7584|  4.27k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  | 1104|  4.27k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  4.27k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7585|       |
 7586|       |    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 7587|       |                  std::is_same_v<CharT, wchar_t>) {
 7588|       |        handler.on_error("Regex backend doesn't support wide strings as input");
 7589|       |        return begin;
 7590|       |    }
 7591|       |
 7592|  4.27k|    auto start = begin;
 7593|  4.27k|    ++begin;
 7594|       |
 7595|  4.27k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  4.27k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 34, False: 4.23k]
  |  |  ------------------
  ------------------
 7596|     34|        handler.on_error("Unexpected end of regex in format string");
 7597|     34|        return begin;
 7598|     34|    }
 7599|       |
 7600|  4.23k|    handler.on_type(presentation_type::regex);
 7601|   258k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (7601:12): [True: 258k, False: 174]
  ------------------
 7602|   258k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7602:13): [True: 27.7k, False: 230k]
  ------------------
 7603|  27.7k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (7603:17): [True: 4.06k, False: 23.7k]
  ------------------
 7604|  4.06k|                break;
 7605|  4.06k|            }
 7606|  23.7k|            else {
 7607|  23.7k|                handler.on_type(presentation_type::regex_escaped);
 7608|  23.7k|            }
 7609|  27.7k|        }
 7610|   258k|    }
 7611|  4.23k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  4.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 174, False: 4.06k]
  |  |  ------------------
  ------------------
 7612|    174|        handler.on_error("Unexpected end of regex in format string");
 7613|    174|        return begin;
 7614|    174|    }
 7615|       |
 7616|  4.06k|    auto regex_end = begin;
 7617|  4.06k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 7618|  4.06k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  | 1039|  4.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 34, False: 4.03k]
  |  |  ------------------
  ------------------
 7619|     34|        handler.on_error("Invalid (empty) regex in format string");
 7620|     34|        return begin;
 7621|     34|    }
 7622|  4.03k|    handler.on_regex_pattern(regex_pattern);
 7623|  4.03k|    ++begin;
 7624|       |
 7625|  4.03k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  4.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 34, False: 3.99k]
  |  |  ------------------
  ------------------
 7626|     34|        handler.on_error("Unexpected end of regex in format string");
 7627|     34|        return begin;
 7628|     34|    }
 7629|       |
 7630|  3.99k|    regex_flags flags{regex_flags::none};
 7631|  3.99k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 7632|  3.99k|        {{'m', regex_flags::multiline},
 7633|  3.99k|         {'s', regex_flags::singleline},
 7634|  3.99k|         {'i', regex_flags::nocase},
 7635|  3.99k|         {'n', regex_flags::nocapture}}};
 7636|  4.21k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (7636:12): [True: 4.17k, False: 42]
  ------------------
 7637|  4.17k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7637:13): [True: 3.86k, False: 310]
  ------------------
 7638|  3.86k|            break;
 7639|  3.86k|        }
 7640|    310|        bool found_flag = false;
 7641|    874|        for (auto flag : flag_map) {
  ------------------
  |  Branch (7641:24): [True: 874, False: 54]
  ------------------
 7642|    874|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (7642:17): [True: 618, False: 256]
  ------------------
 7643|    618|                continue;
 7644|    618|            }
 7645|    256|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (7645:17): [True: 34, False: 222]
  ------------------
 7646|     34|                handler.on_error("Flag set multiple times in regex");
 7647|     34|                return begin;
 7648|     34|            }
 7649|       |#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 7650|       |            if (*begin == CharT{'s'}) {
 7651|       |                // clang-format off
 7652|       |                handler.on_error("/s flag for regex isn't supported by regex backend");
 7653|       |                // clang-format on
 7654|       |            }
 7655|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 7656|       |            if (*begin == CharT{'m'}) {
 7657|       |                // clang-format off
 7658|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 7659|       |                // clang-format on
 7660|       |            }
 7661|       |#endif
 7662|       |#endif
 7663|    222|            flags |= flag.second;
 7664|    222|            found_flag = true;
 7665|    222|            break;
 7666|    256|        }
 7667|    276|        if (!found_flag) {
  ------------------
  |  Branch (7667:13): [True: 54, False: 222]
  ------------------
 7668|     54|            handler.on_error("Invalid flag in regex");
 7669|     54|            return begin;
 7670|     54|        }
 7671|    276|    }
 7672|  3.90k|    handler.on_regex_flags(flags);
 7673|       |
 7674|  3.90k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  3.90k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 42, False: 3.86k]
  |  |  ------------------
  ------------------
 7675|     42|        handler.on_error("Unexpected end of regex in format string");
 7676|     42|        return begin;
 7677|     42|    }
 7678|       |
 7679|  3.86k|    return begin;
 7680|       |#else
 7681|       |    handler.on_error("Regular expression support is disabled");
 7682|       |    return {};
 7683|       |#endif
 7684|  3.90k|}
_ZN3scn2v46detail12specs_setter16on_regex_patternIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7191|  4.03k|    {
 7192|  4.03k|        m_specs.charset_string_data = pattern.data();
 7193|  4.03k|        m_specs.charset_string_size = pattern.size();
 7194|  4.03k|    }
_ZN3scn2v46detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 7287|  6.25k|{
 7288|  6.25k|    switch (type) {
 7289|    142|        case 'b':
  ------------------
  |  Branch (7289:9): [True: 142, False: 6.10k]
  ------------------
 7290|    194|        case 'B':
  ------------------
  |  Branch (7290:9): [True: 52, False: 6.19k]
  ------------------
 7291|    194|            return presentation_type::int_binary;
 7292|    108|        case 'd':
  ------------------
  |  Branch (7292:9): [True: 108, False: 6.14k]
  ------------------
 7293|    108|            return presentation_type::int_decimal;
 7294|    196|        case 'i':
  ------------------
  |  Branch (7294:9): [True: 196, False: 6.05k]
  ------------------
 7295|    196|            return presentation_type::int_generic;
 7296|     88|        case 'u':
  ------------------
  |  Branch (7296:9): [True: 88, False: 6.16k]
  ------------------
 7297|     88|            return presentation_type::int_unsigned_decimal;
 7298|    196|        case 'o':
  ------------------
  |  Branch (7298:9): [True: 196, False: 6.05k]
  ------------------
 7299|    196|            return presentation_type::int_octal;
 7300|     98|        case 'x':
  ------------------
  |  Branch (7300:9): [True: 98, False: 6.15k]
  ------------------
 7301|    150|        case 'X':
  ------------------
  |  Branch (7301:9): [True: 52, False: 6.19k]
  ------------------
 7302|    150|            return presentation_type::int_hex;
 7303|     34|        case 'r':
  ------------------
  |  Branch (7303:9): [True: 34, False: 6.21k]
  ------------------
 7304|     84|        case 'R':
  ------------------
  |  Branch (7304:9): [True: 50, False: 6.20k]
  ------------------
 7305|     84|            return presentation_type::int_arbitrary_base;
 7306|    124|        case 'a':
  ------------------
  |  Branch (7306:9): [True: 124, False: 6.12k]
  ------------------
 7307|    230|        case 'A':
  ------------------
  |  Branch (7307:9): [True: 106, False: 6.14k]
  ------------------
 7308|    230|            return presentation_type::float_hex;
 7309|     88|        case 'e':
  ------------------
  |  Branch (7309:9): [True: 88, False: 6.16k]
  ------------------
 7310|    212|        case 'E':
  ------------------
  |  Branch (7310:9): [True: 124, False: 6.12k]
  ------------------
 7311|    212|            return presentation_type::float_scientific;
 7312|    214|        case 'f':
  ------------------
  |  Branch (7312:9): [True: 214, False: 6.03k]
  ------------------
 7313|    320|        case 'F':
  ------------------
  |  Branch (7313:9): [True: 106, False: 6.14k]
  ------------------
 7314|    320|            return presentation_type::float_fixed;
 7315|    150|        case 'g':
  ------------------
  |  Branch (7315:9): [True: 150, False: 6.10k]
  ------------------
 7316|    226|        case 'G':
  ------------------
  |  Branch (7316:9): [True: 76, False: 6.17k]
  ------------------
 7317|    226|            return presentation_type::float_general;
 7318|  2.62k|        case 's':
  ------------------
  |  Branch (7318:9): [True: 2.62k, False: 3.62k]
  ------------------
 7319|  2.62k|            return presentation_type::string;
 7320|    592|        case 'c':
  ------------------
  |  Branch (7320:9): [True: 592, False: 5.65k]
  ------------------
 7321|    592|            return presentation_type::character;
 7322|     34|        case '?':
  ------------------
  |  Branch (7322:9): [True: 34, False: 6.21k]
  ------------------
 7323|     34|            return presentation_type::escaped_character;
 7324|     78|        case 'p':
  ------------------
  |  Branch (7324:9): [True: 78, False: 6.17k]
  ------------------
 7325|     78|            return presentation_type::pointer;
 7326|      0|        case '[':
  ------------------
  |  Branch (7326:9): [True: 0, False: 6.25k]
  ------------------
 7327|      0|        case '/':
  ------------------
  |  Branch (7327:9): [True: 0, False: 6.25k]
  ------------------
 7328|       |            // Should be handled by parse_presentation_set and
 7329|       |            // parse_presentation_regex
 7330|      0|            SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7331|      0|            SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7332|    916|        default:
  ------------------
  |  Branch (7332:9): [True: 916, False: 5.33k]
  ------------------
 7333|    916|            return presentation_type::none;
 7334|  6.25k|    }
 7335|  6.25k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7364|  31.0k|{
 7365|  31.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  31.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  31.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7366|       |
 7367|  31.0k|    auto check_align = [](wchar_t ch) {
 7368|  31.0k|        switch (ch) {
 7369|  31.0k|            case L'<':
 7370|  31.0k|                return align_type::left;
 7371|  31.0k|            case L'>':
 7372|  31.0k|                return align_type::right;
 7373|  31.0k|            case L'^':
 7374|  31.0k|                return align_type::center;
 7375|  31.0k|            default:
 7376|  31.0k|                return align_type::none;
 7377|  31.0k|        }
 7378|  31.0k|    };
 7379|       |
 7380|  31.0k|    auto potential_fill_len = code_point_length(begin, end);
 7381|  31.0k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  | 1039|  62.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 44, False: 31.0k]
  |  |  |  Branch (1039:45): [True: 38, False: 31.0k]
  |  |  |  Branch (1039:45): [True: 6, False: 31.0k]
  |  |  ------------------
  ------------------
 7382|  31.0k|                     std::distance(begin, end) < potential_fill_len)) {
 7383|     44|        handler.on_error("Invalid encoding in fill character");
 7384|     44|        return begin;
 7385|     44|    }
 7386|       |
 7387|  31.0k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7388|       |
 7389|  31.0k|    auto potential_fill = std::basic_string_view<CharT>{
 7390|  31.0k|        begin, static_cast<size_t>(potential_fill_len)};
 7391|  31.0k|    const auto begin_before_fill = begin;
 7392|  31.0k|    begin += potential_fill_len;
 7393|       |
 7394|  31.0k|    if (begin == end) {
  ------------------
  |  Branch (7394:9): [True: 1.05k, False: 29.9k]
  ------------------
 7395|  1.05k|        return begin_before_fill;
 7396|  1.05k|    }
 7397|       |
 7398|  29.9k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7399|  29.9k|    const auto begin_after_fill = begin;
 7400|  29.9k|    ++begin;
 7401|       |
 7402|  29.9k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7402:9): [True: 27.5k, False: 2.41k]
  ------------------
 7403|  27.5k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  | 1039|  27.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 60, False: 27.5k]
  |  |  ------------------
  ------------------
 7404|     60|            handler.on_error("Invalid fill character '{' in format string");
 7405|     60|            return begin;
 7406|     60|        }
 7407|  27.5k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7407:13): [True: 11.6k, False: 15.8k]
  ------------------
 7408|  11.6k|            return begin_before_fill;
 7409|  11.6k|        }
 7410|  27.5k|    }
 7411|       |
 7412|  18.2k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7412:9): [True: 15.6k, False: 2.60k]
  ------------------
 7413|  15.6k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7413:13): [True: 2.34k, False: 13.3k]
  ------------------
 7414|  2.34k|            handler.on_align(potential_align_on_fill);
 7415|  2.34k|            return begin_after_fill;
 7416|  2.34k|        }
 7417|  13.3k|        return begin_before_fill;
 7418|  15.6k|    }
 7419|       |
 7420|  2.60k|    handler.on_fill(potential_fill);
 7421|  2.60k|    handler.on_align(potential_align_after_fill);
 7422|  2.60k|    return begin;
 7423|  18.2k|}
_ZN3scn2v46detail17code_point_lengthIcEEiPKT_S5_:
 7346|  31.0k|{
 7347|  31.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  31.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  31.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7348|       |    if constexpr (sizeof(CharT) != 1) {
 7349|       |        return 1;
 7350|       |    }
 7351|  31.0k|    else {
 7352|  31.0k|        const auto lengths =
 7353|  31.0k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7354|  31.0k|            "\3\4";
 7355|  31.0k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7356|  31.0k|        return len;
 7357|  31.0k|    }
 7358|  31.0k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7367|  61.0k|    auto check_align = [](wchar_t ch) {
 7368|  61.0k|        switch (ch) {
 7369|  1.48k|            case L'<':
  ------------------
  |  Branch (7369:13): [True: 1.48k, False: 59.5k]
  ------------------
 7370|  1.48k|                return align_type::left;
 7371|    976|            case L'>':
  ------------------
  |  Branch (7371:13): [True: 976, False: 60.0k]
  ------------------
 7372|    976|                return align_type::right;
 7373|  3.65k|            case L'^':
  ------------------
  |  Branch (7373:13): [True: 3.65k, False: 57.3k]
  ------------------
 7374|  3.65k|                return align_type::center;
 7375|  54.9k|            default:
  ------------------
  |  Branch (7375:13): [True: 54.9k, False: 6.11k]
  ------------------
 7376|  54.9k|                return align_type::none;
 7377|  61.0k|        }
 7378|  61.0k|    };
_ZN3scn2v46detail12specs_setter7on_fillIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7104|  2.60k|    {
 7105|  2.60k|        m_specs.fill = fill;
 7106|  2.60k|    }
_ZN3scn2v46detail9fill_typeaSIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6985|  2.60k|    {
 6986|  2.60k|        SCN_EXPECT(!s.empty());
  ------------------
  |  | 1104|  2.60k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.60k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6987|  2.60k|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  | 1104|  2.60k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.60k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6988|  2.60k|        if constexpr (sizeof(CharT) == 1) {
 6989|  9.41k|            for (size_t i = 0; i < s.size(); ++i) {
  ------------------
  |  Branch (6989:32): [True: 6.81k, False: 2.60k]
  ------------------
 6990|  6.81k|                SCN_GCC_PUSH
 6991|  6.81k|                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6992|  6.81k|                m_data[i] = s[i];
 6993|  6.81k|                SCN_GCC_POP
 6994|  6.81k|            }
 6995|  2.60k|            m_size = static_cast<unsigned char>(s.size());
 6996|       |        }
 6997|       |        else if constexpr (sizeof(CharT) == 2) {
 6998|       |            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6999|       |            m_data[1] =
 7000|       |                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 7001|       |            if (s.size() == 1) {
 7002|       |                return;
 7003|       |            }
 7004|       |            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 7005|       |            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 7006|       |        }
 7007|       |        else {
 7008|       |            const auto front = static_cast<unsigned>(s.front());
 7009|       |            m_data[0] = static_cast<char>(front);
 7010|       |            m_data[1] = static_cast<char>(front >> 8);
 7011|       |            m_data[2] = static_cast<char>(front >> 16);
 7012|       |            m_data[3] = static_cast<char>(front >> 24);
 7013|       |        }
 7014|  2.60k|    }
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7429|  30.9k|{
 7430|  30.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  30.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  30.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7431|       |
 7432|  30.9k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7432:9): [True: 18.2k, False: 12.6k]
  |  Branch (7432:33): [True: 4.07k, False: 14.2k]
  ------------------
 7433|  4.07k|        int width = parse_simple_int(begin, end);
 7434|  4.07k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  | 1038|  4.07k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 4.04k, False: 34]
  |  |  ------------------
  ------------------
 7435|  4.04k|            handler.on_width(width);
 7436|  4.04k|        }
 7437|     34|        else {
 7438|     34|            handler.on_error("Invalid field width");
 7439|     34|            return begin;
 7440|     34|        }
 7441|  4.07k|    }
 7442|  30.9k|    return begin;
 7443|  30.9k|}
impl.cpp:_ZN3scn2v46detail15parse_precisionIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7449|  11.7k|{
 7450|  11.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  11.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  11.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7451|       |
 7452|  11.7k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7452:9): [True: 11.7k, False: 40]
  |  Branch (7452:33): [True: 11.6k, False: 52]
  ------------------
 7453|  11.6k|        int prec = parse_simple_int(begin, end);
 7454|  11.6k|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  | 1038|  11.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 11.6k, False: 48]
  |  |  ------------------
  ------------------
 7455|  11.6k|            handler.on_precision(prec);
 7456|  11.6k|        }
 7457|     48|        else {
 7458|     48|            handler.on_error("Invalid field precision");
 7459|     48|            return begin;
 7460|     48|        }
 7461|  11.6k|    }
 7462|  11.7k|    return begin;
 7463|  11.7k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEE12on_localizedEv:
 7966|    572|    {
 7967|    572|        const auto cat = get_category_for_arg_type(m_arg_type);
 7968|    572|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7968:13): [True: 514, False: 58]
  ------------------
 7969|    572|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7969:13): [True: 456, False: 58]
  ------------------
 7970|    572|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7970:13): [True: 398, False: 58]
  ------------------
 7971|    572|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7971:13): [True: 340, False: 58]
  ------------------
 7972|    340|            SCN_UNLIKELY_ATTR
 7973|       |            // clang-format off
 7974|    340|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7975|       |            // clang-format on
 7976|    340|        }
 7977|       |
 7978|    232|        Handler::on_localized();
 7979|    232|    }
_ZN3scn2v46detail12specs_setter12on_localizedILb1EEEvv:
 7109|    512|    {
 7110|    512|        if constexpr (!SCN_DISABLE_LOCALE) {
 7111|    512|            m_specs.localized = true;
 7112|       |        }
 7113|       |        else {
 7114|       |            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 7115|       |        }
 7116|    512|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9493|  28.2k|{
 9494|  28.2k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|  28.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|  28.2k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|  28.2k|{
 9353|  28.2k|#define SCN_VISIT(Type)                                                \
 9354|  28.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|  28.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|  28.2k|    }                                                                  \
 9357|  28.2k|    else {                                                             \
 9358|  28.2k|        return vis(monostate_val);                                     \
 9359|  28.2k|    }
 9360|       |
 9361|  28.2k|    monostate monostate_val{};
 9362|       |
 9363|  28.2k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 28.2k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 28.2k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|  3.16k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 3.16k, False: 25.0k]
  ------------------
 9369|  3.16k|            SCN_VISIT(int);
  ------------------
  |  | 9354|  3.16k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  3.16k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  3.16k|    }                                                                  \
  |  | 9357|  3.16k|    else {                                                             \
  |  | 9358|  3.16k|        return vis(monostate_val);                                     \
  |  | 9359|  3.16k|    }
  ------------------
 9370|  3.16k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 28.2k]
  ------------------
 9371|  3.16k|            SCN_VISIT(long);
  ------------------
  |  | 9354|  3.16k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  3.16k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  3.16k|    }                                                                  \
  |  | 9357|  3.16k|    else {                                                             \
  |  | 9358|  3.16k|        return vis(monostate_val);                                     \
  |  | 9359|  3.16k|    }
  ------------------
 9372|  3.16k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 28.2k]
  ------------------
 9373|  3.16k|            SCN_VISIT(long long);
  ------------------
  |  | 9354|  3.16k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  3.16k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  3.16k|    }                                                                  \
  |  | 9357|  3.16k|    else {                                                             \
  |  | 9358|  3.16k|        return vis(monostate_val);                                     \
  |  | 9359|  3.16k|    }
  ------------------
 9374|  3.16k|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 28.2k]
  ------------------
 9375|  3.16k|#if SCN_HAS_INT128
 9376|  3.16k|            SCN_VISIT(int128)
  ------------------
  |  | 9354|  3.16k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  3.16k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  3.16k|    }                                                                  \
  |  | 9357|  3.16k|    else {                                                             \
  |  | 9358|  3.16k|        return vis(monostate_val);                                     \
  |  | 9359|  3.16k|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|  3.16k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 28.2k]
  ------------------
 9381|  3.16k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|  3.16k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  3.16k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  3.16k|    }                                                                  \
  |  | 9357|  3.16k|    else {                                                             \
  |  | 9358|  3.16k|        return vis(monostate_val);                                     \
  |  | 9359|  3.16k|    }
  ------------------
 9382|  3.16k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 28.2k]
  ------------------
 9383|  3.16k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|  3.16k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  3.16k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  3.16k|    }                                                                  \
  |  | 9357|  3.16k|    else {                                                             \
  |  | 9358|  3.16k|        return vis(monostate_val);                                     \
  |  | 9359|  3.16k|    }
  ------------------
 9384|  6.33k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 3.16k, False: 25.0k]
  ------------------
 9385|  6.33k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|  6.33k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  6.33k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  6.33k|    }                                                                  \
  |  | 9357|  6.33k|    else {                                                             \
  |  | 9358|  6.33k|        return vis(monostate_val);                                     \
  |  | 9359|  6.33k|    }
  ------------------
 9386|  6.33k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 28.2k]
  ------------------
 9387|  6.33k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|  6.33k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  6.33k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  6.33k|    }                                                                  \
  |  | 9357|  6.33k|    else {                                                             \
  |  | 9358|  6.33k|        return vis(monostate_val);                                     \
  |  | 9359|  6.33k|    }
  ------------------
 9388|  6.33k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 28.2k]
  ------------------
 9389|  6.33k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|  6.33k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  6.33k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  6.33k|    }                                                                  \
  |  | 9357|  6.33k|    else {                                                             \
  |  | 9358|  6.33k|        return vis(monostate_val);                                     \
  |  | 9359|  6.33k|    }
  ------------------
 9390|  6.33k|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 28.2k]
  ------------------
 9391|  6.33k|#if SCN_HAS_INT128
 9392|  6.33k|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|  6.33k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  6.33k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  6.33k|    }                                                                  \
  |  | 9357|  6.33k|    else {                                                             \
  |  | 9358|  6.33k|        return vis(monostate_val);                                     \
  |  | 9359|  6.33k|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|  9.45k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 3.12k, False: 25.1k]
  ------------------
 9397|  9.45k|            SCN_VISIT(void*);
  ------------------
  |  | 9354|  9.45k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  9.45k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  9.45k|    }                                                                  \
  |  | 9357|  9.45k|    else {                                                             \
  |  | 9358|  9.45k|        return vis(monostate_val);                                     \
  |  | 9359|  9.45k|    }
  ------------------
 9398|  12.6k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 3.16k, False: 25.0k]
  ------------------
 9399|  12.6k|            SCN_VISIT(bool);
  ------------------
  |  | 9354|  12.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  12.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  12.6k|    }                                                                  \
  |  | 9357|  12.6k|    else {                                                             \
  |  | 9358|  12.6k|        return vis(monostate_val);                                     \
  |  | 9359|  12.6k|    }
  ------------------
 9400|  15.7k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 3.12k, False: 25.1k]
  ------------------
 9401|  15.7k|            SCN_VISIT(char);
  ------------------
  |  | 9354|  15.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  15.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  15.7k|    }                                                                  \
  |  | 9357|  15.7k|    else {                                                             \
  |  | 9358|  15.7k|        return vis(monostate_val);                                     \
  |  | 9359|  15.7k|    }
  ------------------
 9402|  15.7k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 28.2k]
  ------------------
 9403|  15.7k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|  15.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  15.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  15.7k|    }                                                                  \
  |  | 9357|  15.7k|    else {                                                             \
  |  | 9358|  15.7k|        return vis(monostate_val);                                     \
  |  | 9359|  15.7k|    }
  ------------------
 9404|  15.7k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 28.2k]
  ------------------
 9405|  15.7k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|  15.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  15.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  15.7k|    }                                                                  \
  |  | 9357|  15.7k|    else {                                                             \
  |  | 9358|  15.7k|        return vis(monostate_val);                                     \
  |  | 9359|  15.7k|    }
  ------------------
 9406|  15.7k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 0, False: 28.2k]
  ------------------
 9407|  15.7k|            SCN_VISIT(float);
  ------------------
  |  | 9354|  15.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  15.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  15.7k|    }                                                                  \
  |  | 9357|  15.7k|    else {                                                             \
  |  | 9358|  15.7k|        return vis(monostate_val);                                     \
  |  | 9359|  15.7k|    }
  ------------------
 9408|  18.9k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 3.16k, False: 25.0k]
  ------------------
 9409|  18.9k|            SCN_VISIT(double);
  ------------------
  |  | 9354|  18.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  18.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  18.9k|    }                                                                  \
  |  | 9357|  18.9k|    else {                                                             \
  |  | 9358|  18.9k|        return vis(monostate_val);                                     \
  |  | 9359|  18.9k|    }
  ------------------
 9410|  18.9k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 0, False: 28.2k]
  ------------------
 9411|  18.9k|            SCN_VISIT(long double);
  ------------------
  |  | 9354|  18.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  18.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  18.9k|    }                                                                  \
  |  | 9357|  18.9k|    else {                                                             \
  |  | 9358|  18.9k|        return vis(monostate_val);                                     \
  |  | 9359|  18.9k|    }
  ------------------
 9412|  18.9k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 28.2k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|  18.9k|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 28.2k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 28.2k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 28.2k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 28.2k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|  3.12k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 3.12k, False: 25.1k]
  ------------------
 9443|  3.12k|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|  3.12k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  3.12k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  3.12k|    }                                                                  \
  |  | 9357|  3.12k|    else {                                                             \
  |  | 9358|  3.12k|        return vis(monostate_val);                                     \
  |  | 9359|  3.12k|    }
  ------------------
 9444|  6.24k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 3.12k, False: 25.1k]
  ------------------
 9445|  6.24k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|  6.24k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  6.24k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  6.24k|    }                                                                  \
  |  | 9357|  6.24k|    else {                                                             \
  |  | 9358|  6.24k|        return vis(monostate_val);                                     \
  |  | 9359|  6.24k|    }
  ------------------
 9446|  9.36k|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 3.12k, False: 25.1k]
  ------------------
 9447|  9.36k|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|  9.36k|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9354|  9.36k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  9.36k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  9.36k|    }                                                                  \
  |  | 9357|  9.36k|    else {                                                             \
  |  | 9358|  9.36k|        return vis(monostate_val);                                     \
  |  | 9359|  9.36k|    }
  ------------------
 9449|       |            }
 9450|       |            else {
 9451|       |                SCN_VISIT(std::wstring_view);
 9452|       |            }
 9453|  9.36k|        }
 9454|       |
 9455|  9.36k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 28.2k]
  ------------------
 9456|  9.36k|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|  9.36k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|  9.36k|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 28.2k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 28.2k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|  28.2k|            SCN_CLANG_POP
 9473|  28.2k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE5beginEv:
 3493|  15.6k|    {
 3494|  15.6k|        return m_iterator;
 3495|  15.6k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISH_vEEOT_:
 1583|  3.43k|        : base(std::in_place, std::forward<U>(val)),
 1584|  3.43k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  3.43k|    {
 1586|  3.43k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  455|  3.43k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  3.43k|    {
  457|  3.43k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  3.81k|    {
 1330|  3.81k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE3endEv:
 3497|  11.4k|    {
 3498|  11.4k|        return m_sentinel;
 3499|  11.4k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISI_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSM_IXsr3stdE16is_convertible_vISO_SI_EEvE4typeELSS_0EEEONS0_10unexpectedISN_EE:
 1629|    382|        : base(unexpect, std::move(e.error())),
 1630|    382|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|    382|    {
 1632|    382|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  464|    382|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|    382|          m_has_value(false)
  466|    382|    {
  467|    382|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEEC2ISG_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SG_EEvE4typeELPv0EEESO_SJ_:
 3478|  7.76k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  7.76k|    static_cast<    \
  |  | 1109|  7.76k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  7.76k|    static_cast<    \
  |  | 1109|  7.76k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|  7.76k|    {
 3480|  7.76k|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEcvbEv:
 1753|  1.32k|    {
 1754|  1.32k|        return has_value();
 1755|  1.32k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9has_valueEv:
  504|  8.06k|    {
  505|  8.06k|        return m_has_value;
  506|  8.06k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1808|  1.76k|    {
 1809|  1.76k|        return value();
 1810|  1.76k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1782|  4.01k|    {
 1783|  4.01k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  4.01k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  4.01k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  4.01k|        return this->get_value();
 1785|  4.01k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9get_valueEv:
  470|  4.01k|    {
  471|  4.01k|        return m_value;
  472|  4.01k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESI_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSO_:
 1992|  2.49k|    {
 1993|  2.49k|        return detail::transform_error_impl(std::move(*this),
 1994|  2.49k|                                            std::forward<F>(f));
 1995|  2.49k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS6_IPKcS8_EENS4_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEE8sentinelILb1EEEEENS4_9eof_errorEEERFNS0_10scan_errorESK_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESM_EEDaOSR_OT0_:
 1475|  2.49k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  2.49k|    else {
 1486|  2.49k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  2.49k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  2.49k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 2.25k, False: 238]
  |  |  ------------------
  ------------------
 1488|  2.49k|                   ? result(*std::forward<Exp>(exp))
 1489|  2.49k|                   : result(unexpect,
 1490|    238|                            trivial_invoke(std::forward<F>(f),
 1491|    238|                                           std::forward<Exp>(exp).error()));
 1492|  2.49k|    }
 1493|  2.49k|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1818|  2.25k|    {
 1819|  2.25k|        return std::move(value());
 1820|  2.25k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1583|  2.25k|        : base(std::in_place, std::forward<U>(val)),
 1584|  2.25k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  2.25k|    {
 1586|  2.25k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  455|  2.25k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  2.25k|    {
  457|  2.25k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  2.49k|    {
 1330|  2.49k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5errorEv:
 1769|    238|    {
 1770|    238|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|    238|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    238|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|    238|        return std::move(this->get_unexpected().error());
 1772|    238|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE14get_unexpectedEv:
  487|    238|    {
  488|    238|        return m_unexpected;
  489|    238|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
 1639|    238|        : base(unexpect, std::forward<Args>(args)...),
 1640|    238|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|    238|    {
 1642|    238|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  464|    238|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|    238|          m_has_value(false)
  466|    238|    {
  467|    238|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEcvbEv:
 1753|  2.49k|    {
 1754|  2.49k|        return has_value();
 1755|  2.49k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  4.98k|    {
  505|  4.98k|        return m_has_value;
  506|  4.98k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5errorEv:
 1759|    238|    {
 1760|    238|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|    238|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    238|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|    238|        return this->get_unexpected().error();
 1762|    238|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|    238|    {
  488|    238|        return m_unexpected;
  489|    238|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1818|  2.25k|    {
 1819|  2.25k|        return std::move(value());
 1820|  2.25k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1782|  2.25k|    {
 1783|  2.25k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  2.25k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.25k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  2.25k|        return this->get_value();
 1785|  2.25k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  2.25k|    {
  471|  2.25k|        return m_value;
  472|  2.25k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4sizeEv:
 6262|   124k|    {
 6263|   124k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1039|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 124k]
  |  |  ------------------
  ------------------
 6264|      0|            return max_size();
 6265|      0|        }
 6266|       |
 6267|   124k|        return static_cast<std::size_t>(m_desc &
 6268|   124k|                                        ((1 << detail::packed_arg_bits) - 1));
 6269|   124k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE9is_packedEv:
 6288|   146k|    {
 6289|   146k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6290|   146k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE3getEm:
 6230|  21.4k|    {
 6231|  21.4k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1039|  21.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 21.4k]
  |  |  ------------------
  ------------------
 6232|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  | 1038|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6233|      0|                return m_args[id];
 6234|      0|            }
 6235|      0|            return {};
 6236|      0|        }
 6237|       |
 6238|  21.4k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  | 1039|  21.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 68, False: 21.3k]
  |  |  ------------------
  ------------------
 6239|     68|            return {};
 6240|     68|        }
 6241|       |
 6242|  21.3k|        const auto t = type(id);
 6243|  21.3k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  | 1039|  21.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.23k, False: 20.1k]
  |  |  ------------------
  ------------------
 6244|  1.23k|            return {};
 6245|  1.23k|        }
 6246|       |
 6247|  20.1k|        basic_scan_arg<Context> arg;
 6248|  20.1k|        arg.m_type = t;
 6249|  20.1k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6249:13): [True: 20.1k, False: 0]
  ------------------
 6250|  20.1k|            arg.m_value.ref_value = m_builtin_values[id];
 6251|  20.1k|        }
 6252|      0|        else {
 6253|      0|            arg.m_value = m_values[id];
 6254|      0|        }
 6255|  20.1k|        return arg;
 6256|  21.3k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6040|  21.4k|    constexpr basic_scan_arg() = default;
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4typeEm:
 6297|  21.3k|    {
 6298|       |        // First (0th) index is size, types start after that
 6299|  21.3k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6300|  21.3k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6301|  21.3k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6302|  21.3k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15is_only_builtinEv:
 6292|  20.1k|    {
 6293|  20.1k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6294|  20.1k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEcvbEv:
 6046|  39.6k|    {
 6047|  39.6k|        return m_type != detail::arg_type::none_type;
 6048|  39.6k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9493|  5.07k|{
 9494|  5.07k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|  5.07k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|  5.07k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|  5.07k|{
 9353|  5.07k|#define SCN_VISIT(Type)                                                \
 9354|  5.07k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|  5.07k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|  5.07k|    }                                                                  \
 9357|  5.07k|    else {                                                             \
 9358|  5.07k|        return vis(monostate_val);                                     \
 9359|  5.07k|    }
 9360|       |
 9361|  5.07k|    monostate monostate_val{};
 9362|       |
 9363|  5.07k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 5.07k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 5.07k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|    564|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 564, False: 4.51k]
  ------------------
 9369|    564|            SCN_VISIT(int);
  ------------------
  |  | 9354|    564|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|    564|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|    564|    }                                                                  \
  |  | 9357|    564|    else {                                                             \
  |  | 9358|    564|        return vis(monostate_val);                                     \
  |  | 9359|    564|    }
  ------------------
 9370|    564|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 5.07k]
  ------------------
 9371|    564|            SCN_VISIT(long);
  ------------------
  |  | 9354|    564|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|    564|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|    564|    }                                                                  \
  |  | 9357|    564|    else {                                                             \
  |  | 9358|    564|        return vis(monostate_val);                                     \
  |  | 9359|    564|    }
  ------------------
 9372|    564|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 5.07k]
  ------------------
 9373|    564|            SCN_VISIT(long long);
  ------------------
  |  | 9354|    564|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|    564|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|    564|    }                                                                  \
  |  | 9357|    564|    else {                                                             \
  |  | 9358|    564|        return vis(monostate_val);                                     \
  |  | 9359|    564|    }
  ------------------
 9374|    564|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 5.07k]
  ------------------
 9375|    564|#if SCN_HAS_INT128
 9376|    564|            SCN_VISIT(int128)
  ------------------
  |  | 9354|    564|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|    564|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|    564|    }                                                                  \
  |  | 9357|    564|    else {                                                             \
  |  | 9358|    564|        return vis(monostate_val);                                     \
  |  | 9359|    564|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|    564|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 5.07k]
  ------------------
 9381|    564|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|    564|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|    564|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|    564|    }                                                                  \
  |  | 9357|    564|    else {                                                             \
  |  | 9358|    564|        return vis(monostate_val);                                     \
  |  | 9359|    564|    }
  ------------------
 9382|    564|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 5.07k]
  ------------------
 9383|    564|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|    564|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|    564|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|    564|    }                                                                  \
  |  | 9357|    564|    else {                                                             \
  |  | 9358|    564|        return vis(monostate_val);                                     \
  |  | 9359|    564|    }
  ------------------
 9384|  1.12k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 564, False: 4.51k]
  ------------------
 9385|  1.12k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|  1.12k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  1.12k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  1.12k|    }                                                                  \
  |  | 9357|  1.12k|    else {                                                             \
  |  | 9358|  1.12k|        return vis(monostate_val);                                     \
  |  | 9359|  1.12k|    }
  ------------------
 9386|  1.12k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 5.07k]
  ------------------
 9387|  1.12k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|  1.12k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  1.12k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  1.12k|    }                                                                  \
  |  | 9357|  1.12k|    else {                                                             \
  |  | 9358|  1.12k|        return vis(monostate_val);                                     \
  |  | 9359|  1.12k|    }
  ------------------
 9388|  1.12k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 5.07k]
  ------------------
 9389|  1.12k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|  1.12k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  1.12k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  1.12k|    }                                                                  \
  |  | 9357|  1.12k|    else {                                                             \
  |  | 9358|  1.12k|        return vis(monostate_val);                                     \
  |  | 9359|  1.12k|    }
  ------------------
 9390|  1.12k|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 5.07k]
  ------------------
 9391|  1.12k|#if SCN_HAS_INT128
 9392|  1.12k|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|  1.12k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  1.12k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  1.12k|    }                                                                  \
  |  | 9357|  1.12k|    else {                                                             \
  |  | 9358|  1.12k|        return vis(monostate_val);                                     \
  |  | 9359|  1.12k|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|  1.69k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 564, False: 4.51k]
  ------------------
 9397|  1.69k|            SCN_VISIT(void*);
  ------------------
  |  | 9354|  1.69k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  1.69k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  1.69k|    }                                                                  \
  |  | 9357|  1.69k|    else {                                                             \
  |  | 9358|  1.69k|        return vis(monostate_val);                                     \
  |  | 9359|  1.69k|    }
  ------------------
 9398|  2.25k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 564, False: 4.51k]
  ------------------
 9399|  2.25k|            SCN_VISIT(bool);
  ------------------
  |  | 9354|  2.25k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  2.25k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  2.25k|    }                                                                  \
  |  | 9357|  2.25k|    else {                                                             \
  |  | 9358|  2.25k|        return vis(monostate_val);                                     \
  |  | 9359|  2.25k|    }
  ------------------
 9400|  2.25k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 5.07k]
  ------------------
 9401|  2.25k|            SCN_VISIT(char);
  ------------------
  |  | 9354|  2.25k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  2.25k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  2.25k|    }                                                                  \
  |  | 9357|  2.25k|    else {                                                             \
  |  | 9358|  2.25k|        return vis(monostate_val);                                     \
  |  | 9359|  2.25k|    }
  ------------------
 9402|  2.82k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 564, False: 4.51k]
  ------------------
 9403|  2.82k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|  2.82k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  2.82k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  2.82k|    }                                                                  \
  |  | 9357|  2.82k|    else {                                                             \
  |  | 9358|  2.82k|        return vis(monostate_val);                                     \
  |  | 9359|  2.82k|    }
  ------------------
 9404|  2.82k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 5.07k]
  ------------------
 9405|  2.82k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|  2.82k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  2.82k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  2.82k|    }                                                                  \
  |  | 9357|  2.82k|    else {                                                             \
  |  | 9358|  2.82k|        return vis(monostate_val);                                     \
  |  | 9359|  2.82k|    }
  ------------------
 9406|  2.82k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 0, False: 5.07k]
  ------------------
 9407|  2.82k|            SCN_VISIT(float);
  ------------------
  |  | 9354|  2.82k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  2.82k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  2.82k|    }                                                                  \
  |  | 9357|  2.82k|    else {                                                             \
  |  | 9358|  2.82k|        return vis(monostate_val);                                     \
  |  | 9359|  2.82k|    }
  ------------------
 9408|  3.38k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 564, False: 4.51k]
  ------------------
 9409|  3.38k|            SCN_VISIT(double);
  ------------------
  |  | 9354|  3.38k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  3.38k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  3.38k|    }                                                                  \
  |  | 9357|  3.38k|    else {                                                             \
  |  | 9358|  3.38k|        return vis(monostate_val);                                     \
  |  | 9359|  3.38k|    }
  ------------------
 9410|  3.38k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 0, False: 5.07k]
  ------------------
 9411|  3.38k|            SCN_VISIT(long double);
  ------------------
  |  | 9354|  3.38k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  3.38k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  3.38k|    }                                                                  \
  |  | 9357|  3.38k|    else {                                                             \
  |  | 9358|  3.38k|        return vis(monostate_val);                                     \
  |  | 9359|  3.38k|    }
  ------------------
 9412|  3.38k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 5.07k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|  3.38k|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 5.07k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 5.07k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 5.07k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 5.07k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|    564|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 564, False: 4.51k]
  ------------------
 9443|    564|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|    564|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|    564|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|    564|    }                                                                  \
  |  | 9357|    564|    else {                                                             \
  |  | 9358|    564|        return vis(monostate_val);                                     \
  |  | 9359|    564|    }
  ------------------
 9444|  1.12k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 564, False: 4.51k]
  ------------------
 9445|  1.12k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|  1.12k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  1.12k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  1.12k|    }                                                                  \
  |  | 9357|  1.12k|    else {                                                             \
  |  | 9358|  1.12k|        return vis(monostate_val);                                     \
  |  | 9359|  1.12k|    }
  ------------------
 9446|  1.69k|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 564, False: 4.51k]
  ------------------
 9447|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|       |                SCN_VISIT(std::string_view);
 9449|       |            }
 9450|  1.69k|            else {
 9451|  1.69k|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9354|  1.69k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  1.69k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  1.69k|    }                                                                  \
  |  | 9357|  1.69k|    else {                                                             \
  |  | 9358|  1.69k|        return vis(monostate_val);                                     \
  |  | 9359|  1.69k|    }
  ------------------
 9452|  1.69k|            }
 9453|  1.69k|        }
 9454|       |
 9455|  1.69k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 5.07k]
  ------------------
 9456|  1.69k|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|  1.69k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|  1.69k|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 5.07k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 5.07k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|  5.07k|            SCN_CLANG_POP
 9473|  5.07k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6091|  50.4k|{
 6092|  50.4k|    return arg.m_type;
 6093|  50.4k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6103|  18.1k|{
 6104|  18.1k|    return arg.m_value;
 6105|  18.1k|}
_ZN3scn2v424basic_scan_parse_contextIwEC2IONS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSF_11char_traitsIwEEEEi:
 6361|   124k|        : m_format{format},
 6362|   124k|          m_next_arg_id{next_arg_id},
 6363|   124k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6363:27): [Folded - Ignored]
  ------------------
 6364|   124k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6364:27): [Folded - Ignored]
  ------------------
 6365|       |          m_is_borrowed(
 6366|   124k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6366:16): [Folded - Ignored]
  |  Branch (6366:41): [Folded - Ignored]
  ------------------
 6367|   124k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6367:15): [Folded - Ignored]
  ------------------
 6368|   124k|    {
 6369|   124k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3088|   124k|    {
 3089|   124k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|   124k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3054|   124k|    {
 3055|   124k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|   124k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7877|   124k|{
 7878|   124k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7879|   124k|    handler.check_args_exhausted();
 7880|   124k|    return handler.get_error();
 7881|   124k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7842|   124k|{
 7843|       |    // TODO: memchr fast path with a larger (> 32) format string
 7844|       |
 7845|   124k|    auto begin = format.data();
 7846|   124k|    auto it = begin;
 7847|   124k|    const auto end = format.data() + format.size();
 7848|       |
 7849|   256M|    while (it != end) {
  ------------------
  |  Branch (7849:12): [True: 256M, False: 44.5k]
  ------------------
 7850|   256M|        const auto ch = *it++;
 7851|   256M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7851:13): [True: 33.1k, False: 256M]
  ------------------
 7852|  33.1k|            handler.on_literal_text(begin, it - 1);
 7853|       |
 7854|  33.1k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7855|  33.1k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7855:17): [True: 17.7k, False: 15.4k]
  ------------------
 7856|  17.7k|                return;
 7857|  17.7k|            }
 7858|  33.1k|        }
 7859|   256M|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7859:18): [True: 67.2k, False: 256M]
  ------------------
 7860|  67.2k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1039|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 62.3k, False: 4.98k]
  |  |  |  Branch (1039:45): [True: 106, False: 67.1k]
  |  |  |  Branch (1039:45): [True: 62.2k, False: 4.98k]
  |  |  ------------------
  ------------------
 7861|  62.3k|                handler.on_error("Unmatched '}' in format string");
 7862|  62.3k|                return;
 7863|  62.3k|            }
 7864|       |
 7865|  4.98k|            handler.on_literal_text(begin, it);
 7866|  4.98k|            begin = ++it;
 7867|  4.98k|        }
 7868|   256M|    }
 7869|       |
 7870|  44.5k|    handler.on_literal_text(begin, end);
 7871|  44.5k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 7774|  33.1k|{
 7775|  33.1k|    struct id_adapter {
 7776|  33.1k|        constexpr void operator()()
 7777|  33.1k|        {
 7778|  33.1k|            arg_id = handler.on_arg_id();
 7779|  33.1k|        }
 7780|  33.1k|        constexpr void operator()(std::size_t id)
 7781|  33.1k|        {
 7782|  33.1k|            arg_id = handler.on_arg_id(id);
 7783|  33.1k|        }
 7784|       |
 7785|  33.1k|        constexpr void on_error(const char* msg)
 7786|  33.1k|        {
 7787|  33.1k|            SCN_UNLIKELY_ATTR
 7788|  33.1k|            handler.on_error(msg);
 7789|  33.1k|        }
 7790|       |
 7791|  33.1k|        Handler& handler;
 7792|  33.1k|        std::size_t arg_id;
 7793|  33.1k|    };
 7794|       |
 7795|  33.1k|    ++begin;
 7796|  33.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  33.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 184, False: 33.0k]
  |  |  ------------------
  ------------------
 7797|    184|        handler.on_error("Unexpected end of replacement field");
 7798|    184|        return begin;
 7799|    184|    }
 7800|       |
 7801|  33.0k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7801:9): [True: 5.08k, False: 27.9k]
  ------------------
 7802|  5.08k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7803|  5.08k|    }
 7804|  27.9k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7804:14): [True: 10.8k, False: 17.0k]
  ------------------
 7805|  10.8k|        handler.on_literal_text(begin, begin + 1);
 7806|  10.8k|    }
 7807|  17.0k|    else {
 7808|  17.0k|        auto adapter = id_adapter{handler, 0};
 7809|  17.0k|        begin = parse_arg_id(begin, end, adapter);
 7810|       |
 7811|  17.0k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  17.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 112, False: 16.9k]
  |  |  ------------------
  ------------------
 7812|    112|            handler.on_error("Missing '}' in format string");
 7813|    112|            return begin;
 7814|    112|        }
 7815|       |
 7816|  16.9k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7816:13): [True: 194, False: 16.7k]
  ------------------
 7817|    194|            handler.on_replacement_field(adapter.arg_id, begin);
 7818|    194|        }
 7819|  16.7k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7819:18): [True: 16.1k, False: 586]
  ------------------
 7820|  16.1k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1039|  16.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 50, False: 16.1k]
  |  |  ------------------
  ------------------
 7821|     50|                handler.on_error("Unexpected end of replacement field");
 7822|     50|                return begin;
 7823|     50|            }
 7824|  16.1k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7825|  16.1k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1039|  32.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.46k, False: 13.6k]
  |  |  |  Branch (1039:45): [True: 0, False: 16.1k]
  |  |  |  Branch (1039:45): [True: 2.46k, False: 13.6k]
  |  |  ------------------
  ------------------
 7826|  2.46k|                handler.on_error("Unknown format specifier");
 7827|  2.46k|                return begin;
 7828|  2.46k|            }
 7829|  16.1k|        }
 7830|    586|        else {
 7831|    586|            SCN_UNLIKELY_ATTR
 7832|    586|            handler.on_error("Missing '}' in format string");
 7833|    586|            return begin;
 7834|    586|        }
 7835|  16.9k|    }
 7836|  29.7k|    return begin + 1;
 7837|  33.0k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE3argEm:
 8918|  21.4k|    {
 8919|  21.4k|        return m_args.get(id);
 8920|  21.4k|    }
_ZN3scn2v424basic_scan_parse_contextIwE11next_arg_idEv:
 6396|  19.7k|    {
 6397|  19.7k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  | 1039|  19.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 164, False: 19.5k]
  |  |  ------------------
  ------------------
 6398|    164|            on_error(
 6399|    164|                "Cannot switch from manual to automatic argument indexing");
 6400|    164|            return 0;
 6401|    164|        }
 6402|       |
 6403|  19.5k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6404|  19.5k|        do_check_arg_id(id);
 6405|  19.5k|        return id;
 6406|  19.7k|    }
_ZN3scn2v424basic_scan_parse_contextIwE8on_errorEPKc:
 6426|    242|    {
 6427|    242|        m_error = unexpected(detail::handle_error(
 6428|    242|            scan_error{scan_error::invalid_format_string, msg}));
 6429|    242|        return m_error.error();
 6430|    242|    }
_ZN3scn2v424basic_scan_parse_contextIwE15do_check_arg_idEm:
 6890|  21.2k|{
 6891|  21.2k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6891:9): [Folded - Ignored]
  ------------------
 6892|  21.2k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  256|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  256|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6892:10): [Folded - Ignored]
  |  Branch (6892:22): [Folded - Ignored]
  ------------------
 6893|       |        // The cast below will cause an error on gcc pre-12
 6894|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6895|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6895:13): [True: 0, False: 0]
  ------------------
 6896|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6897|      0|            SCN_UNLIKELY_ATTR
 6898|      0|            on_error("Argument not found");
 6899|      0|        }
 6900|      0|    }
 6901|  21.2k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7275|  17.0k|{
 7276|  17.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  17.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  17.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7277|  17.0k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7277:9): [True: 17.0k, False: 0]
  |  Branch (7277:26): [True: 2.43k, False: 14.6k]
  ------------------
 7278|  2.43k|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1110|  2.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7279|  2.43k|    }
 7280|       |
 7281|  14.6k|    handler();
 7282|  14.6k|    return begin;
 7283|  17.0k|}
impl.cpp:_ZN3scn2v46detail15do_parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7245|  2.43k|{
 7246|  2.43k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  2.43k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.43k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7247|       |
 7248|  2.43k|    CharT c = *begin;
 7249|  2.43k|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (7249:9): [True: 172, False: 2.26k]
  |  Branch (7249:27): [True: 244, False: 2.01k]
  ------------------
 7250|    416|        handler.on_error("Invalid argument ID");
 7251|    416|        return begin;
 7252|    416|    }
 7253|       |
 7254|  2.01k|    int idx = 0;
 7255|  2.01k|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (7255:9): [True: 526, False: 1.49k]
  ------------------
 7256|    526|        idx = parse_simple_int(begin, end);
 7257|    526|    }
 7258|  1.49k|    else {
 7259|  1.49k|        ++begin;
 7260|  1.49k|    }
 7261|       |
 7262|  2.01k|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (7262:9): [True: 112, False: 1.90k]
  |  Branch (7262:26): [True: 1.71k, False: 194]
  |  Branch (7262:50): [True: 170, False: 1.54k]
  ------------------
 7263|    282|        handler.on_error("Invalid argument ID");
 7264|    282|        return begin;
 7265|    282|    }
 7266|  1.73k|    handler(idx);
 7267|       |
 7268|  1.73k|    return begin;
 7269|  2.01k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 7786|    698|        {
 7787|    698|            SCN_UNLIKELY_ATTR
 7788|    698|            handler.on_error(msg);
 7789|    698|        }
_ZN3scn2v46detail16parse_simple_intIwEEiRPKT_S5_:
 7224|  11.2k|{
 7225|  11.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  11.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  11.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7226|  11.2k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  | 1104|  11.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  11.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7227|       |
 7228|  11.2k|    unsigned long long value = 0;
 7229|  16.6k|    do {
 7230|  16.6k|        value *= 10;
 7231|  16.6k|        value += static_cast<unsigned long long>(*begin - '0');
 7232|  16.6k|        if (value >
  ------------------
  |  Branch (7232:13): [True: 102, False: 16.5k]
  ------------------
 7233|  16.6k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 7234|    102|            return -1;
 7235|    102|        }
 7236|  16.5k|        ++begin;
 7237|  16.5k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (7237:14): [True: 16.1k, False: 352]
  |  Branch (7237:30): [True: 14.8k, False: 1.34k]
  |  Branch (7237:47): [True: 5.41k, False: 9.42k]
  ------------------
 7238|  11.1k|    return static_cast<int>(value);
 7239|  11.2k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 7781|  1.73k|        {
 7782|  1.73k|            arg_id = handler.on_arg_id(id);
 7783|  1.73k|        }
_ZN3scn2v424basic_scan_parse_contextIwE12check_arg_idEm:
 6409|  1.73k|    {
 6410|  1.73k|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  | 1039|  1.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 78, False: 1.65k]
  |  |  ------------------
  ------------------
 6411|     78|            on_error(
 6412|     78|                "Cannot switch from manual to automatic argument indexing");
 6413|     78|            return;
 6414|     78|        }
 6415|  1.65k|        m_next_arg_id = -1;
 6416|  1.65k|        do_check_arg_id(id);
 6417|  1.65k|    }
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7777|  14.6k|        {
 7778|  14.6k|            arg_id = handler.on_arg_id();
 7779|  14.6k|        }
_ZN3scn2v424basic_scan_parse_contextIwE10advance_toEPKw:
 6391|  13.2k|    {
 6392|  13.2k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6393|  13.2k|    }
_ZNK3scn2v424basic_scan_parse_contextIwE5beginEv:
 6380|  29.4k|    {
 6381|  29.4k|        return m_format.data();
 6382|  29.4k|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7960|  16.1k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1110|  16.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7961|  16.1k|    {
 7962|  16.1k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1104|  16.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  16.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7963|  16.1k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7690|  16.1k|{
 7691|  16.1k|    auto do_presentation = [&]() -> const CharT* {
 7692|  16.1k|        if (*begin == CharT{'['}) {
 7693|  16.1k|            auto set = parse_presentation_set(begin, end, handler);
 7694|  16.1k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7695|       |                // clang-format off
 7696|  16.1k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|  16.1k|                return begin;
 7699|  16.1k|            }
 7700|  16.1k|            handler.on_character_set_string(set);
 7701|  16.1k|            return begin;
 7702|  16.1k|        }
 7703|  16.1k|        if (*begin == CharT{'/'}) {
 7704|  16.1k|            return parse_presentation_regex(begin, end, handler);
 7705|  16.1k|        }
 7706|  16.1k|        presentation_type type = parse_presentation_type(*begin++);
 7707|  16.1k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7708|  16.1k|            handler.on_error("Invalid type specifier in format string");
 7709|  16.1k|            return begin;
 7710|  16.1k|        }
 7711|  16.1k|        handler.on_type(type);
 7712|  16.1k|        return begin;
 7713|  16.1k|    };
 7714|       |
 7715|  16.1k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7715:9): [True: 14.9k, False: 1.22k]
  |  Branch (7715:28): [True: 2.84k, False: 12.0k]
  ------------------
 7716|  16.1k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7716:9): [True: 572, False: 2.27k]
  |  Branch (7716:36): [True: 520, False: 52]
  ------------------
 7717|    520|        return do_presentation();
 7718|    520|    }
 7719|       |
 7720|  15.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 15.6k]
  |  |  ------------------
  ------------------
 7721|      0|        handler.on_error("Unexpected end of format string");
 7722|      0|        return begin;
 7723|      0|    }
 7724|       |
 7725|  15.6k|    begin = parse_align(begin, end, handler);
 7726|  15.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 120, False: 15.5k]
  |  |  ------------------
  ------------------
 7727|    120|        handler.on_error("Unexpected end of format string");
 7728|    120|        return begin;
 7729|    120|    }
 7730|       |
 7731|  15.5k|    begin = parse_width(begin, end, handler);
 7732|  15.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  15.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 124, False: 15.3k]
  |  |  ------------------
  ------------------
 7733|    124|        handler.on_error("Unexpected end of format string");
 7734|    124|        return begin;
 7735|    124|    }
 7736|       |
 7737|  15.3k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7737:9): [True: 6.17k, False: 9.21k]
  ------------------
 7738|  6.17k|        ++begin;
 7739|  6.17k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  6.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 34, False: 6.14k]
  |  |  ------------------
  ------------------
 7740|     34|            handler.on_error("Unexpected end of format string");
 7741|     34|            return begin;
 7742|     34|        }
 7743|  6.14k|        begin = parse_precision(begin, end, handler);
 7744|  6.14k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  6.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 134, False: 6.00k]
  |  |  ------------------
  ------------------
 7745|    134|            handler.on_error("Unexpected end of format string");
 7746|    134|            return begin;
 7747|    134|        }
 7748|  6.14k|    }
 7749|       |
 7750|  15.2k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7750:9): [True: 724, False: 14.4k]
  ------------------
 7751|    724|        handler.on_localized();
 7752|    724|        ++begin;
 7753|    724|    }
 7754|  15.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  15.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 60, False: 15.1k]
  |  |  ------------------
  ------------------
 7755|     60|        handler.on_error("Unexpected end of format string");
 7756|     60|        return begin;
 7757|     60|    }
 7758|       |
 7759|  15.1k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7759:9): [True: 15.1k, False: 0]
  |  Branch (7759:25): [True: 9.23k, False: 5.92k]
  ------------------
 7760|  9.23k|        do_presentation();
 7761|  9.23k|    }
 7762|  15.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  15.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.57k, False: 13.5k]
  |  |  ------------------
  ------------------
 7763|  1.57k|        handler.on_error("Unexpected end of format string");
 7764|  1.57k|        return begin;
 7765|  1.57k|    }
 7766|       |
 7767|  13.5k|    return begin;
 7768|  15.1k|}
_ZN3scn2v46detail15is_ascii_letterIwEEbT_:
 7339|  2.84k|{
 7340|  2.84k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7340:13): [True: 464, False: 2.37k]
  |  Branch (7340:33): [True: 430, False: 34]
  ------------------
 7341|  2.84k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7341:13): [True: 212, False: 2.20k]
  |  Branch (7341:33): [True: 142, False: 70]
  ------------------
 7342|  2.84k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7691|  9.75k|    auto do_presentation = [&]() -> const CharT* {
 7692|  9.75k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7692:13): [True: 4.61k, False: 5.14k]
  ------------------
 7693|  4.61k|            auto set = parse_presentation_set(begin, end, handler);
 7694|  4.61k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  | 1039|  4.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 590, False: 4.02k]
  |  |  ------------------
  ------------------
 7695|       |                // clang-format off
 7696|    590|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|    590|                return begin;
 7699|    590|            }
 7700|  4.02k|            handler.on_character_set_string(set);
 7701|  4.02k|            return begin;
 7702|  4.61k|        }
 7703|  5.14k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7703:13): [True: 42, False: 5.10k]
  ------------------
 7704|     42|            return parse_presentation_regex(begin, end, handler);
 7705|     42|        }
 7706|  5.10k|        presentation_type type = parse_presentation_type(*begin++);
 7707|  5.10k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  | 1039|  5.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 726, False: 4.37k]
  |  |  ------------------
  ------------------
 7708|    726|            handler.on_error("Invalid type specifier in format string");
 7709|    726|            return begin;
 7710|    726|        }
 7711|  4.37k|        handler.on_type(type);
 7712|  4.37k|        return begin;
 7713|  5.10k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEENSt3__117basic_string_viewIT_NSI_11char_traitsISK_EEEERPKSK_SP_OT0_:
 7529|  4.61k|{
 7530|  4.61k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  4.61k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  4.61k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7531|  4.61k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  | 1104|  4.61k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  4.61k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7532|       |
 7533|  4.61k|    auto start = begin;
 7534|  4.61k|    ++begin;
 7535|       |
 7536|  4.61k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  4.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 34, False: 4.57k]
  |  |  ------------------
  ------------------
 7537|       |        // clang-format off
 7538|     34|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7539|       |        // clang-format on
 7540|     34|        return {};
 7541|     34|    }
 7542|  4.57k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7542:9): [True: 2.35k, False: 2.22k]
  ------------------
 7543|  2.35k|        handler.on_charset_inverted();
 7544|  2.35k|        ++begin;
 7545|  2.35k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  2.35k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 34, False: 2.31k]
  |  |  ------------------
  ------------------
 7546|       |            // clang-format off
 7547|     34|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7548|       |            // clang-format on
 7549|     34|            return {};
 7550|     34|        }
 7551|  2.31k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7551:13): [True: 52, False: 2.26k]
  ------------------
 7552|     52|            handler.on_charset_single(char32_t{']'});
 7553|     52|            ++begin;
 7554|     52|        }
 7555|  2.31k|    }
 7556|  2.22k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7556:14): [True: 34, False: 2.19k]
  ------------------
 7557|     34|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7558|     34|    }
 7559|       |
 7560|  35.8k|    while (begin != end) {
  ------------------
  |  Branch (7560:12): [True: 35.5k, False: 326]
  ------------------
 7561|  35.5k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1039|  35.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 162, False: 35.3k]
  |  |  ------------------
  ------------------
 7562|    162|            break;
 7563|    162|        }
 7564|       |
 7565|  35.3k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7565:13): [True: 4.02k, False: 31.3k]
  ------------------
 7566|  4.02k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7567|  4.02k|        }
 7568|       |
 7569|  31.3k|        parse_presentation_set_literal(begin, end, handler);
 7570|  31.3k|    }
 7571|       |
 7572|    488|    SCN_UNLIKELY_ATTR
 7573|    488|    handler.on_error("Invalid [character set] specifier in format string");
 7574|    488|    return {};
 7575|  4.50k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEvRPKT_SK_OT0_:
 7493|  31.3k|{
 7494|  31.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  31.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  31.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7495|       |
 7496|  31.3k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7497|  31.3k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  | 1039|  31.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 126, False: 31.2k]
  |  |  ------------------
  ------------------
 7498|    126|        return;
 7499|    126|    }
 7500|       |
 7501|  31.2k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7501:9): [True: 31.1k, False: 94]
  |  Branch (7501:25): [True: 2.63k, False: 28.4k]
  |  Branch (7501:49): [True: 2.60k, False: 34]
  ------------------
 7502|  31.2k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7502:9): [True: 2.54k, False: 52]
  ------------------
 7503|  2.54k|        ++begin;
 7504|       |
 7505|  2.54k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7506|  2.54k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  | 1039|  2.54k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 34, False: 2.51k]
  |  |  ------------------
  ------------------
 7507|     34|            return;
 7508|     34|        }
 7509|       |
 7510|  2.51k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  | 1039|  2.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 34, False: 2.48k]
  |  |  ------------------
  ------------------
 7511|       |            // clang-format off
 7512|     34|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7513|       |            // clang-format on
 7514|     34|            return;
 7515|     34|        }
 7516|       |
 7517|  2.48k|        handler.on_charset_range(cp_first, cp_second + 1);
 7518|  2.48k|        return;
 7519|  2.51k|    }
 7520|       |
 7521|  28.6k|    handler.on_charset_single(cp_first);
 7522|  28.6k|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEDiRPKT_SK_OT0_:
 7469|  33.8k|{
 7470|  33.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  33.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  33.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7471|       |
 7472|  33.8k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7473|  33.8k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  | 1039|  67.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 33.8k]
  |  |  |  Branch (1039:45): [True: 0, False: 33.8k]
  |  |  |  Branch (1039:45): [True: 0, False: 33.8k]
  |  |  ------------------
  ------------------
 7474|      0|        handler.on_error("Invalid encoding in format string");
 7475|      0|        return invalid_code_point;
 7476|      0|    }
 7477|       |
 7478|  33.8k|    const auto cp =
 7479|  33.8k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7480|  33.8k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  | 1039|  33.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 160, False: 33.7k]
  |  |  ------------------
  ------------------
 7481|    160|        handler.on_error("Invalid encoding in format string");
 7482|    160|        return invalid_code_point;
 7483|    160|    }
 7484|       |
 7485|  33.7k|    begin += len;
 7486|  33.7k|    return cp;
 7487|  33.8k|}
_ZN3scn2v46detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7183|  4.02k|    {
 7184|  4.02k|        m_specs.charset_string_data = fmt.data();
 7185|  4.02k|        m_specs.charset_string_size = fmt.size();
 7186|  4.02k|        on_type(presentation_type::string_set);
 7187|  4.02k|    }
impl.cpp:_ZN3scn2v46detail24parse_presentation_regexIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_RSK_SK_OT0_:
 7581|     42|{
 7582|     42|#if !SCN_DISABLE_REGEX
 7583|     42|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|     42|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|     42|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7584|     42|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  | 1104|     42|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|     42|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7585|       |
 7586|       |    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 7587|     42|                  std::is_same_v<CharT, wchar_t>) {
 7588|     42|        handler.on_error("Regex backend doesn't support wide strings as input");
 7589|     42|        return begin;
 7590|     42|    }
 7591|       |
 7592|      0|    auto start = begin;
 7593|     42|    ++begin;
 7594|       |
 7595|     42|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 42]
  |  |  ------------------
  ------------------
 7596|      0|        handler.on_error("Unexpected end of regex in format string");
 7597|      0|        return begin;
 7598|      0|    }
 7599|       |
 7600|     42|    handler.on_type(presentation_type::regex);
 7601|     42|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (7601:12): [True: 0, False: 42]
  ------------------
 7602|      0|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7602:13): [True: 0, False: 0]
  ------------------
 7603|      0|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (7603:17): [True: 0, False: 0]
  ------------------
 7604|      0|                break;
 7605|      0|            }
 7606|      0|            else {
 7607|      0|                handler.on_type(presentation_type::regex_escaped);
 7608|      0|            }
 7609|      0|        }
 7610|      0|    }
 7611|     42|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 42]
  |  |  ------------------
  ------------------
 7612|      0|        handler.on_error("Unexpected end of regex in format string");
 7613|      0|        return begin;
 7614|      0|    }
 7615|       |
 7616|     42|    auto regex_end = begin;
 7617|     42|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 7618|     42|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  | 1039|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 42]
  |  |  ------------------
  ------------------
 7619|      0|        handler.on_error("Invalid (empty) regex in format string");
 7620|      0|        return begin;
 7621|      0|    }
 7622|     42|    handler.on_regex_pattern(regex_pattern);
 7623|     42|    ++begin;
 7624|       |
 7625|     42|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 42]
  |  |  ------------------
  ------------------
 7626|      0|        handler.on_error("Unexpected end of regex in format string");
 7627|      0|        return begin;
 7628|      0|    }
 7629|       |
 7630|     42|    regex_flags flags{regex_flags::none};
 7631|     42|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 7632|     42|        {{'m', regex_flags::multiline},
 7633|     42|         {'s', regex_flags::singleline},
 7634|     42|         {'i', regex_flags::nocase},
 7635|     42|         {'n', regex_flags::nocapture}}};
 7636|     42|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (7636:12): [True: 0, False: 42]
  ------------------
 7637|      0|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7637:13): [True: 0, False: 0]
  ------------------
 7638|      0|            break;
 7639|      0|        }
 7640|      0|        bool found_flag = false;
 7641|      0|        for (auto flag : flag_map) {
  ------------------
  |  Branch (7641:24): [True: 0, False: 0]
  ------------------
 7642|      0|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (7642:17): [True: 0, False: 0]
  ------------------
 7643|      0|                continue;
 7644|      0|            }
 7645|      0|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (7645:17): [True: 0, False: 0]
  ------------------
 7646|      0|                handler.on_error("Flag set multiple times in regex");
 7647|      0|                return begin;
 7648|      0|            }
 7649|       |#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 7650|       |            if (*begin == CharT{'s'}) {
 7651|       |                // clang-format off
 7652|       |                handler.on_error("/s flag for regex isn't supported by regex backend");
 7653|       |                // clang-format on
 7654|       |            }
 7655|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 7656|       |            if (*begin == CharT{'m'}) {
 7657|       |                // clang-format off
 7658|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 7659|       |                // clang-format on
 7660|       |            }
 7661|       |#endif
 7662|       |#endif
 7663|      0|            flags |= flag.second;
 7664|      0|            found_flag = true;
 7665|      0|            break;
 7666|      0|        }
 7667|      0|        if (!found_flag) {
  ------------------
  |  Branch (7667:13): [True: 0, False: 0]
  ------------------
 7668|      0|            handler.on_error("Invalid flag in regex");
 7669|      0|            return begin;
 7670|      0|        }
 7671|      0|    }
 7672|     42|    handler.on_regex_flags(flags);
 7673|       |
 7674|     42|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 42]
  |  |  ------------------
  ------------------
 7675|      0|        handler.on_error("Unexpected end of regex in format string");
 7676|      0|        return begin;
 7677|      0|    }
 7678|       |
 7679|     42|    return begin;
 7680|       |#else
 7681|       |    handler.on_error("Regular expression support is disabled");
 7682|       |    return {};
 7683|       |#endif
 7684|     42|}
_ZN3scn2v46detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 7287|  5.10k|{
 7288|  5.10k|    switch (type) {
 7289|    232|        case 'b':
  ------------------
  |  Branch (7289:9): [True: 232, False: 4.86k]
  ------------------
 7290|    284|        case 'B':
  ------------------
  |  Branch (7290:9): [True: 52, False: 5.04k]
  ------------------
 7291|    284|            return presentation_type::int_binary;
 7292|    106|        case 'd':
  ------------------
  |  Branch (7292:9): [True: 106, False: 4.99k]
  ------------------
 7293|    106|            return presentation_type::int_decimal;
 7294|    286|        case 'i':
  ------------------
  |  Branch (7294:9): [True: 286, False: 4.81k]
  ------------------
 7295|    286|            return presentation_type::int_generic;
 7296|    196|        case 'u':
  ------------------
  |  Branch (7296:9): [True: 196, False: 4.90k]
  ------------------
 7297|    196|            return presentation_type::int_unsigned_decimal;
 7298|    232|        case 'o':
  ------------------
  |  Branch (7298:9): [True: 232, False: 4.86k]
  ------------------
 7299|    232|            return presentation_type::int_octal;
 7300|    142|        case 'x':
  ------------------
  |  Branch (7300:9): [True: 142, False: 4.95k]
  ------------------
 7301|    194|        case 'X':
  ------------------
  |  Branch (7301:9): [True: 52, False: 5.04k]
  ------------------
 7302|    194|            return presentation_type::int_hex;
 7303|     34|        case 'r':
  ------------------
  |  Branch (7303:9): [True: 34, False: 5.06k]
  ------------------
 7304|     68|        case 'R':
  ------------------
  |  Branch (7304:9): [True: 34, False: 5.06k]
  ------------------
 7305|     68|            return presentation_type::int_arbitrary_base;
 7306|    222|        case 'a':
  ------------------
  |  Branch (7306:9): [True: 222, False: 4.87k]
  ------------------
 7307|    922|        case 'A':
  ------------------
  |  Branch (7307:9): [True: 700, False: 4.40k]
  ------------------
 7308|    922|            return presentation_type::float_hex;
 7309|     70|        case 'e':
  ------------------
  |  Branch (7309:9): [True: 70, False: 5.03k]
  ------------------
 7310|    194|        case 'E':
  ------------------
  |  Branch (7310:9): [True: 124, False: 4.97k]
  ------------------
 7311|    194|            return presentation_type::float_scientific;
 7312|    142|        case 'f':
  ------------------
  |  Branch (7312:9): [True: 142, False: 4.95k]
  ------------------
 7313|    266|        case 'F':
  ------------------
  |  Branch (7313:9): [True: 124, False: 4.97k]
  ------------------
 7314|    266|            return presentation_type::float_fixed;
 7315|     34|        case 'g':
  ------------------
  |  Branch (7315:9): [True: 34, False: 5.06k]
  ------------------
 7316|    122|        case 'G':
  ------------------
  |  Branch (7316:9): [True: 88, False: 5.01k]
  ------------------
 7317|    122|            return presentation_type::float_general;
 7318|  1.04k|        case 's':
  ------------------
  |  Branch (7318:9): [True: 1.04k, False: 4.05k]
  ------------------
 7319|  1.04k|            return presentation_type::string;
 7320|    304|        case 'c':
  ------------------
  |  Branch (7320:9): [True: 304, False: 4.79k]
  ------------------
 7321|    304|            return presentation_type::character;
 7322|     34|        case '?':
  ------------------
  |  Branch (7322:9): [True: 34, False: 5.06k]
  ------------------
 7323|     34|            return presentation_type::escaped_character;
 7324|    124|        case 'p':
  ------------------
  |  Branch (7324:9): [True: 124, False: 4.97k]
  ------------------
 7325|    124|            return presentation_type::pointer;
 7326|      0|        case '[':
  ------------------
  |  Branch (7326:9): [True: 0, False: 5.10k]
  ------------------
 7327|      0|        case '/':
  ------------------
  |  Branch (7327:9): [True: 0, False: 5.10k]
  ------------------
 7328|       |            // Should be handled by parse_presentation_set and
 7329|       |            // parse_presentation_regex
 7330|      0|            SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7331|      0|            SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7332|    726|        default:
  ------------------
  |  Branch (7332:9): [True: 726, False: 4.37k]
  ------------------
 7333|    726|            return presentation_type::none;
 7334|  5.10k|    }
 7335|  5.10k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7364|  15.6k|{
 7365|  15.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  15.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  15.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7366|       |
 7367|  15.6k|    auto check_align = [](wchar_t ch) {
 7368|  15.6k|        switch (ch) {
 7369|  15.6k|            case L'<':
 7370|  15.6k|                return align_type::left;
 7371|  15.6k|            case L'>':
 7372|  15.6k|                return align_type::right;
 7373|  15.6k|            case L'^':
 7374|  15.6k|                return align_type::center;
 7375|  15.6k|            default:
 7376|  15.6k|                return align_type::none;
 7377|  15.6k|        }
 7378|  15.6k|    };
 7379|       |
 7380|  15.6k|    auto potential_fill_len = code_point_length(begin, end);
 7381|  15.6k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  | 1039|  31.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 15.6k]
  |  |  |  Branch (1039:45): [True: 0, False: 15.6k]
  |  |  |  Branch (1039:45): [True: 0, False: 15.6k]
  |  |  ------------------
  ------------------
 7382|  15.6k|                     std::distance(begin, end) < potential_fill_len)) {
 7383|      0|        handler.on_error("Invalid encoding in fill character");
 7384|      0|        return begin;
 7385|      0|    }
 7386|       |
 7387|  15.6k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7388|       |
 7389|  15.6k|    auto potential_fill = std::basic_string_view<CharT>{
 7390|  15.6k|        begin, static_cast<size_t>(potential_fill_len)};
 7391|  15.6k|    const auto begin_before_fill = begin;
 7392|  15.6k|    begin += potential_fill_len;
 7393|       |
 7394|  15.6k|    if (begin == end) {
  ------------------
  |  Branch (7394:9): [True: 1.22k, False: 14.4k]
  ------------------
 7395|  1.22k|        return begin_before_fill;
 7396|  1.22k|    }
 7397|       |
 7398|  14.4k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7399|  14.4k|    const auto begin_after_fill = begin;
 7400|  14.4k|    ++begin;
 7401|       |
 7402|  14.4k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7402:9): [True: 14.4k, False: 0]
  ------------------
 7403|  14.4k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  | 1039|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 42, False: 14.3k]
  |  |  ------------------
  ------------------
 7404|     42|            handler.on_error("Invalid fill character '{' in format string");
 7405|     42|            return begin;
 7406|     42|        }
 7407|  14.3k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7407:13): [True: 1.75k, False: 12.6k]
  ------------------
 7408|  1.75k|            return begin_before_fill;
 7409|  1.75k|        }
 7410|  14.3k|    }
 7411|       |
 7412|  12.6k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7412:9): [True: 10.1k, False: 2.49k]
  ------------------
 7413|  10.1k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7413:13): [True: 1.13k, False: 8.98k]
  ------------------
 7414|  1.13k|            handler.on_align(potential_align_on_fill);
 7415|  1.13k|            return begin_after_fill;
 7416|  1.13k|        }
 7417|  8.98k|        return begin_before_fill;
 7418|  10.1k|    }
 7419|       |
 7420|  2.49k|    handler.on_fill(potential_fill);
 7421|  2.49k|    handler.on_align(potential_align_after_fill);
 7422|  2.49k|    return begin;
 7423|  12.6k|}
_ZN3scn2v46detail17code_point_lengthIwEEiPKT_S5_:
 7346|  15.6k|{
 7347|  15.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  15.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  15.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7348|  15.6k|    if constexpr (sizeof(CharT) != 1) {
 7349|  15.6k|        return 1;
 7350|       |    }
 7351|       |    else {
 7352|       |        const auto lengths =
 7353|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7354|       |            "\3\4";
 7355|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7356|       |        return len;
 7357|       |    }
 7358|  15.6k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7367|  30.0k|    auto check_align = [](wchar_t ch) {
 7368|  30.0k|        switch (ch) {
 7369|    716|            case L'<':
  ------------------
  |  Branch (7369:13): [True: 716, False: 29.3k]
  ------------------
 7370|    716|                return align_type::left;
 7371|    482|            case L'>':
  ------------------
  |  Branch (7371:13): [True: 482, False: 29.5k]
  ------------------
 7372|    482|                return align_type::right;
 7373|  3.01k|            case L'^':
  ------------------
  |  Branch (7373:13): [True: 3.01k, False: 27.0k]
  ------------------
 7374|  3.01k|                return align_type::center;
 7375|  25.8k|            default:
  ------------------
  |  Branch (7375:13): [True: 25.8k, False: 4.21k]
  ------------------
 7376|  25.8k|                return align_type::none;
 7377|  30.0k|        }
 7378|  30.0k|    };
_ZN3scn2v46detail12specs_setter7on_fillIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7104|  2.49k|    {
 7105|  2.49k|        m_specs.fill = fill;
 7106|  2.49k|    }
_ZN3scn2v46detail9fill_typeaSIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6985|  2.49k|    {
 6986|  2.49k|        SCN_EXPECT(!s.empty());
  ------------------
  |  | 1104|  2.49k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.49k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6987|  2.49k|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  | 1104|  2.49k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.49k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6988|       |        if constexpr (sizeof(CharT) == 1) {
 6989|       |            for (size_t i = 0; i < s.size(); ++i) {
 6990|       |                SCN_GCC_PUSH
 6991|       |                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6992|       |                m_data[i] = s[i];
 6993|       |                SCN_GCC_POP
 6994|       |            }
 6995|       |            m_size = static_cast<unsigned char>(s.size());
 6996|       |        }
 6997|       |        else if constexpr (sizeof(CharT) == 2) {
 6998|       |            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6999|       |            m_data[1] =
 7000|       |                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 7001|       |            if (s.size() == 1) {
 7002|       |                return;
 7003|       |            }
 7004|       |            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 7005|       |            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 7006|       |        }
 7007|  2.49k|        else {
 7008|  2.49k|            const auto front = static_cast<unsigned>(s.front());
 7009|  2.49k|            m_data[0] = static_cast<char>(front);
 7010|  2.49k|            m_data[1] = static_cast<char>(front >> 8);
 7011|  2.49k|            m_data[2] = static_cast<char>(front >> 16);
 7012|  2.49k|            m_data[3] = static_cast<char>(front >> 24);
 7013|  2.49k|        }
 7014|  2.49k|    }
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7429|  15.5k|{
 7430|  15.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  15.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7431|       |
 7432|  15.5k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7432:9): [True: 10.2k, False: 5.23k]
  |  Branch (7432:33): [True: 4.66k, False: 5.61k]
  ------------------
 7433|  4.66k|        int width = parse_simple_int(begin, end);
 7434|  4.66k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  | 1038|  4.66k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 4.62k, False: 34]
  |  |  ------------------
  ------------------
 7435|  4.62k|            handler.on_width(width);
 7436|  4.62k|        }
 7437|     34|        else {
 7438|     34|            handler.on_error("Invalid field width");
 7439|     34|            return begin;
 7440|     34|        }
 7441|  4.66k|    }
 7442|  15.4k|    return begin;
 7443|  15.5k|}
impl.cpp:_ZN3scn2v46detail15parse_precisionIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7449|  6.14k|{
 7450|  6.14k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  6.14k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  6.14k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7451|       |
 7452|  6.14k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7452:9): [True: 6.10k, False: 34]
  |  Branch (7452:33): [True: 6.03k, False: 70]
  ------------------
 7453|  6.03k|        int prec = parse_simple_int(begin, end);
 7454|  6.03k|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  | 1038|  6.03k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 6.00k, False: 34]
  |  |  ------------------
  ------------------
 7455|  6.00k|            handler.on_precision(prec);
 7456|  6.00k|        }
 7457|     34|        else {
 7458|     34|            handler.on_error("Invalid field precision");
 7459|     34|            return begin;
 7460|     34|        }
 7461|  6.03k|    }
 7462|  6.10k|    return begin;
 7463|  6.14k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEE12on_localizedEv:
 7966|    724|    {
 7967|    724|        const auto cat = get_category_for_arg_type(m_arg_type);
 7968|    724|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7968:13): [True: 654, False: 70]
  ------------------
 7969|    724|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7969:13): [True: 584, False: 70]
  ------------------
 7970|    724|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7970:13): [True: 514, False: 70]
  ------------------
 7971|    724|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7971:13): [True: 444, False: 70]
  ------------------
 7972|    444|            SCN_UNLIKELY_ATTR
 7973|       |            // clang-format off
 7974|    444|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7975|       |            // clang-format on
 7976|    444|        }
 7977|       |
 7978|    280|        Handler::on_localized();
 7979|    280|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9493|  13.0k|{
 9494|  13.0k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|  13.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|  13.0k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|  13.0k|{
 9353|  13.0k|#define SCN_VISIT(Type)                                                \
 9354|  13.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|  13.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|  13.0k|    }                                                                  \
 9357|  13.0k|    else {                                                             \
 9358|  13.0k|        return vis(monostate_val);                                     \
 9359|  13.0k|    }
 9360|       |
 9361|  13.0k|    monostate monostate_val{};
 9362|       |
 9363|  13.0k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 13.0k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 13.0k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|  1.49k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 1.49k, False: 11.6k]
  ------------------
 9369|  1.49k|            SCN_VISIT(int);
  ------------------
  |  | 9354|  1.49k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  1.49k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  1.49k|    }                                                                  \
  |  | 9357|  1.49k|    else {                                                             \
  |  | 9358|  1.49k|        return vis(monostate_val);                                     \
  |  | 9359|  1.49k|    }
  ------------------
 9370|  1.49k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 13.0k]
  ------------------
 9371|  1.49k|            SCN_VISIT(long);
  ------------------
  |  | 9354|  1.49k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  1.49k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  1.49k|    }                                                                  \
  |  | 9357|  1.49k|    else {                                                             \
  |  | 9358|  1.49k|        return vis(monostate_val);                                     \
  |  | 9359|  1.49k|    }
  ------------------
 9372|  1.49k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 13.0k]
  ------------------
 9373|  1.49k|            SCN_VISIT(long long);
  ------------------
  |  | 9354|  1.49k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  1.49k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  1.49k|    }                                                                  \
  |  | 9357|  1.49k|    else {                                                             \
  |  | 9358|  1.49k|        return vis(monostate_val);                                     \
  |  | 9359|  1.49k|    }
  ------------------
 9374|  1.49k|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 13.0k]
  ------------------
 9375|  1.49k|#if SCN_HAS_INT128
 9376|  1.49k|            SCN_VISIT(int128)
  ------------------
  |  | 9354|  1.49k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  1.49k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  1.49k|    }                                                                  \
  |  | 9357|  1.49k|    else {                                                             \
  |  | 9358|  1.49k|        return vis(monostate_val);                                     \
  |  | 9359|  1.49k|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|  1.49k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 13.0k]
  ------------------
 9381|  1.49k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|  1.49k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  1.49k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  1.49k|    }                                                                  \
  |  | 9357|  1.49k|    else {                                                             \
  |  | 9358|  1.49k|        return vis(monostate_val);                                     \
  |  | 9359|  1.49k|    }
  ------------------
 9382|  1.49k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 13.0k]
  ------------------
 9383|  1.49k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|  1.49k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  1.49k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  1.49k|    }                                                                  \
  |  | 9357|  1.49k|    else {                                                             \
  |  | 9358|  1.49k|        return vis(monostate_val);                                     \
  |  | 9359|  1.49k|    }
  ------------------
 9384|  2.98k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 1.49k, False: 11.6k]
  ------------------
 9385|  2.98k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|  2.98k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  2.98k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  2.98k|    }                                                                  \
  |  | 9357|  2.98k|    else {                                                             \
  |  | 9358|  2.98k|        return vis(monostate_val);                                     \
  |  | 9359|  2.98k|    }
  ------------------
 9386|  2.98k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 13.0k]
  ------------------
 9387|  2.98k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|  2.98k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  2.98k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  2.98k|    }                                                                  \
  |  | 9357|  2.98k|    else {                                                             \
  |  | 9358|  2.98k|        return vis(monostate_val);                                     \
  |  | 9359|  2.98k|    }
  ------------------
 9388|  2.98k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 13.0k]
  ------------------
 9389|  2.98k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|  2.98k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  2.98k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  2.98k|    }                                                                  \
  |  | 9357|  2.98k|    else {                                                             \
  |  | 9358|  2.98k|        return vis(monostate_val);                                     \
  |  | 9359|  2.98k|    }
  ------------------
 9390|  2.98k|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 13.0k]
  ------------------
 9391|  2.98k|#if SCN_HAS_INT128
 9392|  2.98k|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|  2.98k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  2.98k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  2.98k|    }                                                                  \
  |  | 9357|  2.98k|    else {                                                             \
  |  | 9358|  2.98k|        return vis(monostate_val);                                     \
  |  | 9359|  2.98k|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|  4.41k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 1.42k, False: 11.6k]
  ------------------
 9397|  4.41k|            SCN_VISIT(void*);
  ------------------
  |  | 9354|  4.41k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  4.41k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  4.41k|    }                                                                  \
  |  | 9357|  4.41k|    else {                                                             \
  |  | 9358|  4.41k|        return vis(monostate_val);                                     \
  |  | 9359|  4.41k|    }
  ------------------
 9398|  5.90k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 1.49k, False: 11.6k]
  ------------------
 9399|  5.90k|            SCN_VISIT(bool);
  ------------------
  |  | 9354|  5.90k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  5.90k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  5.90k|    }                                                                  \
  |  | 9357|  5.90k|    else {                                                             \
  |  | 9358|  5.90k|        return vis(monostate_val);                                     \
  |  | 9359|  5.90k|    }
  ------------------
 9400|  5.90k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 13.0k]
  ------------------
 9401|  5.90k|            SCN_VISIT(char);
  ------------------
  |  | 9354|  5.90k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  5.90k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  5.90k|    }                                                                  \
  |  | 9357|  5.90k|    else {                                                             \
  |  | 9358|  5.90k|        return vis(monostate_val);                                     \
  |  | 9359|  5.90k|    }
  ------------------
 9402|  7.32k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 1.42k, False: 11.6k]
  ------------------
 9403|  7.32k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|  7.32k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  7.32k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  7.32k|    }                                                                  \
  |  | 9357|  7.32k|    else {                                                             \
  |  | 9358|  7.32k|        return vis(monostate_val);                                     \
  |  | 9359|  7.32k|    }
  ------------------
 9404|  7.32k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 13.0k]
  ------------------
 9405|  7.32k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|  7.32k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  7.32k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  7.32k|    }                                                                  \
  |  | 9357|  7.32k|    else {                                                             \
  |  | 9358|  7.32k|        return vis(monostate_val);                                     \
  |  | 9359|  7.32k|    }
  ------------------
 9406|  7.32k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 0, False: 13.0k]
  ------------------
 9407|  7.32k|            SCN_VISIT(float);
  ------------------
  |  | 9354|  7.32k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  7.32k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  7.32k|    }                                                                  \
  |  | 9357|  7.32k|    else {                                                             \
  |  | 9358|  7.32k|        return vis(monostate_val);                                     \
  |  | 9359|  7.32k|    }
  ------------------
 9408|  8.82k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 1.49k, False: 11.6k]
  ------------------
 9409|  8.82k|            SCN_VISIT(double);
  ------------------
  |  | 9354|  8.82k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  8.82k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  8.82k|    }                                                                  \
  |  | 9357|  8.82k|    else {                                                             \
  |  | 9358|  8.82k|        return vis(monostate_val);                                     \
  |  | 9359|  8.82k|    }
  ------------------
 9410|  8.82k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 0, False: 13.0k]
  ------------------
 9411|  8.82k|            SCN_VISIT(long double);
  ------------------
  |  | 9354|  8.82k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  8.82k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  8.82k|    }                                                                  \
  |  | 9357|  8.82k|    else {                                                             \
  |  | 9358|  8.82k|        return vis(monostate_val);                                     \
  |  | 9359|  8.82k|    }
  ------------------
 9412|  8.82k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 13.0k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|  8.82k|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 13.0k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 13.0k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 13.0k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 13.0k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|  1.42k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 1.42k, False: 11.6k]
  ------------------
 9443|  1.42k|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|  1.42k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  1.42k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  1.42k|    }                                                                  \
  |  | 9357|  1.42k|    else {                                                             \
  |  | 9358|  1.42k|        return vis(monostate_val);                                     \
  |  | 9359|  1.42k|    }
  ------------------
 9444|  2.85k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 1.42k, False: 11.6k]
  ------------------
 9445|  2.85k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|  2.85k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  2.85k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  2.85k|    }                                                                  \
  |  | 9357|  2.85k|    else {                                                             \
  |  | 9358|  2.85k|        return vis(monostate_val);                                     \
  |  | 9359|  2.85k|    }
  ------------------
 9446|  4.27k|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 1.42k, False: 11.6k]
  ------------------
 9447|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|       |                SCN_VISIT(std::string_view);
 9449|       |            }
 9450|  4.27k|            else {
 9451|  4.27k|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9354|  4.27k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  4.27k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  4.27k|    }                                                                  \
  |  | 9357|  4.27k|    else {                                                             \
  |  | 9358|  4.27k|        return vis(monostate_val);                                     \
  |  | 9359|  4.27k|    }
  ------------------
 9452|  4.27k|            }
 9453|  4.27k|        }
 9454|       |
 9455|  4.27k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 13.0k]
  ------------------
 9456|  4.27k|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|  4.27k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|  4.27k|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 13.0k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 13.0k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|  13.0k|            SCN_CLANG_POP
 9473|  13.0k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE5beginEv:
 3493|  8.20k|    {
 3494|  8.20k|        return m_iterator;
 3495|  8.20k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISH_vEEOT_:
 1583|  1.55k|        : base(std::in_place, std::forward<U>(val)),
 1584|  1.55k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  1.55k|    {
 1586|  1.55k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  455|  1.55k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  1.55k|    {
  457|  1.55k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  1.66k|    {
 1330|  1.66k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE3endEv:
 3497|  3.84k|    {
 3498|  3.84k|        return m_sentinel;
 3499|  3.84k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISI_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSM_IXsr3stdE16is_convertible_vISO_SI_EEvE4typeELSS_0EEEONS0_10unexpectedISN_EE:
 1629|    116|        : base(unexpect, std::move(e.error())),
 1630|    116|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|    116|    {
 1632|    116|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  464|    116|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|    116|          m_has_value(false)
  466|    116|    {
  467|    116|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEEC2ISG_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SG_EEvE4typeELPv0EEESO_SJ_:
 3478|  3.84k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  3.84k|    static_cast<    \
  |  | 1109|  3.84k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  3.84k|    static_cast<    \
  |  | 1109|  3.84k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|  3.84k|    {
 3480|  3.84k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9has_valueEv:
  504|  3.33k|    {
  505|  3.33k|        return m_has_value;
  506|  3.33k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1782|  1.55k|    {
 1783|  1.55k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  1.55k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.55k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  1.55k|        return this->get_value();
 1785|  1.55k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9get_valueEv:
  470|  1.55k|    {
  471|  1.55k|        return m_value;
  472|  1.55k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESI_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSO_:
 1992|  1.66k|    {
 1993|  1.66k|        return detail::transform_error_impl(std::move(*this),
 1994|  1.66k|                                            std::forward<F>(f));
 1995|  1.66k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS6_IPKwS8_EENS4_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEE8sentinelILb1EEEEENS4_9eof_errorEEERFNS0_10scan_errorESK_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESM_EEDaOSR_OT0_:
 1475|  1.66k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  1.66k|    else {
 1486|  1.66k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  1.66k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  1.66k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 1.55k, False: 116]
  |  |  ------------------
  ------------------
 1488|  1.66k|                   ? result(*std::forward<Exp>(exp))
 1489|  1.66k|                   : result(unexpect,
 1490|    116|                            trivial_invoke(std::forward<F>(f),
 1491|    116|                                           std::forward<Exp>(exp).error()));
 1492|  1.66k|    }
 1493|  1.66k|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1818|  1.55k|    {
 1819|  1.55k|        return std::move(value());
 1820|  1.55k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1583|  1.55k|        : base(std::in_place, std::forward<U>(val)),
 1584|  1.55k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  1.55k|    {
 1586|  1.55k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  455|  1.55k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  1.55k|    {
  457|  1.55k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  1.66k|    {
 1330|  1.66k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5errorEv:
 1769|    116|    {
 1770|    116|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|    116|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    116|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|    116|        return std::move(this->get_unexpected().error());
 1772|    116|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE14get_unexpectedEv:
  487|    116|    {
  488|    116|        return m_unexpected;
  489|    116|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
 1639|    116|        : base(unexpect, std::forward<Args>(args)...),
 1640|    116|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|    116|    {
 1642|    116|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  464|    116|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|    116|          m_has_value(false)
  466|    116|    {
  467|    116|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEcvbEv:
 1753|  1.66k|    {
 1754|  1.66k|        return has_value();
 1755|  1.66k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  3.33k|    {
  505|  3.33k|        return m_has_value;
  506|  3.33k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5errorEv:
 1759|    116|    {
 1760|    116|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|    116|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    116|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|    116|        return this->get_unexpected().error();
 1762|    116|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|    116|    {
  488|    116|        return m_unexpected;
  489|    116|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1818|  1.55k|    {
 1819|  1.55k|        return std::move(value());
 1820|  1.55k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1782|  1.55k|    {
 1783|  1.55k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  1.55k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.55k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  1.55k|        return this->get_value();
 1785|  1.55k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  1.55k|    {
  471|  1.55k|        return m_value;
  472|  1.55k|    }

_ZN3scn2v44scanIJwERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  6.92k|{
   89|  6.92k|    auto result = make_scan_result<Source, Args...>();
   90|  6.92k|    fill_scan_result(result,
   91|  6.92k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  6.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  6.92k|                           make_scan_args<wscan_context>(result->values())));
   93|  6.92k|    return result;
   94|  6.92k|}
_ZN3scn2v45vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextINSF_16buffer_range_tagEwEEEE:
   43|  62.2k|{
   44|  62.2k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  | 1110|  62.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  62.2k|}
_ZN3scn2v44scanIJwENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  6.92k|{
  131|  6.92k|    auto result = make_scan_result<Source, Args...>();
  132|  6.92k|    fill_scan_result(result,
  133|  6.92k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  6.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  6.92k|                           make_scan_args<wscan_context>(result->values())));
  135|  6.92k|    return result;
  136|  6.92k|}
_ZN3scn2v45vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS2_6localeETnPvLPv0EEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextINSI_16buffer_range_tagEwEEEE:
   59|  62.2k|{
   60|  62.2k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  | 1110|  62.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  62.2k|}
_ZN3scn2v44scanIJiERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  6.92k|{
   89|  6.92k|    auto result = make_scan_result<Source, Args...>();
   90|  6.92k|    fill_scan_result(result,
   91|  6.92k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  6.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  6.92k|                           make_scan_args<wscan_context>(result->values())));
   93|  6.92k|    return result;
   94|  6.92k|}
_ZN3scn2v44scanIJiENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  6.92k|{
  131|  6.92k|    auto result = make_scan_result<Source, Args...>();
  132|  6.92k|    fill_scan_result(result,
  133|  6.92k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  6.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  6.92k|                           make_scan_args<wscan_context>(result->values())));
  135|  6.92k|    return result;
  136|  6.92k|}
_ZN3scn2v44scanIJjERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  6.92k|{
   89|  6.92k|    auto result = make_scan_result<Source, Args...>();
   90|  6.92k|    fill_scan_result(result,
   91|  6.92k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  6.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  6.92k|                           make_scan_args<wscan_context>(result->values())));
   93|  6.92k|    return result;
   94|  6.92k|}
_ZN3scn2v44scanIJjENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  6.92k|{
  131|  6.92k|    auto result = make_scan_result<Source, Args...>();
  132|  6.92k|    fill_scan_result(result,
  133|  6.92k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  6.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  6.92k|                           make_scan_args<wscan_context>(result->values())));
  135|  6.92k|    return result;
  136|  6.92k|}
_ZN3scn2v44scanIJdERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  6.92k|{
   89|  6.92k|    auto result = make_scan_result<Source, Args...>();
   90|  6.92k|    fill_scan_result(result,
   91|  6.92k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  6.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  6.92k|                           make_scan_args<wscan_context>(result->values())));
   93|  6.92k|    return result;
   94|  6.92k|}
_ZN3scn2v44scanIJdENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  6.92k|{
  131|  6.92k|    auto result = make_scan_result<Source, Args...>();
  132|  6.92k|    fill_scan_result(result,
  133|  6.92k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  6.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  6.92k|                           make_scan_args<wscan_context>(result->values())));
  135|  6.92k|    return result;
  136|  6.92k|}
_ZN3scn2v44scanIJbERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  6.92k|{
   89|  6.92k|    auto result = make_scan_result<Source, Args...>();
   90|  6.92k|    fill_scan_result(result,
   91|  6.92k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  6.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  6.92k|                           make_scan_args<wscan_context>(result->values())));
   93|  6.92k|    return result;
   94|  6.92k|}
_ZN3scn2v44scanIJbENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  6.92k|{
  131|  6.92k|    auto result = make_scan_result<Source, Args...>();
  132|  6.92k|    fill_scan_result(result,
  133|  6.92k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  6.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  6.92k|                           make_scan_args<wscan_context>(result->values())));
  135|  6.92k|    return result;
  136|  6.92k|}
_ZN3scn2v44scanIJPvERNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEEOSA_NS0_24basic_scan_format_stringIwNSL_13type_identityISA_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  6.92k|{
   89|  6.92k|    auto result = make_scan_result<Source, Args...>();
   90|  6.92k|    fill_scan_result(result,
   91|  6.92k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  6.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  6.92k|                           make_scan_args<wscan_context>(result->values())));
   93|  6.92k|    return result;
   94|  6.92k|}
_ZN3scn2v44scanIJPvENSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELS2_0ETnPvLS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEERKT0_OSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  6.92k|{
  131|  6.92k|    auto result = make_scan_result<Source, Args...>();
  132|  6.92k|    fill_scan_result(result,
  133|  6.92k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  6.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  6.92k|                           make_scan_args<wscan_context>(result->values())));
  135|  6.92k|    return result;
  136|  6.92k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIwNS4_IwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISE_EEP8_IO_FILEEESP_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSQ_13type_identityISE_E4typeEJDpNS12_ISW_E4typeEEEE:
   88|  6.92k|{
   89|  6.92k|    auto result = make_scan_result<Source, Args...>();
   90|  6.92k|    fill_scan_result(result,
   91|  6.92k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  6.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  6.92k|                           make_scan_args<wscan_context>(result->values())));
   93|  6.92k|    return result;
   94|  6.92k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIwNS4_IwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSJ_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISF_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSS_13type_identityISF_E4typeEJDpNS17_ISY_E4typeEEEE:
  130|  6.92k|{
  131|  6.92k|    auto result = make_scan_result<Source, Args...>();
  132|  6.92k|    fill_scan_result(result,
  133|  6.92k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  6.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  6.92k|                           make_scan_args<wscan_context>(result->values())));
  135|  6.92k|    return result;
  136|  6.92k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIwS5_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISD_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIwNSP_13type_identityISD_E4typeEJDpNS11_ISV_E4typeEEEE:
   88|  6.92k|{
   89|  6.92k|    auto result = make_scan_result<Source, Args...>();
   90|  6.92k|    fill_scan_result(result,
   91|  6.92k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  6.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  6.92k|                           make_scan_args<wscan_context>(result->values())));
   93|  6.92k|    return result;
   94|  6.92k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIwS5_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSI_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISE_EEP8_IO_FILEEESQ_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIwNSR_13type_identityISE_E4typeEJDpNS16_ISX_E4typeEEEE:
  130|  6.92k|{
  131|  6.92k|    auto result = make_scan_result<Source, Args...>();
  132|  6.92k|    fill_scan_result(result,
  133|  6.92k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  6.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  6.92k|                           make_scan_args<wscan_context>(result->values())));
  135|  6.92k|    return result;
  136|  6.92k|}
_ZN3scn2v44scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEERS6_TnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  6.92k|{
   89|  6.92k|    auto result = make_scan_result<Source, Args...>();
   90|  6.92k|    fill_scan_result(result,
   91|  6.92k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  6.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  6.92k|                           make_scan_args<wscan_context>(result->values())));
   93|  6.92k|    return result;
   94|  6.92k|}
_ZN3scn2v44scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeERS6_TnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  6.92k|{
  131|  6.92k|    auto result = make_scan_result<Source, Args...>();
  132|  6.92k|    fill_scan_result(result,
  133|  6.92k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  6.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  6.92k|                           make_scan_args<wscan_context>(result->values())));
  135|  6.92k|    return result;
  136|  6.92k|}

_ZN3scn2v46detail10locale_refC2INSt3__16localeEEERKT_:
  307|  93.4k|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  308|  93.4k|{
  309|  93.4k|    static_assert(std::is_same_v<Locale, std::locale>);
  310|  93.4k|}
_ZNK3scn2v46detail10locale_ref3getINSt3__16localeEEET_v:
  314|    262|{
  315|    262|    static_assert(std::is_same_v<Locale, std::locale>);
  316|    262|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (316:12): [True: 131, False: 131]
  ------------------
  317|    262|                    : std::locale{};
  318|    262|}
_ZN3scn2v44impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1828|    908|{
 1829|    908|    auto n = parse_float_value<CharT>({this->m_buffer, m_kind, m_options},
 1830|    908|                                      m_nan_payload_buffer, value);
 1831|    908|    if (SCN_LIKELY(n)) {
  ------------------
  |  | 1038|    908|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 908]
  |  |  ------------------
  ------------------
 1832|      0|        value = this->setsign(value);
 1833|      0|        return n;
 1834|      0|    }
 1835|       |
 1836|    908|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1836:9): [True: 0, False: 908]
  ------------------
 1837|    908|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1837:9): [True: 0, False: 0]
  ------------------
 1838|      0|        return detail::unexpected_scan_error(
 1839|      0|            scan_error::value_negative_overflow, n.error().msg());
 1840|      0|    }
 1841|    908|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1841:9): [True: 0, False: 908]
  ------------------
 1842|    908|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1842:9): [True: 0, False: 0]
  ------------------
 1843|      0|        return detail::unexpected_scan_error(
 1844|      0|            scan_error::value_negative_underflow, n.error().msg());
 1845|      0|    }
 1846|    908|    return n;
 1847|    908|}
_ZN3scn2v44impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1828|  1.07k|{
 1829|  1.07k|    auto n = parse_float_value<CharT>({this->m_buffer, m_kind, m_options},
 1830|  1.07k|                                      m_nan_payload_buffer, value);
 1831|  1.07k|    if (SCN_LIKELY(n)) {
  ------------------
  |  | 1038|  1.07k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 106, False: 970]
  |  |  ------------------
  ------------------
 1832|    106|        value = this->setsign(value);
 1833|    106|        return n;
 1834|    106|    }
 1835|       |
 1836|    970|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1836:9): [True: 0, False: 970]
  ------------------
 1837|    970|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1837:9): [True: 0, False: 0]
  ------------------
 1838|      0|        return detail::unexpected_scan_error(
 1839|      0|            scan_error::value_negative_overflow, n.error().msg());
 1840|      0|    }
 1841|    970|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1841:9): [True: 0, False: 970]
  ------------------
 1842|    970|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1842:9): [True: 0, False: 0]
  ------------------
 1843|      0|        return detail::unexpected_scan_error(
 1844|      0|            scan_error::value_negative_underflow, n.error().msg());
 1845|      0|    }
 1846|    970|    return n;
 1847|    970|}
_ZN3scn2v44impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 2184|     22|{
 2185|     22|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1104|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2186|     22|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1104|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2187|     22|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1104|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2188|     22|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1104|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2189|       |
 2190|     22|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (2190:9): [True: 22, False: 0]
  ------------------
 2191|     22|        SCN_UNLIKELY_ATTR
 2192|     22|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 2193|     22|                                             "Invalid integer value");
 2194|     22|    }
 2195|       |
 2196|       |    // Skip leading zeroes
 2197|      0|    auto start = source.data();
 2198|      0|    const auto end = source.data() + source.size();
 2199|      0|    {
 2200|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (2200:16): [True: 0, False: 0]
  ------------------
 2201|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (2201:17): [True: 0, False: 0]
  ------------------
 2202|      0|                break;
 2203|      0|            }
 2204|      0|        }
 2205|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2206|      0|            value = 0;
 2207|      0|            return ranges::next(source.begin(),
 2208|      0|                                ranges::distance(source.data(), start));
 2209|      0|        }
 2210|      0|    }
 2211|       |
 2212|       |    if constexpr (std::is_same_v<CharT, char> &&
 2213|      0|                  sizeof(T) <= sizeof(std::uint64_t)) {
 2214|      0|        if (base == 10) {
  ------------------
  |  Branch (2214:13): [True: 0, False: 0]
  ------------------
 2215|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2216|      0|                             detail::make_string_view_from_pointers(start, end),
 2217|      0|                             value, sign == sign_type::minus_sign));
 2218|      0|            return ranges::next(source.begin(),
 2219|      0|                                ranges::distance(source.data(), ptr));
 2220|      0|        }
 2221|      0|    }
 2222|       |
 2223|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2224|      0|                     detail::make_string_view_from_pointers(start, end), value,
 2225|      0|                     base, sign == sign_type::minus_sign));
 2226|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 2227|      0|}
_ZN3scn2v44impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 2184|    918|{
 2185|    918|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1104|    918|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    918|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2186|    918|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1104|    918|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    918|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2187|    918|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1104|    918|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    918|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2188|    918|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1104|    918|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    918|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2189|       |
 2190|    918|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (2190:9): [True: 918, False: 0]
  ------------------
 2191|    918|        SCN_UNLIKELY_ATTR
 2192|    918|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 2193|    918|                                             "Invalid integer value");
 2194|    918|    }
 2195|       |
 2196|       |    // Skip leading zeroes
 2197|      0|    auto start = source.data();
 2198|      0|    const auto end = source.data() + source.size();
 2199|      0|    {
 2200|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (2200:16): [True: 0, False: 0]
  ------------------
 2201|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (2201:17): [True: 0, False: 0]
  ------------------
 2202|      0|                break;
 2203|      0|            }
 2204|      0|        }
 2205|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2206|      0|            value = 0;
 2207|      0|            return ranges::next(source.begin(),
 2208|      0|                                ranges::distance(source.data(), start));
 2209|      0|        }
 2210|      0|    }
 2211|       |
 2212|       |    if constexpr (std::is_same_v<CharT, char> &&
 2213|      0|                  sizeof(T) <= sizeof(std::uint64_t)) {
 2214|      0|        if (base == 10) {
  ------------------
  |  Branch (2214:13): [True: 0, False: 0]
  ------------------
 2215|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2216|      0|                             detail::make_string_view_from_pointers(start, end),
 2217|      0|                             value, sign == sign_type::minus_sign));
 2218|      0|            return ranges::next(source.begin(),
 2219|      0|                                ranges::distance(source.data(), ptr));
 2220|      0|        }
 2221|      0|    }
 2222|       |
 2223|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2224|      0|                     detail::make_string_view_from_pointers(start, end), value,
 2225|      0|                     base, sign == sign_type::minus_sign));
 2226|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 2227|      0|}
_ZN3scn2v44impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 2184|  1.07k|{
 2185|  1.07k|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1104|  1.07k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.07k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2186|  1.07k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1104|  1.07k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.07k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2187|  1.07k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1104|  1.07k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.07k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2188|  1.07k|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1104|  1.07k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.07k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2189|       |
 2190|  1.07k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (2190:9): [True: 1.01k, False: 58]
  ------------------
 2191|  1.01k|        SCN_UNLIKELY_ATTR
 2192|  1.01k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 2193|  1.01k|                                             "Invalid integer value");
 2194|  1.01k|    }
 2195|       |
 2196|       |    // Skip leading zeroes
 2197|     58|    auto start = source.data();
 2198|     58|    const auto end = source.data() + source.size();
 2199|     58|    {
 2200|    116|        for (; start != end; ++start) {
  ------------------
  |  Branch (2200:16): [True: 92, False: 24]
  ------------------
 2201|     92|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (2201:17): [True: 34, False: 58]
  ------------------
 2202|     34|                break;
 2203|     34|            }
 2204|     92|        }
 2205|     58|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  | 1039|     92|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 58, False: 0]
  |  |  |  Branch (1039:45): [True: 24, False: 34]
  |  |  |  Branch (1039:45): [True: 34, False: 0]
  |  |  ------------------
  ------------------
 2206|     58|            value = 0;
 2207|     58|            return ranges::next(source.begin(),
 2208|     58|                                ranges::distance(source.data(), start));
 2209|     58|        }
 2210|     58|    }
 2211|       |
 2212|       |    if constexpr (std::is_same_v<CharT, char> &&
 2213|       |                  sizeof(T) <= sizeof(std::uint64_t)) {
 2214|       |        if (base == 10) {
 2215|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 2216|       |                             detail::make_string_view_from_pointers(start, end),
 2217|       |                             value, sign == sign_type::minus_sign));
 2218|       |            return ranges::next(source.begin(),
 2219|       |                                ranges::distance(source.data(), ptr));
 2220|       |        }
 2221|       |    }
 2222|       |
 2223|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2224|      0|                     detail::make_string_view_from_pointers(start, end), value,
 2225|      0|                     base, sign == sign_type::minus_sign));
 2226|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 2227|      0|}
_ZN3scn2v44impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 2184|    918|{
 2185|    918|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1104|    918|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    918|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2186|    918|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1104|    918|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    918|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2187|    918|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1104|    918|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    918|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2188|    918|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1104|    918|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    918|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2189|       |
 2190|    918|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (2190:9): [True: 918, False: 0]
  ------------------
 2191|    918|        SCN_UNLIKELY_ATTR
 2192|    918|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 2193|    918|                                             "Invalid integer value");
 2194|    918|    }
 2195|       |
 2196|       |    // Skip leading zeroes
 2197|      0|    auto start = source.data();
 2198|      0|    const auto end = source.data() + source.size();
 2199|      0|    {
 2200|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (2200:16): [True: 0, False: 0]
  ------------------
 2201|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (2201:17): [True: 0, False: 0]
  ------------------
 2202|      0|                break;
 2203|      0|            }
 2204|      0|        }
 2205|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2206|      0|            value = 0;
 2207|      0|            return ranges::next(source.begin(),
 2208|      0|                                ranges::distance(source.data(), start));
 2209|      0|        }
 2210|      0|    }
 2211|       |
 2212|       |    if constexpr (std::is_same_v<CharT, char> &&
 2213|      0|                  sizeof(T) <= sizeof(std::uint64_t)) {
 2214|      0|        if (base == 10) {
  ------------------
  |  Branch (2214:13): [True: 0, False: 0]
  ------------------
 2215|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2216|      0|                             detail::make_string_view_from_pointers(start, end),
 2217|      0|                             value, sign == sign_type::minus_sign));
 2218|      0|            return ranges::next(source.begin(),
 2219|      0|                                ranges::distance(source.data(), ptr));
 2220|      0|        }
 2221|      0|    }
 2222|       |
 2223|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2224|      0|                     detail::make_string_view_from_pointers(start, end), value,
 2225|      0|                     base, sign == sign_type::minus_sign));
 2226|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 2227|      0|}
_ZN3scn2v44impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 2184|  1.02k|{
 2185|  1.02k|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1104|  1.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2186|  1.02k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1104|  1.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2187|  1.02k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1104|  1.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2188|  1.02k|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1104|  1.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2189|       |
 2190|  1.02k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (2190:9): [True: 976, False: 50]
  ------------------
 2191|    976|        SCN_UNLIKELY_ATTR
 2192|    976|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 2193|    976|                                             "Invalid integer value");
 2194|    976|    }
 2195|       |
 2196|       |    // Skip leading zeroes
 2197|     50|    auto start = source.data();
 2198|     50|    const auto end = source.data() + source.size();
 2199|     50|    {
 2200|    100|        for (; start != end; ++start) {
  ------------------
  |  Branch (2200:16): [True: 80, False: 20]
  ------------------
 2201|     80|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (2201:17): [True: 30, False: 50]
  ------------------
 2202|     30|                break;
 2203|     30|            }
 2204|     80|        }
 2205|     50|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  | 1039|     80|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 50, False: 0]
  |  |  |  Branch (1039:45): [True: 20, False: 30]
  |  |  |  Branch (1039:45): [True: 30, False: 0]
  |  |  ------------------
  ------------------
 2206|     50|            value = 0;
 2207|     50|            return ranges::next(source.begin(),
 2208|     50|                                ranges::distance(source.data(), start));
 2209|     50|        }
 2210|     50|    }
 2211|       |
 2212|       |    if constexpr (std::is_same_v<CharT, char> &&
 2213|       |                  sizeof(T) <= sizeof(std::uint64_t)) {
 2214|       |        if (base == 10) {
 2215|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 2216|       |                             detail::make_string_view_from_pointers(start, end),
 2217|       |                             value, sign == sign_type::minus_sign));
 2218|       |            return ranges::next(source.begin(),
 2219|       |                                ranges::distance(source.data(), ptr));
 2220|       |        }
 2221|       |    }
 2222|       |
 2223|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2224|      0|                     detail::make_string_view_from_pointers(start, end), value,
 2225|      0|                     base, sign == sign_type::minus_sign));
 2226|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 2227|      0|}
_ZN3scn2v44impl19parse_integer_valueIcmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 2184|    900|{
 2185|    900|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1104|    900|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    900|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2186|    900|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1104|    900|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    900|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2187|    900|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1104|    900|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    900|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2188|    900|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1104|    900|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    900|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2189|       |
 2190|    900|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (2190:9): [True: 900, False: 0]
  ------------------
 2191|    900|        SCN_UNLIKELY_ATTR
 2192|    900|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 2193|    900|                                             "Invalid integer value");
 2194|    900|    }
 2195|       |
 2196|       |    // Skip leading zeroes
 2197|      0|    auto start = source.data();
 2198|      0|    const auto end = source.data() + source.size();
 2199|      0|    {
 2200|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (2200:16): [True: 0, False: 0]
  ------------------
 2201|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (2201:17): [True: 0, False: 0]
  ------------------
 2202|      0|                break;
 2203|      0|            }
 2204|      0|        }
 2205|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2206|      0|            value = 0;
 2207|      0|            return ranges::next(source.begin(),
 2208|      0|                                ranges::distance(source.data(), start));
 2209|      0|        }
 2210|      0|    }
 2211|       |
 2212|       |    if constexpr (std::is_same_v<CharT, char> &&
 2213|      0|                  sizeof(T) <= sizeof(std::uint64_t)) {
 2214|      0|        if (base == 10) {
  ------------------
  |  Branch (2214:13): [True: 0, False: 0]
  ------------------
 2215|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2216|      0|                             detail::make_string_view_from_pointers(start, end),
 2217|      0|                             value, sign == sign_type::minus_sign));
 2218|      0|            return ranges::next(source.begin(),
 2219|      0|                                ranges::distance(source.data(), ptr));
 2220|      0|        }
 2221|      0|    }
 2222|       |
 2223|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2224|      0|                     detail::make_string_view_from_pointers(start, end), value,
 2225|      0|                     base, sign == sign_type::minus_sign));
 2226|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 2227|      0|}
_ZN3scn2v44impl19parse_integer_valueIwmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 2184|    976|{
 2185|    976|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1104|    976|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    976|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2186|    976|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1104|    976|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    976|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2187|    976|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1104|    976|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    976|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2188|    976|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1104|    976|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    976|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2189|       |
 2190|    976|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (2190:9): [True: 938, False: 38]
  ------------------
 2191|    938|        SCN_UNLIKELY_ATTR
 2192|    938|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 2193|    938|                                             "Invalid integer value");
 2194|    938|    }
 2195|       |
 2196|       |    // Skip leading zeroes
 2197|     38|    auto start = source.data();
 2198|     38|    const auto end = source.data() + source.size();
 2199|     38|    {
 2200|     76|        for (; start != end; ++start) {
  ------------------
  |  Branch (2200:16): [True: 66, False: 10]
  ------------------
 2201|     66|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (2201:17): [True: 28, False: 38]
  ------------------
 2202|     28|                break;
 2203|     28|            }
 2204|     66|        }
 2205|     38|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  | 1039|     66|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 38, False: 0]
  |  |  |  Branch (1039:45): [True: 10, False: 28]
  |  |  |  Branch (1039:45): [True: 28, False: 0]
  |  |  ------------------
  ------------------
 2206|     38|            value = 0;
 2207|     38|            return ranges::next(source.begin(),
 2208|     38|                                ranges::distance(source.data(), start));
 2209|     38|        }
 2210|     38|    }
 2211|       |
 2212|       |    if constexpr (std::is_same_v<CharT, char> &&
 2213|       |                  sizeof(T) <= sizeof(std::uint64_t)) {
 2214|       |        if (base == 10) {
 2215|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 2216|       |                             detail::make_string_view_from_pointers(start, end),
 2217|       |                             value, sign == sign_type::minus_sign));
 2218|       |            return ranges::next(source.begin(),
 2219|       |                                ranges::distance(source.data(), ptr));
 2220|       |        }
 2221|       |    }
 2222|       |
 2223|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2224|      0|                     detail::make_string_view_from_pointers(start, end), value,
 2225|      0|                     base, sign == sign_type::minus_sign));
 2226|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 2227|      0|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2935|  31.1k|{
 2936|  31.1k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2937|  31.1k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2953|  62.2k|{
 2954|  62.2k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2955|  62.2k|}
_ZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  206|  3.97k|{
  207|  3.97k|    return find_classic_impl(
  208|  3.97k|        source, [](char ch) { return is_ascii_space(ch); },
  209|  3.97k|        [](char32_t cp) { return detail::is_cp_space(cp); });
  210|  3.97k|}
_ZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  214|  26.8k|{
  215|  26.8k|    return find_classic_impl(
  216|  26.8k|        source, [](char ch) { return !is_ascii_space(ch); },
  217|  26.8k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  218|  26.8k|}
_ZN3scn2v46detail12handle_errorENS0_10scan_errorE:
  328|    354|{
  329|    354|    SCN_UNLIKELY_ATTR
  330|    354|    return e;
  331|    354|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2904|  31.1k|{
 2905|  31.1k|    return vscan_internal(source, format, args);
 2906|  31.1k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2918|  62.2k|{
 2919|  62.2k|    return vscan_internal(source, format, args);
 2920|  62.2k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|  3.97k|{
  131|  3.97k|    auto it = source.begin();
  132|       |
  133|  11.3k|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 8.09k, False: 3.22k]
  ------------------
  134|  8.09k|        auto sv =
  135|  8.09k|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|  8.09k|                .substr(0, 8);
  137|       |
  138|  8.09k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 2.55k, False: 5.54k]
  ------------------
  139|  2.55k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|  2.55k|            it = detail::make_string_view_iterator(source, tmp_it);
  141|  2.55k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 420, False: 2.13k]
  ------------------
  142|    420|                break;
  143|    420|            }
  144|  2.13k|            continue;
  145|  2.55k|        }
  146|       |
  147|  21.0k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 15.8k, False: 5.22k]
  ------------------
  148|  15.8k|            auto tmp =
  149|  15.8k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|  15.8k|            auto res = get_next_code_point(tmp);
  151|  15.8k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 324, False: 15.5k]
  ------------------
  152|    324|                return it;
  153|    324|            }
  154|  15.5k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|  15.5k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  15.5k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  | 1105|  15.5k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  15.5k|        }
  158|  5.54k|    }
  159|       |
  160|  3.64k|    return detail::make_string_view_iterator(source, it);
  161|  3.97k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  117|  34.0k|{
  118|  34.0k|    static_assert(sizeof(*source.data()) == 1);
  119|  34.0k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  | 1104|  34.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  34.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  120|  34.0k|    uint64_t word{};
  121|  34.0k|    std::memcpy(&word, source.data(), source.size());
  122|       |
  123|  34.0k|    return has_byte_greater(word, 127) != 0;
  124|  34.0k|}
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  208|  14.1k|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  209|  15.8k|        [](char32_t cp) { return detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|  26.8k|{
  131|  26.8k|    auto it = source.begin();
  132|       |
  133|  34.2k|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 25.9k, False: 8.29k]
  ------------------
  134|  25.9k|        auto sv =
  135|  25.9k|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|  25.9k|                .substr(0, 8);
  137|       |
  138|  25.9k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 12.3k, False: 13.6k]
  ------------------
  139|  12.3k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|  12.3k|            it = detail::make_string_view_iterator(source, tmp_it);
  141|  12.3k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 10.3k, False: 2.02k]
  ------------------
  142|  10.3k|                break;
  143|  10.3k|            }
  144|  2.02k|            continue;
  145|  12.3k|        }
  146|       |
  147|  27.5k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 22.0k, False: 5.44k]
  ------------------
  148|  22.0k|            auto tmp =
  149|  22.0k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|  22.0k|            auto res = get_next_code_point(tmp);
  151|  22.0k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 8.18k, False: 13.8k]
  ------------------
  152|  8.18k|                return it;
  153|  8.18k|            }
  154|  13.8k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|  13.8k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  13.8k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  | 1105|  13.8k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|  13.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  13.8k|        }
  158|  13.6k|    }
  159|       |
  160|  18.6k|    return detail::make_string_view_iterator(source, it);
  161|  26.8k|}
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  216|  24.6k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  217|  22.0k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117parse_float_valueIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1736|    908|{
 1737|    908|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1737:9): [True: 0, False: 908]
  ------------------
 1738|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1739|      0|            value = std::numeric_limits<T>::infinity();
 1740|      0|            return std::strlen("inf");
 1741|       |        }
 1742|       |        else {
 1743|       |            return detail::unexpected_scan_error(
 1744|       |                scan_error::invalid_scanned_value,
 1745|       |                "Type doesn't support infinities");
 1746|       |        }
 1747|      0|    }
 1748|    908|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1748:9): [True: 0, False: 908]
  ------------------
 1749|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1750|      0|            value = std::numeric_limits<T>::infinity();
 1751|      0|            return std::strlen("infinity");
 1752|       |        }
 1753|       |        else {
 1754|       |            return detail::unexpected_scan_error(
 1755|       |                scan_error::invalid_scanned_value,
 1756|       |                "Type doesn't support infinities");
 1757|       |        }
 1758|      0|    }
 1759|    908|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1759:9): [True: 0, False: 908]
  ------------------
 1760|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1761|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1762|      0|            return std::strlen("nan");
 1763|       |        }
 1764|       |        else {
 1765|       |            return detail::unexpected_scan_error(
 1766|       |                scan_error::invalid_scanned_value,
 1767|       |                "Type doesn't support quiet NaNs");
 1768|       |        }
 1769|      0|    }
 1770|    908|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1770:9): [True: 0, False: 908]
  ------------------
 1771|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1772|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1773|       |
 1774|      0|            if constexpr (std::numeric_limits<T>::is_iec559) {
 1775|       |                // Use uint64, if the mantissa of T has 64 (or less) bits.
 1776|      0|#if SCN_HAS_INT128
 1777|      0|                using payload_type =
 1778|      0|                    std::conditional_t<std::numeric_limits<T>::digits <= 64,
 1779|      0|                                       std::uint64_t, uint128>;
 1780|       |#else
 1781|       |                using payload_type = std::uint64_t;
 1782|       |#endif
 1783|      0|                payload_type payload{};
 1784|      0|                if (auto result = reader_impl_for_int<CharT>{}.read_default(
  ------------------
  |  Branch (1784:26): [True: 0, False: 0]
  ------------------
 1785|      0|                        nan_payload.view(), payload, {})) {
 1786|      0|                    apply_nan_payload(value, payload);
 1787|      0|                }
 1788|      0|                else if (result.error().code() ==
  ------------------
  |  Branch (1788:26): [True: 0, False: 0]
  ------------------
 1789|      0|                         scan_error::value_positive_overflow) {
 1790|      0|                    apply_nan_payload(value,
 1791|      0|                                      std::numeric_limits<payload_type>::max());
 1792|      0|                }
 1793|      0|            }
 1794|       |
 1795|      0|            return static_cast<std::ptrdiff_t>(std::strlen("nan()") +
 1796|      0|                                               nan_payload.view().size());
 1797|       |        }
 1798|       |        else {
 1799|       |            return detail::unexpected_scan_error(
 1800|       |                scan_error::invalid_scanned_value,
 1801|       |                "Type doesn't support quiet NaNs");
 1802|       |        }
 1803|      0|    }
 1804|       |
 1805|    908|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  | 1104|    908|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    908|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1806|    908|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1806:9): [True: 8, False: 900]
  ------------------
 1807|      8|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  | 1039|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 8, False: 0]
  |  |  ------------------
  ------------------
 1808|      8|            return detail::unexpected_scan_error(
 1809|      8|                scan_error::invalid_scanned_value,
 1810|      8|                "Invalid floating-point digit");
 1811|      8|        }
 1812|      8|    }
 1813|    900|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  | 1039|    900|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 900, False: 0]
  |  |  ------------------
  ------------------
 1814|    900|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1815|    900|                                             "Invalid floating-point digit");
 1816|    900|    }
 1817|       |
 1818|      0|    return dispatch_parse_float_value<
 1819|      0|        CharT, T, get_float_impl_for<fast_float_impl_traits, CharT, T>,
 1820|      0|        get_float_impl_for<from_chars_impl_traits, CharT, T>,
 1821|      0|        get_float_impl_for<strtod_impl_traits, CharT, T>>(data, value);
 1822|    900|}
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE11check_errorElid:
  915|    106|    {
  916|    106|        if (is_float_any_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (916:13): [True: 106, False: 0]
  |  Branch (916:41): [True: 0, False: 106]
  ------------------
  917|      0|            SCN_UNLIKELY_ATTR
  918|      0|            return detail::unexpected_scan_error(
  919|      0|                scan_error::invalid_scanned_value,
  920|      0|                "strtod failed: No conversion");
  921|      0|        }
  922|       |
  923|    106|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (923:13): [True: 0, False: 106]
  ------------------
  924|    106|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (924:13): [True: 0, False: 0]
  ------------------
  925|      0|            SCN_UNLIKELY_ATTR
  926|      0|            return detail::unexpected_scan_error(
  927|      0|                scan_error::invalid_scanned_value,
  928|      0|                "strtod failed: Hexfloats parsed, "
  929|      0|                "but they're disallowed by the format string");
  930|      0|        }
  931|       |
  932|    106|        if (c_errno == ERANGE && is_float_positive_zero(value)) {
  ------------------
  |  Branch (932:13): [True: 0, False: 106]
  |  Branch (932:34): [True: 0, False: 0]
  ------------------
  933|      0|            SCN_UNLIKELY_ATTR
  934|      0|            return detail::unexpected_scan_error(
  935|      0|                scan_error::value_positive_underflow,
  936|      0|                "strtod failed: Value too small");
  937|      0|        }
  938|    106|        if (c_errno == ERANGE && is_float_negative_zero(value)) {
  ------------------
  |  Branch (938:13): [True: 0, False: 106]
  |  Branch (938:34): [True: 0, False: 0]
  ------------------
  939|      0|            SCN_UNLIKELY_ATTR
  940|      0|            return detail::unexpected_scan_error(
  941|      0|                scan_error::value_negative_underflow,
  942|      0|                "strtod failed: Value too small");
  943|      0|        }
  944|       |
  945|       |        // This doesn't set ERANGE on all C standard library implementations,
  946|       |        // so we need to check whether we were actually expecting infinity
  947|    106|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (947:13): [True: 106, False: 0]
  ------------------
  948|    106|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (948:13): [True: 106, False: 0]
  ------------------
  949|    106|            is_float_positive_infinity(value)) {
  ------------------
  |  Branch (949:13): [True: 0, False: 106]
  ------------------
  950|      0|            SCN_UNLIKELY_ATTR
  951|      0|            return detail::unexpected_scan_error(
  952|      0|                scan_error::value_positive_overflow,
  953|      0|                "strtod failed: Value too large");
  954|      0|        }
  955|    106|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (955:13): [True: 106, False: 0]
  ------------------
  956|    106|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (956:13): [True: 106, False: 0]
  ------------------
  957|    106|            is_float_negative_infinity(value)) {
  ------------------
  |  Branch (957:13): [True: 0, False: 106]
  ------------------
  958|      0|            SCN_UNLIKELY_ATTR
  959|      0|            return detail::unexpected_scan_error(
  960|      0|                scan_error::value_negative_overflow,
  961|      0|                "strtod failed: Value too large");
  962|      0|        }
  963|       |
  964|    106|        return {};
  965|    106|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117is_float_any_zeroIdEEbT_:
  754|    106|{
  755|    106|    return value == static_cast<T>(0.0) || value == static_cast<T>(-0.0);
  ------------------
  |  Branch (755:12): [True: 106, False: 0]
  |  Branch (755:44): [True: 0, False: 0]
  ------------------
  756|    106|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126is_float_positive_infinityIdEEbT_:
  797|    106|{
  798|    106|    if constexpr (std::numeric_limits<T>::has_infinity) {
  799|       |#if defined(__FINITE_MATH_ONLY__) && __FINITE_MATH_ONLY__
  800|       |        using repr = typename float_traits<T>::value_repr;
  801|       |        repr expected{};
  802|       |        SCN_GCC_PUSH
  803|       |        SCN_GCC_IGNORE("-Woverflow")
  804|       |        expected.exponent = std::numeric_limits<unsigned>::max();
  805|       |        SCN_GCC_POP
  806|       |        repr received{};
  807|       |        std::memcpy(&received, &value, sizeof(repr));
  808|       |        if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  809|       |            expected.one = 1;
  810|       |            received.padding = 0;
  811|       |        }
  812|       |        return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  813|       |#else
  814|    106|        return value == std::numeric_limits<T>::infinity();
  815|    106|#endif
  816|       |    }
  817|       |    else {
  818|       |        return false;
  819|       |    }
  820|    106|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126is_float_negative_infinityIdEEbT_:
  824|    106|{
  825|    106|    if constexpr (std::numeric_limits<T>::has_infinity) {
  826|       |#if defined(__FINITE_MATH_ONLY__) && __FINITE_MATH_ONLY__
  827|       |        using repr = typename float_traits<T>::value_repr;
  828|       |        repr expected{};
  829|       |        SCN_GCC_PUSH
  830|       |        SCN_GCC_IGNORE("-Woverflow")
  831|       |        expected.exponent = std::numeric_limits<unsigned>::max();
  832|       |        SCN_GCC_POP
  833|       |        expected.negative = 1;
  834|       |        repr received{};
  835|       |        std::memcpy(&received, &value, sizeof(repr));
  836|       |        if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  837|       |            expected.one = 1;
  838|       |            received.padding = 0;
  839|       |        }
  840|       |        return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  841|       |#else
  842|    106|        return value == -std::numeric_limits<T>::infinity();
  843|    106|#endif
  844|       |    }
  845|       |    else {
  846|       |        return false;
  847|       |    }
  848|    106|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117parse_float_valueIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1736|  1.07k|{
 1737|  1.07k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1737:9): [True: 0, False: 1.07k]
  ------------------
 1738|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1739|      0|            value = std::numeric_limits<T>::infinity();
 1740|      0|            return std::strlen("inf");
 1741|       |        }
 1742|       |        else {
 1743|       |            return detail::unexpected_scan_error(
 1744|       |                scan_error::invalid_scanned_value,
 1745|       |                "Type doesn't support infinities");
 1746|       |        }
 1747|      0|    }
 1748|  1.07k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1748:9): [True: 0, False: 1.07k]
  ------------------
 1749|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1750|      0|            value = std::numeric_limits<T>::infinity();
 1751|      0|            return std::strlen("infinity");
 1752|       |        }
 1753|       |        else {
 1754|       |            return detail::unexpected_scan_error(
 1755|       |                scan_error::invalid_scanned_value,
 1756|       |                "Type doesn't support infinities");
 1757|       |        }
 1758|      0|    }
 1759|  1.07k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1759:9): [True: 0, False: 1.07k]
  ------------------
 1760|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1761|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1762|      0|            return std::strlen("nan");
 1763|       |        }
 1764|       |        else {
 1765|       |            return detail::unexpected_scan_error(
 1766|       |                scan_error::invalid_scanned_value,
 1767|       |                "Type doesn't support quiet NaNs");
 1768|       |        }
 1769|      0|    }
 1770|  1.07k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1770:9): [True: 0, False: 1.07k]
  ------------------
 1771|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1772|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1773|       |
 1774|      0|            if constexpr (std::numeric_limits<T>::is_iec559) {
 1775|       |                // Use uint64, if the mantissa of T has 64 (or less) bits.
 1776|      0|#if SCN_HAS_INT128
 1777|      0|                using payload_type =
 1778|      0|                    std::conditional_t<std::numeric_limits<T>::digits <= 64,
 1779|      0|                                       std::uint64_t, uint128>;
 1780|       |#else
 1781|       |                using payload_type = std::uint64_t;
 1782|       |#endif
 1783|      0|                payload_type payload{};
 1784|      0|                if (auto result = reader_impl_for_int<CharT>{}.read_default(
  ------------------
  |  Branch (1784:26): [True: 0, False: 0]
  ------------------
 1785|      0|                        nan_payload.view(), payload, {})) {
 1786|      0|                    apply_nan_payload(value, payload);
 1787|      0|                }
 1788|      0|                else if (result.error().code() ==
  ------------------
  |  Branch (1788:26): [True: 0, False: 0]
  ------------------
 1789|      0|                         scan_error::value_positive_overflow) {
 1790|      0|                    apply_nan_payload(value,
 1791|      0|                                      std::numeric_limits<payload_type>::max());
 1792|      0|                }
 1793|      0|            }
 1794|       |
 1795|      0|            return static_cast<std::ptrdiff_t>(std::strlen("nan()") +
 1796|      0|                                               nan_payload.view().size());
 1797|       |        }
 1798|       |        else {
 1799|       |            return detail::unexpected_scan_error(
 1800|       |                scan_error::invalid_scanned_value,
 1801|       |                "Type doesn't support quiet NaNs");
 1802|       |        }
 1803|      0|    }
 1804|       |
 1805|  1.07k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  | 1104|  1.07k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.07k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1806|  1.07k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1806:9): [True: 80, False: 996]
  ------------------
 1807|     80|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  | 1039|     80|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 22, False: 58]
  |  |  ------------------
  ------------------
 1808|     22|            return detail::unexpected_scan_error(
 1809|     22|                scan_error::invalid_scanned_value,
 1810|     22|                "Invalid floating-point digit");
 1811|     22|        }
 1812|     80|    }
 1813|  1.05k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  | 1039|  1.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 948, False: 106]
  |  |  ------------------
  ------------------
 1814|    948|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1815|    948|                                             "Invalid floating-point digit");
 1816|    948|    }
 1817|       |
 1818|    106|    return dispatch_parse_float_value<
 1819|    106|        CharT, T, get_float_impl_for<fast_float_impl_traits, CharT, T>,
 1820|    106|        get_float_impl_for<from_chars_impl_traits, CharT, T>,
 1821|    106|        get_float_impl_for<strtod_impl_traits, CharT, T>>(data, value);
 1822|  1.05k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIwdNS2_15float_null_implEJS4_NS2_10float_implINS2_18strtod_impl_traitsEwdEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|    106|{
 1711|    106|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|    106|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|       |    else {
 1715|       |        auto next =
 1716|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|       |                if (!err.has_value()) {
 1721|       |                    return unexpected(err.error());
 1722|       |                }
 1723|       |            }
 1724|       |            // We still have valid impls to go, try those out
 1725|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|       |        };
 1727|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|       |    }
 1729|    106|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIwdNS2_15float_null_implEJNS2_10float_implINS2_18strtod_impl_traitsEwdEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|    106|{
 1711|    106|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|    106|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|       |    else {
 1715|       |        auto next =
 1716|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|       |                if (!err.has_value()) {
 1721|       |                    return unexpected(err.error());
 1722|       |                }
 1723|       |            }
 1724|       |            // We still have valid impls to go, try those out
 1725|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|       |        };
 1727|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|       |    }
 1729|    106|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIwdNS2_10float_implINS2_18strtod_impl_traitsEwdEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|    106|{
 1711|       |    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|       |        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|    106|    else {
 1715|    106|        auto next =
 1716|    106|            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|    106|            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|    106|                if (!err.has_value()) {
 1721|    106|                    return unexpected(err.error());
 1722|    106|                }
 1723|    106|            }
 1724|       |            // We still have valid impls to go, try those out
 1725|    106|            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|    106|        };
 1727|    106|        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|    106|    }
 1729|    106|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_128parse_float_value_using_implIwdNS2_10float_implINS2_18strtod_impl_traitsEwdEERZNS2_26dispatch_parse_float_valueIwdS6_JEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNS8_IvEEE_EES9_SD_SF_OT2_:
 1685|    106|{
 1686|    106|    auto impl = typename Impl::impl_type{data};
 1687|       |
 1688|    106|    if constexpr (std::is_same_v<T, typename Impl::float_type>) {
 1689|    106|        return impl(value, fallback);
 1690|       |    }
 1691|       |    else {
 1692|       |        return impl(*reinterpret_cast<typename Impl::float_type*>(&value),
 1693|       |                    fallback);
 1694|       |    }
 1695|    106|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwdEC2ERNS2_14impl_init_dataIwEE:
 1071|    106|        : strtod_impl_base<T>{data.kind, data.options}, m_input(data.input)
 1072|    106|    {
 1073|    106|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwdEclIRZNS2_26dispatch_parse_float_valueIwdNS2_10float_implINS2_18strtod_impl_traitsEwdEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNSA_IvEEE_EESB_RdOSD_:
 1077|    106|    {
 1078|    106|        return this->parse(value, this->get_null_terminated_source(m_input),
 1079|    106|                           generic_strtod);
 1080|    106|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIwPFdPKwPPwEEENS0_13scan_expectedIlEERdPKT_T0_:
  872|    106|    {
  873|    106|        CharT* end{};
  874|    106|        errno = 0;
  875|    106|        value = strtod_cb(src, &end);
  876|    106|        const auto saved_errno = errno;
  877|    106|        auto chars_read = end - src;
  878|       |
  879|    106|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3948|    106|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    106|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 106]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
  880|       |
  881|    106|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (881:13): [True: 58, False: 48]
  ------------------
  882|    106|            chars_read >= 2) {
  ------------------
  |  Branch (882:13): [True: 58, False: 0]
  ------------------
  883|     58|            chars_read -= 2;
  884|     58|        }
  885|       |
  886|    106|        return chars_read;
  887|    106|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  892|    106|    {
  893|    106|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (893:13): [True: 86, False: 20]
  ------------------
  894|       |            // TODO: call float_reader::read_source?
  895|     86|            auto first_space = read_until_classic_space(input.view());
  896|     86|            input.assign(
  897|     86|                std::basic_string<CharT>{input.view().begin(), first_space});
  898|     86|        }
  899|       |
  900|    106|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (900:13): [True: 58, False: 48]
  ------------------
  901|       |            if constexpr (std::is_same_v<CharT, char>) {
  902|       |                input.get_allocated_string().insert(0, "0x");
  903|       |            }
  904|     58|            else {
  905|     58|                input.get_allocated_string().insert(0, L"0x");
  906|     58|            }
  907|     58|        }
  908|       |
  909|    106|        return input.get_allocated_string().c_str();
  910|    106|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwdE14generic_strtodEPKwPPw:
 1084|    106|    {
 1085|       |        if constexpr (std::is_same_v<CharT, char>) {
 1086|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
 1087|       |        }
 1088|    106|        else {
 1089|    106|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
 1090|    106|        }
 1091|    106|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE19generic_wide_strtodEPKwPPw:
 1016|    106|    {
 1017|       |#if SCN_HAS_STD_F16 && defined(__HAVE_FLOAT16) && __HAVE_FLOAT16
 1018|       |        if constexpr (std::is_same_v<T, std::float16_t>) {
 1019|       |            set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1020|       |            return static_cast<std::float16_t>(::wcstof16(str, str_end));
 1021|       |        }
 1022|       |#endif
 1023|       |
 1024|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
 1025|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
 1026|       |        if constexpr (std::is_same_v<T, float>) {
 1027|       |            return ::wcstof_l(str, str_end, cloc);
 1028|       |        }
 1029|       |        else if constexpr (std::is_same_v<T, double>) {
 1030|       |            return ::wcstod_l(str, str_end, cloc);
 1031|       |        }
 1032|       |        else if constexpr (std::is_same_v<T, long double>) {
 1033|       |            return ::wcstold_l(str, str_end, cloc);
 1034|       |        }
 1035|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
 1036|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
 1037|       |        if constexpr (std::is_same_v<T, float>) {
 1038|       |            return ::_wcstof_l(str, str_end, cloc);
 1039|       |        }
 1040|       |        else if constexpr (std::is_same_v<T, double>) {
 1041|       |            return ::_wcstod_l(str, str_end, cloc);
 1042|       |        }
 1043|       |        else if constexpr (std::is_same_v<T, long double>) {
 1044|       |            return ::_wcstold_l(str, str_end, cloc);
 1045|       |        }
 1046|       |#else
 1047|    106|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1048|       |        if constexpr (std::is_same_v<T, float>) {
 1049|       |            return std::wcstof(str, str_end);
 1050|       |        }
 1051|    106|        else if constexpr (std::is_same_v<T, double>) {
 1052|    106|            return std::wcstod(str, str_end);
 1053|       |        }
 1054|       |        else if constexpr (std::is_same_v<T, long double>) {
 1055|       |            return std::wcstold(str, str_end);
 1056|       |        }
 1057|      0|#endif
 1058|       |
 1059|    106|        SCN_EXPECT(false);
  ------------------
  |  | 1104|    106|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    106|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1060|      0|        SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1061|    106|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2349|  62.2k|{
 2350|  62.2k|    if (format.size() != 2) {
  ------------------
  |  Branch (2350:9): [True: 61.9k, False: 378]
  ------------------
 2351|  61.9k|        return false;
 2352|  61.9k|    }
 2353|    378|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (2353:12): [True: 126, False: 252]
  |  Branch (2353:39): [True: 18, False: 108]
  ------------------
 2354|  62.2k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSL_10locale_refEm:
 2625|  62.2k|        : format_handler_base{argcount},
 2626|  62.2k|          parse_ctx{source_tag<Source&&>, format},
 2627|  62.2k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1110|  62.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|  62.2k|    static_cast<    \
  |  | 1109|  62.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|  62.2k|    static_cast<    \
  |  | 1109|  62.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2628|  62.2k|    {
 2629|  62.2k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_baseC2Em:
 2443|   186k|    format_handler_base(size_t argcount) : args_count(argcount)
 2444|   186k|    {
 2445|   186k|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  | 1039|   186k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 186k]
  |  |  ------------------
  ------------------
 2446|      0|            visited_args_upper.resize((args_count - 64) / 8);
 2447|      0|        }
 2448|   186k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSD_10locale_refE:
 2576|  62.2k|        : contiguous_ctx(source, args, loc)
 2577|  62.2k|    {
 2578|  62.2k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2766|  62.2k|{
 2767|  62.2k|    const auto beg = handler.get_ctx().begin();
 2768|  62.2k|    detail::parse_format_string<false>(format, handler);
 2769|  62.2k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1039|  62.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 59.5k, False: 2.67k]
  |  |  ------------------
  ------------------
 2770|  59.5k|        return unexpected(err.error());
 2771|  59.5k|    }
 2772|  2.67k|    return ranges::distance(beg, handler.get_ctx().begin());
 2773|  62.2k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2750|   450k|    {
 2751|   450k|        return ctx.get();
 2752|   450k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 2581|   450k|    {
 2582|   450k|        return contiguous_ctx;
 2583|   450k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 2632|  82.5k|    {
 2633|   154k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2633:16): [True: 76.8k, False: 77.8k]
  ------------------
 2634|  76.8k|            auto it = get_ctx().begin();
 2635|  76.8k|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2635:17): [True: 1.17k, False: 75.6k]
  ------------------
 2636|  1.17k|                SCN_UNLIKELY_ATTR
 2637|  1.17k|                return on_error(
 2638|  1.17k|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2639|  1.17k|            }
 2640|       |
 2641|  75.6k|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2642|  75.6k|                    detail::make_string_view_from_pointers(begin, end));
 2643|  75.6k|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2643:17): [True: 2.29k, False: 73.3k]
  ------------------
 2644|  2.29k|                SCN_UNLIKELY_ATTR
 2645|  2.29k|                return on_error({scan_error::invalid_format_string,
 2646|  2.29k|                                 "Invalid encoding in format string"});
 2647|  2.29k|            }
 2648|  73.3k|            else if (is_space) {
  ------------------
  |  Branch (2648:22): [True: 8.36k, False: 64.9k]
  ------------------
 2649|       |                // Skip all whitespace in input
 2650|  8.36k|                get_ctx().advance_to(
 2651|  8.36k|                    impl::read_while_classic_space(get_ctx().range()));
 2652|       |                // And, skip all whitespace in the format string
 2653|  8.36k|                auto begin_it = impl::read_while_classic_space(
 2654|  8.36k|                    detail::make_string_view_from_pointers(
 2655|  8.36k|                        detail::to_address(after_space_it),
 2656|  8.36k|                        detail::to_address(end)));
 2657|       |                // (-1 because of the for loop ++begin)
 2658|  8.36k|                begin = detail::to_address(begin_it) - 1;
 2659|  8.36k|                continue;
 2660|  8.36k|            }
 2661|       |
 2662|  64.9k|            if (*it != *begin) {
  ------------------
  |  Branch (2662:17): [True: 1.20k, False: 63.7k]
  ------------------
 2663|  1.20k|                SCN_UNLIKELY_ATTR
 2664|  1.20k|                return on_error({scan_error::invalid_literal,
 2665|  1.20k|                                 "Unexpected literal character in source"});
 2666|  1.20k|            }
 2667|  63.7k|            get_ctx().advance_to(ranges::next(it));
 2668|  63.7k|        }
 2669|  82.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 2492|   230k|    {
 2493|   230k|        error = unexpected(err);
 2494|   230k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE20on_replacement_fieldEmPKc:
 2699|  5.96k|    {
 2700|  5.96k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2701|  5.96k|        set_arg_as_visited(arg_id);
 2702|       |
 2703|  5.96k|        on_visit_scan_arg(
 2704|  5.96k|            impl::default_arg_reader<context_type>{
 2705|  5.96k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 2706|  5.96k|            arg);
 2707|  5.96k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEmNS1_14format_handlerILb1EcEEEEDaRT_T0_RT1_:
 2404|  37.9k|{
 2405|  37.9k|    auto arg = ctx.arg(id);
 2406|  37.9k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|  37.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.55k, False: 36.4k]
  |  |  ------------------
  ------------------
 2407|  1.55k|        handler.on_error("Failed to find argument with ID");
 2408|  1.55k|    }
 2409|  37.9k|    return arg;
 2410|  37.9k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 2518|  59.4k|    {
 2519|  59.4k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  | 1039|  59.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.85k, False: 56.5k]
  |  |  ------------------
  ------------------
 2520|  2.85k|            on_error({scan_error::invalid_format_string,
 2521|  2.85k|                      "Argument ID out-of-range"});
 2522|  2.85k|            return;
 2523|  2.85k|        }
 2524|       |
 2525|  56.5k|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  | 1039|  56.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 246, False: 56.3k]
  |  |  ------------------
  ------------------
 2526|    246|            on_error({scan_error::invalid_format_string,
 2527|    246|                      "Argument with this ID has already been scanned"});
 2528|    246|        }
 2529|       |
 2530|  56.5k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  | 1038|  56.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 56.5k, False: 0]
  |  |  ------------------
  ------------------
 2531|  56.5k|            visited_args_lower64 |= (1ull << id);
 2532|  56.5k|            return;
 2533|  56.5k|        }
 2534|       |
 2535|      0|        id -= 64;
 2536|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 2537|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 2502|  56.5k|    {
 2503|  56.5k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  | 1039|  56.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 56.5k]
  |  |  ------------------
  ------------------
 2504|      0|            on_error({scan_error::invalid_format_string,
 2505|      0|                      "Argument ID out-of-range"});
 2506|      0|            return false;
 2507|      0|        }
 2508|       |
 2509|  56.5k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  | 1038|  56.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 56.5k, False: 0]
  |  |  ------------------
  ------------------
 2510|  56.5k|            return (visited_args_lower64 >> id) & 1ull;
 2511|  56.5k|        }
 2512|       |
 2513|      0|        id -= 64;
 2514|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 2515|  56.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEcEEEE:
 2683|  5.96k|    {
 2684|  5.96k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2684:13): [True: 292, False: 5.67k]
  |  Branch (2684:13): [True: 292, False: 5.67k]
  |  Branch (2684:29): [True: 0, False: 5.67k]
  ------------------
 2685|    292|            SCN_UNLIKELY_ATTR
 2686|    292|            return;
 2687|    292|        }
 2688|       |
 2689|  5.67k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1110|  5.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2690|  5.67k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|  5.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.93k, False: 1.73k]
  |  |  ------------------
  ------------------
 2691|  3.93k|            on_error(r.error());
 2692|  3.93k|        }
 2693|  1.73k|        else {
 2694|  1.73k|            get_ctx().advance_to(*r);
 2695|  1.73k|        }
 2696|  5.67k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 2672|  37.3k|    {
 2673|  37.3k|        return parse_ctx.next_arg_id();
 2674|  37.3k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEm:
 2676|    682|    {
 2677|    682|        parse_ctx.check_arg_id(id);
 2678|    682|        return id;
 2679|    682|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 2712|  32.0k|    {
 2713|  32.0k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2714|  32.0k|        set_arg_as_visited(arg_id);
 2715|       |
 2716|  32.0k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2716:13): [True: 0, False: 32.0k]
  ------------------
 2717|      0|            parse_ctx.advance_to(begin);
 2718|      0|            on_visit_scan_arg(
 2719|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2720|      0|                    parse_ctx, get_custom_ctx()},
 2721|      0|                arg);
 2722|      0|            return parse_ctx.begin();
 2723|      0|        }
 2724|       |
 2725|  32.0k|        auto specs = detail::format_specs{};
 2726|  32.0k|        detail::specs_checker<specs_handler<context_type>> handler{
 2727|  32.0k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2728|  32.0k|            detail::get_arg_type(arg)};
 2729|       |
 2730|  32.0k|        begin = detail::parse_format_specs(begin, end, handler);
 2731|  32.0k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2731:13): [True: 2.41k, False: 29.5k]
  |  Branch (2731:29): [True: 890, False: 28.7k]
  ------------------
 2732|  3.30k|            SCN_UNLIKELY_ATTR
 2733|  3.30k|            on_error({scan_error::invalid_format_string,
 2734|  3.30k|                      "Missing '}' in format string"});
 2735|  3.30k|            return parse_ctx.begin();
 2736|  3.30k|        }
 2737|  28.7k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1039|  28.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 284, False: 28.4k]
  |  |  ------------------
  ------------------
 2738|    284|            return parse_ctx.begin();
 2739|    284|        }
 2740|  28.4k|        parse_ctx.advance_to(begin);
 2741|       |
 2742|  28.4k|        on_visit_scan_arg(
 2743|  28.4k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2744|  28.4k|                                           get_ctx().locale()},
 2745|  28.4k|            arg);
 2746|  28.4k|        return parse_ctx.begin();
 2747|  28.7k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERSB_:
 2422|  32.0k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 2423|  32.0k|    {
 2424|  32.0k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEcEEEE:
 2683|  28.4k|    {
 2684|  28.4k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2684:13): [True: 160, False: 28.2k]
  |  Branch (2684:13): [True: 160, False: 28.2k]
  |  Branch (2684:29): [True: 0, False: 28.2k]
  ------------------
 2685|    160|            SCN_UNLIKELY_ATTR
 2686|    160|            return;
 2687|    160|        }
 2688|       |
 2689|  28.2k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1110|  28.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2690|  28.2k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|  28.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 23.0k, False: 5.22k]
  |  |  ------------------
  ------------------
 2691|  23.0k|            on_error(r.error());
 2692|  23.0k|        }
 2693|  5.22k|        else {
 2694|  5.22k|            get_ctx().advance_to(*r);
 2695|  5.22k|        }
 2696|  28.2k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorEPKc:
 2486|   118k|    {
 2487|   118k|        SCN_UNLIKELY_ATTR
 2488|   118k|        error = detail::unexpected_scan_error(scan_error::invalid_format_string,
 2489|   118k|                                              msg);
 2490|   118k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 2451|   186k|    {
 2452|   186k|        {
 2453|   186k|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (2453:45): [True: 0, False: 186k]
  ------------------
 2454|   186k|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (2454:35): [True: 0, False: 186k]
  ------------------
 2455|   186k|                                      ? std::numeric_limits<uint64_t>::max()
 2456|   186k|                                      : (1ull << args_count_lower64) - 1;
 2457|       |
 2458|   186k|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (2458:17): [True: 130k, False: 56.3k]
  ------------------
 2459|   130k|                return on_error({scan_error::invalid_format_string,
 2460|   130k|                                 "Argument list not exhausted"});
 2461|   130k|            }
 2462|   186k|        }
 2463|       |
 2464|  56.3k|        if (args_count < 64) {
  ------------------
  |  Branch (2464:13): [True: 56.3k, False: 0]
  ------------------
 2465|  56.3k|            return;
 2466|  56.3k|        }
 2467|       |
 2468|      0|        auto last_args_count = args_count - 64;
 2469|      0|        for (auto it = visited_args_upper.begin();
 2470|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (2470:14): [True: 0, False: 0]
  ------------------
 2471|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (2471:17): [True: 0, False: 0]
  ------------------
 2472|      0|                return on_error({scan_error::invalid_format_string,
 2473|      0|                                 "Argument list not exhausted"});
 2474|      0|            }
 2475|      0|            last_args_count -= 8;
 2476|      0|        }
 2477|       |
 2478|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 2479|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (2479:13): [True: 0, False: 0]
  ------------------
 2480|      0|            return on_error({scan_error::invalid_format_string,
 2481|      0|                             "Argument list not exhausted"});
 2482|      0|        }
 2483|      0|    }
impl.cpp:_ZNK3scn2v412_GLOBAL__N_119format_handler_base9get_errorEv:
 2497|   526k|    {
 2498|   526k|        return error;
 2499|   526k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 2781|  62.2k|{
 2782|  62.2k|    const auto argcount = args.size();
 2783|  62.2k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2783:9): [True: 18, False: 62.2k]
  |  Branch (2783:60): [True: 18, False: 0]
  ------------------
 2784|     18|        auto arg = args.get(0);
 2785|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  | 1108|     18|    static_cast<    \
  |  | 1109|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2786|     18|    }
 2787|       |
 2788|  62.2k|    auto handler = format_handler<true, CharT>{
 2789|  62.2k|        ranges::subrange<const CharT*>{source.data(),
 2790|  62.2k|                                       source.data() + source.size()},
 2791|  62.2k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|  62.2k|    static_cast<    \
  |  | 1109|  62.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|  62.2k|    static_cast<    \
  |  | 1109|  62.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2792|  62.2k|    return vscan_parse_format_string(format, handler);
 2793|  62.2k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 2362|     18|{
 2363|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 2364|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2365|      0|                                             "Argument #0 not found");
 2366|      0|    }
 2367|       |
 2368|     18|    auto reader =
 2369|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 2370|     18|            ranges::subrange<const CharT*>{source.data(),
 2371|     18|                                           source.data() + source.size()},
 2372|     18|            SCN_MOVE(args), loc};
  ------------------
  |  | 1108|     18|    static_cast<    \
  |  | 1109|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2373|     18|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     10|    }                                                  \
  |  |  |  | 3957|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2374|      8|    return ranges::distance(source.data(), it);
 2375|     18|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 2781|   124k|{
 2782|   124k|    const auto argcount = args.size();
 2783|   124k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2783:9): [True: 18, False: 124k]
  |  Branch (2783:60): [True: 18, False: 0]
  ------------------
 2784|     18|        auto arg = args.get(0);
 2785|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  | 1108|     18|    static_cast<    \
  |  | 1109|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2786|     18|    }
 2787|       |
 2788|   124k|    auto handler = format_handler<true, CharT>{
 2789|   124k|        ranges::subrange<const CharT*>{source.data(),
 2790|   124k|                                       source.data() + source.size()},
 2791|   124k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|   124k|    static_cast<    \
  |  | 1109|   124k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|   124k|    static_cast<    \
  |  | 1109|   124k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2792|   124k|    return vscan_parse_format_string(format, handler);
 2793|   124k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2349|   124k|{
 2350|   124k|    if (format.size() != 2) {
  ------------------
  |  Branch (2350:9): [True: 118k, False: 6.44k]
  ------------------
 2351|   118k|        return false;
 2352|   118k|    }
 2353|  6.44k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (2353:12): [True: 126, False: 6.31k]
  |  Branch (2353:39): [True: 18, False: 108]
  ------------------
 2354|   124k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 2362|     18|{
 2363|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 2364|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2365|      0|                                             "Argument #0 not found");
 2366|      0|    }
 2367|       |
 2368|     18|    auto reader =
 2369|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 2370|     18|            ranges::subrange<const CharT*>{source.data(),
 2371|     18|                                           source.data() + source.size()},
 2372|     18|            SCN_MOVE(args), loc};
  ------------------
  |  | 1108|     18|    static_cast<    \
  |  | 1109|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2373|     18|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     10|    }                                                  \
  |  |  |  | 3957|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2374|      8|    return ranges::distance(source.data(), it);
 2375|     18|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSL_10locale_refEm:
 2625|   124k|        : format_handler_base{argcount},
 2626|   124k|          parse_ctx{source_tag<Source&&>, format},
 2627|   124k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1110|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|   124k|    static_cast<    \
  |  | 1109|   124k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|   124k|    static_cast<    \
  |  | 1109|   124k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2628|   124k|    {
 2629|   124k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSD_10locale_refE:
 2576|   124k|        : contiguous_ctx(source, args, loc)
 2577|   124k|    {
 2578|   124k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2766|   124k|{
 2767|   124k|    const auto beg = handler.get_ctx().begin();
 2768|   124k|    detail::parse_format_string<false>(format, handler);
 2769|   124k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1039|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 122k, False: 2.14k]
  |  |  ------------------
  ------------------
 2770|   122k|        return unexpected(err.error());
 2771|   122k|    }
 2772|  2.14k|    return ranges::distance(beg, handler.get_ctx().begin());
 2773|   124k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2750|  2.26M|    {
 2751|  2.26M|        return ctx.get();
 2752|  2.26M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 2581|  2.26M|    {
 2582|  2.26M|        return contiguous_ctx;
 2583|  2.26M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 2632|  93.5k|    {
 2633|   742k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2633:16): [True: 695k, False: 47.4k]
  ------------------
 2634|   695k|            auto it = get_ctx().begin();
 2635|   695k|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2635:17): [True: 630, False: 694k]
  ------------------
 2636|    630|                SCN_UNLIKELY_ATTR
 2637|    630|                return on_error(
 2638|    630|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2639|    630|            }
 2640|       |
 2641|   694k|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2642|   694k|                    detail::make_string_view_from_pointers(begin, end));
 2643|   694k|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2643:17): [True: 43.5k, False: 650k]
  ------------------
 2644|  43.5k|                SCN_UNLIKELY_ATTR
 2645|  43.5k|                return on_error({scan_error::invalid_format_string,
 2646|  43.5k|                                 "Invalid encoding in format string"});
 2647|  43.5k|            }
 2648|   650k|            else if (is_space) {
  ------------------
  |  Branch (2648:22): [True: 10.0k, False: 640k]
  ------------------
 2649|       |                // Skip all whitespace in input
 2650|  10.0k|                get_ctx().advance_to(
 2651|  10.0k|                    impl::read_while_classic_space(get_ctx().range()));
 2652|       |                // And, skip all whitespace in the format string
 2653|  10.0k|                auto begin_it = impl::read_while_classic_space(
 2654|  10.0k|                    detail::make_string_view_from_pointers(
 2655|  10.0k|                        detail::to_address(after_space_it),
 2656|  10.0k|                        detail::to_address(end)));
 2657|       |                // (-1 because of the for loop ++begin)
 2658|  10.0k|                begin = detail::to_address(begin_it) - 1;
 2659|  10.0k|                continue;
 2660|  10.0k|            }
 2661|       |
 2662|   640k|            if (*it != *begin) {
  ------------------
  |  Branch (2662:17): [True: 1.87k, False: 638k]
  ------------------
 2663|  1.87k|                SCN_UNLIKELY_ATTR
 2664|  1.87k|                return on_error({scan_error::invalid_literal,
 2665|  1.87k|                                 "Unexpected literal character in source"});
 2666|  1.87k|            }
 2667|   638k|            get_ctx().advance_to(ranges::next(it));
 2668|   638k|        }
 2669|  93.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE20on_replacement_fieldEmPKw:
 2699|  5.28k|    {
 2700|  5.28k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2701|  5.28k|        set_arg_as_visited(arg_id);
 2702|       |
 2703|  5.28k|        on_visit_scan_arg(
 2704|  5.28k|            impl::default_arg_reader<context_type>{
 2705|  5.28k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 2706|  5.28k|            arg);
 2707|  5.28k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEmNS1_14format_handlerILb1EwEEEEDaRT_T0_RT1_:
 2404|  21.4k|{
 2405|  21.4k|    auto arg = ctx.arg(id);
 2406|  21.4k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|  21.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.30k, False: 20.1k]
  |  |  ------------------
  ------------------
 2407|  1.30k|        handler.on_error("Failed to find argument with ID");
 2408|  1.30k|    }
 2409|  21.4k|    return arg;
 2410|  21.4k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEwEEEE:
 2683|  5.28k|    {
 2684|  5.28k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2684:13): [True: 224, False: 5.05k]
  |  Branch (2684:13): [True: 224, False: 5.05k]
  |  Branch (2684:29): [True: 0, False: 5.05k]
  ------------------
 2685|    224|            SCN_UNLIKELY_ATTR
 2686|    224|            return;
 2687|    224|        }
 2688|       |
 2689|  5.05k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1110|  5.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2690|  5.05k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|  5.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.50k, False: 1.55k]
  |  |  ------------------
  ------------------
 2691|  3.50k|            on_error(r.error());
 2692|  3.50k|        }
 2693|  1.55k|        else {
 2694|  1.55k|            get_ctx().advance_to(*r);
 2695|  1.55k|        }
 2696|  5.05k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 2672|  19.7k|    {
 2673|  19.7k|        return parse_ctx.next_arg_id();
 2674|  19.7k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEm:
 2676|  1.73k|    {
 2677|  1.73k|        parse_ctx.check_arg_id(id);
 2678|  1.73k|        return id;
 2679|  1.73k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 2712|  16.1k|    {
 2713|  16.1k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2714|  16.1k|        set_arg_as_visited(arg_id);
 2715|       |
 2716|  16.1k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2716:13): [True: 0, False: 16.1k]
  ------------------
 2717|      0|            parse_ctx.advance_to(begin);
 2718|      0|            on_visit_scan_arg(
 2719|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2720|      0|                    parse_ctx, get_custom_ctx()},
 2721|      0|                arg);
 2722|      0|            return parse_ctx.begin();
 2723|      0|        }
 2724|       |
 2725|  16.1k|        auto specs = detail::format_specs{};
 2726|  16.1k|        detail::specs_checker<specs_handler<context_type>> handler{
 2727|  16.1k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2728|  16.1k|            detail::get_arg_type(arg)};
 2729|       |
 2730|  16.1k|        begin = detail::parse_format_specs(begin, end, handler);
 2731|  16.1k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2731:13): [True: 2.04k, False: 14.1k]
  |  Branch (2731:29): [True: 468, False: 13.6k]
  ------------------
 2732|  2.51k|            SCN_UNLIKELY_ATTR
 2733|  2.51k|            on_error({scan_error::invalid_format_string,
 2734|  2.51k|                      "Missing '}' in format string"});
 2735|  2.51k|            return parse_ctx.begin();
 2736|  2.51k|        }
 2737|  13.6k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1039|  13.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 374, False: 13.2k]
  |  |  ------------------
  ------------------
 2738|    374|            return parse_ctx.begin();
 2739|    374|        }
 2740|  13.2k|        parse_ctx.advance_to(begin);
 2741|       |
 2742|  13.2k|        on_visit_scan_arg(
 2743|  13.2k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2744|  13.2k|                                           get_ctx().locale()},
 2745|  13.2k|            arg);
 2746|  13.2k|        return parse_ctx.begin();
 2747|  13.6k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERSB_:
 2422|  16.1k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 2423|  16.1k|    {
 2424|  16.1k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEwEEEE:
 2683|  13.2k|    {
 2684|  13.2k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2684:13): [True: 164, False: 13.0k]
  |  Branch (2684:13): [True: 164, False: 13.0k]
  |  Branch (2684:29): [True: 0, False: 13.0k]
  ------------------
 2685|    164|            SCN_UNLIKELY_ATTR
 2686|    164|            return;
 2687|    164|        }
 2688|       |
 2689|  13.0k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1110|  13.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2690|  13.0k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|  13.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 9.80k, False: 3.29k]
  |  |  ------------------
  ------------------
 2691|  9.80k|            on_error(r.error());
 2692|  9.80k|        }
 2693|  3.29k|        else {
 2694|  3.29k|            get_ctx().advance_to(*r);
 2695|  3.29k|        }
 2696|  13.0k|    }

_ZN3scn2v44impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1461|  3.46k|{
 1462|  3.46k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1463|       |
 1464|  3.46k|    if constexpr (sizeof(SourceCharT) == 1) {
 1465|       |        if constexpr (sizeof(DestCharT) == 2) {
 1466|       |            std::u32string tmp;
 1467|       |            transcode_to_string_impl_to32(src, tmp);
 1468|       |            return transcode_to_string_impl_32to16<false>(
 1469|       |                std::u32string_view{tmp}, dest);
 1470|       |        }
 1471|  3.46k|        else if constexpr (sizeof(DestCharT) == 4) {
 1472|  3.46k|            return transcode_to_string_impl_to32(src, dest);
 1473|  3.46k|        }
 1474|       |    }
 1475|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1476|       |        if constexpr (sizeof(DestCharT) == 1) {
 1477|       |            std::u32string tmp;
 1478|       |            transcode_to_string_impl_to32(src, tmp);
 1479|       |            return transcode_to_string_impl_32to8<false>(
 1480|       |                std::u32string_view{tmp}, dest);
 1481|       |        }
 1482|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1483|       |            return trasncode_to_string_impl_to32(src, dest);
 1484|       |        }
 1485|       |    }
 1486|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1487|       |        if constexpr (sizeof(DestCharT) == 1) {
 1488|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1489|       |        }
 1490|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1491|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1492|       |        }
 1493|       |    }
 1494|       |
 1495|  3.46k|    SCN_EXPECT(false);
  ------------------
  |  | 1104|  3.46k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.46k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1496|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1497|  3.46k|}
_ZN3scn2v44impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1354|  3.46k|{
 1355|  3.46k|    static_assert(sizeof(DestCharT) == 4);
 1356|       |
 1357|  3.46k|    auto it = src.begin();
 1358|   259k|    while (it != src.end()) {
  ------------------
  |  Branch (1358:12): [True: 256k, False: 3.46k]
  ------------------
 1359|   256k|        auto res = get_next_code_point(
 1360|   256k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1361|   256k|                                                                 src.end()));
 1362|   256k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  | 1039|   256k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 4.76k, False: 251k]
  |  |  ------------------
  ------------------
 1363|  4.76k|            dest.push_back(DestCharT{0xfffd});
 1364|  4.76k|        }
 1365|   251k|        else {
 1366|   251k|            dest.push_back(res.value);
 1367|   251k|        }
 1368|   256k|        it = detail::make_string_view_iterator(src, res.iterator);
 1369|   256k|    }
 1370|  3.46k|}
_ZN3scn2v44impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1278|   424k|{
 1279|   424k|    SCN_EXPECT(!input.empty());
  ------------------
  |  | 1104|   424k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   424k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1280|       |
 1281|   424k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1282|   424k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1039|   424k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 7.16k, False: 417k]
  |  |  ------------------
  ------------------
 1283|  7.16k|        return {get_start_for_next_code_point(input),
 1284|  7.16k|                detail::invalid_code_point};
 1285|  7.16k|    }
 1286|   417k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  | 1039|   417k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.00k, False: 416k]
  |  |  ------------------
  ------------------
 1287|  1.00k|        return {input.end(), detail::invalid_code_point};
 1288|  1.00k|    }
 1289|       |
 1290|   416k|    return {input.begin() + len,
 1291|   416k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1292|   417k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1264|  7.16k|{
 1265|  7.16k|    auto it = input.begin();
 1266|  25.2k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 23.7k, False: 1.44k]
  ------------------
 1267|  23.7k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 5.72k, False: 18.0k]
  ------------------
 1268|  5.72k|            break;
 1269|  5.72k|        }
 1270|  23.7k|    }
 1271|  7.16k|    return it;
 1272|  7.16k|}
_ZN3scn2v44impl11parse_errorC2ENS2_4codeE:
  807|  60.5k|    constexpr parse_error(code c) : m_code(c)
  808|  60.5k|    {
  809|  60.5k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  | 1089|  60.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  60.5k|    }
_ZN3scn2v44impleqENS1_11parse_errorES2_:
  822|  25.7k|    {
  823|  25.7k|        return a.m_code == b.m_code;
  824|  25.7k|    }
_ZN3scn2v44implneENS1_11parse_errorES2_:
  826|  5.08k|    {
  827|  5.08k|        return !(a == b);
  828|  5.08k|    }
_ZN3scn2v44impl16clocale_restorerC2Ei:
 1825|    106|    clocale_restorer(int cat) : m_category(cat)
 1826|    106|    {
 1827|    106|        const auto loc = std::setlocale(cat, nullptr);
 1828|    106|        std::strcpy(m_locbuf, loc);
 1829|    106|    }
_ZN3scn2v44impl16clocale_restorerD2Ev:
 1831|    106|    {
 1832|       |        // Restore locale to what it was before
 1833|    106|        std::setlocale(m_category, m_locbuf);
 1834|    106|    }
_ZN3scn2v44impl25set_clocale_classic_guardC2Ei:
 1854|    106|    set_clocale_classic_guard(int cat) : m_restorer(cat)
 1855|    106|    {
 1856|    106|        std::setlocale(cat, "C");
 1857|    106|    }
_ZN3scn2v44impl20reader_error_handler8on_errorEPKc:
 3077|  19.8k|    {
 3078|  19.8k|        SCN_UNLIKELY_ATTR
 3079|  19.8k|        m_msg = msg;
 3080|  19.8k|    }
_ZNK3scn2v44impl20reader_error_handlercvbEv:
 3082|  41.3k|    {
 3083|  41.3k|        return m_msg == nullptr;
 3084|  41.3k|    }
_ZN3scn2v44impl17float_reader_baseC2Ej:
 3718|  1.45k|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v44impl22nonascii_specs_handler17on_charset_singleEDi:
 5079|   803k|    {
 5080|   803k|        on_charset_range(cp, cp + 1);
 5081|   803k|    }
_ZN3scn2v44impl22nonascii_specs_handler16on_charset_rangeEDiDi:
 5084|   808k|    {
 5085|   808k|        if (end <= 127) {
  ------------------
  |  Branch (5085:13): [True: 438k, False: 370k]
  ------------------
 5086|   438k|            return;
 5087|   438k|        }
 5088|       |
 5089|  70.5M|        for (auto& elem : extra_ranges) {
  ------------------
  |  Branch (5089:25): [True: 70.5M, False: 364k]
  ------------------
 5090|       |            // TODO: check for overlap
 5091|  70.5M|            if (elem.first == end) {
  ------------------
  |  Branch (5091:17): [True: 816, False: 70.5M]
  ------------------
 5092|    816|                elem.first = begin;
 5093|    816|                return;
 5094|    816|            }
 5095|       |
 5096|  70.5M|            if (elem.second == begin) {
  ------------------
  |  Branch (5096:17): [True: 5.20k, False: 70.5M]
  ------------------
 5097|  5.20k|                elem.second = end;
 5098|  5.20k|                return;
 5099|  5.20k|            }
 5100|  70.5M|        }
 5101|       |
 5102|   364k|        extra_ranges.push_back(std::make_pair(begin, end));
 5103|   364k|    }
_ZNK3scn2v44impl22nonascii_specs_handler19on_charset_invertedEv:
 5106|  1.05k|    {
 5107|       |        // no-op
 5108|  1.05k|    }
_ZNK3scn2v44impl22nonascii_specs_handler9get_errorEv:
 5121|   818k|    {
 5122|   818k|        return err;
 5123|   818k|    }
_ZN3scn2v44impl16bool_reader_baseC2Ej:
 5435|  1.81k|    constexpr bool_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v44impl14is_ascii_spaceEc:
  457|  38.8k|{
  458|  38.8k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  38.8k|        static_cast<unsigned char>(ch))];
  460|  38.8k|}
_ZN3scn2v44impl13is_ascii_charEc:
  468|   554k|{
  469|   554k|    return static_cast<unsigned char>(ch) <= 127;
  470|   554k|}
_ZN3scn2v44impl13is_ascii_charEw:
  473|  4.14k|{
  474|  4.14k|#if WCHAR_MIN < 0
  475|  4.14k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (475:12): [True: 4.11k, False: 30]
  |  Branch (475:23): [True: 3.95k, False: 162]
  ------------------
  476|       |#else
  477|       |    return ch <= 127;
  478|       |#endif
  479|  4.14k|}
_ZN3scn2v44impl13is_ascii_charEDi:
  482|   640k|{
  483|   640k|    return cp <= 127;
  484|   640k|}
_ZN3scn2v44impl16has_byte_greaterEmh:
  538|  34.0k|{
  539|  34.0k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  34.0k|}
_ZN3scn2v44implntENS1_9eof_errorE:
  783|  53.1k|{
  784|  53.1k|    return e != eof_error::good;
  785|  53.1k|}
_ZN3scn2v44impl19make_eof_scan_errorENS1_9eof_errorE:
  797|    354|{
  798|    354|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  | 1104|    354|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    354|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|    354|    return scan_error{scan_error::end_of_input, "EOF"};
  800|    354|}
_ZN3scn2v44impl20make_eof_parse_errorENS1_9eof_errorE:
  844|  1.09k|{
  845|  1.09k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  | 1104|  1.09k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.09k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|  1.09k|    return parse_error::eof;
  847|  1.09k|}
_ZN3scn2v44impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  5.08k|{
  854|  5.08k|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 5.08k]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  5.08k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 142, False: 4.94k]
  ------------------
  859|    142|        return detail::unexpected_scan_error(scan_error::end_of_input, "EOF");
  860|    142|    }
  861|       |
  862|  4.94k|    return detail::unexpected_scan_error(code, msg);
  863|  5.08k|}
_ZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  5.12k|{
  868|  5.12k|    return [code, msg](parse_error err) {
  869|  5.12k|        assert(err != parse_error::good);
  870|  5.12k|        return make_scan_error_from_parse_error(err, code, msg).error();
  871|  5.12k|    };
  872|  5.12k|}
_ZN3scn2v44impl17fast_streq_nocaseEPKcS3_m:
 2352|  3.75k|{
 2353|  3.75k|    unsigned char running_diff{0};
 2354|  13.1k|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2354:24): [True: 9.36k, False: 3.75k]
  ------------------
 2355|  9.36k|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2356|  9.36k|    }
 2357|  3.75k|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2357:12): [True: 0, False: 3.75k]
  |  Branch (2357:33): [True: 0, False: 3.75k]
  ------------------
 2358|  3.75k|}
_ZN3scn2v44impl32calculate_text_width_for_fmt_v10EDi:
 2435|   190k|{
 2436|   190k|    if (cp >= 0x1100 &&
  ------------------
  |  Branch (2436:9): [True: 46.9k, False: 144k]
  ------------------
 2437|   190k|        (cp <= 0x115f ||  // Hangul Jamo init. consonants
  ------------------
  |  Branch (2437:10): [True: 224, False: 46.6k]
  ------------------
 2438|  46.9k|         cp == 0x2329 ||  // LEFT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2438:10): [True: 108, False: 46.5k]
  ------------------
 2439|  46.9k|         cp == 0x232a ||  // RIGHT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2439:10): [True: 72, False: 46.5k]
  ------------------
 2440|       |         // CJK ... Yi except IDEOGRAPHIC HALF FILL SPACE:
 2441|  46.9k|         (cp >= 0x2e80 && cp <= 0xa4cf && cp != 0x303f) ||
  ------------------
  |  Branch (2441:11): [True: 18.4k, False: 28.1k]
  |  Branch (2441:27): [True: 2.80k, False: 15.5k]
  |  Branch (2441:43): [True: 1.73k, False: 1.06k]
  ------------------
 2442|  46.9k|         (cp >= 0xac00 && cp <= 0xd7a3) ||    // Hangul Syllables
  ------------------
  |  Branch (2442:11): [True: 15.5k, False: 29.1k]
  |  Branch (2442:27): [True: 248, False: 15.3k]
  ------------------
 2443|  46.9k|         (cp >= 0xf900 && cp <= 0xfaff) ||    // CJK Compatibility Ideographs
  ------------------
  |  Branch (2443:11): [True: 15.2k, False: 29.2k]
  |  Branch (2443:27): [True: 240, False: 15.0k]
  ------------------
 2444|  46.9k|         (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms
  ------------------
  |  Branch (2444:11): [True: 15.0k, False: 29.2k]
  |  Branch (2444:27): [True: 462, False: 14.5k]
  ------------------
 2445|  46.9k|         (cp >= 0xfe30 && cp <= 0xfe6f) ||    // CJK Compatibility Forms
  ------------------
  |  Branch (2445:11): [True: 14.5k, False: 29.2k]
  |  Branch (2445:27): [True: 214, False: 14.3k]
  ------------------
 2446|  46.9k|         (cp >= 0xff00 && cp <= 0xff60) ||    // Fullwidth Forms
  ------------------
  |  Branch (2446:11): [True: 14.3k, False: 29.2k]
  |  Branch (2446:27): [True: 206, False: 14.1k]
  ------------------
 2447|  46.9k|         (cp >= 0xffe0 && cp <= 0xffe6) ||    // Fullwidth Forms
  ------------------
  |  Branch (2447:11): [True: 14.1k, False: 29.2k]
  |  Branch (2447:27): [True: 284, False: 13.8k]
  ------------------
 2448|  46.9k|         (cp >= 0x20000 && cp <= 0x2fffd) ||  // CJK
  ------------------
  |  Branch (2448:11): [True: 13.6k, False: 29.4k]
  |  Branch (2448:28): [True: 442, False: 13.1k]
  ------------------
 2449|  46.9k|         (cp >= 0x30000 && cp <= 0x3fffd) ||
  ------------------
  |  Branch (2449:11): [True: 13.1k, False: 29.4k]
  |  Branch (2449:28): [True: 292, False: 12.8k]
  ------------------
 2450|       |         // Miscellaneous Symbols and Pictographs + Emoticons:
 2451|  46.9k|         (cp >= 0x1f300 && cp <= 0x1f64f) ||
  ------------------
  |  Branch (2451:11): [True: 13.0k, False: 29.3k]
  |  Branch (2451:28): [True: 78, False: 12.9k]
  ------------------
 2452|       |         // Supplemental Symbols and Pictographs:
 2453|  46.9k|         (cp >= 0x1f900 && cp <= 0x1f9ff))) {
  ------------------
  |  Branch (2453:11): [True: 12.9k, False: 29.3k]
  |  Branch (2453:28): [True: 72, False: 12.8k]
  ------------------
 2454|  4.67k|        return 2;
 2455|  4.67k|    }
 2456|   186k|    return 1;
 2457|   190k|}
_ZN3scn2v44impl26calculate_valid_text_widthEDi:
 2460|   124k|{
 2461|   124k|    return calculate_text_width_for_fmt_v10(cp);
 2462|   124k|}
_ZN3scn2v44impl20calculate_text_widthEDi:
 2475|    256|{
 2476|    256|    return calculate_text_width_for_fmt_v10(cp);
 2477|    256|}
_ZN3scn2v44impl11char_to_intEc:
 3271|  18.3k|{
 3272|  18.3k|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3273|  18.3k|}
_ZN3scn2v44impl11char_to_intEw:
 3275|  9.30k|{
 3276|  9.30k|#if WCHAR_MIN < 0
 3277|  9.30k|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3277:9): [True: 9.30k, False: 0]
  |  Branch (3277:20): [True: 9.19k, False: 112]
  ------------------
 3278|       |#else
 3279|       |    if (ch <= 255) {
 3280|       |#endif
 3281|  9.19k|        return char_to_int(static_cast<char>(ch));
 3282|  9.19k|    }
 3283|    112|    return 255;
 3284|  9.30k|}
_ZN3scn2v44impl16make_regex_flagsENS0_6detail11regex_flagsE:
 4404|    456|{
 4405|    456|    RE2::Options opt{RE2::Quiet};
 4406|    456|    std::string_view stringflags{};
 4407|       |
 4408|    456|    if ((flags & detail::regex_flags::multiline) == detail::regex_flags::none) {
  ------------------
  |  Branch (4408:9): [True: 444, False: 12]
  ------------------
 4409|    444|        stringflags = "(?m)";
 4410|    444|    }
 4411|    456|    if ((flags & detail::regex_flags::singleline) !=
  ------------------
  |  Branch (4411:9): [True: 6, False: 450]
  ------------------
 4412|    456|        detail::regex_flags::none) {
 4413|      6|        opt.set_dot_nl(true);
 4414|      6|    }
 4415|    456|    if ((flags & detail::regex_flags::nocase) != detail::regex_flags::none) {
  ------------------
  |  Branch (4415:9): [True: 6, False: 450]
  ------------------
 4416|      6|        opt.set_case_sensitive(false);
 4417|      6|    }
 4418|    456|    if ((flags & detail::regex_flags::nocapture) != detail::regex_flags::none) {
  ------------------
  |  Branch (4418:9): [True: 6, False: 450]
  ------------------
 4419|      6|        opt.set_never_capture(true);
 4420|      6|    }
 4421|       |
 4422|    456|    return {opt, stringflags};
 4423|    456|}
_ZN3scn2v44impl27get_unescaped_regex_patternENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4733|  1.17k|{
 4734|  1.17k|    std::string result{pattern};
 4735|  9.03k|    for (size_t n = 0; (n = result.find("\\/", n)) != std::string::npos;) {
  ------------------
  |  Branch (4735:24): [True: 7.85k, False: 1.17k]
  ------------------
 4736|  7.85k|        result.replace(n, 2, "/");
 4737|  7.85k|        ++n;
 4738|  7.85k|    }
 4739|  1.17k|    return result;
 4740|  1.17k|}
_ZN3scn2v44impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6097|  9.46k|{
 6098|  9.46k|    if (specs.width != 0) {
  ------------------
  |  Branch (6098:9): [True: 2.25k, False: 7.20k]
  ------------------
 6099|  2.25k|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6099:13): [True: 942, False: 1.31k]
  ------------------
 6100|    942|            return detail::unexpected_scan_error(
 6101|    942|                scan_error::length_too_short,
 6102|    942|                "Scanned value too narrow, width did not exceed what "
 6103|    942|                "was specified in the format string");
 6104|    942|        }
 6105|  2.25k|    }
 6106|  8.51k|    if (specs.precision != 0) {
  ------------------
  |  Branch (6106:9): [True: 3.08k, False: 5.43k]
  ------------------
 6107|       |        // Ensured by take_width_view
 6108|  3.08k|        SCN_ENSURE(prefix_width + value_width + postfix_width <=
  ------------------
  |  | 1105|  3.08k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6109|  3.08k|                   specs.precision);
 6110|  3.08k|    }
 6111|  8.51k|    return {};
 6112|  8.51k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  65.2k|    {
  304|  65.2k|        ranges::advance(x, n);
  305|  65.2k|        return x;
  306|  65.2k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  65.2k|    {
  268|  65.2k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  65.2k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   170k|    {
  151|   170k|        i += n;
  152|   170k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  59.1k|    {
  108|  59.1k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  59.1k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  59.1k|    {
   87|  59.1k|        return s - i;
   88|  59.1k|    }
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  6.54k|    {
  304|  6.54k|        ranges::advance(x, n);
  305|  6.54k|        return x;
  306|  6.54k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  6.54k|    {
  268|  6.54k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  6.54k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  6.54k|    {
  151|  6.54k|        i += n;
  152|  6.54k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  2.59k|    {
  108|  2.59k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  2.59k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  2.59k|    {
   87|  2.59k|        return s - i;
   88|  2.59k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5beginEv:
 3024|   184k|    {
 3025|   184k|        return m_current;
 3026|   184k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5beginEv:
 3024|   850k|    {
 3025|   850k|        return m_current;
 3026|   850k|    }
_ZN3scn2v44impl16char_reader_baseIcE11check_specsERKNS0_6detail12format_specsE:
 5710|  3.12k|    {
 5711|  3.12k|        reader_error_handler eh{};
 5712|       |        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
 5713|       |            detail::check_code_point_type_specs(specs, eh);
 5714|       |        }
 5715|  3.12k|        else {
 5716|  3.12k|            detail::check_char_type_specs(specs, eh);
 5717|  3.12k|        }
 5718|  3.12k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1039|  3.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.42k, False: 696]
  |  |  ------------------
  ------------------
 5719|  2.42k|            return detail::unexpected_scan_error(
 5720|  2.42k|                scan_error::invalid_format_string, eh.m_msg);
 5721|  2.42k|        }
 5722|    696|        return {};
 5723|  3.12k|    }
_ZNK3scn2v44impl12function_refIFbcES3_EclEc:
  762|  21.4k|    {
  763|  21.4k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1110|  21.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  21.4k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  2.96k|        : m_fptr([](storage fn,
  743|  2.96k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.96k|              cvref<T> obj = *get<T>(fn);
  745|  2.96k|              if constexpr (std::is_void_v<R>) {
  746|  2.96k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.96k|              }
  748|  2.96k|              else {
  749|  2.96k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.96k|              }
  751|  2.96k|          }),
  752|  2.96k|          m_storage(std::addressof(f))
  753|  2.96k|    {
  754|  2.96k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  7.48k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.48k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  7.48k|              else {
  749|  7.48k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.48k|              }
  751|  7.48k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  7.48k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  7.48k|        else if constexpr (std::is_object_v<T>) {
  688|  7.48k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  7.48k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  2.96k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.96k|        {
  662|  2.96k|        }
_ZNK3scn2v44impl12function_refIFbDiES3_EclEDi:
  762|  1.43M|    {
  763|  1.43M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1110|  1.43M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.43M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  37.0k|        : m_fptr([](storage fn,
  743|  37.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  37.0k|              cvref<T> obj = *get<T>(fn);
  745|  37.0k|              if constexpr (std::is_void_v<R>) {
  746|  37.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  37.0k|              }
  748|  37.0k|              else {
  749|  37.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  37.0k|              }
  751|  37.0k|          }),
  752|  37.0k|          m_storage(std::addressof(f))
  753|  37.0k|    {
  754|  37.0k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|   676k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   676k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   676k|              else {
  749|   676k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   676k|              }
  751|   676k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|   676k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   676k|        else if constexpr (std::is_object_v<T>) {
  688|   676k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   676k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  37.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  37.0k|        {
  662|  37.0k|        }
_ZNK3scn2v44impl16char_reader_baseIcE19skip_ws_before_readEv:
 5705|  1.96k|    {
 5706|  1.96k|        return false;
 5707|  1.96k|    }
_ZZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  5.08k|    return [code, msg](parse_error err) {
  869|  5.08k|        assert(err != parse_error::good);
  870|  5.08k|        return make_scan_error_from_parse_error(err, code, msg).error();
  871|  5.08k|    };
_ZN3scn2v44impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1878|     66|    {
 1879|     66|        auto stdloc = loc.get<std::locale>();
 1880|     66|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1881|     66|        grouping = numpunct.grouping();
 1882|     66|        thousands_sep =
 1883|     66|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1883:13): [True: 0, False: 66]
  ------------------
 1884|     66|        decimal_point = numpunct.decimal_point();
 1885|     66|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1815|     94|{
 1816|     94|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1816:9): [True: 94, False: 0]
  ------------------
 1817|     94|        return std::use_facet<Facet>(stdloc);
 1818|     94|    }
 1819|      0|    stdloc = std::locale(stdloc, new Facet{});
 1820|      0|    return std::use_facet<Facet>(stdloc);
 1821|     94|}
_ZN3scn2v44impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2481|  43.5k|{
 2482|  43.5k|    size_t count{0};
 2483|  43.5k|    for_each_code_point(input, [&count](char32_t cp) {
 2484|  43.5k|        count += calculate_text_width_for_fmt_v10(cp);
 2485|  43.5k|    });
 2486|  43.5k|    return count;
 2487|  43.5k|}
_ZN3scn2v44impl19for_each_code_pointIcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1544|  43.5k|{
 1545|       |    // TODO: Could be optimized by being eager
 1546|  43.5k|    auto it = input.begin();
 1547|  97.8k|    while (it != input.end()) {
  ------------------
  |  Branch (1547:12): [True: 54.2k, False: 43.5k]
  ------------------
 1548|  54.2k|        auto res = get_next_code_point(
 1549|  54.2k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1550|  54.2k|        cb(res.value);
 1551|  54.2k|        it = detail::make_string_view_iterator(input, res.iterator);
 1552|  54.2k|    }
 1553|  43.5k|}
_ZNK3scn2v44impl12function_refIFvDiES3_EclEDi:
  762|  65.9k|    {
  763|  65.9k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1110|  65.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  65.9k|    }
_ZN3scn2v44impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_:
  742|  43.5k|        : m_fptr([](storage fn,
  743|  43.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  43.5k|              cvref<T> obj = *get<T>(fn);
  745|  43.5k|              if constexpr (std::is_void_v<R>) {
  746|  43.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  43.5k|              }
  748|  43.5k|              else {
  749|  43.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  43.5k|              }
  751|  43.5k|          }),
  752|  43.5k|          m_storage(std::addressof(f))
  753|  43.5k|    {
  754|  43.5k|    }
_ZZN3scn2v44impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  743|  54.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  54.2k|              cvref<T> obj = *get<T>(fn);
  745|  54.2k|              if constexpr (std::is_void_v<R>) {
  746|  54.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|       |              else {
  749|       |                  return obj(static_cast<decltype(args)>(args)...);
  750|       |              }
  751|  54.2k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|  54.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  54.2k|        else if constexpr (std::is_object_v<T>) {
  688|  54.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  54.2k|    }
_ZZN3scn2v44impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2483|  54.2k|    for_each_code_point(input, [&count](char32_t cp) {
 2484|  54.2k|        count += calculate_text_width_for_fmt_v10(cp);
 2485|  54.2k|    });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vIS9_EEvE4typeELPv0EEEPS9_:
  660|  43.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  43.5k|        {
  662|  43.5k|        }
_ZNK3scn2v44impl24contiguous_range_factoryIcE4viewEv:
 1680|  4.75k|    {
 1681|  4.75k|        return m_view;
 1682|  4.75k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcED2Ev:
 1670|  5.09k|    ~contiguous_range_factory() = default;
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E14multibyte_leftEv:
 2553|  32.8k|    {
 2554|  32.8k|        return m_multibyte_left;
 2555|  32.8k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E22is_current_double_wideEv:
 2558|  8.97k|    {
 2559|  8.97k|        assert(count() != 0 || multibyte_left() != 0);
 2560|  8.97k|        return _get_width_at_current_cp_start(_get_cp_length_at_current()) == 2;
 2561|  8.97k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E30_get_width_at_current_cp_startEl:
 2785|   104k|    {
 2786|   104k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  | 1039|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.93k, False: 102k]
  |  |  ------------------
  ------------------
 2787|  1.93k|            return 0;
 2788|  1.93k|        }
 2789|       |
 2790|   102k|        if (cplen == 1) {
  ------------------
  |  Branch (2790:13): [True: 66.5k, False: 36.3k]
  ------------------
 2791|  66.5k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  | 1104|  66.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  66.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2792|  66.5k|            auto cp = static_cast<char32_t>(*m_current);
 2793|  66.5k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2794|  66.5k|        }
 2795|       |
 2796|  36.3k|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2797|  36.3k|                                           cplen);
 2798|  36.3k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|  36.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 422, False: 35.9k]
  |  |  ------------------
  ------------------
 2799|    422|            return 0;
 2800|    422|        }
 2801|       |
 2802|  35.9k|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2803|  35.9k|        return static_cast<difference_type>(
 2804|  35.9k|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2805|  36.3k|    }
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1955|  39.0k|{
 1956|  39.0k|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1104|  39.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  39.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|  39.0k|    if constexpr (ranges::sized_range<Range>) {
 1959|  39.0k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|  39.0k|        if (sz < count) {
  ------------------
  |  Branch (1960:13): [True: 530, False: 38.5k]
  ------------------
 1961|    530|            return unexpected(eof_error::eof);
 1962|    530|        }
 1963|       |
 1964|  38.5k|        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|       |    else {
 1967|       |        auto it = range.begin();
 1968|       |        if (guaranteed_minimum_size(range) >= count) {
 1969|       |            return ranges::next(it, count);
 1970|       |        }
 1971|       |
 1972|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1973|       |            if (it == range.end()) {
 1974|       |                return unexpected(eof_error::eof);
 1975|       |            }
 1976|       |        }
 1977|       |
 1978|       |        return it;
 1979|       |    }
 1980|  39.0k|}
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E25_get_cp_length_at_currentEv:
 2779|   104k|    {
 2780|   104k|        return static_cast<difference_type>(
 2781|   104k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2782|   104k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
 2564|   178k|    {
 2565|   178k|        return *m_current;
 2566|   178k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EppEv:
 2573|   198k|    {
 2574|   198k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  | 1104|   198k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   198k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2575|   198k|        _increment_current();
 2576|   198k|        return *this;
 2577|   198k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E18_increment_currentEv:
 2808|   198k|    {
 2809|   198k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2809:13): [True: 95.8k, False: 102k]
  ------------------
 2810|  95.8k|            auto cplen = _get_cp_length_at_current();
 2811|  95.8k|            m_multibyte_left = cplen - 1;
 2812|  95.8k|            m_count -= _get_width_at_current_cp_start(cplen);
 2813|  95.8k|        }
 2814|   102k|        else {
 2815|   102k|            --m_multibyte_left;
 2816|   102k|        }
 2817|       |
 2818|   198k|        ++m_current;
 2819|   198k|    }
_ZN3scn2v44impl27counted_width_iterator_implneIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2669|   114k|    {
 2670|   114k|        return !(a == b);
 2671|   114k|    }
_ZN3scn2v44impl27counted_width_iterator_impleqIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2661|   127k|    {
 2662|   127k|        return a.m_current == b.m_current;
 2663|   127k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
 2568|  16.1k|    {
 2569|  16.1k|        return *m_current;
 2570|  16.1k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeE:
  267|  1.68k|    {
  268|  1.68k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.68k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISE_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|  1.68k|    {
  161|  1.68k|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|  1.68k|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 0, False: 1.68k]
  ------------------
  164|      0|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 0, False: 0]
  ------------------
  165|      0|                ++i;
  166|      0|            }
  167|      0|        }
  168|  1.68k|        else {
  169|  1.68k|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 1.68k]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|  1.68k|        }
  173|  1.68k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEcE8is_validEv:
 1988|  38.8k|    {
 1989|  38.8k|        return !codepoint.empty();
 1990|  38.8k|    }
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EESB_EEEEDaOT_:
 1781|  2.44k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|       |                  ranges::sized_range<Range>) {
 1785|       |        return string_view_wrapper{SCN_FWD(range)};
 1786|       |    }
 1787|  2.44k|    else {
 1788|  2.44k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  | 1110|  2.44k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1789|  2.44k|    }
 1790|  2.44k|}
_ZN3scn2v44impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSH_:
 1635|  2.44k|    {
 1636|  2.44k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1110|  2.44k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1637|  2.44k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEvOT_:
 1719|  2.44k|    {
 1720|  2.44k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|  2.44k|        else {
 1753|  2.44k|            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|  2.44k|            if constexpr (ranges::common_range<Range>) {
 1758|  2.44k|                std::copy(ranges::begin(range), ranges::end(range),
 1759|  2.44k|                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|  2.44k|            m_view = string_view_type{str};
 1768|  2.44k|        }
 1769|  2.44k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EC2ES5_S5_l:
 2513|  29.0k|        : m_current(x), m_end(s), m_count(n)
 2514|  29.0k|    {
 2515|  29.0k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E4baseEv:
 2545|   195k|    {
 2546|   195k|        return m_current;
 2547|   195k|    }
_ZNK3scn2v44impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2974|  12.8k|    {
 2975|  12.8k|        return take_width_view{r, n};
 2976|  12.8k|    }
_ZN3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2ERKS9_l:
 2942|  12.8k|        : m_base(base), m_count(count)
 2943|  12.8k|    {
 2944|  12.8k|    }
_ZN3scn2v44impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEC2ERKS9_:
 2854|  12.8k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v44impl20reader_impl_for_charIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERcNSN_10locale_refE:
 5750|    404|    {
 5751|    404|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5751:13): [True: 368, False: 36]
  ------------------
 5752|    404|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5752:13): [True: 0, False: 36]
  ------------------
 5753|    368|            return read_default(range, value, loc);
 5754|    368|        }
 5755|       |
 5756|     36|        reader_impl_for_int<CharT> reader{};
 5757|     36|        signed char tmp_value{};
 5758|     36|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5759|     36|        value = static_cast<signed char>(value);
 5760|     36|        return ret;
 5761|    404|    }
_ZN3scn2v44impl20reader_impl_for_charIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RcNS0_6detail10locale_refE:
 5732|    368|    {
 5733|    368|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|    368|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5734|    368|        if constexpr (std::is_same_v<CharT, char>) {
 5735|    368|            return code_unit_reader<char>{}.read(range, value);
 5736|       |        }
 5737|       |        else {
 5738|       |            SCN_UNUSED(range);
 5739|       |            SCN_EXPECT(false);
 5740|       |            SCN_UNREACHABLE;
 5741|       |        }
 5742|    368|    }
_ZN3scn2v44impl16code_unit_readerIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rc:
 5650|    368|    {
 5651|    368|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3958|    368|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    368|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    368|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    368|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 368]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    368|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    368|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5652|    368|        ch = *range.begin();
 5653|    368|        return it;
 5654|    368|    }
_ZN3scn2v44impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1944|  2.68k|{
 1945|  2.68k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  2.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 2.68k]
  |  |  ------------------
  ------------------
 1946|      0|        return unexpected(e);
 1947|      0|    }
 1948|       |
 1949|  2.68k|    return ranges::next(range.begin());
 1950|  2.68k|}
_ZN3scn2v44impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_9eof_errorET_:
  950|  2.68k|{
  951|  2.68k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1039|  2.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 2.68k]
  |  |  ------------------
  ------------------
  952|      0|        return eof_error::eof;
  953|      0|    }
  954|  2.68k|    return eof_error::good;
  955|  2.68k|}
_ZN3scn2v44impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  944|  2.68k|{
  945|  2.68k|    return is_range_eof(r.begin(), r.end());
  946|  2.68k|}
_ZN3scn2v44impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  928|  41.5k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  41.5k|    {
  938|  41.5k|        return begin == end;
  939|  41.5k|    }
  940|  41.5k|}
_ZN3scn2v44impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2910|   186k|        {
 2911|   186k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2911:21): [True: 5.91k, False: 180k]
  |  Branch (2911:39): [True: 1.17k, False: 4.74k]
  ------------------
 2912|   186k|                   y.base() == x.m_end ||
  ------------------
  |  Branch (2912:20): [True: 1.60k, False: 183k]
  ------------------
 2913|   186k|                   (y.count() == 1 && y.multibyte_left() == 0 &&
  ------------------
  |  Branch (2913:21): [True: 26.9k, False: 156k]
  |  Branch (2913:39): [True: 8.97k, False: 17.9k]
  ------------------
 2914|   183k|                    y.is_current_double_wide());
  ------------------
  |  Branch (2914:21): [True: 130, False: 8.84k]
  ------------------
 2915|   186k|        }
_ZNK3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE3endEv:
 2958|  90.6k|    {
 2959|  90.6k|        return sentinel<true>{m_base.get().end()};
 2960|  90.6k|    }
_ZNK3scn2v44impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvE3getEv:
 2857|   148k|    {
 2858|   148k|        return view;
 2859|   148k|    }
_ZN3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE8sentinelILb1EEC2ES8_:
 2891|  90.6k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  | 1108|  90.6k|    static_cast<    \
  |  | 1109|  90.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZNK3scn2v46ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|  2.72k|    {
  296|  2.72k|        ++x;
  297|  2.72k|        return x;
  298|  2.72k|    }
_ZNK3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 2952|  29.0k|    {
 2953|  29.0k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2954|  29.0k|                                      m_count};
 2955|  29.0k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEaEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3621|     36|    {
 3622|     36|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3958|     36|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|     36|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|     36|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|     36|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 36]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|     36|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     36|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3623|     36|                                   .transform_error(make_eof_scan_error));
 3624|       |
 3625|     36|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3625:13): [True: 0, False: 36]
  ------------------
 3626|       |            if constexpr (!std::is_signed_v<T>) {
 3627|       |                return detail::unexpected_scan_error(
 3628|       |                    scan_error::invalid_scanned_value,
 3629|       |                    "Unexpected '-' sign when parsing an "
 3630|       |                    "unsigned value");
 3631|       |            }
 3632|      0|            else {
 3633|      0|                if (specs.type ==
  ------------------
  |  Branch (3633:21): [True: 0, False: 0]
  ------------------
 3634|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3635|      0|                    return detail::unexpected_scan_error(
 3636|      0|                        scan_error::invalid_scanned_value,
 3637|      0|                        "'u'-option disallows negative values");
 3638|      0|                }
 3639|      0|            }
 3640|      0|        }
 3641|       |
 3642|     36|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3642:13): [True: 0, False: 36]
  ------------------
 3643|      0|            value = T{0};
 3644|      0|            return std::next(prefix_result.iterator);
 3645|      0|        }
 3646|       |
 3647|     36|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1038|     36|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 36, False: 0]
  |  |  ------------------
  ------------------
 3648|     36|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|     36|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|     36|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|     36|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|     36|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 36, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     36|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     36|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     36|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     36|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     36|    }                                                  \
  |  |  |  | 3957|     36|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      0|                    parse_integer_digits_without_thsep(
 3650|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3651|      0|                        prefix_result.parsed_base));
 3652|       |
 3653|      0|            auto buf = make_contiguous_buffer(
 3654|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3655|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3656|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3657|      0|                                        prefix_result.parsed_base));
 3658|       |
 3659|      0|            return ranges::next(
 3660|      0|                prefix_result.iterator,
 3661|      0|                ranges::distance(buf.view().begin(), result_it));
 3662|      0|        }
 3663|       |
 3664|      0|        auto locale_options =
 3665|       |#if SCN_DISABLE_LOCALE
 3666|       |            localized_number_formatting_options<CharT>{};
 3667|       |#else
 3668|      0|            localized_number_formatting_options<CharT>{loc};
 3669|      0|#endif
 3670|       |
 3671|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3672|      0|                parse_integer_digits_with_thsep(
 3673|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3674|      0|                    prefix_result.parsed_base, locale_options));
 3675|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3676|      0|            parse_digits_result;
 3677|       |
 3678|      0|        auto nothsep_source_view =
 3679|      0|            std::basic_string_view<CharT>{nothsep_source};
 3680|      0|        SCN_TRY(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3681|      0|            nothsep_source_it,
 3682|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3683|      0|                                prefix_result.parsed_base));
 3684|       |
 3685|      0|        return ranges::next(
 3686|      0|            prefix_result.iterator,
 3687|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3688|      0|                ranges::ssize(thsep_indices));
 3689|      0|    }
_ZN3scn2v44impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3408|  1.15k|{
 3409|  1.15k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3958|  1.15k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.15k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.15k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 1.15k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  1.15k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3410|  1.15k|    auto [base_prefix_begin_it, sign] = sign_result;
 3411|       |
 3412|  1.15k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3413|  1.15k|        parse_integer_base_prefix(
 3414|  1.15k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3415|       |
 3416|  1.15k|    if (parsed_zero) {
  ------------------
  |  Branch (3416:9): [True: 0, False: 1.15k]
  ------------------
 3417|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3417:13): [True: 0, False: 0]
  |  Branch (3417:13): [True: 0, False: 0]
  ------------------
 3418|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3418:13): [True: 0, False: 0]
  ------------------
 3419|      0|            digits_begin_it = base_prefix_begin_it;
 3420|      0|        }
 3421|      0|        else {
 3422|      0|            parsed_zero = false;
 3423|      0|        }
 3424|      0|    }
 3425|  1.15k|    else {
 3426|  1.15k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3426:13): [True: 0, False: 1.15k]
  |  Branch (3426:13): [True: 1.15k, False: 0]
  ------------------
 3427|  1.15k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3427:13): [True: 1.15k, False: 0]
  ------------------
 3428|  1.15k|            digits_begin_it = base_prefix_begin_it;
 3429|  1.15k|        }
 3430|  1.15k|    }
 3431|       |
 3432|  1.15k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3432:9): [True: 1.15k, False: 0]
  ------------------
 3433|  1.15k|        sign = sign_type::plus_sign;
 3434|  1.15k|    }
 3435|  1.15k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3436|  1.15k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3437|  1.15k|}
_ZN3scn2v44impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3289|  1.54k|{
 3290|  1.54k|    auto r = read_one_of_code_unit(range, "+-");
 3291|  1.54k|    if (!r) {
  ------------------
  |  Branch (3291:9): [True: 1.54k, False: 0]
  ------------------
 3292|  1.54k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3292:13): [True: 1.54k, False: 0]
  ------------------
 3293|  1.54k|            return std::pair{range.begin(), sign_type::default_sign};
 3294|  1.54k|        }
 3295|      0|        return unexpected(eof_error::eof);
 3296|  1.54k|    }
 3297|       |
 3298|      0|    auto& it = *r;
 3299|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3299:9): [True: 0, False: 0]
  ------------------
 3300|      0|        return std::pair{it, sign_type::minus_sign};
 3301|      0|    }
 3302|      0|    return std::pair{it, sign_type::plus_sign};
 3303|      0|}
_ZN3scn2v44impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2404|  1.54k|{
 2405|  1.54k|    auto it = read_code_unit(range);
 2406|  1.54k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|  1.54k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.54k]
  |  |  ------------------
  ------------------
 2407|      0|        return unexpected(make_eof_parse_error(it.error()));
 2408|      0|    }
 2409|       |
 2410|  3.08k|    for (auto ch : str) {
  ------------------
  |  Branch (2410:18): [True: 3.08k, False: 1.54k]
  ------------------
 2411|  3.08k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2411:13): [True: 0, False: 3.08k]
  ------------------
 2412|      0|            return *it;
 2413|      0|        }
 2414|  3.08k|    }
 2415|       |
 2416|  1.54k|    return unexpected(parse_error::error);
 2417|  1.54k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3375|  1.15k|{
 3376|  1.15k|    switch (base) {
 3377|     14|        case 2:
  ------------------
  |  Branch (3377:9): [True: 14, False: 1.13k]
  ------------------
 3378|       |            // allow 0b/0B
 3379|     14|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3380|     14|                    false};
 3381|       |
 3382|     14|        case 8: {
  ------------------
  |  Branch (3382:9): [True: 14, False: 1.13k]
  ------------------
 3383|       |            // allow 0o/0O/0
 3384|     14|            bool zero_parsed = false;
 3385|     14|            auto it = apply_opt(
 3386|     14|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3387|     14|            return {it, 8, zero_parsed};
 3388|      0|        }
 3389|       |
 3390|    364|        case 16:
  ------------------
  |  Branch (3390:9): [True: 364, False: 786]
  ------------------
 3391|       |            // allow 0x/0X
 3392|    364|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3393|    364|                    false};
 3394|       |
 3395|     26|        case 0:
  ------------------
  |  Branch (3395:9): [True: 26, False: 1.12k]
  ------------------
 3396|       |            // detect base
 3397|     26|            return parse_integer_base_prefix_for_detection(range);
 3398|       |
 3399|    732|        default:
  ------------------
  |  Branch (3399:9): [True: 732, False: 418]
  ------------------
 3400|       |            // no base prefix allowed
 3401|    732|            return {range.begin(), base, false};
 3402|  1.15k|    }
 3403|  1.15k|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2423|    392|{
 2424|    392|    if (!result) {
  ------------------
  |  Branch (2424:9): [True: 392, False: 0]
  ------------------
 2425|    392|        return range.begin();
 2426|    392|    }
 2427|      0|    return *result;
 2428|    392|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3326|     40|{
 3327|     40|    return read_matching_string_classic_nocase(range, "0b");
 3328|     40|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2363|  1.62k|{
 2364|  1.62k|    using char_type = detail::char_t<Range>;
 2365|       |
 2366|       |    if constexpr (ranges::contiguous_range<Range> &&
 2367|       |                  std::is_same_v<char_type, char>) {
 2368|       |        if (range.size() < str.size()) {
 2369|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2370|       |        }
 2371|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2372|       |            return unexpected(parse_error::error);
 2373|       |        }
 2374|       |        return ranges::next(range.begin(), str.size());
 2375|       |    }
 2376|  1.62k|    else {
 2377|  1.62k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2378|  1.62k|            if (ch < 'A' || ch > 'Z') {
 2379|  1.62k|                return ch;
 2380|  1.62k|            }
 2381|  1.62k|            return static_cast<char_type>(ch +
 2382|  1.62k|                                          static_cast<char_type>('a' - 'A'));
 2383|  1.62k|        };
 2384|       |
 2385|  1.62k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3958|  1.62k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.62k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.62k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 270, False: 1.35k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    270|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    270|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    270|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    270|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    270|    }                                                  \
  |  |  |  | 3957|  1.62k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.35k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2386|  1.35k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2387|  1.35k|                        .transform_error(make_eof_parse_error));
 2388|       |
 2389|  1.35k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  | 1039|  1.35k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.35k, False: 0]
  |  |  ------------------
  ------------------
 2390|  1.35k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2391|  1.35k|                    return ascii_tolower(a) ==
 2392|  1.35k|                           static_cast<detail::char_t<Range>>(b);
 2393|  1.35k|                }))) {
 2394|  1.35k|            return unexpected(parse_error::error);
 2395|  1.35k|        }
 2396|       |
 2397|      0|        return it;
 2398|  1.35k|    }
 2399|  1.62k|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1955|  7.59k|{
 1956|  7.59k|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1104|  7.59k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  7.59k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|  7.59k|    else {
 1967|  7.59k|        auto it = range.begin();
 1968|  7.59k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 0, False: 7.59k]
  ------------------
 1969|      0|            return ranges::next(it, count);
 1970|      0|        }
 1971|       |
 1972|  28.1k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 20.8k, False: 7.25k]
  ------------------
 1973|  20.8k|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 340, False: 20.5k]
  ------------------
 1974|    340|                return unexpected(eof_error::eof);
 1975|    340|            }
 1976|  20.8k|        }
 1977|       |
 1978|  7.25k|        return it;
 1979|  7.59k|    }
 1980|  7.59k|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1095|  7.59k|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|       |                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|       |        else {
 1107|       |            if (r.begin().stores_parent()) {
 1108|       |                return static_cast<size_t>(
 1109|       |                    r.begin().parent()->chars_available() -
 1110|       |                    r.begin().position());
 1111|       |            }
 1112|       |            return r.begin().contiguous_segment().size();
 1113|       |        }
 1114|       |    }
 1115|  7.59k|    else {
 1116|  7.59k|        return 0;
 1117|  7.59k|    }
 1118|  7.59k|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlcE_clEc:
 2377|  1.35k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2378|  1.35k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2378:17): [True: 74, False: 1.27k]
  |  Branch (2378:29): [True: 1.27k, False: 0]
  ------------------
 2379|  1.35k|                return ch;
 2380|  1.35k|            }
 2381|      0|            return static_cast<char_type>(ch +
 2382|      0|                                          static_cast<char_type>('a' - 'A'));
 2383|  1.35k|        };
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_Rb:
 3340|     40|{
 3341|     40|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3341:14): [True: 0, False: 40]
  ------------------
 3342|      0|        return *r;
 3343|      0|    }
 3344|       |
 3345|     40|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3345:14): [True: 0, False: 40]
  ------------------
 3346|      0|        zero_parsed = true;
 3347|      0|        return *r;
 3348|      0|    }
 3349|       |
 3350|     40|    return unexpected(parse_error::error);
 3351|     40|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NDTcl4implISL_EEE4typeE:
 2278|     40|{
 2279|     40|    auto it = read_code_unit(range);
 2280|     40|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|     40|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 40]
  |  |  ------------------
  ------------------
 2281|      0|        return unexpected(make_eof_parse_error(it.error()));
 2282|      0|    }
 2283|       |
 2284|     40|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  | 1039|     40|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 40, False: 0]
  |  |  ------------------
  ------------------
 2285|     40|                     static_cast<detail::char_t<Range>>(ch))) {
 2286|     40|        return unexpected(parse_error::error);
 2287|     40|    }
 2288|       |
 2289|      0|    return *it;
 2290|     40|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 1944|     40|{
 1945|     40|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|     40|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 40]
  |  |  ------------------
  ------------------
 1946|      0|        return unexpected(e);
 1947|      0|    }
 1948|       |
 1949|     40|    return ranges::next(range.begin());
 1950|     40|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_9eof_errorET_:
  950|     40|{
  951|     40|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1039|     40|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 40]
  |  |  ------------------
  ------------------
  952|      0|        return eof_error::eof;
  953|      0|    }
  954|     40|    return eof_error::good;
  955|     40|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  944|  38.9k|{
  945|  38.9k|    return is_range_eof(r.begin(), r.end());
  946|  38.9k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3333|    390|{
 3334|    390|    return read_matching_string_classic_nocase(range, "0x");
 3335|    390|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_:
 3356|     26|{
 3357|     26|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3357:14): [True: 0, False: 26]
  ------------------
 3358|      0|        return {*r, 16, false};
 3359|      0|    }
 3360|     26|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3360:14): [True: 0, False: 26]
  ------------------
 3361|      0|        return {*r, 2, false};
 3362|      0|    }
 3363|     26|    {
 3364|     26|        bool zero_parsed{false};
 3365|     26|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3365:18): [True: 0, False: 26]
  ------------------
 3366|      0|            return {*r, 8, zero_parsed};
 3367|      0|        }
 3368|     26|    }
 3369|     26|    return {range.begin(), 10, false};
 3370|     26|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3442|  1.12k|{
 3443|  1.12k|    using char_type = detail::char_t<Range>;
 3444|       |
 3445|       |    if constexpr (ranges::contiguous_range<Range>) {
 3446|       |        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3447|       |            return detail::unexpected_scan_error(
 3448|       |                scan_error::invalid_scanned_value,
 3449|       |                "Failed to parse integer: No digits found");
 3450|       |        }
 3451|       |        return range.end();
 3452|       |    }
 3453|  1.12k|    else {
 3454|  1.12k|        return read_while1_code_unit(range,
 3455|  1.12k|                                     [&](char_type ch) noexcept {
 3456|  1.12k|                                         return char_to_int(ch) < base;
 3457|  1.12k|                                     })
 3458|  1.12k|            .transform_error(map_parse_error_to_scan_error(
 3459|  1.12k|                scan_error::invalid_scanned_value,
 3460|  1.12k|                "Failed to parse integer: No digits found"));
 3461|  1.12k|    }
 3462|  1.12k|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 2127|  1.52k|{
 2128|  1.52k|    auto it = read_while_code_unit(range, pred);
 2129|  1.52k|    if (it == range.begin()) {
  ------------------
  |  Branch (2129:9): [True: 1.52k, False: 0]
  ------------------
 2130|  1.52k|        return unexpected(parse_error::error);
 2131|  1.52k|    }
 2132|      0|    return it;
 2133|  1.52k|}
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 2107|  1.52k|{
 2108|  1.52k|    return read_until_code_unit(range, std::not_fn(pred));
 2109|  1.52k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 2074|  1.52k|{
 2075|       |    if constexpr (ranges::common_range<Range>) {
 2076|       |        return std::find_if(range.begin(), range.end(), pred);
 2077|       |    }
 2078|  1.52k|    else {
 2079|  1.52k|        auto first = range.begin();
 2080|  1.52k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2080:16): [True: 1.52k, False: 0]
  ------------------
 2081|  1.52k|            if (pred(*first)) {
  ------------------
  |  Branch (2081:17): [True: 1.52k, False: 0]
  ------------------
 2082|  1.52k|                return first;
 2083|  1.52k|            }
 2084|  1.52k|        }
 2085|      0|        return first;
 2086|  1.52k|    }
 2087|  1.52k|}
_ZN3scn2v44implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2923|  97.3k|        {
 2924|  97.3k|            return !(y == x);
 2925|  97.3k|        }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_:
  742|  1.12k|        : m_fptr([](storage fn,
  743|  1.12k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.12k|              cvref<T> obj = *get<T>(fn);
  745|  1.12k|              if constexpr (std::is_void_v<R>) {
  746|  1.12k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.12k|              }
  748|  1.12k|              else {
  749|  1.12k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.12k|              }
  751|  1.12k|          }),
  752|  1.12k|          m_storage(std::addressof(f))
  753|  1.12k|    {
  754|  1.12k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|  1.12k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.12k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.12k|              else {
  749|  1.12k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.12k|              }
  751|  1.12k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlcE_EEDaNS3_7storageE:
  683|  1.12k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.12k|        else if constexpr (std::is_object_v<T>) {
  688|  1.12k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.12k|    }
_ZZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlcE_clEc:
 3455|  1.12k|                                     [&](char_type ch) noexcept {
 3456|  1.12k|                                         return char_to_int(ch) < base;
 3457|  1.12k|                                     })
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_TnPNSN_9enable_ifIXsr3stdE11is_object_vISP_EEvE4typeELPv0EEEPSP_:
  660|  1.12k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.12k|        {
  662|  1.12k|        }
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEENSJ_12basic_stringIT0_NSJ_11char_traitsISS_EENSJ_9allocatorISS_EEEENSR_IcNST_IcEENSV_IcEEEEEEEEESM_iRKNS1_35localized_number_formatting_optionsISS_EE:
 3472|     24|{
 3473|     24|    std::basic_string<CharT> output;
 3474|     24|    std::string thsep_indices;
 3475|     24|    auto it = range.begin();
 3476|     24|    bool digit_matched = false;
 3477|     24|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3477:12): [True: 24, False: 0]
  ------------------
 3478|     24|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3478:13): [True: 0, False: 24]
  ------------------
 3479|      0|            thsep_indices.push_back(
 3480|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3481|      0|        }
 3482|     24|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3482:18): [True: 24, False: 0]
  ------------------
 3483|     24|            break;
 3484|     24|        }
 3485|      0|        else {
 3486|      0|            output.push_back(*it);
 3487|      0|            digit_matched = true;
 3488|      0|        }
 3489|     24|    }
 3490|     24|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  | 1039|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 24, False: 0]
  |  |  ------------------
  ------------------
 3491|     24|        return detail::unexpected_scan_error(
 3492|     24|            scan_error::invalid_scanned_value,
 3493|     24|            "Failed to parse integer: No digits found");
 3494|     24|    }
 3495|      0|    return std::tuple{it, output, thsep_indices};
 3496|     24|}
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E5countEv:
 2549|   382k|    {
 2550|   382k|        return m_count;
 2551|   382k|    }
_ZN3scn2v44impl20reader_impl_for_charIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERcNSL_10locale_refE:
 5750|    286|    {
 5751|    286|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5751:13): [True: 264, False: 22]
  ------------------
 5752|    286|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5752:13): [True: 0, False: 22]
  ------------------
 5753|    264|            return read_default(range, value, loc);
 5754|    264|        }
 5755|       |
 5756|     22|        reader_impl_for_int<CharT> reader{};
 5757|     22|        signed char tmp_value{};
 5758|     22|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5759|     22|        value = static_cast<signed char>(value);
 5760|     22|        return ret;
 5761|    286|    }
_ZN3scn2v44impl20reader_impl_for_charIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RcNS0_6detail10locale_refE:
 5732|    896|    {
 5733|    896|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|    896|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5734|    896|        if constexpr (std::is_same_v<CharT, char>) {
 5735|    896|            return code_unit_reader<char>{}.read(range, value);
 5736|       |        }
 5737|       |        else {
 5738|       |            SCN_UNUSED(range);
 5739|       |            SCN_EXPECT(false);
 5740|       |            SCN_UNREACHABLE;
 5741|       |        }
 5742|    896|    }
_ZN3scn2v44impl16code_unit_readerIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rc:
 5650|    896|    {
 5651|    896|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3958|    896|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    896|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    896|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    896|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 896]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    896|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    896|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5652|    896|        ch = *range.begin();
 5653|    896|        return it;
 5654|    896|    }
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1944|  6.51k|{
 1945|  6.51k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  6.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 6.51k]
  |  |  ------------------
  ------------------
 1946|      0|        return unexpected(e);
 1947|      0|    }
 1948|       |
 1949|  6.51k|    return ranges::next(range.begin());
 1950|  6.51k|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  950|  21.7k|{
  951|  21.7k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1039|  21.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 21.7k]
  |  |  ------------------
  ------------------
  952|      0|        return eof_error::eof;
  953|      0|    }
  954|  21.7k|    return eof_error::good;
  955|  21.7k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  944|   636k|{
  945|   636k|    return is_range_eof(r.begin(), r.end());
  946|   636k|}
_ZN3scn2v44impl12is_range_eofIPKcS4_EEbT_T0_:
  928|   713k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   713k|    {
  938|   713k|        return begin == end;
  939|   713k|    }
  940|   713k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  70.3k|    {
  296|  70.3k|        ++x;
  297|  70.3k|        return x;
  298|  70.3k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3621|     22|    {
 3622|     22|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3958|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3623|     22|                                   .transform_error(make_eof_scan_error));
 3624|       |
 3625|     22|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3625:13): [True: 0, False: 22]
  ------------------
 3626|       |            if constexpr (!std::is_signed_v<T>) {
 3627|       |                return detail::unexpected_scan_error(
 3628|       |                    scan_error::invalid_scanned_value,
 3629|       |                    "Unexpected '-' sign when parsing an "
 3630|       |                    "unsigned value");
 3631|       |            }
 3632|      0|            else {
 3633|      0|                if (specs.type ==
  ------------------
  |  Branch (3633:21): [True: 0, False: 0]
  ------------------
 3634|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3635|      0|                    return detail::unexpected_scan_error(
 3636|      0|                        scan_error::invalid_scanned_value,
 3637|      0|                        "'u'-option disallows negative values");
 3638|      0|                }
 3639|      0|            }
 3640|      0|        }
 3641|       |
 3642|     22|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3642:13): [True: 0, False: 22]
  ------------------
 3643|      0|            value = T{0};
 3644|      0|            return std::next(prefix_result.iterator);
 3645|      0|        }
 3646|       |
 3647|     22|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1038|     22|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 22, False: 0]
  |  |  ------------------
  ------------------
 3648|     22|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|     22|                    parse_integer_digits_without_thsep(
 3650|     22|                        ranges::subrange{prefix_result.iterator, range.end()},
 3651|     22|                        prefix_result.parsed_base));
 3652|       |
 3653|     22|            auto buf = make_contiguous_buffer(
 3654|     22|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3655|     22|            SCN_TRY(result_it,
  ------------------
  |  | 3958|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 22, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     22|    }                                                  \
  |  |  |  | 3957|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3656|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3657|      0|                                        prefix_result.parsed_base));
 3658|       |
 3659|      0|            return ranges::next(
 3660|      0|                prefix_result.iterator,
 3661|      0|                ranges::distance(buf.view().begin(), result_it));
 3662|     22|        }
 3663|       |
 3664|      0|        auto locale_options =
 3665|       |#if SCN_DISABLE_LOCALE
 3666|       |            localized_number_formatting_options<CharT>{};
 3667|       |#else
 3668|      0|            localized_number_formatting_options<CharT>{loc};
 3669|      0|#endif
 3670|       |
 3671|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3672|      0|                parse_integer_digits_with_thsep(
 3673|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3674|      0|                    prefix_result.parsed_base, locale_options));
 3675|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3676|      0|            parse_digits_result;
 3677|       |
 3678|      0|        auto nothsep_source_view =
 3679|      0|            std::basic_string_view<CharT>{nothsep_source};
 3680|      0|        SCN_TRY(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3681|      0|            nothsep_source_it,
 3682|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3683|      0|                                prefix_result.parsed_base));
 3684|       |
 3685|      0|        return ranges::next(
 3686|      0|            prefix_result.iterator,
 3687|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3688|      0|                ranges::ssize(thsep_indices));
 3689|      0|    }
_ZN3scn2v44impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3408|  2.78k|{
 3409|  2.78k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3958|  2.78k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  2.78k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  2.78k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  2.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 2.78k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  2.78k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  2.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3410|  2.78k|    auto [base_prefix_begin_it, sign] = sign_result;
 3411|       |
 3412|  2.78k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3413|  2.78k|        parse_integer_base_prefix(
 3414|  2.78k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3415|       |
 3416|  2.78k|    if (parsed_zero) {
  ------------------
  |  Branch (3416:9): [True: 0, False: 2.78k]
  ------------------
 3417|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3417:13): [True: 0, False: 0]
  ------------------
 3418|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3418:13): [True: 0, False: 0]
  ------------------
 3419|      0|            digits_begin_it = base_prefix_begin_it;
 3420|      0|        }
 3421|      0|        else {
 3422|      0|            parsed_zero = false;
 3423|      0|        }
 3424|      0|    }
 3425|  2.78k|    else {
 3426|  2.78k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3426:13): [True: 0, False: 2.78k]
  ------------------
 3427|  2.78k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3427:13): [True: 2.78k, False: 0]
  ------------------
 3428|  2.78k|            digits_begin_it = base_prefix_begin_it;
 3429|  2.78k|        }
 3430|  2.78k|    }
 3431|       |
 3432|  2.78k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3432:9): [True: 2.78k, False: 0]
  ------------------
 3433|  2.78k|        sign = sign_type::plus_sign;
 3434|  2.78k|    }
 3435|  2.78k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3436|  2.78k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3437|  2.78k|}
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3289|  3.71k|{
 3290|  3.71k|    auto r = read_one_of_code_unit(range, "+-");
 3291|  3.71k|    if (!r) {
  ------------------
  |  Branch (3291:9): [True: 3.71k, False: 0]
  ------------------
 3292|  3.71k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3292:13): [True: 3.71k, False: 0]
  ------------------
 3293|  3.71k|            return std::pair{range.begin(), sign_type::default_sign};
 3294|  3.71k|        }
 3295|      0|        return unexpected(eof_error::eof);
 3296|  3.71k|    }
 3297|       |
 3298|      0|    auto& it = *r;
 3299|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3299:9): [True: 0, False: 0]
  ------------------
 3300|      0|        return std::pair{it, sign_type::minus_sign};
 3301|      0|    }
 3302|      0|    return std::pair{it, sign_type::plus_sign};
 3303|      0|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2404|  3.71k|{
 2405|  3.71k|    auto it = read_code_unit(range);
 2406|  3.71k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|  3.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 3.71k]
  |  |  ------------------
  ------------------
 2407|      0|        return unexpected(make_eof_parse_error(it.error()));
 2408|      0|    }
 2409|       |
 2410|  7.42k|    for (auto ch : str) {
  ------------------
  |  Branch (2410:18): [True: 7.42k, False: 3.71k]
  ------------------
 2411|  7.42k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2411:13): [True: 0, False: 7.42k]
  ------------------
 2412|      0|            return *it;
 2413|      0|        }
 2414|  7.42k|    }
 2415|       |
 2416|  3.71k|    return unexpected(parse_error::error);
 2417|  3.71k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3375|  2.78k|{
 3376|  2.78k|    switch (base) {
 3377|      6|        case 2:
  ------------------
  |  Branch (3377:9): [True: 6, False: 2.77k]
  ------------------
 3378|       |            // allow 0b/0B
 3379|      6|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3380|      6|                    false};
 3381|       |
 3382|     30|        case 8: {
  ------------------
  |  Branch (3382:9): [True: 30, False: 2.75k]
  ------------------
 3383|       |            // allow 0o/0O/0
 3384|     30|            bool zero_parsed = false;
 3385|     30|            auto it = apply_opt(
 3386|     30|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3387|     30|            return {it, 8, zero_parsed};
 3388|      0|        }
 3389|       |
 3390|    912|        case 16:
  ------------------
  |  Branch (3390:9): [True: 912, False: 1.87k]
  ------------------
 3391|       |            // allow 0x/0X
 3392|    912|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3393|    912|                    false};
 3394|       |
 3395|     16|        case 0:
  ------------------
  |  Branch (3395:9): [True: 16, False: 2.76k]
  ------------------
 3396|       |            // detect base
 3397|     16|            return parse_integer_base_prefix_for_detection(range);
 3398|       |
 3399|  1.81k|        default:
  ------------------
  |  Branch (3399:9): [True: 1.81k, False: 964]
  ------------------
 3400|       |            // no base prefix allowed
 3401|  1.81k|            return {range.begin(), base, false};
 3402|  2.78k|    }
 3403|  2.78k|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2423|    948|{
 2424|    948|    if (!result) {
  ------------------
  |  Branch (2424:9): [True: 948, False: 0]
  ------------------
 2425|    948|        return range.begin();
 2426|    948|    }
 2427|      0|    return *result;
 2428|    948|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3326|     22|{
 3327|     22|    return read_matching_string_classic_nocase(range, "0b");
 3328|     22|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2363|  3.76k|{
 2364|  3.76k|    using char_type = detail::char_t<Range>;
 2365|       |
 2366|       |    if constexpr (ranges::contiguous_range<Range> &&
 2367|  3.76k|                  std::is_same_v<char_type, char>) {
 2368|  3.76k|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2368:13): [True: 8, False: 3.75k]
  ------------------
 2369|      8|            return unexpected(make_eof_parse_error(eof_error::eof));
 2370|      8|        }
 2371|  3.75k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2371:13): [True: 3.75k, False: 0]
  ------------------
 2372|  3.75k|            return unexpected(parse_error::error);
 2373|  3.75k|        }
 2374|      0|        return ranges::next(range.begin(), str.size());
 2375|       |    }
 2376|       |    else {
 2377|       |        auto ascii_tolower = [](char_type ch) -> char_type {
 2378|       |            if (ch < 'A' || ch > 'Z') {
 2379|       |                return ch;
 2380|       |            }
 2381|       |            return static_cast<char_type>(ch +
 2382|       |                                          static_cast<char_type>('a' - 'A'));
 2383|       |        };
 2384|       |
 2385|       |        SCN_TRY(it, read_exactly_n_code_units(
 2386|       |                        range, static_cast<std::ptrdiff_t>(str.size()))
 2387|       |                        .transform_error(make_eof_parse_error));
 2388|       |
 2389|       |        if (SCN_UNLIKELY(!std::equal(
 2390|       |                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2391|       |                    return ascii_tolower(a) ==
 2392|       |                           static_cast<detail::char_t<Range>>(b);
 2393|       |                }))) {
 2394|       |            return unexpected(parse_error::error);
 2395|       |        }
 2396|       |
 2397|       |        return it;
 2398|       |    }
 2399|  3.76k|}
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3340|     46|{
 3341|     46|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3341:14): [True: 0, False: 46]
  ------------------
 3342|      0|        return *r;
 3343|      0|    }
 3344|       |
 3345|     46|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3345:14): [True: 0, False: 46]
  ------------------
 3346|      0|        zero_parsed = true;
 3347|      0|        return *r;
 3348|      0|    }
 3349|       |
 3350|     46|    return unexpected(parse_error::error);
 3351|     46|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2278|  1.91k|{
 2279|  1.91k|    auto it = read_code_unit(range);
 2280|  1.91k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|  1.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.91k]
  |  |  ------------------
  ------------------
 2281|      0|        return unexpected(make_eof_parse_error(it.error()));
 2282|      0|    }
 2283|       |
 2284|  1.91k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  | 1039|  1.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.91k, False: 0]
  |  |  ------------------
  ------------------
 2285|  1.91k|                     static_cast<detail::char_t<Range>>(ch))) {
 2286|  1.91k|        return unexpected(parse_error::error);
 2287|  1.91k|    }
 2288|       |
 2289|      0|    return *it;
 2290|  1.91k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3333|    928|{
 3334|    928|    return read_matching_string_classic_nocase(range, "0x");
 3335|    928|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3356|     16|{
 3357|     16|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3357:14): [True: 0, False: 16]
  ------------------
 3358|      0|        return {*r, 16, false};
 3359|      0|    }
 3360|     16|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3360:14): [True: 0, False: 16]
  ------------------
 3361|      0|        return {*r, 2, false};
 3362|      0|    }
 3363|     16|    {
 3364|     16|        bool zero_parsed{false};
 3365|     16|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3365:18): [True: 0, False: 16]
  ------------------
 3366|      0|            return {*r, 8, zero_parsed};
 3367|      0|        }
 3368|     16|    }
 3369|     16|    return {range.begin(), 10, false};
 3370|     16|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3442|  2.75k|{
 3443|  2.75k|    using char_type = detail::char_t<Range>;
 3444|       |
 3445|  2.75k|    if constexpr (ranges::contiguous_range<Range>) {
 3446|  2.75k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  2.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 2.75k]
  |  |  ------------------
  ------------------
 3447|      0|            return detail::unexpected_scan_error(
 3448|      0|                scan_error::invalid_scanned_value,
 3449|      0|                "Failed to parse integer: No digits found");
 3450|      0|        }
 3451|  2.75k|        return range.end();
 3452|       |    }
 3453|       |    else {
 3454|       |        return read_while1_code_unit(range,
 3455|       |                                     [&](char_type ch) noexcept {
 3456|       |                                         return char_to_int(ch) < base;
 3457|       |                                     })
 3458|       |            .transform_error(map_parse_error_to_scan_error(
 3459|       |                scan_error::invalid_scanned_value,
 3460|       |                "Failed to parse integer: No digits found"));
 3461|       |    }
 3462|  2.75k|}
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3472|     24|{
 3473|     24|    std::basic_string<CharT> output;
 3474|     24|    std::string thsep_indices;
 3475|     24|    auto it = range.begin();
 3476|     24|    bool digit_matched = false;
 3477|     24|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3477:12): [True: 24, False: 0]
  ------------------
 3478|     24|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3478:13): [True: 0, False: 24]
  ------------------
 3479|      0|            thsep_indices.push_back(
 3480|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3481|      0|        }
 3482|     24|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3482:18): [True: 24, False: 0]
  ------------------
 3483|     24|            break;
 3484|     24|        }
 3485|      0|        else {
 3486|      0|            output.push_back(*it);
 3487|      0|            digit_matched = true;
 3488|      0|        }
 3489|     24|    }
 3490|     24|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  | 1039|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 24, False: 0]
  |  |  ------------------
  ------------------
 3491|     24|        return detail::unexpected_scan_error(
 3492|     24|            scan_error::invalid_scanned_value,
 3493|     24|            "Failed to parse integer: No digits found");
 3494|     24|    }
 3495|      0|    return std::tuple{it, output, thsep_indices};
 3496|     24|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|  13.5k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|  13.5k|                  ranges::sized_range<Range>) {
 1785|  13.5k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1110|  13.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|  13.5k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1587|  13.5k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|  13.5k|    {
 1589|  13.5k|    }
_ZNK3scn2v44impl19string_view_wrapperIcE4viewEv:
 1601|  69.8k|    {
 1602|  69.8k|        return sv;
 1603|  69.8k|    }
_ZN3scn2v44impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 6040|  1.18k|{
 6041|  1.18k|    using char_type = detail::char_t<Range>;
 6042|  1.18k|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6043|       |
 6044|  1.18k|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (6044:9): [True: 496, False: 688]
  ------------------
 6045|    496|        const auto fill_ch = fill.template get_code_unit<char_type>();
 6046|    496|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 6047|       |
 6048|    496|        if (max_width == 0) {
  ------------------
  |  Branch (6048:13): [True: 392, False: 104]
  ------------------
 6049|    392|            auto it = read_while_code_unit(range, pred);
 6050|       |
 6051|    392|            if (want_skipped_width) {
  ------------------
  |  Branch (6051:17): [True: 118, False: 274]
  ------------------
 6052|    118|                auto prefix_width =
 6053|    118|                    static_cast<std::ptrdiff_t>(
 6054|    118|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 6055|    118|                    ranges::distance(range.begin(), it);
 6056|    118|                return result_type{it, prefix_width};
 6057|    118|            }
 6058|    274|            return result_type{it, 0};
 6059|    392|        }
 6060|       |
 6061|    104|        auto max_width_view = take_width(range, max_width);
 6062|    104|        auto w_it = read_while_code_unit(max_width_view, pred);
 6063|       |
 6064|    104|        if (want_skipped_width) {
  ------------------
  |  Branch (6064:13): [True: 104, False: 0]
  ------------------
 6065|    104|            return result_type{w_it.base(), max_width - w_it.count()};
 6066|    104|        }
 6067|      0|        return result_type{w_it.base(), 0};
 6068|    104|    }
 6069|       |
 6070|    688|    const auto fill_chars = fill.template get_code_units<char_type>();
 6071|    688|    if (max_width == 0) {
  ------------------
  |  Branch (6071:9): [True: 354, False: 334]
  ------------------
 6072|    354|        auto it = read_while_code_units(range, fill_chars);
 6073|       |
 6074|    354|        if (want_skipped_width) {
  ------------------
  |  Branch (6074:13): [True: 118, False: 236]
  ------------------
 6075|    118|            auto prefix_width =
 6076|    118|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 6077|    118|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 6078|    118|            return result_type{it, prefix_width};
 6079|    118|        }
 6080|    236|        return result_type{it, 0};
 6081|    354|    }
 6082|       |
 6083|    334|    auto max_width_view = take_width(range, max_width);
 6084|    334|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 6085|       |
 6086|    334|    if (want_skipped_width) {
  ------------------
  |  Branch (6086:9): [True: 334, False: 0]
  ------------------
 6087|    334|        return result_type{w_it.base(), max_width - w_it.count()};
 6088|    334|    }
 6089|      0|    return result_type{w_it.base(), 0};
 6090|    334|}
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2107|    540|{
 2108|    540|    return read_until_code_unit(range, std::not_fn(pred));
 2109|    540|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2074|    642|{
 2075|    642|    if constexpr (ranges::common_range<Range>) {
 2076|    642|        return std::find_if(range.begin(), range.end(), pred);
 2077|       |    }
 2078|       |    else {
 2079|       |        auto first = range.begin();
 2080|       |        for (; first != range.end(); ++first) {
 2081|       |            if (pred(*first)) {
 2082|       |                return first;
 2083|       |            }
 2084|       |        }
 2085|       |        return first;
 2086|       |    }
 2087|    642|}
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_:
  742|    496|        : m_fptr([](storage fn,
  743|    496|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    496|              cvref<T> obj = *get<T>(fn);
  745|    496|              if constexpr (std::is_void_v<R>) {
  746|    496|                  obj(static_cast<decltype(args)>(args)...);
  747|    496|              }
  748|    496|              else {
  749|    496|                  return obj(static_cast<decltype(args)>(args)...);
  750|    496|              }
  751|    496|          }),
  752|    496|          m_storage(std::addressof(f))
  753|    496|    {
  754|    496|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|    914|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    914|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    914|              else {
  749|    914|                  return obj(static_cast<decltype(args)>(args)...);
  750|    914|              }
  751|    914|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlcE_EEDaNS3_7storageE:
  683|    914|    {
  684|    914|        if constexpr (std::is_const_v<T>) {
  685|    914|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    914|    }
_ZZN3scn2v44impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlcE_clEc:
 6046|    914|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_TnPNSF_9enable_ifIXsr3stdE11is_object_vISH_EEvE4typeELPv0EEEPKSH_:
  665|    496|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    496|        {
  667|    496|        }
_ZN3scn2v44impl20read_while_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2107|    320|{
 2108|    320|    return read_until_code_unit(range, std::not_fn(pred));
 2109|    320|}
_ZN3scn2v44impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2074|    500|{
 2075|       |    if constexpr (ranges::common_range<Range>) {
 2076|       |        return std::find_if(range.begin(), range.end(), pred);
 2077|       |    }
 2078|    500|    else {
 2079|    500|        auto first = range.begin();
 2080|  8.04k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2080:16): [True: 7.82k, False: 220]
  ------------------
 2081|  7.82k|            if (pred(*first)) {
  ------------------
  |  Branch (2081:17): [True: 280, False: 7.54k]
  ------------------
 2082|    280|                return first;
 2083|    280|            }
 2084|  7.82k|        }
 2085|    220|        return first;
 2086|    500|    }
 2087|    500|}
_ZN3scn2v44impl21read_while_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 2168|    354|{
 2169|    354|    static_assert(ranges::common_range<CodeUnits>);
 2170|       |
 2171|    354|    auto it = range.begin();
 2172|    640|    while (it != range.end()) {
  ------------------
  |  Branch (2172:12): [True: 640, False: 0]
  ------------------
 2173|    640|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2174|    640|                                           needle.size());
 2175|    640|        if (!r) {
  ------------------
  |  Branch (2175:13): [True: 6, False: 634]
  ------------------
 2176|      6|            return it;
 2177|      6|        }
 2178|    634|        static_assert(
 2179|    634|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2180|    634|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2180:13): [True: 348, False: 286]
  ------------------
 2181|    348|            return it;
 2182|    348|        }
 2183|    286|        it = *r;
 2184|    286|    }
 2185|      0|    SCN_ENSURE(it == range.end());
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2186|      0|    return it;
 2187|      0|}
_ZN3scn2v44impl21read_while_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEESI_RKT0_:
 2168|    334|{
 2169|    334|    static_assert(ranges::common_range<CodeUnits>);
 2170|       |
 2171|    334|    auto it = range.begin();
 2172|    678|    while (it != range.end()) {
  ------------------
  |  Branch (2172:12): [True: 632, False: 46]
  ------------------
 2173|    632|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2174|    632|                                           needle.size());
 2175|    632|        if (!r) {
  ------------------
  |  Branch (2175:13): [True: 70, False: 562]
  ------------------
 2176|     70|            return it;
 2177|     70|        }
 2178|    562|        static_assert(
 2179|    562|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2180|    562|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2180:13): [True: 218, False: 344]
  ------------------
 2181|    218|            return it;
 2182|    218|        }
 2183|    344|        it = *r;
 2184|    344|    }
 2185|     46|    SCN_ENSURE(it == range.end());
  ------------------
  |  | 1105|     46|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|     46|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2186|     46|    return it;
 2187|     46|}
_ZN3scn2v44impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 3097|    632|{
 3098|    632|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3098:9): [True: 0, False: 632]
  ------------------
 3099|      0|        auto it = read_while_classic_space(range);
 3100|      0|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3101|      0|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3102|      0|            return unexpected(e);
 3103|      0|        }
 3104|       |
 3105|      0|        return it;
 3106|      0|    }
 3107|       |
 3108|    632|    return read_while_classic_space(range);
 3109|    632|}
_ZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2248|    632|{
 2249|       |    if constexpr (ranges::contiguous_range<Range> &&
 2250|       |                  ranges::sized_range<Range> &&
 2251|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2252|       |        auto buf = make_contiguous_buffer(range);
 2253|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2254|       |        return ranges::next(range.begin(),
 2255|       |                            ranges::distance(buf.view().begin(), it));
 2256|       |    }
 2257|    632|    else {
 2258|    632|        auto it = range.begin();
 2259|       |
 2260|    632|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2261|    632|            auto seg = get_contiguous_beginning(range);
 2262|    632|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2263|    632|                seg_it != seg.end()) {
  ------------------
  |  Branch (2263:17): [True: 0, False: 632]
  ------------------
 2264|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2265|      0|            }
 2266|    632|            ranges::advance(it, seg.size());
 2267|    632|        }
 2268|       |
 2269|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|    632|            return detail::is_cp_space(cp);
 2271|    632|        });
 2272|    632|    }
 2273|    632|}
_ZN3scn2v44impl24get_contiguous_beginningINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDaT_:
 1039|  1.68k|{
 1040|       |    if constexpr (ranges::contiguous_range<Range> &&
 1041|       |                  ranges::sized_range<Range>) {
 1042|       |        return r;
 1043|       |    }
 1044|       |    else if constexpr (std::is_same_v<
 1045|       |                           ranges::const_iterator_t<Range>,
 1046|       |                           typename detail::basic_scan_buffer<
 1047|       |                               detail::char_t<Range>>::forward_iterator>) {
 1048|       |        if constexpr (ranges::common_range<Range>) {
 1049|       |            auto seg = r.begin().contiguous_segment();
 1050|       |            auto dist =
 1051|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1052|       |            return seg.substr(0, std::min(seg.size(), dist));
 1053|       |        }
 1054|       |        else {
 1055|       |            return r.begin().contiguous_segment();
 1056|       |        }
 1057|       |    }
 1058|  1.68k|    else {
 1059|  1.68k|        return std::basic_string_view<detail::char_t<Range>>{};
 1060|  1.68k|    }
 1061|  1.68k|}
_ZN3scn2v44impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2213|    902|{
 2214|    902|    return read_until_code_point(range, std::not_fn(pred));
 2215|    902|}
_ZN3scn2v44impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2192|  1.14k|{
 2193|  1.14k|    auto it = range.begin();
 2194|  20.9k|    while (it != range.end()) {
  ------------------
  |  Branch (2194:12): [True: 20.4k, False: 470]
  ------------------
 2195|  20.4k|        const auto val =
 2196|  20.4k|            read_code_point_into(ranges::subrange{it, range.end()});
 2197|  20.4k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1038|  20.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 17.6k, False: 2.79k]
  |  |  ------------------
  ------------------
 2198|  17.6k|            const auto cp = detail::decode_code_point_exhaustive(
 2199|  17.6k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2200|  17.6k|            if (pred(cp)) {
  ------------------
  |  Branch (2200:17): [True: 672, False: 16.9k]
  ------------------
 2201|    672|                return it;
 2202|    672|            }
 2203|  17.6k|        }
 2204|  19.7k|        it = val.iterator;
 2205|  19.7k|    }
 2206|       |
 2207|    470|    return it;
 2208|  1.14k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 1997|  38.8k|{
 1998|  38.8k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1104|  38.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  38.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  38.8k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  38.8k|    auto it = range.begin();
 2002|  38.8k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  38.8k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1039|  38.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 5.92k, False: 32.9k]
  |  |  ------------------
  ------------------
 2005|  5.92k|        ++it;
 2006|  5.92k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|  5.92k|        return {it, {}};
 2008|  5.92k|    }
 2009|       |
 2010|  32.9k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 29.0k, False: 3.92k]
  ------------------
 2011|  29.0k|        ++it;
 2012|  29.0k|        return {it, string_type(1, *range.begin())};
 2013|  29.0k|    }
 2014|       |
 2015|  3.92k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|  3.92k|    return {it, string_type{range.begin(), it}};
 2017|  32.9k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_:
 1264|  5.92k|{
 1265|  5.92k|    auto it = input.begin();
 1266|  7.30k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 7.07k, False: 222]
  ------------------
 1267|  7.07k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 5.70k, False: 1.37k]
  ------------------
 1268|  5.70k|            break;
 1269|  5.70k|        }
 1270|  7.07k|    }
 1271|  5.92k|    return it;
 1272|  5.92k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  282|  3.92k|    {
  283|  3.92k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  3.92k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  226|  3.92k|    {
  227|  3.92k|        constexpr iter_difference_t<I> zero{0};
  228|  3.92k|        iter_difference_t<I> counter{0};
  229|       |
  230|  3.92k|        if (n < zero) {
  ------------------
  |  Branch (230:13): [True: 0, False: 3.92k]
  ------------------
  231|      0|            do {
  232|      0|                --i;
  233|      0|                --counter;  // Yes, really
  234|      0|            } while (++n < zero && i != bound);
  ------------------
  |  Branch (234:22): [True: 0, False: 0]
  |  Branch (234:36): [True: 0, False: 0]
  ------------------
  235|      0|        }
  236|  3.92k|        else {
  237|  12.9k|            while (n-- > zero && i != bound) {
  ------------------
  |  Branch (237:20): [True: 9.15k, False: 3.80k]
  |  Branch (237:34): [True: 9.03k, False: 120]
  ------------------
  238|  9.03k|                ++i;
  239|  9.03k|                ++counter;
  240|  9.03k|            }
  241|  3.92k|        }
  242|       |
  243|  3.92k|        return counter;
  244|  3.92k|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  742|    632|        : m_fptr([](storage fn,
  743|    632|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    632|              cvref<T> obj = *get<T>(fn);
  745|    632|              if constexpr (std::is_void_v<R>) {
  746|    632|                  obj(static_cast<decltype(args)>(args)...);
  747|    632|              }
  748|    632|              else {
  749|    632|                  return obj(static_cast<decltype(args)>(args)...);
  750|    632|              }
  751|    632|          }),
  752|    632|          m_storage(std::addressof(f))
  753|    632|    {
  754|    632|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  743|  2.29k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.29k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.29k|              else {
  749|  2.29k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.29k|              }
  751|  2.29k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  2.29k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.29k|        else if constexpr (std::is_object_v<T>) {
  688|  2.29k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.29k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2269|  2.29k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|  2.29k|            return detail::is_cp_space(cp);
 2271|  2.29k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|    632|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    632|        {
  662|    632|        }
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3097|  6.96k|{
 3098|  6.96k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3098:9): [True: 6.79k, False: 166]
  ------------------
 3099|  6.79k|        auto it = read_while_classic_space(range);
 3100|  6.79k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3101|  6.79k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  6.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 6.79k]
  |  |  ------------------
  ------------------
 3102|      0|            return unexpected(e);
 3103|      0|        }
 3104|       |
 3105|  6.79k|        return it;
 3106|  6.79k|    }
 3107|       |
 3108|    166|    return read_while_classic_space(range);
 3109|  6.96k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2248|  15.3k|{
 2249|       |    if constexpr (ranges::contiguous_range<Range> &&
 2250|       |                  ranges::sized_range<Range> &&
 2251|  15.3k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2252|  15.3k|        auto buf = make_contiguous_buffer(range);
 2253|  15.3k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2254|  15.3k|        return ranges::next(range.begin(),
 2255|  15.3k|                            ranges::distance(buf.view().begin(), it));
 2256|       |    }
 2257|       |    else {
 2258|       |        auto it = range.begin();
 2259|       |
 2260|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2261|       |            auto seg = get_contiguous_beginning(range);
 2262|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2263|       |                seg_it != seg.end()) {
 2264|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2265|       |            }
 2266|       |            ranges::advance(it, seg.size());
 2267|       |        }
 2268|       |
 2269|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|       |            return detail::is_cp_space(cp);
 2271|       |        });
 2272|       |    }
 2273|  15.3k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|  18.2k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|  18.2k|                  ranges::sized_range<Range>) {
 1785|  18.2k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1110|  18.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|  18.2k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1587|  18.2k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|  18.2k|    {
 1589|  18.2k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3187|  6.33k|    {
 3188|  6.33k|        reader_error_handler eh{};
 3189|  6.33k|        get_derived().check_specs_impl(specs, eh);
 3190|  6.33k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1039|  6.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 4.89k, False: 1.44k]
  |  |  ------------------
  ------------------
 3191|  4.89k|            return detail::unexpected_scan_error(
 3192|  4.89k|                scan_error::invalid_format_string, eh.m_msg);
 3193|  4.89k|        }
 3194|  1.44k|        return {};
 3195|  6.33k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
 3199|  6.33k|    {
 3200|  6.33k|        return static_cast<Derived&>(*this);
 3201|  6.33k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3567|  6.33k|    {
 3568|  6.33k|        detail::check_int_type_specs(specs, eh);
 3569|  6.33k|    }
_ZNK3scn2v44impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
 3182|  2.70k|    {
 3183|  2.70k|        return true;
 3184|  2.70k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3621|    384|    {
 3622|    384|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3958|    384|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    384|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    384|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    384|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 384]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    384|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    384|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3623|    384|                                   .transform_error(make_eof_scan_error));
 3624|       |
 3625|    384|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3625:13): [True: 0, False: 384]
  ------------------
 3626|       |            if constexpr (!std::is_signed_v<T>) {
 3627|       |                return detail::unexpected_scan_error(
 3628|       |                    scan_error::invalid_scanned_value,
 3629|       |                    "Unexpected '-' sign when parsing an "
 3630|       |                    "unsigned value");
 3631|       |            }
 3632|      0|            else {
 3633|      0|                if (specs.type ==
  ------------------
  |  Branch (3633:21): [True: 0, False: 0]
  ------------------
 3634|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3635|      0|                    return detail::unexpected_scan_error(
 3636|      0|                        scan_error::invalid_scanned_value,
 3637|      0|                        "'u'-option disallows negative values");
 3638|      0|                }
 3639|      0|            }
 3640|      0|        }
 3641|       |
 3642|    384|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3642:13): [True: 0, False: 384]
  ------------------
 3643|      0|            value = T{0};
 3644|      0|            return std::next(prefix_result.iterator);
 3645|      0|        }
 3646|       |
 3647|    384|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1038|    384|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 372, False: 12]
  |  |  ------------------
  ------------------
 3648|    372|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|    372|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    372|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    372|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    372|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 372, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    372|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    372|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    372|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    372|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    372|    }                                                  \
  |  |  |  | 3957|    372|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      0|                    parse_integer_digits_without_thsep(
 3650|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3651|      0|                        prefix_result.parsed_base));
 3652|       |
 3653|      0|            auto buf = make_contiguous_buffer(
 3654|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3655|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3656|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3657|      0|                                        prefix_result.parsed_base));
 3658|       |
 3659|      0|            return ranges::next(
 3660|      0|                prefix_result.iterator,
 3661|      0|                ranges::distance(buf.view().begin(), result_it));
 3662|      0|        }
 3663|       |
 3664|     12|        auto locale_options =
 3665|       |#if SCN_DISABLE_LOCALE
 3666|       |            localized_number_formatting_options<CharT>{};
 3667|       |#else
 3668|     12|            localized_number_formatting_options<CharT>{loc};
 3669|     12|#endif
 3670|       |
 3671|     12|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3958|     12|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|     12|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|     12|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 12, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     12|    }                                                  \
  |  |  |  | 3957|     12|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3672|      0|                parse_integer_digits_with_thsep(
 3673|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3674|      0|                    prefix_result.parsed_base, locale_options));
 3675|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3676|      0|            parse_digits_result;
 3677|       |
 3678|      0|        auto nothsep_source_view =
 3679|      0|            std::basic_string_view<CharT>{nothsep_source};
 3680|      0|        SCN_TRY(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3681|      0|            nothsep_source_it,
 3682|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3683|      0|                                prefix_result.parsed_base));
 3684|       |
 3685|      0|        return ranges::next(
 3686|      0|            prefix_result.iterator,
 3687|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3688|      0|                ranges::ssize(thsep_indices));
 3689|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3621|    298|    {
 3622|    298|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3958|    298|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    298|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    298|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    298|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 298]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    298|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    298|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3623|    298|                                   .transform_error(make_eof_scan_error));
 3624|       |
 3625|    298|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3625:13): [True: 0, False: 298]
  ------------------
 3626|       |            if constexpr (!std::is_signed_v<T>) {
 3627|       |                return detail::unexpected_scan_error(
 3628|       |                    scan_error::invalid_scanned_value,
 3629|       |                    "Unexpected '-' sign when parsing an "
 3630|       |                    "unsigned value");
 3631|       |            }
 3632|      0|            else {
 3633|      0|                if (specs.type ==
  ------------------
  |  Branch (3633:21): [True: 0, False: 0]
  ------------------
 3634|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3635|      0|                    return detail::unexpected_scan_error(
 3636|      0|                        scan_error::invalid_scanned_value,
 3637|      0|                        "'u'-option disallows negative values");
 3638|      0|                }
 3639|      0|            }
 3640|      0|        }
 3641|       |
 3642|    298|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3642:13): [True: 0, False: 298]
  ------------------
 3643|      0|            value = T{0};
 3644|      0|            return std::next(prefix_result.iterator);
 3645|      0|        }
 3646|       |
 3647|    298|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1038|    298|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 286, False: 12]
  |  |  ------------------
  ------------------
 3648|    286|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|    286|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    286|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    286|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    286|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 286]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    286|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    286|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|    286|                    parse_integer_digits_without_thsep(
 3650|    286|                        ranges::subrange{prefix_result.iterator, range.end()},
 3651|    286|                        prefix_result.parsed_base));
 3652|       |
 3653|    286|            auto buf = make_contiguous_buffer(
 3654|    286|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3655|    286|            SCN_TRY(result_it,
  ------------------
  |  | 3958|    286|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    286|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    286|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    286|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 286, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    286|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    286|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    286|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    286|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    286|    }                                                  \
  |  |  |  | 3957|    286|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3656|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3657|      0|                                        prefix_result.parsed_base));
 3658|       |
 3659|      0|            return ranges::next(
 3660|      0|                prefix_result.iterator,
 3661|      0|                ranges::distance(buf.view().begin(), result_it));
 3662|    286|        }
 3663|       |
 3664|     12|        auto locale_options =
 3665|       |#if SCN_DISABLE_LOCALE
 3666|       |            localized_number_formatting_options<CharT>{};
 3667|       |#else
 3668|     12|            localized_number_formatting_options<CharT>{loc};
 3669|     12|#endif
 3670|       |
 3671|     12|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3958|     12|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|     12|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|     12|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 12, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     12|    }                                                  \
  |  |  |  | 3957|     12|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3672|      0|                parse_integer_digits_with_thsep(
 3673|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3674|      0|                    prefix_result.parsed_base, locale_options));
 3675|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3676|      0|            parse_digits_result;
 3677|       |
 3678|      0|        auto nothsep_source_view =
 3679|      0|            std::basic_string_view<CharT>{nothsep_source};
 3680|      0|        SCN_TRY(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3681|      0|            nothsep_source_it,
 3682|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3683|      0|                                prefix_result.parsed_base));
 3684|       |
 3685|      0|        return ranges::next(
 3686|      0|            prefix_result.iterator,
 3687|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3688|      0|                ranges::ssize(thsep_indices));
 3689|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3621|    384|    {
 3622|    384|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3958|    384|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    384|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    384|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    384|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 384]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    384|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    384|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3623|    384|                                   .transform_error(make_eof_scan_error));
 3624|       |
 3625|    384|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3625:13): [True: 0, False: 384]
  ------------------
 3626|      0|            if constexpr (!std::is_signed_v<T>) {
 3627|      0|                return detail::unexpected_scan_error(
 3628|      0|                    scan_error::invalid_scanned_value,
 3629|      0|                    "Unexpected '-' sign when parsing an "
 3630|      0|                    "unsigned value");
 3631|       |            }
 3632|       |            else {
 3633|       |                if (specs.type ==
 3634|       |                    detail::presentation_type::int_unsigned_decimal) {
 3635|       |                    return detail::unexpected_scan_error(
 3636|       |                        scan_error::invalid_scanned_value,
 3637|       |                        "'u'-option disallows negative values");
 3638|       |                }
 3639|       |            }
 3640|      0|        }
 3641|       |
 3642|    384|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3642:13): [True: 0, False: 384]
  ------------------
 3643|      0|            value = T{0};
 3644|      0|            return std::next(prefix_result.iterator);
 3645|      0|        }
 3646|       |
 3647|    384|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1038|    384|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 372, False: 12]
  |  |  ------------------
  ------------------
 3648|    372|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|    372|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    372|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    372|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    372|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 372, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    372|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    372|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    372|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    372|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    372|    }                                                  \
  |  |  |  | 3957|    372|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      0|                    parse_integer_digits_without_thsep(
 3650|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3651|      0|                        prefix_result.parsed_base));
 3652|       |
 3653|      0|            auto buf = make_contiguous_buffer(
 3654|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3655|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3656|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3657|      0|                                        prefix_result.parsed_base));
 3658|       |
 3659|      0|            return ranges::next(
 3660|      0|                prefix_result.iterator,
 3661|      0|                ranges::distance(buf.view().begin(), result_it));
 3662|      0|        }
 3663|       |
 3664|     12|        auto locale_options =
 3665|       |#if SCN_DISABLE_LOCALE
 3666|       |            localized_number_formatting_options<CharT>{};
 3667|       |#else
 3668|     12|            localized_number_formatting_options<CharT>{loc};
 3669|     12|#endif
 3670|       |
 3671|     12|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3958|     12|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|     12|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|     12|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 12, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     12|    }                                                  \
  |  |  |  | 3957|     12|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3672|      0|                parse_integer_digits_with_thsep(
 3673|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3674|      0|                    prefix_result.parsed_base, locale_options));
 3675|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3676|      0|            parse_digits_result;
 3677|       |
 3678|      0|        auto nothsep_source_view =
 3679|      0|            std::basic_string_view<CharT>{nothsep_source};
 3680|      0|        SCN_TRY(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3681|      0|            nothsep_source_it,
 3682|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3683|      0|                                prefix_result.parsed_base));
 3684|       |
 3685|      0|        return ranges::next(
 3686|      0|            prefix_result.iterator,
 3687|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3688|      0|                ranges::ssize(thsep_indices));
 3689|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3621|    298|    {
 3622|    298|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3958|    298|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    298|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    298|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    298|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 298]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    298|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    298|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3623|    298|                                   .transform_error(make_eof_scan_error));
 3624|       |
 3625|    298|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3625:13): [True: 0, False: 298]
  ------------------
 3626|      0|            if constexpr (!std::is_signed_v<T>) {
 3627|      0|                return detail::unexpected_scan_error(
 3628|      0|                    scan_error::invalid_scanned_value,
 3629|      0|                    "Unexpected '-' sign when parsing an "
 3630|      0|                    "unsigned value");
 3631|       |            }
 3632|       |            else {
 3633|       |                if (specs.type ==
 3634|       |                    detail::presentation_type::int_unsigned_decimal) {
 3635|       |                    return detail::unexpected_scan_error(
 3636|       |                        scan_error::invalid_scanned_value,
 3637|       |                        "'u'-option disallows negative values");
 3638|       |                }
 3639|       |            }
 3640|      0|        }
 3641|       |
 3642|    298|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3642:13): [True: 0, False: 298]
  ------------------
 3643|      0|            value = T{0};
 3644|      0|            return std::next(prefix_result.iterator);
 3645|      0|        }
 3646|       |
 3647|    298|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1038|    298|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 286, False: 12]
  |  |  ------------------
  ------------------
 3648|    286|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|    286|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    286|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    286|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    286|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 286]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    286|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    286|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|    286|                    parse_integer_digits_without_thsep(
 3650|    286|                        ranges::subrange{prefix_result.iterator, range.end()},
 3651|    286|                        prefix_result.parsed_base));
 3652|       |
 3653|    286|            auto buf = make_contiguous_buffer(
 3654|    286|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3655|    286|            SCN_TRY(result_it,
  ------------------
  |  | 3958|    286|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    286|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    286|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    286|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 286, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    286|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    286|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    286|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    286|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    286|    }                                                  \
  |  |  |  | 3957|    286|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3656|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3657|      0|                                        prefix_result.parsed_base));
 3658|       |
 3659|      0|            return ranges::next(
 3660|      0|                prefix_result.iterator,
 3661|      0|                ranges::distance(buf.view().begin(), result_it));
 3662|    286|        }
 3663|       |
 3664|     12|        auto locale_options =
 3665|       |#if SCN_DISABLE_LOCALE
 3666|       |            localized_number_formatting_options<CharT>{};
 3667|       |#else
 3668|     12|            localized_number_formatting_options<CharT>{loc};
 3669|     12|#endif
 3670|       |
 3671|     12|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3958|     12|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|     12|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|     12|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 12, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     12|    }                                                  \
  |  |  |  | 3957|     12|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3672|      0|                parse_integer_digits_with_thsep(
 3673|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3674|      0|                    prefix_result.parsed_base, locale_options));
 3675|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3676|      0|            parse_digits_result;
 3677|       |
 3678|      0|        auto nothsep_source_view =
 3679|      0|            std::basic_string_view<CharT>{nothsep_source};
 3680|      0|        SCN_TRY(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3681|      0|            nothsep_source_it,
 3682|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3683|      0|                                prefix_result.parsed_base));
 3684|       |
 3685|      0|        return ranges::next(
 3686|      0|            prefix_result.iterator,
 3687|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3688|      0|                ranges::ssize(thsep_indices));
 3689|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3621|    346|    {
 3622|    346|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3958|    346|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    346|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    346|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    346|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 346]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    346|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    346|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3623|    346|                                   .transform_error(make_eof_scan_error));
 3624|       |
 3625|    346|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3625:13): [True: 0, False: 346]
  ------------------
 3626|      0|            if constexpr (!std::is_signed_v<T>) {
 3627|      0|                return detail::unexpected_scan_error(
 3628|      0|                    scan_error::invalid_scanned_value,
 3629|      0|                    "Unexpected '-' sign when parsing an "
 3630|      0|                    "unsigned value");
 3631|       |            }
 3632|       |            else {
 3633|       |                if (specs.type ==
 3634|       |                    detail::presentation_type::int_unsigned_decimal) {
 3635|       |                    return detail::unexpected_scan_error(
 3636|       |                        scan_error::invalid_scanned_value,
 3637|       |                        "'u'-option disallows negative values");
 3638|       |                }
 3639|       |            }
 3640|      0|        }
 3641|       |
 3642|    346|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3642:13): [True: 0, False: 346]
  ------------------
 3643|      0|            value = T{0};
 3644|      0|            return std::next(prefix_result.iterator);
 3645|      0|        }
 3646|       |
 3647|    346|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1038|    346|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 346, False: 0]
  |  |  ------------------
  ------------------
 3648|    346|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|    346|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    346|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    346|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    346|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 346, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    346|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    346|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    346|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    346|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    346|    }                                                  \
  |  |  |  | 3957|    346|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      0|                    parse_integer_digits_without_thsep(
 3650|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3651|      0|                        prefix_result.parsed_base));
 3652|       |
 3653|      0|            auto buf = make_contiguous_buffer(
 3654|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3655|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3656|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3657|      0|                                        prefix_result.parsed_base));
 3658|       |
 3659|      0|            return ranges::next(
 3660|      0|                prefix_result.iterator,
 3661|      0|                ranges::distance(buf.view().begin(), result_it));
 3662|      0|        }
 3663|       |
 3664|      0|        auto locale_options =
 3665|       |#if SCN_DISABLE_LOCALE
 3666|       |            localized_number_formatting_options<CharT>{};
 3667|       |#else
 3668|      0|            localized_number_formatting_options<CharT>{loc};
 3669|      0|#endif
 3670|       |
 3671|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3672|      0|                parse_integer_digits_with_thsep(
 3673|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3674|      0|                    prefix_result.parsed_base, locale_options));
 3675|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3676|      0|            parse_digits_result;
 3677|       |
 3678|      0|        auto nothsep_source_view =
 3679|      0|            std::basic_string_view<CharT>{nothsep_source};
 3680|      0|        SCN_TRY(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3681|      0|            nothsep_source_it,
 3682|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3683|      0|                                prefix_result.parsed_base));
 3684|       |
 3685|      0|        return ranges::next(
 3686|      0|            prefix_result.iterator,
 3687|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3688|      0|                ranges::ssize(thsep_indices));
 3689|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3621|    900|    {
 3622|    900|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3958|    900|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    900|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    900|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    900|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 900]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    900|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    900|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3623|    900|                                   .transform_error(make_eof_scan_error));
 3624|       |
 3625|    900|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3625:13): [True: 0, False: 900]
  ------------------
 3626|      0|            if constexpr (!std::is_signed_v<T>) {
 3627|      0|                return detail::unexpected_scan_error(
 3628|      0|                    scan_error::invalid_scanned_value,
 3629|      0|                    "Unexpected '-' sign when parsing an "
 3630|      0|                    "unsigned value");
 3631|       |            }
 3632|       |            else {
 3633|       |                if (specs.type ==
 3634|       |                    detail::presentation_type::int_unsigned_decimal) {
 3635|       |                    return detail::unexpected_scan_error(
 3636|       |                        scan_error::invalid_scanned_value,
 3637|       |                        "'u'-option disallows negative values");
 3638|       |                }
 3639|       |            }
 3640|      0|        }
 3641|       |
 3642|    900|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3642:13): [True: 0, False: 900]
  ------------------
 3643|      0|            value = T{0};
 3644|      0|            return std::next(prefix_result.iterator);
 3645|      0|        }
 3646|       |
 3647|    900|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1038|    900|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 900, False: 0]
  |  |  ------------------
  ------------------
 3648|    900|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|    900|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    900|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    900|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    900|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 900]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    900|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    900|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|    900|                    parse_integer_digits_without_thsep(
 3650|    900|                        ranges::subrange{prefix_result.iterator, range.end()},
 3651|    900|                        prefix_result.parsed_base));
 3652|       |
 3653|    900|            auto buf = make_contiguous_buffer(
 3654|    900|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3655|    900|            SCN_TRY(result_it,
  ------------------
  |  | 3958|    900|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    900|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    900|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    900|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 900, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    900|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    900|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    900|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    900|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    900|    }                                                  \
  |  |  |  | 3957|    900|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3656|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3657|      0|                                        prefix_result.parsed_base));
 3658|       |
 3659|      0|            return ranges::next(
 3660|      0|                prefix_result.iterator,
 3661|      0|                ranges::distance(buf.view().begin(), result_it));
 3662|    900|        }
 3663|       |
 3664|      0|        auto locale_options =
 3665|       |#if SCN_DISABLE_LOCALE
 3666|       |            localized_number_formatting_options<CharT>{};
 3667|       |#else
 3668|      0|            localized_number_formatting_options<CharT>{loc};
 3669|      0|#endif
 3670|       |
 3671|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3672|      0|                parse_integer_digits_with_thsep(
 3673|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3674|      0|                    prefix_result.parsed_base, locale_options));
 3675|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3676|      0|            parse_digits_result;
 3677|       |
 3678|      0|        auto nothsep_source_view =
 3679|      0|            std::basic_string_view<CharT>{nothsep_source};
 3680|      0|        SCN_TRY(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3681|      0|            nothsep_source_it,
 3682|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3683|      0|                                prefix_result.parsed_base));
 3684|       |
 3685|      0|        return ranges::next(
 3686|      0|            prefix_result.iterator,
 3687|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3688|      0|                ranges::ssize(thsep_indices));
 3689|      0|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3187|  3.16k|    {
 3188|  3.16k|        reader_error_handler eh{};
 3189|  3.16k|        get_derived().check_specs_impl(specs, eh);
 3190|  3.16k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1039|  3.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.43k, False: 730]
  |  |  ------------------
  ------------------
 3191|  2.43k|            return detail::unexpected_scan_error(
 3192|  2.43k|                scan_error::invalid_format_string, eh.m_msg);
 3193|  2.43k|        }
 3194|    730|        return {};
 3195|  3.16k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3199|  3.16k|    {
 3200|  3.16k|        return static_cast<Derived&>(*this);
 3201|  3.16k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4230|  3.16k|    {
 4231|  3.16k|        detail::check_float_type_specs(specs, eh);
 4232|  3.16k|    }
_ZNK3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3182|  1.36k|    {
 3183|  1.36k|        return true;
 3184|  1.36k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4302|    692|    {
 4303|    692|        unsigned options{};
 4304|    692|        if (specs.localized) {
  ------------------
  |  Branch (4304:13): [True: 18, False: 674]
  ------------------
 4305|     18|            options |= float_reader_base::allow_thsep;
 4306|     18|        }
 4307|       |
 4308|    692|        SCN_GCC_COMPAT_PUSH
 4309|    692|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4310|       |
 4311|    692|        switch (specs.type) {
 4312|     28|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4312:13): [True: 28, False: 664]
  ------------------
 4313|     28|                return options | float_reader_base::allow_fixed;
 4314|       |
 4315|     12|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4315:13): [True: 12, False: 680]
  ------------------
 4316|     12|                return options | float_reader_base::allow_scientific;
 4317|       |
 4318|     16|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4318:13): [True: 16, False: 676]
  ------------------
 4319|     16|                return options | float_reader_base::allow_hex;
 4320|       |
 4321|     12|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4321:13): [True: 12, False: 680]
  ------------------
 4322|     12|                return options | float_reader_base::allow_scientific |
 4323|     12|                       float_reader_base::allow_fixed;
 4324|       |
 4325|    624|            case detail::presentation_type::none:
  ------------------
  |  Branch (4325:13): [True: 624, False: 68]
  ------------------
 4326|    624|                return options | float_reader_base::allow_scientific |
 4327|    624|                       float_reader_base::allow_fixed |
 4328|    624|                       float_reader_base::allow_hex;
 4329|       |
 4330|      0|            default:
  ------------------
  |  Branch (4330:13): [True: 0, False: 692]
  ------------------
 4331|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4332|    692|                SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4333|    692|        }
 4334|       |
 4335|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4336|    692|    }
_ZN3scn2v44impl12float_readerIcEC2Ej:
 3733|    692|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v44impl35localized_number_formatting_optionsIcEC2Ev:
 1869|  1.32k|    localized_number_formatting_options() = default;
_ZN3scn2v44impl24contiguous_range_factoryIcEC2Ev:
 1630|  2.64k|    contiguous_range_factory() = default;
_ZN3scn2v44impl12float_readerIcE17handle_separatorsEv:
 4121|    908|    {
 4122|    908|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4122:13): [True: 908, False: 0]
  ------------------
 4123|    908|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4123:13): [True: 908, False: 0]
  ------------------
 4124|    908|            return;
 4125|    908|        }
 4126|       |
 4127|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4128|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4128:13): [True: 0, False: 0]
  ------------------
 4129|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4129:27): [True: 0, False: 0]
  ------------------
 4130|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4130:21): [True: 0, False: 0]
  ------------------
 4131|      0|                    ch = CharT{'.'};
 4132|      0|                }
 4133|      0|            }
 4134|      0|        }
 4135|       |
 4136|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4136:13): [True: 0, False: 0]
  ------------------
 4137|      0|            return;
 4138|      0|        }
 4139|       |
 4140|      0|        auto first =
 4141|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4142|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4142:13): [True: 0, False: 0]
  ------------------
 4143|      0|            return;
 4144|      0|        }
 4145|       |
 4146|      0|        m_thsep_indices.push_back(
 4147|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4148|       |
 4149|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4149:31): [True: 0, False: 0]
  ------------------
 4150|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4150:17): [True: 0, False: 0]
  ------------------
 4151|      0|                *first++ = std::move(*it);
 4152|      0|            }
 4153|      0|            else {
 4154|      0|                m_thsep_indices.push_back(
 4155|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4156|      0|            }
 4157|      0|        }
 4158|       |
 4159|      0|        str.erase(first, str.end());
 4160|      0|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1685|    992|    {
 1686|    992|        return m_storage.has_value();
 1687|    992|    }
_ZNR3scn2v44impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1690|    496|    {
 1691|    496|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  | 1104|    496|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    496|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1692|    496|        return *m_storage;
 1693|    496|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  762|    394|    {
  763|    394|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1110|    394|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    394|    }
_ZN3scn2v44impl12float_readerIcE21read_source_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3752|     12|    {
 3753|     12|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3754|     12|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  | 1038|     12|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 12]
  |  |  ------------------
  ------------------
 3755|      0|            m_locale_options.thousands_sep = CharT{0};
 3756|      0|        }
 3757|       |
 3758|     12|        return read_source_impl(range);
 3759|     12|    }
_ZN3scn2v44impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3778|    394|    {
 3779|    394|        SCN_TRY(sign_result,
  ------------------
  |  | 3958|    394|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    394|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    394|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    394|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 394]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    394|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    394|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3780|    394|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3781|    394|        auto it = sign_result.first;
 3782|    394|        m_sign = sign_result.second;
 3783|       |
 3784|    394|        auto digits_begin = it;
 3785|    394|        auto r = ranges::subrange{it, range.end()};
 3786|       |        if constexpr (ranges::contiguous_range<Range> &&
 3787|       |                      ranges::sized_range<Range>) {
 3788|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3789|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3790|       |                SCN_TRY_ASSIGN(
 3791|       |                    it,
 3792|       |                    do_read_source_impl(
 3793|       |                        r,
 3794|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3795|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3796|       |            }
 3797|       |            else {
 3798|       |                auto cb = [&](const auto& rr)
 3799|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3800|       |                    auto res = read_all(rr);
 3801|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3802|       |                        return detail::unexpected_scan_error(
 3803|       |                            scan_error::invalid_scanned_value,
 3804|       |                            "Invalid float value");
 3805|       |                    }
 3806|       |                    return res;
 3807|       |                };
 3808|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3809|       |            }
 3810|       |        }
 3811|    394|        else {
 3812|    394|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3953|    394|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|    394|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|    394|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 394, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|    394|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|    394|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    394|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    394|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|    394|    }                                                  \
  |  | 3957|    394|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|    394|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3813|      0|                it,
 3814|      0|                do_read_source_impl(
 3815|      0|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3816|      0|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3817|      0|        }
 3818|       |
 3819|    394|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1104|    394|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    394|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3820|       |
 3821|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  |  Branch (3821:48): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3822:13): [True: 0, False: 0]
  ------------------
 3823|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3823:13): [True: 0, False: 0]
  ------------------
 3824|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3825|      0|        }
 3826|       |
 3827|      0|        handle_separators();
 3828|       |
 3829|      0|        return it;
 3830|    394|    }
_ZN3scn2v44impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 4064|    394|    {
 4065|    394|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4066|    394|        const bool allowed_nonhex =
 4067|    394|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4068|    394|             ~static_cast<unsigned>(allow_hex)) != 0;
 4069|       |
 4070|    394|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4070:39): [True: 394, False: 0]
  |  Branch (4070:45): [True: 0, False: 394]
  ------------------
 4071|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4072|      0|                scan_error::invalid_scanned_value,
 4073|      0|                "Invalid infinite floating-point value"));
 4074|      0|        }
 4075|    394|        else if (r) {
  ------------------
  |  Branch (4075:18): [True: 0, False: 394]
  ------------------
 4076|      0|            return *r;
 4077|      0|        }
 4078|       |
 4079|    394|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4079:39): [True: 394, False: 0]
  |  Branch (4079:45): [True: 0, False: 394]
  ------------------
 4080|      0|            return unexpected(r.error());
 4081|      0|        }
 4082|    394|        else if (r) {
  ------------------
  |  Branch (4082:18): [True: 0, False: 394]
  ------------------
 4083|      0|            return *r;
 4084|      0|        }
 4085|       |
 4086|    394|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4086:13): [True: 364, False: 30]
  |  Branch (4086:28): [True: 8, False: 356]
  ------------------
 4087|       |            // only hex allowed:
 4088|       |            // prefix "0x" allowed, not required
 4089|      8|            auto it = range.begin();
 4090|       |
 4091|      8|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4091:22): [True: 0, False: 8]
  ------------------
 4092|      0|                m_kind = float_kind::hex_with_prefix;
 4093|      0|                it = *r;
 4094|      0|            }
 4095|      8|            else {
 4096|      8|                m_kind = float_kind::hex_without_prefix;
 4097|      8|            }
 4098|       |
 4099|      8|            return read_hex(ranges::subrange{it, range.end()});
 4100|      8|        }
 4101|    386|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4101:13): [True: 30, False: 356]
  |  Branch (4101:29): [True: 30, False: 0]
  ------------------
 4102|       |            // only nonhex allowed:
 4103|       |            // no prefix allowed
 4104|     30|            m_kind = float_kind::generic;
 4105|     30|            return read_regular_float(range);
 4106|     30|        }
 4107|       |        // both hex and nonhex allowed:
 4108|       |        // check for "0x" prefix -> hex,
 4109|       |        // regular otherwise
 4110|       |
 4111|    356|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  | 1039|    356|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 356]
  |  |  ------------------
  ------------------
 4112|      0|            m_kind = float_kind::hex_with_prefix;
 4113|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4114|      0|        }
 4115|       |
 4116|    356|        m_kind = float_kind::generic;
 4117|    356|        return read_regular(range);
 4118|    356|    }
_ZN3scn2v44impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3872|    394|    {
 3873|    394|        auto it = range.begin();
 3874|    394|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3874:73): [True: 394, False: 0]
  ------------------
 3875|    394|            return unexpected(r.error());
 3876|    394|        }
 3877|      0|        else {
 3878|      0|            it = *r;
 3879|      0|        }
 3880|       |
 3881|      0|        if (auto r = read_matching_string_classic_nocase(
 3882|      0|                ranges::subrange{it, range.end()}, "inity");
 3883|      0|            !r) {
  ------------------
  |  Branch (3883:13): [True: 0, False: 0]
  ------------------
 3884|      0|            m_kind = float_kind::inf_short;
 3885|      0|            return it;
 3886|      0|        }
 3887|      0|        else {
 3888|      0|            m_kind = float_kind::inf_long;
 3889|      0|            return *r;
 3890|      0|        }
 3891|      0|    }
_ZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3895|    394|    {
 3896|    394|        auto it = range.begin();
 3897|    394|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3897:73): [True: 394, False: 0]
  ------------------
 3898|    394|            return r.transform_error(map_parse_error_to_scan_error(
 3899|    394|                scan_error::invalid_scanned_value,
 3900|    394|                "Invalid floating-point NaN value"));
 3901|    394|        }
 3902|      0|        else {
 3903|      0|            it = *r;
 3904|      0|        }
 3905|       |
 3906|      0|        if (auto r =
 3907|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3908|      0|            !r) {
  ------------------
  |  Branch (3908:13): [True: 0, False: 0]
  ------------------
 3909|      0|            m_kind = float_kind::nan_simple;
 3910|      0|            return it;
 3911|      0|        }
 3912|      0|        else {
 3913|      0|            it = *r;
 3914|      0|        }
 3915|       |
 3916|      0|        auto payload_beg_it = it;
 3917|      0|        it = read_while_code_unit(
 3918|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3919|      0|                return is_ascii_char(ch) &&
 3920|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3921|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3922|      0|            });
 3923|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3924|       |
 3925|      0|        m_kind = float_kind::nan_with_payload;
 3926|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3926:18): [True: 0, False: 0]
  ------------------
 3927|      0|                                             ')')) {
 3928|      0|            return *r;
 3929|      0|        }
 3930|      0|        return detail::unexpected_scan_error(
 3931|      0|            scan_error::invalid_scanned_value,
 3932|      0|            "Invalid floating-point NaN payload");
 3933|      0|    }
_ZN3scn2v44impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3865|    364|    {
 3866|    364|        return read_matching_string_classic_nocase(range, "0x");
 3867|    364|    }
_ZN3scn2v44impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3966|      8|    {
 3967|      8|        auto it = range.begin();
 3968|       |
 3969|      8|        std::ptrdiff_t digits_count = 0;
 3970|      8|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3971|      8|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 8, False: 0]
  |  |  ------------------
  ------------------
 3972|      8|            return r.transform_error(map_parse_error_to_scan_error(
 3973|      8|                scan_error::invalid_scanned_value,
 3974|      8|                "Invalid hexadecimal floating-point value"));
 3975|      8|        }
 3976|      0|        else {
 3977|      0|            digits_count += ranges::distance(it, *r);
 3978|      0|            it = *r;
 3979|      0|        }
 3980|       |
 3981|      0|        m_integral_part_length = digits_count;
 3982|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3982:18): [True: 0, False: 0]
  ------------------
 3983|      0|                                             m_locale_options.decimal_point)) {
 3984|      0|            it = *r;
 3985|      0|        }
 3986|       |
 3987|      0|        if (auto r =
  ------------------
  |  Branch (3987:18): [True: 0, False: 0]
  ------------------
 3988|      0|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3989|      0|            digits_count += ranges::distance(it, *r);
 3990|      0|            it = *r;
 3991|      0|        }
 3992|       |
 3993|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3994|      0|            return detail::unexpected_scan_error(
 3995|      0|                scan_error::invalid_scanned_value,
 3996|      0|                "No significand digits in hexfloat");
 3997|      0|        }
 3998|       |
 3999|      0|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 4000|       |
 4001|      0|        return it;
 4002|      0|    }
_ZN3scn2v44impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3850|      8|    {
 3851|      8|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  | 1039|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 8]
  |  |  |  Branch (1039:45): [True: 0, False: 8]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3852|      8|                         thsep_allowed)) {
 3853|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3854|      0|                return char_to_int(ch) < 16 ||
 3855|      0|                       ch == m_locale_options.thousands_sep;
 3856|      0|            });
 3857|      0|        }
 3858|       |
 3859|      8|        return read_while1_code_unit(
 3860|      8|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3861|      8|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_:
  742|      8|        : m_fptr([](storage fn,
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|      8|              if constexpr (std::is_void_v<R>) {
  746|      8|                  obj(static_cast<decltype(args)>(args)...);
  747|      8|              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
  752|      8|          m_storage(std::addressof(f))
  753|      8|    {
  754|      8|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES18_c:
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|      8|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      8|        else if constexpr (std::is_object_v<T>) {
  688|      8|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      8|    }
_ZZN3scn2v44impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3860|      8|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_TnPNSP_9enable_ifIXsr3stdE11is_object_vISR_EEvE4typeELPv0EEEPSR_:
  660|      8|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      8|        {
  662|      8|        }
_ZN3scn2v44impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 4007|    386|    {
 4008|    386|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 4009|    386|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (4009:35): [True: 372, False: 14]
  |  Branch (4009:50): [True: 8, False: 364]
  ------------------
 4010|       |
 4011|    386|        auto it = ranges::begin(range);
 4012|    386|        std::ptrdiff_t digits_count = 0;
 4013|       |
 4014|    386|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 4015|    386|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|    386|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 386, False: 0]
  |  |  ------------------
  ------------------
 4016|    386|            return r.transform_error(
 4017|    386|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 4018|    386|                                              "Invalid floating-point value"));
 4019|    386|        }
 4020|      0|        else {
 4021|      0|            digits_count += ranges::distance(it, *r);
 4022|      0|            it = *r;
 4023|      0|        }
 4024|       |
 4025|      0|        m_integral_part_length = digits_count;
 4026|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (4026:18): [True: 0, False: 0]
  ------------------
 4027|      0|                                             m_locale_options.decimal_point)) {
 4028|      0|            it = *r;
 4029|      0|        }
 4030|       |
 4031|      0|        if (auto r =
  ------------------
  |  Branch (4031:18): [True: 0, False: 0]
  ------------------
 4032|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4033|      0|            digits_count += ranges::distance(it, *r);
 4034|      0|            it = *r;
 4035|      0|        }
 4036|       |
 4037|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 4038|      0|            return detail::unexpected_scan_error(
 4039|      0|                scan_error::invalid_scanned_value,
 4040|      0|                "No significand digits in float");
 4041|      0|        }
 4042|       |
 4043|      0|        auto beg_exp_it = it;
 4044|      0|        if (allowed_exp) {
  ------------------
  |  Branch (4044:13): [True: 0, False: 0]
  ------------------
 4045|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4046|      0|        }
 4047|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4047:13): [True: 0, False: 0]
  |  Branch (4047:29): [True: 0, False: 0]
  ------------------
 4048|      0|            return detail::unexpected_scan_error(
 4049|      0|                scan_error::invalid_scanned_value,
 4050|      0|                "No exponent given to scientific float");
 4051|      0|        }
 4052|       |
 4053|      0|        m_kind =
 4054|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4054:13): [True: 0, False: 0]
  ------------------
 4055|       |
 4056|      0|        return it;
 4057|      0|    }
_ZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3835|    386|    {
 3836|    386|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  | 1039|    386|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 386]
  |  |  |  Branch (1039:45): [True: 0, False: 386]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3837|    386|                         thsep_allowed)) {
 3838|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3839|      0|                return char_to_int(ch) < 10 ||
 3840|      0|                       ch == m_locale_options.thousands_sep;
 3841|      0|            });
 3842|      0|        }
 3843|       |
 3844|    386|        return read_while1_code_unit(
 3845|    386|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3846|    386|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_:
  742|    386|        : m_fptr([](storage fn,
  743|    386|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    386|              cvref<T> obj = *get<T>(fn);
  745|    386|              if constexpr (std::is_void_v<R>) {
  746|    386|                  obj(static_cast<decltype(args)>(args)...);
  747|    386|              }
  748|    386|              else {
  749|    386|                  return obj(static_cast<decltype(args)>(args)...);
  750|    386|              }
  751|    386|          }),
  752|    386|          m_storage(std::addressof(f))
  753|    386|    {
  754|    386|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES18_c:
  743|    386|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    386|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    386|              else {
  749|    386|                  return obj(static_cast<decltype(args)>(args)...);
  750|    386|              }
  751|    386|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|    386|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    386|        else if constexpr (std::is_object_v<T>) {
  688|    386|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    386|    }
_ZZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3845|    386|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_TnPNSP_9enable_ifIXsr3stdE11is_object_vISR_EEvE4typeELPv0EEEPSR_:
  660|    386|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    386|        {
  662|    386|        }
_ZN3scn2v44impl12float_readerIcE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3738|    382|    {
 3739|    382|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  | 1039|    382|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 382]
  |  |  ------------------
  ------------------
 3740|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3741|      0|                classic_with_thsep_tag{}};
 3742|      0|        }
 3743|       |
 3744|    382|        return read_source_impl(range);
 3745|    382|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|    930|    {
  763|    930|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1110|    930|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    930|    }
_ZN3scn2v44impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3752|      6|    {
 3753|      6|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3754|      6|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  | 1038|      6|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 6]
  |  |  ------------------
  ------------------
 3755|      0|            m_locale_options.thousands_sep = CharT{0};
 3756|      0|        }
 3757|       |
 3758|      6|        return read_source_impl(range);
 3759|      6|    }
_ZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3778|    930|    {
 3779|    930|        SCN_TRY(sign_result,
  ------------------
  |  | 3958|    930|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    930|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    930|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    930|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 930]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    930|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    930|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3780|    930|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3781|    930|        auto it = sign_result.first;
 3782|    930|        m_sign = sign_result.second;
 3783|       |
 3784|    930|        auto digits_begin = it;
 3785|    930|        auto r = ranges::subrange{it, range.end()};
 3786|       |        if constexpr (ranges::contiguous_range<Range> &&
 3787|    930|                      ranges::sized_range<Range>) {
 3788|    930|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  | 1039|  1.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 930]
  |  |  |  Branch (1039:45): [True: 0, False: 930]
  |  |  |  Branch (1039:45): [True: 0, False: 930]
  |  |  ------------------
  ------------------
 3789|    930|                             m_locale_options.decimal_point != CharT{'.'})) {
 3790|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|      0|    }                                                  \
  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3791|      0|                    it,
 3792|      0|                    do_read_source_impl(
 3793|      0|                        r,
 3794|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3795|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3796|      0|            }
 3797|    930|            else {
 3798|    930|                auto cb = [&](const auto& rr)
 3799|    930|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3800|    930|                    auto res = read_all(rr);
 3801|    930|                    if (SCN_UNLIKELY(res == r.begin())) {
 3802|    930|                        return detail::unexpected_scan_error(
 3803|    930|                            scan_error::invalid_scanned_value,
 3804|    930|                            "Invalid float value");
 3805|    930|                    }
 3806|    930|                    return res;
 3807|    930|                };
 3808|    930|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3953|    930|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|    930|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|    930|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 22, False: 908]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|     22|    }                                                  \
  |  | 3957|    930|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|    930|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3809|    908|            }
 3810|       |        }
 3811|       |        else {
 3812|       |            SCN_TRY_ASSIGN(
 3813|       |                it,
 3814|       |                do_read_source_impl(
 3815|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3816|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3817|       |        }
 3818|       |
 3819|    930|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1104|    930|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    930|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3820|       |
 3821|    908|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3821:13): [True: 908, False: 0]
  |  Branch (3821:48): [True: 908, False: 0]
  ------------------
 3822|    908|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3822:13): [True: 908, False: 0]
  ------------------
 3823|    908|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3823:13): [True: 908, False: 0]
  ------------------
 3824|    908|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3825|    908|        }
 3826|       |
 3827|    908|        handle_separators();
 3828|       |
 3829|    908|        return it;
 3830|    930|    }
_ZN3scn2v44impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3872|    930|    {
 3873|    930|        auto it = range.begin();
 3874|    930|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3874:73): [True: 930, False: 0]
  ------------------
 3875|    930|            return unexpected(r.error());
 3876|    930|        }
 3877|      0|        else {
 3878|      0|            it = *r;
 3879|      0|        }
 3880|       |
 3881|      0|        if (auto r = read_matching_string_classic_nocase(
 3882|      0|                ranges::subrange{it, range.end()}, "inity");
 3883|      0|            !r) {
  ------------------
  |  Branch (3883:13): [True: 0, False: 0]
  ------------------
 3884|      0|            m_kind = float_kind::inf_short;
 3885|      0|            return it;
 3886|      0|        }
 3887|      0|        else {
 3888|      0|            m_kind = float_kind::inf_long;
 3889|      0|            return *r;
 3890|      0|        }
 3891|      0|    }
_ZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3895|    930|    {
 3896|    930|        auto it = range.begin();
 3897|    930|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3897:73): [True: 930, False: 0]
  ------------------
 3898|    930|            return r.transform_error(map_parse_error_to_scan_error(
 3899|    930|                scan_error::invalid_scanned_value,
 3900|    930|                "Invalid floating-point NaN value"));
 3901|    930|        }
 3902|      0|        else {
 3903|      0|            it = *r;
 3904|      0|        }
 3905|       |
 3906|      0|        if (auto r =
 3907|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3908|      0|            !r) {
  ------------------
  |  Branch (3908:13): [True: 0, False: 0]
  ------------------
 3909|      0|            m_kind = float_kind::nan_simple;
 3910|      0|            return it;
 3911|      0|        }
 3912|      0|        else {
 3913|      0|            it = *r;
 3914|      0|        }
 3915|       |
 3916|      0|        auto payload_beg_it = it;
 3917|      0|        it = read_while_code_unit(
 3918|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3919|      0|                return is_ascii_char(ch) &&
 3920|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3921|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3922|      0|            });
 3923|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3924|       |
 3925|      0|        m_kind = float_kind::nan_with_payload;
 3926|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3926:18): [True: 0, False: 0]
  ------------------
 3927|      0|                                             ')')) {
 3928|      0|            return *r;
 3929|      0|        }
 3930|      0|        return detail::unexpected_scan_error(
 3931|      0|            scan_error::invalid_scanned_value,
 3932|      0|            "Invalid floating-point NaN payload");
 3933|      0|    }
_ZN3scn2v44impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3865|    908|    {
 3866|    908|        return read_matching_string_classic_nocase(range, "0x");
 3867|    908|    }
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2127|     22|{
 2128|     22|    auto it = read_while_code_unit(range, pred);
 2129|     22|    if (it == range.begin()) {
  ------------------
  |  Branch (2129:9): [True: 22, False: 0]
  ------------------
 2130|     22|        return unexpected(parse_error::error);
 2131|     22|    }
 2132|      0|    return it;
 2133|     22|}
_ZN3scn2v44impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 4007|     22|    {
 4008|     22|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 4009|     22|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (4009:35): [True: 8, False: 14]
  |  Branch (4009:50): [True: 4, False: 4]
  ------------------
 4010|       |
 4011|     22|        auto it = ranges::begin(range);
 4012|     22|        std::ptrdiff_t digits_count = 0;
 4013|       |
 4014|     22|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 4015|     22|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 22, False: 0]
  |  |  ------------------
  ------------------
 4016|     22|            return r.transform_error(
 4017|     22|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 4018|     22|                                              "Invalid floating-point value"));
 4019|     22|        }
 4020|      0|        else {
 4021|      0|            digits_count += ranges::distance(it, *r);
 4022|      0|            it = *r;
 4023|      0|        }
 4024|       |
 4025|      0|        m_integral_part_length = digits_count;
 4026|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (4026:18): [True: 0, False: 0]
  ------------------
 4027|      0|                                             m_locale_options.decimal_point)) {
 4028|      0|            it = *r;
 4029|      0|        }
 4030|       |
 4031|      0|        if (auto r =
  ------------------
  |  Branch (4031:18): [True: 0, False: 0]
  ------------------
 4032|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4033|      0|            digits_count += ranges::distance(it, *r);
 4034|      0|            it = *r;
 4035|      0|        }
 4036|       |
 4037|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 4038|      0|            return detail::unexpected_scan_error(
 4039|      0|                scan_error::invalid_scanned_value,
 4040|      0|                "No significand digits in float");
 4041|      0|        }
 4042|       |
 4043|      0|        auto beg_exp_it = it;
 4044|      0|        if (allowed_exp) {
  ------------------
  |  Branch (4044:13): [True: 0, False: 0]
  ------------------
 4045|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4046|      0|        }
 4047|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4047:13): [True: 0, False: 0]
  |  Branch (4047:29): [True: 0, False: 0]
  ------------------
 4048|      0|            return detail::unexpected_scan_error(
 4049|      0|                scan_error::invalid_scanned_value,
 4050|      0|                "No exponent given to scientific float");
 4051|      0|        }
 4052|       |
 4053|      0|        m_kind =
 4054|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4054:13): [True: 0, False: 0]
  ------------------
 4055|       |
 4056|      0|        return it;
 4057|      0|    }
_ZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3835|     22|    {
 3836|     22|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  | 1039|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 22]
  |  |  |  Branch (1039:45): [True: 0, False: 22]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3837|     22|                         thsep_allowed)) {
 3838|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3839|      0|                return char_to_int(ch) < 10 ||
 3840|      0|                       ch == m_locale_options.thousands_sep;
 3841|      0|            });
 3842|      0|        }
 3843|       |
 3844|     22|        return read_while1_code_unit(
 3845|     22|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3846|     22|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|     22|        : m_fptr([](storage fn,
  743|     22|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     22|              cvref<T> obj = *get<T>(fn);
  745|     22|              if constexpr (std::is_void_v<R>) {
  746|     22|                  obj(static_cast<decltype(args)>(args)...);
  747|     22|              }
  748|     22|              else {
  749|     22|                  return obj(static_cast<decltype(args)>(args)...);
  750|     22|              }
  751|     22|          }),
  752|     22|          m_storage(std::addressof(f))
  753|     22|    {
  754|     22|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|     22|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     22|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     22|              else {
  749|     22|                  return obj(static_cast<decltype(args)>(args)...);
  750|     22|              }
  751|     22|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|     22|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     22|        else if constexpr (std::is_object_v<T>) {
  688|     22|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     22|    }
_ZZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3845|     22|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     22|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     22|        {
  662|     22|        }
_ZN3scn2v44impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4064|    930|    {
 4065|    930|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4066|    930|        const bool allowed_nonhex =
 4067|    930|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4068|    930|             ~static_cast<unsigned>(allow_hex)) != 0;
 4069|       |
 4070|    930|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4070:39): [True: 930, False: 0]
  |  Branch (4070:45): [True: 0, False: 930]
  ------------------
 4071|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4072|      0|                scan_error::invalid_scanned_value,
 4073|      0|                "Invalid infinite floating-point value"));
 4074|      0|        }
 4075|    930|        else if (r) {
  ------------------
  |  Branch (4075:18): [True: 0, False: 930]
  ------------------
 4076|      0|            return *r;
 4077|      0|        }
 4078|       |
 4079|    930|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4079:39): [True: 930, False: 0]
  |  Branch (4079:45): [True: 0, False: 930]
  ------------------
 4080|      0|            return unexpected(r.error());
 4081|      0|        }
 4082|    930|        else if (r) {
  ------------------
  |  Branch (4082:18): [True: 0, False: 930]
  ------------------
 4083|      0|            return *r;
 4084|      0|        }
 4085|       |
 4086|    930|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4086:13): [True: 908, False: 22]
  |  Branch (4086:28): [True: 8, False: 900]
  ------------------
 4087|       |            // only hex allowed:
 4088|       |            // prefix "0x" allowed, not required
 4089|      8|            auto it = range.begin();
 4090|       |
 4091|      8|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4091:22): [True: 0, False: 8]
  ------------------
 4092|      0|                m_kind = float_kind::hex_with_prefix;
 4093|      0|                it = *r;
 4094|      0|            }
 4095|      8|            else {
 4096|      8|                m_kind = float_kind::hex_without_prefix;
 4097|      8|            }
 4098|       |
 4099|      8|            return read_hex(ranges::subrange{it, range.end()});
 4100|      8|        }
 4101|    922|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4101:13): [True: 22, False: 900]
  |  Branch (4101:29): [True: 22, False: 0]
  ------------------
 4102|       |            // only nonhex allowed:
 4103|       |            // no prefix allowed
 4104|     22|            m_kind = float_kind::generic;
 4105|     22|            return read_regular_float(range);
 4106|     22|        }
 4107|       |        // both hex and nonhex allowed:
 4108|       |        // check for "0x" prefix -> hex,
 4109|       |        // regular otherwise
 4110|       |
 4111|    900|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  | 1039|    900|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 900]
  |  |  ------------------
  ------------------
 4112|      0|            m_kind = float_kind::hex_with_prefix;
 4113|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4114|      0|        }
 4115|       |
 4116|    900|        m_kind = float_kind::generic;
 4117|    900|        return read_regular(range);
 4118|    900|    }
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3799|    908|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3800|    908|                    auto res = read_all(rr);
 3801|    908|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  | 1039|    908|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 908]
  |  |  ------------------
  ------------------
 3802|      0|                        return detail::unexpected_scan_error(
 3803|      0|                            scan_error::invalid_scanned_value,
 3804|      0|                            "Invalid float value");
 3805|      0|                    }
 3806|    908|                    return res;
 3807|    908|                };
_ZN3scn2v44impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1937|    908|{
 1938|    908|    return ranges::next(range.begin(), range.end());
 1939|    908|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|    908|    {
  313|    908|        ranges::advance(x, bound);
  314|    908|        return x;
  315|    908|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|    908|    {
  275|    908|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    908|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|  1.01k|    {
  190|  1.01k|        i = std::move(bound);
  191|  1.01k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1675|    908|    {
 1676|    908|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1110|    908|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|    908|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1719|    908|    {
 1720|    908|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|    908|                      ranges::sized_range<Range>) {
 1725|    908|            m_storage.reset();
 1726|    908|            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|    908|    }
_ZN3scn2v44impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3738|    924|    {
 3739|    924|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  | 1039|    924|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 924]
  |  |  ------------------
  ------------------
 3740|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3741|      0|                classic_with_thsep_tag{}};
 3742|      0|        }
 3743|       |
 3744|    924|        return read_source_impl(range);
 3745|    924|    }
_ZN3scn2v44impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3764|    908|    {
 3765|    908|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1104|    908|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    908|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3766|       |
 3767|    908|        const std::ptrdiff_t sign_len =
 3768|    908|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3768:13): [True: 0, False: 908]
  ------------------
 3769|       |
 3770|    908|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3958|    908|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    908|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    908|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    908|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 908, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    908|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    908|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    908|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    908|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    908|    }                                                  \
  |  |  |  | 3957|    908|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3771|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3772|    908|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4255|    394|    {
 4256|    394|        float_reader<CharT> rd{get_options(specs)};
 4257|       |
 4258|    394|#if !SCN_DISABLE_LOCALE
 4259|    394|        if (specs.localized) {
  ------------------
  |  Branch (4259:13): [True: 12, False: 382]
  ------------------
 4260|     12|            return read_impl<Range>(
 4261|     12|                range, rd,
 4262|     12|                [](float_reader<CharT>& r, auto&&... args) {
 4263|     12|                    return r.read_source_localized(SCN_FWD(args)...);
 4264|     12|                },
 4265|     12|                value, loc);
 4266|     12|        }
 4267|    382|#endif
 4268|       |
 4269|    382|        return read_impl<Range>(
 4270|    382|            range, rd,
 4271|    382|            [](float_reader<CharT>& r, auto&&... args) {
 4272|    382|                return r.read_source(SCN_FWD(args)...);
 4273|    382|            },
 4274|    382|            value);
 4275|    394|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIcEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4291|    394|    {
 4292|    394|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4293|    394|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|    394|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 394, False: 0]
  |  |  ------------------
  ------------------
 4294|    394|            return unexpected(r.error());
 4295|    394|        }
 4296|       |
 4297|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4298|      0|        return ranges::next(range.begin(), n);
 4299|      0|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_:
  742|     12|        : m_fptr([](storage fn,
  743|     12|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     12|              cvref<T> obj = *get<T>(fn);
  745|     12|              if constexpr (std::is_void_v<R>) {
  746|     12|                  obj(static_cast<decltype(args)>(args)...);
  747|     12|              }
  748|     12|              else {
  749|     12|                  return obj(static_cast<decltype(args)>(args)...);
  750|     12|              }
  751|     12|          }),
  752|     12|          m_storage(std::addressof(f))
  753|     12|    {
  754|     12|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1H_SC_SJ_SL_:
  743|     12|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     12|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     12|              else {
  749|     12|                  return obj(static_cast<decltype(args)>(args)...);
  750|     12|              }
  751|     12|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|     12|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     12|        else if constexpr (std::is_object_v<T>) {
  688|     12|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     12|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSD_ST_EEEDaSW_SZ_:
 4262|     12|                [](float_reader<CharT>& r, auto&&... args) {
 4263|     12|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1110|     12|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4264|     12|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     12|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     12|        {
  662|     12|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_:
  742|    382|        : m_fptr([](storage fn,
  743|    382|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    382|              cvref<T> obj = *get<T>(fn);
  745|    382|              if constexpr (std::is_void_v<R>) {
  746|    382|                  obj(static_cast<decltype(args)>(args)...);
  747|    382|              }
  748|    382|              else {
  749|    382|                  return obj(static_cast<decltype(args)>(args)...);
  750|    382|              }
  751|    382|          }),
  752|    382|          m_storage(std::addressof(f))
  753|    382|    {
  754|    382|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1H_SC_SJ_SL_:
  743|    382|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    382|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    382|              else {
  749|    382|                  return obj(static_cast<decltype(args)>(args)...);
  750|    382|              }
  751|    382|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|    382|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    382|        else if constexpr (std::is_object_v<T>) {
  688|    382|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    382|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4271|    382|            [](float_reader<CharT>& r, auto&&... args) {
 4272|    382|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|    382|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4273|    382|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|    382|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    382|        {
  662|    382|        }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4255|    298|    {
 4256|    298|        float_reader<CharT> rd{get_options(specs)};
 4257|       |
 4258|    298|#if !SCN_DISABLE_LOCALE
 4259|    298|        if (specs.localized) {
  ------------------
  |  Branch (4259:13): [True: 6, False: 292]
  ------------------
 4260|      6|            return read_impl<Range>(
 4261|      6|                range, rd,
 4262|      6|                [](float_reader<CharT>& r, auto&&... args) {
 4263|      6|                    return r.read_source_localized(SCN_FWD(args)...);
 4264|      6|                },
 4265|      6|                value, loc);
 4266|      6|        }
 4267|    292|#endif
 4268|       |
 4269|    292|        return read_impl<Range>(
 4270|    292|            range, rd,
 4271|    292|            [](float_reader<CharT>& r, auto&&... args) {
 4272|    292|                return r.read_source(SCN_FWD(args)...);
 4273|    292|            },
 4274|    292|            value);
 4275|    298|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4291|    930|    {
 4292|    930|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4293|    930|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|    930|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 22, False: 908]
  |  |  ------------------
  ------------------
 4294|     22|            return unexpected(r.error());
 4295|     22|        }
 4296|       |
 4297|    908|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3958|    908|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    908|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    908|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    908|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 908, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    908|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    908|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    908|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    908|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    908|    }                                                  \
  |  |  |  | 3957|    908|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4298|      0|        return ranges::next(range.begin(), n);
 4299|    908|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|      6|        : m_fptr([](storage fn,
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|      6|              if constexpr (std::is_void_v<R>) {
  746|      6|                  obj(static_cast<decltype(args)>(args)...);
  747|      6|              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
  752|      6|          m_storage(std::addressof(f))
  753|      6|    {
  754|      6|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|      6|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      6|        else if constexpr (std::is_object_v<T>) {
  688|      6|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      6|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4262|      6|                [](float_reader<CharT>& r, auto&&... args) {
 4263|      6|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1110|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4264|      6|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|      6|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      6|        {
  662|      6|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|    292|        : m_fptr([](storage fn,
  743|    292|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    292|              cvref<T> obj = *get<T>(fn);
  745|    292|              if constexpr (std::is_void_v<R>) {
  746|    292|                  obj(static_cast<decltype(args)>(args)...);
  747|    292|              }
  748|    292|              else {
  749|    292|                  return obj(static_cast<decltype(args)>(args)...);
  750|    292|              }
  751|    292|          }),
  752|    292|          m_storage(std::addressof(f))
  753|    292|    {
  754|    292|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|    292|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    292|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    292|              else {
  749|    292|                  return obj(static_cast<decltype(args)>(args)...);
  750|    292|              }
  751|    292|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|    292|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    292|        else if constexpr (std::is_object_v<T>) {
  688|    292|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    292|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4271|    292|            [](float_reader<CharT>& r, auto&&... args) {
 4272|    292|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|    292|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4273|    292|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|    292|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    292|        {
  662|    292|        }
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5897|  3.75k|{
 5898|       |    if constexpr (std::is_same_v<T, bool>) {
 5899|       |        return reader_impl_for_bool<CharT>{};
 5900|       |    }
 5901|       |    else if constexpr (std::is_same_v<T, char>) {
 5902|       |        return reader_impl_for_char<CharT>{};
 5903|       |    }
 5904|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5905|       |        return reader_impl_for_wchar<CharT>{};
 5906|       |    }
 5907|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5908|       |        return reader_impl_for_code_point<CharT>{};
 5909|       |    }
 5910|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5911|       |                       std::is_same_v<T, std::wstring_view>) {
 5912|       |        return reader_impl_for_string<CharT>{};
 5913|       |    }
 5914|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5915|  3.75k|                       std::is_same_v<T, std::wstring>) {
 5916|  3.75k|        return reader_impl_for_string<CharT>{};
 5917|       |    }
 5918|       |#if !SCN_DISABLE_REGEX
 5919|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5920|       |                       std::is_same_v<T, wregex_matches>) {
 5921|       |        return reader_impl_for_regex_matches<CharT>{};
 5922|       |    }
 5923|       |#endif
 5924|       |    else if constexpr (std::is_same_v<T, void*>) {
 5925|       |        return reader_impl_for_voidptr<CharT>{};
 5926|       |    }
 5927|       |    else if constexpr (std::is_floating_point_v<T>) {
 5928|       |        return reader_impl_for_float<CharT>{};
 5929|       |    }
 5930|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5931|       |                       !std::is_same_v<T, wchar_t> &&
 5932|       |                       !std::is_same_v<T, char32_t> &&
 5933|       |                       !std::is_same_v<T, bool>) {
 5934|       |        return reader_impl_for_int<CharT>{};
 5935|       |    }
 5936|       |    else {
 5937|       |        return reader_impl_for_monostate<CharT>{};
 5938|       |    }
 5939|  3.75k|}
_ZN3scn2v44impl13string_readerIcEC2Ev:
 5291|  11.2k|    constexpr string_reader() = default;
_ZN3scn2v44impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3187|  9.36k|    {
 3188|  9.36k|        reader_error_handler eh{};
 3189|  9.36k|        get_derived().check_specs_impl(specs, eh);
 3190|  9.36k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1039|  9.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 432, False: 8.92k]
  |  |  ------------------
  ------------------
 3191|    432|            return detail::unexpected_scan_error(
 3192|    432|                scan_error::invalid_format_string, eh.m_msg);
 3193|    432|        }
 3194|  8.92k|        return {};
 3195|  9.36k|    }
_ZN3scn2v44impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3199|  9.36k|    {
 3200|  9.36k|        return static_cast<Derived&>(*this);
 3201|  9.36k|    }
_ZN3scn2v44impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5295|  9.36k|    {
 5296|  9.36k|        detail::check_string_type_specs(specs, eh);
 5297|       |
 5298|  9.36k|        SCN_GCC_PUSH
 5299|  9.36k|        SCN_GCC_IGNORE("-Wswitch")
 5300|  9.36k|        SCN_GCC_IGNORE("-Wswitch-default")
 5301|       |
 5302|  9.36k|        SCN_CLANG_PUSH
 5303|  9.36k|        SCN_CLANG_IGNORE("-Wswitch")
 5304|  9.36k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5305|       |
 5306|  9.36k|        switch (specs.type) {
  ------------------
  |  Branch (5306:17): [True: 426, False: 8.93k]
  ------------------
 5307|  1.90k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5307:13): [True: 1.90k, False: 7.45k]
  ------------------
 5308|  1.90k|                m_type = reader_type::word;
 5309|  1.90k|                break;
 5310|       |
 5311|    822|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5311:13): [True: 822, False: 8.53k]
  ------------------
 5312|    822|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5312:21): [True: 114, False: 708]
  ------------------
 5313|    822|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5313:21): [True: 444, False: 264]
  ------------------
 5314|    558|                    m_type = reader_type::custom_word;
 5315|    558|                }
 5316|    264|                else {
 5317|    264|                    m_type = reader_type::word;
 5318|    264|                }
 5319|    822|                break;
 5320|      0|            }
 5321|       |
 5322|    186|            case detail::presentation_type::character:
  ------------------
  |  Branch (5322:13): [True: 186, False: 9.17k]
  ------------------
 5323|    186|                m_type = reader_type::character;
 5324|    186|                break;
 5325|       |
 5326|  4.74k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5326:13): [True: 4.74k, False: 4.62k]
  ------------------
 5327|  4.74k|                m_type = reader_type::character_set;
 5328|  4.74k|                break;
 5329|       |
 5330|    102|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5330:13): [True: 102, False: 9.25k]
  ------------------
 5331|    102|                m_type = reader_type::regex;
 5332|    102|                break;
 5333|       |
 5334|  1.17k|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5334:13): [True: 1.17k, False: 8.18k]
  ------------------
 5335|  1.17k|                m_type = reader_type::regex_escaped;
 5336|  1.17k|                break;
 5337|  9.36k|        }
 5338|       |
 5339|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5340|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5341|  9.36k|    }
_ZNK3scn2v44impl13string_readerIcE19skip_ws_before_readEv:
 5344|  14.7k|    {
 5345|  14.7k|        return m_type == reader_type::word;
 5346|  14.7k|    }
_ZN3scn2v44impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1241|  10.3k|{
 1242|  10.3k|    auto it = src.begin();
 1243|   893k|    while (it != src.end()) {
  ------------------
  |  Branch (1243:12): [True: 885k, False: 8.20k]
  ------------------
 1244|   885k|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1245|   885k|        if (len == 0) {
  ------------------
  |  Branch (1245:13): [True: 1.48k, False: 883k]
  ------------------
 1246|  1.48k|            return false;
 1247|  1.48k|        }
 1248|   883k|        if (src.end() - it < len) {
  ------------------
  |  Branch (1248:13): [True: 240, False: 883k]
  ------------------
 1249|    240|            return false;
 1250|    240|        }
 1251|   883k|        const auto cp = detail::decode_code_point_exhaustive(
 1252|   883k|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1253|   883k|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1253:13): [True: 420, False: 883k]
  ------------------
 1254|    420|            return false;
 1255|    420|        }
 1256|   883k|        it += len;
 1257|   883k|    }
 1258|  8.20k|    return true;
 1259|  10.3k|}
_ZN3scn2v44impl22transcode_if_necessaryIccEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3139|    496|{
 3140|    496|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3141|    496|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (3141:13): [True: 496, False: 0]
  ------------------
 3142|    496|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  | 1108|    496|    static_cast<    \
  |  | 1109|    496|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3143|    496|        }
 3144|      0|        else {
 3145|      0|            dest.assign(source.view());
 3146|      0|        }
 3147|       |    }
 3148|       |    else {
 3149|       |        return transcode_impl(source.view(), dest);
 3150|       |    }
 3151|       |
 3152|    496|    return {};
 3153|    496|}
_ZN3scn2v44impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5192|  4.73k|        {
 5193|  4.73k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5193:17): [True: 624, False: 4.11k]
  ------------------
 5194|    624|                return {};
 5195|    624|            }
 5196|       |
 5197|  4.11k|            auto charset_string = specs.charset_string<SourceCharT>();
 5198|  4.11k|            auto it = detail::to_address(charset_string.begin());
 5199|  4.11k|            auto set = detail::parse_presentation_set(
 5200|  4.11k|                it, detail::to_address(charset_string.end()), nonascii);
 5201|  4.11k|            SCN_TRY_DISCARD(nonascii.get_error());
  ------------------
  |  | 3948|  4.11k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  4.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 4.11k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 5202|  4.11k|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  | 1105|  4.11k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|  4.11k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5203|  4.11k|            SCN_ENSURE(set == charset_string);
  ------------------
  |  | 1105|  4.11k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|  4.11k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5204|       |
 5205|  4.11k|            std::sort(nonascii.extra_ranges.begin(),
 5206|  4.11k|                      nonascii.extra_ranges.end());
 5207|  4.11k|            return {};
 5208|  4.11k|        }
_ZNK3scn2v44impl25character_set_reader_implIcE20read_source_callback28on_classic_with_extra_rangesEDi:
 5225|   629k|        {
 5226|   629k|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (5226:17): [True: 106k, False: 522k]
  ------------------
 5227|   106k|                return helper.is_char_set_in_extra_literals(cp);
 5228|   106k|            }
 5229|       |
 5230|   522k|            return helper.is_char_set_in_literals(static_cast<char>(cp));
 5231|   629k|        }
_ZNK3scn2v44impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDi:
 5175|   106k|        {
 5176|       |            // TODO: binary search?
 5177|   106k|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (5177:17): [True: 0, False: 106k]
  ------------------
 5178|      0|                return false;
 5179|      0|            }
 5180|       |
 5181|   106k|            const auto cp_val = static_cast<uint32_t>(cp);
 5182|   106k|            return std::find_if(
 5183|   106k|                       nonascii.extra_ranges.begin(),
 5184|   106k|                       nonascii.extra_ranges.end(),
 5185|   106k|                       [cp_val](const auto& pair) noexcept {
 5186|   106k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
 5187|   106k|                                  static_cast<uint32_t>(pair.second) > cp_val;
 5188|   106k|                       }) != nonascii.extra_ranges.end();
 5189|   106k|        }
_ZZNK3scn2v44impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
 5185|  13.1M|                       [cp_val](const auto& pair) noexcept {
 5186|  13.1M|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (5186:35): [True: 13.1M, False: 2.98k]
  ------------------
 5187|  13.1M|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (5187:35): [True: 104k, False: 13.0M]
  ------------------
 5188|  13.1M|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v44impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5165|   531k|        {
 5166|   531k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  | 1104|   531k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   531k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5167|   531k|            const auto val =
 5168|   531k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5169|   531k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5170|   531k|                    (val % 8)) &
 5171|   531k|                   1u;
 5172|   531k|        }
_ZNK3scn2v44impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5216|  10.7k|        {
 5217|  10.7k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5217:17): [True: 1.96k, False: 8.79k]
  ------------------
 5218|  1.96k|                return false;
 5219|  1.96k|            }
 5220|       |
 5221|  8.79k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5222|  10.7k|        }
_ZN3scn2v44impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5162|  4.73k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v44impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5362|  1.10k|    {
 5363|  1.10k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  1.10k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5364|  1.10k|        return read_impl(range, specs, value);
 5365|  1.10k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5380|  1.10k|    {
 5381|  1.10k|        SCN_CLANG_PUSH
 5382|  1.10k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5383|       |
 5384|  1.10k|        switch (m_type) {
 5385|    352|            case reader_type::word:
  ------------------
  |  Branch (5385:13): [True: 352, False: 756]
  ------------------
 5386|    352|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5387|       |
 5388|    122|            case reader_type::custom_word:
  ------------------
  |  Branch (5388:13): [True: 122, False: 986]
  ------------------
 5389|    122|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5390|    122|                                                                   value);
 5391|       |
 5392|     58|            case reader_type::character:
  ------------------
  |  Branch (5392:13): [True: 58, False: 1.05k]
  ------------------
 5393|     58|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5394|       |
 5395|    302|            case reader_type::character_set:
  ------------------
  |  Branch (5395:13): [True: 302, False: 806]
  ------------------
 5396|    302|                return character_set_reader_impl<SourceCharT>{}.read(
 5397|    302|                    range, specs, value);
 5398|       |
 5399|      0|#if !SCN_DISABLE_REGEX
 5400|      2|            case reader_type::regex:
  ------------------
  |  Branch (5400:13): [True: 2, False: 1.10k]
  ------------------
 5401|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5402|      2|                    range, specs.charset_string<SourceCharT>(),
 5403|      2|                    specs.regexp_flags, value);
 5404|       |
 5405|    272|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5405:13): [True: 272, False: 836]
  ------------------
 5406|    272|                return regex_string_reader_impl<SourceCharT>{}.read(
 5407|    272|                    range,
 5408|    272|                    get_unescaped_regex_pattern(
 5409|    272|                        specs.charset_string<SourceCharT>()),
 5410|    272|                    specs.regexp_flags, value);
 5411|      0|#endif
 5412|       |
 5413|      0|            default:
  ------------------
  |  Branch (5413:13): [True: 0, False: 1.10k]
  ------------------
 5414|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5415|  1.10k|                SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5416|  1.10k|        }
 5417|       |
 5418|  1.10k|        SCN_CLANG_POP
 5419|  1.10k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4913|    352|    {
 4914|    352|        return read_string_impl(range, read_until_classic_space(range), value);
 4915|    352|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4847|    532|{
 4848|    532|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4849|       |
 4850|    532|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4851|    532|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4851:9): [True: 224, False: 308]
  ------------------
 4852|    224|        return detail::unexpected_scan_error(
 4853|    224|            scan_error::invalid_scanned_value,
 4854|    224|            "Invalid encoding in scanned string");
 4855|    224|    }
 4856|       |
 4857|    308|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3948|    308|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    308|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 308]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 4858|    308|    return SCN_MOVE(result);
  ------------------
  |  | 1108|    308|    static_cast<    \
  |  | 1109|    308|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4859|    308|}
_ZN3scn2v44impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2219|  1.05k|{
 2220|       |    if constexpr (ranges::contiguous_range<Range> &&
 2221|       |                  ranges::sized_range<Range> &&
 2222|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2223|       |        auto buf = make_contiguous_buffer(range);
 2224|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2225|       |        return ranges::next(range.begin(),
 2226|       |                            ranges::distance(buf.view().begin(), it));
 2227|       |    }
 2228|  1.05k|    else {
 2229|  1.05k|        auto it = range.begin();
 2230|       |
 2231|  1.05k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2232|  1.05k|            auto seg = get_contiguous_beginning(range);
 2233|  1.05k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2234|  1.05k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2234:17): [True: 0, False: 1.05k]
  ------------------
 2235|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2236|      0|            }
 2237|  1.05k|            ranges::advance(it, seg.size());
 2238|  1.05k|        }
 2239|       |
 2240|      0|        return read_until_code_point(
 2241|  1.05k|            ranges::subrange{it, range.end()},
 2242|  1.05k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2243|  1.05k|    }
 2244|  1.05k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2192|  1.05k|{
 2193|  1.05k|    auto it = range.begin();
 2194|  19.2k|    while (it != range.end()) {
  ------------------
  |  Branch (2194:12): [True: 18.4k, False: 792]
  ------------------
 2195|  18.4k|        const auto val =
 2196|  18.4k|            read_code_point_into(ranges::subrange{it, range.end()});
 2197|  18.4k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1038|  18.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 15.3k, False: 3.12k]
  |  |  ------------------
  ------------------
 2198|  15.3k|            const auto cp = detail::decode_code_point_exhaustive(
 2199|  15.3k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2200|  15.3k|            if (pred(cp)) {
  ------------------
  |  Branch (2200:17): [True: 264, False: 15.0k]
  ------------------
 2201|    264|                return it;
 2202|    264|            }
 2203|  15.3k|        }
 2204|  18.1k|        it = val.iterator;
 2205|  18.1k|    }
 2206|       |
 2207|    792|    return it;
 2208|  1.05k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  742|  1.05k|        : m_fptr([](storage fn,
  743|  1.05k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.05k|              cvref<T> obj = *get<T>(fn);
  745|  1.05k|              if constexpr (std::is_void_v<R>) {
  746|  1.05k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.05k|              }
  748|  1.05k|              else {
  749|  1.05k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.05k|              }
  751|  1.05k|          }),
  752|  1.05k|          m_storage(std::addressof(f))
  753|  1.05k|    {
  754|  1.05k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  743|  15.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  15.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  15.3k|              else {
  749|  15.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  15.3k|              }
  751|  15.3k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  15.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  15.3k|        else if constexpr (std::is_object_v<T>) {
  688|  15.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  15.3k|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2242|  15.3k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|  1.05k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.05k|        {
  662|  1.05k|        }
_ZN3scn2v44impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4934|    122|    {
 4935|    122|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4935:13): [True: 70, False: 52]
  ------------------
 4936|     70|            return read_string_impl(
 4937|     70|                range,
 4938|     70|                read_until_code_unit(
 4939|     70|                    range, specs.fill.template get_code_unit<SourceCharT>()),
 4940|     70|                value);
 4941|     70|        }
 4942|     52|        return read_string_impl(
 4943|     52|            range,
 4944|     52|            read_until_code_units(
 4945|     52|                range, specs.fill.template get_code_units<SourceCharT>()),
 4946|     52|            value);
 4947|    122|    }
_ZN3scn2v44impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS0_6detail11mp_identityINDTcl4implISE_EEE4typeEE4typeE:
 2055|    210|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find(range.begin(), range.end(), cu);
 2058|       |    }
 2059|    210|    else {
 2060|    210|        auto first = range.begin();
 2061|  4.95k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 4.75k, False: 204]
  ------------------
 2062|  4.75k|            if (*first == cu) {
  ------------------
  |  Branch (2062:17): [True: 6, False: 4.74k]
  ------------------
 2063|      6|                return first;
 2064|      6|            }
 2065|  4.75k|        }
 2066|    204|        return first;
 2067|    210|    }
 2068|    210|}
_ZN3scn2v44impl21read_until_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEESI_RKT0_:
 2138|    156|{
 2139|    156|    static_assert(ranges::common_range<CodeUnits>);
 2140|       |
 2141|       |    if constexpr (ranges::common_range<Range>) {
 2142|       |        return std::search(range.begin(), range.end(), needle.begin(),
 2143|       |                           needle.end());
 2144|       |    }
 2145|    156|    else {
 2146|    156|        auto first = range.begin();
 2147|  2.17k|        while (true) {
  ------------------
  |  Branch (2147:16): [Folded - Ignored]
  ------------------
 2148|  2.17k|            auto it = first;
 2149|  2.68k|            for (auto needle_it = needle.begin();; ++it, (void)++needle_it) {
 2150|  2.68k|                if (needle_it == needle.end()) {
  ------------------
  |  Branch (2150:21): [True: 102, False: 2.58k]
  ------------------
 2151|    102|                    return first;
 2152|    102|                }
 2153|  2.58k|                if (it == range.end()) {
  ------------------
  |  Branch (2153:21): [True: 54, False: 2.52k]
  ------------------
 2154|     54|                    return it;
 2155|     54|                }
 2156|  2.52k|                if (*it != *needle_it) {
  ------------------
  |  Branch (2156:21): [True: 2.02k, False: 504]
  ------------------
 2157|  2.02k|                    break;
 2158|  2.02k|                }
 2159|  2.52k|            }
 2160|  2.02k|            ++first;
 2161|  2.02k|        }
 2162|    156|    }
 2163|    156|}
_ZN3scn2v44impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 5036|     58|    {
 5037|     58|        return read_impl(
 5038|     58|            range,
 5039|     58|            [&](const auto& rng) {
 5040|     58|                return read_string_impl(rng, read_all(rng), value);
 5041|     58|            },
 5042|     58|            detail::priority_tag<1>{});
 5043|     58|    }
_ZN3scn2v44impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 5063|     58|    {
 5064|     58|        return read_cb(range);
 5065|     58|    }
_ZZN3scn2v44impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 5039|     58|            [&](const auto& rng) {
 5040|     58|                return read_string_impl(rng, read_all(rng), value);
 5041|     58|            },
_ZN3scn2v44impl8read_allINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 1937|    174|{
 1938|    174|    return ranges::next(range.begin(), range.end());
 1939|    174|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS1_6detail9subrange_8subrangeIS9_S9_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EESL_E4typeESL_SM_:
  312|    174|    {
  313|    174|        ranges::advance(x, bound);
  314|    174|        return x;
  315|    174|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EEvE4typeERSL_SM_:
  274|    174|    {
  275|    174|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    174|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEvRT_T0_NS0_6detail12priority_tagILm0EEE:
  202|    174|    {
  203|  2.74k|        while (i != bound) {
  ------------------
  |  Branch (203:16): [True: 2.57k, False: 174]
  ------------------
  204|  2.57k|            ++i;
  205|  2.57k|        }
  206|    174|    }
_ZN3scn2v44impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5137|    302|    {
 5138|    302|        auto it = read_source_impl(range, {specs});
 5139|    302|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|    302|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 8, False: 294]
  |  |  ------------------
  ------------------
 5140|      8|            return unexpected(it.error());
 5141|      8|        }
 5142|       |
 5143|    294|        return read_string_impl(range, *it, value);
 5144|    302|    }
_ZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperE:
 5240|    906|    {
 5241|    906|        const bool is_inverted = helper.specs.charset_is_inverted;
 5242|    906|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5243|       |
 5244|    906|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3948|    906|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    906|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 906]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 5245|       |
 5246|    906|        read_source_callback cb_wrapper{helper};
 5247|       |
 5248|    906|        if (accepts_nonascii) {
  ------------------
  |  Branch (5248:13): [True: 510, False: 396]
  ------------------
 5249|    510|            const auto cb = [&](char32_t cp) {
 5250|    510|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5251|    510|            };
 5252|       |
 5253|    510|            if (is_inverted) {
  ------------------
  |  Branch (5253:17): [True: 240, False: 270]
  ------------------
 5254|    240|                auto it = read_until_code_point(range, cb);
 5255|    240|                return check_nonempty(it, range);
 5256|    240|            }
 5257|    270|            auto it = read_while_code_point(range, cb);
 5258|    270|            return check_nonempty(it, range);
 5259|    510|        }
 5260|       |
 5261|    396|        const auto cb = [&](SourceCharT ch) {
 5262|    396|            return cb_wrapper.on_ascii_only(ch);
 5263|    396|        };
 5264|       |
 5265|    396|        if (is_inverted) {
  ------------------
  |  Branch (5265:13): [True: 180, False: 216]
  ------------------
 5266|    180|            auto it = read_until_code_unit(range, cb);
 5267|    180|            return check_nonempty(it, range);
 5268|    180|        }
 5269|    216|        auto it = read_while_code_unit(range, cb);
 5270|    216|        return check_nonempty(it, range);
 5271|    396|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|    510|        : m_fptr([](storage fn,
  743|    510|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    510|              cvref<T> obj = *get<T>(fn);
  745|    510|              if constexpr (std::is_void_v<R>) {
  746|    510|                  obj(static_cast<decltype(args)>(args)...);
  747|    510|              }
  748|    510|              else {
  749|    510|                  return obj(static_cast<decltype(args)>(args)...);
  750|    510|              }
  751|    510|          }),
  752|    510|          m_storage(std::addressof(f))
  753|    510|    {
  754|    510|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEDiE_clES15_Di:
  743|  15.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  15.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  15.3k|              else {
  749|  15.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  15.3k|              }
  751|  15.3k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  15.3k|    {
  684|  15.3k|        if constexpr (std::is_const_v<T>) {
  685|  15.3k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  15.3k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlDiE_clEDi:
 5249|  15.3k|            const auto cb = [&](char32_t cp) {
 5250|  15.3k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5251|  15.3k|            };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPKSL_:
  665|    510|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    510|        {
  667|    510|        }
_ZN3scn2v44impl25character_set_reader_implIcE14check_nonemptyINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEEEEENS0_13scan_expectedIT_EERKSI_T0_:
 5276|    906|    {
 5277|    906|        if (it == range.begin()) {
  ------------------
  |  Branch (5277:13): [True: 24, False: 882]
  ------------------
 5278|     24|            return detail::unexpected_scan_error(
 5279|     24|                scan_error::invalid_scanned_value,
 5280|     24|                "No characters matched in [character set]");
 5281|     24|        }
 5282|       |
 5283|    882|        return it;
 5284|    906|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|    396|        : m_fptr([](storage fn,
  743|    396|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    396|              cvref<T> obj = *get<T>(fn);
  745|    396|              if constexpr (std::is_void_v<R>) {
  746|    396|                  obj(static_cast<decltype(args)>(args)...);
  747|    396|              }
  748|    396|              else {
  749|    396|                  return obj(static_cast<decltype(args)>(args)...);
  750|    396|              }
  751|    396|          }),
  752|    396|          m_storage(std::addressof(f))
  753|    396|    {
  754|    396|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES15_c:
  743|  7.53k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.53k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  7.53k|              else {
  749|  7.53k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.53k|              }
  751|  7.53k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  7.53k|    {
  684|  7.53k|        if constexpr (std::is_const_v<T>) {
  685|  7.53k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  7.53k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlcE_clEc:
 5261|  7.53k|        const auto cb = [&](SourceCharT ch) {
 5262|  7.53k|            return cb_wrapper.on_ascii_only(ch);
 5263|  7.53k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPKSL_:
  665|    396|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    396|        {
  667|    396|        }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4847|    294|{
 4848|    294|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4849|       |
 4850|    294|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4851|    294|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4851:9): [True: 106, False: 188]
  ------------------
 4852|    106|        return detail::unexpected_scan_error(
 4853|    106|            scan_error::invalid_scanned_value,
 4854|    106|            "Invalid encoding in scanned string");
 4855|    106|    }
 4856|       |
 4857|    188|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3948|    188|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    188|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 188]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 4858|    188|    return SCN_MOVE(result);
  ------------------
  |  | 1108|    188|    static_cast<    \
  |  | 1109|    188|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4859|    188|}
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4980|    274|    {
 4981|    274|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3958|    274|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    274|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    274|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    274|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 274, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    274|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    274|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    274|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    274|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    274|    }                                                  \
  |  |  |  | 3957|    274|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4982|      0|        return read_string_impl(range, it, value);
 4983|    274|    }
_ZN3scn2v44impl24regex_string_reader_implIcE4implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 5002|    822|    {
 5003|       |        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 5004|       |                      !std::is_same_v<SourceCharT, char>) {
 5005|       |            return detail::unexpected_scan_error(
 5006|       |                scan_error::invalid_format_string,
 5007|       |                "Regex backend doesn't support wide strings as input");
 5008|       |        }
 5009|    822|        else {
 5010|    822|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (5010:17): [True: 822, False: 0]
  ------------------
 5011|    822|                return detail::unexpected_scan_error(
 5012|    822|                    scan_error::invalid_format_string,
 5013|    822|                    "Cannot use regex with a non-contiguous source "
 5014|    822|                    "range");
 5015|    822|            }
 5016|       |
 5017|      0|            auto input = get_as_contiguous(range);
 5018|      0|            SCN_TRY(it,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5019|      0|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 5020|      0|            return ranges::next(range.begin(),
 5021|      0|                                ranges::distance(input.begin(), it));
 5022|      0|        }
 5023|    822|    }
_ZN3scn2v44impl27is_entire_source_contiguousINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  959|    822|{
  960|       |    if constexpr (ranges::contiguous_range<Range> &&
  961|       |                  ranges::sized_range<Range>) {
  962|       |        return true;
  963|       |    }
  964|       |    else if constexpr (std::is_same_v<
  965|       |                           ranges::const_iterator_t<Range>,
  966|       |                           typename detail::basic_scan_buffer<
  967|       |                               detail::char_t<Range>>::forward_iterator>) {
  968|       |        auto beg = r.begin();
  969|       |        if (!beg.stores_parent()) {
  970|       |            return true;
  971|       |        }
  972|       |        return beg.parent()->is_contiguous();
  973|       |    }
  974|    822|    else {
  975|    822|        return false;
  976|    822|    }
  977|    822|}
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5362|  1.83k|    {
 5363|  1.83k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  1.83k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5364|  1.83k|        return read_impl(range, specs, value);
 5365|  1.83k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5380|  1.83k|    {
 5381|  1.83k|        SCN_CLANG_PUSH
 5382|  1.83k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5383|       |
 5384|  1.83k|        switch (m_type) {
 5385|    340|            case reader_type::word:
  ------------------
  |  Branch (5385:13): [True: 340, False: 1.49k]
  ------------------
 5386|    340|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5387|       |
 5388|     62|            case reader_type::custom_word:
  ------------------
  |  Branch (5388:13): [True: 62, False: 1.76k]
  ------------------
 5389|     62|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5390|     62|                                                                   value);
 5391|       |
 5392|      0|            case reader_type::character:
  ------------------
  |  Branch (5392:13): [True: 0, False: 1.83k]
  ------------------
 5393|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5394|       |
 5395|  1.27k|            case reader_type::character_set:
  ------------------
  |  Branch (5395:13): [True: 1.27k, False: 554]
  ------------------
 5396|  1.27k|                return character_set_reader_impl<SourceCharT>{}.read(
 5397|  1.27k|                    range, specs, value);
 5398|       |
 5399|      0|#if !SCN_DISABLE_REGEX
 5400|     32|            case reader_type::regex:
  ------------------
  |  Branch (5400:13): [True: 32, False: 1.79k]
  ------------------
 5401|     32|                return regex_string_reader_impl<SourceCharT>{}.read(
 5402|     32|                    range, specs.charset_string<SourceCharT>(),
 5403|     32|                    specs.regexp_flags, value);
 5404|       |
 5405|    120|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5405:13): [True: 120, False: 1.71k]
  ------------------
 5406|    120|                return regex_string_reader_impl<SourceCharT>{}.read(
 5407|    120|                    range,
 5408|    120|                    get_unescaped_regex_pattern(
 5409|    120|                        specs.charset_string<SourceCharT>()),
 5410|    120|                    specs.regexp_flags, value);
 5411|      0|#endif
 5412|       |
 5413|      0|            default:
  ------------------
  |  Branch (5413:13): [True: 0, False: 1.83k]
  ------------------
 5414|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5415|  1.83k|                SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5416|  1.83k|        }
 5417|       |
 5418|  1.83k|        SCN_CLANG_POP
 5419|  1.83k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4913|    972|    {
 4914|    972|        return read_string_impl(range, read_until_classic_space(range), value);
 4915|    972|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4847|  1.03k|{
 4848|  1.03k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4849|       |
 4850|  1.03k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4851|  1.03k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4851:9): [True: 330, False: 704]
  ------------------
 4852|    330|        return detail::unexpected_scan_error(
 4853|    330|            scan_error::invalid_scanned_value,
 4854|    330|            "Invalid encoding in scanned string");
 4855|    330|    }
 4856|       |
 4857|    704|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3948|    704|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    704|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 704]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 4858|    704|    return SCN_MOVE(result);
  ------------------
  |  | 1108|    704|    static_cast<    \
  |  | 1109|    704|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4859|    704|}
_ZN3scn2v44impl22transcode_if_necessaryIccEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3159|  1.55k|{
 3160|  1.55k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3161|  1.55k|        dest.assign(source.view());
 3162|       |    }
 3163|       |    else {
 3164|       |        return transcode_impl(source.view(), dest);
 3165|       |    }
 3166|       |
 3167|  1.55k|    return {};
 3168|  1.55k|}
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2219|  2.91k|{
 2220|       |    if constexpr (ranges::contiguous_range<Range> &&
 2221|       |                  ranges::sized_range<Range> &&
 2222|  2.91k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2223|  2.91k|        auto buf = make_contiguous_buffer(range);
 2224|  2.91k|        auto it = find_classic_space_narrow_fast(buf.view());
 2225|  2.91k|        return ranges::next(range.begin(),
 2226|  2.91k|                            ranges::distance(buf.view().begin(), it));
 2227|       |    }
 2228|       |    else {
 2229|       |        auto it = range.begin();
 2230|       |
 2231|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2232|       |            auto seg = get_contiguous_beginning(range);
 2233|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2234|       |                seg_it != seg.end()) {
 2235|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2236|       |            }
 2237|       |            ranges::advance(it, seg.size());
 2238|       |        }
 2239|       |
 2240|       |        return read_until_code_point(
 2241|       |            ranges::subrange{it, range.end()},
 2242|       |            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2243|       |    }
 2244|  2.91k|}
_ZN3scn2v44impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4934|     62|    {
 4935|     62|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4935:13): [True: 30, False: 32]
  ------------------
 4936|     30|            return read_string_impl(
 4937|     30|                range,
 4938|     30|                read_until_code_unit(
 4939|     30|                    range, specs.fill.template get_code_unit<SourceCharT>()),
 4940|     30|                value);
 4941|     30|        }
 4942|     32|        return read_string_impl(
 4943|     32|            range,
 4944|     32|            read_until_code_units(
 4945|     32|                range, specs.fill.template get_code_units<SourceCharT>()),
 4946|     32|            value);
 4947|     62|    }
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS0_6detail11mp_identityINDTcl4implISC_EEE4typeEE4typeE:
 2055|     90|{
 2056|     90|    if constexpr (ranges::common_range<Range>) {
 2057|     90|        return std::find(range.begin(), range.end(), cu);
 2058|       |    }
 2059|       |    else {
 2060|       |        auto first = range.begin();
 2061|       |        for (; first != range.end(); ++first) {
 2062|       |            if (*first == cu) {
 2063|       |                return first;
 2064|       |            }
 2065|       |        }
 2066|       |        return first;
 2067|       |    }
 2068|     90|}
_ZN3scn2v44impl21read_until_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 2138|     96|{
 2139|     96|    static_assert(ranges::common_range<CodeUnits>);
 2140|       |
 2141|     96|    if constexpr (ranges::common_range<Range>) {
 2142|     96|        return std::search(range.begin(), range.end(), needle.begin(),
 2143|     96|                           needle.end());
 2144|       |    }
 2145|       |    else {
 2146|       |        auto first = range.begin();
 2147|       |        while (true) {
 2148|       |            auto it = first;
 2149|       |            for (auto needle_it = needle.begin();; ++it, (void)++needle_it) {
 2150|       |                if (needle_it == needle.end()) {
 2151|       |                    return first;
 2152|       |                }
 2153|       |                if (it == range.end()) {
 2154|       |                    return it;
 2155|       |                }
 2156|       |                if (*it != *needle_it) {
 2157|       |                    break;
 2158|       |                }
 2159|       |            }
 2160|       |            ++first;
 2161|       |        }
 2162|       |    }
 2163|     96|}
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5137|  1.27k|    {
 5138|  1.27k|        auto it = read_source_impl(range, {specs});
 5139|  1.27k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|  1.27k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 400, False: 876]
  |  |  ------------------
  ------------------
 5140|    400|            return unexpected(it.error());
 5141|    400|        }
 5142|       |
 5143|    876|        return read_string_impl(range, *it, value);
 5144|  1.27k|    }
_ZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5240|  3.82k|    {
 5241|  3.82k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5242|  3.82k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5243|       |
 5244|  3.82k|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3948|  3.82k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  3.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 3.82k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 5245|       |
 5246|  3.82k|        read_source_callback cb_wrapper{helper};
 5247|       |
 5248|  3.82k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5248:13): [True: 3.60k, False: 228]
  ------------------
 5249|  3.60k|            const auto cb = [&](char32_t cp) {
 5250|  3.60k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5251|  3.60k|            };
 5252|       |
 5253|  3.60k|            if (is_inverted) {
  ------------------
  |  Branch (5253:17): [True: 252, False: 3.34k]
  ------------------
 5254|    252|                auto it = read_until_code_point(range, cb);
 5255|    252|                return check_nonempty(it, range);
 5256|    252|            }
 5257|  3.34k|            auto it = read_while_code_point(range, cb);
 5258|  3.34k|            return check_nonempty(it, range);
 5259|  3.60k|        }
 5260|       |
 5261|    228|        const auto cb = [&](SourceCharT ch) {
 5262|    228|            return cb_wrapper.on_ascii_only(ch);
 5263|    228|        };
 5264|       |
 5265|    228|        if (is_inverted) {
  ------------------
  |  Branch (5265:13): [True: 102, False: 126]
  ------------------
 5266|    102|            auto it = read_until_code_unit(range, cb);
 5267|    102|            return check_nonempty(it, range);
 5268|    102|        }
 5269|    126|        auto it = read_while_code_unit(range, cb);
 5270|    126|        return check_nonempty(it, range);
 5271|    228|    }
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2192|  3.60k|{
 2193|  3.60k|    auto it = range.begin();
 2194|   615k|    while (it != range.end()) {
  ------------------
  |  Branch (2194:12): [True: 615k, False: 192]
  ------------------
 2195|   615k|        const auto val =
 2196|   615k|            read_code_point_into(ranges::subrange{it, range.end()});
 2197|   615k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1038|   615k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 613k, False: 1.21k]
  |  |  ------------------
  ------------------
 2198|   613k|            const auto cp = detail::decode_code_point_exhaustive(
 2199|   613k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2200|   613k|            if (pred(cp)) {
  ------------------
  |  Branch (2200:17): [True: 3.40k, False: 610k]
  ------------------
 2201|  3.40k|                return it;
 2202|  3.40k|            }
 2203|   613k|        }
 2204|   611k|        it = val.iterator;
 2205|   611k|    }
 2206|       |
 2207|    192|    return it;
 2208|  3.60k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1997|   615k|{
 1998|   615k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1104|   615k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   615k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   615k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   615k|    auto it = range.begin();
 2002|   615k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   615k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1039|   615k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.21k, False: 613k]
  |  |  ------------------
  ------------------
 2005|  1.21k|        ++it;
 2006|  1.21k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|  1.21k|        return {it, {}};
 2008|  1.21k|    }
 2009|       |
 2010|   613k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 508k, False: 105k]
  ------------------
 2011|   508k|        ++it;
 2012|   508k|        return {it, string_type(1, *range.begin())};
 2013|   508k|    }
 2014|       |
 2015|   105k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|   105k|    return {it, string_type{range.begin(), it}};
 2017|   613k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1264|  1.21k|{
 1265|  1.21k|    auto it = input.begin();
 1266|  1.71k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 1.65k, False: 60]
  ------------------
 1267|  1.65k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 1.15k, False: 492]
  ------------------
 1268|  1.15k|            break;
 1269|  1.15k|        }
 1270|  1.65k|    }
 1271|  1.21k|    return it;
 1272|  1.21k|}
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeERSA_SE_SB_:
  282|   105k|    {
  283|   105k|        return n - fn::impl_i_n_s(i, n, bound);
  284|   105k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeERSB_SE_SA_:
  211|   105k|    {
  212|   105k|        if (fn::abs(n) >= fn::abs(bound - i)) {
  ------------------
  |  Branch (212:13): [True: 102, False: 105k]
  ------------------
  213|    102|            auto dist = bound - i;
  214|    102|            fn::impl_i_s(i, bound, priority_tag<2>{});
  215|    102|            return dist;
  216|    102|        }
  217|   105k|        fn::impl_i_n(i, n, priority_tag<1>{});
  218|   105k|        return n;
  219|   105k|    }
_ZN3scn2v46ranges6detail8advance_2fn3absIlEET_S6_:
  131|   210k|    {
  132|   210k|        if (t < T{0}) {
  ------------------
  |  Branch (132:13): [True: 0, False: 210k]
  ------------------
  133|      0|            return -t;
  134|      0|        }
  135|   210k|        return t;
  136|   210k|    }
_ZNK3scn2v44impl27read_code_point_into_resultIPKccE8is_validEv:
 1988|   615k|    {
 1989|   615k|        return !codepoint.empty();
 1990|   615k|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|  3.60k|        : m_fptr([](storage fn,
  743|  3.60k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.60k|              cvref<T> obj = *get<T>(fn);
  745|  3.60k|              if constexpr (std::is_void_v<R>) {
  746|  3.60k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.60k|              }
  748|  3.60k|              else {
  749|  3.60k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.60k|              }
  751|  3.60k|          }),
  752|  3.60k|          m_storage(std::addressof(f))
  753|  3.60k|    {
  754|  3.60k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clES13_Di:
  743|   613k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   613k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   613k|              else {
  749|   613k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   613k|              }
  751|   613k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|   613k|    {
  684|   613k|        if constexpr (std::is_const_v<T>) {
  685|   613k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   613k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlDiE_clEDi:
 5249|   613k|            const auto cb = [&](char32_t cp) {
 5250|   613k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5251|   613k|            };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|  3.60k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  3.60k|        {
  667|  3.60k|        }
_ZN3scn2v44impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5276|  3.82k|    {
 5277|  3.82k|        if (it == range.begin()) {
  ------------------
  |  Branch (5277:13): [True: 1.20k, False: 2.62k]
  ------------------
 5278|  1.20k|            return detail::unexpected_scan_error(
 5279|  1.20k|                scan_error::invalid_scanned_value,
 5280|  1.20k|                "No characters matched in [character set]");
 5281|  1.20k|        }
 5282|       |
 5283|  2.62k|        return it;
 5284|  3.82k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2213|  3.34k|{
 2214|  3.34k|    return read_until_code_point(range, std::not_fn(pred));
 2215|  3.34k|}
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|    228|        : m_fptr([](storage fn,
  743|    228|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    228|              cvref<T> obj = *get<T>(fn);
  745|    228|              if constexpr (std::is_void_v<R>) {
  746|    228|                  obj(static_cast<decltype(args)>(args)...);
  747|    228|              }
  748|    228|              else {
  749|    228|                  return obj(static_cast<decltype(args)>(args)...);
  750|    228|              }
  751|    228|          }),
  752|    228|          m_storage(std::addressof(f))
  753|    228|    {
  754|    228|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  3.22k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.22k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.22k|              else {
  749|  3.22k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.22k|              }
  751|  3.22k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  3.22k|    {
  684|  3.22k|        if constexpr (std::is_const_v<T>) {
  685|  3.22k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.22k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5261|  3.22k|        const auto cb = [&](SourceCharT ch) {
 5262|  3.22k|            return cb_wrapper.on_ascii_only(ch);
 5263|  3.22k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|    228|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    228|        {
  667|    228|        }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4847|    906|{
 4848|    906|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4849|       |
 4850|    906|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4851|    906|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4851:9): [True: 56, False: 850]
  ------------------
 4852|     56|        return detail::unexpected_scan_error(
 4853|     56|            scan_error::invalid_scanned_value,
 4854|     56|            "Invalid encoding in scanned string");
 4855|     56|    }
 4856|       |
 4857|    850|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3948|    850|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    850|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 850]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 4858|    850|    return SCN_MOVE(result);
  ------------------
  |  | 1108|    850|    static_cast<    \
  |  | 1109|    850|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4859|    850|}
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4980|    152|    {
 4981|    152|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3958|    152|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    152|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    152|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    152|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 122, False: 30]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    122|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    122|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    122|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    122|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    122|    }                                                  \
  |  |  |  | 3957|    152|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     30|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4982|     30|        return read_string_impl(range, it, value);
 4983|    152|    }
_ZN3scn2v44impl24regex_string_reader_implIcE4implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 5002|    456|    {
 5003|       |        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 5004|       |                      !std::is_same_v<SourceCharT, char>) {
 5005|       |            return detail::unexpected_scan_error(
 5006|       |                scan_error::invalid_format_string,
 5007|       |                "Regex backend doesn't support wide strings as input");
 5008|       |        }
 5009|    456|        else {
 5010|    456|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (5010:17): [True: 0, False: 456]
  ------------------
 5011|      0|                return detail::unexpected_scan_error(
 5012|      0|                    scan_error::invalid_format_string,
 5013|      0|                    "Cannot use regex with a non-contiguous source "
 5014|      0|                    "range");
 5015|      0|            }
 5016|       |
 5017|    456|            auto input = get_as_contiguous(range);
 5018|    456|            SCN_TRY(it,
  ------------------
  |  | 3958|    456|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    456|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    456|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    456|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 366, False: 90]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    366|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    366|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    366|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    366|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    366|    }                                                  \
  |  |  |  | 3957|    456|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     90|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5019|     90|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 5020|     90|            return ranges::next(range.begin(),
 5021|     90|                                ranges::distance(input.begin(), it));
 5022|    456|        }
 5023|    456|    }
_ZN3scn2v44impl27is_entire_source_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  959|    456|{
  960|       |    if constexpr (ranges::contiguous_range<Range> &&
  961|    456|                  ranges::sized_range<Range>) {
  962|    456|        return true;
  963|       |    }
  964|       |    else if constexpr (std::is_same_v<
  965|       |                           ranges::const_iterator_t<Range>,
  966|       |                           typename detail::basic_scan_buffer<
  967|       |                               detail::char_t<Range>>::forward_iterator>) {
  968|       |        auto beg = r.begin();
  969|       |        if (!beg.stores_parent()) {
  970|       |            return true;
  971|       |        }
  972|       |        return beg.parent()->is_contiguous();
  973|       |    }
  974|       |    else {
  975|       |        return false;
  976|       |    }
  977|    456|}
_ZN3scn2v44impl17get_as_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaT_:
 1065|    456|{
 1066|    456|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  | 1104|    456|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    456|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1067|       |
 1068|       |    if constexpr (ranges::contiguous_range<Range> &&
 1069|    456|                  ranges::sized_range<Range>) {
 1070|    456|        return r;
 1071|       |    }
 1072|       |    else if constexpr (std::is_same_v<
 1073|       |                           ranges::const_iterator_t<Range>,
 1074|       |                           typename detail::basic_scan_buffer<
 1075|       |                               detail::char_t<Range>>::forward_iterator>) {
 1076|       |        if constexpr (ranges::common_range<Range>) {
 1077|       |            return detail::make_string_view_from_pointers(
 1078|       |                r.begin().to_contiguous_segment_iterator(),
 1079|       |                r.end().to_contiguous_segment_iterator());
 1080|       |        }
 1081|       |        else {
 1082|       |            return r.begin().contiguous_segment();
 1083|       |        }
 1084|       |    }
 1085|       |    else {
 1086|       |        SCN_EXPECT(false);
 1087|       |        SCN_UNREACHABLE;
 1088|       |        // for return type deduction
 1089|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1090|       |    }
 1091|    456|}
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  981|    456|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|    456|                  ranges::sized_range<Range>) {
  984|    456|        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|       |                               detail::char_t<Range>>::forward_iterator>) {
  990|       |        auto beg = r.begin();
  991|       |        if (beg.contiguous_segment().empty()) {
  992|       |            return false;
  993|       |        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|       |        else {
  999|       |            if (beg.stores_parent()) {
 1000|       |                return beg.contiguous_segment().end() ==
 1001|       |                       beg.parent()->current_view().end();
 1002|       |            }
 1003|       |            return true;
 1004|       |        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|    456|}
_ZN3scn2v44impl22read_regex_string_implIcNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_:
 4431|    456|{
 4432|    456|    static_assert(ranges::contiguous_range<Input> &&
 4433|    456|                  ranges::borrowed_range<Input> &&
 4434|    456|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
 4435|       |
 4436|       |#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 4437|       |    std::basic_regex<CharT> re{};
 4438|       |    try {
 4439|       |        SCN_TRY(re_flags, make_regex_flags(flags));
 4440|       |        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
 4441|       |                                     re_flags | std::regex_constants::nosubs};
 4442|       |    }
 4443|       |    catch (const std::regex_error& err) {
 4444|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4445|       |                                             "Invalid regex");
 4446|       |    }
 4447|       |
 4448|       |    std::match_results<const CharT*> matches{};
 4449|       |    try {
 4450|       |        bool found = std::regex_search(input.data(),
 4451|       |                                       input.data() + input.size(), matches, re,
 4452|       |                                       std::regex_constants::match_continuous);
 4453|       |        if (!found || matches.prefix().matched) {
 4454|       |            return detail::unexpected_scan_error(
 4455|       |                scan_error::invalid_scanned_value,
 4456|       |                "Regular expression didn't match");
 4457|       |        }
 4458|       |    }
 4459|       |    catch (const std::regex_error& err) {
 4460|       |        return detail::unexpected_scan_error(
 4461|       |            scan_error::invalid_format_string,
 4462|       |            "Regex matching failed with an error");
 4463|       |    }
 4464|       |
 4465|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4466|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
 4467|       |    auto re =
 4468|       |#if SCN_REGEX_BOOST_USE_ICU
 4469|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
 4470|       |                             make_regex_flags(flags) |
 4471|       |                                 boost::regex_constants::no_except |
 4472|       |                                 boost::regex_constants::nosubs);
 4473|       |#else
 4474|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
 4475|       |                                  make_regex_flags(flags) |
 4476|       |                                      boost::regex_constants::no_except |
 4477|       |                                      boost::regex_constants::nosubs};
 4478|       |#endif
 4479|       |    if (re.status() != 0) {
 4480|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4481|       |                                             "Invalid regex");
 4482|       |    }
 4483|       |
 4484|       |    boost::match_results<const CharT*> matches{};
 4485|       |    try {
 4486|       |        bool found =
 4487|       |#if SCN_REGEX_BOOST_USE_ICU
 4488|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
 4489|       |                                   matches, re,
 4490|       |                                   boost::regex_constants::match_continuous);
 4491|       |#else
 4492|       |            boost::regex_search(input.data(), input.data() + input.size(),
 4493|       |                                matches, re,
 4494|       |                                boost::regex_constants::match_continuous);
 4495|       |#endif
 4496|       |        if (!found || matches.prefix().matched) {
 4497|       |            return detail::unexpected_scan_error(
 4498|       |                scan_error::invalid_scanned_value,
 4499|       |                "Regular expression didn't match");
 4500|       |        }
 4501|       |    }
 4502|       |    catch (const std::runtime_error& err) {
 4503|       |        return detail::unexpected_scan_error(
 4504|       |            scan_error::invalid_format_string,
 4505|       |            "Regex matching failed with an error");
 4506|       |    }
 4507|       |
 4508|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4509|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
 4510|       |    static_assert(std::is_same_v<CharT, char>);
 4511|    456|    std::string flagged_pattern{};
 4512|    456|    auto re = [&]() {
 4513|    456|        auto [opts, flagstr] = make_regex_flags(flags);
 4514|    456|        opts.set_never_capture(true);
 4515|    456|        if (flagstr.empty()) {
 4516|    456|            return re2::RE2{pattern, opts};
 4517|    456|        }
 4518|    456|        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4519|    456|        flagged_pattern.append(flagstr);
 4520|    456|        flagged_pattern.append(pattern);
 4521|    456|        return re2::RE2{flagged_pattern, opts};
 4522|    456|    }();
 4523|    456|    if (!re.ok()) {
  ------------------
  |  Branch (4523:9): [True: 186, False: 270]
  ------------------
 4524|    186|        return detail::unexpected_scan_error(
 4525|    186|            scan_error::invalid_format_string,
 4526|    186|            "Failed to parse regular expression");
 4527|    186|    }
 4528|       |
 4529|    270|    auto new_input = detail::make_string_view_from_pointers(
 4530|    270|        detail::to_address(input.begin()), detail::to_address(input.end()));
 4531|    270|    bool found = re2::RE2::Consume(&new_input, re);
 4532|    270|    if (!found) {
  ------------------
  |  Branch (4532:9): [True: 180, False: 90]
  ------------------
 4533|    180|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 4534|    180|                                             "Regular expression didn't match");
 4535|    180|    }
 4536|     90|    return input.begin() + ranges::distance(input.data(), new_input.data());
 4537|    270|#endif  // SCN_REGEX_BACKEND == ...
 4538|    270|}
_ZZN3scn2v44impl22read_regex_string_implIcNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_ENKUlvE_clEv:
 4512|    456|    auto re = [&]() {
 4513|    456|        auto [opts, flagstr] = make_regex_flags(flags);
 4514|    456|        opts.set_never_capture(true);
 4515|    456|        if (flagstr.empty()) {
  ------------------
  |  Branch (4515:13): [True: 12, False: 444]
  ------------------
 4516|     12|            return re2::RE2{pattern, opts};
 4517|     12|        }
 4518|    444|        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4519|    444|        flagged_pattern.append(flagstr);
 4520|    444|        flagged_pattern.append(pattern);
 4521|    444|        return re2::RE2{flagged_pattern, opts};
 4522|    456|    }();
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEcEEDav:
 5897|  3.75k|{
 5898|       |    if constexpr (std::is_same_v<T, bool>) {
 5899|       |        return reader_impl_for_bool<CharT>{};
 5900|       |    }
 5901|       |    else if constexpr (std::is_same_v<T, char>) {
 5902|       |        return reader_impl_for_char<CharT>{};
 5903|       |    }
 5904|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5905|       |        return reader_impl_for_wchar<CharT>{};
 5906|       |    }
 5907|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5908|       |        return reader_impl_for_code_point<CharT>{};
 5909|       |    }
 5910|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5911|       |                       std::is_same_v<T, std::wstring_view>) {
 5912|       |        return reader_impl_for_string<CharT>{};
 5913|       |    }
 5914|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5915|  3.75k|                       std::is_same_v<T, std::wstring>) {
 5916|  3.75k|        return reader_impl_for_string<CharT>{};
 5917|       |    }
 5918|       |#if !SCN_DISABLE_REGEX
 5919|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5920|       |                       std::is_same_v<T, wregex_matches>) {
 5921|       |        return reader_impl_for_regex_matches<CharT>{};
 5922|       |    }
 5923|       |#endif
 5924|       |    else if constexpr (std::is_same_v<T, void*>) {
 5925|       |        return reader_impl_for_voidptr<CharT>{};
 5926|       |    }
 5927|       |    else if constexpr (std::is_floating_point_v<T>) {
 5928|       |        return reader_impl_for_float<CharT>{};
 5929|       |    }
 5930|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5931|       |                       !std::is_same_v<T, wchar_t> &&
 5932|       |                       !std::is_same_v<T, char32_t> &&
 5933|       |                       !std::is_same_v<T, bool>) {
 5934|       |        return reader_impl_for_int<CharT>{};
 5935|       |    }
 5936|       |    else {
 5937|       |        return reader_impl_for_monostate<CharT>{};
 5938|       |    }
 5939|  3.75k|}
_ZN3scn2v44impl22transcode_if_necessaryIcwEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3139|    496|{
 3140|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3141|       |        if (source.stores_allocated_string()) {
 3142|       |            dest.assign(SCN_MOVE(source.get_allocated_string()));
 3143|       |        }
 3144|       |        else {
 3145|       |            dest.assign(source.view());
 3146|       |        }
 3147|       |    }
 3148|    496|    else {
 3149|    496|        return transcode_impl(source.view(), dest);
 3150|    496|    }
 3151|       |
 3152|      0|    return {};
 3153|    496|}
_ZN3scn2v44impl14transcode_implIcwEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEERNS5_12basic_stringIT0_NS8_ISC_EENS5_9allocatorISC_EEEE:
 3114|  2.05k|{
 3115|  2.05k|    dst.clear();
 3116|  2.05k|    transcode_valid_to_string(src, dst);
 3117|  2.05k|    return {};
 3118|  2.05k|}
_ZN3scn2v44impl25transcode_valid_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1501|  2.05k|{
 1502|  2.05k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1503|       |
 1504|  2.05k|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  | 1104|  2.05k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.05k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1505|  2.05k|    if constexpr (sizeof(SourceCharT) == 1) {
 1506|       |        if constexpr (sizeof(DestCharT) == 2) {
 1507|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1508|       |            std::u32string tmp;
 1509|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1510|       |            return transcode_to_string_impl_32to16<true>(
 1511|       |                std::u32string_view{tmp}, dest);
 1512|       |        }
 1513|  2.05k|        else if constexpr (sizeof(DestCharT) == 4) {
 1514|  2.05k|            return transcode_valid_to_string_impl_to32(src, dest);
 1515|  2.05k|        }
 1516|       |    }
 1517|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1518|       |        if constexpr (sizeof(DestCharT) == 1) {
 1519|       |            std::u32string tmp;
 1520|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1521|       |            return transcode_to_string_impl_32to8<true>(
 1522|       |                std::u32string_view{tmp}, dest);
 1523|       |        }
 1524|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1525|       |            return trasncode_valid_to_string_impl_to32(src, dest);
 1526|       |        }
 1527|       |    }
 1528|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1529|       |        if constexpr (sizeof(DestCharT) == 1) {
 1530|       |            return transcode_to_string_impl_32to8<true>(src, dest);
 1531|       |        }
 1532|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1533|       |            return transcode_to_string_impl_32to16<true>(src, dest);
 1534|       |        }
 1535|       |    }
 1536|       |
 1537|  2.05k|    SCN_EXPECT(false);
  ------------------
  |  | 1104|  2.05k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.05k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1538|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1539|  2.05k|}
_ZN3scn2v44impl35transcode_valid_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1375|  2.05k|{
 1376|  2.05k|    static_assert(sizeof(DestCharT) == 4);
 1377|       |
 1378|  2.05k|    auto it = src.begin();
 1379|   218k|    while (it != src.end()) {
  ------------------
  |  Branch (1379:12): [True: 216k, False: 2.05k]
  ------------------
 1380|   216k|        auto res = get_next_code_point_valid(
 1381|   216k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1382|   216k|                                                                 src.end()));
 1383|   216k|        SCN_EXPECT(res.value < detail::invalid_code_point);
  ------------------
  |  | 1104|   216k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   216k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1384|   216k|        dest.push_back(res.value);
 1385|   216k|        it = detail::make_string_view_iterator(src, res.iterator);
 1386|   216k|    }
 1387|  2.05k|}
_ZN3scn2v44impl25get_next_code_point_validIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1298|   216k|{
 1299|   216k|    SCN_EXPECT(!input.empty());
  ------------------
  |  | 1104|   216k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   216k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1300|       |
 1301|   216k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1302|   216k|    SCN_EXPECT(len <= input.size());
  ------------------
  |  | 1104|   216k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   216k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1303|       |
 1304|   216k|    return {input.begin() + len,
 1305|   216k|            detail::decode_code_point_exhaustive_valid(input.substr(0, len))};
 1306|   216k|}
_ZN3scn2v44impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5362|  1.10k|    {
 5363|  1.10k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  1.10k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5364|  1.10k|        return read_impl(range, specs, value);
 5365|  1.10k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5380|  1.10k|    {
 5381|  1.10k|        SCN_CLANG_PUSH
 5382|  1.10k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5383|       |
 5384|  1.10k|        switch (m_type) {
 5385|    352|            case reader_type::word:
  ------------------
  |  Branch (5385:13): [True: 352, False: 756]
  ------------------
 5386|    352|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5387|       |
 5388|    122|            case reader_type::custom_word:
  ------------------
  |  Branch (5388:13): [True: 122, False: 986]
  ------------------
 5389|    122|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5390|    122|                                                                   value);
 5391|       |
 5392|     58|            case reader_type::character:
  ------------------
  |  Branch (5392:13): [True: 58, False: 1.05k]
  ------------------
 5393|     58|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5394|       |
 5395|    302|            case reader_type::character_set:
  ------------------
  |  Branch (5395:13): [True: 302, False: 806]
  ------------------
 5396|    302|                return character_set_reader_impl<SourceCharT>{}.read(
 5397|    302|                    range, specs, value);
 5398|       |
 5399|      0|#if !SCN_DISABLE_REGEX
 5400|      2|            case reader_type::regex:
  ------------------
  |  Branch (5400:13): [True: 2, False: 1.10k]
  ------------------
 5401|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5402|      2|                    range, specs.charset_string<SourceCharT>(),
 5403|      2|                    specs.regexp_flags, value);
 5404|       |
 5405|    272|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5405:13): [True: 272, False: 836]
  ------------------
 5406|    272|                return regex_string_reader_impl<SourceCharT>{}.read(
 5407|    272|                    range,
 5408|    272|                    get_unescaped_regex_pattern(
 5409|    272|                        specs.charset_string<SourceCharT>()),
 5410|    272|                    specs.regexp_flags, value);
 5411|      0|#endif
 5412|       |
 5413|      0|            default:
  ------------------
  |  Branch (5413:13): [True: 0, False: 1.10k]
  ------------------
 5414|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5415|  1.10k|                SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5416|  1.10k|        }
 5417|       |
 5418|  1.10k|        SCN_CLANG_POP
 5419|  1.10k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4913|    352|    {
 4914|    352|        return read_string_impl(range, read_until_classic_space(range), value);
 4915|    352|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4847|    532|{
 4848|    532|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4849|       |
 4850|    532|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4851|    532|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4851:9): [True: 224, False: 308]
  ------------------
 4852|    224|        return detail::unexpected_scan_error(
 4853|    224|            scan_error::invalid_scanned_value,
 4854|    224|            "Invalid encoding in scanned string");
 4855|    224|    }
 4856|       |
 4857|    308|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3948|    308|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    308|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 308]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 4858|    308|    return SCN_MOVE(result);
  ------------------
  |  | 1108|    308|    static_cast<    \
  |  | 1109|    308|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4859|    308|}
_ZN3scn2v44impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4934|    122|    {
 4935|    122|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4935:13): [True: 70, False: 52]
  ------------------
 4936|     70|            return read_string_impl(
 4937|     70|                range,
 4938|     70|                read_until_code_unit(
 4939|     70|                    range, specs.fill.template get_code_unit<SourceCharT>()),
 4940|     70|                value);
 4941|     70|        }
 4942|     52|        return read_string_impl(
 4943|     52|            range,
 4944|     52|            read_until_code_units(
 4945|     52|                range, specs.fill.template get_code_units<SourceCharT>()),
 4946|     52|            value);
 4947|    122|    }
_ZN3scn2v44impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 5036|     58|    {
 5037|     58|        return read_impl(
 5038|     58|            range,
 5039|     58|            [&](const auto& rng) {
 5040|     58|                return read_string_impl(rng, read_all(rng), value);
 5041|     58|            },
 5042|     58|            detail::priority_tag<1>{});
 5043|     58|    }
_ZN3scn2v44impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 5063|     58|    {
 5064|     58|        return read_cb(range);
 5065|     58|    }
_ZZN3scn2v44impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 5039|     58|            [&](const auto& rng) {
 5040|     58|                return read_string_impl(rng, read_all(rng), value);
 5041|     58|            },
_ZN3scn2v44impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5137|    302|    {
 5138|    302|        auto it = read_source_impl(range, {specs});
 5139|    302|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|    302|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 8, False: 294]
  |  |  ------------------
  ------------------
 5140|      8|            return unexpected(it.error());
 5141|      8|        }
 5142|       |
 5143|    294|        return read_string_impl(range, *it, value);
 5144|    302|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4847|    294|{
 4848|    294|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4849|       |
 4850|    294|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4851|    294|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4851:9): [True: 106, False: 188]
  ------------------
 4852|    106|        return detail::unexpected_scan_error(
 4853|    106|            scan_error::invalid_scanned_value,
 4854|    106|            "Invalid encoding in scanned string");
 4855|    106|    }
 4856|       |
 4857|    188|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3948|    188|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    188|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 188]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 4858|    188|    return SCN_MOVE(result);
  ------------------
  |  | 1108|    188|    static_cast<    \
  |  | 1109|    188|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4859|    188|}
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4980|    274|    {
 4981|    274|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3958|    274|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    274|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    274|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    274|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 274, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    274|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    274|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    274|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    274|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    274|    }                                                  \
  |  |  |  | 3957|    274|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4982|      0|        return read_string_impl(range, it, value);
 4983|    274|    }
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5362|  1.83k|    {
 5363|  1.83k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  1.83k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5364|  1.83k|        return read_impl(range, specs, value);
 5365|  1.83k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5380|  1.83k|    {
 5381|  1.83k|        SCN_CLANG_PUSH
 5382|  1.83k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5383|       |
 5384|  1.83k|        switch (m_type) {
 5385|    340|            case reader_type::word:
  ------------------
  |  Branch (5385:13): [True: 340, False: 1.49k]
  ------------------
 5386|    340|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5387|       |
 5388|     62|            case reader_type::custom_word:
  ------------------
  |  Branch (5388:13): [True: 62, False: 1.76k]
  ------------------
 5389|     62|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5390|     62|                                                                   value);
 5391|       |
 5392|      0|            case reader_type::character:
  ------------------
  |  Branch (5392:13): [True: 0, False: 1.83k]
  ------------------
 5393|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5394|       |
 5395|  1.27k|            case reader_type::character_set:
  ------------------
  |  Branch (5395:13): [True: 1.27k, False: 554]
  ------------------
 5396|  1.27k|                return character_set_reader_impl<SourceCharT>{}.read(
 5397|  1.27k|                    range, specs, value);
 5398|       |
 5399|      0|#if !SCN_DISABLE_REGEX
 5400|     32|            case reader_type::regex:
  ------------------
  |  Branch (5400:13): [True: 32, False: 1.79k]
  ------------------
 5401|     32|                return regex_string_reader_impl<SourceCharT>{}.read(
 5402|     32|                    range, specs.charset_string<SourceCharT>(),
 5403|     32|                    specs.regexp_flags, value);
 5404|       |
 5405|    120|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5405:13): [True: 120, False: 1.71k]
  ------------------
 5406|    120|                return regex_string_reader_impl<SourceCharT>{}.read(
 5407|    120|                    range,
 5408|    120|                    get_unescaped_regex_pattern(
 5409|    120|                        specs.charset_string<SourceCharT>()),
 5410|    120|                    specs.regexp_flags, value);
 5411|      0|#endif
 5412|       |
 5413|      0|            default:
  ------------------
  |  Branch (5413:13): [True: 0, False: 1.83k]
  ------------------
 5414|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5415|  1.83k|                SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5416|  1.83k|        }
 5417|       |
 5418|  1.83k|        SCN_CLANG_POP
 5419|  1.83k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4913|    972|    {
 4914|    972|        return read_string_impl(range, read_until_classic_space(range), value);
 4915|    972|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4847|  1.03k|{
 4848|  1.03k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4849|       |
 4850|  1.03k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4851|  1.03k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4851:9): [True: 330, False: 704]
  ------------------
 4852|    330|        return detail::unexpected_scan_error(
 4853|    330|            scan_error::invalid_scanned_value,
 4854|    330|            "Invalid encoding in scanned string");
 4855|    330|    }
 4856|       |
 4857|    704|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3948|    704|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    704|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 704]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 4858|    704|    return SCN_MOVE(result);
  ------------------
  |  | 1108|    704|    static_cast<    \
  |  | 1109|    704|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4859|    704|}
_ZN3scn2v44impl22transcode_if_necessaryIcwEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3159|  1.55k|{
 3160|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3161|       |        dest.assign(source.view());
 3162|       |    }
 3163|  1.55k|    else {
 3164|  1.55k|        return transcode_impl(source.view(), dest);
 3165|  1.55k|    }
 3166|       |
 3167|      0|    return {};
 3168|  1.55k|}
_ZN3scn2v44impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4934|     62|    {
 4935|     62|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4935:13): [True: 30, False: 32]
  ------------------
 4936|     30|            return read_string_impl(
 4937|     30|                range,
 4938|     30|                read_until_code_unit(
 4939|     30|                    range, specs.fill.template get_code_unit<SourceCharT>()),
 4940|     30|                value);
 4941|     30|        }
 4942|     32|        return read_string_impl(
 4943|     32|            range,
 4944|     32|            read_until_code_units(
 4945|     32|                range, specs.fill.template get_code_units<SourceCharT>()),
 4946|     32|            value);
 4947|     62|    }
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5137|  1.27k|    {
 5138|  1.27k|        auto it = read_source_impl(range, {specs});
 5139|  1.27k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|  1.27k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 400, False: 876]
  |  |  ------------------
  ------------------
 5140|    400|            return unexpected(it.error());
 5141|    400|        }
 5142|       |
 5143|    876|        return read_string_impl(range, *it, value);
 5144|  1.27k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4847|    906|{
 4848|    906|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4849|       |
 4850|    906|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4851|    906|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4851:9): [True: 56, False: 850]
  ------------------
 4852|     56|        return detail::unexpected_scan_error(
 4853|     56|            scan_error::invalid_scanned_value,
 4854|     56|            "Invalid encoding in scanned string");
 4855|     56|    }
 4856|       |
 4857|    850|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3948|    850|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    850|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 850]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 4858|    850|    return SCN_MOVE(result);
  ------------------
  |  | 1108|    850|    static_cast<    \
  |  | 1109|    850|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4859|    850|}
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4980|    152|    {
 4981|    152|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3958|    152|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    152|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    152|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    152|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 122, False: 30]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    122|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    122|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    122|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    122|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    122|    }                                                  \
  |  |  |  | 3957|    152|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     30|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4982|     30|        return read_string_impl(range, it, value);
 4983|    152|    }
_ZN3scn2v44impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5897|  3.75k|{
 5898|       |    if constexpr (std::is_same_v<T, bool>) {
 5899|       |        return reader_impl_for_bool<CharT>{};
 5900|       |    }
 5901|       |    else if constexpr (std::is_same_v<T, char>) {
 5902|       |        return reader_impl_for_char<CharT>{};
 5903|       |    }
 5904|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5905|       |        return reader_impl_for_wchar<CharT>{};
 5906|       |    }
 5907|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5908|       |        return reader_impl_for_code_point<CharT>{};
 5909|       |    }
 5910|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5911|  3.75k|                       std::is_same_v<T, std::wstring_view>) {
 5912|  3.75k|        return reader_impl_for_string<CharT>{};
 5913|       |    }
 5914|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5915|       |                       std::is_same_v<T, std::wstring>) {
 5916|       |        return reader_impl_for_string<CharT>{};
 5917|       |    }
 5918|       |#if !SCN_DISABLE_REGEX
 5919|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5920|       |                       std::is_same_v<T, wregex_matches>) {
 5921|       |        return reader_impl_for_regex_matches<CharT>{};
 5922|       |    }
 5923|       |#endif
 5924|       |    else if constexpr (std::is_same_v<T, void*>) {
 5925|       |        return reader_impl_for_voidptr<CharT>{};
 5926|       |    }
 5927|       |    else if constexpr (std::is_floating_point_v<T>) {
 5928|       |        return reader_impl_for_float<CharT>{};
 5929|       |    }
 5930|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5931|       |                       !std::is_same_v<T, wchar_t> &&
 5932|       |                       !std::is_same_v<T, char32_t> &&
 5933|       |                       !std::is_same_v<T, bool>) {
 5934|       |        return reader_impl_for_int<CharT>{};
 5935|       |    }
 5936|       |    else {
 5937|       |        return reader_impl_for_monostate<CharT>{};
 5938|       |    }
 5939|  3.75k|}
_ZN3scn2v44impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5362|  1.10k|    {
 5363|  1.10k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  1.10k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5364|  1.10k|        return read_impl(range, specs, value);
 5365|  1.10k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5380|  1.10k|    {
 5381|  1.10k|        SCN_CLANG_PUSH
 5382|  1.10k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5383|       |
 5384|  1.10k|        switch (m_type) {
 5385|    352|            case reader_type::word:
  ------------------
  |  Branch (5385:13): [True: 352, False: 756]
  ------------------
 5386|    352|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5387|       |
 5388|    122|            case reader_type::custom_word:
  ------------------
  |  Branch (5388:13): [True: 122, False: 986]
  ------------------
 5389|    122|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5390|    122|                                                                   value);
 5391|       |
 5392|     58|            case reader_type::character:
  ------------------
  |  Branch (5392:13): [True: 58, False: 1.05k]
  ------------------
 5393|     58|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5394|       |
 5395|    302|            case reader_type::character_set:
  ------------------
  |  Branch (5395:13): [True: 302, False: 806]
  ------------------
 5396|    302|                return character_set_reader_impl<SourceCharT>{}.read(
 5397|    302|                    range, specs, value);
 5398|       |
 5399|      0|#if !SCN_DISABLE_REGEX
 5400|      2|            case reader_type::regex:
  ------------------
  |  Branch (5400:13): [True: 2, False: 1.10k]
  ------------------
 5401|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5402|      2|                    range, specs.charset_string<SourceCharT>(),
 5403|      2|                    specs.regexp_flags, value);
 5404|       |
 5405|    272|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5405:13): [True: 272, False: 836]
  ------------------
 5406|    272|                return regex_string_reader_impl<SourceCharT>{}.read(
 5407|    272|                    range,
 5408|    272|                    get_unescaped_regex_pattern(
 5409|    272|                        specs.charset_string<SourceCharT>()),
 5410|    272|                    specs.regexp_flags, value);
 5411|      0|#endif
 5412|       |
 5413|      0|            default:
  ------------------
  |  Branch (5413:13): [True: 0, False: 1.10k]
  ------------------
 5414|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5415|  1.10k|                SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5416|  1.10k|        }
 5417|       |
 5418|  1.10k|        SCN_CLANG_POP
 5419|  1.10k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4920|    352|    {
 4921|    352|        return read_string_view_impl(range, read_until_classic_space(range),
 4922|    352|                                     value);
 4923|    352|    }
_ZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4866|    532|{
 4867|    532|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4868|       |
 4869|    532|    auto src = [&]() {
 4870|    532|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4871|    532|            return make_contiguous_buffer(
 4872|    532|                ranges::subrange{range.begin().base(), result.base()});
 4873|    532|        }
 4874|    532|        else {
 4875|    532|            return make_contiguous_buffer(
 4876|    532|                ranges::subrange{range.begin(), result});
 4877|    532|        }
 4878|    532|    }();
 4879|    532|    using src_type = decltype(src);
 4880|       |
 4881|    532|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4881:9): [Folded - Ignored]
  ------------------
 4882|      0|        return detail::unexpected_scan_error(
 4883|      0|            scan_error::invalid_format_string,
 4884|      0|            "Cannot read a string_view from this source range (not "
 4885|      0|            "contiguous)");
 4886|      0|    }
 4887|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4888|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4889|       |                                             "Cannot read a string_view from "
 4890|       |                                             "this source range (would require "
 4891|       |                                             "transcoding)");
 4892|       |    }
 4893|    532|    else {
 4894|    532|        const auto view = src.view();
 4895|    532|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4896|       |
 4897|    532|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4897:13): [True: 224, False: 308]
  ------------------
 4898|    224|            return detail::unexpected_scan_error(
 4899|    224|                scan_error::invalid_scanned_value,
 4900|    224|                "Invalid encoding in scanned string_view");
 4901|    224|        }
 4902|       |
 4903|    308|        return SCN_MOVE(result);
  ------------------
  |  | 1108|    308|    static_cast<    \
  |  | 1109|    308|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4904|    532|    }
 4905|    532|}
_ZZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4869|    532|    auto src = [&]() {
 4870|    532|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4871|    532|            return make_contiguous_buffer(
 4872|    532|                ranges::subrange{range.begin().base(), result.base()});
 4873|       |        }
 4874|       |        else {
 4875|       |            return make_contiguous_buffer(
 4876|       |                ranges::subrange{range.begin(), result});
 4877|       |        }
 4878|    532|    }();
_ZN3scn2v44impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 4954|    122|    {
 4955|    122|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4955:13): [True: 70, False: 52]
  ------------------
 4956|     70|            return read_string_view_impl(
 4957|     70|                range,
 4958|     70|                read_until_code_unit(
 4959|     70|                    range, specs.fill.template get_code_unit<SourceCharT>()),
 4960|     70|                value);
 4961|     70|        }
 4962|     52|        return read_string_view_impl(
 4963|     52|            range,
 4964|     52|            read_until_code_units(
 4965|     52|                range, specs.fill.template get_code_units<SourceCharT>()),
 4966|     52|            value);
 4967|    122|    }
_ZN3scn2v44impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 5048|     58|    {
 5049|     58|        return read_impl(
 5050|     58|            range,
 5051|     58|            [&](const auto& rng) {
 5052|     58|                return read_string_view_impl(rng, read_all(rng), value);
 5053|     58|            },
 5054|     58|            detail::priority_tag<1>{});
 5055|     58|    }
_ZN3scn2v44impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_17basic_string_viewIT0_NSG_11char_traitsISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSX_OSP_NS0_6detail12priority_tagILm1EEE:
 5063|     58|    {
 5064|     58|        return read_cb(range);
 5065|     58|    }
_ZZN3scn2v44impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEEENKUlRKSH_E_clISD_EEDaSU_:
 5051|     58|            [&](const auto& rng) {
 5052|     58|                return read_string_view_impl(rng, read_all(rng), value);
 5053|     58|            },
_ZN3scn2v44impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 5151|    302|    {
 5152|    302|        auto it = read_source_impl(range, {specs});
 5153|    302|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|    302|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 8, False: 294]
  |  |  ------------------
  ------------------
 5154|      8|            return unexpected(it.error());
 5155|      8|        }
 5156|       |
 5157|    294|        return read_string_view_impl(range, *it, value);
 5158|    302|    }
_ZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEE:
 4866|    294|{
 4867|    294|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4868|       |
 4869|    294|    auto src = [&]() {
 4870|    294|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4871|    294|            return make_contiguous_buffer(
 4872|    294|                ranges::subrange{range.begin().base(), result.base()});
 4873|    294|        }
 4874|    294|        else {
 4875|    294|            return make_contiguous_buffer(
 4876|    294|                ranges::subrange{range.begin(), result});
 4877|    294|        }
 4878|    294|    }();
 4879|    294|    using src_type = decltype(src);
 4880|       |
 4881|    294|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4881:9): [Folded - Ignored]
  ------------------
 4882|      0|        return detail::unexpected_scan_error(
 4883|      0|            scan_error::invalid_format_string,
 4884|      0|            "Cannot read a string_view from this source range (not "
 4885|      0|            "contiguous)");
 4886|      0|    }
 4887|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4888|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4889|       |                                             "Cannot read a string_view from "
 4890|       |                                             "this source range (would require "
 4891|       |                                             "transcoding)");
 4892|       |    }
 4893|    294|    else {
 4894|    294|        const auto view = src.view();
 4895|    294|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4896|       |
 4897|    294|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4897:13): [True: 106, False: 188]
  ------------------
 4898|    106|            return detail::unexpected_scan_error(
 4899|    106|                scan_error::invalid_scanned_value,
 4900|    106|                "Invalid encoding in scanned string_view");
 4901|    106|        }
 4902|       |
 4903|    188|        return SCN_MOVE(result);
  ------------------
  |  | 1108|    188|    static_cast<    \
  |  | 1109|    188|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4904|    294|    }
 4905|    294|}
_ZZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEEENKUlvE_clEv:
 4869|    294|    auto src = [&]() {
 4870|    294|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4871|    294|            return make_contiguous_buffer(
 4872|    294|                ranges::subrange{range.begin().base(), result.base()});
 4873|       |        }
 4874|       |        else {
 4875|       |            return make_contiguous_buffer(
 4876|       |                ranges::subrange{range.begin(), result});
 4877|       |        }
 4878|    294|    }();
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSN_IT0_NSO_IST_EEEE:
 4991|    274|    {
 4992|    274|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3958|    274|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    274|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    274|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    274|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 274, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    274|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    274|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    274|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    274|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    274|    }                                                  \
  |  |  |  | 3957|    274|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4993|      0|        return read_string_view_impl(range, it, value);
 4994|    274|    }
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5362|  1.83k|    {
 5363|  1.83k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  1.83k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5364|  1.83k|        return read_impl(range, specs, value);
 5365|  1.83k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5380|  1.83k|    {
 5381|  1.83k|        SCN_CLANG_PUSH
 5382|  1.83k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5383|       |
 5384|  1.83k|        switch (m_type) {
 5385|    340|            case reader_type::word:
  ------------------
  |  Branch (5385:13): [True: 340, False: 1.49k]
  ------------------
 5386|    340|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5387|       |
 5388|     62|            case reader_type::custom_word:
  ------------------
  |  Branch (5388:13): [True: 62, False: 1.76k]
  ------------------
 5389|     62|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5390|     62|                                                                   value);
 5391|       |
 5392|      0|            case reader_type::character:
  ------------------
  |  Branch (5392:13): [True: 0, False: 1.83k]
  ------------------
 5393|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5394|       |
 5395|  1.27k|            case reader_type::character_set:
  ------------------
  |  Branch (5395:13): [True: 1.27k, False: 554]
  ------------------
 5396|  1.27k|                return character_set_reader_impl<SourceCharT>{}.read(
 5397|  1.27k|                    range, specs, value);
 5398|       |
 5399|      0|#if !SCN_DISABLE_REGEX
 5400|     32|            case reader_type::regex:
  ------------------
  |  Branch (5400:13): [True: 32, False: 1.79k]
  ------------------
 5401|     32|                return regex_string_reader_impl<SourceCharT>{}.read(
 5402|     32|                    range, specs.charset_string<SourceCharT>(),
 5403|     32|                    specs.regexp_flags, value);
 5404|       |
 5405|    120|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5405:13): [True: 120, False: 1.71k]
  ------------------
 5406|    120|                return regex_string_reader_impl<SourceCharT>{}.read(
 5407|    120|                    range,
 5408|    120|                    get_unescaped_regex_pattern(
 5409|    120|                        specs.charset_string<SourceCharT>()),
 5410|    120|                    specs.regexp_flags, value);
 5411|      0|#endif
 5412|       |
 5413|      0|            default:
  ------------------
  |  Branch (5413:13): [True: 0, False: 1.83k]
  ------------------
 5414|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5415|  1.83k|                SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5416|  1.83k|        }
 5417|       |
 5418|  1.83k|        SCN_CLANG_POP
 5419|  1.83k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4920|    972|    {
 4921|    972|        return read_string_view_impl(range, read_until_classic_space(range),
 4922|    972|                                     value);
 4923|    972|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4866|  1.03k|{
 4867|  1.03k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4868|       |
 4869|  1.03k|    auto src = [&]() {
 4870|  1.03k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4871|  1.03k|            return make_contiguous_buffer(
 4872|  1.03k|                ranges::subrange{range.begin().base(), result.base()});
 4873|  1.03k|        }
 4874|  1.03k|        else {
 4875|  1.03k|            return make_contiguous_buffer(
 4876|  1.03k|                ranges::subrange{range.begin(), result});
 4877|  1.03k|        }
 4878|  1.03k|    }();
 4879|  1.03k|    using src_type = decltype(src);
 4880|       |
 4881|  1.03k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4881:9): [Folded - Ignored]
  ------------------
 4882|      0|        return detail::unexpected_scan_error(
 4883|      0|            scan_error::invalid_format_string,
 4884|      0|            "Cannot read a string_view from this source range (not "
 4885|      0|            "contiguous)");
 4886|      0|    }
 4887|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4888|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4889|       |                                             "Cannot read a string_view from "
 4890|       |                                             "this source range (would require "
 4891|       |                                             "transcoding)");
 4892|       |    }
 4893|  1.03k|    else {
 4894|  1.03k|        const auto view = src.view();
 4895|  1.03k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4896|       |
 4897|  1.03k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4897:13): [True: 330, False: 704]
  ------------------
 4898|    330|            return detail::unexpected_scan_error(
 4899|    330|                scan_error::invalid_scanned_value,
 4900|    330|                "Invalid encoding in scanned string_view");
 4901|    330|        }
 4902|       |
 4903|    704|        return SCN_MOVE(result);
  ------------------
  |  | 1108|    704|    static_cast<    \
  |  | 1109|    704|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4904|  1.03k|    }
 4905|  1.03k|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4869|  1.03k|    auto src = [&]() {
 4870|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4871|       |            return make_contiguous_buffer(
 4872|       |                ranges::subrange{range.begin().base(), result.base()});
 4873|       |        }
 4874|  1.03k|        else {
 4875|  1.03k|            return make_contiguous_buffer(
 4876|  1.03k|                ranges::subrange{range.begin(), result});
 4877|  1.03k|        }
 4878|  1.03k|    }();
_ZN3scn2v44impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4954|     62|    {
 4955|     62|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4955:13): [True: 30, False: 32]
  ------------------
 4956|     30|            return read_string_view_impl(
 4957|     30|                range,
 4958|     30|                read_until_code_unit(
 4959|     30|                    range, specs.fill.template get_code_unit<SourceCharT>()),
 4960|     30|                value);
 4961|     30|        }
 4962|     32|        return read_string_view_impl(
 4963|     32|            range,
 4964|     32|            read_until_code_units(
 4965|     32|                range, specs.fill.template get_code_units<SourceCharT>()),
 4966|     32|            value);
 4967|     62|    }
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5151|  1.27k|    {
 5152|  1.27k|        auto it = read_source_impl(range, {specs});
 5153|  1.27k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|  1.27k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 400, False: 876]
  |  |  ------------------
  ------------------
 5154|    400|            return unexpected(it.error());
 5155|    400|        }
 5156|       |
 5157|    876|        return read_string_view_impl(range, *it, value);
 5158|  1.27k|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4866|    906|{
 4867|    906|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4868|       |
 4869|    906|    auto src = [&]() {
 4870|    906|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4871|    906|            return make_contiguous_buffer(
 4872|    906|                ranges::subrange{range.begin().base(), result.base()});
 4873|    906|        }
 4874|    906|        else {
 4875|    906|            return make_contiguous_buffer(
 4876|    906|                ranges::subrange{range.begin(), result});
 4877|    906|        }
 4878|    906|    }();
 4879|    906|    using src_type = decltype(src);
 4880|       |
 4881|    906|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4881:9): [Folded - Ignored]
  ------------------
 4882|      0|        return detail::unexpected_scan_error(
 4883|      0|            scan_error::invalid_format_string,
 4884|      0|            "Cannot read a string_view from this source range (not "
 4885|      0|            "contiguous)");
 4886|      0|    }
 4887|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4888|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4889|       |                                             "Cannot read a string_view from "
 4890|       |                                             "this source range (would require "
 4891|       |                                             "transcoding)");
 4892|       |    }
 4893|    906|    else {
 4894|    906|        const auto view = src.view();
 4895|    906|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4896|       |
 4897|    906|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4897:13): [True: 56, False: 850]
  ------------------
 4898|     56|            return detail::unexpected_scan_error(
 4899|     56|                scan_error::invalid_scanned_value,
 4900|     56|                "Invalid encoding in scanned string_view");
 4901|     56|        }
 4902|       |
 4903|    850|        return SCN_MOVE(result);
  ------------------
  |  | 1108|    850|    static_cast<    \
  |  | 1109|    850|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4904|    906|    }
 4905|    906|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4869|    906|    auto src = [&]() {
 4870|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4871|       |            return make_contiguous_buffer(
 4872|       |                ranges::subrange{range.begin().base(), result.base()});
 4873|       |        }
 4874|    906|        else {
 4875|    906|            return make_contiguous_buffer(
 4876|    906|                ranges::subrange{range.begin(), result});
 4877|    906|        }
 4878|    906|    }();
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSL_IT0_NSM_ISR_EEEE:
 4991|    152|    {
 4992|    152|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3958|    152|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    152|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    152|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    152|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 122, False: 30]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    122|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    122|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    122|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    122|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    122|    }                                                  \
  |  |  |  | 3957|    152|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     30|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4993|     30|        return read_string_view_impl(range, it, value);
 4994|    152|    }
_ZN3scn2v44impl16char_reader_baseIwE11check_specsERKNS0_6detail12format_specsE:
 5710|  1.42k|    {
 5711|  1.42k|        reader_error_handler eh{};
 5712|       |        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
 5713|       |            detail::check_code_point_type_specs(specs, eh);
 5714|       |        }
 5715|  1.42k|        else {
 5716|  1.42k|            detail::check_char_type_specs(specs, eh);
 5717|  1.42k|        }
 5718|  1.42k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1039|  1.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 724, False: 702]
  |  |  ------------------
  ------------------
 5719|    724|            return detail::unexpected_scan_error(
 5720|    724|                scan_error::invalid_format_string, eh.m_msg);
 5721|    724|        }
 5722|    702|        return {};
 5723|  1.42k|    }
_ZNK3scn2v44impl12function_refIFbwES3_EclEw:
  762|  15.1k|    {
  763|  15.1k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1110|  15.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  15.1k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  3.08k|        : m_fptr([](storage fn,
  743|  3.08k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.08k|              cvref<T> obj = *get<T>(fn);
  745|  3.08k|              if constexpr (std::is_void_v<R>) {
  746|  3.08k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.08k|              }
  748|  3.08k|              else {
  749|  3.08k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.08k|              }
  751|  3.08k|          }),
  752|  3.08k|          m_storage(std::addressof(f))
  753|  3.08k|    {
  754|  3.08k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|  6.99k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.99k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  6.99k|              else {
  749|  6.99k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.99k|              }
  751|  6.99k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  6.99k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  6.99k|        else if constexpr (std::is_object_v<T>) {
  688|  6.99k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  6.99k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  3.08k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  3.08k|        {
  662|  3.08k|        }
_ZNK3scn2v44impl16char_reader_baseIwE19skip_ws_before_readEv:
 5705|  1.89k|    {
 5706|  1.89k|        return false;
 5707|  1.89k|    }
_ZN3scn2v44impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1878|    140|    {
 1879|    140|        auto stdloc = loc.get<std::locale>();
 1880|    140|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1881|    140|        grouping = numpunct.grouping();
 1882|    140|        thousands_sep =
 1883|    140|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1883:13): [True: 0, False: 140]
  ------------------
 1884|    140|        decimal_point = numpunct.decimal_point();
 1885|    140|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1815|    168|{
 1816|    168|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1816:9): [True: 168, False: 0]
  ------------------
 1817|    168|        return std::use_facet<Facet>(stdloc);
 1818|    168|    }
 1819|      0|    stdloc = std::locale(stdloc, new Facet{});
 1820|      0|    return std::use_facet<Facet>(stdloc);
 1821|    168|}
_ZN3scn2v44impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2481|  3.65k|{
 2482|  3.65k|    size_t count{0};
 2483|  3.65k|    for_each_code_point(input, [&count](char32_t cp) {
 2484|  3.65k|        count += calculate_text_width_for_fmt_v10(cp);
 2485|  3.65k|    });
 2486|  3.65k|    return count;
 2487|  3.65k|}
_ZN3scn2v44impl19for_each_code_pointIwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1544|  3.65k|{
 1545|       |    // TODO: Could be optimized by being eager
 1546|  3.65k|    auto it = input.begin();
 1547|  15.3k|    while (it != input.end()) {
  ------------------
  |  Branch (1547:12): [True: 11.6k, False: 3.65k]
  ------------------
 1548|  11.6k|        auto res = get_next_code_point(
 1549|  11.6k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1550|  11.6k|        cb(res.value);
 1551|  11.6k|        it = detail::make_string_view_iterator(input, res.iterator);
 1552|  11.6k|    }
 1553|  3.65k|}
_ZN3scn2v44impl19get_next_code_pointIwEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1278|   706k|{
 1279|   706k|    SCN_EXPECT(!input.empty());
  ------------------
  |  | 1104|   706k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   706k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1280|       |
 1281|   706k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1282|   706k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1039|   706k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 706k]
  |  |  ------------------
  ------------------
 1283|      0|        return {get_start_for_next_code_point(input),
 1284|      0|                detail::invalid_code_point};
 1285|      0|    }
 1286|   706k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  | 1039|   706k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 706k]
  |  |  ------------------
  ------------------
 1287|      0|        return {input.end(), detail::invalid_code_point};
 1288|      0|    }
 1289|       |
 1290|   706k|    return {input.begin() + len,
 1291|   706k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1292|   706k|}
_ZN3scn2v44impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_:
  742|  3.65k|        : m_fptr([](storage fn,
  743|  3.65k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.65k|              cvref<T> obj = *get<T>(fn);
  745|  3.65k|              if constexpr (std::is_void_v<R>) {
  746|  3.65k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.65k|              }
  748|  3.65k|              else {
  749|  3.65k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.65k|              }
  751|  3.65k|          }),
  752|  3.65k|          m_storage(std::addressof(f))
  753|  3.65k|    {
  754|  3.65k|    }
_ZZN3scn2v44impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  743|  11.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  11.6k|              cvref<T> obj = *get<T>(fn);
  745|  11.6k|              if constexpr (std::is_void_v<R>) {
  746|  11.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|       |              else {
  749|       |                  return obj(static_cast<decltype(args)>(args)...);
  750|       |              }
  751|  11.6k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|  11.6k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  11.6k|        else if constexpr (std::is_object_v<T>) {
  688|  11.6k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  11.6k|    }
_ZZN3scn2v44impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2483|  11.6k|    for_each_code_point(input, [&count](char32_t cp) {
 2484|  11.6k|        count += calculate_text_width_for_fmt_v10(cp);
 2485|  11.6k|    });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vIS9_EEvE4typeELPv0EEEPS9_:
  660|  3.65k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  3.65k|        {
  662|  3.65k|        }
_ZNK3scn2v44impl24contiguous_range_factoryIwE4viewEv:
 1680|  3.67k|    {
 1681|  3.67k|        return m_view;
 1682|  3.67k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwED2Ev:
 1670|  3.59k|    ~contiguous_range_factory() = default;
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E14multibyte_leftEv:
 2553|  4.26k|    {
 2554|  4.26k|        return m_multibyte_left;
 2555|  4.26k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E22is_current_double_wideEv:
 2558|  3.45k|    {
 2559|  3.45k|        assert(count() != 0 || multibyte_left() != 0);
 2560|  3.45k|        return _get_width_at_current_cp_start(_get_cp_length_at_current()) == 2;
 2561|  3.45k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E30_get_width_at_current_cp_startEl:
 2785|  49.6k|    {
 2786|  49.6k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  | 1039|  49.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 49.6k]
  |  |  ------------------
  ------------------
 2787|      0|            return 0;
 2788|      0|        }
 2789|       |
 2790|  49.6k|        if (cplen == 1) {
  ------------------
  |  Branch (2790:13): [True: 49.6k, False: 0]
  ------------------
 2791|  49.6k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  | 1104|  49.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  49.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2792|  49.6k|            auto cp = static_cast<char32_t>(*m_current);
 2793|  49.6k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2794|  49.6k|        }
 2795|       |
 2796|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2797|      0|                                           cplen);
 2798|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2799|      0|            return 0;
 2800|      0|        }
 2801|       |
 2802|      0|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2803|      0|        return static_cast<difference_type>(
 2804|      0|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2805|      0|    }
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1955|  6.39k|{
 1956|  6.39k|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1104|  6.39k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  6.39k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|  6.39k|    if constexpr (ranges::sized_range<Range>) {
 1959|  6.39k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|  6.39k|        if (sz < count) {
  ------------------
  |  Branch (1960:13): [True: 182, False: 6.21k]
  ------------------
 1961|    182|            return unexpected(eof_error::eof);
 1962|    182|        }
 1963|       |
 1964|  6.21k|        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|       |    else {
 1967|       |        auto it = range.begin();
 1968|       |        if (guaranteed_minimum_size(range) >= count) {
 1969|       |            return ranges::next(it, count);
 1970|       |        }
 1971|       |
 1972|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1973|       |            if (it == range.end()) {
 1974|       |                return unexpected(eof_error::eof);
 1975|       |            }
 1976|       |        }
 1977|       |
 1978|       |        return it;
 1979|       |    }
 1980|  6.39k|}
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E25_get_cp_length_at_currentEv:
 2779|  49.6k|    {
 2780|  49.6k|        return static_cast<difference_type>(
 2781|  49.6k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2782|  49.6k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EdeEv:
 2564|  63.9k|    {
 2565|  63.9k|        return *m_current;
 2566|  63.9k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EppEv:
 2573|  46.1k|    {
 2574|  46.1k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  | 1104|  46.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  46.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2575|  46.1k|        _increment_current();
 2576|  46.1k|        return *this;
 2577|  46.1k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E18_increment_currentEv:
 2808|  46.1k|    {
 2809|  46.1k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2809:13): [True: 46.1k, False: 0]
  ------------------
 2810|  46.1k|            auto cplen = _get_cp_length_at_current();
 2811|  46.1k|            m_multibyte_left = cplen - 1;
 2812|  46.1k|            m_count -= _get_width_at_current_cp_start(cplen);
 2813|  46.1k|        }
 2814|      0|        else {
 2815|      0|            --m_multibyte_left;
 2816|      0|        }
 2817|       |
 2818|  46.1k|        ++m_current;
 2819|  46.1k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EESB_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SE_EENS1_20incrementable_traitsISE_E15difference_typeEE4typeESE_SF_:
  107|     22|    {
  108|     22|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|     22|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EESB_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISF_E15difference_typeEE4typeESF_SE_NS0_6detail12priority_tagILm0EEE:
   93|     22|    {
   94|     22|        iter_difference_t<I> counter{0};
   95|     44|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 22, False: 22]
  ------------------
   96|     22|            ++i;
   97|     22|            ++counter;
   98|     22|        }
   99|     22|        return counter;
  100|     22|    }
_ZN3scn2v44impl27counted_width_iterator_implneIPKwS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2669|  16.3k|    {
 2670|  16.3k|        return !(a == b);
 2671|  16.3k|    }
_ZN3scn2v44impl27counted_width_iterator_impleqIPKwS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2661|  17.8k|    {
 2662|  17.8k|        return a.m_current == b.m_current;
 2663|  17.8k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EdeEv:
 2568|  6.10k|    {
 2569|  6.10k|        return *m_current;
 2570|  6.10k|    }
_ZNK3scn2v46ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_NS1_20incrementable_traitsISD_E15difference_typeE:
  303|     66|    {
  304|     66|        ranges::advance(x, n);
  305|     66|        return x;
  306|     66|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeE:
  267|     66|    {
  268|     66|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|     66|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISE_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|     66|    {
  161|     66|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|     66|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 66, False: 0]
  ------------------
  164|    132|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 66, False: 66]
  ------------------
  165|     66|                ++i;
  166|     66|            }
  167|     66|        }
  168|      0|        else {
  169|      0|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 0]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|      0|        }
  173|     66|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEwE8is_validEv:
 1988|  16.5k|    {
 1989|  16.5k|        return !codepoint.empty();
 1990|  16.5k|    }
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EESB_EEEEDaOT_:
 1781|    948|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|       |                  ranges::sized_range<Range>) {
 1785|       |        return string_view_wrapper{SCN_FWD(range)};
 1786|       |    }
 1787|    948|    else {
 1788|    948|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  | 1110|    948|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1789|    948|    }
 1790|    948|}
_ZN3scn2v44impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSH_:
 1635|    948|    {
 1636|    948|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1110|    948|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1637|    948|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEvOT_:
 1719|    968|    {
 1720|    968|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|    968|        else {
 1753|    968|            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|    968|            if constexpr (ranges::common_range<Range>) {
 1758|    968|                std::copy(ranges::begin(range), ranges::end(range),
 1759|    968|                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|    968|            m_view = string_view_type{str};
 1768|    968|        }
 1769|    968|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EC2ES5_S5_l:
 2513|  17.3k|        : m_current(x), m_end(s), m_count(n)
 2514|  17.3k|    {
 2515|  17.3k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E4baseEv:
 2545|  66.3k|    {
 2546|  66.3k|        return m_current;
 2547|  66.3k|    }
_ZN3scn2v44impl24read_while_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2248|  10.0k|{
 2249|       |    if constexpr (ranges::contiguous_range<Range> &&
 2250|       |                  ranges::sized_range<Range> &&
 2251|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2252|       |        auto buf = make_contiguous_buffer(range);
 2253|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2254|       |        return ranges::next(range.begin(),
 2255|       |                            ranges::distance(buf.view().begin(), it));
 2256|       |    }
 2257|  10.0k|    else {
 2258|  10.0k|        auto it = range.begin();
 2259|       |
 2260|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2261|       |            auto seg = get_contiguous_beginning(range);
 2262|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2263|       |                seg_it != seg.end()) {
 2264|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2265|       |            }
 2266|       |            ranges::advance(it, seg.size());
 2267|       |        }
 2268|       |
 2269|  10.0k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|  10.0k|            return detail::is_cp_space(cp);
 2271|  10.0k|        });
 2272|  10.0k|    }
 2273|  10.0k|}
_ZN3scn2v44impl21read_while_code_pointINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_NS1_12function_refIFbDiESG_EE:
 2213|  10.0k|{
 2214|  10.0k|    return read_until_code_point(range, std::not_fn(pred));
 2215|  10.0k|}
_ZN3scn2v44impl21read_until_code_pointINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_NS1_12function_refIFbDiESG_EE:
 2192|  10.0k|{
 2193|  10.0k|    auto it = range.begin();
 2194|  21.8k|    while (it != range.end()) {
  ------------------
  |  Branch (2194:12): [True: 16.5k, False: 5.31k]
  ------------------
 2195|  16.5k|        const auto val =
 2196|  16.5k|            read_code_point_into(ranges::subrange{it, range.end()});
 2197|  16.5k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1038|  16.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 16.5k, False: 0]
  |  |  ------------------
  ------------------
 2198|  16.5k|            const auto cp = detail::decode_code_point_exhaustive(
 2199|  16.5k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2200|  16.5k|            if (pred(cp)) {
  ------------------
  |  Branch (2200:17): [True: 4.73k, False: 11.8k]
  ------------------
 2201|  4.73k|                return it;
 2202|  4.73k|            }
 2203|  16.5k|        }
 2204|  11.8k|        it = val.iterator;
 2205|  11.8k|    }
 2206|       |
 2207|  5.31k|    return it;
 2208|  10.0k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1997|  85.9k|{
 1998|  85.9k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1104|  85.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  85.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  85.9k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  85.9k|    auto it = range.begin();
 2002|  85.9k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  85.9k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1039|  85.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 85.9k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  85.9k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 85.9k, False: 0]
  ------------------
 2011|  85.9k|        ++it;
 2012|  85.9k|        return {it, string_type(1, *range.begin())};
 2013|  85.9k|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|  85.9k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  944|   108k|{
  945|   108k|    return is_range_eof(r.begin(), r.end());
  946|   108k|}
_ZN3scn2v44impl12is_range_eofIPKwS4_EEbT_T0_:
  928|   803k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   803k|    {
  938|   803k|        return begin == end;
  939|   803k|    }
  940|   803k|}
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|  1.05k|    {
  190|  1.05k|        i = std::move(bound);
  191|  1.05k|    }
_ZNK3scn2v44impl27read_code_point_into_resultIPKwwE8is_validEv:
 1988|  85.9k|    {
 1989|  85.9k|        return !codepoint.empty();
 1990|  85.9k|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_:
  742|  10.0k|        : m_fptr([](storage fn,
  743|  10.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  10.0k|              cvref<T> obj = *get<T>(fn);
  745|  10.0k|              if constexpr (std::is_void_v<R>) {
  746|  10.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  10.0k|              }
  748|  10.0k|              else {
  749|  10.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  10.0k|              }
  751|  10.0k|          }),
  752|  10.0k|          m_storage(std::addressof(f))
  753|  10.0k|    {
  754|  10.0k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESU_Di:
  743|  16.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  16.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  16.5k|              else {
  749|  16.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  16.5k|              }
  751|  16.5k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|  16.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  16.5k|        else if constexpr (std::is_object_v<T>) {
  688|  16.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  16.5k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2269|  16.5k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|  16.5k|            return detail::is_cp_space(cp);
 2271|  16.5k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vISE_EEvE4typeELPv0EEEPSE_:
  660|  10.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  10.0k|        {
  662|  10.0k|        }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  950|  22.6k|{
  951|  22.6k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1039|  22.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 22.6k]
  |  |  ------------------
  ------------------
  952|      0|        return eof_error::eof;
  953|      0|    }
  954|  22.6k|    return eof_error::good;
  955|  22.6k|}
_ZNK3scn2v44impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2974|  6.68k|    {
 2975|  6.68k|        return take_width_view{r, n};
 2976|  6.68k|    }
_ZN3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2ERKS9_l:
 2942|  6.68k|        : m_base(base), m_count(count)
 2943|  6.68k|    {
 2944|  6.68k|    }
_ZN3scn2v44impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEvEC2ERKS9_:
 2854|  6.68k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v44impl21reader_impl_for_wcharIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERwNSN_10locale_refE:
 5786|    250|    {
 5787|    250|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5787:13): [True: 206, False: 44]
  ------------------
 5788|    250|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5788:13): [True: 0, False: 44]
  ------------------
 5789|    206|            return read_default(range, value, loc);
 5790|    206|        }
 5791|       |
 5792|     44|        reader_impl_for_int<CharT> reader{};
 5793|     44|        using integer_type =
 5794|     44|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5795|     44|        integer_type tmp_value{};
 5796|     44|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5797|     44|        value = static_cast<integer_type>(value);
 5798|     44|        return ret;
 5799|    250|    }
_ZN3scn2v44impl21reader_impl_for_wcharIwE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RwNS0_6detail10locale_refE:
 5770|    206|    {
 5771|    206|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|    206|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5772|       |        if constexpr (std::is_same_v<CharT, char>) {
 5773|       |            return code_point_reader<wchar_t>{}.read(range, value);
 5774|       |        }
 5775|    206|        else {
 5776|    206|            return code_unit_reader<wchar_t>{}.read(range, value);
 5777|    206|        }
 5778|    206|    }
_ZN3scn2v44impl16code_unit_readerIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rw:
 5650|    206|    {
 5651|    206|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3958|    206|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    206|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    206|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    206|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 206]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    206|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    206|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5652|    206|        ch = *range.begin();
 5653|    206|        return it;
 5654|    206|    }
_ZN3scn2v44impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1944|  1.71k|{
 1945|  1.71k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  1.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.71k]
  |  |  ------------------
  ------------------
 1946|      0|        return unexpected(e);
 1947|      0|    }
 1948|       |
 1949|  1.71k|    return ranges::next(range.begin());
 1950|  1.71k|}
_ZN3scn2v44impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_9eof_errorET_:
  950|  1.71k|{
  951|  1.71k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1039|  1.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.71k]
  |  |  ------------------
  ------------------
  952|      0|        return eof_error::eof;
  953|      0|    }
  954|  1.71k|    return eof_error::good;
  955|  1.71k|}
_ZN3scn2v44impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEbT_:
  944|  1.71k|{
  945|  1.71k|    return is_range_eof(r.begin(), r.end());
  946|  1.71k|}
_ZN3scn2v44impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  928|  18.3k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  18.3k|    {
  938|  18.3k|        return begin == end;
  939|  18.3k|    }
  940|  18.3k|}
_ZN3scn2v44impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2910|  61.3k|        {
 2911|  61.3k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2911:21): [True: 818, False: 60.5k]
  |  Branch (2911:39): [True: 818, False: 0]
  ------------------
 2912|  61.3k|                   y.base() == x.m_end ||
  ------------------
  |  Branch (2912:20): [True: 528, False: 60.0k]
  ------------------
 2913|  61.3k|                   (y.count() == 1 && y.multibyte_left() == 0 &&
  ------------------
  |  Branch (2913:21): [True: 3.45k, False: 56.5k]
  |  Branch (2913:39): [True: 3.45k, False: 0]
  ------------------
 2914|  60.0k|                    y.is_current_double_wide());
  ------------------
  |  Branch (2914:21): [True: 54, False: 3.39k]
  ------------------
 2915|  61.3k|        }
_ZNK3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE3endEv:
 2958|  34.5k|    {
 2959|  34.5k|        return sentinel<true>{m_base.get().end()};
 2960|  34.5k|    }
_ZNK3scn2v44impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEvE3getEv:
 2857|  69.2k|    {
 2858|  69.2k|        return view;
 2859|  69.2k|    }
_ZN3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE8sentinelILb1EEC2ES8_:
 2891|  34.5k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  | 1108|  34.5k|    static_cast<    \
  |  | 1109|  34.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZNK3scn2v46ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|  1.80k|    {
  296|  1.80k|        ++x;
  297|  1.80k|        return x;
  298|  1.80k|    }
_ZNK3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 2952|  17.3k|    {
 2953|  17.3k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2954|  17.3k|                                      m_count};
 2955|  17.3k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3621|    302|    {
 3622|    302|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3958|    302|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    302|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    302|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    302|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 302]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    302|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    302|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3623|    302|                                   .transform_error(make_eof_scan_error));
 3624|       |
 3625|    302|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3625:13): [True: 0, False: 302]
  ------------------
 3626|       |            if constexpr (!std::is_signed_v<T>) {
 3627|       |                return detail::unexpected_scan_error(
 3628|       |                    scan_error::invalid_scanned_value,
 3629|       |                    "Unexpected '-' sign when parsing an "
 3630|       |                    "unsigned value");
 3631|       |            }
 3632|      0|            else {
 3633|      0|                if (specs.type ==
  ------------------
  |  Branch (3633:21): [True: 0, False: 0]
  ------------------
 3634|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3635|      0|                    return detail::unexpected_scan_error(
 3636|      0|                        scan_error::invalid_scanned_value,
 3637|      0|                        "'u'-option disallows negative values");
 3638|      0|                }
 3639|      0|            }
 3640|      0|        }
 3641|       |
 3642|    302|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3642:13): [True: 12, False: 290]
  ------------------
 3643|     12|            value = T{0};
 3644|     12|            return std::next(prefix_result.iterator);
 3645|     12|        }
 3646|       |
 3647|    290|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1038|    290|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 264, False: 26]
  |  |  ------------------
  ------------------
 3648|    264|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|    264|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    264|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    264|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 248, False: 16]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    248|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    248|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    248|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    248|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    248|    }                                                  \
  |  |  |  | 3957|    264|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|     16|                    parse_integer_digits_without_thsep(
 3650|     16|                        ranges::subrange{prefix_result.iterator, range.end()},
 3651|     16|                        prefix_result.parsed_base));
 3652|       |
 3653|     16|            auto buf = make_contiguous_buffer(
 3654|     16|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3655|     16|            SCN_TRY(result_it,
  ------------------
  |  | 3958|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 16]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3656|     16|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3657|     16|                                        prefix_result.parsed_base));
 3658|       |
 3659|     16|            return ranges::next(
 3660|     16|                prefix_result.iterator,
 3661|     16|                ranges::distance(buf.view().begin(), result_it));
 3662|     16|        }
 3663|       |
 3664|     26|        auto locale_options =
 3665|       |#if SCN_DISABLE_LOCALE
 3666|       |            localized_number_formatting_options<CharT>{};
 3667|       |#else
 3668|     26|            localized_number_formatting_options<CharT>{loc};
 3669|     26|#endif
 3670|       |
 3671|     26|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3958|     26|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|     26|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|     26|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 22, False: 4]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     22|    }                                                  \
  |  |  |  | 3957|     26|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      4|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3672|      4|                parse_integer_digits_with_thsep(
 3673|      4|                    ranges::subrange{prefix_result.iterator, range.end()},
 3674|      4|                    prefix_result.parsed_base, locale_options));
 3675|      4|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3676|      4|            parse_digits_result;
 3677|       |
 3678|      4|        auto nothsep_source_view =
 3679|      4|            std::basic_string_view<CharT>{nothsep_source};
 3680|      4|        SCN_TRY(
  ------------------
  |  | 3958|      4|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      4|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      4|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 4]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      4|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      4|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3681|      4|            nothsep_source_it,
 3682|      4|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3683|      4|                                prefix_result.parsed_base));
 3684|       |
 3685|      4|        return ranges::next(
 3686|      4|            prefix_result.iterator,
 3687|      4|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3688|      4|                ranges::ssize(thsep_indices));
 3689|      4|    }
_ZN3scn2v44impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3408|    764|{
 3409|    764|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3958|    764|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    764|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    764|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    764|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 764]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    764|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    764|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3410|    764|    auto [base_prefix_begin_it, sign] = sign_result;
 3411|       |
 3412|    764|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3413|    764|        parse_integer_base_prefix(
 3414|    764|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3415|       |
 3416|    764|    if (parsed_zero) {
  ------------------
  |  Branch (3416:9): [True: 18, False: 746]
  ------------------
 3417|     18|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3417:13): [True: 6, False: 12]
  |  Branch (3417:13): [True: 18, False: 0]
  ------------------
 3418|     18|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3418:13): [True: 12, False: 0]
  ------------------
 3419|     18|            digits_begin_it = base_prefix_begin_it;
 3420|     18|        }
 3421|      0|        else {
 3422|      0|            parsed_zero = false;
 3423|      0|        }
 3424|     18|    }
 3425|    746|    else {
 3426|    746|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3426:13): [True: 0, False: 746]
  |  Branch (3426:13): [True: 700, False: 46]
  ------------------
 3427|    746|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3427:13): [True: 700, False: 46]
  ------------------
 3428|    700|            digits_begin_it = base_prefix_begin_it;
 3429|    700|        }
 3430|    746|    }
 3431|       |
 3432|    764|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3432:9): [True: 764, False: 0]
  ------------------
 3433|    764|        sign = sign_type::plus_sign;
 3434|    764|    }
 3435|    764|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3436|    764|        digits_begin_it, parsed_base, sign, parsed_zero};
 3437|    764|}
_ZN3scn2v44impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3289|  1.01k|{
 3290|  1.01k|    auto r = read_one_of_code_unit(range, "+-");
 3291|  1.01k|    if (!r) {
  ------------------
  |  Branch (3291:9): [True: 1.01k, False: 0]
  ------------------
 3292|  1.01k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3292:13): [True: 1.01k, False: 0]
  ------------------
 3293|  1.01k|            return std::pair{range.begin(), sign_type::default_sign};
 3294|  1.01k|        }
 3295|      0|        return unexpected(eof_error::eof);
 3296|  1.01k|    }
 3297|       |
 3298|      0|    auto& it = *r;
 3299|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3299:9): [True: 0, False: 0]
  ------------------
 3300|      0|        return std::pair{it, sign_type::minus_sign};
 3301|      0|    }
 3302|      0|    return std::pair{it, sign_type::plus_sign};
 3303|      0|}
_ZN3scn2v44impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2404|  1.01k|{
 2405|  1.01k|    auto it = read_code_unit(range);
 2406|  1.01k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|  1.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.01k]
  |  |  ------------------
  ------------------
 2407|      0|        return unexpected(make_eof_parse_error(it.error()));
 2408|      0|    }
 2409|       |
 2410|  2.02k|    for (auto ch : str) {
  ------------------
  |  Branch (2410:18): [True: 2.02k, False: 1.01k]
  ------------------
 2411|  2.02k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2411:13): [True: 0, False: 2.02k]
  ------------------
 2412|      0|            return *it;
 2413|      0|        }
 2414|  2.02k|    }
 2415|       |
 2416|  1.01k|    return unexpected(parse_error::error);
 2417|  1.01k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3375|    764|{
 3376|    764|    switch (base) {
 3377|      8|        case 2:
  ------------------
  |  Branch (3377:9): [True: 8, False: 756]
  ------------------
 3378|       |            // allow 0b/0B
 3379|      8|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3380|      8|                    false};
 3381|       |
 3382|     30|        case 8: {
  ------------------
  |  Branch (3382:9): [True: 30, False: 734]
  ------------------
 3383|       |            // allow 0o/0O/0
 3384|     30|            bool zero_parsed = false;
 3385|     30|            auto it = apply_opt(
 3386|     30|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3387|     30|            return {it, 8, zero_parsed};
 3388|      0|        }
 3389|       |
 3390|    226|        case 16:
  ------------------
  |  Branch (3390:9): [True: 226, False: 538]
  ------------------
 3391|       |            // allow 0x/0X
 3392|    226|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3393|    226|                    false};
 3394|       |
 3395|     38|        case 0:
  ------------------
  |  Branch (3395:9): [True: 38, False: 726]
  ------------------
 3396|       |            // detect base
 3397|     38|            return parse_integer_base_prefix_for_detection(range);
 3398|       |
 3399|    462|        default:
  ------------------
  |  Branch (3399:9): [True: 462, False: 302]
  ------------------
 3400|       |            // no base prefix allowed
 3401|    462|            return {range.begin(), base, false};
 3402|    764|    }
 3403|    764|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2423|    264|{
 2424|    264|    if (!result) {
  ------------------
  |  Branch (2424:9): [True: 258, False: 6]
  ------------------
 2425|    258|        return range.begin();
 2426|    258|    }
 2427|      6|    return *result;
 2428|    264|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3326|     46|{
 3327|     46|    return read_matching_string_classic_nocase(range, "0b");
 3328|     46|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2363|  1.10k|{
 2364|  1.10k|    using char_type = detail::char_t<Range>;
 2365|       |
 2366|       |    if constexpr (ranges::contiguous_range<Range> &&
 2367|       |                  std::is_same_v<char_type, char>) {
 2368|       |        if (range.size() < str.size()) {
 2369|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2370|       |        }
 2371|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2372|       |            return unexpected(parse_error::error);
 2373|       |        }
 2374|       |        return ranges::next(range.begin(), str.size());
 2375|       |    }
 2376|  1.10k|    else {
 2377|  1.10k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2378|  1.10k|            if (ch < 'A' || ch > 'Z') {
 2379|  1.10k|                return ch;
 2380|  1.10k|            }
 2381|  1.10k|            return static_cast<char_type>(ch +
 2382|  1.10k|                                          static_cast<char_type>('a' - 'A'));
 2383|  1.10k|        };
 2384|       |
 2385|  1.10k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3958|  1.10k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.10k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.10k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 208, False: 896]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    208|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    208|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    208|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    208|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    208|    }                                                  \
  |  |  |  | 3957|  1.10k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    896|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2386|    896|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2387|    896|                        .transform_error(make_eof_parse_error));
 2388|       |
 2389|    896|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  | 1039|    896|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 896, False: 0]
  |  |  ------------------
  ------------------
 2390|    896|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2391|    896|                    return ascii_tolower(a) ==
 2392|    896|                           static_cast<detail::char_t<Range>>(b);
 2393|    896|                }))) {
 2394|    896|            return unexpected(parse_error::error);
 2395|    896|        }
 2396|       |
 2397|      0|        return it;
 2398|    896|    }
 2399|  1.10k|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1955|  1.10k|{
 1956|  1.10k|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1104|  1.10k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.10k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|  1.10k|    else {
 1967|  1.10k|        auto it = range.begin();
 1968|  1.10k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 0, False: 1.10k]
  ------------------
 1969|      0|            return ranges::next(it, count);
 1970|      0|        }
 1971|       |
 1972|  3.54k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 2.65k, False: 896]
  ------------------
 1973|  2.65k|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 208, False: 2.44k]
  ------------------
 1974|    208|                return unexpected(eof_error::eof);
 1975|    208|            }
 1976|  2.65k|        }
 1977|       |
 1978|    896|        return it;
 1979|  1.10k|    }
 1980|  1.10k|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1095|  1.10k|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|       |                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|       |        else {
 1107|       |            if (r.begin().stores_parent()) {
 1108|       |                return static_cast<size_t>(
 1109|       |                    r.begin().parent()->chars_available() -
 1110|       |                    r.begin().position());
 1111|       |            }
 1112|       |            return r.begin().contiguous_segment().size();
 1113|       |        }
 1114|       |    }
 1115|  1.10k|    else {
 1116|  1.10k|        return 0;
 1117|  1.10k|    }
 1118|  1.10k|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlwE_clEw:
 2377|    938|        auto ascii_tolower = [](char_type ch) -> char_type {
 2378|    938|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2378:17): [True: 132, False: 806]
  |  Branch (2378:29): [True: 806, False: 0]
  ------------------
 2379|    938|                return ch;
 2380|    938|            }
 2381|      0|            return static_cast<char_type>(ch +
 2382|      0|                                          static_cast<char_type>('a' - 'A'));
 2383|    938|        };
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_Rb:
 3340|     68|{
 3341|     68|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3341:14): [True: 0, False: 68]
  ------------------
 3342|      0|        return *r;
 3343|      0|    }
 3344|       |
 3345|     68|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3345:14): [True: 18, False: 50]
  ------------------
 3346|     18|        zero_parsed = true;
 3347|     18|        return *r;
 3348|     18|    }
 3349|       |
 3350|     50|    return unexpected(parse_error::error);
 3351|     68|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NDTcl4implISL_EEE4typeE:
 2278|     90|{
 2279|     90|    auto it = read_code_unit(range);
 2280|     90|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|     90|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 8, False: 82]
  |  |  ------------------
  ------------------
 2281|      8|        return unexpected(make_eof_parse_error(it.error()));
 2282|      8|    }
 2283|       |
 2284|     82|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  | 1039|     82|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 64, False: 18]
  |  |  ------------------
  ------------------
 2285|     82|                     static_cast<detail::char_t<Range>>(ch))) {
 2286|     64|        return unexpected(parse_error::error);
 2287|     64|    }
 2288|       |
 2289|     18|    return *it;
 2290|     82|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 1944|    110|{
 1945|    110|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|    110|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 14, False: 96]
  |  |  ------------------
  ------------------
 1946|     14|        return unexpected(e);
 1947|     14|    }
 1948|       |
 1949|     96|    return ranges::next(range.begin());
 1950|    110|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_9eof_errorET_:
  950|    110|{
  951|    110|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1039|    110|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 14, False: 96]
  |  |  ------------------
  ------------------
  952|     14|        return eof_error::eof;
  953|     14|    }
  954|     96|    return eof_error::good;
  955|    110|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  944|  16.6k|{
  945|  16.6k|    return is_range_eof(r.begin(), r.end());
  946|  16.6k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3333|    264|{
 3334|    264|    return read_matching_string_classic_nocase(range, "0x");
 3335|    264|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_:
 3356|     38|{
 3357|     38|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3357:14): [True: 0, False: 38]
  ------------------
 3358|      0|        return {*r, 16, false};
 3359|      0|    }
 3360|     38|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3360:14): [True: 0, False: 38]
  ------------------
 3361|      0|        return {*r, 2, false};
 3362|      0|    }
 3363|     38|    {
 3364|     38|        bool zero_parsed{false};
 3365|     38|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3365:18): [True: 12, False: 26]
  ------------------
 3366|     12|            return {*r, 8, zero_parsed};
 3367|     12|        }
 3368|     38|    }
 3369|     26|    return {range.begin(), 10, false};
 3370|     38|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3442|    694|{
 3443|    694|    using char_type = detail::char_t<Range>;
 3444|       |
 3445|       |    if constexpr (ranges::contiguous_range<Range>) {
 3446|       |        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3447|       |            return detail::unexpected_scan_error(
 3448|       |                scan_error::invalid_scanned_value,
 3449|       |                "Failed to parse integer: No digits found");
 3450|       |        }
 3451|       |        return range.end();
 3452|       |    }
 3453|    694|    else {
 3454|    694|        return read_while1_code_unit(range,
 3455|    694|                                     [&](char_type ch) noexcept {
 3456|    694|                                         return char_to_int(ch) < base;
 3457|    694|                                     })
 3458|    694|            .transform_error(map_parse_error_to_scan_error(
 3459|    694|                scan_error::invalid_scanned_value,
 3460|    694|                "Failed to parse integer: No digits found"));
 3461|    694|    }
 3462|    694|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 2127|    962|{
 2128|    962|    auto it = read_while_code_unit(range, pred);
 2129|    962|    if (it == range.begin()) {
  ------------------
  |  Branch (2129:9): [True: 902, False: 60]
  ------------------
 2130|    902|        return unexpected(parse_error::error);
 2131|    902|    }
 2132|     60|    return it;
 2133|    962|}
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 2107|    962|{
 2108|    962|    return read_until_code_unit(range, std::not_fn(pred));
 2109|    962|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 2074|    962|{
 2075|       |    if constexpr (ranges::common_range<Range>) {
 2076|       |        return std::find_if(range.begin(), range.end(), pred);
 2077|       |    }
 2078|    962|    else {
 2079|    962|        auto first = range.begin();
 2080|  1.02k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2080:16): [True: 992, False: 30]
  ------------------
 2081|    992|            if (pred(*first)) {
  ------------------
  |  Branch (2081:17): [True: 932, False: 60]
  ------------------
 2082|    932|                return first;
 2083|    932|            }
 2084|    992|        }
 2085|     30|        return first;
 2086|    962|    }
 2087|    962|}
_ZN3scn2v44implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2923|  30.7k|        {
 2924|  30.7k|            return !(y == x);
 2925|  30.7k|        }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_:
  742|    694|        : m_fptr([](storage fn,
  743|    694|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    694|              cvref<T> obj = *get<T>(fn);
  745|    694|              if constexpr (std::is_void_v<R>) {
  746|    694|                  obj(static_cast<decltype(args)>(args)...);
  747|    694|              }
  748|    694|              else {
  749|    694|                  return obj(static_cast<decltype(args)>(args)...);
  750|    694|              }
  751|    694|          }),
  752|    694|          m_storage(std::addressof(f))
  753|    694|    {
  754|    694|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|    718|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    718|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    718|              else {
  749|    718|                  return obj(static_cast<decltype(args)>(args)...);
  750|    718|              }
  751|    718|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlwE_EEDaNS3_7storageE:
  683|    718|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    718|        else if constexpr (std::is_object_v<T>) {
  688|    718|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    718|    }
_ZZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlwE_clEw:
 3455|    718|                                     [&](char_type ch) noexcept {
 3456|    718|                                         return char_to_int(ch) < base;
 3457|    718|                                     })
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_TnPNSN_9enable_ifIXsr3stdE11is_object_vISP_EEvE4typeELPv0EEEPSP_:
  660|    694|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    694|        {
  662|    694|        }
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEENSJ_12basic_stringIT0_NSJ_11char_traitsISS_EENSJ_9allocatorISS_EEEENSR_IcNST_IcEENSV_IcEEEEEEEEESM_iRKNS1_35localized_number_formatting_optionsISS_EE:
 3472|     52|{
 3473|     52|    std::basic_string<CharT> output;
 3474|     52|    std::string thsep_indices;
 3475|     52|    auto it = range.begin();
 3476|     52|    bool digit_matched = false;
 3477|     60|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3477:12): [True: 56, False: 4]
  ------------------
 3478|     56|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3478:13): [True: 0, False: 56]
  ------------------
 3479|      0|            thsep_indices.push_back(
 3480|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3481|      0|        }
 3482|     56|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3482:18): [True: 48, False: 8]
  ------------------
 3483|     48|            break;
 3484|     48|        }
 3485|      8|        else {
 3486|      8|            output.push_back(*it);
 3487|      8|            digit_matched = true;
 3488|      8|        }
 3489|     56|    }
 3490|     52|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  | 1039|     52|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 44, False: 8]
  |  |  ------------------
  ------------------
 3491|     44|        return detail::unexpected_scan_error(
 3492|     44|            scan_error::invalid_scanned_value,
 3493|     44|            "Failed to parse integer: No digits found");
 3494|     44|    }
 3495|      8|    return std::tuple{it, output, thsep_indices};
 3496|     52|}
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E5countEv:
 2549|   126k|    {
 2550|   126k|        return m_count;
 2551|   126k|    }
_ZN3scn2v44impl21reader_impl_for_wcharIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERwNSL_10locale_refE:
 5786|    450|    {
 5787|    450|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5787:13): [True: 398, False: 52]
  ------------------
 5788|    450|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5788:13): [True: 0, False: 52]
  ------------------
 5789|    398|            return read_default(range, value, loc);
 5790|    398|        }
 5791|       |
 5792|     52|        reader_impl_for_int<CharT> reader{};
 5793|     52|        using integer_type =
 5794|     52|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5795|     52|        integer_type tmp_value{};
 5796|     52|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5797|     52|        value = static_cast<integer_type>(value);
 5798|     52|        return ret;
 5799|    450|    }
_ZN3scn2v44impl21reader_impl_for_wcharIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RwNS0_6detail10locale_refE:
 5770|    962|    {
 5771|    962|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|    962|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5772|       |        if constexpr (std::is_same_v<CharT, char>) {
 5773|       |            return code_point_reader<wchar_t>{}.read(range, value);
 5774|       |        }
 5775|    962|        else {
 5776|    962|            return code_unit_reader<wchar_t>{}.read(range, value);
 5777|    962|        }
 5778|    962|    }
_ZN3scn2v44impl16code_unit_readerIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rw:
 5650|    962|    {
 5651|    962|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3958|    962|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    962|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    962|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    962|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 962]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    962|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    962|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5652|    962|        ch = *range.begin();
 5653|    962|        return it;
 5654|    962|    }
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1944|  7.25k|{
 1945|  7.25k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  7.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 7.25k]
  |  |  ------------------
  ------------------
 1946|      0|        return unexpected(e);
 1947|      0|    }
 1948|       |
 1949|  7.25k|    return ranges::next(range.begin());
 1950|  7.25k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   646k|    {
  296|   646k|        ++x;
  297|   646k|        return x;
  298|   646k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3621|    530|    {
 3622|    530|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3958|    530|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    530|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    530|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    530|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 530]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    530|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    530|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3623|    530|                                   .transform_error(make_eof_scan_error));
 3624|       |
 3625|    530|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3625:13): [True: 0, False: 530]
  ------------------
 3626|       |            if constexpr (!std::is_signed_v<T>) {
 3627|       |                return detail::unexpected_scan_error(
 3628|       |                    scan_error::invalid_scanned_value,
 3629|       |                    "Unexpected '-' sign when parsing an "
 3630|       |                    "unsigned value");
 3631|       |            }
 3632|      0|            else {
 3633|      0|                if (specs.type ==
  ------------------
  |  Branch (3633:21): [True: 0, False: 0]
  ------------------
 3634|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3635|      0|                    return detail::unexpected_scan_error(
 3636|      0|                        scan_error::invalid_scanned_value,
 3637|      0|                        "'u'-option disallows negative values");
 3638|      0|                }
 3639|      0|            }
 3640|      0|        }
 3641|       |
 3642|    530|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3642:13): [True: 18, False: 512]
  ------------------
 3643|     18|            value = T{0};
 3644|     18|            return std::next(prefix_result.iterator);
 3645|     18|        }
 3646|       |
 3647|    512|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1038|    512|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 486, False: 26]
  |  |  ------------------
  ------------------
 3648|    486|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|    486|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    486|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    486|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    486|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 486]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    486|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    486|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|    486|                    parse_integer_digits_without_thsep(
 3650|    486|                        ranges::subrange{prefix_result.iterator, range.end()},
 3651|    486|                        prefix_result.parsed_base));
 3652|       |
 3653|    486|            auto buf = make_contiguous_buffer(
 3654|    486|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3655|    486|            SCN_TRY(result_it,
  ------------------
  |  | 3958|    486|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    486|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    486|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    486|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 452, False: 34]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    452|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    452|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    452|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    452|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    452|    }                                                  \
  |  |  |  | 3957|    486|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     34|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3656|     34|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3657|     34|                                        prefix_result.parsed_base));
 3658|       |
 3659|     34|            return ranges::next(
 3660|     34|                prefix_result.iterator,
 3661|     34|                ranges::distance(buf.view().begin(), result_it));
 3662|    486|        }
 3663|       |
 3664|     26|        auto locale_options =
 3665|       |#if SCN_DISABLE_LOCALE
 3666|       |            localized_number_formatting_options<CharT>{};
 3667|       |#else
 3668|     26|            localized_number_formatting_options<CharT>{loc};
 3669|     26|#endif
 3670|       |
 3671|     26|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3958|     26|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|     26|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|     26|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 22, False: 4]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     22|    }                                                  \
  |  |  |  | 3957|     26|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      4|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3672|      4|                parse_integer_digits_with_thsep(
 3673|      4|                    ranges::subrange{prefix_result.iterator, range.end()},
 3674|      4|                    prefix_result.parsed_base, locale_options));
 3675|      4|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3676|      4|            parse_digits_result;
 3677|       |
 3678|      4|        auto nothsep_source_view =
 3679|      4|            std::basic_string_view<CharT>{nothsep_source};
 3680|      4|        SCN_TRY(
  ------------------
  |  | 3958|      4|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      4|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      4|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 4]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      4|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      4|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3681|      4|            nothsep_source_it,
 3682|      4|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3683|      4|                                prefix_result.parsed_base));
 3684|       |
 3685|      4|        return ranges::next(
 3686|      4|            prefix_result.iterator,
 3687|      4|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3688|      4|                ranges::ssize(thsep_indices));
 3689|      4|    }
_ZN3scn2v44impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3408|  3.10k|{
 3409|  3.10k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3958|  3.10k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  3.10k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  3.10k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  3.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 3.10k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  3.10k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  3.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3410|  3.10k|    auto [base_prefix_begin_it, sign] = sign_result;
 3411|       |
 3412|  3.10k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3413|  3.10k|        parse_integer_base_prefix(
 3414|  3.10k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3415|       |
 3416|  3.10k|    if (parsed_zero) {
  ------------------
  |  Branch (3416:9): [True: 28, False: 3.07k]
  ------------------
 3417|     28|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3417:13): [True: 0, False: 28]
  ------------------
 3418|     28|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3418:13): [True: 28, False: 0]
  ------------------
 3419|     28|            digits_begin_it = base_prefix_begin_it;
 3420|     28|        }
 3421|      0|        else {
 3422|      0|            parsed_zero = false;
 3423|      0|        }
 3424|     28|    }
 3425|  3.07k|    else {
 3426|  3.07k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3426:13): [True: 0, False: 3.07k]
  ------------------
 3427|  3.07k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3427:13): [True: 2.97k, False: 100]
  ------------------
 3428|  2.97k|            digits_begin_it = base_prefix_begin_it;
 3429|  2.97k|        }
 3430|  3.07k|    }
 3431|       |
 3432|  3.10k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3432:9): [True: 3.10k, False: 0]
  ------------------
 3433|  3.10k|        sign = sign_type::plus_sign;
 3434|  3.10k|    }
 3435|  3.10k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3436|  3.10k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3437|  3.10k|}
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3289|  4.17k|{
 3290|  4.17k|    auto r = read_one_of_code_unit(range, "+-");
 3291|  4.17k|    if (!r) {
  ------------------
  |  Branch (3291:9): [True: 4.17k, False: 0]
  ------------------
 3292|  4.17k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3292:13): [True: 4.17k, False: 0]
  ------------------
 3293|  4.17k|            return std::pair{range.begin(), sign_type::default_sign};
 3294|  4.17k|        }
 3295|      0|        return unexpected(eof_error::eof);
 3296|  4.17k|    }
 3297|       |
 3298|      0|    auto& it = *r;
 3299|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3299:9): [True: 0, False: 0]
  ------------------
 3300|      0|        return std::pair{it, sign_type::minus_sign};
 3301|      0|    }
 3302|      0|    return std::pair{it, sign_type::plus_sign};
 3303|      0|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2404|  4.18k|{
 2405|  4.18k|    auto it = read_code_unit(range);
 2406|  4.18k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|  4.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 4.18k]
  |  |  ------------------
  ------------------
 2407|      0|        return unexpected(make_eof_parse_error(it.error()));
 2408|      0|    }
 2409|       |
 2410|  8.36k|    for (auto ch : str) {
  ------------------
  |  Branch (2410:18): [True: 8.36k, False: 4.18k]
  ------------------
 2411|  8.36k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2411:13): [True: 0, False: 8.36k]
  ------------------
 2412|      0|            return *it;
 2413|      0|        }
 2414|  8.36k|    }
 2415|       |
 2416|  4.18k|    return unexpected(parse_error::error);
 2417|  4.18k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3375|  3.10k|{
 3376|  3.10k|    switch (base) {
 3377|     60|        case 2:
  ------------------
  |  Branch (3377:9): [True: 60, False: 3.04k]
  ------------------
 3378|       |            // allow 0b/0B
 3379|     60|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3380|     60|                    false};
 3381|       |
 3382|     28|        case 8: {
  ------------------
  |  Branch (3382:9): [True: 28, False: 3.07k]
  ------------------
 3383|       |            // allow 0o/0O/0
 3384|     28|            bool zero_parsed = false;
 3385|     28|            auto it = apply_opt(
 3386|     28|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3387|     28|            return {it, 8, zero_parsed};
 3388|      0|        }
 3389|       |
 3390|    988|        case 16:
  ------------------
  |  Branch (3390:9): [True: 988, False: 2.11k]
  ------------------
 3391|       |            // allow 0x/0X
 3392|    988|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3393|    988|                    false};
 3394|       |
 3395|     32|        case 0:
  ------------------
  |  Branch (3395:9): [True: 32, False: 3.07k]
  ------------------
 3396|       |            // detect base
 3397|     32|            return parse_integer_base_prefix_for_detection(range);
 3398|       |
 3399|  1.99k|        default:
  ------------------
  |  Branch (3399:9): [True: 1.99k, False: 1.10k]
  ------------------
 3400|       |            // no base prefix allowed
 3401|  1.99k|            return {range.begin(), base, false};
 3402|  3.10k|    }
 3403|  3.10k|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2423|  1.07k|{
 2424|  1.07k|    if (!result) {
  ------------------
  |  Branch (2424:9): [True: 1.05k, False: 18]
  ------------------
 2425|  1.05k|        return range.begin();
 2426|  1.05k|    }
 2427|     18|    return *result;
 2428|  1.07k|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3326|     92|{
 3327|     92|    return read_matching_string_classic_nocase(range, "0b");
 3328|     92|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2363|  4.37k|{
 2364|  4.37k|    using char_type = detail::char_t<Range>;
 2365|       |
 2366|       |    if constexpr (ranges::contiguous_range<Range> &&
 2367|       |                  std::is_same_v<char_type, char>) {
 2368|       |        if (range.size() < str.size()) {
 2369|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2370|       |        }
 2371|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2372|       |            return unexpected(parse_error::error);
 2373|       |        }
 2374|       |        return ranges::next(range.begin(), str.size());
 2375|       |    }
 2376|  4.37k|    else {
 2377|  4.37k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2378|  4.37k|            if (ch < 'A' || ch > 'Z') {
 2379|  4.37k|                return ch;
 2380|  4.37k|            }
 2381|  4.37k|            return static_cast<char_type>(ch +
 2382|  4.37k|                                          static_cast<char_type>('a' - 'A'));
 2383|  4.37k|        };
 2384|       |
 2385|  4.37k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3958|  4.37k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  4.37k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  4.37k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  4.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 4, False: 4.37k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      4|    }                                                  \
  |  |  |  | 3957|  4.37k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  4.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2386|  4.37k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2387|  4.37k|                        .transform_error(make_eof_parse_error));
 2388|       |
 2389|  4.37k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  | 1039|  4.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 4.37k, False: 0]
  |  |  ------------------
  ------------------
 2390|  4.37k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2391|  4.37k|                    return ascii_tolower(a) ==
 2392|  4.37k|                           static_cast<detail::char_t<Range>>(b);
 2393|  4.37k|                }))) {
 2394|  4.37k|            return unexpected(parse_error::error);
 2395|  4.37k|        }
 2396|       |
 2397|      0|        return it;
 2398|  4.37k|    }
 2399|  4.37k|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2377|  4.54k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2378|  4.54k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2378:17): [True: 562, False: 3.98k]
  |  Branch (2378:29): [True: 3.98k, False: 0]
  ------------------
 2379|  4.54k|                return ch;
 2380|  4.54k|            }
 2381|      0|            return static_cast<char_type>(ch +
 2382|      0|                                          static_cast<char_type>('a' - 'A'));
 2383|  4.54k|        };
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3340|     60|{
 3341|     60|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3341:14): [True: 0, False: 60]
  ------------------
 3342|      0|        return *r;
 3343|      0|    }
 3344|       |
 3345|     60|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3345:14): [True: 28, False: 32]
  ------------------
 3346|     28|        zero_parsed = true;
 3347|     28|        return *r;
 3348|     28|    }
 3349|       |
 3350|     32|    return unexpected(parse_error::error);
 3351|     60|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2278|  2.11k|{
 2279|  2.11k|    auto it = read_code_unit(range);
 2280|  2.11k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|  2.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 2.11k]
  |  |  ------------------
  ------------------
 2281|      0|        return unexpected(make_eof_parse_error(it.error()));
 2282|      0|    }
 2283|       |
 2284|  2.11k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  | 1039|  2.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.03k, False: 72]
  |  |  ------------------
  ------------------
 2285|  2.11k|                     static_cast<detail::char_t<Range>>(ch))) {
 2286|  2.03k|        return unexpected(parse_error::error);
 2287|  2.03k|    }
 2288|       |
 2289|     72|    return *it;
 2290|  2.11k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3333|  1.02k|{
 3334|  1.02k|    return read_matching_string_classic_nocase(range, "0x");
 3335|  1.02k|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3356|     32|{
 3357|     32|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3357:14): [True: 0, False: 32]
  ------------------
 3358|      0|        return {*r, 16, false};
 3359|      0|    }
 3360|     32|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3360:14): [True: 0, False: 32]
  ------------------
 3361|      0|        return {*r, 2, false};
 3362|      0|    }
 3363|     32|    {
 3364|     32|        bool zero_parsed{false};
 3365|     32|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3365:18): [True: 10, False: 22]
  ------------------
 3366|     10|            return {*r, 8, zero_parsed};
 3367|     10|        }
 3368|     32|    }
 3369|     22|    return {range.begin(), 10, false};
 3370|     32|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3442|  3.02k|{
 3443|  3.02k|    using char_type = detail::char_t<Range>;
 3444|       |
 3445|  3.02k|    if constexpr (ranges::contiguous_range<Range>) {
 3446|  3.02k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  3.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 3.02k]
  |  |  ------------------
  ------------------
 3447|      0|            return detail::unexpected_scan_error(
 3448|      0|                scan_error::invalid_scanned_value,
 3449|      0|                "Failed to parse integer: No digits found");
 3450|      0|        }
 3451|  3.02k|        return range.end();
 3452|       |    }
 3453|       |    else {
 3454|       |        return read_while1_code_unit(range,
 3455|       |                                     [&](char_type ch) noexcept {
 3456|       |                                         return char_to_int(ch) < base;
 3457|       |                                     })
 3458|       |            .transform_error(map_parse_error_to_scan_error(
 3459|       |                scan_error::invalid_scanned_value,
 3460|       |                "Failed to parse integer: No digits found"));
 3461|       |    }
 3462|  3.02k|}
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3472|     52|{
 3473|     52|    std::basic_string<CharT> output;
 3474|     52|    std::string thsep_indices;
 3475|     52|    auto it = range.begin();
 3476|     52|    bool digit_matched = false;
 3477|     60|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3477:12): [True: 60, False: 0]
  ------------------
 3478|     60|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3478:13): [True: 0, False: 60]
  ------------------
 3479|      0|            thsep_indices.push_back(
 3480|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3481|      0|        }
 3482|     60|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3482:18): [True: 52, False: 8]
  ------------------
 3483|     52|            break;
 3484|     52|        }
 3485|      8|        else {
 3486|      8|            output.push_back(*it);
 3487|      8|            digit_matched = true;
 3488|      8|        }
 3489|     60|    }
 3490|     52|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  | 1039|     52|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 44, False: 8]
  |  |  ------------------
  ------------------
 3491|     44|        return detail::unexpected_scan_error(
 3492|     44|            scan_error::invalid_scanned_value,
 3493|     44|            "Failed to parse integer: No digits found");
 3494|     44|    }
 3495|      8|    return std::tuple{it, output, thsep_indices};
 3496|     52|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1781|  10.8k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|  10.8k|                  ranges::sized_range<Range>) {
 1785|  10.8k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1110|  10.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|  10.8k|}
_ZN3scn2v44impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1587|  10.8k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|  10.8k|    {
 1589|  10.8k|    }
_ZNK3scn2v44impl19string_view_wrapperIwE4viewEv:
 1601|  12.9k|    {
 1602|  12.9k|        return sv;
 1603|  12.9k|    }
_ZN3scn2v44impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 6040|  1.34k|{
 6041|  1.34k|    using char_type = detail::char_t<Range>;
 6042|  1.34k|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6043|       |
 6044|  1.34k|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (6044:9): [True: 1.34k, False: 0]
  ------------------
 6045|  1.34k|        const auto fill_ch = fill.template get_code_unit<char_type>();
 6046|  1.34k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 6047|       |
 6048|  1.34k|        if (max_width == 0) {
  ------------------
  |  Branch (6048:13): [True: 1.15k, False: 198]
  ------------------
 6049|  1.15k|            auto it = read_while_code_unit(range, pred);
 6050|       |
 6051|  1.15k|            if (want_skipped_width) {
  ------------------
  |  Branch (6051:17): [True: 138, False: 1.01k]
  ------------------
 6052|    138|                auto prefix_width =
 6053|    138|                    static_cast<std::ptrdiff_t>(
 6054|    138|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 6055|    138|                    ranges::distance(range.begin(), it);
 6056|    138|                return result_type{it, prefix_width};
 6057|    138|            }
 6058|  1.01k|            return result_type{it, 0};
 6059|  1.15k|        }
 6060|       |
 6061|    198|        auto max_width_view = take_width(range, max_width);
 6062|    198|        auto w_it = read_while_code_unit(max_width_view, pred);
 6063|       |
 6064|    198|        if (want_skipped_width) {
  ------------------
  |  Branch (6064:13): [True: 198, False: 0]
  ------------------
 6065|    198|            return result_type{w_it.base(), max_width - w_it.count()};
 6066|    198|        }
 6067|      0|        return result_type{w_it.base(), 0};
 6068|    198|    }
 6069|       |
 6070|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 6071|      0|    if (max_width == 0) {
  ------------------
  |  Branch (6071:9): [True: 0, False: 0]
  ------------------
 6072|      0|        auto it = read_while_code_units(range, fill_chars);
 6073|       |
 6074|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (6074:13): [True: 0, False: 0]
  ------------------
 6075|      0|            auto prefix_width =
 6076|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 6077|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 6078|      0|            return result_type{it, prefix_width};
 6079|      0|        }
 6080|      0|        return result_type{it, 0};
 6081|      0|    }
 6082|       |
 6083|      0|    auto max_width_view = take_width(range, max_width);
 6084|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 6085|       |
 6086|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (6086:9): [True: 0, False: 0]
  ------------------
 6087|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 6088|      0|    }
 6089|      0|    return result_type{w_it.base(), 0};
 6090|      0|}
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2107|  1.28k|{
 2108|  1.28k|    return read_until_code_unit(range, std::not_fn(pred));
 2109|  1.28k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2074|  1.36k|{
 2075|  1.36k|    if constexpr (ranges::common_range<Range>) {
 2076|  1.36k|        return std::find_if(range.begin(), range.end(), pred);
 2077|       |    }
 2078|       |    else {
 2079|       |        auto first = range.begin();
 2080|       |        for (; first != range.end(); ++first) {
 2081|       |            if (pred(*first)) {
 2082|       |                return first;
 2083|       |            }
 2084|       |        }
 2085|       |        return first;
 2086|       |    }
 2087|  1.36k|}
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_:
  742|  1.34k|        : m_fptr([](storage fn,
  743|  1.34k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.34k|              cvref<T> obj = *get<T>(fn);
  745|  1.34k|              if constexpr (std::is_void_v<R>) {
  746|  1.34k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.34k|              }
  748|  1.34k|              else {
  749|  1.34k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.34k|              }
  751|  1.34k|          }),
  752|  1.34k|          m_storage(std::addressof(f))
  753|  1.34k|    {
  754|  1.34k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|  2.15k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.15k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.15k|              else {
  749|  2.15k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.15k|              }
  751|  2.15k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlwE_EEDaNS3_7storageE:
  683|  2.15k|    {
  684|  2.15k|        if constexpr (std::is_const_v<T>) {
  685|  2.15k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.15k|    }
_ZZN3scn2v44impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlwE_clEw:
 6046|  2.15k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_TnPNSF_9enable_ifIXsr3stdE11is_object_vISH_EEvE4typeELPv0EEEPKSH_:
  665|  1.34k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  1.34k|        {
  667|  1.34k|        }
_ZN3scn2v44impl20read_while_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2107|    294|{
 2108|    294|    return read_until_code_unit(range, std::not_fn(pred));
 2109|    294|}
_ZN3scn2v44impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2074|    408|{
 2075|       |    if constexpr (ranges::common_range<Range>) {
 2076|       |        return std::find_if(range.begin(), range.end(), pred);
 2077|       |    }
 2078|    408|    else {
 2079|    408|        auto first = range.begin();
 2080|  2.56k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2080:16): [True: 2.44k, False: 120]
  ------------------
 2081|  2.44k|            if (pred(*first)) {
  ------------------
  |  Branch (2081:17): [True: 288, False: 2.16k]
  ------------------
 2082|    288|                return first;
 2083|    288|            }
 2084|  2.44k|        }
 2085|    120|        return first;
 2086|    408|    }
 2087|    408|}
_ZN3scn2v44impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 3097|    508|{
 3098|    508|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3098:9): [True: 0, False: 508]
  ------------------
 3099|      0|        auto it = read_while_classic_space(range);
 3100|      0|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3101|      0|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3102|      0|            return unexpected(e);
 3103|      0|        }
 3104|       |
 3105|      0|        return it;
 3106|      0|    }
 3107|       |
 3108|    508|    return read_while_classic_space(range);
 3109|    508|}
_ZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2248|    508|{
 2249|       |    if constexpr (ranges::contiguous_range<Range> &&
 2250|       |                  ranges::sized_range<Range> &&
 2251|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2252|       |        auto buf = make_contiguous_buffer(range);
 2253|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2254|       |        return ranges::next(range.begin(),
 2255|       |                            ranges::distance(buf.view().begin(), it));
 2256|       |    }
 2257|    508|    else {
 2258|    508|        auto it = range.begin();
 2259|       |
 2260|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2261|       |            auto seg = get_contiguous_beginning(range);
 2262|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2263|       |                seg_it != seg.end()) {
 2264|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2265|       |            }
 2266|       |            ranges::advance(it, seg.size());
 2267|       |        }
 2268|       |
 2269|    508|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|    508|            return detail::is_cp_space(cp);
 2271|    508|        });
 2272|    508|    }
 2273|    508|}
_ZN3scn2v44impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2213|    676|{
 2214|    676|    return read_until_code_point(range, std::not_fn(pred));
 2215|    676|}
_ZN3scn2v44impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2192|    874|{
 2193|    874|    auto it = range.begin();
 2194|  5.66k|    while (it != range.end()) {
  ------------------
  |  Branch (2194:12): [True: 5.48k, False: 180]
  ------------------
 2195|  5.48k|        const auto val =
 2196|  5.48k|            read_code_point_into(ranges::subrange{it, range.end()});
 2197|  5.48k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1038|  5.48k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 5.48k, False: 0]
  |  |  ------------------
  ------------------
 2198|  5.48k|            const auto cp = detail::decode_code_point_exhaustive(
 2199|  5.48k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2200|  5.48k|            if (pred(cp)) {
  ------------------
  |  Branch (2200:17): [True: 694, False: 4.78k]
  ------------------
 2201|    694|                return it;
 2202|    694|            }
 2203|  5.48k|        }
 2204|  4.78k|        it = val.iterator;
 2205|  4.78k|    }
 2206|       |
 2207|    180|    return it;
 2208|    874|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 1997|  16.5k|{
 1998|  16.5k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1104|  16.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  16.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  16.5k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  16.5k|    auto it = range.begin();
 2002|  16.5k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  16.5k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1039|  16.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 16.5k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  16.5k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 16.5k, False: 0]
  ------------------
 2011|  16.5k|        ++it;
 2012|  16.5k|        return {it, string_type(1, *range.begin())};
 2013|  16.5k|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|  16.5k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  742|    508|        : m_fptr([](storage fn,
  743|    508|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    508|              cvref<T> obj = *get<T>(fn);
  745|    508|              if constexpr (std::is_void_v<R>) {
  746|    508|                  obj(static_cast<decltype(args)>(args)...);
  747|    508|              }
  748|    508|              else {
  749|    508|                  return obj(static_cast<decltype(args)>(args)...);
  750|    508|              }
  751|    508|          }),
  752|    508|          m_storage(std::addressof(f))
  753|    508|    {
  754|    508|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  743|    880|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    880|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    880|              else {
  749|    880|                  return obj(static_cast<decltype(args)>(args)...);
  750|    880|              }
  751|    880|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|    880|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    880|        else if constexpr (std::is_object_v<T>) {
  688|    880|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    880|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2269|    880|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|    880|            return detail::is_cp_space(cp);
 2271|    880|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|    508|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    508|        {
  662|    508|        }
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3097|  7.69k|{
 3098|  7.69k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3098:9): [True: 7.30k, False: 390]
  ------------------
 3099|  7.30k|        auto it = read_while_classic_space(range);
 3100|  7.30k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3101|  7.30k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  7.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 7.30k]
  |  |  ------------------
  ------------------
 3102|      0|            return unexpected(e);
 3103|      0|        }
 3104|       |
 3105|  7.30k|        return it;
 3106|  7.30k|    }
 3107|       |
 3108|    390|    return read_while_classic_space(range);
 3109|  7.69k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2248|  17.7k|{
 2249|       |    if constexpr (ranges::contiguous_range<Range> &&
 2250|       |                  ranges::sized_range<Range> &&
 2251|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2252|       |        auto buf = make_contiguous_buffer(range);
 2253|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2254|       |        return ranges::next(range.begin(),
 2255|       |                            ranges::distance(buf.view().begin(), it));
 2256|       |    }
 2257|  17.7k|    else {
 2258|  17.7k|        auto it = range.begin();
 2259|       |
 2260|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2261|       |            auto seg = get_contiguous_beginning(range);
 2262|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2263|       |                seg_it != seg.end()) {
 2264|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2265|       |            }
 2266|       |            ranges::advance(it, seg.size());
 2267|       |        }
 2268|       |
 2269|  17.7k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|  17.7k|            return detail::is_cp_space(cp);
 2271|  17.7k|        });
 2272|  17.7k|    }
 2273|  17.7k|}
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2213|  17.9k|{
 2214|  17.9k|    return read_until_code_point(range, std::not_fn(pred));
 2215|  17.9k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2192|  21.3k|{
 2193|  21.3k|    auto it = range.begin();
 2194|  72.8k|    while (it != range.end()) {
  ------------------
  |  Branch (2194:12): [True: 69.3k, False: 3.44k]
  ------------------
 2195|  69.3k|        const auto val =
 2196|  69.3k|            read_code_point_into(ranges::subrange{it, range.end()});
 2197|  69.3k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1038|  69.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 69.3k, False: 0]
  |  |  ------------------
  ------------------
 2198|  69.3k|            const auto cp = detail::decode_code_point_exhaustive(
 2199|  69.3k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2200|  69.3k|            if (pred(cp)) {
  ------------------
  |  Branch (2200:17): [True: 17.8k, False: 51.5k]
  ------------------
 2201|  17.8k|                return it;
 2202|  17.8k|            }
 2203|  69.3k|        }
 2204|  51.5k|        it = val.iterator;
 2205|  51.5k|    }
 2206|       |
 2207|  3.44k|    return it;
 2208|  21.3k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  17.7k|        : m_fptr([](storage fn,
  743|  17.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  17.7k|              cvref<T> obj = *get<T>(fn);
  745|  17.7k|              if constexpr (std::is_void_v<R>) {
  746|  17.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  17.7k|              }
  748|  17.7k|              else {
  749|  17.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  17.7k|              }
  751|  17.7k|          }),
  752|  17.7k|          m_storage(std::addressof(f))
  753|  17.7k|    {
  754|  17.7k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  25.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  25.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  25.4k|              else {
  749|  25.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  25.4k|              }
  751|  25.4k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  25.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  25.4k|        else if constexpr (std::is_object_v<T>) {
  688|  25.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  25.4k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2269|  25.4k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|  25.4k|            return detail::is_cp_space(cp);
 2271|  25.4k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  17.7k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  17.7k|        {
  662|  17.7k|        }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3187|  2.98k|    {
 3188|  2.98k|        reader_error_handler eh{};
 3189|  2.98k|        get_derived().check_specs_impl(specs, eh);
 3190|  2.98k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1039|  2.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.46k, False: 1.51k]
  |  |  ------------------
  ------------------
 3191|  1.46k|            return detail::unexpected_scan_error(
 3192|  1.46k|                scan_error::invalid_format_string, eh.m_msg);
 3193|  1.46k|        }
 3194|  1.51k|        return {};
 3195|  2.98k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
 3199|  2.98k|    {
 3200|  2.98k|        return static_cast<Derived&>(*this);
 3201|  2.98k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3567|  2.98k|    {
 3568|  2.98k|        detail::check_int_type_specs(specs, eh);
 3569|  2.98k|    }
_ZNK3scn2v44impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
 3182|  2.77k|    {
 3183|  2.77k|        return true;
 3184|  2.77k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3621|    258|    {
 3622|    258|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3958|    258|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    258|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    258|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    258|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 258]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    258|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    258|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3623|    258|                                   .transform_error(make_eof_scan_error));
 3624|       |
 3625|    258|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3625:13): [True: 0, False: 258]
  ------------------
 3626|      0|            if constexpr (!std::is_signed_v<T>) {
 3627|      0|                return detail::unexpected_scan_error(
 3628|      0|                    scan_error::invalid_scanned_value,
 3629|      0|                    "Unexpected '-' sign when parsing an "
 3630|      0|                    "unsigned value");
 3631|       |            }
 3632|       |            else {
 3633|       |                if (specs.type ==
 3634|       |                    detail::presentation_type::int_unsigned_decimal) {
 3635|       |                    return detail::unexpected_scan_error(
 3636|       |                        scan_error::invalid_scanned_value,
 3637|       |                        "'u'-option disallows negative values");
 3638|       |                }
 3639|       |            }
 3640|      0|        }
 3641|       |
 3642|    258|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3642:13): [True: 6, False: 252]
  ------------------
 3643|      6|            value = T{0};
 3644|      6|            return std::next(prefix_result.iterator);
 3645|      6|        }
 3646|       |
 3647|    252|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1038|    252|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 226, False: 26]
  |  |  ------------------
  ------------------
 3648|    226|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|    226|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    226|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    226|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    226|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 214, False: 12]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    214|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    214|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    214|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    214|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    214|    }                                                  \
  |  |  |  | 3957|    226|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     12|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|     12|                    parse_integer_digits_without_thsep(
 3650|     12|                        ranges::subrange{prefix_result.iterator, range.end()},
 3651|     12|                        prefix_result.parsed_base));
 3652|       |
 3653|     12|            auto buf = make_contiguous_buffer(
 3654|     12|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3655|     12|            SCN_TRY(result_it,
  ------------------
  |  | 3958|     12|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|     12|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|     12|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 12]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|     12|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     12|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3656|     12|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3657|     12|                                        prefix_result.parsed_base));
 3658|       |
 3659|     12|            return ranges::next(
 3660|     12|                prefix_result.iterator,
 3661|     12|                ranges::distance(buf.view().begin(), result_it));
 3662|     12|        }
 3663|       |
 3664|     26|        auto locale_options =
 3665|       |#if SCN_DISABLE_LOCALE
 3666|       |            localized_number_formatting_options<CharT>{};
 3667|       |#else
 3668|     26|            localized_number_formatting_options<CharT>{loc};
 3669|     26|#endif
 3670|       |
 3671|     26|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3958|     26|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|     26|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|     26|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 22, False: 4]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     22|    }                                                  \
  |  |  |  | 3957|     26|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      4|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3672|      4|                parse_integer_digits_with_thsep(
 3673|      4|                    ranges::subrange{prefix_result.iterator, range.end()},
 3674|      4|                    prefix_result.parsed_base, locale_options));
 3675|      4|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3676|      4|            parse_digits_result;
 3677|       |
 3678|      4|        auto nothsep_source_view =
 3679|      4|            std::basic_string_view<CharT>{nothsep_source};
 3680|      4|        SCN_TRY(
  ------------------
  |  | 3958|      4|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      4|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      4|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 4]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      4|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      4|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3681|      4|            nothsep_source_it,
 3682|      4|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3683|      4|                                prefix_result.parsed_base));
 3684|       |
 3685|      4|        return ranges::next(
 3686|      4|            prefix_result.iterator,
 3687|      4|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3688|      4|                ranges::ssize(thsep_indices));
 3689|      4|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3621|    478|    {
 3622|    478|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3958|    478|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    478|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    478|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    478|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 478]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    478|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    478|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3623|    478|                                   .transform_error(make_eof_scan_error));
 3624|       |
 3625|    478|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3625:13): [True: 0, False: 478]
  ------------------
 3626|      0|            if constexpr (!std::is_signed_v<T>) {
 3627|      0|                return detail::unexpected_scan_error(
 3628|      0|                    scan_error::invalid_scanned_value,
 3629|      0|                    "Unexpected '-' sign when parsing an "
 3630|      0|                    "unsigned value");
 3631|       |            }
 3632|       |            else {
 3633|       |                if (specs.type ==
 3634|       |                    detail::presentation_type::int_unsigned_decimal) {
 3635|       |                    return detail::unexpected_scan_error(
 3636|       |                        scan_error::invalid_scanned_value,
 3637|       |                        "'u'-option disallows negative values");
 3638|       |                }
 3639|       |            }
 3640|      0|        }
 3641|       |
 3642|    478|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3642:13): [True: 10, False: 468]
  ------------------
 3643|     10|            value = T{0};
 3644|     10|            return std::next(prefix_result.iterator);
 3645|     10|        }
 3646|       |
 3647|    468|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1038|    468|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 442, False: 26]
  |  |  ------------------
  ------------------
 3648|    442|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|    442|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    442|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    442|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    442|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 442]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    442|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    442|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|    442|                    parse_integer_digits_without_thsep(
 3650|    442|                        ranges::subrange{prefix_result.iterator, range.end()},
 3651|    442|                        prefix_result.parsed_base));
 3652|       |
 3653|    442|            auto buf = make_contiguous_buffer(
 3654|    442|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3655|    442|            SCN_TRY(result_it,
  ------------------
  |  | 3958|    442|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    442|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    442|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    442|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 412, False: 30]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    412|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    412|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    412|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    412|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    412|    }                                                  \
  |  |  |  | 3957|    442|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     30|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3656|     30|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3657|     30|                                        prefix_result.parsed_base));
 3658|       |
 3659|     30|            return ranges::next(
 3660|     30|                prefix_result.iterator,
 3661|     30|                ranges::distance(buf.view().begin(), result_it));
 3662|    442|        }
 3663|       |
 3664|     26|        auto locale_options =
 3665|       |#if SCN_DISABLE_LOCALE
 3666|       |            localized_number_formatting_options<CharT>{};
 3667|       |#else
 3668|     26|            localized_number_formatting_options<CharT>{loc};
 3669|     26|#endif
 3670|       |
 3671|     26|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3958|     26|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|     26|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|     26|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 22, False: 4]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     22|    }                                                  \
  |  |  |  | 3957|     26|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      4|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3672|      4|                parse_integer_digits_with_thsep(
 3673|      4|                    ranges::subrange{prefix_result.iterator, range.end()},
 3674|      4|                    prefix_result.parsed_base, locale_options));
 3675|      4|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3676|      4|            parse_digits_result;
 3677|       |
 3678|      4|        auto nothsep_source_view =
 3679|      4|            std::basic_string_view<CharT>{nothsep_source};
 3680|      4|        SCN_TRY(
  ------------------
  |  | 3958|      4|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      4|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      4|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 4]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      4|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      4|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3681|      4|            nothsep_source_it,
 3682|      4|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3683|      4|                                prefix_result.parsed_base));
 3684|       |
 3685|      4|        return ranges::next(
 3686|      4|            prefix_result.iterator,
 3687|      4|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3688|      4|                ranges::ssize(thsep_indices));
 3689|      4|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3621|    204|    {
 3622|    204|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3958|    204|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    204|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    204|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    204|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 204]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    204|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    204|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3623|    204|                                   .transform_error(make_eof_scan_error));
 3624|       |
 3625|    204|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3625:13): [True: 0, False: 204]
  ------------------
 3626|      0|            if constexpr (!std::is_signed_v<T>) {
 3627|      0|                return detail::unexpected_scan_error(
 3628|      0|                    scan_error::invalid_scanned_value,
 3629|      0|                    "Unexpected '-' sign when parsing an "
 3630|      0|                    "unsigned value");
 3631|       |            }
 3632|       |            else {
 3633|       |                if (specs.type ==
 3634|       |                    detail::presentation_type::int_unsigned_decimal) {
 3635|       |                    return detail::unexpected_scan_error(
 3636|       |                        scan_error::invalid_scanned_value,
 3637|       |                        "'u'-option disallows negative values");
 3638|       |                }
 3639|       |            }
 3640|      0|        }
 3641|       |
 3642|    204|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3642:13): [True: 0, False: 204]
  ------------------
 3643|      0|            value = T{0};
 3644|      0|            return std::next(prefix_result.iterator);
 3645|      0|        }
 3646|       |
 3647|    204|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1038|    204|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 204, False: 0]
  |  |  ------------------
  ------------------
 3648|    204|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|    204|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    204|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    204|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    204|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 194, False: 10]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    194|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    194|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    194|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    194|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    194|    }                                                  \
  |  |  |  | 3957|    204|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|     10|                    parse_integer_digits_without_thsep(
 3650|     10|                        ranges::subrange{prefix_result.iterator, range.end()},
 3651|     10|                        prefix_result.parsed_base));
 3652|       |
 3653|     10|            auto buf = make_contiguous_buffer(
 3654|     10|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3655|     10|            SCN_TRY(result_it,
  ------------------
  |  | 3958|     10|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|     10|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|     10|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 10]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|     10|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3656|     10|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3657|     10|                                        prefix_result.parsed_base));
 3658|       |
 3659|     10|            return ranges::next(
 3660|     10|                prefix_result.iterator,
 3661|     10|                ranges::distance(buf.view().begin(), result_it));
 3662|     10|        }
 3663|       |
 3664|      0|        auto locale_options =
 3665|       |#if SCN_DISABLE_LOCALE
 3666|       |            localized_number_formatting_options<CharT>{};
 3667|       |#else
 3668|      0|            localized_number_formatting_options<CharT>{loc};
 3669|      0|#endif
 3670|       |
 3671|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3672|      0|                parse_integer_digits_with_thsep(
 3673|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3674|      0|                    prefix_result.parsed_base, locale_options));
 3675|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3676|      0|            parse_digits_result;
 3677|       |
 3678|      0|        auto nothsep_source_view =
 3679|      0|            std::basic_string_view<CharT>{nothsep_source};
 3680|      0|        SCN_TRY(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3681|      0|            nothsep_source_it,
 3682|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3683|      0|                                prefix_result.parsed_base));
 3684|       |
 3685|      0|        return ranges::next(
 3686|      0|            prefix_result.iterator,
 3687|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3688|      0|                ranges::ssize(thsep_indices));
 3689|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3621|    966|    {
 3622|    966|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3958|    966|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    966|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    966|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    966|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 966]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    966|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    966|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3623|    966|                                   .transform_error(make_eof_scan_error));
 3624|       |
 3625|    966|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3625:13): [True: 0, False: 966]
  ------------------
 3626|      0|            if constexpr (!std::is_signed_v<T>) {
 3627|      0|                return detail::unexpected_scan_error(
 3628|      0|                    scan_error::invalid_scanned_value,
 3629|      0|                    "Unexpected '-' sign when parsing an "
 3630|      0|                    "unsigned value");
 3631|       |            }
 3632|       |            else {
 3633|       |                if (specs.type ==
 3634|       |                    detail::presentation_type::int_unsigned_decimal) {
 3635|       |                    return detail::unexpected_scan_error(
 3636|       |                        scan_error::invalid_scanned_value,
 3637|       |                        "'u'-option disallows negative values");
 3638|       |                }
 3639|       |            }
 3640|      0|        }
 3641|       |
 3642|    966|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3642:13): [True: 0, False: 966]
  ------------------
 3643|      0|            value = T{0};
 3644|      0|            return std::next(prefix_result.iterator);
 3645|      0|        }
 3646|       |
 3647|    966|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1038|    966|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 966, False: 0]
  |  |  ------------------
  ------------------
 3648|    966|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|    966|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    966|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    966|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    966|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 966]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    966|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    966|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|    966|                    parse_integer_digits_without_thsep(
 3650|    966|                        ranges::subrange{prefix_result.iterator, range.end()},
 3651|    966|                        prefix_result.parsed_base));
 3652|       |
 3653|    966|            auto buf = make_contiguous_buffer(
 3654|    966|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3655|    966|            SCN_TRY(result_it,
  ------------------
  |  | 3958|    966|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    966|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    966|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    966|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 938, False: 28]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    938|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    938|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    938|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    938|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    938|    }                                                  \
  |  |  |  | 3957|    966|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     28|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3656|     28|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3657|     28|                                        prefix_result.parsed_base));
 3658|       |
 3659|     28|            return ranges::next(
 3660|     28|                prefix_result.iterator,
 3661|     28|                ranges::distance(buf.view().begin(), result_it));
 3662|    966|        }
 3663|       |
 3664|      0|        auto locale_options =
 3665|       |#if SCN_DISABLE_LOCALE
 3666|       |            localized_number_formatting_options<CharT>{};
 3667|       |#else
 3668|      0|            localized_number_formatting_options<CharT>{loc};
 3669|      0|#endif
 3670|       |
 3671|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3672|      0|                parse_integer_digits_with_thsep(
 3673|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3674|      0|                    prefix_result.parsed_base, locale_options));
 3675|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3676|      0|            parse_digits_result;
 3677|       |
 3678|      0|        auto nothsep_source_view =
 3679|      0|            std::basic_string_view<CharT>{nothsep_source};
 3680|      0|        SCN_TRY(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3681|      0|            nothsep_source_it,
 3682|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3683|      0|                                prefix_result.parsed_base));
 3684|       |
 3685|      0|        return ranges::next(
 3686|      0|            prefix_result.iterator,
 3687|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3688|      0|                ranges::ssize(thsep_indices));
 3689|      0|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3187|  1.49k|    {
 3188|  1.49k|        reader_error_handler eh{};
 3189|  1.49k|        get_derived().check_specs_impl(specs, eh);
 3190|  1.49k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1039|  1.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 714, False: 778]
  |  |  ------------------
  ------------------
 3191|    714|            return detail::unexpected_scan_error(
 3192|    714|                scan_error::invalid_format_string, eh.m_msg);
 3193|    714|        }
 3194|    778|        return {};
 3195|  1.49k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3199|  1.49k|    {
 3200|  1.49k|        return static_cast<Derived&>(*this);
 3201|  1.49k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4230|  1.49k|    {
 4231|  1.49k|        detail::check_float_type_specs(specs, eh);
 4232|  1.49k|    }
_ZNK3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3182|  1.44k|    {
 3183|  1.44k|        return true;
 3184|  1.44k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4302|    758|    {
 4303|    758|        unsigned options{};
 4304|    758|        if (specs.localized) {
  ------------------
  |  Branch (4304:13): [True: 36, False: 722]
  ------------------
 4305|     36|            options |= float_reader_base::allow_thsep;
 4306|     36|        }
 4307|       |
 4308|    758|        SCN_GCC_COMPAT_PUSH
 4309|    758|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4310|       |
 4311|    758|        switch (specs.type) {
 4312|     20|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4312:13): [True: 20, False: 738]
  ------------------
 4313|     20|                return options | float_reader_base::allow_fixed;
 4314|       |
 4315|     10|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4315:13): [True: 10, False: 748]
  ------------------
 4316|     10|                return options | float_reader_base::allow_scientific;
 4317|       |
 4318|     94|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4318:13): [True: 94, False: 664]
  ------------------
 4319|     94|                return options | float_reader_base::allow_hex;
 4320|       |
 4321|      6|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4321:13): [True: 6, False: 752]
  ------------------
 4322|      6|                return options | float_reader_base::allow_scientific |
 4323|      6|                       float_reader_base::allow_fixed;
 4324|       |
 4325|    628|            case detail::presentation_type::none:
  ------------------
  |  Branch (4325:13): [True: 628, False: 130]
  ------------------
 4326|    628|                return options | float_reader_base::allow_scientific |
 4327|    628|                       float_reader_base::allow_fixed |
 4328|    628|                       float_reader_base::allow_hex;
 4329|       |
 4330|      0|            default:
  ------------------
  |  Branch (4330:13): [True: 0, False: 758]
  ------------------
 4331|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4332|    758|                SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4333|    758|        }
 4334|       |
 4335|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4336|    758|    }
_ZN3scn2v44impl12float_readerIwEC2Ej:
 3733|    758|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v44impl35localized_number_formatting_optionsIwEC2Ev:
 1869|  1.32k|    localized_number_formatting_options() = default;
_ZN3scn2v44impl24contiguous_range_factoryIwEC2Ev:
 1630|  2.64k|    contiguous_range_factory() = default;
_ZN3scn2v44impl12float_readerIwE17handle_separatorsEv:
 4121|  1.07k|    {
 4122|  1.07k|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4122:13): [True: 1.07k, False: 0]
  ------------------
 4123|  1.07k|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4123:13): [True: 1.07k, False: 0]
  ------------------
 4124|  1.07k|            return;
 4125|  1.07k|        }
 4126|       |
 4127|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4128|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4128:13): [True: 0, False: 0]
  ------------------
 4129|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4129:27): [True: 0, False: 0]
  ------------------
 4130|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4130:21): [True: 0, False: 0]
  ------------------
 4131|      0|                    ch = CharT{'.'};
 4132|      0|                }
 4133|      0|            }
 4134|      0|        }
 4135|       |
 4136|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4136:13): [True: 0, False: 0]
  ------------------
 4137|      0|            return;
 4138|      0|        }
 4139|       |
 4140|      0|        auto first =
 4141|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4142|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4142:13): [True: 0, False: 0]
  ------------------
 4143|      0|            return;
 4144|      0|        }
 4145|       |
 4146|      0|        m_thsep_indices.push_back(
 4147|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4148|       |
 4149|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4149:31): [True: 0, False: 0]
  ------------------
 4150|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4150:17): [True: 0, False: 0]
  ------------------
 4151|      0|                *first++ = std::move(*it);
 4152|      0|            }
 4153|      0|            else {
 4154|      0|                m_thsep_indices.push_back(
 4155|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4156|      0|            }
 4157|      0|        }
 4158|       |
 4159|      0|        str.erase(first, str.end());
 4160|      0|    }
_ZNK3scn2v44impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1685|    882|    {
 1686|    882|        return m_storage.has_value();
 1687|    882|    }
_ZNR3scn2v44impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1690|    470|    {
 1691|    470|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  | 1104|    470|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    470|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1692|    470|        return *m_storage;
 1693|    470|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  762|    246|    {
  763|    246|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1110|    246|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    246|    }
_ZN3scn2v44impl12float_readerIwE21read_source_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3752|     16|    {
 3753|     16|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3754|     16|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  | 1038|     16|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 16]
  |  |  ------------------
  ------------------
 3755|      0|            m_locale_options.thousands_sep = CharT{0};
 3756|      0|        }
 3757|       |
 3758|     16|        return read_source_impl(range);
 3759|     16|    }
_ZN3scn2v44impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3778|    246|    {
 3779|    246|        SCN_TRY(sign_result,
  ------------------
  |  | 3958|    246|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    246|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    246|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    246|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 246]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    246|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    246|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3780|    246|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3781|    246|        auto it = sign_result.first;
 3782|    246|        m_sign = sign_result.second;
 3783|       |
 3784|    246|        auto digits_begin = it;
 3785|    246|        auto r = ranges::subrange{it, range.end()};
 3786|       |        if constexpr (ranges::contiguous_range<Range> &&
 3787|       |                      ranges::sized_range<Range>) {
 3788|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3789|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3790|       |                SCN_TRY_ASSIGN(
 3791|       |                    it,
 3792|       |                    do_read_source_impl(
 3793|       |                        r,
 3794|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3795|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3796|       |            }
 3797|       |            else {
 3798|       |                auto cb = [&](const auto& rr)
 3799|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3800|       |                    auto res = read_all(rr);
 3801|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3802|       |                        return detail::unexpected_scan_error(
 3803|       |                            scan_error::invalid_scanned_value,
 3804|       |                            "Invalid float value");
 3805|       |                    }
 3806|       |                    return res;
 3807|       |                };
 3808|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3809|       |            }
 3810|       |        }
 3811|    246|        else {
 3812|    246|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3953|    246|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|    246|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|    246|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 226, False: 20]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|    226|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|    226|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    226|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    226|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|    226|    }                                                  \
  |  | 3957|    246|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|    246|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3813|     20|                it,
 3814|     20|                do_read_source_impl(
 3815|     20|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3816|     20|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3817|     20|        }
 3818|       |
 3819|    246|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1104|    246|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    246|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3820|       |
 3821|     20|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3821:13): [True: 20, False: 0]
  |  Branch (3821:48): [True: 20, False: 0]
  ------------------
 3822|     20|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3822:13): [True: 20, False: 0]
  ------------------
 3823|     20|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3823:13): [True: 20, False: 0]
  ------------------
 3824|     20|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3825|     20|        }
 3826|       |
 3827|     20|        handle_separators();
 3828|       |
 3829|     20|        return it;
 3830|    246|    }
_ZN3scn2v44impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 4064|    246|    {
 4065|    246|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4066|    246|        const bool allowed_nonhex =
 4067|    246|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4068|    246|             ~static_cast<unsigned>(allow_hex)) != 0;
 4069|       |
 4070|    246|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4070:39): [True: 246, False: 0]
  |  Branch (4070:45): [True: 0, False: 246]
  ------------------
 4071|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4072|      0|                scan_error::invalid_scanned_value,
 4073|      0|                "Invalid infinite floating-point value"));
 4074|      0|        }
 4075|    246|        else if (r) {
  ------------------
  |  Branch (4075:18): [True: 0, False: 246]
  ------------------
 4076|      0|            return *r;
 4077|      0|        }
 4078|       |
 4079|    246|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4079:39): [True: 246, False: 0]
  |  Branch (4079:45): [True: 0, False: 246]
  ------------------
 4080|      0|            return unexpected(r.error());
 4081|      0|        }
 4082|    246|        else if (r) {
  ------------------
  |  Branch (4082:18): [True: 0, False: 246]
  ------------------
 4083|      0|            return *r;
 4084|      0|        }
 4085|       |
 4086|    246|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4086:13): [True: 234, False: 12]
  |  Branch (4086:28): [True: 20, False: 214]
  ------------------
 4087|       |            // only hex allowed:
 4088|       |            // prefix "0x" allowed, not required
 4089|     20|            auto it = range.begin();
 4090|       |
 4091|     20|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4091:22): [True: 0, False: 20]
  ------------------
 4092|      0|                m_kind = float_kind::hex_with_prefix;
 4093|      0|                it = *r;
 4094|      0|            }
 4095|     20|            else {
 4096|     20|                m_kind = float_kind::hex_without_prefix;
 4097|     20|            }
 4098|       |
 4099|     20|            return read_hex(ranges::subrange{it, range.end()});
 4100|     20|        }
 4101|    226|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4101:13): [True: 12, False: 214]
  |  Branch (4101:29): [True: 12, False: 0]
  ------------------
 4102|       |            // only nonhex allowed:
 4103|       |            // no prefix allowed
 4104|     12|            m_kind = float_kind::generic;
 4105|     12|            return read_regular_float(range);
 4106|     12|        }
 4107|       |        // both hex and nonhex allowed:
 4108|       |        // check for "0x" prefix -> hex,
 4109|       |        // regular otherwise
 4110|       |
 4111|    214|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  | 1039|    214|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 214]
  |  |  ------------------
  ------------------
 4112|      0|            m_kind = float_kind::hex_with_prefix;
 4113|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4114|      0|        }
 4115|       |
 4116|    214|        m_kind = float_kind::generic;
 4117|    214|        return read_regular(range);
 4118|    214|    }
_ZN3scn2v44impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3872|    246|    {
 3873|    246|        auto it = range.begin();
 3874|    246|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3874:73): [True: 246, False: 0]
  ------------------
 3875|    246|            return unexpected(r.error());
 3876|    246|        }
 3877|      0|        else {
 3878|      0|            it = *r;
 3879|      0|        }
 3880|       |
 3881|      0|        if (auto r = read_matching_string_classic_nocase(
 3882|      0|                ranges::subrange{it, range.end()}, "inity");
 3883|      0|            !r) {
  ------------------
  |  Branch (3883:13): [True: 0, False: 0]
  ------------------
 3884|      0|            m_kind = float_kind::inf_short;
 3885|      0|            return it;
 3886|      0|        }
 3887|      0|        else {
 3888|      0|            m_kind = float_kind::inf_long;
 3889|      0|            return *r;
 3890|      0|        }
 3891|      0|    }
_ZN3scn2v44impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3895|    246|    {
 3896|    246|        auto it = range.begin();
 3897|    246|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3897:73): [True: 246, False: 0]
  ------------------
 3898|    246|            return r.transform_error(map_parse_error_to_scan_error(
 3899|    246|                scan_error::invalid_scanned_value,
 3900|    246|                "Invalid floating-point NaN value"));
 3901|    246|        }
 3902|      0|        else {
 3903|      0|            it = *r;
 3904|      0|        }
 3905|       |
 3906|      0|        if (auto r =
 3907|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3908|      0|            !r) {
  ------------------
  |  Branch (3908:13): [True: 0, False: 0]
  ------------------
 3909|      0|            m_kind = float_kind::nan_simple;
 3910|      0|            return it;
 3911|      0|        }
 3912|      0|        else {
 3913|      0|            it = *r;
 3914|      0|        }
 3915|       |
 3916|      0|        auto payload_beg_it = it;
 3917|      0|        it = read_while_code_unit(
 3918|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3919|      0|                return is_ascii_char(ch) &&
 3920|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3921|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3922|      0|            });
 3923|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3924|       |
 3925|      0|        m_kind = float_kind::nan_with_payload;
 3926|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3926:18): [True: 0, False: 0]
  ------------------
 3927|      0|                                             ')')) {
 3928|      0|            return *r;
 3929|      0|        }
 3930|      0|        return detail::unexpected_scan_error(
 3931|      0|            scan_error::invalid_scanned_value,
 3932|      0|            "Invalid floating-point NaN payload");
 3933|      0|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3865|    234|    {
 3866|    234|        return read_matching_string_classic_nocase(range, "0x");
 3867|    234|    }
_ZN3scn2v44impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3966|     20|    {
 3967|     20|        auto it = range.begin();
 3968|       |
 3969|     20|        std::ptrdiff_t digits_count = 0;
 3970|     20|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3971|     20|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 14, False: 6]
  |  |  ------------------
  ------------------
 3972|     14|            return r.transform_error(map_parse_error_to_scan_error(
 3973|     14|                scan_error::invalid_scanned_value,
 3974|     14|                "Invalid hexadecimal floating-point value"));
 3975|     14|        }
 3976|      6|        else {
 3977|      6|            digits_count += ranges::distance(it, *r);
 3978|      6|            it = *r;
 3979|      6|        }
 3980|       |
 3981|      6|        m_integral_part_length = digits_count;
 3982|      6|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3982:18): [True: 0, False: 6]
  ------------------
 3983|      6|                                             m_locale_options.decimal_point)) {
 3984|      0|            it = *r;
 3985|      0|        }
 3986|       |
 3987|      6|        if (auto r =
  ------------------
  |  Branch (3987:18): [True: 0, False: 6]
  ------------------
 3988|      6|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3989|      0|            digits_count += ranges::distance(it, *r);
 3990|      0|            it = *r;
 3991|      0|        }
 3992|       |
 3993|      6|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  | 1039|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 6]
  |  |  ------------------
  ------------------
 3994|      0|            return detail::unexpected_scan_error(
 3995|      0|                scan_error::invalid_scanned_value,
 3996|      0|                "No significand digits in hexfloat");
 3997|      0|        }
 3998|       |
 3999|      6|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 4000|       |
 4001|      6|        return it;
 4002|      6|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3850|     26|    {
 3851|     26|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  | 1039|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 26]
  |  |  |  Branch (1039:45): [True: 0, False: 26]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3852|     26|                         thsep_allowed)) {
 3853|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3854|      0|                return char_to_int(ch) < 16 ||
 3855|      0|                       ch == m_locale_options.thousands_sep;
 3856|      0|            });
 3857|      0|        }
 3858|       |
 3859|     26|        return read_while1_code_unit(
 3860|     26|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3861|     26|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_:
  742|     26|        : m_fptr([](storage fn,
  743|     26|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     26|              cvref<T> obj = *get<T>(fn);
  745|     26|              if constexpr (std::is_void_v<R>) {
  746|     26|                  obj(static_cast<decltype(args)>(args)...);
  747|     26|              }
  748|     26|              else {
  749|     26|                  return obj(static_cast<decltype(args)>(args)...);
  750|     26|              }
  751|     26|          }),
  752|     26|          m_storage(std::addressof(f))
  753|     26|    {
  754|     26|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEwE_clES18_w:
  743|     28|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     28|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     28|              else {
  749|     28|                  return obj(static_cast<decltype(args)>(args)...);
  750|     28|              }
  751|     28|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlwE0_EEDaNS3_7storageE:
  683|     28|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     28|        else if constexpr (std::is_object_v<T>) {
  688|     28|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     28|    }
_ZZN3scn2v44impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlwE0_clEw:
 3860|     28|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_TnPNSP_9enable_ifIXsr3stdE11is_object_vISR_EEvE4typeELPv0EEEPSR_:
  660|     26|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     26|        {
  662|     26|        }
_ZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESM_NSK_17basic_string_viewIcNSK_11char_traitsIcEEEE:
 3938|     20|    {
 3939|     20|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3939:18): [True: 0, False: 20]
  ------------------
 3940|      0|            auto beg_exp_it = range.begin();
 3941|      0|            auto it = *r;
 3942|       |
 3943|      0|            if (auto r_sign =
  ------------------
  |  Branch (3943:22): [True: 0, False: 0]
  ------------------
 3944|      0|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3945|      0|                it = r_sign->first;
 3946|      0|            }
 3947|       |
 3948|      0|            if (auto r_exp = read_while1_code_unit(
 3949|      0|                    ranges::subrange{it, range.end()},
 3950|      0|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3951|      0|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3952|      0|                it = beg_exp_it;
 3953|      0|            }
 3954|      0|            else {
 3955|      0|                it = *r_exp;
 3956|      0|            }
 3957|       |
 3958|      0|            return it;
 3959|      0|        }
 3960|     20|        return range.begin();
 3961|     20|    }
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2404|     20|{
 2405|     20|    auto it = read_code_unit(range);
 2406|     20|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6, False: 14]
  |  |  ------------------
  ------------------
 2407|      6|        return unexpected(make_eof_parse_error(it.error()));
 2408|      6|    }
 2409|       |
 2410|     28|    for (auto ch : str) {
  ------------------
  |  Branch (2410:18): [True: 28, False: 14]
  ------------------
 2411|     28|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2411:13): [True: 0, False: 28]
  ------------------
 2412|      0|            return *it;
 2413|      0|        }
 2414|     28|    }
 2415|       |
 2416|     14|    return unexpected(parse_error::error);
 2417|     14|}
_ZN3scn2v44impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 4007|    226|    {
 4008|    226|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 4009|    226|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (4009:35): [True: 218, False: 8]
  |  Branch (4009:50): [True: 4, False: 214]
  ------------------
 4010|       |
 4011|    226|        auto it = ranges::begin(range);
 4012|    226|        std::ptrdiff_t digits_count = 0;
 4013|       |
 4014|    226|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 4015|    226|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|    226|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 210, False: 16]
  |  |  ------------------
  ------------------
 4016|    210|            return r.transform_error(
 4017|    210|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 4018|    210|                                              "Invalid floating-point value"));
 4019|    210|        }
 4020|     16|        else {
 4021|     16|            digits_count += ranges::distance(it, *r);
 4022|     16|            it = *r;
 4023|     16|        }
 4024|       |
 4025|     16|        m_integral_part_length = digits_count;
 4026|     16|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (4026:18): [True: 0, False: 16]
  ------------------
 4027|     16|                                             m_locale_options.decimal_point)) {
 4028|      0|            it = *r;
 4029|      0|        }
 4030|       |
 4031|     16|        if (auto r =
  ------------------
  |  Branch (4031:18): [True: 0, False: 16]
  ------------------
 4032|     16|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4033|      0|            digits_count += ranges::distance(it, *r);
 4034|      0|            it = *r;
 4035|      0|        }
 4036|       |
 4037|     16|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  | 1039|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 16]
  |  |  ------------------
  ------------------
 4038|      0|            return detail::unexpected_scan_error(
 4039|      0|                scan_error::invalid_scanned_value,
 4040|      0|                "No significand digits in float");
 4041|      0|        }
 4042|       |
 4043|     16|        auto beg_exp_it = it;
 4044|     16|        if (allowed_exp) {
  ------------------
  |  Branch (4044:13): [True: 14, False: 2]
  ------------------
 4045|     14|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4046|     14|        }
 4047|     16|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4047:13): [True: 2, False: 14]
  |  Branch (4047:29): [True: 2, False: 0]
  ------------------
 4048|      2|            return detail::unexpected_scan_error(
 4049|      2|                scan_error::invalid_scanned_value,
 4050|      2|                "No exponent given to scientific float");
 4051|      2|        }
 4052|       |
 4053|     14|        m_kind =
 4054|     14|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4054:13): [True: 14, False: 0]
  ------------------
 4055|       |
 4056|     14|        return it;
 4057|     16|    }
_ZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3835|    242|    {
 3836|    242|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  | 1039|    242|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 242]
  |  |  |  Branch (1039:45): [True: 0, False: 242]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3837|    242|                         thsep_allowed)) {
 3838|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3839|      0|                return char_to_int(ch) < 10 ||
 3840|      0|                       ch == m_locale_options.thousands_sep;
 3841|      0|            });
 3842|      0|        }
 3843|       |
 3844|    242|        return read_while1_code_unit(
 3845|    242|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3846|    242|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_:
  742|    242|        : m_fptr([](storage fn,
  743|    242|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    242|              cvref<T> obj = *get<T>(fn);
  745|    242|              if constexpr (std::is_void_v<R>) {
  746|    242|                  obj(static_cast<decltype(args)>(args)...);
  747|    242|              }
  748|    242|              else {
  749|    242|                  return obj(static_cast<decltype(args)>(args)...);
  750|    242|              }
  751|    242|          }),
  752|    242|          m_storage(std::addressof(f))
  753|    242|    {
  754|    242|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEwE_clES18_w:
  743|    246|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    246|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    246|              else {
  749|    246|                  return obj(static_cast<decltype(args)>(args)...);
  750|    246|              }
  751|    246|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlwE0_EEDaNS3_7storageE:
  683|    246|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    246|        else if constexpr (std::is_object_v<T>) {
  688|    246|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    246|    }
_ZZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlwE0_clEw:
 3845|    246|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_TnPNSP_9enable_ifIXsr3stdE11is_object_vISR_EEvE4typeELPv0EEEPSR_:
  660|    242|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    242|        {
  662|    242|        }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSH_:
 1675|     20|    {
 1676|     20|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1110|     20|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|     20|    }
_ZN3scn2v44impl12float_readerIwE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3738|    230|    {
 3739|    230|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  | 1039|    230|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 230]
  |  |  ------------------
  ------------------
 3740|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3741|      0|                classic_with_thsep_tag{}};
 3742|      0|        }
 3743|       |
 3744|    230|        return read_source_impl(range);
 3745|    230|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|  1.07k|    {
  763|  1.07k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1110|  1.07k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.07k|    }
_ZN3scn2v44impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3752|     20|    {
 3753|     20|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3754|     20|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  | 1038|     20|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 20]
  |  |  ------------------
  ------------------
 3755|      0|            m_locale_options.thousands_sep = CharT{0};
 3756|      0|        }
 3757|       |
 3758|     20|        return read_source_impl(range);
 3759|     20|    }
_ZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3778|  1.07k|    {
 3779|  1.07k|        SCN_TRY(sign_result,
  ------------------
  |  | 3958|  1.07k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.07k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.07k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 1.07k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  1.07k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.07k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3780|  1.07k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3781|  1.07k|        auto it = sign_result.first;
 3782|  1.07k|        m_sign = sign_result.second;
 3783|       |
 3784|  1.07k|        auto digits_begin = it;
 3785|  1.07k|        auto r = ranges::subrange{it, range.end()};
 3786|       |        if constexpr (ranges::contiguous_range<Range> &&
 3787|  1.07k|                      ranges::sized_range<Range>) {
 3788|  1.07k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  | 1039|  2.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.07k]
  |  |  |  Branch (1039:45): [True: 0, False: 1.07k]
  |  |  |  Branch (1039:45): [True: 0, False: 1.07k]
  |  |  ------------------
  ------------------
 3789|  1.07k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3790|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|      0|    }                                                  \
  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3791|      0|                    it,
 3792|      0|                    do_read_source_impl(
 3793|      0|                        r,
 3794|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3795|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3796|      0|            }
 3797|  1.07k|            else {
 3798|  1.07k|                auto cb = [&](const auto& rr)
 3799|  1.07k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3800|  1.07k|                    auto res = read_all(rr);
 3801|  1.07k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3802|  1.07k|                        return detail::unexpected_scan_error(
 3803|  1.07k|                            scan_error::invalid_scanned_value,
 3804|  1.07k|                            "Invalid float value");
 3805|  1.07k|                    }
 3806|  1.07k|                    return res;
 3807|  1.07k|                };
 3808|  1.07k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3953|  1.07k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|  1.07k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|  1.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 20, False: 1.05k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|     20|    }                                                  \
  |  | 3957|  1.07k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|  1.07k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3809|  1.05k|            }
 3810|       |        }
 3811|       |        else {
 3812|       |            SCN_TRY_ASSIGN(
 3813|       |                it,
 3814|       |                do_read_source_impl(
 3815|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3816|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3817|       |        }
 3818|       |
 3819|  1.07k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1104|  1.07k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.07k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3820|       |
 3821|  1.05k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3821:13): [True: 1.05k, False: 0]
  |  Branch (3821:48): [True: 1.05k, False: 0]
  ------------------
 3822|  1.05k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3822:13): [True: 1.05k, False: 0]
  ------------------
 3823|  1.05k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3823:13): [True: 1.05k, False: 0]
  ------------------
 3824|  1.05k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3825|  1.05k|        }
 3826|       |
 3827|  1.05k|        handle_separators();
 3828|       |
 3829|  1.05k|        return it;
 3830|  1.07k|    }
_ZN3scn2v44impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3872|  1.07k|    {
 3873|  1.07k|        auto it = range.begin();
 3874|  1.07k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3874:73): [True: 1.07k, False: 0]
  ------------------
 3875|  1.07k|            return unexpected(r.error());
 3876|  1.07k|        }
 3877|      0|        else {
 3878|      0|            it = *r;
 3879|      0|        }
 3880|       |
 3881|      0|        if (auto r = read_matching_string_classic_nocase(
 3882|      0|                ranges::subrange{it, range.end()}, "inity");
 3883|      0|            !r) {
  ------------------
  |  Branch (3883:13): [True: 0, False: 0]
  ------------------
 3884|      0|            m_kind = float_kind::inf_short;
 3885|      0|            return it;
 3886|      0|        }
 3887|      0|        else {
 3888|      0|            m_kind = float_kind::inf_long;
 3889|      0|            return *r;
 3890|      0|        }
 3891|      0|    }
_ZN3scn2v44impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3895|  1.07k|    {
 3896|  1.07k|        auto it = range.begin();
 3897|  1.07k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3897:73): [True: 1.07k, False: 0]
  ------------------
 3898|  1.07k|            return r.transform_error(map_parse_error_to_scan_error(
 3899|  1.07k|                scan_error::invalid_scanned_value,
 3900|  1.07k|                "Invalid floating-point NaN value"));
 3901|  1.07k|        }
 3902|      0|        else {
 3903|      0|            it = *r;
 3904|      0|        }
 3905|       |
 3906|      0|        if (auto r =
 3907|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3908|      0|            !r) {
  ------------------
  |  Branch (3908:13): [True: 0, False: 0]
  ------------------
 3909|      0|            m_kind = float_kind::nan_simple;
 3910|      0|            return it;
 3911|      0|        }
 3912|      0|        else {
 3913|      0|            it = *r;
 3914|      0|        }
 3915|       |
 3916|      0|        auto payload_beg_it = it;
 3917|      0|        it = read_while_code_unit(
 3918|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3919|      0|                return is_ascii_char(ch) &&
 3920|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3921|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3922|      0|            });
 3923|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3924|       |
 3925|      0|        m_kind = float_kind::nan_with_payload;
 3926|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3926:18): [True: 0, False: 0]
  ------------------
 3927|      0|                                             ')')) {
 3928|      0|            return *r;
 3929|      0|        }
 3930|      0|        return detail::unexpected_scan_error(
 3931|      0|            scan_error::invalid_scanned_value,
 3932|      0|            "Invalid floating-point NaN payload");
 3933|      0|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3865|  1.05k|    {
 3866|  1.05k|        return read_matching_string_classic_nocase(range, "0x");
 3867|  1.05k|    }
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2127|     30|{
 2128|     30|    auto it = read_while_code_unit(range, pred);
 2129|     30|    if (it == range.begin()) {
  ------------------
  |  Branch (2129:9): [True: 24, False: 6]
  ------------------
 2130|     24|        return unexpected(parse_error::error);
 2131|     24|    }
 2132|      6|    return it;
 2133|     30|}
_ZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3938|      4|    {
 3939|      4|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3939:18): [True: 0, False: 4]
  ------------------
 3940|      0|            auto beg_exp_it = range.begin();
 3941|      0|            auto it = *r;
 3942|       |
 3943|      0|            if (auto r_sign =
  ------------------
  |  Branch (3943:22): [True: 0, False: 0]
  ------------------
 3944|      0|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3945|      0|                it = r_sign->first;
 3946|      0|            }
 3947|       |
 3948|      0|            if (auto r_exp = read_while1_code_unit(
 3949|      0|                    ranges::subrange{it, range.end()},
 3950|      0|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3951|      0|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3952|      0|                it = beg_exp_it;
 3953|      0|            }
 3954|      0|            else {
 3955|      0|                it = *r_exp;
 3956|      0|            }
 3957|       |
 3958|      0|            return it;
 3959|      0|        }
 3960|      4|        return range.begin();
 3961|      4|    }
_ZN3scn2v44impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 4007|     24|    {
 4008|     24|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 4009|     24|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (4009:35): [True: 12, False: 12]
  |  Branch (4009:50): [True: 6, False: 6]
  ------------------
 4010|       |
 4011|     24|        auto it = ranges::begin(range);
 4012|     24|        std::ptrdiff_t digits_count = 0;
 4013|       |
 4014|     24|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 4015|     24|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 18, False: 6]
  |  |  ------------------
  ------------------
 4016|     18|            return r.transform_error(
 4017|     18|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 4018|     18|                                              "Invalid floating-point value"));
 4019|     18|        }
 4020|      6|        else {
 4021|      6|            digits_count += ranges::distance(it, *r);
 4022|      6|            it = *r;
 4023|      6|        }
 4024|       |
 4025|      6|        m_integral_part_length = digits_count;
 4026|      6|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (4026:18): [True: 0, False: 6]
  ------------------
 4027|      6|                                             m_locale_options.decimal_point)) {
 4028|      0|            it = *r;
 4029|      0|        }
 4030|       |
 4031|      6|        if (auto r =
  ------------------
  |  Branch (4031:18): [True: 0, False: 6]
  ------------------
 4032|      6|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4033|      0|            digits_count += ranges::distance(it, *r);
 4034|      0|            it = *r;
 4035|      0|        }
 4036|       |
 4037|      6|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  | 1039|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 6]
  |  |  ------------------
  ------------------
 4038|      0|            return detail::unexpected_scan_error(
 4039|      0|                scan_error::invalid_scanned_value,
 4040|      0|                "No significand digits in float");
 4041|      0|        }
 4042|       |
 4043|      6|        auto beg_exp_it = it;
 4044|      6|        if (allowed_exp) {
  ------------------
  |  Branch (4044:13): [True: 4, False: 2]
  ------------------
 4045|      4|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4046|      4|        }
 4047|      6|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4047:13): [True: 2, False: 4]
  |  Branch (4047:29): [True: 2, False: 0]
  ------------------
 4048|      2|            return detail::unexpected_scan_error(
 4049|      2|                scan_error::invalid_scanned_value,
 4050|      2|                "No exponent given to scientific float");
 4051|      2|        }
 4052|       |
 4053|      4|        m_kind =
 4054|      4|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4054:13): [True: 4, False: 0]
  ------------------
 4055|       |
 4056|      4|        return it;
 4057|      6|    }
_ZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3835|     30|    {
 3836|     30|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  | 1039|     30|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 30]
  |  |  |  Branch (1039:45): [True: 0, False: 30]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3837|     30|                         thsep_allowed)) {
 3838|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3839|      0|                return char_to_int(ch) < 10 ||
 3840|      0|                       ch == m_locale_options.thousands_sep;
 3841|      0|            });
 3842|      0|        }
 3843|       |
 3844|     30|        return read_while1_code_unit(
 3845|     30|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3846|     30|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|     30|        : m_fptr([](storage fn,
  743|     30|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     30|              cvref<T> obj = *get<T>(fn);
  745|     30|              if constexpr (std::is_void_v<R>) {
  746|     30|                  obj(static_cast<decltype(args)>(args)...);
  747|     30|              }
  748|     30|              else {
  749|     30|                  return obj(static_cast<decltype(args)>(args)...);
  750|     30|              }
  751|     30|          }),
  752|     30|          m_storage(std::addressof(f))
  753|     30|    {
  754|     30|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  743|     36|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     36|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     36|              else {
  749|     36|                  return obj(static_cast<decltype(args)>(args)...);
  750|     36|              }
  751|     36|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|     36|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     36|        else if constexpr (std::is_object_v<T>) {
  688|     36|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     36|    }
_ZZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3845|     36|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     30|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     30|        {
  662|     30|        }
_ZN3scn2v44impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4064|  1.07k|    {
 4065|  1.07k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4066|  1.07k|        const bool allowed_nonhex =
 4067|  1.07k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4068|  1.07k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4069|       |
 4070|  1.07k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4070:39): [True: 1.07k, False: 0]
  |  Branch (4070:45): [True: 0, False: 1.07k]
  ------------------
 4071|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4072|      0|                scan_error::invalid_scanned_value,
 4073|      0|                "Invalid infinite floating-point value"));
 4074|      0|        }
 4075|  1.07k|        else if (r) {
  ------------------
  |  Branch (4075:18): [True: 0, False: 1.07k]
  ------------------
 4076|      0|            return *r;
 4077|      0|        }
 4078|       |
 4079|  1.07k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4079:39): [True: 1.07k, False: 0]
  |  Branch (4079:45): [True: 0, False: 1.07k]
  ------------------
 4080|      0|            return unexpected(r.error());
 4081|      0|        }
 4082|  1.07k|        else if (r) {
  ------------------
  |  Branch (4082:18): [True: 0, False: 1.07k]
  ------------------
 4083|      0|            return *r;
 4084|      0|        }
 4085|       |
 4086|  1.07k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4086:13): [True: 1.05k, False: 24]
  |  Branch (4086:28): [True: 74, False: 978]
  ------------------
 4087|       |            // only hex allowed:
 4088|       |            // prefix "0x" allowed, not required
 4089|     74|            auto it = range.begin();
 4090|       |
 4091|     74|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4091:22): [True: 0, False: 74]
  ------------------
 4092|      0|                m_kind = float_kind::hex_with_prefix;
 4093|      0|                it = *r;
 4094|      0|            }
 4095|     74|            else {
 4096|     74|                m_kind = float_kind::hex_without_prefix;
 4097|     74|            }
 4098|       |
 4099|     74|            return read_hex(ranges::subrange{it, range.end()});
 4100|     74|        }
 4101|  1.00k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4101:13): [True: 24, False: 978]
  |  Branch (4101:29): [True: 24, False: 0]
  ------------------
 4102|       |            // only nonhex allowed:
 4103|       |            // no prefix allowed
 4104|     24|            m_kind = float_kind::generic;
 4105|     24|            return read_regular_float(range);
 4106|     24|        }
 4107|       |        // both hex and nonhex allowed:
 4108|       |        // check for "0x" prefix -> hex,
 4109|       |        // regular otherwise
 4110|       |
 4111|    978|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  | 1039|    978|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 978]
  |  |  ------------------
  ------------------
 4112|      0|            m_kind = float_kind::hex_with_prefix;
 4113|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4114|      0|        }
 4115|       |
 4116|    978|        m_kind = float_kind::generic;
 4117|    978|        return read_regular(range);
 4118|    978|    }
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3799|  1.05k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3800|  1.05k|                    auto res = read_all(rr);
 3801|  1.05k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  | 1039|  1.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.05k]
  |  |  ------------------
  ------------------
 3802|      0|                        return detail::unexpected_scan_error(
 3803|      0|                            scan_error::invalid_scanned_value,
 3804|      0|                            "Invalid float value");
 3805|      0|                    }
 3806|  1.05k|                    return res;
 3807|  1.05k|                };
_ZN3scn2v44impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1937|  1.05k|{
 1938|  1.05k|    return ranges::next(range.begin(), range.end());
 1939|  1.05k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|  1.05k|    {
  313|  1.05k|        ranges::advance(x, bound);
  314|  1.05k|        return x;
  315|  1.05k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|  1.05k|    {
  275|  1.05k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|  1.05k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1675|  1.05k|    {
 1676|  1.05k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1110|  1.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|  1.05k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1719|  1.05k|    {
 1720|  1.05k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|  1.05k|                      ranges::sized_range<Range>) {
 1725|  1.05k|            m_storage.reset();
 1726|  1.05k|            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|  1.05k|    }
_ZN3scn2v44impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3738|  1.05k|    {
 3739|  1.05k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  | 1039|  1.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.05k]
  |  |  ------------------
  ------------------
 3740|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3741|      0|                classic_with_thsep_tag{}};
 3742|      0|        }
 3743|       |
 3744|  1.05k|        return read_source_impl(range);
 3745|  1.05k|    }
_ZN3scn2v44impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3764|  1.07k|    {
 3765|  1.07k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1104|  1.07k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.07k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3766|       |
 3767|  1.07k|        const std::ptrdiff_t sign_len =
 3768|  1.07k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3768:13): [True: 0, False: 1.07k]
  ------------------
 3769|       |
 3770|  1.07k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3958|  1.07k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.07k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.07k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 970, False: 106]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    970|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    970|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    970|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    970|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    970|    }                                                  \
  |  |  |  | 3957|  1.07k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    106|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3771|    106|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3772|  1.07k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4255|    246|    {
 4256|    246|        float_reader<CharT> rd{get_options(specs)};
 4257|       |
 4258|    246|#if !SCN_DISABLE_LOCALE
 4259|    246|        if (specs.localized) {
  ------------------
  |  Branch (4259:13): [True: 16, False: 230]
  ------------------
 4260|     16|            return read_impl<Range>(
 4261|     16|                range, rd,
 4262|     16|                [](float_reader<CharT>& r, auto&&... args) {
 4263|     16|                    return r.read_source_localized(SCN_FWD(args)...);
 4264|     16|                },
 4265|     16|                value, loc);
 4266|     16|        }
 4267|    230|#endif
 4268|       |
 4269|    230|        return read_impl<Range>(
 4270|    230|            range, rd,
 4271|    230|            [](float_reader<CharT>& r, auto&&... args) {
 4272|    230|                return r.read_source(SCN_FWD(args)...);
 4273|    230|            },
 4274|    230|            value);
 4275|    246|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIwEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4291|    246|    {
 4292|    246|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4293|    246|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|    246|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 226, False: 20]
  |  |  ------------------
  ------------------
 4294|    226|            return unexpected(r.error());
 4295|    226|        }
 4296|       |
 4297|     20|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3958|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 20]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     20|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4298|     20|        return ranges::next(range.begin(), n);
 4299|     20|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_:
  742|     16|        : m_fptr([](storage fn,
  743|     16|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     16|              cvref<T> obj = *get<T>(fn);
  745|     16|              if constexpr (std::is_void_v<R>) {
  746|     16|                  obj(static_cast<decltype(args)>(args)...);
  747|     16|              }
  748|     16|              else {
  749|     16|                  return obj(static_cast<decltype(args)>(args)...);
  750|     16|              }
  751|     16|          }),
  752|     16|          m_storage(std::addressof(f))
  753|     16|    {
  754|     16|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1H_SC_SJ_SL_:
  743|     16|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     16|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     16|              else {
  749|     16|                  return obj(static_cast<decltype(args)>(args)...);
  750|     16|              }
  751|     16|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|     16|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     16|        else if constexpr (std::is_object_v<T>) {
  688|     16|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     16|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSD_ST_EEEDaSW_SZ_:
 4262|     16|                [](float_reader<CharT>& r, auto&&... args) {
 4263|     16|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1110|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4264|     16|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     16|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     16|        {
  662|     16|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_:
  742|    230|        : m_fptr([](storage fn,
  743|    230|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    230|              cvref<T> obj = *get<T>(fn);
  745|    230|              if constexpr (std::is_void_v<R>) {
  746|    230|                  obj(static_cast<decltype(args)>(args)...);
  747|    230|              }
  748|    230|              else {
  749|    230|                  return obj(static_cast<decltype(args)>(args)...);
  750|    230|              }
  751|    230|          }),
  752|    230|          m_storage(std::addressof(f))
  753|    230|    {
  754|    230|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1H_SC_SJ_SL_:
  743|    230|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    230|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    230|              else {
  749|    230|                  return obj(static_cast<decltype(args)>(args)...);
  750|    230|              }
  751|    230|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|    230|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    230|        else if constexpr (std::is_object_v<T>) {
  688|    230|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    230|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4271|    230|            [](float_reader<CharT>& r, auto&&... args) {
 4272|    230|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|    230|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4273|    230|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|    230|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    230|        {
  662|    230|        }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4255|    512|    {
 4256|    512|        float_reader<CharT> rd{get_options(specs)};
 4257|       |
 4258|    512|#if !SCN_DISABLE_LOCALE
 4259|    512|        if (specs.localized) {
  ------------------
  |  Branch (4259:13): [True: 20, False: 492]
  ------------------
 4260|     20|            return read_impl<Range>(
 4261|     20|                range, rd,
 4262|     20|                [](float_reader<CharT>& r, auto&&... args) {
 4263|     20|                    return r.read_source_localized(SCN_FWD(args)...);
 4264|     20|                },
 4265|     20|                value, loc);
 4266|     20|        }
 4267|    492|#endif
 4268|       |
 4269|    492|        return read_impl<Range>(
 4270|    492|            range, rd,
 4271|    492|            [](float_reader<CharT>& r, auto&&... args) {
 4272|    492|                return r.read_source(SCN_FWD(args)...);
 4273|    492|            },
 4274|    492|            value);
 4275|    512|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4291|  1.07k|    {
 4292|  1.07k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4293|  1.07k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|  1.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 20, False: 1.05k]
  |  |  ------------------
  ------------------
 4294|     20|            return unexpected(r.error());
 4295|     20|        }
 4296|       |
 4297|  1.05k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3958|  1.05k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.05k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.05k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 970, False: 86]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    970|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    970|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    970|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    970|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    970|    }                                                  \
  |  |  |  | 3957|  1.05k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     86|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4298|     86|        return ranges::next(range.begin(), n);
 4299|  1.05k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|     20|        : m_fptr([](storage fn,
  743|     20|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     20|              cvref<T> obj = *get<T>(fn);
  745|     20|              if constexpr (std::is_void_v<R>) {
  746|     20|                  obj(static_cast<decltype(args)>(args)...);
  747|     20|              }
  748|     20|              else {
  749|     20|                  return obj(static_cast<decltype(args)>(args)...);
  750|     20|              }
  751|     20|          }),
  752|     20|          m_storage(std::addressof(f))
  753|     20|    {
  754|     20|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|     20|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     20|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     20|              else {
  749|     20|                  return obj(static_cast<decltype(args)>(args)...);
  750|     20|              }
  751|     20|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|     20|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     20|        else if constexpr (std::is_object_v<T>) {
  688|     20|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     20|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4262|     20|                [](float_reader<CharT>& r, auto&&... args) {
 4263|     20|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1110|     20|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4264|     20|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     20|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     20|        {
  662|     20|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|    492|        : m_fptr([](storage fn,
  743|    492|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    492|              cvref<T> obj = *get<T>(fn);
  745|    492|              if constexpr (std::is_void_v<R>) {
  746|    492|                  obj(static_cast<decltype(args)>(args)...);
  747|    492|              }
  748|    492|              else {
  749|    492|                  return obj(static_cast<decltype(args)>(args)...);
  750|    492|              }
  751|    492|          }),
  752|    492|          m_storage(std::addressof(f))
  753|    492|    {
  754|    492|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|    492|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    492|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    492|              else {
  749|    492|                  return obj(static_cast<decltype(args)>(args)...);
  750|    492|              }
  751|    492|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|    492|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    492|        else if constexpr (std::is_object_v<T>) {
  688|    492|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    492|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4271|    492|            [](float_reader<CharT>& r, auto&&... args) {
 4272|    492|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|    492|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4273|    492|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|    492|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    492|        {
  662|    492|        }
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEwEEDav:
 5897|  1.99k|{
 5898|       |    if constexpr (std::is_same_v<T, bool>) {
 5899|       |        return reader_impl_for_bool<CharT>{};
 5900|       |    }
 5901|       |    else if constexpr (std::is_same_v<T, char>) {
 5902|       |        return reader_impl_for_char<CharT>{};
 5903|       |    }
 5904|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5905|       |        return reader_impl_for_wchar<CharT>{};
 5906|       |    }
 5907|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5908|       |        return reader_impl_for_code_point<CharT>{};
 5909|       |    }
 5910|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5911|       |                       std::is_same_v<T, std::wstring_view>) {
 5912|       |        return reader_impl_for_string<CharT>{};
 5913|       |    }
 5914|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5915|  1.99k|                       std::is_same_v<T, std::wstring>) {
 5916|  1.99k|        return reader_impl_for_string<CharT>{};
 5917|       |    }
 5918|       |#if !SCN_DISABLE_REGEX
 5919|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5920|       |                       std::is_same_v<T, wregex_matches>) {
 5921|       |        return reader_impl_for_regex_matches<CharT>{};
 5922|       |    }
 5923|       |#endif
 5924|       |    else if constexpr (std::is_same_v<T, void*>) {
 5925|       |        return reader_impl_for_voidptr<CharT>{};
 5926|       |    }
 5927|       |    else if constexpr (std::is_floating_point_v<T>) {
 5928|       |        return reader_impl_for_float<CharT>{};
 5929|       |    }
 5930|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5931|       |                       !std::is_same_v<T, wchar_t> &&
 5932|       |                       !std::is_same_v<T, char32_t> &&
 5933|       |                       !std::is_same_v<T, bool>) {
 5934|       |        return reader_impl_for_int<CharT>{};
 5935|       |    }
 5936|       |    else {
 5937|       |        return reader_impl_for_monostate<CharT>{};
 5938|       |    }
 5939|  1.99k|}
_ZN3scn2v44impl13string_readerIwEC2Ev:
 5291|  5.97k|    constexpr string_reader() = default;
_ZN3scn2v44impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3187|  4.27k|    {
 3188|  4.27k|        reader_error_handler eh{};
 3189|  4.27k|        get_derived().check_specs_impl(specs, eh);
 3190|  4.27k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1039|  4.27k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 726, False: 3.55k]
  |  |  ------------------
  ------------------
 3191|    726|            return detail::unexpected_scan_error(
 3192|    726|                scan_error::invalid_format_string, eh.m_msg);
 3193|    726|        }
 3194|  3.55k|        return {};
 3195|  4.27k|    }
_ZN3scn2v44impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3199|  4.27k|    {
 3200|  4.27k|        return static_cast<Derived&>(*this);
 3201|  4.27k|    }
_ZN3scn2v44impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5295|  4.27k|    {
 5296|  4.27k|        detail::check_string_type_specs(specs, eh);
 5297|       |
 5298|  4.27k|        SCN_GCC_PUSH
 5299|  4.27k|        SCN_GCC_IGNORE("-Wswitch")
 5300|  4.27k|        SCN_GCC_IGNORE("-Wswitch-default")
 5301|       |
 5302|  4.27k|        SCN_CLANG_PUSH
 5303|  4.27k|        SCN_CLANG_IGNORE("-Wswitch")
 5304|  4.27k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5305|       |
 5306|  4.27k|        switch (specs.type) {
  ------------------
  |  Branch (5306:17): [True: 720, False: 3.55k]
  ------------------
 5307|  1.81k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5307:13): [True: 1.81k, False: 2.46k]
  ------------------
 5308|  1.81k|                m_type = reader_type::word;
 5309|  1.81k|                break;
 5310|       |
 5311|    330|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5311:13): [True: 330, False: 3.94k]
  ------------------
 5312|    330|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5312:21): [True: 72, False: 258]
  ------------------
 5313|    330|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5313:21): [True: 162, False: 96]
  ------------------
 5314|    234|                    m_type = reader_type::custom_word;
 5315|    234|                }
 5316|     96|                else {
 5317|     96|                    m_type = reader_type::word;
 5318|     96|                }
 5319|    330|                break;
 5320|      0|            }
 5321|       |
 5322|     90|            case detail::presentation_type::character:
  ------------------
  |  Branch (5322:13): [True: 90, False: 4.18k]
  ------------------
 5323|     90|                m_type = reader_type::character;
 5324|     90|                break;
 5325|       |
 5326|  1.32k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5326:13): [True: 1.32k, False: 2.95k]
  ------------------
 5327|  1.32k|                m_type = reader_type::character_set;
 5328|  1.32k|                break;
 5329|       |
 5330|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5330:13): [True: 0, False: 4.27k]
  ------------------
 5331|      0|                m_type = reader_type::regex;
 5332|      0|                break;
 5333|       |
 5334|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5334:13): [True: 0, False: 4.27k]
  ------------------
 5335|      0|                m_type = reader_type::regex_escaped;
 5336|      0|                break;
 5337|  4.27k|        }
 5338|       |
 5339|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5340|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5341|  4.27k|    }
_ZNK3scn2v44impl13string_readerIwE19skip_ws_before_readEv:
 5344|  6.96k|    {
 5345|  6.96k|        return m_type == reader_type::word;
 5346|  6.96k|    }
_ZN3scn2v44impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1241|  6.37k|{
 1242|  6.37k|    auto it = src.begin();
 1243|  63.9k|    while (it != src.end()) {
  ------------------
  |  Branch (1243:12): [True: 58.8k, False: 5.09k]
  ------------------
 1244|  58.8k|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1245|  58.8k|        if (len == 0) {
  ------------------
  |  Branch (1245:13): [True: 0, False: 58.8k]
  ------------------
 1246|      0|            return false;
 1247|      0|        }
 1248|  58.8k|        if (src.end() - it < len) {
  ------------------
  |  Branch (1248:13): [True: 0, False: 58.8k]
  ------------------
 1249|      0|            return false;
 1250|      0|        }
 1251|  58.8k|        const auto cp = detail::decode_code_point_exhaustive(
 1252|  58.8k|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1253|  58.8k|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1253:13): [True: 1.27k, False: 57.5k]
  ------------------
 1254|  1.27k|            return false;
 1255|  1.27k|        }
 1256|  57.5k|        it += len;
 1257|  57.5k|    }
 1258|  5.09k|    return true;
 1259|  6.37k|}
_ZN3scn2v44impl22transcode_if_necessaryIwcEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3139|    306|{
 3140|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3141|       |        if (source.stores_allocated_string()) {
 3142|       |            dest.assign(SCN_MOVE(source.get_allocated_string()));
 3143|       |        }
 3144|       |        else {
 3145|       |            dest.assign(source.view());
 3146|       |        }
 3147|       |    }
 3148|    306|    else {
 3149|    306|        return transcode_impl(source.view(), dest);
 3150|    306|    }
 3151|       |
 3152|      0|    return {};
 3153|    306|}
_ZN3scn2v44impl14transcode_implIwcEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEERNS5_12basic_stringIT0_NS8_ISC_EENS5_9allocatorISC_EEEE:
 3114|  1.27k|{
 3115|  1.27k|    dst.clear();
 3116|  1.27k|    transcode_valid_to_string(src, dst);
 3117|  1.27k|    return {};
 3118|  1.27k|}
_ZN3scn2v44impl25transcode_valid_to_stringIwcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1501|  1.27k|{
 1502|  1.27k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1503|       |
 1504|  1.27k|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  | 1104|  1.27k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.27k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1505|       |    if constexpr (sizeof(SourceCharT) == 1) {
 1506|       |        if constexpr (sizeof(DestCharT) == 2) {
 1507|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1508|       |            std::u32string tmp;
 1509|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1510|       |            return transcode_to_string_impl_32to16<true>(
 1511|       |                std::u32string_view{tmp}, dest);
 1512|       |        }
 1513|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1514|       |            return transcode_valid_to_string_impl_to32(src, dest);
 1515|       |        }
 1516|       |    }
 1517|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1518|       |        if constexpr (sizeof(DestCharT) == 1) {
 1519|       |            std::u32string tmp;
 1520|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1521|       |            return transcode_to_string_impl_32to8<true>(
 1522|       |                std::u32string_view{tmp}, dest);
 1523|       |        }
 1524|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1525|       |            return trasncode_valid_to_string_impl_to32(src, dest);
 1526|       |        }
 1527|       |    }
 1528|  1.27k|    else if constexpr (sizeof(SourceCharT) == 4) {
 1529|  1.27k|        if constexpr (sizeof(DestCharT) == 1) {
 1530|  1.27k|            return transcode_to_string_impl_32to8<true>(src, dest);
 1531|       |        }
 1532|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1533|       |            return transcode_to_string_impl_32to16<true>(src, dest);
 1534|       |        }
 1535|  1.27k|    }
 1536|       |
 1537|  1.27k|    SCN_EXPECT(false);
  ------------------
  |  | 1104|  1.27k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.27k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1538|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1539|  1.27k|}
_ZN3scn2v44impl30transcode_to_string_impl_32to8ILb1EwcEEvNSt3__117basic_string_viewIT0_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT1_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1392|  1.27k|{
 1393|  1.27k|    static_assert(sizeof(SourceCharT) == 4);
 1394|  1.27k|    static_assert(sizeof(DestCharT) == 1);
 1395|       |
 1396|  12.1k|    for (auto cp : src) {
  ------------------
  |  Branch (1396:18): [True: 12.1k, False: 1.27k]
  ------------------
 1397|  12.1k|        const auto u32cp = static_cast<uint32_t>(cp);
 1398|  12.1k|        if (SCN_UNLIKELY(!VerifiedValid && cp >= detail::invalid_code_point)) {
  ------------------
  |  | 1039|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [Folded - Ignored]
  |  |  |  Branch (1039:45): [Folded - Ignored]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1399|       |            // Replacement character
 1400|      0|            dest.push_back(static_cast<char>(0xef));
 1401|      0|            dest.push_back(static_cast<char>(0xbf));
 1402|      0|            dest.push_back(static_cast<char>(0xbd));
 1403|      0|        }
 1404|  12.1k|        else if (cp < 128) {
  ------------------
  |  Branch (1404:18): [True: 10.1k, False: 2.02k]
  ------------------
 1405|  10.1k|            dest.push_back(static_cast<char>(cp));
 1406|  10.1k|        }
 1407|  2.02k|        else if (cp < 2048) {
  ------------------
  |  Branch (1407:18): [True: 210, False: 1.81k]
  ------------------
 1408|    210|            dest.push_back(
 1409|    210|                static_cast<char>(0xc0 | (static_cast<char>(u32cp >> 6))));
 1410|    210|            dest.push_back(
 1411|    210|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1412|    210|        }
 1413|  1.81k|        else if (cp < 65536) {
  ------------------
  |  Branch (1413:18): [True: 1.37k, False: 436]
  ------------------
 1414|  1.37k|            dest.push_back(
 1415|  1.37k|                static_cast<char>(0xe0 | (static_cast<char>(u32cp >> 12))));
 1416|  1.37k|            dest.push_back(static_cast<char>(
 1417|  1.37k|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1418|  1.37k|            dest.push_back(
 1419|  1.37k|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1420|  1.37k|        }
 1421|    436|        else {
 1422|    436|            dest.push_back(
 1423|    436|                static_cast<char>(0xf0 | (static_cast<char>(u32cp >> 18))));
 1424|    436|            dest.push_back(static_cast<char>(
 1425|    436|                0x80 | (static_cast<char>(u32cp >> 12) & 0x3f)));
 1426|    436|            dest.push_back(static_cast<char>(
 1427|    436|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1428|    436|            dest.push_back(
 1429|    436|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1430|    436|        }
 1431|  12.1k|    }
 1432|  1.27k|}
_ZN3scn2v44impl25character_set_reader_implIwE12specs_helper15handle_nonasciiEv:
 5192|  1.32k|        {
 5193|  1.32k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5193:17): [True: 390, False: 930]
  ------------------
 5194|    390|                return {};
 5195|    390|            }
 5196|       |
 5197|    930|            auto charset_string = specs.charset_string<SourceCharT>();
 5198|    930|            auto it = detail::to_address(charset_string.begin());
 5199|    930|            auto set = detail::parse_presentation_set(
 5200|    930|                it, detail::to_address(charset_string.end()), nonascii);
 5201|    930|            SCN_TRY_DISCARD(nonascii.get_error());
  ------------------
  |  | 3948|    930|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    930|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 930]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 5202|    930|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  | 1105|    930|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|    930|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5203|    930|            SCN_ENSURE(set == charset_string);
  ------------------
  |  | 1105|    930|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|    930|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5204|       |
 5205|    930|            std::sort(nonascii.extra_ranges.begin(),
 5206|    930|                      nonascii.extra_ranges.end());
 5207|    930|            return {};
 5208|    930|        }
_ZNK3scn2v44impl25character_set_reader_implIwE20read_source_callback28on_classic_with_extra_rangesEDi:
 5225|  11.7k|        {
 5226|  11.7k|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (5226:17): [True: 3.54k, False: 8.23k]
  ------------------
 5227|  3.54k|                return helper.is_char_set_in_extra_literals(cp);
 5228|  3.54k|            }
 5229|       |
 5230|  8.23k|            return helper.is_char_set_in_literals(static_cast<char>(cp));
 5231|  11.7k|        }
_ZNK3scn2v44impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDi:
 5175|  3.54k|        {
 5176|       |            // TODO: binary search?
 5177|  3.54k|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (5177:17): [True: 0, False: 3.54k]
  ------------------
 5178|      0|                return false;
 5179|      0|            }
 5180|       |
 5181|  3.54k|            const auto cp_val = static_cast<uint32_t>(cp);
 5182|  3.54k|            return std::find_if(
 5183|  3.54k|                       nonascii.extra_ranges.begin(),
 5184|  3.54k|                       nonascii.extra_ranges.end(),
 5185|  3.54k|                       [cp_val](const auto& pair) noexcept {
 5186|  3.54k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
 5187|  3.54k|                                  static_cast<uint32_t>(pair.second) > cp_val;
 5188|  3.54k|                       }) != nonascii.extra_ranges.end();
 5189|  3.54k|        }
_ZZNK3scn2v44impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
 5185|  28.1k|                       [cp_val](const auto& pair) noexcept {
 5186|  28.1k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (5186:35): [True: 25.5k, False: 2.58k]
  ------------------
 5187|  28.1k|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (5187:35): [True: 2.66k, False: 22.9k]
  ------------------
 5188|  28.1k|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v44impl25character_set_reader_implIwE12specs_helper23is_char_set_in_literalsEc:
 5165|  12.1k|        {
 5166|  12.1k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  | 1104|  12.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  12.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5167|  12.1k|            const auto val =
 5168|  12.1k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5169|  12.1k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5170|  12.1k|                    (val % 8)) &
 5171|  12.1k|                   1u;
 5172|  12.1k|        }
_ZNK3scn2v44impl25character_set_reader_implIwE20read_source_callback13on_ascii_onlyEw:
 5216|  4.14k|        {
 5217|  4.14k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5217:17): [True: 192, False: 3.95k]
  ------------------
 5218|    192|                return false;
 5219|    192|            }
 5220|       |
 5221|  3.95k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5222|  4.14k|        }
_ZN3scn2v44impl25character_set_reader_implIwE12specs_helperC2ERKNS0_6detail12format_specsE:
 5162|  1.32k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v44impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5362|    464|    {
 5363|    464|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|    464|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5364|    464|        return read_impl(range, specs, value);
 5365|    464|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5380|    464|    {
 5381|    464|        SCN_CLANG_PUSH
 5382|    464|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5383|       |
 5384|    464|        switch (m_type) {
 5385|    208|            case reader_type::word:
  ------------------
  |  Branch (5385:13): [True: 208, False: 256]
  ------------------
 5386|    208|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5387|       |
 5388|     38|            case reader_type::custom_word:
  ------------------
  |  Branch (5388:13): [True: 38, False: 426]
  ------------------
 5389|     38|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5390|     38|                                                                   value);
 5391|       |
 5392|     26|            case reader_type::character:
  ------------------
  |  Branch (5392:13): [True: 26, False: 438]
  ------------------
 5393|     26|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5394|       |
 5395|    192|            case reader_type::character_set:
  ------------------
  |  Branch (5395:13): [True: 192, False: 272]
  ------------------
 5396|    192|                return character_set_reader_impl<SourceCharT>{}.read(
 5397|    192|                    range, specs, value);
 5398|       |
 5399|      0|#if !SCN_DISABLE_REGEX
 5400|      0|            case reader_type::regex:
  ------------------
  |  Branch (5400:13): [True: 0, False: 464]
  ------------------
 5401|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5402|      0|                    range, specs.charset_string<SourceCharT>(),
 5403|      0|                    specs.regexp_flags, value);
 5404|       |
 5405|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5405:13): [True: 0, False: 464]
  ------------------
 5406|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5407|      0|                    range,
 5408|      0|                    get_unescaped_regex_pattern(
 5409|      0|                        specs.charset_string<SourceCharT>()),
 5410|      0|                    specs.regexp_flags, value);
 5411|      0|#endif
 5412|       |
 5413|      0|            default:
  ------------------
  |  Branch (5413:13): [True: 0, False: 464]
  ------------------
 5414|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5415|    464|                SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5416|    464|        }
 5417|       |
 5418|    464|        SCN_CLANG_POP
 5419|    464|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4913|    208|    {
 4914|    208|        return read_string_impl(range, read_until_classic_space(range), value);
 4915|    208|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4847|    272|{
 4848|    272|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4849|       |
 4850|    272|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4851|    272|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4851:9): [True: 140, False: 132]
  ------------------
 4852|    140|        return detail::unexpected_scan_error(
 4853|    140|            scan_error::invalid_scanned_value,
 4854|    140|            "Invalid encoding in scanned string");
 4855|    140|    }
 4856|       |
 4857|    132|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3948|    132|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    132|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 132]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 4858|    132|    return SCN_MOVE(result);
  ------------------
  |  | 1108|    132|    static_cast<    \
  |  | 1109|    132|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4859|    132|}
_ZN3scn2v44impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2219|    624|{
 2220|       |    if constexpr (ranges::contiguous_range<Range> &&
 2221|       |                  ranges::sized_range<Range> &&
 2222|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2223|       |        auto buf = make_contiguous_buffer(range);
 2224|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2225|       |        return ranges::next(range.begin(),
 2226|       |                            ranges::distance(buf.view().begin(), it));
 2227|       |    }
 2228|    624|    else {
 2229|    624|        auto it = range.begin();
 2230|       |
 2231|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2232|       |            auto seg = get_contiguous_beginning(range);
 2233|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2234|       |                seg_it != seg.end()) {
 2235|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2236|       |            }
 2237|       |            ranges::advance(it, seg.size());
 2238|       |        }
 2239|       |
 2240|    624|        return read_until_code_point(
 2241|    624|            ranges::subrange{it, range.end()},
 2242|    624|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2243|    624|    }
 2244|    624|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2192|    624|{
 2193|    624|    auto it = range.begin();
 2194|  11.6k|    while (it != range.end()) {
  ------------------
  |  Branch (2194:12): [True: 11.0k, False: 534]
  ------------------
 2195|  11.0k|        const auto val =
 2196|  11.0k|            read_code_point_into(ranges::subrange{it, range.end()});
 2197|  11.0k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1038|  11.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 11.0k, False: 0]
  |  |  ------------------
  ------------------
 2198|  11.0k|            const auto cp = detail::decode_code_point_exhaustive(
 2199|  11.0k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2200|  11.0k|            if (pred(cp)) {
  ------------------
  |  Branch (2200:17): [True: 90, False: 10.9k]
  ------------------
 2201|     90|                return it;
 2202|     90|            }
 2203|  11.0k|        }
 2204|  10.9k|        it = val.iterator;
 2205|  10.9k|    }
 2206|       |
 2207|    534|    return it;
 2208|    624|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  742|    624|        : m_fptr([](storage fn,
  743|    624|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    624|              cvref<T> obj = *get<T>(fn);
  745|    624|              if constexpr (std::is_void_v<R>) {
  746|    624|                  obj(static_cast<decltype(args)>(args)...);
  747|    624|              }
  748|    624|              else {
  749|    624|                  return obj(static_cast<decltype(args)>(args)...);
  750|    624|              }
  751|    624|          }),
  752|    624|          m_storage(std::addressof(f))
  753|    624|    {
  754|    624|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  743|  11.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  11.0k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  11.0k|              else {
  749|  11.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  11.0k|              }
  751|  11.0k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  11.0k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  11.0k|        else if constexpr (std::is_object_v<T>) {
  688|  11.0k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  11.0k|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2242|  11.0k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|    624|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    624|        {
  662|    624|        }
_ZN3scn2v44impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4934|     38|    {
 4935|     38|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4935:13): [True: 38, False: 0]
  ------------------
 4936|     38|            return read_string_impl(
 4937|     38|                range,
 4938|     38|                read_until_code_unit(
 4939|     38|                    range, specs.fill.template get_code_unit<SourceCharT>()),
 4940|     38|                value);
 4941|     38|        }
 4942|      0|        return read_string_impl(
 4943|      0|            range,
 4944|      0|            read_until_code_units(
 4945|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4946|      0|            value);
 4947|     38|    }
_ZN3scn2v44impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS0_6detail11mp_identityINDTcl4implISE_EEE4typeEE4typeE:
 2055|    114|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find(range.begin(), range.end(), cu);
 2058|       |    }
 2059|    114|    else {
 2060|    114|        auto first = range.begin();
 2061|  2.96k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 2.85k, False: 108]
  ------------------
 2062|  2.85k|            if (*first == cu) {
  ------------------
  |  Branch (2062:17): [True: 6, False: 2.85k]
  ------------------
 2063|      6|                return first;
 2064|      6|            }
 2065|  2.85k|        }
 2066|    108|        return first;
 2067|    114|    }
 2068|    114|}
_ZN3scn2v44impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 5036|     26|    {
 5037|     26|        return read_impl(
 5038|     26|            range,
 5039|     26|            [&](const auto& rng) {
 5040|     26|                return read_string_impl(rng, read_all(rng), value);
 5041|     26|            },
 5042|     26|            detail::priority_tag<1>{});
 5043|     26|    }
_ZN3scn2v44impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 5063|     26|    {
 5064|     26|        return read_cb(range);
 5065|     26|    }
_ZZN3scn2v44impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 5039|     26|            [&](const auto& rng) {
 5040|     26|                return read_string_impl(rng, read_all(rng), value);
 5041|     26|            },
_ZN3scn2v44impl8read_allINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 1937|     78|{
 1938|     78|    return ranges::next(range.begin(), range.end());
 1939|     78|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS1_6detail9subrange_8subrangeIS9_S9_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EESL_E4typeESL_SM_:
  312|     78|    {
  313|     78|        ranges::advance(x, bound);
  314|     78|        return x;
  315|     78|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EEvE4typeERSL_SM_:
  274|     78|    {
  275|     78|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|     78|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEvRT_T0_NS0_6detail12priority_tagILm0EEE:
  202|     78|    {
  203|  1.37k|        while (i != bound) {
  ------------------
  |  Branch (203:16): [True: 1.29k, False: 78]
  ------------------
  204|  1.29k|            ++i;
  205|  1.29k|        }
  206|     78|    }
_ZN3scn2v44impl25character_set_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5137|    192|    {
 5138|    192|        auto it = read_source_impl(range, {specs});
 5139|    192|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|    192|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 14, False: 178]
  |  |  ------------------
  ------------------
 5140|     14|            return unexpected(it.error());
 5141|     14|        }
 5142|       |
 5143|    178|        return read_string_impl(range, *it, value);
 5144|    192|    }
_ZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperE:
 5240|    576|    {
 5241|    576|        const bool is_inverted = helper.specs.charset_is_inverted;
 5242|    576|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5243|       |
 5244|    576|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3948|    576|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    576|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 576]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 5245|       |
 5246|    576|        read_source_callback cb_wrapper{helper};
 5247|       |
 5248|    576|        if (accepts_nonascii) {
  ------------------
  |  Branch (5248:13): [True: 366, False: 210]
  ------------------
 5249|    366|            const auto cb = [&](char32_t cp) {
 5250|    366|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5251|    366|            };
 5252|       |
 5253|    366|            if (is_inverted) {
  ------------------
  |  Branch (5253:17): [True: 198, False: 168]
  ------------------
 5254|    198|                auto it = read_until_code_point(range, cb);
 5255|    198|                return check_nonempty(it, range);
 5256|    198|            }
 5257|    168|            auto it = read_while_code_point(range, cb);
 5258|    168|            return check_nonempty(it, range);
 5259|    366|        }
 5260|       |
 5261|    210|        const auto cb = [&](SourceCharT ch) {
 5262|    210|            return cb_wrapper.on_ascii_only(ch);
 5263|    210|        };
 5264|       |
 5265|    210|        if (is_inverted) {
  ------------------
  |  Branch (5265:13): [True: 114, False: 96]
  ------------------
 5266|    114|            auto it = read_until_code_unit(range, cb);
 5267|    114|            return check_nonempty(it, range);
 5268|    114|        }
 5269|     96|        auto it = read_while_code_unit(range, cb);
 5270|     96|        return check_nonempty(it, range);
 5271|    210|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|    366|        : m_fptr([](storage fn,
  743|    366|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    366|              cvref<T> obj = *get<T>(fn);
  745|    366|              if constexpr (std::is_void_v<R>) {
  746|    366|                  obj(static_cast<decltype(args)>(args)...);
  747|    366|              }
  748|    366|              else {
  749|    366|                  return obj(static_cast<decltype(args)>(args)...);
  750|    366|              }
  751|    366|          }),
  752|    366|          m_storage(std::addressof(f))
  753|    366|    {
  754|    366|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEDiE_clES15_Di:
  743|  4.60k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.60k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  4.60k|              else {
  749|  4.60k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.60k|              }
  751|  4.60k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  4.60k|    {
  684|  4.60k|        if constexpr (std::is_const_v<T>) {
  685|  4.60k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  4.60k|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlDiE_clEDi:
 5249|  4.60k|            const auto cb = [&](char32_t cp) {
 5250|  4.60k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5251|  4.60k|            };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPKSL_:
  665|    366|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    366|        {
  667|    366|        }
_ZN3scn2v44impl25character_set_reader_implIwE14check_nonemptyINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEEEEENS0_13scan_expectedIT_EERKSI_T0_:
 5276|    576|    {
 5277|    576|        if (it == range.begin()) {
  ------------------
  |  Branch (5277:13): [True: 42, False: 534]
  ------------------
 5278|     42|            return detail::unexpected_scan_error(
 5279|     42|                scan_error::invalid_scanned_value,
 5280|     42|                "No characters matched in [character set]");
 5281|     42|        }
 5282|       |
 5283|    534|        return it;
 5284|    576|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlwE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|    210|        : m_fptr([](storage fn,
  743|    210|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    210|              cvref<T> obj = *get<T>(fn);
  745|    210|              if constexpr (std::is_void_v<R>) {
  746|    210|                  obj(static_cast<decltype(args)>(args)...);
  747|    210|              }
  748|    210|              else {
  749|    210|                  return obj(static_cast<decltype(args)>(args)...);
  750|    210|              }
  751|    210|          }),
  752|    210|          m_storage(std::addressof(f))
  753|    210|    {
  754|    210|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlwE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES15_w:
  743|  2.07k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.07k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.07k|              else {
  749|  2.07k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.07k|              }
  751|  2.07k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  2.07k|    {
  684|  2.07k|        if constexpr (std::is_const_v<T>) {
  685|  2.07k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.07k|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlwE_clEw:
 5261|  2.07k|        const auto cb = [&](SourceCharT ch) {
 5262|  2.07k|            return cb_wrapper.on_ascii_only(ch);
 5263|  2.07k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPKSL_:
  665|    210|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    210|        {
  667|    210|        }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4847|    178|{
 4848|    178|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4849|       |
 4850|    178|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4851|    178|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4851:9): [True: 4, False: 174]
  ------------------
 4852|      4|        return detail::unexpected_scan_error(
 4853|      4|            scan_error::invalid_scanned_value,
 4854|      4|            "Invalid encoding in scanned string");
 4855|      4|    }
 4856|       |
 4857|    174|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3948|    174|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    174|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 174]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 4858|    174|    return SCN_MOVE(result);
  ------------------
  |  | 1108|    174|    static_cast<    \
  |  | 1109|    174|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4859|    174|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5362|    704|    {
 5363|    704|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|    704|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5364|    704|        return read_impl(range, specs, value);
 5365|    704|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5380|    704|    {
 5381|    704|        SCN_CLANG_PUSH
 5382|    704|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5383|       |
 5384|    704|        switch (m_type) {
 5385|    418|            case reader_type::word:
  ------------------
  |  Branch (5385:13): [True: 418, False: 286]
  ------------------
 5386|    418|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5387|       |
 5388|     38|            case reader_type::custom_word:
  ------------------
  |  Branch (5388:13): [True: 38, False: 666]
  ------------------
 5389|     38|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5390|     38|                                                                   value);
 5391|       |
 5392|      0|            case reader_type::character:
  ------------------
  |  Branch (5392:13): [True: 0, False: 704]
  ------------------
 5393|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5394|       |
 5395|    248|            case reader_type::character_set:
  ------------------
  |  Branch (5395:13): [True: 248, False: 456]
  ------------------
 5396|    248|                return character_set_reader_impl<SourceCharT>{}.read(
 5397|    248|                    range, specs, value);
 5398|       |
 5399|      0|#if !SCN_DISABLE_REGEX
 5400|      0|            case reader_type::regex:
  ------------------
  |  Branch (5400:13): [True: 0, False: 704]
  ------------------
 5401|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5402|      0|                    range, specs.charset_string<SourceCharT>(),
 5403|      0|                    specs.regexp_flags, value);
 5404|       |
 5405|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5405:13): [True: 0, False: 704]
  ------------------
 5406|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5407|      0|                    range,
 5408|      0|                    get_unescaped_regex_pattern(
 5409|      0|                        specs.charset_string<SourceCharT>()),
 5410|      0|                    specs.regexp_flags, value);
 5411|      0|#endif
 5412|       |
 5413|      0|            default:
  ------------------
  |  Branch (5413:13): [True: 0, False: 704]
  ------------------
 5414|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5415|    704|                SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5416|    704|        }
 5417|       |
 5418|    704|        SCN_CLANG_POP
 5419|    704|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4913|    982|    {
 4914|    982|        return read_string_impl(range, read_until_classic_space(range), value);
 4915|    982|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4847|  1.02k|{
 4848|  1.02k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4849|       |
 4850|  1.02k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4851|  1.02k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4851:9): [True: 276, False: 744]
  ------------------
 4852|    276|        return detail::unexpected_scan_error(
 4853|    276|            scan_error::invalid_scanned_value,
 4854|    276|            "Invalid encoding in scanned string");
 4855|    276|    }
 4856|       |
 4857|    744|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3948|    744|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    744|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 744]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 4858|    744|    return SCN_MOVE(result);
  ------------------
  |  | 1108|    744|    static_cast<    \
  |  | 1109|    744|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4859|    744|}
_ZN3scn2v44impl22transcode_if_necessaryIwcEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3159|    968|{
 3160|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3161|       |        dest.assign(source.view());
 3162|       |    }
 3163|    968|    else {
 3164|    968|        return transcode_impl(source.view(), dest);
 3165|    968|    }
 3166|       |
 3167|      0|    return {};
 3168|    968|}
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2219|  2.94k|{
 2220|       |    if constexpr (ranges::contiguous_range<Range> &&
 2221|       |                  ranges::sized_range<Range> &&
 2222|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2223|       |        auto buf = make_contiguous_buffer(range);
 2224|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2225|       |        return ranges::next(range.begin(),
 2226|       |                            ranges::distance(buf.view().begin(), it));
 2227|       |    }
 2228|  2.94k|    else {
 2229|  2.94k|        auto it = range.begin();
 2230|       |
 2231|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2232|       |            auto seg = get_contiguous_beginning(range);
 2233|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2234|       |                seg_it != seg.end()) {
 2235|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2236|       |            }
 2237|       |            ranges::advance(it, seg.size());
 2238|       |        }
 2239|       |
 2240|  2.94k|        return read_until_code_point(
 2241|  2.94k|            ranges::subrange{it, range.end()},
 2242|  2.94k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2243|  2.94k|    }
 2244|  2.94k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  2.94k|        : m_fptr([](storage fn,
  743|  2.94k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.94k|              cvref<T> obj = *get<T>(fn);
  745|  2.94k|              if constexpr (std::is_void_v<R>) {
  746|  2.94k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.94k|              }
  748|  2.94k|              else {
  749|  2.94k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.94k|              }
  751|  2.94k|          }),
  752|  2.94k|          m_storage(std::addressof(f))
  753|  2.94k|    {
  754|  2.94k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  33.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  33.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  33.9k|              else {
  749|  33.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  33.9k|              }
  751|  33.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  33.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  33.9k|        else if constexpr (std::is_object_v<T>) {
  688|  33.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  33.9k|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2242|  33.9k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  2.94k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.94k|        {
  662|  2.94k|        }
_ZN3scn2v44impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4934|     38|    {
 4935|     38|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4935:13): [True: 38, False: 0]
  ------------------
 4936|     38|            return read_string_impl(
 4937|     38|                range,
 4938|     38|                read_until_code_unit(
 4939|     38|                    range, specs.fill.template get_code_unit<SourceCharT>()),
 4940|     38|                value);
 4941|     38|        }
 4942|      0|        return read_string_impl(
 4943|      0|            range,
 4944|      0|            read_until_code_units(
 4945|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4946|      0|            value);
 4947|     38|    }
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS0_6detail11mp_identityINDTcl4implISC_EEE4typeEE4typeE:
 2055|    114|{
 2056|    114|    if constexpr (ranges::common_range<Range>) {
 2057|    114|        return std::find(range.begin(), range.end(), cu);
 2058|       |    }
 2059|       |    else {
 2060|       |        auto first = range.begin();
 2061|       |        for (; first != range.end(); ++first) {
 2062|       |            if (*first == cu) {
 2063|       |                return first;
 2064|       |            }
 2065|       |        }
 2066|       |        return first;
 2067|       |    }
 2068|    114|}
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5137|    248|    {
 5138|    248|        auto it = read_source_impl(range, {specs});
 5139|    248|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|    248|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 18, False: 230]
  |  |  ------------------
  ------------------
 5140|     18|            return unexpected(it.error());
 5141|     18|        }
 5142|       |
 5143|    230|        return read_string_impl(range, *it, value);
 5144|    248|    }
_ZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5240|    744|    {
 5241|    744|        const bool is_inverted = helper.specs.charset_is_inverted;
 5242|    744|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5243|       |
 5244|    744|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3948|    744|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    744|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 744]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 5245|       |
 5246|    744|        read_source_callback cb_wrapper{helper};
 5247|       |
 5248|    744|        if (accepts_nonascii) {
  ------------------
  |  Branch (5248:13): [True: 564, False: 180]
  ------------------
 5249|    564|            const auto cb = [&](char32_t cp) {
 5250|    564|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5251|    564|            };
 5252|       |
 5253|    564|            if (is_inverted) {
  ------------------
  |  Branch (5253:17): [True: 360, False: 204]
  ------------------
 5254|    360|                auto it = read_until_code_point(range, cb);
 5255|    360|                return check_nonempty(it, range);
 5256|    360|            }
 5257|    204|            auto it = read_while_code_point(range, cb);
 5258|    204|            return check_nonempty(it, range);
 5259|    564|        }
 5260|       |
 5261|    180|        const auto cb = [&](SourceCharT ch) {
 5262|    180|            return cb_wrapper.on_ascii_only(ch);
 5263|    180|        };
 5264|       |
 5265|    180|        if (is_inverted) {
  ------------------
  |  Branch (5265:13): [True: 78, False: 102]
  ------------------
 5266|     78|            auto it = read_until_code_unit(range, cb);
 5267|     78|            return check_nonempty(it, range);
 5268|     78|        }
 5269|    102|        auto it = read_while_code_unit(range, cb);
 5270|    102|        return check_nonempty(it, range);
 5271|    180|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|    564|        : m_fptr([](storage fn,
  743|    564|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    564|              cvref<T> obj = *get<T>(fn);
  745|    564|              if constexpr (std::is_void_v<R>) {
  746|    564|                  obj(static_cast<decltype(args)>(args)...);
  747|    564|              }
  748|    564|              else {
  749|    564|                  return obj(static_cast<decltype(args)>(args)...);
  750|    564|              }
  751|    564|          }),
  752|    564|          m_storage(std::addressof(f))
  753|    564|    {
  754|    564|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clES13_Di:
  743|  7.17k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.17k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  7.17k|              else {
  749|  7.17k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.17k|              }
  751|  7.17k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  7.17k|    {
  684|  7.17k|        if constexpr (std::is_const_v<T>) {
  685|  7.17k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  7.17k|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlDiE_clEDi:
 5249|  7.17k|            const auto cb = [&](char32_t cp) {
 5250|  7.17k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5251|  7.17k|            };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|    564|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    564|        {
  667|    564|        }
_ZN3scn2v44impl25character_set_reader_implIwE14check_nonemptyIPKwNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5276|    744|    {
 5277|    744|        if (it == range.begin()) {
  ------------------
  |  Branch (5277:13): [True: 54, False: 690]
  ------------------
 5278|     54|            return detail::unexpected_scan_error(
 5279|     54|                scan_error::invalid_scanned_value,
 5280|     54|                "No characters matched in [character set]");
 5281|     54|        }
 5282|       |
 5283|    690|        return it;
 5284|    744|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|    180|        : m_fptr([](storage fn,
  743|    180|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    180|              cvref<T> obj = *get<T>(fn);
  745|    180|              if constexpr (std::is_void_v<R>) {
  746|    180|                  obj(static_cast<decltype(args)>(args)...);
  747|    180|              }
  748|    180|              else {
  749|    180|                  return obj(static_cast<decltype(args)>(args)...);
  750|    180|              }
  751|    180|          }),
  752|    180|          m_storage(std::addressof(f))
  753|    180|    {
  754|    180|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|  2.07k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.07k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.07k|              else {
  749|  2.07k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.07k|              }
  751|  2.07k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  2.07k|    {
  684|  2.07k|        if constexpr (std::is_const_v<T>) {
  685|  2.07k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.07k|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlwE_clEw:
 5261|  2.07k|        const auto cb = [&](SourceCharT ch) {
 5262|  2.07k|            return cb_wrapper.on_ascii_only(ch);
 5263|  2.07k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|    180|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    180|        {
  667|    180|        }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4847|    230|{
 4848|    230|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4849|       |
 4850|    230|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4851|    230|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4851:9): [True: 6, False: 224]
  ------------------
 4852|      6|        return detail::unexpected_scan_error(
 4853|      6|            scan_error::invalid_scanned_value,
 4854|      6|            "Invalid encoding in scanned string");
 4855|      6|    }
 4856|       |
 4857|    224|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3948|    224|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    224|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 224]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 4858|    224|    return SCN_MOVE(result);
  ------------------
  |  | 1108|    224|    static_cast<    \
  |  | 1109|    224|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4859|    224|}
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5897|  1.99k|{
 5898|       |    if constexpr (std::is_same_v<T, bool>) {
 5899|       |        return reader_impl_for_bool<CharT>{};
 5900|       |    }
 5901|       |    else if constexpr (std::is_same_v<T, char>) {
 5902|       |        return reader_impl_for_char<CharT>{};
 5903|       |    }
 5904|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5905|       |        return reader_impl_for_wchar<CharT>{};
 5906|       |    }
 5907|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5908|       |        return reader_impl_for_code_point<CharT>{};
 5909|       |    }
 5910|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5911|       |                       std::is_same_v<T, std::wstring_view>) {
 5912|       |        return reader_impl_for_string<CharT>{};
 5913|       |    }
 5914|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5915|  1.99k|                       std::is_same_v<T, std::wstring>) {
 5916|  1.99k|        return reader_impl_for_string<CharT>{};
 5917|       |    }
 5918|       |#if !SCN_DISABLE_REGEX
 5919|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5920|       |                       std::is_same_v<T, wregex_matches>) {
 5921|       |        return reader_impl_for_regex_matches<CharT>{};
 5922|       |    }
 5923|       |#endif
 5924|       |    else if constexpr (std::is_same_v<T, void*>) {
 5925|       |        return reader_impl_for_voidptr<CharT>{};
 5926|       |    }
 5927|       |    else if constexpr (std::is_floating_point_v<T>) {
 5928|       |        return reader_impl_for_float<CharT>{};
 5929|       |    }
 5930|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5931|       |                       !std::is_same_v<T, wchar_t> &&
 5932|       |                       !std::is_same_v<T, char32_t> &&
 5933|       |                       !std::is_same_v<T, bool>) {
 5934|       |        return reader_impl_for_int<CharT>{};
 5935|       |    }
 5936|       |    else {
 5937|       |        return reader_impl_for_monostate<CharT>{};
 5938|       |    }
 5939|  1.99k|}
_ZN3scn2v44impl22transcode_if_necessaryIwwEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3139|    306|{
 3140|    306|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3141|    306|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (3141:13): [True: 306, False: 0]
  ------------------
 3142|    306|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  | 1108|    306|    static_cast<    \
  |  | 1109|    306|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3143|    306|        }
 3144|      0|        else {
 3145|      0|            dest.assign(source.view());
 3146|      0|        }
 3147|       |    }
 3148|       |    else {
 3149|       |        return transcode_impl(source.view(), dest);
 3150|       |    }
 3151|       |
 3152|    306|    return {};
 3153|    306|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5362|    464|    {
 5363|    464|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|    464|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5364|    464|        return read_impl(range, specs, value);
 5365|    464|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5380|    464|    {
 5381|    464|        SCN_CLANG_PUSH
 5382|    464|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5383|       |
 5384|    464|        switch (m_type) {
 5385|    208|            case reader_type::word:
  ------------------
  |  Branch (5385:13): [True: 208, False: 256]
  ------------------
 5386|    208|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5387|       |
 5388|     38|            case reader_type::custom_word:
  ------------------
  |  Branch (5388:13): [True: 38, False: 426]
  ------------------
 5389|     38|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5390|     38|                                                                   value);
 5391|       |
 5392|     26|            case reader_type::character:
  ------------------
  |  Branch (5392:13): [True: 26, False: 438]
  ------------------
 5393|     26|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5394|       |
 5395|    192|            case reader_type::character_set:
  ------------------
  |  Branch (5395:13): [True: 192, False: 272]
  ------------------
 5396|    192|                return character_set_reader_impl<SourceCharT>{}.read(
 5397|    192|                    range, specs, value);
 5398|       |
 5399|      0|#if !SCN_DISABLE_REGEX
 5400|      0|            case reader_type::regex:
  ------------------
  |  Branch (5400:13): [True: 0, False: 464]
  ------------------
 5401|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5402|      0|                    range, specs.charset_string<SourceCharT>(),
 5403|      0|                    specs.regexp_flags, value);
 5404|       |
 5405|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5405:13): [True: 0, False: 464]
  ------------------
 5406|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5407|      0|                    range,
 5408|      0|                    get_unescaped_regex_pattern(
 5409|      0|                        specs.charset_string<SourceCharT>()),
 5410|      0|                    specs.regexp_flags, value);
 5411|      0|#endif
 5412|       |
 5413|      0|            default:
  ------------------
  |  Branch (5413:13): [True: 0, False: 464]
  ------------------
 5414|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5415|    464|                SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5416|    464|        }
 5417|       |
 5418|    464|        SCN_CLANG_POP
 5419|    464|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4913|    208|    {
 4914|    208|        return read_string_impl(range, read_until_classic_space(range), value);
 4915|    208|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4847|    272|{
 4848|    272|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4849|       |
 4850|    272|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4851|    272|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4851:9): [True: 140, False: 132]
  ------------------
 4852|    140|        return detail::unexpected_scan_error(
 4853|    140|            scan_error::invalid_scanned_value,
 4854|    140|            "Invalid encoding in scanned string");
 4855|    140|    }
 4856|       |
 4857|    132|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3948|    132|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    132|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 132]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 4858|    132|    return SCN_MOVE(result);
  ------------------
  |  | 1108|    132|    static_cast<    \
  |  | 1109|    132|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4859|    132|}
_ZN3scn2v44impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4934|     38|    {
 4935|     38|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4935:13): [True: 38, False: 0]
  ------------------
 4936|     38|            return read_string_impl(
 4937|     38|                range,
 4938|     38|                read_until_code_unit(
 4939|     38|                    range, specs.fill.template get_code_unit<SourceCharT>()),
 4940|     38|                value);
 4941|     38|        }
 4942|      0|        return read_string_impl(
 4943|      0|            range,
 4944|      0|            read_until_code_units(
 4945|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4946|      0|            value);
 4947|     38|    }
_ZN3scn2v44impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 5036|     26|    {
 5037|     26|        return read_impl(
 5038|     26|            range,
 5039|     26|            [&](const auto& rng) {
 5040|     26|                return read_string_impl(rng, read_all(rng), value);
 5041|     26|            },
 5042|     26|            detail::priority_tag<1>{});
 5043|     26|    }
_ZN3scn2v44impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 5063|     26|    {
 5064|     26|        return read_cb(range);
 5065|     26|    }
_ZZN3scn2v44impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 5039|     26|            [&](const auto& rng) {
 5040|     26|                return read_string_impl(rng, read_all(rng), value);
 5041|     26|            },
_ZN3scn2v44impl25character_set_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5137|    192|    {
 5138|    192|        auto it = read_source_impl(range, {specs});
 5139|    192|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|    192|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 14, False: 178]
  |  |  ------------------
  ------------------
 5140|     14|            return unexpected(it.error());
 5141|     14|        }
 5142|       |
 5143|    178|        return read_string_impl(range, *it, value);
 5144|    192|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4847|    178|{
 4848|    178|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4849|       |
 4850|    178|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4851|    178|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4851:9): [True: 4, False: 174]
  ------------------
 4852|      4|        return detail::unexpected_scan_error(
 4853|      4|            scan_error::invalid_scanned_value,
 4854|      4|            "Invalid encoding in scanned string");
 4855|      4|    }
 4856|       |
 4857|    174|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3948|    174|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    174|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 174]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 4858|    174|    return SCN_MOVE(result);
  ------------------
  |  | 1108|    174|    static_cast<    \
  |  | 1109|    174|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4859|    174|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5362|    704|    {
 5363|    704|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|    704|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5364|    704|        return read_impl(range, specs, value);
 5365|    704|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5380|    704|    {
 5381|    704|        SCN_CLANG_PUSH
 5382|    704|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5383|       |
 5384|    704|        switch (m_type) {
 5385|    418|            case reader_type::word:
  ------------------
  |  Branch (5385:13): [True: 418, False: 286]
  ------------------
 5386|    418|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5387|       |
 5388|     38|            case reader_type::custom_word:
  ------------------
  |  Branch (5388:13): [True: 38, False: 666]
  ------------------
 5389|     38|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5390|     38|                                                                   value);
 5391|       |
 5392|      0|            case reader_type::character:
  ------------------
  |  Branch (5392:13): [True: 0, False: 704]
  ------------------
 5393|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5394|       |
 5395|    248|            case reader_type::character_set:
  ------------------
  |  Branch (5395:13): [True: 248, False: 456]
  ------------------
 5396|    248|                return character_set_reader_impl<SourceCharT>{}.read(
 5397|    248|                    range, specs, value);
 5398|       |
 5399|      0|#if !SCN_DISABLE_REGEX
 5400|      0|            case reader_type::regex:
  ------------------
  |  Branch (5400:13): [True: 0, False: 704]
  ------------------
 5401|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5402|      0|                    range, specs.charset_string<SourceCharT>(),
 5403|      0|                    specs.regexp_flags, value);
 5404|       |
 5405|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5405:13): [True: 0, False: 704]
  ------------------
 5406|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5407|      0|                    range,
 5408|      0|                    get_unescaped_regex_pattern(
 5409|      0|                        specs.charset_string<SourceCharT>()),
 5410|      0|                    specs.regexp_flags, value);
 5411|      0|#endif
 5412|       |
 5413|      0|            default:
  ------------------
  |  Branch (5413:13): [True: 0, False: 704]
  ------------------
 5414|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5415|    704|                SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5416|    704|        }
 5417|       |
 5418|    704|        SCN_CLANG_POP
 5419|    704|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4913|    982|    {
 4914|    982|        return read_string_impl(range, read_until_classic_space(range), value);
 4915|    982|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4847|  1.02k|{
 4848|  1.02k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4849|       |
 4850|  1.02k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4851|  1.02k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4851:9): [True: 276, False: 744]
  ------------------
 4852|    276|        return detail::unexpected_scan_error(
 4853|    276|            scan_error::invalid_scanned_value,
 4854|    276|            "Invalid encoding in scanned string");
 4855|    276|    }
 4856|       |
 4857|    744|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3948|    744|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    744|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 744]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 4858|    744|    return SCN_MOVE(result);
  ------------------
  |  | 1108|    744|    static_cast<    \
  |  | 1109|    744|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4859|    744|}
_ZN3scn2v44impl22transcode_if_necessaryIwwEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3159|    968|{
 3160|    968|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3161|    968|        dest.assign(source.view());
 3162|       |    }
 3163|       |    else {
 3164|       |        return transcode_impl(source.view(), dest);
 3165|       |    }
 3166|       |
 3167|    968|    return {};
 3168|    968|}
_ZN3scn2v44impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4934|     38|    {
 4935|     38|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4935:13): [True: 38, False: 0]
  ------------------
 4936|     38|            return read_string_impl(
 4937|     38|                range,
 4938|     38|                read_until_code_unit(
 4939|     38|                    range, specs.fill.template get_code_unit<SourceCharT>()),
 4940|     38|                value);
 4941|     38|        }
 4942|      0|        return read_string_impl(
 4943|      0|            range,
 4944|      0|            read_until_code_units(
 4945|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4946|      0|            value);
 4947|     38|    }
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5137|    248|    {
 5138|    248|        auto it = read_source_impl(range, {specs});
 5139|    248|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|    248|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 18, False: 230]
  |  |  ------------------
  ------------------
 5140|     18|            return unexpected(it.error());
 5141|     18|        }
 5142|       |
 5143|    230|        return read_string_impl(range, *it, value);
 5144|    248|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4847|    230|{
 4848|    230|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4849|       |
 4850|    230|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4851|    230|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4851:9): [True: 6, False: 224]
  ------------------
 4852|      6|        return detail::unexpected_scan_error(
 4853|      6|            scan_error::invalid_scanned_value,
 4854|      6|            "Invalid encoding in scanned string");
 4855|      6|    }
 4856|       |
 4857|    224|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3948|    224|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    224|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 224]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 4858|    224|    return SCN_MOVE(result);
  ------------------
  |  | 1108|    224|    static_cast<    \
  |  | 1109|    224|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4859|    224|}
_ZN3scn2v44impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5897|  1.99k|{
 5898|       |    if constexpr (std::is_same_v<T, bool>) {
 5899|       |        return reader_impl_for_bool<CharT>{};
 5900|       |    }
 5901|       |    else if constexpr (std::is_same_v<T, char>) {
 5902|       |        return reader_impl_for_char<CharT>{};
 5903|       |    }
 5904|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5905|       |        return reader_impl_for_wchar<CharT>{};
 5906|       |    }
 5907|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5908|       |        return reader_impl_for_code_point<CharT>{};
 5909|       |    }
 5910|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5911|  1.99k|                       std::is_same_v<T, std::wstring_view>) {
 5912|  1.99k|        return reader_impl_for_string<CharT>{};
 5913|       |    }
 5914|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5915|       |                       std::is_same_v<T, std::wstring>) {
 5916|       |        return reader_impl_for_string<CharT>{};
 5917|       |    }
 5918|       |#if !SCN_DISABLE_REGEX
 5919|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5920|       |                       std::is_same_v<T, wregex_matches>) {
 5921|       |        return reader_impl_for_regex_matches<CharT>{};
 5922|       |    }
 5923|       |#endif
 5924|       |    else if constexpr (std::is_same_v<T, void*>) {
 5925|       |        return reader_impl_for_voidptr<CharT>{};
 5926|       |    }
 5927|       |    else if constexpr (std::is_floating_point_v<T>) {
 5928|       |        return reader_impl_for_float<CharT>{};
 5929|       |    }
 5930|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5931|       |                       !std::is_same_v<T, wchar_t> &&
 5932|       |                       !std::is_same_v<T, char32_t> &&
 5933|       |                       !std::is_same_v<T, bool>) {
 5934|       |        return reader_impl_for_int<CharT>{};
 5935|       |    }
 5936|       |    else {
 5937|       |        return reader_impl_for_monostate<CharT>{};
 5938|       |    }
 5939|  1.99k|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5362|    464|    {
 5363|    464|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|    464|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5364|    464|        return read_impl(range, specs, value);
 5365|    464|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5380|    464|    {
 5381|    464|        SCN_CLANG_PUSH
 5382|    464|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5383|       |
 5384|    464|        switch (m_type) {
 5385|    208|            case reader_type::word:
  ------------------
  |  Branch (5385:13): [True: 208, False: 256]
  ------------------
 5386|    208|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5387|       |
 5388|     38|            case reader_type::custom_word:
  ------------------
  |  Branch (5388:13): [True: 38, False: 426]
  ------------------
 5389|     38|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5390|     38|                                                                   value);
 5391|       |
 5392|     26|            case reader_type::character:
  ------------------
  |  Branch (5392:13): [True: 26, False: 438]
  ------------------
 5393|     26|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5394|       |
 5395|    192|            case reader_type::character_set:
  ------------------
  |  Branch (5395:13): [True: 192, False: 272]
  ------------------
 5396|    192|                return character_set_reader_impl<SourceCharT>{}.read(
 5397|    192|                    range, specs, value);
 5398|       |
 5399|      0|#if !SCN_DISABLE_REGEX
 5400|      0|            case reader_type::regex:
  ------------------
  |  Branch (5400:13): [True: 0, False: 464]
  ------------------
 5401|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5402|      0|                    range, specs.charset_string<SourceCharT>(),
 5403|      0|                    specs.regexp_flags, value);
 5404|       |
 5405|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5405:13): [True: 0, False: 464]
  ------------------
 5406|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5407|      0|                    range,
 5408|      0|                    get_unescaped_regex_pattern(
 5409|      0|                        specs.charset_string<SourceCharT>()),
 5410|      0|                    specs.regexp_flags, value);
 5411|      0|#endif
 5412|       |
 5413|      0|            default:
  ------------------
  |  Branch (5413:13): [True: 0, False: 464]
  ------------------
 5414|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5415|    464|                SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5416|    464|        }
 5417|       |
 5418|    464|        SCN_CLANG_POP
 5419|    464|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4920|    208|    {
 4921|    208|        return read_string_view_impl(range, read_until_classic_space(range),
 4922|    208|                                     value);
 4923|    208|    }
_ZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4866|    272|{
 4867|    272|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4868|       |
 4869|    272|    auto src = [&]() {
 4870|    272|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4871|    272|            return make_contiguous_buffer(
 4872|    272|                ranges::subrange{range.begin().base(), result.base()});
 4873|    272|        }
 4874|    272|        else {
 4875|    272|            return make_contiguous_buffer(
 4876|    272|                ranges::subrange{range.begin(), result});
 4877|    272|        }
 4878|    272|    }();
 4879|    272|    using src_type = decltype(src);
 4880|       |
 4881|    272|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4881:9): [Folded - Ignored]
  ------------------
 4882|      0|        return detail::unexpected_scan_error(
 4883|      0|            scan_error::invalid_format_string,
 4884|      0|            "Cannot read a string_view from this source range (not "
 4885|      0|            "contiguous)");
 4886|      0|    }
 4887|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4888|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4889|       |                                             "Cannot read a string_view from "
 4890|       |                                             "this source range (would require "
 4891|       |                                             "transcoding)");
 4892|       |    }
 4893|    272|    else {
 4894|    272|        const auto view = src.view();
 4895|    272|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4896|       |
 4897|    272|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4897:13): [True: 140, False: 132]
  ------------------
 4898|    140|            return detail::unexpected_scan_error(
 4899|    140|                scan_error::invalid_scanned_value,
 4900|    140|                "Invalid encoding in scanned string_view");
 4901|    140|        }
 4902|       |
 4903|    132|        return SCN_MOVE(result);
  ------------------
  |  | 1108|    132|    static_cast<    \
  |  | 1109|    132|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4904|    272|    }
 4905|    272|}
_ZZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4869|    272|    auto src = [&]() {
 4870|    272|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4871|    272|            return make_contiguous_buffer(
 4872|    272|                ranges::subrange{range.begin().base(), result.base()});
 4873|       |        }
 4874|       |        else {
 4875|       |            return make_contiguous_buffer(
 4876|       |                ranges::subrange{range.begin(), result});
 4877|       |        }
 4878|    272|    }();
_ZN3scn2v44impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 4954|     38|    {
 4955|     38|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4955:13): [True: 38, False: 0]
  ------------------
 4956|     38|            return read_string_view_impl(
 4957|     38|                range,
 4958|     38|                read_until_code_unit(
 4959|     38|                    range, specs.fill.template get_code_unit<SourceCharT>()),
 4960|     38|                value);
 4961|     38|        }
 4962|      0|        return read_string_view_impl(
 4963|      0|            range,
 4964|      0|            read_until_code_units(
 4965|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4966|      0|            value);
 4967|     38|    }
_ZN3scn2v44impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 5048|     26|    {
 5049|     26|        return read_impl(
 5050|     26|            range,
 5051|     26|            [&](const auto& rng) {
 5052|     26|                return read_string_view_impl(rng, read_all(rng), value);
 5053|     26|            },
 5054|     26|            detail::priority_tag<1>{});
 5055|     26|    }
_ZN3scn2v44impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_17basic_string_viewIT0_NSG_11char_traitsISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSX_OSP_NS0_6detail12priority_tagILm1EEE:
 5063|     26|    {
 5064|     26|        return read_cb(range);
 5065|     26|    }
_ZZN3scn2v44impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEEENKUlRKSH_E_clISD_EEDaSU_:
 5051|     26|            [&](const auto& rng) {
 5052|     26|                return read_string_view_impl(rng, read_all(rng), value);
 5053|     26|            },
_ZN3scn2v44impl25character_set_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 5151|    192|    {
 5152|    192|        auto it = read_source_impl(range, {specs});
 5153|    192|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|    192|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 14, False: 178]
  |  |  ------------------
  ------------------
 5154|     14|            return unexpected(it.error());
 5155|     14|        }
 5156|       |
 5157|    178|        return read_string_view_impl(range, *it, value);
 5158|    192|    }
_ZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEE:
 4866|    178|{
 4867|    178|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4868|       |
 4869|    178|    auto src = [&]() {
 4870|    178|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4871|    178|            return make_contiguous_buffer(
 4872|    178|                ranges::subrange{range.begin().base(), result.base()});
 4873|    178|        }
 4874|    178|        else {
 4875|    178|            return make_contiguous_buffer(
 4876|    178|                ranges::subrange{range.begin(), result});
 4877|    178|        }
 4878|    178|    }();
 4879|    178|    using src_type = decltype(src);
 4880|       |
 4881|    178|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4881:9): [Folded - Ignored]
  ------------------
 4882|      0|        return detail::unexpected_scan_error(
 4883|      0|            scan_error::invalid_format_string,
 4884|      0|            "Cannot read a string_view from this source range (not "
 4885|      0|            "contiguous)");
 4886|      0|    }
 4887|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4888|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4889|       |                                             "Cannot read a string_view from "
 4890|       |                                             "this source range (would require "
 4891|       |                                             "transcoding)");
 4892|       |    }
 4893|    178|    else {
 4894|    178|        const auto view = src.view();
 4895|    178|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4896|       |
 4897|    178|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4897:13): [True: 4, False: 174]
  ------------------
 4898|      4|            return detail::unexpected_scan_error(
 4899|      4|                scan_error::invalid_scanned_value,
 4900|      4|                "Invalid encoding in scanned string_view");
 4901|      4|        }
 4902|       |
 4903|    174|        return SCN_MOVE(result);
  ------------------
  |  | 1108|    174|    static_cast<    \
  |  | 1109|    174|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4904|    178|    }
 4905|    178|}
_ZZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEEENKUlvE_clEv:
 4869|    178|    auto src = [&]() {
 4870|    178|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4871|    178|            return make_contiguous_buffer(
 4872|    178|                ranges::subrange{range.begin().base(), result.base()});
 4873|       |        }
 4874|       |        else {
 4875|       |            return make_contiguous_buffer(
 4876|       |                ranges::subrange{range.begin(), result});
 4877|       |        }
 4878|    178|    }();
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5362|    704|    {
 5363|    704|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|    704|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5364|    704|        return read_impl(range, specs, value);
 5365|    704|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5380|    704|    {
 5381|    704|        SCN_CLANG_PUSH
 5382|    704|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5383|       |
 5384|    704|        switch (m_type) {
 5385|    418|            case reader_type::word:
  ------------------
  |  Branch (5385:13): [True: 418, False: 286]
  ------------------
 5386|    418|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5387|       |
 5388|     38|            case reader_type::custom_word:
  ------------------
  |  Branch (5388:13): [True: 38, False: 666]
  ------------------
 5389|     38|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5390|     38|                                                                   value);
 5391|       |
 5392|      0|            case reader_type::character:
  ------------------
  |  Branch (5392:13): [True: 0, False: 704]
  ------------------
 5393|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5394|       |
 5395|    248|            case reader_type::character_set:
  ------------------
  |  Branch (5395:13): [True: 248, False: 456]
  ------------------
 5396|    248|                return character_set_reader_impl<SourceCharT>{}.read(
 5397|    248|                    range, specs, value);
 5398|       |
 5399|      0|#if !SCN_DISABLE_REGEX
 5400|      0|            case reader_type::regex:
  ------------------
  |  Branch (5400:13): [True: 0, False: 704]
  ------------------
 5401|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5402|      0|                    range, specs.charset_string<SourceCharT>(),
 5403|      0|                    specs.regexp_flags, value);
 5404|       |
 5405|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5405:13): [True: 0, False: 704]
  ------------------
 5406|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5407|      0|                    range,
 5408|      0|                    get_unescaped_regex_pattern(
 5409|      0|                        specs.charset_string<SourceCharT>()),
 5410|      0|                    specs.regexp_flags, value);
 5411|      0|#endif
 5412|       |
 5413|      0|            default:
  ------------------
  |  Branch (5413:13): [True: 0, False: 704]
  ------------------
 5414|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5415|    704|                SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5416|    704|        }
 5417|       |
 5418|    704|        SCN_CLANG_POP
 5419|    704|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4920|    982|    {
 4921|    982|        return read_string_view_impl(range, read_until_classic_space(range),
 4922|    982|                                     value);
 4923|    982|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4866|  1.02k|{
 4867|  1.02k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4868|       |
 4869|  1.02k|    auto src = [&]() {
 4870|  1.02k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4871|  1.02k|            return make_contiguous_buffer(
 4872|  1.02k|                ranges::subrange{range.begin().base(), result.base()});
 4873|  1.02k|        }
 4874|  1.02k|        else {
 4875|  1.02k|            return make_contiguous_buffer(
 4876|  1.02k|                ranges::subrange{range.begin(), result});
 4877|  1.02k|        }
 4878|  1.02k|    }();
 4879|  1.02k|    using src_type = decltype(src);
 4880|       |
 4881|  1.02k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4881:9): [Folded - Ignored]
  ------------------
 4882|      0|        return detail::unexpected_scan_error(
 4883|      0|            scan_error::invalid_format_string,
 4884|      0|            "Cannot read a string_view from this source range (not "
 4885|      0|            "contiguous)");
 4886|      0|    }
 4887|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4888|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4889|       |                                             "Cannot read a string_view from "
 4890|       |                                             "this source range (would require "
 4891|       |                                             "transcoding)");
 4892|       |    }
 4893|  1.02k|    else {
 4894|  1.02k|        const auto view = src.view();
 4895|  1.02k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4896|       |
 4897|  1.02k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4897:13): [True: 276, False: 744]
  ------------------
 4898|    276|            return detail::unexpected_scan_error(
 4899|    276|                scan_error::invalid_scanned_value,
 4900|    276|                "Invalid encoding in scanned string_view");
 4901|    276|        }
 4902|       |
 4903|    744|        return SCN_MOVE(result);
  ------------------
  |  | 1108|    744|    static_cast<    \
  |  | 1109|    744|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4904|  1.02k|    }
 4905|  1.02k|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4869|  1.02k|    auto src = [&]() {
 4870|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4871|       |            return make_contiguous_buffer(
 4872|       |                ranges::subrange{range.begin().base(), result.base()});
 4873|       |        }
 4874|  1.02k|        else {
 4875|  1.02k|            return make_contiguous_buffer(
 4876|  1.02k|                ranges::subrange{range.begin(), result});
 4877|  1.02k|        }
 4878|  1.02k|    }();
_ZN3scn2v44impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4954|     38|    {
 4955|     38|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4955:13): [True: 38, False: 0]
  ------------------
 4956|     38|            return read_string_view_impl(
 4957|     38|                range,
 4958|     38|                read_until_code_unit(
 4959|     38|                    range, specs.fill.template get_code_unit<SourceCharT>()),
 4960|     38|                value);
 4961|     38|        }
 4962|      0|        return read_string_view_impl(
 4963|      0|            range,
 4964|      0|            read_until_code_units(
 4965|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4966|      0|            value);
 4967|     38|    }
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5151|    248|    {
 5152|    248|        auto it = read_source_impl(range, {specs});
 5153|    248|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|    248|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 18, False: 230]
  |  |  ------------------
  ------------------
 5154|     18|            return unexpected(it.error());
 5155|     18|        }
 5156|       |
 5157|    230|        return read_string_view_impl(range, *it, value);
 5158|    248|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4866|    230|{
 4867|    230|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4868|       |
 4869|    230|    auto src = [&]() {
 4870|    230|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4871|    230|            return make_contiguous_buffer(
 4872|    230|                ranges::subrange{range.begin().base(), result.base()});
 4873|    230|        }
 4874|    230|        else {
 4875|    230|            return make_contiguous_buffer(
 4876|    230|                ranges::subrange{range.begin(), result});
 4877|    230|        }
 4878|    230|    }();
 4879|    230|    using src_type = decltype(src);
 4880|       |
 4881|    230|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4881:9): [Folded - Ignored]
  ------------------
 4882|      0|        return detail::unexpected_scan_error(
 4883|      0|            scan_error::invalid_format_string,
 4884|      0|            "Cannot read a string_view from this source range (not "
 4885|      0|            "contiguous)");
 4886|      0|    }
 4887|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4888|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4889|       |                                             "Cannot read a string_view from "
 4890|       |                                             "this source range (would require "
 4891|       |                                             "transcoding)");
 4892|       |    }
 4893|    230|    else {
 4894|    230|        const auto view = src.view();
 4895|    230|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4896|       |
 4897|    230|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4897:13): [True: 6, False: 224]
  ------------------
 4898|      6|            return detail::unexpected_scan_error(
 4899|      6|                scan_error::invalid_scanned_value,
 4900|      6|                "Invalid encoding in scanned string_view");
 4901|      6|        }
 4902|       |
 4903|    224|        return SCN_MOVE(result);
  ------------------
  |  | 1108|    224|    static_cast<    \
  |  | 1109|    224|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4904|    230|    }
 4905|    230|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4869|    230|    auto src = [&]() {
 4870|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4871|       |            return make_contiguous_buffer(
 4872|       |                ranges::subrange{range.begin().base(), result.base()});
 4873|       |        }
 4874|    230|        else {
 4875|    230|            return make_contiguous_buffer(
 4876|    230|                ranges::subrange{range.begin(), result});
 4877|    230|        }
 4878|    230|    }();
_ZN3scn2v44impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1781|  8.36k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|  8.36k|                  ranges::sized_range<Range>) {
 1785|  8.36k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1110|  8.36k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|  8.36k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEETnPNS5_9enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISC_Esr6rangesE11sized_rangeISC_EEvE4typeELPv0EEEOSC_:
 1587|  8.36k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|  8.36k|    {
 1589|  8.36k|    }
_ZN3scn2v44impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2219|     86|{
 2220|       |    if constexpr (ranges::contiguous_range<Range> &&
 2221|       |                  ranges::sized_range<Range> &&
 2222|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2223|       |        auto buf = make_contiguous_buffer(range);
 2224|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2225|       |        return ranges::next(range.begin(),
 2226|       |                            ranges::distance(buf.view().begin(), it));
 2227|       |    }
 2228|     86|    else {
 2229|     86|        auto it = range.begin();
 2230|       |
 2231|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2232|       |            auto seg = get_contiguous_beginning(range);
 2233|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2234|       |                seg_it != seg.end()) {
 2235|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2236|       |            }
 2237|       |            ranges::advance(it, seg.size());
 2238|       |        }
 2239|       |
 2240|     86|        return read_until_code_point(
 2241|     86|            ranges::subrange{it, range.end()},
 2242|     86|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2243|     86|    }
 2244|     86|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_:
  742|     86|        : m_fptr([](storage fn,
  743|     86|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     86|              cvref<T> obj = *get<T>(fn);
  745|     86|              if constexpr (std::is_void_v<R>) {
  746|     86|                  obj(static_cast<decltype(args)>(args)...);
  747|     86|              }
  748|     86|              else {
  749|     86|                  return obj(static_cast<decltype(args)>(args)...);
  750|     86|              }
  751|     86|          }),
  752|     86|          m_storage(std::addressof(f))
  753|     86|    {
  754|     86|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESU_Di:
  743|  2.79k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.79k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.79k|              else {
  749|  2.79k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.79k|              }
  751|  2.79k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|  2.79k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.79k|        else if constexpr (std::is_object_v<T>) {
  688|  2.79k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.79k|    }
_ZZN3scn2v44impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2242|  2.79k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vISE_EEvE4typeELPv0EEEPSE_:
  660|     86|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     86|        {
  662|     86|        }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEETnPNS5_9enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSD_:
 1675|     86|    {
 1676|     86|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1110|     86|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|     86|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEvOT_:
 1719|     86|    {
 1720|     86|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|     86|                                          std::basic_string<CharT>>) {
 1730|     86|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  | 1110|     86|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1731|     86|            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|     86|    }
_ZNK3scn2v44impl12float_readerIwE7setsignIdEET_S5_:
 4164|    106|    {
 4165|    106|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4165:13): [True: 0, False: 106]
  ------------------
 4166|      0|            return std::copysign(value, static_cast<T>(-1.0));
 4167|      0|        }
 4168|    106|        return std::copysign(value, static_cast<T>(1.0));
 4169|    106|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5883|  5.68k|{
 5884|  5.68k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  5.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 5.68k]
  |  |  ------------------
  ------------------
 5885|      0|        return unexpected(e);
 5886|      0|    }
 5887|       |
 5888|  5.68k|    if (!is_required) {
  ------------------
  |  Branch (5888:9): [True: 632, False: 5.05k]
  ------------------
 5889|    632|        return range.begin();
 5890|    632|    }
 5891|       |
 5892|  5.05k|    return skip_classic_whitespace(range);
 5893|  5.68k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIiEENS0_13scan_expectedIS9_EERT_:
 5961|    632|    {
 5962|       |        if constexpr (!detail::is_type_disabled<T> &&
 5963|       |                      std::is_same_v<
 5964|       |                          context_type,
 5965|    632|                          basic_contiguous_scan_context<char_type>>) {
 5966|    632|            auto rd = make_reader<T, char_type>();
 5967|    632|            return impl(rd, range, value);
 5968|       |        }
 5969|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5970|       |            auto rd = make_reader<T, char_type>();
 5971|       |            if (!is_segment_contiguous(range)) {
 5972|       |                return impl(rd, range, value);
 5973|       |            }
 5974|       |            auto crange = get_as_contiguous(range);
 5975|       |            SCN_TRY(it, impl(rd, crange, value));
 5976|       |            return ranges::next(range.begin(),
 5977|       |                                ranges::distance(crange.begin(), it));
 5978|       |        }
 5979|       |        else {
 5980|       |            SCN_EXPECT(false);
 5981|       |            SCN_UNREACHABLE;
 5982|       |        }
 5983|    632|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5953|    632|    {
 5954|    632|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 632]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    632|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5955|    632|                        .transform_error(make_eof_scan_error));
 5956|    632|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5957|    632|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3610|    632|    {
 3611|    632|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|    632|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3612|    632|        return read_default_with_base(range, value, 10);
 3613|    632|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIjEENS0_13scan_expectedIS9_EERT_:
 5961|    632|    {
 5962|       |        if constexpr (!detail::is_type_disabled<T> &&
 5963|       |                      std::is_same_v<
 5964|       |                          context_type,
 5965|    632|                          basic_contiguous_scan_context<char_type>>) {
 5966|    632|            auto rd = make_reader<T, char_type>();
 5967|    632|            return impl(rd, range, value);
 5968|       |        }
 5969|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5970|       |            auto rd = make_reader<T, char_type>();
 5971|       |            if (!is_segment_contiguous(range)) {
 5972|       |                return impl(rd, range, value);
 5973|       |            }
 5974|       |            auto crange = get_as_contiguous(range);
 5975|       |            SCN_TRY(it, impl(rd, crange, value));
 5976|       |            return ranges::next(range.begin(),
 5977|       |                                ranges::distance(crange.begin(), it));
 5978|       |        }
 5979|       |        else {
 5980|       |            SCN_EXPECT(false);
 5981|       |            SCN_UNREACHABLE;
 5982|       |        }
 5983|    632|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5953|    632|    {
 5954|    632|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 632]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    632|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5955|    632|                        .transform_error(make_eof_scan_error));
 5956|    632|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5957|    632|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3610|    632|    {
 3611|    632|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|    632|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3612|    632|        return read_default_with_base(range, value, 10);
 3613|    632|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIPvEENS0_13scan_expectedIS9_EERT_:
 5961|    632|    {
 5962|       |        if constexpr (!detail::is_type_disabled<T> &&
 5963|       |                      std::is_same_v<
 5964|       |                          context_type,
 5965|    632|                          basic_contiguous_scan_context<char_type>>) {
 5966|    632|            auto rd = make_reader<T, char_type>();
 5967|    632|            return impl(rd, range, value);
 5968|       |        }
 5969|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5970|       |            auto rd = make_reader<T, char_type>();
 5971|       |            if (!is_segment_contiguous(range)) {
 5972|       |                return impl(rd, range, value);
 5973|       |            }
 5974|       |            auto crange = get_as_contiguous(range);
 5975|       |            SCN_TRY(it, impl(rd, crange, value));
 5976|       |            return ranges::next(range.begin(),
 5977|       |                                ranges::distance(crange.begin(), it));
 5978|       |        }
 5979|       |        else {
 5980|       |            SCN_EXPECT(false);
 5981|       |            SCN_UNREACHABLE;
 5982|       |        }
 5983|    632|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_23reader_impl_for_voidptrIcEESA_PvEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5953|    632|    {
 5954|    632|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 632]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    632|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5955|    632|                        .transform_error(make_eof_scan_error));
 5956|    632|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5957|    632|    }
_ZNK3scn2v44impl23reader_impl_for_voidptrIcE19skip_ws_before_readEv:
 5835|  1.27k|    {
 5836|  1.27k|        return true;
 5837|  1.27k|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5853|    900|    {
 5854|    900|        detail::format_specs specs{};
 5855|    900|        specs.type = detail::presentation_type::int_hex;
 5856|       |
 5857|    900|        std::uintptr_t intvalue{};
 5858|    900|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3958|    900|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    900|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    900|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    900|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 900, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    900|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    900|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    900|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    900|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    900|    }                                                  \
  |  |  |  | 3957|    900|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5859|      0|                                                                intvalue, loc));
 5860|      0|        value = reinterpret_cast<void*>(intvalue);
 5861|      0|        return result;
 5862|    900|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIbEENS0_13scan_expectedIS9_EERT_:
 5961|    632|    {
 5962|       |        if constexpr (!detail::is_type_disabled<T> &&
 5963|       |                      std::is_same_v<
 5964|       |                          context_type,
 5965|    632|                          basic_contiguous_scan_context<char_type>>) {
 5966|    632|            auto rd = make_reader<T, char_type>();
 5967|    632|            return impl(rd, range, value);
 5968|       |        }
 5969|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5970|       |            auto rd = make_reader<T, char_type>();
 5971|       |            if (!is_segment_contiguous(range)) {
 5972|       |                return impl(rd, range, value);
 5973|       |            }
 5974|       |            auto crange = get_as_contiguous(range);
 5975|       |            SCN_TRY(it, impl(rd, crange, value));
 5976|       |            return ranges::next(range.begin(),
 5977|       |                                ranges::distance(crange.begin(), it));
 5978|       |        }
 5979|       |        else {
 5980|       |            SCN_EXPECT(false);
 5981|       |            SCN_UNREACHABLE;
 5982|       |        }
 5983|    632|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_20reader_impl_for_boolIcEESA_bEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5953|    632|    {
 5954|    632|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 632]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    632|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5955|    632|                        .transform_error(make_eof_scan_error));
 5956|    632|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5957|    632|    }
_ZNK3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIcEEcE19skip_ws_before_readEv:
 3182|  1.64k|    {
 3183|  1.64k|        return true;
 3184|  1.64k|    }
_ZNK3scn2v44impl20reader_impl_for_boolIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5590|    632|    {
 5591|    632|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|    632|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5592|       |
 5593|    632|        return bool_reader<CharT>{}.read_classic(range, value);
 5594|    632|    }
_ZN3scn2v44impl16bool_reader_baseC2Ev:
 5434|  1.19k|    constexpr bool_reader_base() = default;
_ZNK3scn2v44impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5440|  1.05k|    {
 5441|  1.05k|        scan_error err{scan_error::invalid_scanned_value,
 5442|  1.05k|                       "Failed to read boolean"};
 5443|       |
 5444|  1.05k|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5444:13): [True: 918, False: 138]
  ------------------
 5445|    918|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5445:22): [True: 0, False: 918]
  ------------------
 5446|      0|                return *r;
 5447|      0|            }
 5448|    918|            else {
 5449|    918|                err = r.error();
 5450|    918|            }
 5451|    918|        }
 5452|       |
 5453|  1.05k|        if (m_options & allow_text) {
  ------------------
  |  Branch (5453:13): [True: 1.03k, False: 22]
  ------------------
 5454|  1.03k|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5454:22): [True: 0, False: 1.03k]
  ------------------
 5455|      0|                return *r;
 5456|      0|            }
 5457|  1.03k|            else {
 5458|  1.03k|                err = r.error();
 5459|  1.03k|            }
 5460|  1.03k|        }
 5461|       |
 5462|  1.05k|        return unexpected(err);
 5463|  1.05k|    }
_ZNK3scn2v44impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5469|    932|    {
 5470|    932|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5470:18): [True: 0, False: 932]
  ------------------
 5471|      0|            value = false;
 5472|      0|            return *r;
 5473|      0|        }
 5474|    932|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5474:18): [True: 0, False: 932]
  ------------------
 5475|      0|            value = true;
 5476|      0|            return *r;
 5477|      0|        }
 5478|       |
 5479|    932|        return detail::unexpected_scan_error(
 5480|    932|            scan_error::invalid_scanned_value,
 5481|    932|            "Failed to read numeric boolean value: No match");
 5482|    932|    }
_ZNK3scn2v44impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5487|  1.03k|    {
 5488|  1.03k|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5488:18): [True: 0, False: 1.03k]
  ------------------
 5489|      0|            value = true;
 5490|      0|            return *r;
 5491|      0|        }
 5492|  1.03k|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5492:18): [True: 0, False: 1.03k]
  ------------------
 5493|      0|            value = false;
 5494|      0|            return *r;
 5495|      0|        }
 5496|       |
 5497|  1.03k|        return detail::unexpected_scan_error(
 5498|  1.03k|            scan_error::invalid_scanned_value,
 5499|  1.03k|            "Failed to read textual boolean value: No match");
 5500|  1.03k|    }
_ZN3scn2v44impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2326|  2.06k|{
 2327|  2.06k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3958|  2.06k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  2.06k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  2.06k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  2.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 100, False: 1.96k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    100|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    100|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    100|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    100|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    100|    }                                                  \
  |  |  |  | 3957|  2.06k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2328|  1.96k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2329|  1.96k|                    .transform_error(make_eof_parse_error));
 2330|       |
 2331|  1.96k|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2332|  1.96k|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2333|  1.96k|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  | 1039|  1.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.96k, False: 0]
  |  |  ------------------
  ------------------
 2334|  1.96k|            return unexpected(parse_error::error);
 2335|  1.96k|        }
 2336|      0|        return it;
 2337|       |    }
 2338|       |    else {
 2339|       |        auto range_it = range.begin();
 2340|       |        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2341|       |            if (SCN_UNLIKELY(*range_it !=
 2342|       |                             static_cast<detail::char_t<Range>>(str[i]))) {
 2343|       |                return unexpected(parse_error::error);
 2344|       |            }
 2345|       |        }
 2346|       |        return it;
 2347|       |    }
 2348|  1.96k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIcEENS0_13scan_expectedIS9_EERT_:
 5961|    632|    {
 5962|       |        if constexpr (!detail::is_type_disabled<T> &&
 5963|       |                      std::is_same_v<
 5964|       |                          context_type,
 5965|    632|                          basic_contiguous_scan_context<char_type>>) {
 5966|    632|            auto rd = make_reader<T, char_type>();
 5967|    632|            return impl(rd, range, value);
 5968|       |        }
 5969|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5970|       |            auto rd = make_reader<T, char_type>();
 5971|       |            if (!is_segment_contiguous(range)) {
 5972|       |                return impl(rd, range, value);
 5973|       |            }
 5974|       |            auto crange = get_as_contiguous(range);
 5975|       |            SCN_TRY(it, impl(rd, crange, value));
 5976|       |            return ranges::next(range.begin(),
 5977|       |                                ranges::distance(crange.begin(), it));
 5978|       |        }
 5979|       |        else {
 5980|       |            SCN_EXPECT(false);
 5981|       |            SCN_UNREACHABLE;
 5982|       |        }
 5983|    632|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_20reader_impl_for_charIcEESA_cEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5953|    632|    {
 5954|    632|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 632]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    632|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5955|    632|                        .transform_error(make_eof_scan_error));
 5956|    632|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5957|    632|    }
_ZN3scn2v44impl12float_readerIcEC2Ev:
 3731|    632|    constexpr float_reader() = default;
_ZN3scn2v44impl17float_reader_baseC2Ev:
 3717|  1.19k|    constexpr float_reader_base() = default;
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIdEENS0_13scan_expectedIS9_EERT_:
 5961|    632|    {
 5962|       |        if constexpr (!detail::is_type_disabled<T> &&
 5963|       |                      std::is_same_v<
 5964|       |                          context_type,
 5965|    632|                          basic_contiguous_scan_context<char_type>>) {
 5966|    632|            auto rd = make_reader<T, char_type>();
 5967|    632|            return impl(rd, range, value);
 5968|       |        }
 5969|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5970|       |            auto rd = make_reader<T, char_type>();
 5971|       |            if (!is_segment_contiguous(range)) {
 5972|       |                return impl(rd, range, value);
 5973|       |            }
 5974|       |            auto crange = get_as_contiguous(range);
 5975|       |            SCN_TRY(it, impl(rd, crange, value));
 5976|       |            return ranges::next(range.begin(),
 5977|       |                                ranges::distance(crange.begin(), it));
 5978|       |        }
 5979|       |        else {
 5980|       |            SCN_EXPECT(false);
 5981|       |            SCN_UNREACHABLE;
 5982|       |        }
 5983|    632|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5953|    632|    {
 5954|    632|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 632]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    632|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5955|    632|                        .transform_error(make_eof_scan_error));
 5956|    632|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5957|    632|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4237|    632|    {
 4238|    632|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|    632|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4239|       |
 4240|    632|        float_reader<CharT> rd{};
 4241|    632|        return read_impl<Range>(
 4242|    632|            range, rd,
 4243|    632|            [](float_reader<CharT>& r, auto&&... args) {
 4244|    632|                return r.read_source(SCN_FWD(args)...);
 4245|    632|            },
 4246|    632|            value);
 4247|    632|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|    632|        : m_fptr([](storage fn,
  743|    632|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    632|              cvref<T> obj = *get<T>(fn);
  745|    632|              if constexpr (std::is_void_v<R>) {
  746|    632|                  obj(static_cast<decltype(args)>(args)...);
  747|    632|              }
  748|    632|              else {
  749|    632|                  return obj(static_cast<decltype(args)>(args)...);
  750|    632|              }
  751|    632|          }),
  752|    632|          m_storage(std::addressof(f))
  753|    632|    {
  754|    632|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|    632|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    632|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    632|              else {
  749|    632|                  return obj(static_cast<decltype(args)>(args)...);
  750|    632|              }
  751|    632|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|    632|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    632|        else if constexpr (std::is_object_v<T>) {
  688|    632|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    632|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4243|    632|            [](float_reader<CharT>& r, auto&&... args) {
 4244|    632|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4245|    632|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|    632|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    632|        {
  662|    632|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 5961|    632|    {
 5962|       |        if constexpr (!detail::is_type_disabled<T> &&
 5963|       |                      std::is_same_v<
 5964|       |                          context_type,
 5965|    632|                          basic_contiguous_scan_context<char_type>>) {
 5966|    632|            auto rd = make_reader<T, char_type>();
 5967|    632|            return impl(rd, range, value);
 5968|       |        }
 5969|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5970|       |            auto rd = make_reader<T, char_type>();
 5971|       |            if (!is_segment_contiguous(range)) {
 5972|       |                return impl(rd, range, value);
 5973|       |            }
 5974|       |            auto crange = get_as_contiguous(range);
 5975|       |            SCN_TRY(it, impl(rd, crange, value));
 5976|       |            return ranges::next(range.begin(),
 5977|       |                                ranges::distance(crange.begin(), it));
 5978|       |        }
 5979|       |        else {
 5980|       |            SCN_EXPECT(false);
 5981|       |            SCN_UNREACHABLE;
 5982|       |        }
 5983|    632|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5953|    632|    {
 5954|    632|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 632]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    632|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5955|    632|                        .transform_error(make_eof_scan_error));
 5956|    632|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5957|    632|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5351|    632|    {
 5352|    632|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|    632|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5353|    632|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5354|    632|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 5961|    632|    {
 5962|       |        if constexpr (!detail::is_type_disabled<T> &&
 5963|       |                      std::is_same_v<
 5964|       |                          context_type,
 5965|    632|                          basic_contiguous_scan_context<char_type>>) {
 5966|    632|            auto rd = make_reader<T, char_type>();
 5967|    632|            return impl(rd, range, value);
 5968|       |        }
 5969|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5970|       |            auto rd = make_reader<T, char_type>();
 5971|       |            if (!is_segment_contiguous(range)) {
 5972|       |                return impl(rd, range, value);
 5973|       |            }
 5974|       |            auto crange = get_as_contiguous(range);
 5975|       |            SCN_TRY(it, impl(rd, crange, value));
 5976|       |            return ranges::next(range.begin(),
 5977|       |                                ranges::distance(crange.begin(), it));
 5978|       |        }
 5979|       |        else {
 5980|       |            SCN_EXPECT(false);
 5981|       |            SCN_UNREACHABLE;
 5982|       |        }
 5983|    632|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5953|    632|    {
 5954|    632|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 632]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    632|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5955|    632|                        .transform_error(make_eof_scan_error));
 5956|    632|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5957|    632|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5351|    632|    {
 5352|    632|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|    632|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5353|    632|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5354|    632|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIS9_EERT_:
 5961|    632|    {
 5962|       |        if constexpr (!detail::is_type_disabled<T> &&
 5963|       |                      std::is_same_v<
 5964|       |                          context_type,
 5965|    632|                          basic_contiguous_scan_context<char_type>>) {
 5966|    632|            auto rd = make_reader<T, char_type>();
 5967|    632|            return impl(rd, range, value);
 5968|       |        }
 5969|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5970|       |            auto rd = make_reader<T, char_type>();
 5971|       |            if (!is_segment_contiguous(range)) {
 5972|       |                return impl(rd, range, value);
 5973|       |            }
 5974|       |            auto crange = get_as_contiguous(range);
 5975|       |            SCN_TRY(it, impl(rd, crange, value));
 5976|       |            return ranges::next(range.begin(),
 5977|       |                                ranges::distance(crange.begin(), it));
 5978|       |        }
 5979|       |        else {
 5980|       |            SCN_EXPECT(false);
 5981|       |            SCN_UNREACHABLE;
 5982|       |        }
 5983|    632|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5953|    632|    {
 5954|    632|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 632]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    632|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5955|    632|                        .transform_error(make_eof_scan_error));
 5956|    632|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5957|    632|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5351|    632|    {
 5352|    632|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|    632|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5353|    632|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5354|    632|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSL_10locale_refE:
 3017|  62.2k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1108|  62.2k|    static_cast<    \
  |  | 1109|  62.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3018|  62.2k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 3019|  62.2k|          m_current(m_range.begin())
 3020|  62.2k|    {
 3021|  62.2k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE3endEv:
 3029|   198k|    {
 3030|   198k|        return m_range.end();
 3031|   198k|    }
_ZN3scn2v44impl19is_first_char_spaceIcEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1318|  75.6k|{
 1319|       |    // TODO: optimize
 1320|  75.6k|    SCN_EXPECT(!str.empty());
  ------------------
  |  | 1104|  75.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  75.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1321|  75.6k|    auto res = get_next_code_point(str);
 1322|  75.6k|    return {res.iterator, res.value, detail::is_cp_space(res.value)};
 1323|  75.6k|}
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toES7_:
 3044|  79.1k|    {
 3045|  79.1k|        SCN_EXPECT(it <= end());
  ------------------
  |  | 1104|  79.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  79.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3046|  79.1k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3047|  79.1k|            if (it == nullptr) {
  ------------------
  |  Branch (3047:17): [True: 0, False: 79.1k]
  ------------------
 3048|      0|                it = end();
 3049|      0|            }
 3050|  79.1k|        }
 3051|  79.1k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1108|  79.1k|    static_cast<    \
  |  | 1109|  79.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3052|  79.1k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5rangeEv:
 3034|  42.7k|    {
 3035|  42.7k|        return ranges::subrange{begin(), end()};
 3036|  42.7k|    }
_ZN3scn2v44impl24read_while_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2248|  8.36k|{
 2249|       |    if constexpr (ranges::contiguous_range<Range> &&
 2250|       |                  ranges::sized_range<Range> &&
 2251|  8.36k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2252|  8.36k|        auto buf = make_contiguous_buffer(range);
 2253|  8.36k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2254|  8.36k|        return ranges::next(range.begin(),
 2255|  8.36k|                            ranges::distance(buf.view().begin(), it));
 2256|       |    }
 2257|       |    else {
 2258|       |        auto it = range.begin();
 2259|       |
 2260|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2261|       |            auto seg = get_contiguous_beginning(range);
 2262|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2263|       |                seg_it != seg.end()) {
 2264|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2265|       |            }
 2266|       |            ranges::advance(it, seg.size());
 2267|       |        }
 2268|       |
 2269|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|       |            return detail::is_cp_space(cp);
 2271|       |        });
 2272|       |    }
 2273|  8.36k|}
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE11impl_prefixINS1_15take_width_viewISA_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_b:
 6125|  6.06k|    {
 6126|  6.06k|        const bool need_skipped_width =
 6127|  6.06k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6127:13): [True: 84, False: 5.98k]
  |  Branch (6127:33): [True: 5.98k, False: 0]
  ------------------
 6128|  6.06k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6129|       |
 6130|       |        // Read prefix
 6131|  6.06k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6131:13): [True: 276, False: 5.79k]
  ------------------
 6132|  6.06k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6132:13): [True: 1.07k, False: 4.71k]
  ------------------
 6133|  1.35k|            return skip_fill(rng, specs.precision, specs.fill,
 6134|  1.35k|                             need_skipped_width);
 6135|  1.35k|        }
 6136|  4.71k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6136:13): [True: 4.51k, False: 202]
  |  Branch (6136:56): [True: 2.49k, False: 2.01k]
  ------------------
 6137|       |            // Default alignment:
 6138|       |            // Skip preceding whitespace, if required by the reader
 6139|  2.49k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6139:17): [True: 2.49k, False: 0]
  ------------------
 6140|  2.49k|                auto max_width_view = take_width(rng, specs.precision);
 6141|  2.49k|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3958|  2.49k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  2.49k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  2.49k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  2.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 238, False: 2.25k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    238|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    238|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    238|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    238|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    238|    }                                                  \
  |  |  |  | 3957|  2.49k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  2.25k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|  2.25k|                                  .transform_error(make_eof_scan_error));
 6143|  2.25k|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6144|  2.49k|            }
 6145|      0|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|                            make_eof_scan_error));
 6147|       |
 6148|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6148:17): [True: 0, False: 0]
  ------------------
 6149|      0|                return result_type{
 6150|      0|                    it,
 6151|      0|                    calculate_text_width(make_contiguous_buffer(
 6152|      0|                                             ranges::subrange{rng.begin(), it})
 6153|      0|                                             .view())};
 6154|      0|            }
 6155|      0|            return result_type{it, 0};
 6156|      0|        }
 6157|       |
 6158|  2.22k|        return result_type{rng.begin(), 0};
 6159|  4.71k|    }
_ZN3scn2v44impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEb:
 6040|  1.35k|{
 6041|  1.35k|    using char_type = detail::char_t<Range>;
 6042|  1.35k|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6043|       |
 6044|  1.35k|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (6044:9): [True: 580, False: 774]
  ------------------
 6045|    580|        const auto fill_ch = fill.template get_code_unit<char_type>();
 6046|    580|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 6047|       |
 6048|    580|        if (max_width == 0) {
  ------------------
  |  Branch (6048:13): [True: 0, False: 580]
  ------------------
 6049|      0|            auto it = read_while_code_unit(range, pred);
 6050|       |
 6051|      0|            if (want_skipped_width) {
  ------------------
  |  Branch (6051:17): [True: 0, False: 0]
  ------------------
 6052|      0|                auto prefix_width =
 6053|      0|                    static_cast<std::ptrdiff_t>(
 6054|      0|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 6055|      0|                    ranges::distance(range.begin(), it);
 6056|      0|                return result_type{it, prefix_width};
 6057|      0|            }
 6058|      0|            return result_type{it, 0};
 6059|      0|        }
 6060|       |
 6061|    580|        auto max_width_view = take_width(range, max_width);
 6062|    580|        auto w_it = read_while_code_unit(max_width_view, pred);
 6063|       |
 6064|    580|        if (want_skipped_width) {
  ------------------
  |  Branch (6064:13): [True: 580, False: 0]
  ------------------
 6065|    580|            return result_type{w_it.base(), max_width - w_it.count()};
 6066|    580|        }
 6067|      0|        return result_type{w_it.base(), 0};
 6068|    580|    }
 6069|       |
 6070|    774|    const auto fill_chars = fill.template get_code_units<char_type>();
 6071|    774|    if (max_width == 0) {
  ------------------
  |  Branch (6071:9): [True: 0, False: 774]
  ------------------
 6072|      0|        auto it = read_while_code_units(range, fill_chars);
 6073|       |
 6074|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (6074:13): [True: 0, False: 0]
  ------------------
 6075|      0|            auto prefix_width =
 6076|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 6077|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 6078|      0|            return result_type{it, prefix_width};
 6079|      0|        }
 6080|      0|        return result_type{it, 0};
 6081|      0|    }
 6082|       |
 6083|    774|    auto max_width_view = take_width(range, max_width);
 6084|    774|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 6085|       |
 6086|    774|    if (want_skipped_width) {
  ------------------
  |  Branch (6086:9): [True: 774, False: 0]
  ------------------
 6087|    774|        return result_type{w_it.base(), max_width - w_it.count()};
 6088|    774|    }
 6089|      0|    return result_type{w_it.base(), 0};
 6090|    774|}
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_ST_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSJ_:
  742|    580|        : m_fptr([](storage fn,
  743|    580|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    580|              cvref<T> obj = *get<T>(fn);
  745|    580|              if constexpr (std::is_void_v<R>) {
  746|    580|                  obj(static_cast<decltype(args)>(args)...);
  747|    580|              }
  748|    580|              else {
  749|    580|                  return obj(static_cast<decltype(args)>(args)...);
  750|    580|              }
  751|    580|          }),
  752|    580|          m_storage(std::addressof(f))
  753|    580|    {
  754|    580|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_ST_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES15_c:
  743|    796|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    796|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    796|              else {
  749|    796|                  return obj(static_cast<decltype(args)>(args)...);
  750|    796|              }
  751|    796|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESI_lRKNS0_6detail9fill_typeEbEUlcE_EEDaNS3_7storageE:
  683|    796|    {
  684|    796|        if constexpr (std::is_const_v<T>) {
  685|    796|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    796|    }
_ZZN3scn2v44impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEbENKUlcE_clEc:
 6046|    796|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|    580|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    580|        {
  667|    580|        }
_ZN3scn2v44impl20read_while_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2107|    580|{
 2108|    580|    return read_until_code_unit(range, std::not_fn(pred));
 2109|    580|}
_ZN3scn2v44impl20read_until_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|    580|{
 2075|       |    if constexpr (ranges::common_range<Range>) {
 2076|       |        return std::find_if(range.begin(), range.end(), pred);
 2077|       |    }
 2078|    580|    else {
 2079|    580|        auto first = range.begin();
 2080|    832|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2080:16): [True: 796, False: 36]
  ------------------
 2081|    796|            if (pred(*first)) {
  ------------------
  |  Branch (2081:17): [True: 544, False: 252]
  ------------------
 2082|    544|                return first;
 2083|    544|            }
 2084|    796|        }
 2085|     36|        return first;
 2086|    580|    }
 2087|    580|}
_ZNK3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE5beginEv:
 2952|  6.33k|    {
 2953|  6.33k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2954|  6.33k|                                      m_count};
 2955|  6.33k|    }
_ZNK3scn2v44impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEvE3getEv:
 2857|  26.8k|    {
 2858|  26.8k|        return view;
 2859|  26.8k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEC2ES6_SF_l:
 2513|  6.33k|        : m_current(x), m_end(s), m_count(n)
 2514|  6.33k|    {
 2515|  6.33k|    }
_ZN3scn2v44implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2923|  9.20k|        {
 2924|  9.20k|            return !(y == x);
 2925|  9.20k|        }
_ZN3scn2v44impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2910|  19.6k|        {
 2911|  19.6k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2911:21): [True: 1.15k, False: 18.5k]
  |  Branch (2911:39): [True: 690, False: 468]
  ------------------
 2912|  19.6k|                   y.base() == x.m_end ||
  ------------------
  |  Branch (2912:20): [True: 34, False: 18.9k]
  ------------------
 2913|  19.6k|                   (y.count() == 1 && y.multibyte_left() == 0 &&
  ------------------
  |  Branch (2913:21): [True: 2.24k, False: 16.7k]
  |  Branch (2913:39): [True: 1.60k, False: 640]
  ------------------
 2914|  18.9k|                    y.is_current_double_wide());
  ------------------
  |  Branch (2914:21): [True: 0, False: 1.60k]
  ------------------
 2915|  19.6k|        }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE14multibyte_leftEv:
 2553|  3.40k|    {
 2554|  3.40k|        return m_multibyte_left;
 2555|  3.40k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE22is_current_double_wideEv:
 2558|  1.60k|    {
 2559|  1.60k|        assert(count() != 0 || multibyte_left() != 0);
 2560|  1.60k|        return _get_width_at_current_cp_start(_get_cp_length_at_current()) == 2;
 2561|  1.60k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE30_get_width_at_current_cp_startEl:
 2785|  10.7k|    {
 2786|  10.7k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  | 1039|  10.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 10.7k]
  |  |  ------------------
  ------------------
 2787|      0|            return 0;
 2788|      0|        }
 2789|       |
 2790|  10.7k|        if (cplen == 1) {
  ------------------
  |  Branch (2790:13): [True: 5.42k, False: 5.34k]
  ------------------
 2791|  5.42k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  | 1104|  5.42k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  5.42k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2792|  5.42k|            auto cp = static_cast<char32_t>(*m_current);
 2793|  5.42k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2794|  5.42k|        }
 2795|       |
 2796|  5.34k|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2797|  5.34k|                                           cplen);
 2798|  5.34k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|  5.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 5.34k]
  |  |  ------------------
  ------------------
 2799|      0|            return 0;
 2800|      0|        }
 2801|       |
 2802|  5.34k|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2803|  5.34k|        return static_cast<difference_type>(
 2804|  5.34k|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2805|  5.34k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE25_get_cp_length_at_currentEv:
 2779|  10.7k|    {
 2780|  10.7k|        return static_cast<difference_type>(
 2781|  10.7k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2782|  10.7k|    }
_ZNK3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE3endEv:
 2958|  14.1k|    {
 2959|  14.1k|        return sentinel<true>{m_base.get().end()};
 2960|  14.1k|    }
_ZN3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE8sentinelILb1EEC2ENSA_8sentinelILb1EEE:
 2891|  14.1k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  | 1108|  14.1k|    static_cast<    \
  |  | 1109|  14.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEdeEv:
 2564|  12.9k|    {
 2565|  12.9k|        return *m_current;
 2566|  12.9k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEppEv:
 2573|  17.3k|    {
 2574|  17.3k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  | 1104|  17.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  17.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2575|  17.3k|        _increment_current();
 2576|  17.3k|        return *this;
 2577|  17.3k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE18_increment_currentEv:
 2808|  17.3k|    {
 2809|  17.3k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2809:13): [True: 9.16k, False: 8.18k]
  ------------------
 2810|  9.16k|            auto cplen = _get_cp_length_at_current();
 2811|  9.16k|            m_multibyte_left = cplen - 1;
 2812|  9.16k|            m_count -= _get_width_at_current_cp_start(cplen);
 2813|  9.16k|        }
 2814|  8.18k|        else {
 2815|  8.18k|            --m_multibyte_left;
 2816|  8.18k|        }
 2817|       |
 2818|  17.3k|        ++m_current;
 2819|  17.3k|    }
_ZN3scn2v44impl21read_while_code_unitsINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENSt3__117basic_string_viewIcNSD_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEESJ_RKT0_:
 2168|    774|{
 2169|    774|    static_assert(ranges::common_range<CodeUnits>);
 2170|       |
 2171|    774|    auto it = range.begin();
 2172|  1.35k|    while (it != range.end()) {
  ------------------
  |  Branch (2172:12): [True: 1.32k, False: 34]
  ------------------
 2173|  1.32k|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2174|  1.32k|                                           needle.size());
 2175|  1.32k|        if (!r) {
  ------------------
  |  Branch (2175:13): [True: 144, False: 1.17k]
  ------------------
 2176|    144|            return it;
 2177|    144|        }
 2178|  1.17k|        static_assert(
 2179|  1.17k|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2180|  1.17k|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2180:13): [True: 596, False: 582]
  ------------------
 2181|    596|            return it;
 2182|    596|        }
 2183|    582|        it = *r;
 2184|    582|    }
 2185|     34|    SCN_ENSURE(it == range.end());
  ------------------
  |  | 1105|     34|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|     34|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2186|     34|    return it;
 2187|     34|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_l:
 1955|  1.32k|{
 1956|  1.32k|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1104|  1.32k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.32k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|  1.32k|    else {
 1967|  1.32k|        auto it = range.begin();
 1968|  1.32k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 0, False: 1.32k]
  ------------------
 1969|      0|            return ranges::next(it, count);
 1970|      0|        }
 1971|       |
 1972|  5.16k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 3.98k, False: 1.17k]
  ------------------
 1973|  3.98k|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 144, False: 3.83k]
  ------------------
 1974|    144|                return unexpected(eof_error::eof);
 1975|    144|            }
 1976|  3.98k|        }
 1977|       |
 1978|  1.17k|        return it;
 1979|  1.32k|    }
 1980|  1.32k|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEmT_:
 1095|  1.32k|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|       |                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|       |        else {
 1107|       |            if (r.begin().stores_parent()) {
 1108|       |                return static_cast<size_t>(
 1109|       |                    r.begin().parent()->chars_available() -
 1110|       |                    r.begin().position());
 1111|       |            }
 1112|       |            return r.begin().contiguous_segment().size();
 1113|       |        }
 1114|       |    }
 1115|  1.32k|    else {
 1116|  1.32k|        return 0;
 1117|  1.32k|    }
 1118|  1.32k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSM_NS1_20incrementable_traitsISM_E15difference_typeE:
  267|  2.49k|    {
  268|  2.49k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  2.49k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISM_EEvE4typeERSM_NS1_20incrementable_traitsISM_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|  2.49k|    {
  161|  2.49k|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|  2.49k|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 0, False: 2.49k]
  ------------------
  164|      0|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 0, False: 0]
  ------------------
  165|      0|                ++i;
  166|      0|            }
  167|      0|        }
  168|  2.49k|        else {
  169|  2.49k|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 2.49k]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|  2.49k|        }
  173|  2.49k|    }
_ZN3scn2v44impl27counted_width_iterator_implneINS2_22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEDTeqclscPFRKS7_vELDnEEclscPFRKT_vELDnEEERKNS4_IS7_SG_EERKNS4_ISL_T0_EE:
 2669|  10.7k|    {
 2670|  10.7k|        return !(a == b);
 2671|  10.7k|    }
_ZN3scn2v44impl27counted_width_iterator_impleqINS2_22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEDTeqclscPFRKS7_vELDnEEclscPFRKT_vELDnEEERKNS4_IS7_SG_EERKNS4_ISL_T0_EE:
 2661|  10.7k|    {
 2662|  10.7k|        return a.m_current == b.m_current;
 2663|  10.7k|    }
_ZNK3scn2v44impl14_take_width_fnclINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEEDTtlS4_fp_fp0_EERKT_l:
 2974|  3.84k|    {
 2975|  3.84k|        return take_width_view{r, n};
 2976|  3.84k|    }
_ZN3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEEC2ERKSA_l:
 2942|  3.84k|        : m_base(base), m_count(count)
 2943|  3.84k|    {
 2944|  3.84k|    }
_ZN3scn2v44impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEvEC2ERKSB_:
 2854|  3.84k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v44impl23skip_classic_whitespaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3097|  2.49k|{
 3098|  2.49k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3098:9): [True: 2.49k, False: 0]
  ------------------
 3099|  2.49k|        auto it = read_while_classic_space(range);
 3100|  2.49k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3101|  2.49k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  2.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 238, False: 2.25k]
  |  |  ------------------
  ------------------
 3102|    238|            return unexpected(e);
 3103|    238|        }
 3104|       |
 3105|  2.25k|        return it;
 3106|  2.49k|    }
 3107|       |
 3108|      0|    return read_while_classic_space(range);
 3109|  2.49k|}
_ZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2248|  2.49k|{
 2249|       |    if constexpr (ranges::contiguous_range<Range> &&
 2250|       |                  ranges::sized_range<Range> &&
 2251|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2252|       |        auto buf = make_contiguous_buffer(range);
 2253|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2254|       |        return ranges::next(range.begin(),
 2255|       |                            ranges::distance(buf.view().begin(), it));
 2256|       |    }
 2257|  2.49k|    else {
 2258|  2.49k|        auto it = range.begin();
 2259|       |
 2260|  2.49k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2261|  2.49k|            auto seg = get_contiguous_beginning(range);
 2262|  2.49k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2263|  2.49k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2263:17): [True: 0, False: 2.49k]
  ------------------
 2264|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2265|      0|            }
 2266|  2.49k|            ranges::advance(it, seg.size());
 2267|  2.49k|        }
 2268|       |
 2269|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|  2.49k|            return detail::is_cp_space(cp);
 2271|  2.49k|        });
 2272|  2.49k|    }
 2273|  2.49k|}
_ZN3scn2v44impl24get_contiguous_beginningINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDaT_:
 1039|  2.49k|{
 1040|       |    if constexpr (ranges::contiguous_range<Range> &&
 1041|       |                  ranges::sized_range<Range>) {
 1042|       |        return r;
 1043|       |    }
 1044|       |    else if constexpr (std::is_same_v<
 1045|       |                           ranges::const_iterator_t<Range>,
 1046|       |                           typename detail::basic_scan_buffer<
 1047|       |                               detail::char_t<Range>>::forward_iterator>) {
 1048|       |        if constexpr (ranges::common_range<Range>) {
 1049|       |            auto seg = r.begin().contiguous_segment();
 1050|       |            auto dist =
 1051|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1052|       |            return seg.substr(0, std::min(seg.size(), dist));
 1053|       |        }
 1054|       |        else {
 1055|       |            return r.begin().contiguous_segment();
 1056|       |        }
 1057|       |    }
 1058|  2.49k|    else {
 1059|  2.49k|        return std::basic_string_view<detail::char_t<Range>>{};
 1060|  2.49k|    }
 1061|  2.49k|}
_ZN3scn2v44impl21read_while_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2213|  2.49k|{
 2214|  2.49k|    return read_until_code_point(range, std::not_fn(pred));
 2215|  2.49k|}
_ZN3scn2v44impl21read_until_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2192|  2.49k|{
 2193|  2.49k|    auto it = range.begin();
 2194|  4.19k|    while (it != range.end()) {
  ------------------
  |  Branch (2194:12): [True: 3.95k, False: 238]
  ------------------
 2195|  3.95k|        const auto val =
 2196|  3.95k|            read_code_point_into(ranges::subrange{it, range.end()});
 2197|  3.95k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1038|  3.95k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 3.95k, False: 0]
  |  |  ------------------
  ------------------
 2198|  3.95k|            const auto cp = detail::decode_code_point_exhaustive(
 2199|  3.95k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2200|  3.95k|            if (pred(cp)) {
  ------------------
  |  Branch (2200:17): [True: 2.25k, False: 1.70k]
  ------------------
 2201|  2.25k|                return it;
 2202|  2.25k|            }
 2203|  3.95k|        }
 2204|  1.70k|        it = val.iterator;
 2205|  1.70k|    }
 2206|       |
 2207|    238|    return it;
 2208|  2.49k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISP_EEE4typeEEESP_:
 1997|  3.95k|{
 1998|  3.95k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1104|  3.95k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.95k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  3.95k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  3.95k|    auto it = range.begin();
 2002|  3.95k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  3.95k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1039|  3.95k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 3.95k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  3.95k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 2.92k, False: 1.03k]
  ------------------
 2011|  2.92k|        ++it;
 2012|  2.92k|        return {it, string_type(1, *range.begin())};
 2013|  2.92k|    }
 2014|       |
 2015|  1.03k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|  1.03k|    return {it, string_type{range.begin(), it}};
 2017|  3.95k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEbT_:
  944|  6.44k|{
  945|  6.44k|    return is_range_eof(r.begin(), r.end());
  946|  6.44k|}
_ZN3scn2v44impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS8_ISE_E8sentinelILb1EEEEEbT_T0_:
  928|  6.44k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  6.44k|    {
  938|  6.44k|        return begin == end;
  939|  6.44k|    }
  940|  6.44k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSC_ISG_E8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SP_EENS1_20incrementable_traitsISP_E15difference_typeEE4typeERSP_ST_SQ_:
  282|  1.03k|    {
  283|  1.03k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  1.03k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSC_ISG_E8sentinelILb1EEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SP_EENS1_20incrementable_traitsISP_E15difference_typeEE4typeERSP_ST_SQ_:
  226|  1.03k|    {
  227|  1.03k|        constexpr iter_difference_t<I> zero{0};
  228|  1.03k|        iter_difference_t<I> counter{0};
  229|       |
  230|  1.03k|        if (n < zero) {
  ------------------
  |  Branch (230:13): [True: 0, False: 1.03k]
  ------------------
  231|      0|            do {
  232|      0|                --i;
  233|      0|                --counter;  // Yes, really
  234|      0|            } while (++n < zero && i != bound);
  ------------------
  |  Branch (234:22): [True: 0, False: 0]
  |  Branch (234:36): [True: 0, False: 0]
  ------------------
  235|      0|        }
  236|  1.03k|        else {
  237|  3.85k|            while (n-- > zero && i != bound) {
  ------------------
  |  Branch (237:20): [True: 2.82k, False: 1.03k]
  |  Branch (237:34): [True: 2.82k, False: 0]
  ------------------
  238|  2.82k|                ++i;
  239|  2.82k|                ++counter;
  240|  2.82k|            }
  241|  1.03k|        }
  242|       |
  243|  1.03k|        return counter;
  244|  1.03k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEcE8is_validEv:
 1988|  3.95k|    {
 1989|  3.95k|        return !codepoint.empty();
 1990|  3.95k|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  2.49k|        : m_fptr([](storage fn,
  743|  2.49k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.49k|              cvref<T> obj = *get<T>(fn);
  745|  2.49k|              if constexpr (std::is_void_v<R>) {
  746|  2.49k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.49k|              }
  748|  2.49k|              else {
  749|  2.49k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.49k|              }
  751|  2.49k|          }),
  752|  2.49k|          m_storage(std::addressof(f))
  753|  2.49k|    {
  754|  2.49k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  3.95k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.95k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.95k|              else {
  749|  3.95k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.95k|              }
  751|  3.95k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS6_INS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  3.95k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  3.95k|        else if constexpr (std::is_object_v<T>) {
  688|  3.95k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.95k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2269|  3.95k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|  3.95k|            return detail::is_cp_space(cp);
 2271|  3.95k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  2.49k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.49k|        {
  662|  2.49k|        }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_9eof_errorET_:
  950|  2.49k|{
  951|  2.49k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1039|  2.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 238, False: 2.25k]
  |  |  ------------------
  ------------------
  952|    238|        return eof_error::eof;
  953|    238|    }
  954|  2.25k|    return eof_error::good;
  955|  2.49k|}
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE4baseEv:
 2545|  22.5k|    {
 2546|  22.5k|        return m_current;
 2547|  22.5k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE5countEv:
 2549|  43.8k|    {
 2550|  43.8k|        return m_count;
 2551|  43.8k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6125|  7.38k|    {
 6126|  7.38k|        const bool need_skipped_width =
 6127|  7.38k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6127:13): [True: 2.01k, False: 5.37k]
  |  Branch (6127:33): [True: 0, False: 5.37k]
  ------------------
 6128|  7.38k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6129|       |
 6130|       |        // Read prefix
 6131|  7.38k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6131:13): [True: 110, False: 7.27k]
  ------------------
 6132|  7.38k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6132:13): [True: 400, False: 6.87k]
  ------------------
 6133|    510|            return skip_fill(rng, specs.precision, specs.fill,
 6134|    510|                             need_skipped_width);
 6135|    510|        }
 6136|  6.87k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6136:13): [True: 6.13k, False: 740]
  |  Branch (6136:56): [True: 1.73k, False: 4.39k]
  ------------------
 6137|       |            // Default alignment:
 6138|       |            // Skip preceding whitespace, if required by the reader
 6139|  1.73k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6139:17): [True: 0, False: 1.73k]
  ------------------
 6140|      0|                auto max_width_view = take_width(rng, specs.precision);
 6141|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|                                  .transform_error(make_eof_scan_error));
 6143|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6144|      0|            }
 6145|  3.47k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3958|  1.73k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.73k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.73k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 1.73k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  1.73k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|  3.47k|                            make_eof_scan_error));
 6147|       |
 6148|  3.47k|            if (need_skipped_width) {
  ------------------
  |  Branch (6148:17): [True: 1.11k, False: 628]
  ------------------
 6149|  1.11k|                return result_type{
 6150|  1.11k|                    it,
 6151|  1.11k|                    calculate_text_width(make_contiguous_buffer(
 6152|  1.11k|                                             ranges::subrange{rng.begin(), it})
 6153|  1.11k|                                             .view())};
 6154|  1.11k|            }
 6155|    628|            return result_type{it, 0};
 6156|  3.47k|        }
 6157|       |
 6158|  5.13k|        return result_type{rng.begin(), 0};
 6159|  6.87k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6167|  4.55k|    {
 6168|  4.55k|        const bool need_skipped_width =
 6169|  4.55k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6169:13): [True: 494, False: 4.06k]
  |  Branch (6169:33): [True: 1.50k, False: 2.56k]
  ------------------
 6170|  4.55k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6171|       |
 6172|  4.55k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6172:13): [True: 298, False: 4.25k]
  ------------------
 6173|  4.55k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6173:13): [True: 530, False: 3.72k]
  ------------------
 6174|    828|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6174:17): [True: 418, False: 410]
  ------------------
 6175|    828|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6175:17): [True: 154, False: 264]
  ------------------
 6176|    154|                return result_type{rng.begin(), 0};
 6177|    154|            }
 6178|    674|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6179|    674|                             specs.fill, need_skipped_width);
 6180|    828|        }
 6181|  3.72k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6181:13): [True: 3.58k, False: 148]
  ------------------
 6182|  3.72k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6182:13): [True: 3.25k, False: 330]
  ------------------
 6183|  3.72k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6183:15): [True: 220, False: 3.03k]
  |  Branch (6183:35): [True: 166, False: 54]
  ------------------
 6184|  3.25k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6184:15): [True: 756, False: 2.32k]
  ------------------
 6185|  3.08k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6185:15): [True: 632, False: 124]
  ------------------
 6186|    798|            if (specs.precision != 0) {
  ------------------
  |  Branch (6186:17): [True: 632, False: 166]
  ------------------
 6187|    632|                const auto initial_width =
 6188|    632|                    specs.precision - prefix_width - value_width;
 6189|    632|                auto max_width_view = take_width(rng, initial_width);
 6190|    632|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3958|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 632]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    632|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6191|    632|                                  .transform_error(make_eof_scan_error));
 6192|    632|                return result_type{w_it.base(), initial_width - w_it.count()};
 6193|    632|            }
 6194|    332|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3958|    166|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    166|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    166|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    166|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 166]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    166|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    166|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|    332|                            make_eof_scan_error));
 6196|       |
 6197|    332|            if (need_skipped_width) {
  ------------------
  |  Branch (6197:17): [True: 166, False: 0]
  ------------------
 6198|    166|                return result_type{
 6199|    166|                    it,
 6200|    166|                    calculate_text_width(make_contiguous_buffer(
 6201|    166|                                             ranges::subrange{rng.begin(), it})
 6202|    166|                                             .view())};
 6203|    166|            }
 6204|      0|            return result_type{it, 0};
 6205|    332|        }
 6206|  2.93k|        return result_type{rng.begin(), 0};
 6207|  3.72k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIiEENS0_13scan_expectedIS9_EERT_:
 6277|  3.16k|    {
 6278|       |        if constexpr (!detail::is_type_disabled<T> &&
 6279|       |                      std::is_same_v<
 6280|       |                          context_type,
 6281|  3.16k|                          basic_contiguous_scan_context<char_type>>) {
 6282|  3.16k|            auto rd = make_reader<T, char_type>();
 6283|  3.16k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  3.16k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  3.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 2.44k, False: 720]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  2.44k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  2.44k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  2.44k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  2.44k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  2.44k|    }
  ------------------
 6284|    720|            return impl(rd, range, value);
 6285|       |        }
 6286|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6287|       |            auto rd = make_reader<T, char_type>();
 6288|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6289|       |
 6290|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6291|       |                specs.width != 0) {
 6292|       |                return impl(rd, range, value);
 6293|       |            }
 6294|       |
 6295|       |            auto crange = get_as_contiguous(range);
 6296|       |            SCN_TRY(it, impl(rd, crange, value));
 6297|       |            return ranges::next(range.begin(),
 6298|       |                                ranges::distance(crange.begin(), it));
 6299|       |        }
 6300|       |        else {
 6301|       |            SCN_EXPECT(false);
 6302|       |            SCN_UNREACHABLE;
 6303|       |        }
 6304|  3.16k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6212|    720|    {
 6213|    720|        const bool need_skipped_width =
 6214|    720|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6214:13): [True: 210, False: 510]
  |  Branch (6214:33): [True: 418, False: 92]
  ------------------
 6215|       |
 6216|       |        // Read prefix
 6217|    720|        auto it = rng.begin();
 6218|    720|        std::ptrdiff_t prefix_width = 0;
 6219|    720|        if (specs.precision != 0) {
  ------------------
  |  Branch (6219:13): [True: 422, False: 298]
  ------------------
 6220|    422|            auto max_width_view = take_width(rng, specs.precision);
 6221|    422|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|    422|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    422|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    422|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    422|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 32, False: 390]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     32|    }                                                  \
  |  |  |  | 3957|    422|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    390|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6222|    390|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6223|    390|            it = prefix_result.first.base();
 6224|    390|            prefix_width = prefix_result.second;
 6225|    390|        }
 6226|    298|        else {
 6227|    298|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|    298|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    298|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    298|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    298|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 298]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    298|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    298|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6228|    298|            std::tie(it, prefix_width) = prefix_result;
 6229|    298|        }
 6230|    688|        auto prefix_end_it = it;
 6231|       |
 6232|       |        // Read value
 6233|    688|        std::ptrdiff_t value_width = 0;
 6234|    688|        if (specs.precision != 0) {
  ------------------
  |  Branch (6234:13): [True: 390, False: 298]
  ------------------
 6235|    390|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6235:17): [True: 6, False: 384]
  ------------------
 6236|      6|                return detail::unexpected_scan_error(
 6237|      6|                    scan_error::invalid_fill,
 6238|      6|                    "Too many fill characters before value, "
 6239|      6|                    "precision exceeded before reading value");
 6240|      6|            }
 6241|       |
 6242|    384|            const auto initial_width = specs.precision - prefix_width;
 6243|    384|            auto max_width_view =
 6244|    384|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6245|    384|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|    384|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    384|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    384|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    384|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 384, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    384|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    384|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    384|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    384|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    384|    }                                                  \
  |  |  |  | 3957|    384|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            it = w_it.base();
 6247|      0|            value_width = initial_width - w_it.count();
 6248|      0|        }
 6249|    298|        else {
 6250|    298|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|    298|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|    298|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|    298|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 298, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|    298|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|    298|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    298|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    298|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|    298|    }                                                  \
  |  | 3957|    298|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|    298|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6251|      0|                                             specs, value, loc));
 6252|       |
 6253|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                value_width = calculate_text_width(
 6255|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6256|      0|                        .view());
 6257|      0|            }
 6258|      0|        }
 6259|       |
 6260|       |        // Read postfix
 6261|      0|        std::ptrdiff_t postfix_width = 0;
 6262|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6262:13): [True: 0, False: 0]
  ------------------
 6263|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6265|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6266|      0|                                 value_width));
 6267|      0|            std::tie(it, postfix_width) = postfix_result;
 6268|      0|        }
 6269|       |
 6270|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6271|      0|            specs, prefix_width, value_width, postfix_width));
 6272|      0|        return it;
 6273|      0|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIjEENS0_13scan_expectedIS9_EERT_:
 6277|  3.16k|    {
 6278|       |        if constexpr (!detail::is_type_disabled<T> &&
 6279|       |                      std::is_same_v<
 6280|       |                          context_type,
 6281|  3.16k|                          basic_contiguous_scan_context<char_type>>) {
 6282|  3.16k|            auto rd = make_reader<T, char_type>();
 6283|  3.16k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  3.16k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  3.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 2.44k, False: 720]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  2.44k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  2.44k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  2.44k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  2.44k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  2.44k|    }
  ------------------
 6284|    720|            return impl(rd, range, value);
 6285|       |        }
 6286|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6287|       |            auto rd = make_reader<T, char_type>();
 6288|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6289|       |
 6290|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6291|       |                specs.width != 0) {
 6292|       |                return impl(rd, range, value);
 6293|       |            }
 6294|       |
 6295|       |            auto crange = get_as_contiguous(range);
 6296|       |            SCN_TRY(it, impl(rd, crange, value));
 6297|       |            return ranges::next(range.begin(),
 6298|       |                                ranges::distance(crange.begin(), it));
 6299|       |        }
 6300|       |        else {
 6301|       |            SCN_EXPECT(false);
 6302|       |            SCN_UNREACHABLE;
 6303|       |        }
 6304|  3.16k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6212|    720|    {
 6213|    720|        const bool need_skipped_width =
 6214|    720|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6214:13): [True: 210, False: 510]
  |  Branch (6214:33): [True: 418, False: 92]
  ------------------
 6215|       |
 6216|       |        // Read prefix
 6217|    720|        auto it = rng.begin();
 6218|    720|        std::ptrdiff_t prefix_width = 0;
 6219|    720|        if (specs.precision != 0) {
  ------------------
  |  Branch (6219:13): [True: 422, False: 298]
  ------------------
 6220|    422|            auto max_width_view = take_width(rng, specs.precision);
 6221|    422|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|    422|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    422|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    422|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    422|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 32, False: 390]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     32|    }                                                  \
  |  |  |  | 3957|    422|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    390|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6222|    390|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6223|    390|            it = prefix_result.first.base();
 6224|    390|            prefix_width = prefix_result.second;
 6225|    390|        }
 6226|    298|        else {
 6227|    298|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|    298|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    298|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    298|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    298|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 298]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    298|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    298|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6228|    298|            std::tie(it, prefix_width) = prefix_result;
 6229|    298|        }
 6230|    688|        auto prefix_end_it = it;
 6231|       |
 6232|       |        // Read value
 6233|    688|        std::ptrdiff_t value_width = 0;
 6234|    688|        if (specs.precision != 0) {
  ------------------
  |  Branch (6234:13): [True: 390, False: 298]
  ------------------
 6235|    390|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6235:17): [True: 6, False: 384]
  ------------------
 6236|      6|                return detail::unexpected_scan_error(
 6237|      6|                    scan_error::invalid_fill,
 6238|      6|                    "Too many fill characters before value, "
 6239|      6|                    "precision exceeded before reading value");
 6240|      6|            }
 6241|       |
 6242|    384|            const auto initial_width = specs.precision - prefix_width;
 6243|    384|            auto max_width_view =
 6244|    384|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6245|    384|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|    384|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    384|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    384|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    384|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 384, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    384|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    384|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    384|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    384|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    384|    }                                                  \
  |  |  |  | 3957|    384|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            it = w_it.base();
 6247|      0|            value_width = initial_width - w_it.count();
 6248|      0|        }
 6249|    298|        else {
 6250|    298|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|    298|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|    298|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|    298|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 298, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|    298|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|    298|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    298|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    298|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|    298|    }                                                  \
  |  | 3957|    298|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|    298|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6251|      0|                                             specs, value, loc));
 6252|       |
 6253|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                value_width = calculate_text_width(
 6255|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6256|      0|                        .view());
 6257|      0|            }
 6258|      0|        }
 6259|       |
 6260|       |        // Read postfix
 6261|      0|        std::ptrdiff_t postfix_width = 0;
 6262|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6262:13): [True: 0, False: 0]
  ------------------
 6263|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6265|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6266|      0|                                 value_width));
 6267|      0|            std::tie(it, postfix_width) = postfix_result;
 6268|      0|        }
 6269|       |
 6270|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6271|      0|            specs, prefix_width, value_width, postfix_width));
 6272|      0|        return it;
 6273|      0|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIPvEENS0_13scan_expectedIS9_EERT_:
 6277|  3.12k|    {
 6278|       |        if constexpr (!detail::is_type_disabled<T> &&
 6279|       |                      std::is_same_v<
 6280|       |                          context_type,
 6281|  3.12k|                          basic_contiguous_scan_context<char_type>>) {
 6282|  3.12k|            auto rd = make_reader<T, char_type>();
 6283|  3.12k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  3.12k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  3.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 2.47k, False: 642]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  2.47k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  2.47k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  2.47k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  2.47k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  2.47k|    }
  ------------------
 6284|    642|            return impl(rd, range, value);
 6285|       |        }
 6286|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6287|       |            auto rd = make_reader<T, char_type>();
 6288|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6289|       |
 6290|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6291|       |                specs.width != 0) {
 6292|       |                return impl(rd, range, value);
 6293|       |            }
 6294|       |
 6295|       |            auto crange = get_as_contiguous(range);
 6296|       |            SCN_TRY(it, impl(rd, crange, value));
 6297|       |            return ranges::next(range.begin(),
 6298|       |                                ranges::distance(crange.begin(), it));
 6299|       |        }
 6300|       |        else {
 6301|       |            SCN_EXPECT(false);
 6302|       |            SCN_UNREACHABLE;
 6303|       |        }
 6304|  3.12k|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIcE11check_specsERKNS0_6detail12format_specsE:
 5840|  3.12k|    {
 5841|  3.12k|        reader_error_handler eh{};
 5842|  3.12k|        detail::check_pointer_type_specs(specs, eh);
 5843|  3.12k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1039|  3.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.47k, False: 642]
  |  |  ------------------
  ------------------
 5844|  2.47k|            return detail::unexpected_scan_error(
 5845|  2.47k|                scan_error::invalid_format_string, eh.m_msg);
 5846|  2.47k|        }
 5847|    642|        return {};
 5848|  3.12k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_23reader_impl_for_voidptrIcEESA_PvEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6212|    642|    {
 6213|    642|        const bool need_skipped_width =
 6214|    642|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6214:13): [True: 202, False: 440]
  |  Branch (6214:33): [True: 372, False: 68]
  ------------------
 6215|       |
 6216|       |        // Read prefix
 6217|    642|        auto it = rng.begin();
 6218|    642|        std::ptrdiff_t prefix_width = 0;
 6219|    642|        if (specs.precision != 0) {
  ------------------
  |  Branch (6219:13): [True: 374, False: 268]
  ------------------
 6220|    374|            auto max_width_view = take_width(rng, specs.precision);
 6221|    374|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|    374|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    374|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    374|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    374|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 24, False: 350]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     24|    }                                                  \
  |  |  |  | 3957|    374|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    350|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6222|    350|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6223|    350|            it = prefix_result.first.base();
 6224|    350|            prefix_width = prefix_result.second;
 6225|    350|        }
 6226|    268|        else {
 6227|    268|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|    268|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    268|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    268|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    268|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 268]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    268|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    268|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6228|    268|            std::tie(it, prefix_width) = prefix_result;
 6229|    268|        }
 6230|    618|        auto prefix_end_it = it;
 6231|       |
 6232|       |        // Read value
 6233|    618|        std::ptrdiff_t value_width = 0;
 6234|    618|        if (specs.precision != 0) {
  ------------------
  |  Branch (6234:13): [True: 350, False: 268]
  ------------------
 6235|    350|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6235:17): [True: 4, False: 346]
  ------------------
 6236|      4|                return detail::unexpected_scan_error(
 6237|      4|                    scan_error::invalid_fill,
 6238|      4|                    "Too many fill characters before value, "
 6239|      4|                    "precision exceeded before reading value");
 6240|      4|            }
 6241|       |
 6242|    346|            const auto initial_width = specs.precision - prefix_width;
 6243|    346|            auto max_width_view =
 6244|    346|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6245|    346|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|    346|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    346|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    346|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    346|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 346, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    346|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    346|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    346|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    346|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    346|    }                                                  \
  |  |  |  | 3957|    346|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            it = w_it.base();
 6247|      0|            value_width = initial_width - w_it.count();
 6248|      0|        }
 6249|    268|        else {
 6250|    268|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|    268|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|    268|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|    268|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 268, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|    268|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|    268|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    268|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    268|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|    268|    }                                                  \
  |  | 3957|    268|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|    268|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6251|      0|                                             specs, value, loc));
 6252|       |
 6253|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                value_width = calculate_text_width(
 6255|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6256|      0|                        .view());
 6257|      0|            }
 6258|      0|        }
 6259|       |
 6260|       |        // Read postfix
 6261|      0|        std::ptrdiff_t postfix_width = 0;
 6262|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6262:13): [True: 0, False: 0]
  ------------------
 6263|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6265|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6266|      0|                                 value_width));
 6267|      0|            std::tie(it, postfix_width) = postfix_result;
 6268|      0|        }
 6269|       |
 6270|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6271|      0|            specs, prefix_width, value_width, postfix_width));
 6272|      0|        return it;
 6273|      0|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5870|    346|    {
 5871|    346|        SCN_UNUSED(specs);
  ------------------
  |  | 1089|    346|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5872|    346|        return read_default(range, value, loc);
 5873|    346|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5853|    346|    {
 5854|    346|        detail::format_specs specs{};
 5855|    346|        specs.type = detail::presentation_type::int_hex;
 5856|       |
 5857|    346|        std::uintptr_t intvalue{};
 5858|    346|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3958|    346|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    346|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    346|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    346|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 346, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    346|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    346|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    346|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    346|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    346|    }                                                  \
  |  |  |  | 3957|    346|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5859|      0|                                                                intvalue, loc));
 5860|      0|        value = reinterpret_cast<void*>(intvalue);
 5861|      0|        return result;
 5862|    346|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5870|    268|    {
 5871|    268|        SCN_UNUSED(specs);
  ------------------
  |  | 1089|    268|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5872|    268|        return read_default(range, value, loc);
 5873|    268|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIbEENS0_13scan_expectedIS9_EERT_:
 6277|  3.16k|    {
 6278|       |        if constexpr (!detail::is_type_disabled<T> &&
 6279|       |                      std::is_same_v<
 6280|       |                          context_type,
 6281|  3.16k|                          basic_contiguous_scan_context<char_type>>) {
 6282|  3.16k|            auto rd = make_reader<T, char_type>();
 6283|  3.16k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  3.16k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  3.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 2.15k, False: 1.01k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  2.15k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  2.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  2.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  2.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  2.15k|    }
  ------------------
 6284|  1.01k|            return impl(rd, range, value);
 6285|       |        }
 6286|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6287|       |            auto rd = make_reader<T, char_type>();
 6288|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6289|       |
 6290|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6291|       |                specs.width != 0) {
 6292|       |                return impl(rd, range, value);
 6293|       |            }
 6294|       |
 6295|       |            auto crange = get_as_contiguous(range);
 6296|       |            SCN_TRY(it, impl(rd, crange, value));
 6297|       |            return ranges::next(range.begin(),
 6298|       |                                ranges::distance(crange.begin(), it));
 6299|       |        }
 6300|       |        else {
 6301|       |            SCN_EXPECT(false);
 6302|       |            SCN_UNREACHABLE;
 6303|       |        }
 6304|  3.16k|    }
_ZN3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3187|  3.16k|    {
 3188|  3.16k|        reader_error_handler eh{};
 3189|  3.16k|        get_derived().check_specs_impl(specs, eh);
 3190|  3.16k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1039|  3.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.15k, False: 1.01k]
  |  |  ------------------
  ------------------
 3191|  2.15k|            return detail::unexpected_scan_error(
 3192|  2.15k|                scan_error::invalid_format_string, eh.m_msg);
 3193|  2.15k|        }
 3194|  1.01k|        return {};
 3195|  3.16k|    }
_ZN3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11get_derivedEv:
 3199|  3.16k|    {
 3200|  3.16k|        return static_cast<Derived&>(*this);
 3201|  3.16k|    }
_ZN3scn2v44impl20reader_impl_for_boolIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5583|  3.16k|    {
 5584|  3.16k|        detail::check_bool_type_specs(specs, eh);
 5585|  3.16k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_20reader_impl_for_boolIcEESA_bEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6212|  1.01k|    {
 6213|  1.01k|        const bool need_skipped_width =
 6214|  1.01k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6214:13): [True: 220, False: 794]
  |  Branch (6214:33): [True: 562, False: 232]
  ------------------
 6215|       |
 6216|       |        // Read prefix
 6217|  1.01k|        auto it = rng.begin();
 6218|  1.01k|        std::ptrdiff_t prefix_width = 0;
 6219|  1.01k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6219:13): [True: 568, False: 446]
  ------------------
 6220|    568|            auto max_width_view = take_width(rng, specs.precision);
 6221|    568|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|    568|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    568|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    568|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    568|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 36, False: 532]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     36|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     36|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     36|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     36|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     36|    }                                                  \
  |  |  |  | 3957|    568|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    532|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6222|    532|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6223|    532|            it = prefix_result.first.base();
 6224|    532|            prefix_width = prefix_result.second;
 6225|    532|        }
 6226|    446|        else {
 6227|    446|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|    446|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    446|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    446|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    446|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 446]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    446|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    446|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6228|    446|            std::tie(it, prefix_width) = prefix_result;
 6229|    446|        }
 6230|    978|        auto prefix_end_it = it;
 6231|       |
 6232|       |        // Read value
 6233|    978|        std::ptrdiff_t value_width = 0;
 6234|    978|        if (specs.precision != 0) {
  ------------------
  |  Branch (6234:13): [True: 532, False: 446]
  ------------------
 6235|    532|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6235:17): [True: 10, False: 522]
  ------------------
 6236|     10|                return detail::unexpected_scan_error(
 6237|     10|                    scan_error::invalid_fill,
 6238|     10|                    "Too many fill characters before value, "
 6239|     10|                    "precision exceeded before reading value");
 6240|     10|            }
 6241|       |
 6242|    522|            const auto initial_width = specs.precision - prefix_width;
 6243|    522|            auto max_width_view =
 6244|    522|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6245|    522|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|    522|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    522|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    522|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    522|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 522, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    522|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    522|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    522|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    522|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    522|    }                                                  \
  |  |  |  | 3957|    522|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            it = w_it.base();
 6247|      0|            value_width = initial_width - w_it.count();
 6248|      0|        }
 6249|    446|        else {
 6250|    446|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|    446|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|    446|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|    446|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 446, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|    446|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|    446|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    446|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    446|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|    446|    }                                                  \
  |  | 3957|    446|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|    446|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6251|      0|                                             specs, value, loc));
 6252|       |
 6253|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                value_width = calculate_text_width(
 6255|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6256|      0|                        .view());
 6257|      0|            }
 6258|      0|        }
 6259|       |
 6260|       |        // Read postfix
 6261|      0|        std::ptrdiff_t postfix_width = 0;
 6262|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6262:13): [True: 0, False: 0]
  ------------------
 6263|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6265|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6266|      0|                                 value_width));
 6267|      0|            std::tie(it, postfix_width) = postfix_result;
 6268|      0|        }
 6269|       |
 6270|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6271|      0|            specs, prefix_width, value_width, postfix_width));
 6272|      0|        return it;
 6273|      0|    }
_ZNK3scn2v44impl20reader_impl_for_boolIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5602|    522|    {
 5603|    522|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5604|       |
 5605|    522|#if !SCN_DISABLE_LOCALE
 5606|    522|        if (specs.localized) {
  ------------------
  |  Branch (5606:13): [True: 20, False: 502]
  ------------------
 5607|     20|            return rd.read_localized(range, loc, value);
 5608|     20|        }
 5609|    502|#endif
 5610|       |
 5611|    502|        return rd.read_classic(range, value);
 5612|    522|    }
_ZN3scn2v44impl20reader_impl_for_boolIcE11get_optionsERKNS0_6detail12format_specsE:
 5615|    968|    {
 5616|    968|        SCN_GCC_COMPAT_PUSH
 5617|    968|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5618|       |
 5619|    968|        switch (specs.type) {
 5620|    280|            case detail::presentation_type::string:
  ------------------
  |  Branch (5620:13): [True: 280, False: 688]
  ------------------
 5621|    280|                return bool_reader_base::allow_text;
 5622|       |
 5623|     14|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5623:13): [True: 14, False: 954]
  ------------------
 5624|     26|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5624:13): [True: 12, False: 956]
  ------------------
 5625|     32|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5625:13): [True: 6, False: 962]
  ------------------
 5626|     42|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5626:13): [True: 10, False: 958]
  ------------------
 5627|     58|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5627:13): [True: 16, False: 952]
  ------------------
 5628|     64|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5628:13): [True: 6, False: 962]
  ------------------
 5629|     64|                return bool_reader_base::allow_numeric;
 5630|       |
 5631|    624|            default:
  ------------------
  |  Branch (5631:13): [True: 624, False: 344]
  ------------------
 5632|    624|                return bool_reader_base::allow_text |
 5633|    624|                       bool_reader_base::allow_numeric;
 5634|    968|        }
 5635|       |
 5636|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5637|    968|    }
_ZNK3scn2v44impl11bool_readerIcE14read_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refERb:
 5513|     20|    {
 5514|     20|        scan_error err{scan_error::invalid_scanned_value,
 5515|     20|                       "Failed to read boolean"};
 5516|       |
 5517|     20|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5517:13): [True: 16, False: 4]
  ------------------
 5518|     16|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5518:22): [True: 0, False: 16]
  ------------------
 5519|      0|                return *r;
 5520|      0|            }
 5521|     16|            else {
 5522|     16|                err = r.error();
 5523|     16|            }
 5524|     16|        }
 5525|       |
 5526|     20|        if (m_options & allow_text) {
  ------------------
  |  Branch (5526:13): [True: 16, False: 4]
  ------------------
 5527|     16|            auto stdloc = loc.get<std::locale>();
 5528|     16|            const auto& numpunct =
 5529|     16|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5530|     16|            const auto truename = numpunct.truename();
 5531|     16|            const auto falsename = numpunct.falsename();
 5532|       |
 5533|     16|            if (auto r =
  ------------------
  |  Branch (5533:22): [True: 0, False: 16]
  ------------------
 5534|     16|                    read_textual_custom(range, value, truename, falsename)) {
 5535|      0|                return *r;
 5536|      0|            }
 5537|     16|            else {
 5538|     16|                err = r.error();
 5539|     16|            }
 5540|     16|        }
 5541|       |
 5542|     20|        return unexpected(err);
 5543|     20|    }
_ZNK3scn2v44impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5469|    388|    {
 5470|    388|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5470:18): [True: 0, False: 388]
  ------------------
 5471|      0|            value = false;
 5472|      0|            return *r;
 5473|      0|        }
 5474|    388|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5474:18): [True: 0, False: 388]
  ------------------
 5475|      0|            value = true;
 5476|      0|            return *r;
 5477|      0|        }
 5478|       |
 5479|    388|        return detail::unexpected_scan_error(
 5480|    388|            scan_error::invalid_scanned_value,
 5481|    388|            "Failed to read numeric boolean value: No match");
 5482|    388|    }
_ZN3scn2v44impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2278|    776|{
 2279|    776|    auto it = read_code_unit(range);
 2280|    776|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|    776|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 776]
  |  |  ------------------
  ------------------
 2281|      0|        return unexpected(make_eof_parse_error(it.error()));
 2282|      0|    }
 2283|       |
 2284|    776|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  | 1039|    776|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 776, False: 0]
  |  |  ------------------
  ------------------
 2285|    776|                     static_cast<detail::char_t<Range>>(ch))) {
 2286|    776|        return unexpected(parse_error::error);
 2287|    776|    }
 2288|       |
 2289|      0|    return *it;
 2290|    776|}
_ZNK3scn2v44impl11bool_readerIcE19read_textual_customINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RbNSF_17basic_string_viewIcNSF_11char_traitsIcEEEESR_:
 5553|     16|    {
 5554|     16|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5555|     16|        const auto shorter = std::pair{
 5556|     16|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5556:13): [True: 16, False: 0]
  ------------------
 5557|     16|        const auto longer = std::pair{
 5558|     16|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5558:13): [True: 0, False: 16]
  ------------------
 5559|       |
 5560|     16|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5560:18): [True: 0, False: 16]
  ------------------
 5561|      0|            value = shorter.second;
 5562|      0|            return *r;
 5563|      0|        }
 5564|     16|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5564:18): [True: 0, False: 16]
  ------------------
 5565|      0|            value = longer.second;
 5566|      0|            return *r;
 5567|      0|        }
 5568|       |
 5569|     16|        return detail::unexpected_scan_error(
 5570|     16|            scan_error::invalid_scanned_value,
 5571|     16|            "Failed to read textual boolean: No match");
 5572|     16|    }
_ZN3scn2v44impl20read_matching_stringINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewINDTcl4implISF_EEE4typeENSD_11char_traitsISN_EEEE:
 2311|     32|{
 2312|     32|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3958|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 18, False: 14]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     18|    }                                                  \
  |  |  |  | 3957|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     14|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2313|     14|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2314|     14|                    .transform_error(make_eof_parse_error));
 2315|       |
 2316|     14|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2317|     14|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  | 1039|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 14, False: 0]
  |  |  ------------------
  ------------------
 2318|     14|        return unexpected(parse_error::error);
 2319|     14|    }
 2320|      0|    return it;
 2321|     14|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1955|    980|{
 1956|    980|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1104|    980|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    980|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|    980|    else {
 1967|    980|        auto it = range.begin();
 1968|    980|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 0, False: 980]
  ------------------
 1969|      0|            return ranges::next(it, count);
 1970|      0|        }
 1971|       |
 1972|  4.91k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 4.12k, False: 790]
  ------------------
 1973|  4.12k|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 190, False: 3.93k]
  ------------------
 1974|    190|                return unexpected(eof_error::eof);
 1975|    190|            }
 1976|  4.12k|        }
 1977|       |
 1978|    790|        return it;
 1979|    980|    }
 1980|    980|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEmT_:
 1095|    980|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|       |                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|       |        else {
 1107|       |            if (r.begin().stores_parent()) {
 1108|       |                return static_cast<size_t>(
 1109|       |                    r.begin().parent()->chars_available() -
 1110|       |                    r.begin().position());
 1111|       |            }
 1112|       |            return r.begin().contiguous_segment().size();
 1113|       |        }
 1114|       |    }
 1115|    980|    else {
 1116|    980|        return 0;
 1117|    980|    }
 1118|    980|}
_ZNK3scn2v44impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5440|    502|    {
 5441|    502|        scan_error err{scan_error::invalid_scanned_value,
 5442|    502|                       "Failed to read boolean"};
 5443|       |
 5444|    502|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5444:13): [True: 372, False: 130]
  ------------------
 5445|    372|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5445:22): [True: 0, False: 372]
  ------------------
 5446|      0|                return *r;
 5447|      0|            }
 5448|    372|            else {
 5449|    372|                err = r.error();
 5450|    372|            }
 5451|    372|        }
 5452|       |
 5453|    502|        if (m_options & allow_text) {
  ------------------
  |  Branch (5453:13): [True: 474, False: 28]
  ------------------
 5454|    474|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5454:22): [True: 0, False: 474]
  ------------------
 5455|      0|                return *r;
 5456|      0|            }
 5457|    474|            else {
 5458|    474|                err = r.error();
 5459|    474|            }
 5460|    474|        }
 5461|       |
 5462|    502|        return unexpected(err);
 5463|    502|    }
_ZNK3scn2v44impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5487|    474|    {
 5488|    474|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5488:18): [True: 0, False: 474]
  ------------------
 5489|      0|            value = true;
 5490|      0|            return *r;
 5491|      0|        }
 5492|    474|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5492:18): [True: 0, False: 474]
  ------------------
 5493|      0|            value = false;
 5494|      0|            return *r;
 5495|      0|        }
 5496|       |
 5497|    474|        return detail::unexpected_scan_error(
 5498|    474|            scan_error::invalid_scanned_value,
 5499|    474|            "Failed to read textual boolean value: No match");
 5500|    474|    }
_ZN3scn2v44impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2326|    948|{
 2327|    948|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3958|    948|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    948|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    948|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    948|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 172, False: 776]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    172|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    172|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    172|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    172|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    172|    }                                                  \
  |  |  |  | 3957|    948|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    776|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2328|    776|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2329|    776|                    .transform_error(make_eof_parse_error));
 2330|       |
 2331|    776|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2332|    776|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2333|    776|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  | 1039|    776|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 776, False: 0]
  |  |  ------------------
  ------------------
 2334|    776|            return unexpected(parse_error::error);
 2335|    776|        }
 2336|      0|        return it;
 2337|       |    }
 2338|       |    else {
 2339|       |        auto range_it = range.begin();
 2340|       |        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2341|       |            if (SCN_UNLIKELY(*range_it !=
 2342|       |                             static_cast<detail::char_t<Range>>(str[i]))) {
 2343|       |                return unexpected(parse_error::error);
 2344|       |            }
 2345|       |        }
 2346|       |        return it;
 2347|       |    }
 2348|    776|}
_ZNK3scn2v44impl20reader_impl_for_boolIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5602|    446|    {
 5603|    446|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5604|       |
 5605|    446|#if !SCN_DISABLE_LOCALE
 5606|    446|        if (specs.localized) {
  ------------------
  |  Branch (5606:13): [True: 22, False: 424]
  ------------------
 5607|     22|            return rd.read_localized(range, loc, value);
 5608|     22|        }
 5609|    424|#endif
 5610|       |
 5611|    424|        return rd.read_classic(range, value);
 5612|    446|    }
_ZNK3scn2v44impl11bool_readerIcE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5513|     22|    {
 5514|     22|        scan_error err{scan_error::invalid_scanned_value,
 5515|     22|                       "Failed to read boolean"};
 5516|       |
 5517|     22|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5517:13): [True: 14, False: 8]
  ------------------
 5518|     14|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5518:22): [True: 0, False: 14]
  ------------------
 5519|      0|                return *r;
 5520|      0|            }
 5521|     14|            else {
 5522|     14|                err = r.error();
 5523|     14|            }
 5524|     14|        }
 5525|       |
 5526|     22|        if (m_options & allow_text) {
  ------------------
  |  Branch (5526:13): [True: 12, False: 10]
  ------------------
 5527|     12|            auto stdloc = loc.get<std::locale>();
 5528|     12|            const auto& numpunct =
 5529|     12|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5530|     12|            const auto truename = numpunct.truename();
 5531|     12|            const auto falsename = numpunct.falsename();
 5532|       |
 5533|     12|            if (auto r =
  ------------------
  |  Branch (5533:22): [True: 0, False: 12]
  ------------------
 5534|     12|                    read_textual_custom(range, value, truename, falsename)) {
 5535|      0|                return *r;
 5536|      0|            }
 5537|     12|            else {
 5538|     12|                err = r.error();
 5539|     12|            }
 5540|     12|        }
 5541|       |
 5542|     22|        return unexpected(err);
 5543|     22|    }
_ZNK3scn2v44impl11bool_readerIcE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIcNSD_11char_traitsIcEEEESP_:
 5553|     12|    {
 5554|     12|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5555|     12|        const auto shorter = std::pair{
 5556|     12|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5556:13): [True: 12, False: 0]
  ------------------
 5557|     12|        const auto longer = std::pair{
 5558|     12|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5558:13): [True: 0, False: 12]
  ------------------
 5559|       |
 5560|     12|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5560:18): [True: 0, False: 12]
  ------------------
 5561|      0|            value = shorter.second;
 5562|      0|            return *r;
 5563|      0|        }
 5564|     12|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5564:18): [True: 0, False: 12]
  ------------------
 5565|      0|            value = longer.second;
 5566|      0|            return *r;
 5567|      0|        }
 5568|       |
 5569|     12|        return detail::unexpected_scan_error(
 5570|     12|            scan_error::invalid_scanned_value,
 5571|     12|            "Failed to read textual boolean: No match");
 5572|     12|    }
_ZN3scn2v44impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2311|     24|{
 2312|     24|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3958|     24|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|     24|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|     24|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 2, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      2|    }                                                  \
  |  |  |  | 3957|     24|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2313|     22|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2314|     22|                    .transform_error(make_eof_parse_error));
 2315|       |
 2316|     22|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2317|     22|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  | 1039|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 22, False: 0]
  |  |  ------------------
  ------------------
 2318|     22|        return unexpected(parse_error::error);
 2319|     22|    }
 2320|      0|    return it;
 2321|     22|}
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIcEENS0_13scan_expectedIS9_EERT_:
 6277|  3.12k|    {
 6278|       |        if constexpr (!detail::is_type_disabled<T> &&
 6279|       |                      std::is_same_v<
 6280|       |                          context_type,
 6281|  3.12k|                          basic_contiguous_scan_context<char_type>>) {
 6282|  3.12k|            auto rd = make_reader<T, char_type>();
 6283|  3.12k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  3.12k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  3.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 2.42k, False: 696]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  2.42k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  2.42k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  2.42k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  2.42k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  2.42k|    }
  ------------------
 6284|    696|            return impl(rd, range, value);
 6285|       |        }
 6286|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6287|       |            auto rd = make_reader<T, char_type>();
 6288|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6289|       |
 6290|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6291|       |                specs.width != 0) {
 6292|       |                return impl(rd, range, value);
 6293|       |            }
 6294|       |
 6295|       |            auto crange = get_as_contiguous(range);
 6296|       |            SCN_TRY(it, impl(rd, crange, value));
 6297|       |            return ranges::next(range.begin(),
 6298|       |                                ranges::distance(crange.begin(), it));
 6299|       |        }
 6300|       |        else {
 6301|       |            SCN_EXPECT(false);
 6302|       |            SCN_UNREACHABLE;
 6303|       |        }
 6304|  3.12k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_20reader_impl_for_charIcEESA_cEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6212|    696|    {
 6213|    696|        const bool need_skipped_width =
 6214|    696|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6214:13): [True: 206, False: 490]
  |  Branch (6214:33): [True: 406, False: 84]
  ------------------
 6215|       |
 6216|       |        // Read prefix
 6217|    696|        auto it = rng.begin();
 6218|    696|        std::ptrdiff_t prefix_width = 0;
 6219|    696|        if (specs.precision != 0) {
  ------------------
  |  Branch (6219:13): [True: 410, False: 286]
  ------------------
 6220|    410|            auto max_width_view = take_width(rng, specs.precision);
 6221|    410|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|    410|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    410|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    410|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    410|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 410]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    410|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    410|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6222|    410|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6223|    410|            it = prefix_result.first.base();
 6224|    410|            prefix_width = prefix_result.second;
 6225|    410|        }
 6226|    286|        else {
 6227|    286|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|    286|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    286|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    286|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    286|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 286]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    286|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    286|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6228|    286|            std::tie(it, prefix_width) = prefix_result;
 6229|    286|        }
 6230|    696|        auto prefix_end_it = it;
 6231|       |
 6232|       |        // Read value
 6233|    696|        std::ptrdiff_t value_width = 0;
 6234|    696|        if (specs.precision != 0) {
  ------------------
  |  Branch (6234:13): [True: 410, False: 286]
  ------------------
 6235|    410|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6235:17): [True: 6, False: 404]
  ------------------
 6236|      6|                return detail::unexpected_scan_error(
 6237|      6|                    scan_error::invalid_fill,
 6238|      6|                    "Too many fill characters before value, "
 6239|      6|                    "precision exceeded before reading value");
 6240|      6|            }
 6241|       |
 6242|    404|            const auto initial_width = specs.precision - prefix_width;
 6243|    404|            auto max_width_view =
 6244|    404|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6245|    404|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|    404|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    404|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    404|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    404|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 36, False: 368]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     36|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     36|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     36|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     36|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     36|    }                                                  \
  |  |  |  | 3957|    404|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    368|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|    368|            it = w_it.base();
 6247|    368|            value_width = initial_width - w_it.count();
 6248|    368|        }
 6249|    286|        else {
 6250|    286|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|    286|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|    286|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|    286|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 22, False: 264]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|     22|    }                                                  \
  |  | 3957|    286|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|    286|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6251|    264|                                             specs, value, loc));
 6252|       |
 6253|    264|            if (need_skipped_width) {
  ------------------
  |  Branch (6253:17): [True: 198, False: 66]
  ------------------
 6254|    198|                value_width = calculate_text_width(
 6255|    198|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6256|    198|                        .view());
 6257|    198|            }
 6258|    264|        }
 6259|       |
 6260|       |        // Read postfix
 6261|    632|        std::ptrdiff_t postfix_width = 0;
 6262|    632|        if (it != rng.end()) {
  ------------------
  |  Branch (6262:13): [True: 632, False: 0]
  ------------------
 6263|    632|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 632]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    632|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|    632|                    impl_postfix(ranges::subrange{it, rng.end()},
 6265|    632|                                 rd.skip_ws_before_read(), prefix_width,
 6266|    632|                                 value_width));
 6267|    632|            std::tie(it, postfix_width) = postfix_result;
 6268|    632|        }
 6269|       |
 6270|    632|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|    632|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 174, False: 458]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|    174|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|    174|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    174|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    174|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|    174|    }
  ------------------
 6271|    632|            specs, prefix_width, value_width, postfix_width));
 6272|    458|        return it;
 6273|    632|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIdEENS0_13scan_expectedIS9_EERT_:
 6277|  3.16k|    {
 6278|       |        if constexpr (!detail::is_type_disabled<T> &&
 6279|       |                      std::is_same_v<
 6280|       |                          context_type,
 6281|  3.16k|                          basic_contiguous_scan_context<char_type>>) {
 6282|  3.16k|            auto rd = make_reader<T, char_type>();
 6283|  3.16k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  3.16k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  3.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 2.43k, False: 730]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  2.43k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  2.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  2.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  2.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  2.43k|    }
  ------------------
 6284|    730|            return impl(rd, range, value);
 6285|       |        }
 6286|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6287|       |            auto rd = make_reader<T, char_type>();
 6288|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6289|       |
 6290|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6291|       |                specs.width != 0) {
 6292|       |                return impl(rd, range, value);
 6293|       |            }
 6294|       |
 6295|       |            auto crange = get_as_contiguous(range);
 6296|       |            SCN_TRY(it, impl(rd, crange, value));
 6297|       |            return ranges::next(range.begin(),
 6298|       |                                ranges::distance(crange.begin(), it));
 6299|       |        }
 6300|       |        else {
 6301|       |            SCN_EXPECT(false);
 6302|       |            SCN_UNREACHABLE;
 6303|       |        }
 6304|  3.16k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6212|    730|    {
 6213|    730|        const bool need_skipped_width =
 6214|    730|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6214:13): [True: 208, False: 522]
  |  Branch (6214:33): [True: 428, False: 94]
  ------------------
 6215|       |
 6216|       |        // Read prefix
 6217|    730|        auto it = rng.begin();
 6218|    730|        std::ptrdiff_t prefix_width = 0;
 6219|    730|        if (specs.precision != 0) {
  ------------------
  |  Branch (6219:13): [True: 432, False: 298]
  ------------------
 6220|    432|            auto max_width_view = take_width(rng, specs.precision);
 6221|    432|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|    432|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    432|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    432|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    432|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 30, False: 402]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     30|    }                                                  \
  |  |  |  | 3957|    432|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    402|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6222|    402|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6223|    402|            it = prefix_result.first.base();
 6224|    402|            prefix_width = prefix_result.second;
 6225|    402|        }
 6226|    298|        else {
 6227|    298|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|    298|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    298|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    298|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    298|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 298]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    298|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    298|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6228|    298|            std::tie(it, prefix_width) = prefix_result;
 6229|    298|        }
 6230|    700|        auto prefix_end_it = it;
 6231|       |
 6232|       |        // Read value
 6233|    700|        std::ptrdiff_t value_width = 0;
 6234|    700|        if (specs.precision != 0) {
  ------------------
  |  Branch (6234:13): [True: 402, False: 298]
  ------------------
 6235|    402|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6235:17): [True: 8, False: 394]
  ------------------
 6236|      8|                return detail::unexpected_scan_error(
 6237|      8|                    scan_error::invalid_fill,
 6238|      8|                    "Too many fill characters before value, "
 6239|      8|                    "precision exceeded before reading value");
 6240|      8|            }
 6241|       |
 6242|    394|            const auto initial_width = specs.precision - prefix_width;
 6243|    394|            auto max_width_view =
 6244|    394|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6245|    394|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|    394|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    394|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    394|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    394|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 394, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    394|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    394|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    394|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    394|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    394|    }                                                  \
  |  |  |  | 3957|    394|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            it = w_it.base();
 6247|      0|            value_width = initial_width - w_it.count();
 6248|      0|        }
 6249|    298|        else {
 6250|    298|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|    298|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|    298|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|    298|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 298, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|    298|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|    298|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    298|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    298|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|    298|    }                                                  \
  |  | 3957|    298|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|    298|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6251|      0|                                             specs, value, loc));
 6252|       |
 6253|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                value_width = calculate_text_width(
 6255|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6256|      0|                        .view());
 6257|      0|            }
 6258|      0|        }
 6259|       |
 6260|       |        // Read postfix
 6261|      0|        std::ptrdiff_t postfix_width = 0;
 6262|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6262:13): [True: 0, False: 0]
  ------------------
 6263|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6265|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6266|      0|                                 value_width));
 6267|      0|            std::tie(it, postfix_width) = postfix_result;
 6268|      0|        }
 6269|       |
 6270|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6271|      0|            specs, prefix_width, value_width, postfix_width));
 6272|      0|        return it;
 6273|      0|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6277|  3.12k|    {
 6278|       |        if constexpr (!detail::is_type_disabled<T> &&
 6279|       |                      std::is_same_v<
 6280|       |                          context_type,
 6281|  3.12k|                          basic_contiguous_scan_context<char_type>>) {
 6282|  3.12k|            auto rd = make_reader<T, char_type>();
 6283|  3.12k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  3.12k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  3.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 144, False: 2.97k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|    144|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|    144|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    144|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    144|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|    144|    }
  ------------------
 6284|  2.97k|            return impl(rd, range, value);
 6285|       |        }
 6286|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6287|       |            auto rd = make_reader<T, char_type>();
 6288|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6289|       |
 6290|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6291|       |                specs.width != 0) {
 6292|       |                return impl(rd, range, value);
 6293|       |            }
 6294|       |
 6295|       |            auto crange = get_as_contiguous(range);
 6296|       |            SCN_TRY(it, impl(rd, crange, value));
 6297|       |            return ranges::next(range.begin(),
 6298|       |                                ranges::distance(crange.begin(), it));
 6299|       |        }
 6300|       |        else {
 6301|       |            SCN_EXPECT(false);
 6302|       |            SCN_UNREACHABLE;
 6303|       |        }
 6304|  3.12k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6212|  2.97k|    {
 6213|  2.97k|        const bool need_skipped_width =
 6214|  2.97k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6214:13): [True: 280, False: 2.69k]
  |  Branch (6214:33): [True: 1.12k, False: 1.57k]
  ------------------
 6215|       |
 6216|       |        // Read prefix
 6217|  2.97k|        auto it = rng.begin();
 6218|  2.97k|        std::ptrdiff_t prefix_width = 0;
 6219|  2.97k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6219:13): [True: 1.14k, False: 1.83k]
  ------------------
 6220|  1.14k|            auto max_width_view = take_width(rng, specs.precision);
 6221|  1.14k|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|  1.14k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.14k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.14k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 28, False: 1.11k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     28|    }                                                  \
  |  |  |  | 3957|  1.14k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6222|  1.11k|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6223|  1.11k|            it = prefix_result.first.base();
 6224|  1.11k|            prefix_width = prefix_result.second;
 6225|  1.11k|        }
 6226|  1.83k|        else {
 6227|  1.83k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|  1.83k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.83k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.83k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 1.83k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  1.83k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.83k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6228|  1.83k|            std::tie(it, prefix_width) = prefix_result;
 6229|  1.83k|        }
 6230|  2.94k|        auto prefix_end_it = it;
 6231|       |
 6232|       |        // Read value
 6233|  2.94k|        std::ptrdiff_t value_width = 0;
 6234|  2.94k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6234:13): [True: 1.11k, False: 1.83k]
  ------------------
 6235|  1.11k|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6235:17): [True: 10, False: 1.10k]
  ------------------
 6236|     10|                return detail::unexpected_scan_error(
 6237|     10|                    scan_error::invalid_fill,
 6238|     10|                    "Too many fill characters before value, "
 6239|     10|                    "precision exceeded before reading value");
 6240|     10|            }
 6241|       |
 6242|  1.10k|            const auto initial_width = specs.precision - prefix_width;
 6243|  1.10k|            auto max_width_view =
 6244|  1.10k|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6245|  1.10k|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|  1.10k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.10k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.10k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 612, False: 496]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    612|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    612|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    612|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    612|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    612|    }                                                  \
  |  |  |  | 3957|  1.10k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    496|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|    496|            it = w_it.base();
 6247|    496|            value_width = initial_width - w_it.count();
 6248|    496|        }
 6249|  1.83k|        else {
 6250|  1.83k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|  1.83k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|  1.83k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|  1.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 646, False: 1.18k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|    646|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|    646|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    646|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    646|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|    646|    }                                                  \
  |  | 3957|  1.83k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|  1.83k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6251|  1.18k|                                             specs, value, loc));
 6252|       |
 6253|  1.18k|            if (need_skipped_width) {
  ------------------
  |  Branch (6253:17): [True: 226, False: 958]
  ------------------
 6254|    226|                value_width = calculate_text_width(
 6255|    226|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6256|    226|                        .view());
 6257|    226|            }
 6258|  1.18k|        }
 6259|       |
 6260|       |        // Read postfix
 6261|  1.68k|        std::ptrdiff_t postfix_width = 0;
 6262|  1.68k|        if (it != rng.end()) {
  ------------------
  |  Branch (6262:13): [True: 1.30k, False: 372]
  ------------------
 6263|  1.30k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|  1.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 1.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  1.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|  1.30k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6265|  1.30k|                                 rd.skip_ws_before_read(), prefix_width,
 6266|  1.30k|                                 value_width));
 6267|  1.30k|            std::tie(it, postfix_width) = postfix_result;
 6268|  1.30k|        }
 6269|       |
 6270|  1.68k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|  1.68k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  1.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 90, False: 1.59k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|     90|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|     90|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|     90|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|     90|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|     90|    }
  ------------------
 6271|  1.68k|            specs, prefix_width, value_width, postfix_width));
 6272|  1.59k|        return it;
 6273|  1.68k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6277|  3.12k|    {
 6278|       |        if constexpr (!detail::is_type_disabled<T> &&
 6279|       |                      std::is_same_v<
 6280|       |                          context_type,
 6281|  3.12k|                          basic_contiguous_scan_context<char_type>>) {
 6282|  3.12k|            auto rd = make_reader<T, char_type>();
 6283|  3.12k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  3.12k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  3.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 144, False: 2.97k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|    144|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|    144|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    144|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    144|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|    144|    }
  ------------------
 6284|  2.97k|            return impl(rd, range, value);
 6285|       |        }
 6286|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6287|       |            auto rd = make_reader<T, char_type>();
 6288|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6289|       |
 6290|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6291|       |                specs.width != 0) {
 6292|       |                return impl(rd, range, value);
 6293|       |            }
 6294|       |
 6295|       |            auto crange = get_as_contiguous(range);
 6296|       |            SCN_TRY(it, impl(rd, crange, value));
 6297|       |            return ranges::next(range.begin(),
 6298|       |                                ranges::distance(crange.begin(), it));
 6299|       |        }
 6300|       |        else {
 6301|       |            SCN_EXPECT(false);
 6302|       |            SCN_UNREACHABLE;
 6303|       |        }
 6304|  3.12k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6212|  2.97k|    {
 6213|  2.97k|        const bool need_skipped_width =
 6214|  2.97k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6214:13): [True: 280, False: 2.69k]
  |  Branch (6214:33): [True: 1.12k, False: 1.57k]
  ------------------
 6215|       |
 6216|       |        // Read prefix
 6217|  2.97k|        auto it = rng.begin();
 6218|  2.97k|        std::ptrdiff_t prefix_width = 0;
 6219|  2.97k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6219:13): [True: 1.14k, False: 1.83k]
  ------------------
 6220|  1.14k|            auto max_width_view = take_width(rng, specs.precision);
 6221|  1.14k|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|  1.14k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.14k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.14k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 28, False: 1.11k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     28|    }                                                  \
  |  |  |  | 3957|  1.14k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6222|  1.11k|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6223|  1.11k|            it = prefix_result.first.base();
 6224|  1.11k|            prefix_width = prefix_result.second;
 6225|  1.11k|        }
 6226|  1.83k|        else {
 6227|  1.83k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|  1.83k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.83k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.83k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 1.83k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  1.83k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.83k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6228|  1.83k|            std::tie(it, prefix_width) = prefix_result;
 6229|  1.83k|        }
 6230|  2.94k|        auto prefix_end_it = it;
 6231|       |
 6232|       |        // Read value
 6233|  2.94k|        std::ptrdiff_t value_width = 0;
 6234|  2.94k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6234:13): [True: 1.11k, False: 1.83k]
  ------------------
 6235|  1.11k|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6235:17): [True: 10, False: 1.10k]
  ------------------
 6236|     10|                return detail::unexpected_scan_error(
 6237|     10|                    scan_error::invalid_fill,
 6238|     10|                    "Too many fill characters before value, "
 6239|     10|                    "precision exceeded before reading value");
 6240|     10|            }
 6241|       |
 6242|  1.10k|            const auto initial_width = specs.precision - prefix_width;
 6243|  1.10k|            auto max_width_view =
 6244|  1.10k|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6245|  1.10k|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|  1.10k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.10k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.10k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 612, False: 496]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    612|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    612|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    612|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    612|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    612|    }                                                  \
  |  |  |  | 3957|  1.10k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    496|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|    496|            it = w_it.base();
 6247|    496|            value_width = initial_width - w_it.count();
 6248|    496|        }
 6249|  1.83k|        else {
 6250|  1.83k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|  1.83k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|  1.83k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|  1.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 646, False: 1.18k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|    646|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|    646|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    646|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    646|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|    646|    }                                                  \
  |  | 3957|  1.83k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|  1.83k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6251|  1.18k|                                             specs, value, loc));
 6252|       |
 6253|  1.18k|            if (need_skipped_width) {
  ------------------
  |  Branch (6253:17): [True: 226, False: 958]
  ------------------
 6254|    226|                value_width = calculate_text_width(
 6255|    226|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6256|    226|                        .view());
 6257|    226|            }
 6258|  1.18k|        }
 6259|       |
 6260|       |        // Read postfix
 6261|  1.68k|        std::ptrdiff_t postfix_width = 0;
 6262|  1.68k|        if (it != rng.end()) {
  ------------------
  |  Branch (6262:13): [True: 1.30k, False: 372]
  ------------------
 6263|  1.30k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|  1.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 1.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  1.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|  1.30k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6265|  1.30k|                                 rd.skip_ws_before_read(), prefix_width,
 6266|  1.30k|                                 value_width));
 6267|  1.30k|            std::tie(it, postfix_width) = postfix_result;
 6268|  1.30k|        }
 6269|       |
 6270|  1.68k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|  1.68k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  1.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 90, False: 1.59k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|     90|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|     90|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|     90|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|     90|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|     90|    }
  ------------------
 6271|  1.68k|            specs, prefix_width, value_width, postfix_width));
 6272|  1.59k|        return it;
 6273|  1.68k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6277|  3.12k|    {
 6278|       |        if constexpr (!detail::is_type_disabled<T> &&
 6279|       |                      std::is_same_v<
 6280|       |                          context_type,
 6281|  3.12k|                          basic_contiguous_scan_context<char_type>>) {
 6282|  3.12k|            auto rd = make_reader<T, char_type>();
 6283|  3.12k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  3.12k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  3.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 144, False: 2.97k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|    144|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|    144|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    144|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    144|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|    144|    }
  ------------------
 6284|  2.97k|            return impl(rd, range, value);
 6285|       |        }
 6286|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6287|       |            auto rd = make_reader<T, char_type>();
 6288|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6289|       |
 6290|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6291|       |                specs.width != 0) {
 6292|       |                return impl(rd, range, value);
 6293|       |            }
 6294|       |
 6295|       |            auto crange = get_as_contiguous(range);
 6296|       |            SCN_TRY(it, impl(rd, crange, value));
 6297|       |            return ranges::next(range.begin(),
 6298|       |                                ranges::distance(crange.begin(), it));
 6299|       |        }
 6300|       |        else {
 6301|       |            SCN_EXPECT(false);
 6302|       |            SCN_UNREACHABLE;
 6303|       |        }
 6304|  3.12k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6212|  2.97k|    {
 6213|  2.97k|        const bool need_skipped_width =
 6214|  2.97k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6214:13): [True: 280, False: 2.69k]
  |  Branch (6214:33): [True: 1.12k, False: 1.57k]
  ------------------
 6215|       |
 6216|       |        // Read prefix
 6217|  2.97k|        auto it = rng.begin();
 6218|  2.97k|        std::ptrdiff_t prefix_width = 0;
 6219|  2.97k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6219:13): [True: 1.14k, False: 1.83k]
  ------------------
 6220|  1.14k|            auto max_width_view = take_width(rng, specs.precision);
 6221|  1.14k|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|  1.14k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.14k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.14k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 28, False: 1.11k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     28|    }                                                  \
  |  |  |  | 3957|  1.14k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6222|  1.11k|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6223|  1.11k|            it = prefix_result.first.base();
 6224|  1.11k|            prefix_width = prefix_result.second;
 6225|  1.11k|        }
 6226|  1.83k|        else {
 6227|  1.83k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|  1.83k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.83k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.83k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 1.83k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  1.83k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.83k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6228|  1.83k|            std::tie(it, prefix_width) = prefix_result;
 6229|  1.83k|        }
 6230|  2.94k|        auto prefix_end_it = it;
 6231|       |
 6232|       |        // Read value
 6233|  2.94k|        std::ptrdiff_t value_width = 0;
 6234|  2.94k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6234:13): [True: 1.11k, False: 1.83k]
  ------------------
 6235|  1.11k|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6235:17): [True: 10, False: 1.10k]
  ------------------
 6236|     10|                return detail::unexpected_scan_error(
 6237|     10|                    scan_error::invalid_fill,
 6238|     10|                    "Too many fill characters before value, "
 6239|     10|                    "precision exceeded before reading value");
 6240|     10|            }
 6241|       |
 6242|  1.10k|            const auto initial_width = specs.precision - prefix_width;
 6243|  1.10k|            auto max_width_view =
 6244|  1.10k|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6245|  1.10k|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|  1.10k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.10k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.10k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 612, False: 496]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    612|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    612|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    612|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    612|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    612|    }                                                  \
  |  |  |  | 3957|  1.10k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    496|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|    496|            it = w_it.base();
 6247|    496|            value_width = initial_width - w_it.count();
 6248|    496|        }
 6249|  1.83k|        else {
 6250|  1.83k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|  1.83k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|  1.83k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|  1.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 646, False: 1.18k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|    646|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|    646|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    646|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    646|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|    646|    }                                                  \
  |  | 3957|  1.83k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|  1.83k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6251|  1.18k|                                             specs, value, loc));
 6252|       |
 6253|  1.18k|            if (need_skipped_width) {
  ------------------
  |  Branch (6253:17): [True: 226, False: 958]
  ------------------
 6254|    226|                value_width = calculate_text_width(
 6255|    226|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6256|    226|                        .view());
 6257|    226|            }
 6258|  1.18k|        }
 6259|       |
 6260|       |        // Read postfix
 6261|  1.68k|        std::ptrdiff_t postfix_width = 0;
 6262|  1.68k|        if (it != rng.end()) {
  ------------------
  |  Branch (6262:13): [True: 1.30k, False: 372]
  ------------------
 6263|  1.30k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|  1.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 1.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  1.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|  1.30k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6265|  1.30k|                                 rd.skip_ws_before_read(), prefix_width,
 6266|  1.30k|                                 value_width));
 6267|  1.30k|            std::tie(it, postfix_width) = postfix_result;
 6268|  1.30k|        }
 6269|       |
 6270|  1.68k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|  1.68k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  1.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 90, False: 1.59k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|     90|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|     90|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|     90|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|     90|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|     90|    }
  ------------------
 6271|  1.68k|            specs, prefix_width, value_width, postfix_width));
 6272|  1.59k|        return it;
 6273|  1.68k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5883|  5.07k|{
 5884|  5.07k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  5.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 5.07k]
  |  |  ------------------
  ------------------
 5885|      0|        return unexpected(e);
 5886|      0|    }
 5887|       |
 5888|  5.07k|    if (!is_required) {
  ------------------
  |  Branch (5888:9): [True: 564, False: 4.51k]
  ------------------
 5889|    564|        return range.begin();
 5890|    564|    }
 5891|       |
 5892|  4.51k|    return skip_classic_whitespace(range);
 5893|  5.07k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIiEENS0_13scan_expectedIS9_EERT_:
 5961|    564|    {
 5962|       |        if constexpr (!detail::is_type_disabled<T> &&
 5963|       |                      std::is_same_v<
 5964|       |                          context_type,
 5965|    564|                          basic_contiguous_scan_context<char_type>>) {
 5966|    564|            auto rd = make_reader<T, char_type>();
 5967|    564|            return impl(rd, range, value);
 5968|       |        }
 5969|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5970|       |            auto rd = make_reader<T, char_type>();
 5971|       |            if (!is_segment_contiguous(range)) {
 5972|       |                return impl(rd, range, value);
 5973|       |            }
 5974|       |            auto crange = get_as_contiguous(range);
 5975|       |            SCN_TRY(it, impl(rd, crange, value));
 5976|       |            return ranges::next(range.begin(),
 5977|       |                                ranges::distance(crange.begin(), it));
 5978|       |        }
 5979|       |        else {
 5980|       |            SCN_EXPECT(false);
 5981|       |            SCN_UNREACHABLE;
 5982|       |        }
 5983|    564|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5953|    564|    {
 5954|    564|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|    564|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    564|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    564|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    564|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 564]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    564|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    564|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5955|    564|                        .transform_error(make_eof_scan_error));
 5956|    564|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5957|    564|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3610|    564|    {
 3611|    564|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|    564|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3612|    564|        return read_default_with_base(range, value, 10);
 3613|    564|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3574|    564|    {
 3575|    564|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3958|    564|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    564|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    564|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    564|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 564]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    564|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    564|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3576|    564|                                   .transform_error(make_eof_scan_error));
 3577|       |
 3578|       |        if constexpr (!std::is_signed_v<T>) {
 3579|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3580|       |                return detail::unexpected_scan_error(
 3581|       |                    scan_error::invalid_scanned_value,
 3582|       |                    "Unexpected '-' sign when parsing an "
 3583|       |                    "unsigned value");
 3584|       |            }
 3585|       |        }
 3586|       |
 3587|    564|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3587:13): [True: 0, False: 564]
  ------------------
 3588|      0|            value = T{0};
 3589|      0|            return std::next(prefix_result.iterator);
 3590|      0|        }
 3591|       |
 3592|  1.12k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|    564|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    564|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    564|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    564|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 564]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    564|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    564|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3593|  1.12k|                parse_integer_digits_without_thsep(
 3594|  1.12k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3595|  1.12k|                    prefix_result.parsed_base));
 3596|       |
 3597|  1.12k|        auto buf = make_contiguous_buffer(
 3598|  1.12k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3599|  1.12k|        SCN_TRY(result_it,
  ------------------
  |  | 3958|    564|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    564|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    564|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    564|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 564, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    564|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    564|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    564|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    564|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    564|    }                                                  \
  |  |  |  | 3957|    564|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3600|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3601|      0|                                    prefix_result.parsed_base));
 3602|       |
 3603|      0|        return ranges::next(prefix_result.iterator,
 3604|      0|                            ranges::distance(buf.view().begin(), result_it));
 3605|  1.12k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIjEENS0_13scan_expectedIS9_EERT_:
 5961|    564|    {
 5962|       |        if constexpr (!detail::is_type_disabled<T> &&
 5963|       |                      std::is_same_v<
 5964|       |                          context_type,
 5965|    564|                          basic_contiguous_scan_context<char_type>>) {
 5966|    564|            auto rd = make_reader<T, char_type>();
 5967|    564|            return impl(rd, range, value);
 5968|       |        }
 5969|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5970|       |            auto rd = make_reader<T, char_type>();
 5971|       |            if (!is_segment_contiguous(range)) {
 5972|       |                return impl(rd, range, value);
 5973|       |            }
 5974|       |            auto crange = get_as_contiguous(range);
 5975|       |            SCN_TRY(it, impl(rd, crange, value));
 5976|       |            return ranges::next(range.begin(),
 5977|       |                                ranges::distance(crange.begin(), it));
 5978|       |        }
 5979|       |        else {
 5980|       |            SCN_EXPECT(false);
 5981|       |            SCN_UNREACHABLE;
 5982|       |        }
 5983|    564|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5953|    564|    {
 5954|    564|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|    564|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    564|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    564|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    564|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 564]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    564|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    564|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5955|    564|                        .transform_error(make_eof_scan_error));
 5956|    564|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5957|    564|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3610|    564|    {
 3611|    564|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|    564|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3612|    564|        return read_default_with_base(range, value, 10);
 3613|    564|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3574|    564|    {
 3575|    564|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3958|    564|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    564|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    564|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    564|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 564]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    564|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    564|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3576|    564|                                   .transform_error(make_eof_scan_error));
 3577|       |
 3578|    564|        if constexpr (!std::is_signed_v<T>) {
 3579|    564|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3579:17): [True: 0, False: 564]
  ------------------
 3580|      0|                return detail::unexpected_scan_error(
 3581|      0|                    scan_error::invalid_scanned_value,
 3582|      0|                    "Unexpected '-' sign when parsing an "
 3583|      0|                    "unsigned value");
 3584|      0|            }
 3585|    564|        }
 3586|       |
 3587|    564|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3587:13): [True: 0, False: 564]
  ------------------
 3588|      0|            value = T{0};
 3589|      0|            return std::next(prefix_result.iterator);
 3590|      0|        }
 3591|       |
 3592|  1.12k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|    564|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    564|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    564|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    564|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 564]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    564|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    564|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3593|  1.12k|                parse_integer_digits_without_thsep(
 3594|  1.12k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3595|  1.12k|                    prefix_result.parsed_base));
 3596|       |
 3597|  1.12k|        auto buf = make_contiguous_buffer(
 3598|  1.12k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3599|  1.12k|        SCN_TRY(result_it,
  ------------------
  |  | 3958|    564|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    564|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    564|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    564|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 564, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    564|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    564|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    564|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    564|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    564|    }                                                  \
  |  |  |  | 3957|    564|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3600|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3601|      0|                                    prefix_result.parsed_base));
 3602|       |
 3603|      0|        return ranges::next(prefix_result.iterator,
 3604|      0|                            ranges::distance(buf.view().begin(), result_it));
 3605|  1.12k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIPvEENS0_13scan_expectedIS9_EERT_:
 5961|    564|    {
 5962|       |        if constexpr (!detail::is_type_disabled<T> &&
 5963|       |                      std::is_same_v<
 5964|       |                          context_type,
 5965|    564|                          basic_contiguous_scan_context<char_type>>) {
 5966|    564|            auto rd = make_reader<T, char_type>();
 5967|    564|            return impl(rd, range, value);
 5968|       |        }
 5969|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5970|       |            auto rd = make_reader<T, char_type>();
 5971|       |            if (!is_segment_contiguous(range)) {
 5972|       |                return impl(rd, range, value);
 5973|       |            }
 5974|       |            auto crange = get_as_contiguous(range);
 5975|       |            SCN_TRY(it, impl(rd, crange, value));
 5976|       |            return ranges::next(range.begin(),
 5977|       |                                ranges::distance(crange.begin(), it));
 5978|       |        }
 5979|       |        else {
 5980|       |            SCN_EXPECT(false);
 5981|       |            SCN_UNREACHABLE;
 5982|       |        }
 5983|    564|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_23reader_impl_for_voidptrIwEESA_PvEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5953|    564|    {
 5954|    564|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|    564|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    564|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    564|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    564|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 564]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    564|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    564|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5955|    564|                        .transform_error(make_eof_scan_error));
 5956|    564|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5957|    564|    }
_ZNK3scn2v44impl23reader_impl_for_voidptrIwE19skip_ws_before_readEv:
 5835|  1.21k|    {
 5836|  1.21k|        return true;
 5837|  1.21k|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5853|    966|    {
 5854|    966|        detail::format_specs specs{};
 5855|    966|        specs.type = detail::presentation_type::int_hex;
 5856|       |
 5857|    966|        std::uintptr_t intvalue{};
 5858|    966|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3958|    966|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    966|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    966|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    966|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 938, False: 28]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    938|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    938|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    938|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    938|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    938|    }                                                  \
  |  |  |  | 3957|    966|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     28|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5859|     28|                                                                intvalue, loc));
 5860|     28|        value = reinterpret_cast<void*>(intvalue);
 5861|     28|        return result;
 5862|    966|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIbEENS0_13scan_expectedIS9_EERT_:
 5961|    564|    {
 5962|       |        if constexpr (!detail::is_type_disabled<T> &&
 5963|       |                      std::is_same_v<
 5964|       |                          context_type,
 5965|    564|                          basic_contiguous_scan_context<char_type>>) {
 5966|    564|            auto rd = make_reader<T, char_type>();
 5967|    564|            return impl(rd, range, value);
 5968|       |        }
 5969|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5970|       |            auto rd = make_reader<T, char_type>();
 5971|       |            if (!is_segment_contiguous(range)) {
 5972|       |                return impl(rd, range, value);
 5973|       |            }
 5974|       |            auto crange = get_as_contiguous(range);
 5975|       |            SCN_TRY(it, impl(rd, crange, value));
 5976|       |            return ranges::next(range.begin(),
 5977|       |                                ranges::distance(crange.begin(), it));
 5978|       |        }
 5979|       |        else {
 5980|       |            SCN_EXPECT(false);
 5981|       |            SCN_UNREACHABLE;
 5982|       |        }
 5983|    564|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_20reader_impl_for_boolIwEESA_bEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5953|    564|    {
 5954|    564|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|    564|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    564|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    564|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    564|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 564]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    564|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    564|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5955|    564|                        .transform_error(make_eof_scan_error));
 5956|    564|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5957|    564|    }
_ZNK3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIwEEwE19skip_ws_before_readEv:
 3182|  1.50k|    {
 3183|  1.50k|        return true;
 3184|  1.50k|    }
_ZNK3scn2v44impl20reader_impl_for_boolIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5590|    564|    {
 5591|    564|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|    564|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5592|       |
 5593|    564|        return bool_reader<CharT>{}.read_classic(range, value);
 5594|    564|    }
_ZNK3scn2v44impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5440|  1.07k|    {
 5441|  1.07k|        scan_error err{scan_error::invalid_scanned_value,
 5442|  1.07k|                       "Failed to read boolean"};
 5443|       |
 5444|  1.07k|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5444:13): [True: 1.01k, False: 58]
  ------------------
 5445|  1.01k|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5445:22): [True: 38, False: 976]
  ------------------
 5446|     38|                return *r;
 5447|     38|            }
 5448|    976|            else {
 5449|    976|                err = r.error();
 5450|    976|            }
 5451|  1.01k|        }
 5452|       |
 5453|  1.03k|        if (m_options & allow_text) {
  ------------------
  |  Branch (5453:13): [True: 994, False: 40]
  ------------------
 5454|    994|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5454:22): [True: 0, False: 994]
  ------------------
 5455|      0|                return *r;
 5456|      0|            }
 5457|    994|            else {
 5458|    994|                err = r.error();
 5459|    994|            }
 5460|    994|        }
 5461|       |
 5462|  1.03k|        return unexpected(err);
 5463|  1.03k|    }
_ZNK3scn2v44impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5469|  1.04k|    {
 5470|  1.04k|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5470:18): [True: 44, False: 1.00k]
  ------------------
 5471|     44|            value = false;
 5472|     44|            return *r;
 5473|     44|        }
 5474|  1.00k|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5474:18): [True: 0, False: 1.00k]
  ------------------
 5475|      0|            value = true;
 5476|      0|            return *r;
 5477|      0|        }
 5478|       |
 5479|  1.00k|        return detail::unexpected_scan_error(
 5480|  1.00k|            scan_error::invalid_scanned_value,
 5481|  1.00k|            "Failed to read numeric boolean value: No match");
 5482|  1.00k|    }
_ZNK3scn2v44impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5487|    994|    {
 5488|    994|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5488:18): [True: 0, False: 994]
  ------------------
 5489|      0|            value = true;
 5490|      0|            return *r;
 5491|      0|        }
 5492|    994|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5492:18): [True: 0, False: 994]
  ------------------
 5493|      0|            value = false;
 5494|      0|            return *r;
 5495|      0|        }
 5496|       |
 5497|    994|        return detail::unexpected_scan_error(
 5498|    994|            scan_error::invalid_scanned_value,
 5499|    994|            "Failed to read textual boolean value: No match");
 5500|    994|    }
_ZN3scn2v44impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2326|  1.98k|{
 2327|  1.98k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3958|  1.98k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.98k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.98k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 176, False: 1.81k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    176|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    176|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    176|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    176|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    176|    }                                                  \
  |  |  |  | 3957|  1.98k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.81k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2328|  1.81k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2329|  1.81k|                    .transform_error(make_eof_parse_error));
 2330|       |
 2331|       |    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2332|       |        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2333|       |        if (SCN_UNLIKELY(sv.view() != str)) {
 2334|       |            return unexpected(parse_error::error);
 2335|       |        }
 2336|       |        return it;
 2337|       |    }
 2338|  1.81k|    else {
 2339|  1.81k|        auto range_it = range.begin();
 2340|  1.81k|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2340:28): [True: 1.81k, False: 0]
  ------------------
 2341|  1.81k|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  | 1039|  1.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.81k, False: 0]
  |  |  ------------------
  ------------------
 2342|  1.81k|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2343|  1.81k|                return unexpected(parse_error::error);
 2344|  1.81k|            }
 2345|  1.81k|        }
 2346|      0|        return it;
 2347|  1.81k|    }
 2348|  1.81k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIwEENS0_13scan_expectedIS9_EERT_:
 5961|    564|    {
 5962|       |        if constexpr (!detail::is_type_disabled<T> &&
 5963|       |                      std::is_same_v<
 5964|       |                          context_type,
 5965|    564|                          basic_contiguous_scan_context<char_type>>) {
 5966|    564|            auto rd = make_reader<T, char_type>();
 5967|    564|            return impl(rd, range, value);
 5968|       |        }
 5969|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5970|       |            auto rd = make_reader<T, char_type>();
 5971|       |            if (!is_segment_contiguous(range)) {
 5972|       |                return impl(rd, range, value);
 5973|       |            }
 5974|       |            auto crange = get_as_contiguous(range);
 5975|       |            SCN_TRY(it, impl(rd, crange, value));
 5976|       |            return ranges::next(range.begin(),
 5977|       |                                ranges::distance(crange.begin(), it));
 5978|       |        }
 5979|       |        else {
 5980|       |            SCN_EXPECT(false);
 5981|       |            SCN_UNREACHABLE;
 5982|       |        }
 5983|    564|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_wcharIwEESA_wEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5953|    564|    {
 5954|    564|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|    564|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    564|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    564|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    564|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 564]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    564|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    564|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5955|    564|                        .transform_error(make_eof_scan_error));
 5956|    564|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5957|    564|    }
_ZN3scn2v44impl12float_readerIwEC2Ev:
 3731|    564|    constexpr float_reader() = default;
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIdEENS0_13scan_expectedIS9_EERT_:
 5961|    564|    {
 5962|       |        if constexpr (!detail::is_type_disabled<T> &&
 5963|       |                      std::is_same_v<
 5964|       |                          context_type,
 5965|    564|                          basic_contiguous_scan_context<char_type>>) {
 5966|    564|            auto rd = make_reader<T, char_type>();
 5967|    564|            return impl(rd, range, value);
 5968|       |        }
 5969|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5970|       |            auto rd = make_reader<T, char_type>();
 5971|       |            if (!is_segment_contiguous(range)) {
 5972|       |                return impl(rd, range, value);
 5973|       |            }
 5974|       |            auto crange = get_as_contiguous(range);
 5975|       |            SCN_TRY(it, impl(rd, crange, value));
 5976|       |            return ranges::next(range.begin(),
 5977|       |                                ranges::distance(crange.begin(), it));
 5978|       |        }
 5979|       |        else {
 5980|       |            SCN_EXPECT(false);
 5981|       |            SCN_UNREACHABLE;
 5982|       |        }
 5983|    564|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5953|    564|    {
 5954|    564|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|    564|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    564|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    564|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    564|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 564]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    564|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    564|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5955|    564|                        .transform_error(make_eof_scan_error));
 5956|    564|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5957|    564|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4237|    564|    {
 4238|    564|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|    564|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4239|       |
 4240|    564|        float_reader<CharT> rd{};
 4241|    564|        return read_impl<Range>(
 4242|    564|            range, rd,
 4243|    564|            [](float_reader<CharT>& r, auto&&... args) {
 4244|    564|                return r.read_source(SCN_FWD(args)...);
 4245|    564|            },
 4246|    564|            value);
 4247|    564|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|    564|        : m_fptr([](storage fn,
  743|    564|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    564|              cvref<T> obj = *get<T>(fn);
  745|    564|              if constexpr (std::is_void_v<R>) {
  746|    564|                  obj(static_cast<decltype(args)>(args)...);
  747|    564|              }
  748|    564|              else {
  749|    564|                  return obj(static_cast<decltype(args)>(args)...);
  750|    564|              }
  751|    564|          }),
  752|    564|          m_storage(std::addressof(f))
  753|    564|    {
  754|    564|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|    564|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    564|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    564|              else {
  749|    564|                  return obj(static_cast<decltype(args)>(args)...);
  750|    564|              }
  751|    564|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|    564|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    564|        else if constexpr (std::is_object_v<T>) {
  688|    564|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    564|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4243|    564|            [](float_reader<CharT>& r, auto&&... args) {
 4244|    564|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|    564|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4245|    564|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|    564|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    564|        {
  662|    564|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 5961|    564|    {
 5962|       |        if constexpr (!detail::is_type_disabled<T> &&
 5963|       |                      std::is_same_v<
 5964|       |                          context_type,
 5965|    564|                          basic_contiguous_scan_context<char_type>>) {
 5966|    564|            auto rd = make_reader<T, char_type>();
 5967|    564|            return impl(rd, range, value);
 5968|       |        }
 5969|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5970|       |            auto rd = make_reader<T, char_type>();
 5971|       |            if (!is_segment_contiguous(range)) {
 5972|       |                return impl(rd, range, value);
 5973|       |            }
 5974|       |            auto crange = get_as_contiguous(range);
 5975|       |            SCN_TRY(it, impl(rd, crange, value));
 5976|       |            return ranges::next(range.begin(),
 5977|       |                                ranges::distance(crange.begin(), it));
 5978|       |        }
 5979|       |        else {
 5980|       |            SCN_EXPECT(false);
 5981|       |            SCN_UNREACHABLE;
 5982|       |        }
 5983|    564|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5953|    564|    {
 5954|    564|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|    564|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    564|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    564|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    564|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 564]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    564|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    564|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5955|    564|                        .transform_error(make_eof_scan_error));
 5956|    564|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5957|    564|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5351|    564|    {
 5352|    564|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|    564|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5353|    564|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5354|    564|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 5961|    564|    {
 5962|       |        if constexpr (!detail::is_type_disabled<T> &&
 5963|       |                      std::is_same_v<
 5964|       |                          context_type,
 5965|    564|                          basic_contiguous_scan_context<char_type>>) {
 5966|    564|            auto rd = make_reader<T, char_type>();
 5967|    564|            return impl(rd, range, value);
 5968|       |        }
 5969|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5970|       |            auto rd = make_reader<T, char_type>();
 5971|       |            if (!is_segment_contiguous(range)) {
 5972|       |                return impl(rd, range, value);
 5973|       |            }
 5974|       |            auto crange = get_as_contiguous(range);
 5975|       |            SCN_TRY(it, impl(rd, crange, value));
 5976|       |            return ranges::next(range.begin(),
 5977|       |                                ranges::distance(crange.begin(), it));
 5978|       |        }
 5979|       |        else {
 5980|       |            SCN_EXPECT(false);
 5981|       |            SCN_UNREACHABLE;
 5982|       |        }
 5983|    564|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5953|    564|    {
 5954|    564|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|    564|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    564|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    564|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    564|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 564]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    564|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    564|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5955|    564|                        .transform_error(make_eof_scan_error));
 5956|    564|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5957|    564|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5351|    564|    {
 5352|    564|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|    564|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5353|    564|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5354|    564|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIS9_EERT_:
 5961|    564|    {
 5962|       |        if constexpr (!detail::is_type_disabled<T> &&
 5963|       |                      std::is_same_v<
 5964|       |                          context_type,
 5965|    564|                          basic_contiguous_scan_context<char_type>>) {
 5966|    564|            auto rd = make_reader<T, char_type>();
 5967|    564|            return impl(rd, range, value);
 5968|       |        }
 5969|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5970|       |            auto rd = make_reader<T, char_type>();
 5971|       |            if (!is_segment_contiguous(range)) {
 5972|       |                return impl(rd, range, value);
 5973|       |            }
 5974|       |            auto crange = get_as_contiguous(range);
 5975|       |            SCN_TRY(it, impl(rd, crange, value));
 5976|       |            return ranges::next(range.begin(),
 5977|       |                                ranges::distance(crange.begin(), it));
 5978|       |        }
 5979|       |        else {
 5980|       |            SCN_EXPECT(false);
 5981|       |            SCN_UNREACHABLE;
 5982|       |        }
 5983|    564|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5953|    564|    {
 5954|    564|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|    564|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    564|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    564|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    564|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 564]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    564|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    564|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5955|    564|                        .transform_error(make_eof_scan_error));
 5956|    564|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5957|    564|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5351|    564|    {
 5352|    564|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|    564|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5353|    564|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5354|    564|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSL_10locale_refE:
 3017|   124k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1108|   124k|    static_cast<    \
  |  | 1109|   124k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3018|   124k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 3019|   124k|          m_current(m_range.begin())
 3020|   124k|    {
 3021|   124k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE3endEv:
 3029|  1.37M|    {
 3030|  1.37M|        return m_range.end();
 3031|  1.37M|    }
_ZN3scn2v44impl19is_first_char_spaceIwEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1318|   694k|{
 1319|       |    // TODO: optimize
 1320|   694k|    SCN_EXPECT(!str.empty());
  ------------------
  |  | 1104|   694k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   694k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1321|   694k|    auto res = get_next_code_point(str);
 1322|   694k|    return {res.iterator, res.value, detail::is_cp_space(res.value)};
 1323|   694k|}
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toES7_:
 3044|   653k|    {
 3045|   653k|        SCN_EXPECT(it <= end());
  ------------------
  |  | 1104|   653k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   653k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3046|   653k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3047|   653k|            if (it == nullptr) {
  ------------------
  |  Branch (3047:17): [True: 0, False: 653k]
  ------------------
 3048|      0|                it = end();
 3049|      0|            }
 3050|   653k|        }
 3051|   653k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1108|   653k|    static_cast<    \
  |  | 1109|   653k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3052|   653k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5rangeEv:
 3034|  28.5k|    {
 3035|  28.5k|        return ranges::subrange{begin(), end()};
 3036|  28.5k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE11impl_prefixINS1_15take_width_viewISA_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_b:
 6125|  3.06k|    {
 6126|  3.06k|        const bool need_skipped_width =
 6127|  3.06k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6127:13): [True: 34, False: 3.03k]
  |  Branch (6127:33): [True: 3.03k, False: 0]
  ------------------
 6128|  3.06k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6129|       |
 6130|       |        // Read prefix
 6131|  3.06k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6131:13): [True: 46, False: 3.02k]
  ------------------
 6132|  3.06k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6132:13): [True: 496, False: 2.52k]
  ------------------
 6133|    542|            return skip_fill(rng, specs.precision, specs.fill,
 6134|    542|                             need_skipped_width);
 6135|    542|        }
 6136|  2.52k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6136:13): [True: 2.48k, False: 44]
  |  Branch (6136:56): [True: 1.66k, False: 814]
  ------------------
 6137|       |            // Default alignment:
 6138|       |            // Skip preceding whitespace, if required by the reader
 6139|  1.66k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6139:17): [True: 1.66k, False: 0]
  ------------------
 6140|  1.66k|                auto max_width_view = take_width(rng, specs.precision);
 6141|  1.66k|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3958|  1.66k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.66k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.66k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 116, False: 1.55k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    116|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    116|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    116|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    116|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    116|    }                                                  \
  |  |  |  | 3957|  1.66k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.55k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|  1.55k|                                  .transform_error(make_eof_scan_error));
 6143|  1.55k|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6144|  1.66k|            }
 6145|      0|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|                            make_eof_scan_error));
 6147|       |
 6148|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6148:17): [True: 0, False: 0]
  ------------------
 6149|      0|                return result_type{
 6150|      0|                    it,
 6151|      0|                    calculate_text_width(make_contiguous_buffer(
 6152|      0|                                             ranges::subrange{rng.begin(), it})
 6153|      0|                                             .view())};
 6154|      0|            }
 6155|      0|            return result_type{it, 0};
 6156|      0|        }
 6157|       |
 6158|    858|        return result_type{rng.begin(), 0};
 6159|  2.52k|    }
_ZN3scn2v44impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEb:
 6040|    542|{
 6041|    542|    using char_type = detail::char_t<Range>;
 6042|    542|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6043|       |
 6044|    542|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (6044:9): [True: 542, False: 0]
  ------------------
 6045|    542|        const auto fill_ch = fill.template get_code_unit<char_type>();
 6046|    542|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 6047|       |
 6048|    542|        if (max_width == 0) {
  ------------------
  |  Branch (6048:13): [True: 0, False: 542]
  ------------------
 6049|      0|            auto it = read_while_code_unit(range, pred);
 6050|       |
 6051|      0|            if (want_skipped_width) {
  ------------------
  |  Branch (6051:17): [True: 0, False: 0]
  ------------------
 6052|      0|                auto prefix_width =
 6053|      0|                    static_cast<std::ptrdiff_t>(
 6054|      0|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 6055|      0|                    ranges::distance(range.begin(), it);
 6056|      0|                return result_type{it, prefix_width};
 6057|      0|            }
 6058|      0|            return result_type{it, 0};
 6059|      0|        }
 6060|       |
 6061|    542|        auto max_width_view = take_width(range, max_width);
 6062|    542|        auto w_it = read_while_code_unit(max_width_view, pred);
 6063|       |
 6064|    542|        if (want_skipped_width) {
  ------------------
  |  Branch (6064:13): [True: 542, False: 0]
  ------------------
 6065|    542|            return result_type{w_it.base(), max_width - w_it.count()};
 6066|    542|        }
 6067|      0|        return result_type{w_it.base(), 0};
 6068|    542|    }
 6069|       |
 6070|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 6071|      0|    if (max_width == 0) {
  ------------------
  |  Branch (6071:9): [True: 0, False: 0]
  ------------------
 6072|      0|        auto it = read_while_code_units(range, fill_chars);
 6073|       |
 6074|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (6074:13): [True: 0, False: 0]
  ------------------
 6075|      0|            auto prefix_width =
 6076|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 6077|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 6078|      0|            return result_type{it, prefix_width};
 6079|      0|        }
 6080|      0|        return result_type{it, 0};
 6081|      0|    }
 6082|       |
 6083|      0|    auto max_width_view = take_width(range, max_width);
 6084|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 6085|       |
 6086|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (6086:9): [True: 0, False: 0]
  ------------------
 6087|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 6088|      0|    }
 6089|      0|    return result_type{w_it.base(), 0};
 6090|      0|}
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_ST_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSJ_:
  742|    542|        : m_fptr([](storage fn,
  743|    542|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    542|              cvref<T> obj = *get<T>(fn);
  745|    542|              if constexpr (std::is_void_v<R>) {
  746|    542|                  obj(static_cast<decltype(args)>(args)...);
  747|    542|              }
  748|    542|              else {
  749|    542|                  return obj(static_cast<decltype(args)>(args)...);
  750|    542|              }
  751|    542|          }),
  752|    542|          m_storage(std::addressof(f))
  753|    542|    {
  754|    542|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_ST_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES15_w:
  743|    806|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    806|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    806|              else {
  749|    806|                  return obj(static_cast<decltype(args)>(args)...);
  750|    806|              }
  751|    806|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESI_lRKNS0_6detail9fill_typeEbEUlwE_EEDaNS3_7storageE:
  683|    806|    {
  684|    806|        if constexpr (std::is_const_v<T>) {
  685|    806|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    806|    }
_ZZN3scn2v44impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEbENKUlwE_clEw:
 6046|    806|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|    542|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    542|        {
  667|    542|        }
_ZN3scn2v44impl20read_while_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2107|    542|{
 2108|    542|    return read_until_code_unit(range, std::not_fn(pred));
 2109|    542|}
_ZN3scn2v44impl20read_until_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|    542|{
 2075|       |    if constexpr (ranges::common_range<Range>) {
 2076|       |        return std::find_if(range.begin(), range.end(), pred);
 2077|       |    }
 2078|    542|    else {
 2079|    542|        auto first = range.begin();
 2080|    840|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2080:16): [True: 806, False: 34]
  ------------------
 2081|    806|            if (pred(*first)) {
  ------------------
  |  Branch (2081:17): [True: 508, False: 298]
  ------------------
 2082|    508|                return first;
 2083|    508|            }
 2084|    806|        }
 2085|     34|        return first;
 2086|    542|    }
 2087|    542|}
_ZNK3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE5beginEv:
 2952|  3.87k|    {
 2953|  3.87k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2954|  3.87k|                                      m_count};
 2955|  3.87k|    }
_ZNK3scn2v44impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEvE3getEv:
 2857|  14.7k|    {
 2858|  14.7k|        return view;
 2859|  14.7k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEC2ES6_SF_l:
 2513|  3.87k|        : m_current(x), m_end(s), m_count(n)
 2514|  3.87k|    {
 2515|  3.87k|    }
_ZN3scn2v44implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2923|  3.13k|        {
 2924|  3.13k|            return !(y == x);
 2925|  3.13k|        }
_ZN3scn2v44impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2910|  6.98k|        {
 2911|  6.98k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2911:21): [True: 266, False: 6.71k]
  |  Branch (2911:39): [True: 266, False: 0]
  ------------------
 2912|  6.98k|                   y.base() == x.m_end ||
  ------------------
  |  Branch (2912:20): [True: 0, False: 6.71k]
  ------------------
 2913|  6.98k|                   (y.count() == 1 && y.multibyte_left() == 0 &&
  ------------------
  |  Branch (2913:21): [True: 576, False: 6.14k]
  |  Branch (2913:39): [True: 576, False: 0]
  ------------------
 2914|  6.71k|                    y.is_current_double_wide());
  ------------------
  |  Branch (2914:21): [True: 0, False: 576]
  ------------------
 2915|  6.98k|        }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE14multibyte_leftEv:
 2553|    842|    {
 2554|    842|        return m_multibyte_left;
 2555|    842|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE22is_current_double_wideEv:
 2558|    576|    {
 2559|    576|        assert(count() != 0 || multibyte_left() != 0);
 2560|    576|        return _get_width_at_current_cp_start(_get_cp_length_at_current()) == 2;
 2561|    576|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE30_get_width_at_current_cp_startEl:
 2785|  3.05k|    {
 2786|  3.05k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  | 1039|  3.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 3.05k]
  |  |  ------------------
  ------------------
 2787|      0|            return 0;
 2788|      0|        }
 2789|       |
 2790|  3.05k|        if (cplen == 1) {
  ------------------
  |  Branch (2790:13): [True: 3.05k, False: 0]
  ------------------
 2791|  3.05k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  | 1104|  3.05k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.05k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2792|  3.05k|            auto cp = static_cast<char32_t>(*m_current);
 2793|  3.05k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2794|  3.05k|        }
 2795|       |
 2796|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2797|      0|                                           cplen);
 2798|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2799|      0|            return 0;
 2800|      0|        }
 2801|       |
 2802|      0|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2803|      0|        return static_cast<difference_type>(
 2804|      0|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2805|      0|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE25_get_cp_length_at_currentEv:
 2779|  3.05k|    {
 2780|  3.05k|        return static_cast<difference_type>(
 2781|  3.05k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2782|  3.05k|    }
_ZNK3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE3endEv:
 2958|  6.98k|    {
 2959|  6.98k|        return sentinel<true>{m_base.get().end()};
 2960|  6.98k|    }
_ZN3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE8sentinelILb1EEC2ENSA_8sentinelILb1EEE:
 2891|  6.98k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  | 1108|  6.98k|    static_cast<    \
  |  | 1109|  6.98k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEdeEv:
 2564|  5.16k|    {
 2565|  5.16k|        return *m_current;
 2566|  5.16k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEppEv:
 2573|  2.47k|    {
 2574|  2.47k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  | 1104|  2.47k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.47k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2575|  2.47k|        _increment_current();
 2576|  2.47k|        return *this;
 2577|  2.47k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE18_increment_currentEv:
 2808|  2.47k|    {
 2809|  2.47k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2809:13): [True: 2.47k, False: 0]
  ------------------
 2810|  2.47k|            auto cplen = _get_cp_length_at_current();
 2811|  2.47k|            m_multibyte_left = cplen - 1;
 2812|  2.47k|            m_count -= _get_width_at_current_cp_start(cplen);
 2813|  2.47k|        }
 2814|      0|        else {
 2815|      0|            --m_multibyte_left;
 2816|      0|        }
 2817|       |
 2818|  2.47k|        ++m_current;
 2819|  2.47k|    }
_ZNK3scn2v44impl14_take_width_fnclINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEEDTtlS4_fp_fp0_EERKT_l:
 2974|  2.20k|    {
 2975|  2.20k|        return take_width_view{r, n};
 2976|  2.20k|    }
_ZN3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEEC2ERKSA_l:
 2942|  2.20k|        : m_base(base), m_count(count)
 2943|  2.20k|    {
 2944|  2.20k|    }
_ZN3scn2v44impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEvEC2ERKSB_:
 2854|  2.20k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v44impl23skip_classic_whitespaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3097|  1.66k|{
 3098|  1.66k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3098:9): [True: 1.66k, False: 0]
  ------------------
 3099|  1.66k|        auto it = read_while_classic_space(range);
 3100|  1.66k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3101|  1.66k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  1.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 116, False: 1.55k]
  |  |  ------------------
  ------------------
 3102|    116|            return unexpected(e);
 3103|    116|        }
 3104|       |
 3105|  1.55k|        return it;
 3106|  1.66k|    }
 3107|       |
 3108|      0|    return read_while_classic_space(range);
 3109|  1.66k|}
_ZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2248|  1.66k|{
 2249|       |    if constexpr (ranges::contiguous_range<Range> &&
 2250|       |                  ranges::sized_range<Range> &&
 2251|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2252|       |        auto buf = make_contiguous_buffer(range);
 2253|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2254|       |        return ranges::next(range.begin(),
 2255|       |                            ranges::distance(buf.view().begin(), it));
 2256|       |    }
 2257|  1.66k|    else {
 2258|  1.66k|        auto it = range.begin();
 2259|       |
 2260|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2261|       |            auto seg = get_contiguous_beginning(range);
 2262|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2263|       |                seg_it != seg.end()) {
 2264|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2265|       |            }
 2266|       |            ranges::advance(it, seg.size());
 2267|       |        }
 2268|       |
 2269|  1.66k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|  1.66k|            return detail::is_cp_space(cp);
 2271|  1.66k|        });
 2272|  1.66k|    }
 2273|  1.66k|}
_ZN3scn2v44impl21read_while_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2213|  1.66k|{
 2214|  1.66k|    return read_until_code_point(range, std::not_fn(pred));
 2215|  1.66k|}
_ZN3scn2v44impl21read_until_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2192|  1.66k|{
 2193|  1.66k|    auto it = range.begin();
 2194|  2.29k|    while (it != range.end()) {
  ------------------
  |  Branch (2194:12): [True: 2.18k, False: 116]
  ------------------
 2195|  2.18k|        const auto val =
 2196|  2.18k|            read_code_point_into(ranges::subrange{it, range.end()});
 2197|  2.18k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1038|  2.18k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 2.18k, False: 0]
  |  |  ------------------
  ------------------
 2198|  2.18k|            const auto cp = detail::decode_code_point_exhaustive(
 2199|  2.18k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2200|  2.18k|            if (pred(cp)) {
  ------------------
  |  Branch (2200:17): [True: 1.55k, False: 630]
  ------------------
 2201|  1.55k|                return it;
 2202|  1.55k|            }
 2203|  2.18k|        }
 2204|    630|        it = val.iterator;
 2205|    630|    }
 2206|       |
 2207|    116|    return it;
 2208|  1.66k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISP_EEE4typeEEESP_:
 1997|  2.18k|{
 1998|  2.18k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1104|  2.18k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.18k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  2.18k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  2.18k|    auto it = range.begin();
 2002|  2.18k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  2.18k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1039|  2.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 2.18k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  2.18k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 2.18k, False: 0]
  ------------------
 2011|  2.18k|        ++it;
 2012|  2.18k|        return {it, string_type(1, *range.begin())};
 2013|  2.18k|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|  2.18k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEbT_:
  944|  3.84k|{
  945|  3.84k|    return is_range_eof(r.begin(), r.end());
  946|  3.84k|}
_ZN3scn2v44impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS8_ISE_E8sentinelILb1EEEEEbT_T0_:
  928|  3.84k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  3.84k|    {
  938|  3.84k|        return begin == end;
  939|  3.84k|    }
  940|  3.84k|}
_ZNK3scn2v44impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEwE8is_validEv:
 1988|  2.18k|    {
 1989|  2.18k|        return !codepoint.empty();
 1990|  2.18k|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  1.66k|        : m_fptr([](storage fn,
  743|  1.66k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.66k|              cvref<T> obj = *get<T>(fn);
  745|  1.66k|              if constexpr (std::is_void_v<R>) {
  746|  1.66k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.66k|              }
  748|  1.66k|              else {
  749|  1.66k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.66k|              }
  751|  1.66k|          }),
  752|  1.66k|          m_storage(std::addressof(f))
  753|  1.66k|    {
  754|  1.66k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  2.18k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.18k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.18k|              else {
  749|  2.18k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.18k|              }
  751|  2.18k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS6_INS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  2.18k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.18k|        else if constexpr (std::is_object_v<T>) {
  688|  2.18k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.18k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2269|  2.18k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|  2.18k|            return detail::is_cp_space(cp);
 2271|  2.18k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  1.66k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.66k|        {
  662|  1.66k|        }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_9eof_errorET_:
  950|  1.66k|{
  951|  1.66k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1039|  1.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 116, False: 1.55k]
  |  |  ------------------
  ------------------
  952|    116|        return eof_error::eof;
  953|    116|    }
  954|  1.55k|    return eof_error::good;
  955|  1.66k|}
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE4baseEv:
 2545|  8.80k|    {
 2546|  8.80k|        return m_current;
 2547|  8.80k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE5countEv:
 2549|  16.3k|    {
 2550|  16.3k|        return m_count;
 2551|  16.3k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6125|  4.97k|    {
 6126|  4.97k|        const bool need_skipped_width =
 6127|  4.97k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6127:13): [True: 2.62k, False: 2.34k]
  |  Branch (6127:33): [True: 0, False: 2.34k]
  ------------------
 6128|  4.97k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6129|       |
 6130|       |        // Read prefix
 6131|  4.97k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6131:13): [True: 166, False: 4.80k]
  ------------------
 6132|  4.97k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6132:13): [True: 582, False: 4.22k]
  ------------------
 6133|    748|            return skip_fill(rng, specs.precision, specs.fill,
 6134|    748|                             need_skipped_width);
 6135|    748|        }
 6136|  4.22k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6136:13): [True: 3.80k, False: 424]
  |  Branch (6136:56): [True: 2.79k, False: 1.00k]
  ------------------
 6137|       |            // Default alignment:
 6138|       |            // Skip preceding whitespace, if required by the reader
 6139|  2.79k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6139:17): [True: 0, False: 2.79k]
  ------------------
 6140|      0|                auto max_width_view = take_width(rng, specs.precision);
 6141|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|                                  .transform_error(make_eof_scan_error));
 6143|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6144|      0|            }
 6145|  5.58k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3958|  2.79k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  2.79k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  2.79k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  2.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 2.79k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  2.79k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  2.79k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|  5.58k|                            make_eof_scan_error));
 6147|       |
 6148|  5.58k|            if (need_skipped_width) {
  ------------------
  |  Branch (6148:17): [True: 1.92k, False: 866]
  ------------------
 6149|  1.92k|                return result_type{
 6150|  1.92k|                    it,
 6151|  1.92k|                    calculate_text_width(make_contiguous_buffer(
 6152|  1.92k|                                             ranges::subrange{rng.begin(), it})
 6153|  1.92k|                                             .view())};
 6154|  1.92k|            }
 6155|    866|            return result_type{it, 0};
 6156|  5.58k|        }
 6157|       |
 6158|  1.43k|        return result_type{rng.begin(), 0};
 6159|  4.22k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6167|  2.69k|    {
 6168|  2.69k|        const bool need_skipped_width =
 6169|  2.69k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6169:13): [True: 728, False: 1.96k]
  |  Branch (6169:33): [True: 1.04k, False: 914]
  ------------------
 6170|  2.69k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6171|       |
 6172|  2.69k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6172:13): [True: 140, False: 2.55k]
  ------------------
 6173|  2.69k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6173:13): [True: 596, False: 1.95k]
  ------------------
 6174|    736|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6174:17): [True: 244, False: 492]
  ------------------
 6175|    736|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6175:17): [True: 136, False: 108]
  ------------------
 6176|    136|                return result_type{rng.begin(), 0};
 6177|    136|            }
 6178|    600|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6179|    600|                             specs.fill, need_skipped_width);
 6180|    736|        }
 6181|  1.95k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6181:13): [True: 1.86k, False: 88]
  ------------------
 6182|  1.95k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6182:13): [True: 1.56k, False: 306]
  ------------------
 6183|  1.95k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6183:15): [True: 524, False: 1.03k]
  |  Branch (6183:35): [True: 390, False: 134]
  ------------------
 6184|  1.56k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6184:15): [True: 666, False: 504]
  ------------------
 6185|  1.17k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6185:15): [True: 508, False: 158]
  ------------------
 6186|    898|            if (specs.precision != 0) {
  ------------------
  |  Branch (6186:17): [True: 508, False: 390]
  ------------------
 6187|    508|                const auto initial_width =
 6188|    508|                    specs.precision - prefix_width - value_width;
 6189|    508|                auto max_width_view = take_width(rng, initial_width);
 6190|    508|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3958|    508|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    508|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    508|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    508|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 508]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    508|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    508|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6191|    508|                                  .transform_error(make_eof_scan_error));
 6192|    508|                return result_type{w_it.base(), initial_width - w_it.count()};
 6193|    508|            }
 6194|    780|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3958|    390|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    390|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    390|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    390|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 390]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    390|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    390|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|    780|                            make_eof_scan_error));
 6196|       |
 6197|    780|            if (need_skipped_width) {
  ------------------
  |  Branch (6197:17): [True: 390, False: 0]
  ------------------
 6198|    390|                return result_type{
 6199|    390|                    it,
 6200|    390|                    calculate_text_width(make_contiguous_buffer(
 6201|    390|                                             ranges::subrange{rng.begin(), it})
 6202|    390|                                             .view())};
 6203|    390|            }
 6204|      0|            return result_type{it, 0};
 6205|    780|        }
 6206|  1.05k|        return result_type{rng.begin(), 0};
 6207|  1.95k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIiEENS0_13scan_expectedIS9_EERT_:
 6277|  1.49k|    {
 6278|       |        if constexpr (!detail::is_type_disabled<T> &&
 6279|       |                      std::is_same_v<
 6280|       |                          context_type,
 6281|  1.49k|                          basic_contiguous_scan_context<char_type>>) {
 6282|  1.49k|            auto rd = make_reader<T, char_type>();
 6283|  1.49k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  1.49k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  1.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 734, False: 758]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|    734|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|    734|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    734|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    734|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|    734|    }
  ------------------
 6284|    758|            return impl(rd, range, value);
 6285|       |        }
 6286|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6287|       |            auto rd = make_reader<T, char_type>();
 6288|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6289|       |
 6290|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6291|       |                specs.width != 0) {
 6292|       |                return impl(rd, range, value);
 6293|       |            }
 6294|       |
 6295|       |            auto crange = get_as_contiguous(range);
 6296|       |            SCN_TRY(it, impl(rd, crange, value));
 6297|       |            return ranges::next(range.begin(),
 6298|       |                                ranges::distance(crange.begin(), it));
 6299|       |        }
 6300|       |        else {
 6301|       |            SCN_EXPECT(false);
 6302|       |            SCN_UNREACHABLE;
 6303|       |        }
 6304|  1.49k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6212|    758|    {
 6213|    758|        const bool need_skipped_width =
 6214|    758|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6214:13): [True: 260, False: 498]
  |  Branch (6214:33): [True: 278, False: 220]
  ------------------
 6215|       |
 6216|       |        // Read prefix
 6217|    758|        auto it = rng.begin();
 6218|    758|        std::ptrdiff_t prefix_width = 0;
 6219|    758|        if (specs.precision != 0) {
  ------------------
  |  Branch (6219:13): [True: 280, False: 478]
  ------------------
 6220|    280|            auto max_width_view = take_width(rng, specs.precision);
 6221|    280|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|    280|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    280|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    280|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    280|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 20, False: 260]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     20|    }                                                  \
  |  |  |  | 3957|    280|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    260|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6222|    260|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6223|    260|            it = prefix_result.first.base();
 6224|    260|            prefix_width = prefix_result.second;
 6225|    260|        }
 6226|    478|        else {
 6227|    478|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|    478|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    478|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    478|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    478|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 478]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    478|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    478|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6228|    478|            std::tie(it, prefix_width) = prefix_result;
 6229|    478|        }
 6230|    738|        auto prefix_end_it = it;
 6231|       |
 6232|       |        // Read value
 6233|    738|        std::ptrdiff_t value_width = 0;
 6234|    738|        if (specs.precision != 0) {
  ------------------
  |  Branch (6234:13): [True: 260, False: 478]
  ------------------
 6235|    260|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6235:17): [True: 2, False: 258]
  ------------------
 6236|      2|                return detail::unexpected_scan_error(
 6237|      2|                    scan_error::invalid_fill,
 6238|      2|                    "Too many fill characters before value, "
 6239|      2|                    "precision exceeded before reading value");
 6240|      2|            }
 6241|       |
 6242|    258|            const auto initial_width = specs.precision - prefix_width;
 6243|    258|            auto max_width_view =
 6244|    258|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6245|    258|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|    258|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    258|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    258|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    258|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 236, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    236|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    236|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    236|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    236|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    236|    }                                                  \
  |  |  |  | 3957|    258|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|     22|            it = w_it.base();
 6247|     22|            value_width = initial_width - w_it.count();
 6248|     22|        }
 6249|    478|        else {
 6250|    478|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|    478|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|    478|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|    478|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 434, False: 44]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|    434|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|    434|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    434|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    434|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|    434|    }                                                  \
  |  | 3957|    478|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|    478|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6251|     44|                                             specs, value, loc));
 6252|       |
 6253|     44|            if (need_skipped_width) {
  ------------------
  |  Branch (6253:17): [True: 8, False: 36]
  ------------------
 6254|      8|                value_width = calculate_text_width(
 6255|      8|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6256|      8|                        .view());
 6257|      8|            }
 6258|     44|        }
 6259|       |
 6260|       |        // Read postfix
 6261|     66|        std::ptrdiff_t postfix_width = 0;
 6262|     66|        if (it != rng.end()) {
  ------------------
  |  Branch (6262:13): [True: 66, False: 0]
  ------------------
 6263|     66|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|     66|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|     66|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|     66|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|     66|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 66]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|     66|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     66|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|     66|                    impl_postfix(ranges::subrange{it, rng.end()},
 6265|     66|                                 rd.skip_ws_before_read(), prefix_width,
 6266|     66|                                 value_width));
 6267|     66|            std::tie(it, postfix_width) = postfix_result;
 6268|     66|        }
 6269|       |
 6270|     66|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|     66|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|     66|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 4, False: 62]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      4|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      4|    }
  ------------------
 6271|     66|            specs, prefix_width, value_width, postfix_width));
 6272|     62|        return it;
 6273|     66|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIjEENS0_13scan_expectedIS9_EERT_:
 6277|  1.49k|    {
 6278|       |        if constexpr (!detail::is_type_disabled<T> &&
 6279|       |                      std::is_same_v<
 6280|       |                          context_type,
 6281|  1.49k|                          basic_contiguous_scan_context<char_type>>) {
 6282|  1.49k|            auto rd = make_reader<T, char_type>();
 6283|  1.49k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  1.49k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  1.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 734, False: 758]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|    734|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|    734|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    734|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    734|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|    734|    }
  ------------------
 6284|    758|            return impl(rd, range, value);
 6285|       |        }
 6286|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6287|       |            auto rd = make_reader<T, char_type>();
 6288|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6289|       |
 6290|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6291|       |                specs.width != 0) {
 6292|       |                return impl(rd, range, value);
 6293|       |            }
 6294|       |
 6295|       |            auto crange = get_as_contiguous(range);
 6296|       |            SCN_TRY(it, impl(rd, crange, value));
 6297|       |            return ranges::next(range.begin(),
 6298|       |                                ranges::distance(crange.begin(), it));
 6299|       |        }
 6300|       |        else {
 6301|       |            SCN_EXPECT(false);
 6302|       |            SCN_UNREACHABLE;
 6303|       |        }
 6304|  1.49k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6212|    758|    {
 6213|    758|        const bool need_skipped_width =
 6214|    758|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6214:13): [True: 260, False: 498]
  |  Branch (6214:33): [True: 278, False: 220]
  ------------------
 6215|       |
 6216|       |        // Read prefix
 6217|    758|        auto it = rng.begin();
 6218|    758|        std::ptrdiff_t prefix_width = 0;
 6219|    758|        if (specs.precision != 0) {
  ------------------
  |  Branch (6219:13): [True: 280, False: 478]
  ------------------
 6220|    280|            auto max_width_view = take_width(rng, specs.precision);
 6221|    280|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|    280|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    280|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    280|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    280|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 20, False: 260]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     20|    }                                                  \
  |  |  |  | 3957|    280|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    260|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6222|    260|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6223|    260|            it = prefix_result.first.base();
 6224|    260|            prefix_width = prefix_result.second;
 6225|    260|        }
 6226|    478|        else {
 6227|    478|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|    478|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    478|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    478|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    478|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 478]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    478|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    478|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6228|    478|            std::tie(it, prefix_width) = prefix_result;
 6229|    478|        }
 6230|    738|        auto prefix_end_it = it;
 6231|       |
 6232|       |        // Read value
 6233|    738|        std::ptrdiff_t value_width = 0;
 6234|    738|        if (specs.precision != 0) {
  ------------------
  |  Branch (6234:13): [True: 260, False: 478]
  ------------------
 6235|    260|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6235:17): [True: 2, False: 258]
  ------------------
 6236|      2|                return detail::unexpected_scan_error(
 6237|      2|                    scan_error::invalid_fill,
 6238|      2|                    "Too many fill characters before value, "
 6239|      2|                    "precision exceeded before reading value");
 6240|      2|            }
 6241|       |
 6242|    258|            const auto initial_width = specs.precision - prefix_width;
 6243|    258|            auto max_width_view =
 6244|    258|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6245|    258|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|    258|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    258|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    258|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    258|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 236, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    236|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    236|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    236|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    236|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    236|    }                                                  \
  |  |  |  | 3957|    258|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|     22|            it = w_it.base();
 6247|     22|            value_width = initial_width - w_it.count();
 6248|     22|        }
 6249|    478|        else {
 6250|    478|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|    478|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|    478|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|    478|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 434, False: 44]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|    434|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|    434|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    434|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    434|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|    434|    }                                                  \
  |  | 3957|    478|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|    478|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6251|     44|                                             specs, value, loc));
 6252|       |
 6253|     44|            if (need_skipped_width) {
  ------------------
  |  Branch (6253:17): [True: 8, False: 36]
  ------------------
 6254|      8|                value_width = calculate_text_width(
 6255|      8|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6256|      8|                        .view());
 6257|      8|            }
 6258|     44|        }
 6259|       |
 6260|       |        // Read postfix
 6261|     66|        std::ptrdiff_t postfix_width = 0;
 6262|     66|        if (it != rng.end()) {
  ------------------
  |  Branch (6262:13): [True: 66, False: 0]
  ------------------
 6263|     66|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|     66|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|     66|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|     66|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|     66|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 66]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|     66|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     66|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|     66|                    impl_postfix(ranges::subrange{it, rng.end()},
 6265|     66|                                 rd.skip_ws_before_read(), prefix_width,
 6266|     66|                                 value_width));
 6267|     66|            std::tie(it, postfix_width) = postfix_result;
 6268|     66|        }
 6269|       |
 6270|     66|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|     66|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|     66|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 4, False: 62]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      4|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      4|    }
  ------------------
 6271|     66|            specs, prefix_width, value_width, postfix_width));
 6272|     62|        return it;
 6273|     66|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIPvEENS0_13scan_expectedIS9_EERT_:
 6277|  1.42k|    {
 6278|       |        if constexpr (!detail::is_type_disabled<T> &&
 6279|       |                      std::is_same_v<
 6280|       |                          context_type,
 6281|  1.42k|                          basic_contiguous_scan_context<char_type>>) {
 6282|  1.42k|            auto rd = make_reader<T, char_type>();
 6283|  1.42k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  1.42k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  1.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 810, False: 616]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|    810|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|    810|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    810|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    810|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|    810|    }
  ------------------
 6284|    616|            return impl(rd, range, value);
 6285|       |        }
 6286|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6287|       |            auto rd = make_reader<T, char_type>();
 6288|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6289|       |
 6290|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6291|       |                specs.width != 0) {
 6292|       |                return impl(rd, range, value);
 6293|       |            }
 6294|       |
 6295|       |            auto crange = get_as_contiguous(range);
 6296|       |            SCN_TRY(it, impl(rd, crange, value));
 6297|       |            return ranges::next(range.begin(),
 6298|       |                                ranges::distance(crange.begin(), it));
 6299|       |        }
 6300|       |        else {
 6301|       |            SCN_EXPECT(false);
 6302|       |            SCN_UNREACHABLE;
 6303|       |        }
 6304|  1.42k|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIwE11check_specsERKNS0_6detail12format_specsE:
 5840|  1.42k|    {
 5841|  1.42k|        reader_error_handler eh{};
 5842|  1.42k|        detail::check_pointer_type_specs(specs, eh);
 5843|  1.42k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1039|  1.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 810, False: 616]
  |  |  ------------------
  ------------------
 5844|    810|            return detail::unexpected_scan_error(
 5845|    810|                scan_error::invalid_format_string, eh.m_msg);
 5846|    810|        }
 5847|    616|        return {};
 5848|  1.42k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_23reader_impl_for_voidptrIwEESA_PvEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6212|    616|    {
 6213|    616|        const bool need_skipped_width =
 6214|    616|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6214:13): [True: 250, False: 366]
  |  Branch (6214:33): [True: 212, False: 154]
  ------------------
 6215|       |
 6216|       |        // Read prefix
 6217|    616|        auto it = rng.begin();
 6218|    616|        std::ptrdiff_t prefix_width = 0;
 6219|    616|        if (specs.precision != 0) {
  ------------------
  |  Branch (6219:13): [True: 214, False: 402]
  ------------------
 6220|    214|            auto max_width_view = take_width(rng, specs.precision);
 6221|    214|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|    214|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    214|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    214|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    214|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 8, False: 206]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      8|    }                                                  \
  |  |  |  | 3957|    214|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    206|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6222|    206|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6223|    206|            it = prefix_result.first.base();
 6224|    206|            prefix_width = prefix_result.second;
 6225|    206|        }
 6226|    402|        else {
 6227|    402|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|    402|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    402|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    402|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    402|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 402]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    402|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    402|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6228|    402|            std::tie(it, prefix_width) = prefix_result;
 6229|    402|        }
 6230|    608|        auto prefix_end_it = it;
 6231|       |
 6232|       |        // Read value
 6233|    608|        std::ptrdiff_t value_width = 0;
 6234|    608|        if (specs.precision != 0) {
  ------------------
  |  Branch (6234:13): [True: 206, False: 402]
  ------------------
 6235|    206|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6235:17): [True: 2, False: 204]
  ------------------
 6236|      2|                return detail::unexpected_scan_error(
 6237|      2|                    scan_error::invalid_fill,
 6238|      2|                    "Too many fill characters before value, "
 6239|      2|                    "precision exceeded before reading value");
 6240|      2|            }
 6241|       |
 6242|    204|            const auto initial_width = specs.precision - prefix_width;
 6243|    204|            auto max_width_view =
 6244|    204|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6245|    204|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|    204|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    204|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    204|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    204|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 194, False: 10]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    194|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    194|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    194|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    194|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    194|    }                                                  \
  |  |  |  | 3957|    204|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|     10|            it = w_it.base();
 6247|     10|            value_width = initial_width - w_it.count();
 6248|     10|        }
 6249|    402|        else {
 6250|    402|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|    402|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|    402|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|    402|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 374, False: 28]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|    374|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|    374|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    374|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    374|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|    374|    }                                                  \
  |  | 3957|    402|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|    402|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6251|     28|                                             specs, value, loc));
 6252|       |
 6253|     28|            if (need_skipped_width) {
  ------------------
  |  Branch (6253:17): [True: 8, False: 20]
  ------------------
 6254|      8|                value_width = calculate_text_width(
 6255|      8|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6256|      8|                        .view());
 6257|      8|            }
 6258|     28|        }
 6259|       |
 6260|       |        // Read postfix
 6261|     38|        std::ptrdiff_t postfix_width = 0;
 6262|     38|        if (it != rng.end()) {
  ------------------
  |  Branch (6262:13): [True: 38, False: 0]
  ------------------
 6263|     38|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|     38|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|     38|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|     38|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 38]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|     38|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     38|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|     38|                    impl_postfix(ranges::subrange{it, rng.end()},
 6265|     38|                                 rd.skip_ws_before_read(), prefix_width,
 6266|     38|                                 value_width));
 6267|     38|            std::tie(it, postfix_width) = postfix_result;
 6268|     38|        }
 6269|       |
 6270|     38|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|     38|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 4, False: 34]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      4|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      4|    }
  ------------------
 6271|     38|            specs, prefix_width, value_width, postfix_width));
 6272|     34|        return it;
 6273|     38|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5870|    204|    {
 5871|    204|        SCN_UNUSED(specs);
  ------------------
  |  | 1089|    204|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5872|    204|        return read_default(range, value, loc);
 5873|    204|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIwE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5853|    204|    {
 5854|    204|        detail::format_specs specs{};
 5855|    204|        specs.type = detail::presentation_type::int_hex;
 5856|       |
 5857|    204|        std::uintptr_t intvalue{};
 5858|    204|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3958|    204|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    204|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    204|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    204|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 194, False: 10]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    194|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    194|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    194|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    194|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    194|    }                                                  \
  |  |  |  | 3957|    204|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5859|     10|                                                                intvalue, loc));
 5860|     10|        value = reinterpret_cast<void*>(intvalue);
 5861|     10|        return result;
 5862|    204|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5870|    402|    {
 5871|    402|        SCN_UNUSED(specs);
  ------------------
  |  | 1089|    402|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5872|    402|        return read_default(range, value, loc);
 5873|    402|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIbEENS0_13scan_expectedIS9_EERT_:
 6277|  1.49k|    {
 6278|       |        if constexpr (!detail::is_type_disabled<T> &&
 6279|       |                      std::is_same_v<
 6280|       |                          context_type,
 6281|  1.49k|                          basic_contiguous_scan_context<char_type>>) {
 6282|  1.49k|            auto rd = make_reader<T, char_type>();
 6283|  1.49k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  1.49k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  1.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 618, False: 874]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|    618|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|    618|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    618|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    618|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|    618|    }
  ------------------
 6284|    874|            return impl(rd, range, value);
 6285|       |        }
 6286|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6287|       |            auto rd = make_reader<T, char_type>();
 6288|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6289|       |
 6290|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6291|       |                specs.width != 0) {
 6292|       |                return impl(rd, range, value);
 6293|       |            }
 6294|       |
 6295|       |            auto crange = get_as_contiguous(range);
 6296|       |            SCN_TRY(it, impl(rd, crange, value));
 6297|       |            return ranges::next(range.begin(),
 6298|       |                                ranges::distance(crange.begin(), it));
 6299|       |        }
 6300|       |        else {
 6301|       |            SCN_EXPECT(false);
 6302|       |            SCN_UNREACHABLE;
 6303|       |        }
 6304|  1.49k|    }
_ZN3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3187|  1.49k|    {
 3188|  1.49k|        reader_error_handler eh{};
 3189|  1.49k|        get_derived().check_specs_impl(specs, eh);
 3190|  1.49k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1039|  1.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 618, False: 874]
  |  |  ------------------
  ------------------
 3191|    618|            return detail::unexpected_scan_error(
 3192|    618|                scan_error::invalid_format_string, eh.m_msg);
 3193|    618|        }
 3194|    874|        return {};
 3195|  1.49k|    }
_ZN3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11get_derivedEv:
 3199|  1.49k|    {
 3200|  1.49k|        return static_cast<Derived&>(*this);
 3201|  1.49k|    }
_ZN3scn2v44impl20reader_impl_for_boolIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5583|  1.49k|    {
 5584|  1.49k|        detail::check_bool_type_specs(specs, eh);
 5585|  1.49k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_20reader_impl_for_boolIwEESA_bEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6212|    874|    {
 6213|    874|        const bool need_skipped_width =
 6214|    874|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6214:13): [True: 278, False: 596]
  |  Branch (6214:33): [True: 330, False: 266]
  ------------------
 6215|       |
 6216|       |        // Read prefix
 6217|    874|        auto it = rng.begin();
 6218|    874|        std::ptrdiff_t prefix_width = 0;
 6219|    874|        if (specs.precision != 0) {
  ------------------
  |  Branch (6219:13): [True: 334, False: 540]
  ------------------
 6220|    334|            auto max_width_view = take_width(rng, specs.precision);
 6221|    334|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|    334|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    334|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    334|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    334|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 22, False: 312]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     22|    }                                                  \
  |  |  |  | 3957|    334|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    312|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6222|    312|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6223|    312|            it = prefix_result.first.base();
 6224|    312|            prefix_width = prefix_result.second;
 6225|    312|        }
 6226|    540|        else {
 6227|    540|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|    540|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    540|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    540|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    540|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 540]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    540|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    540|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6228|    540|            std::tie(it, prefix_width) = prefix_result;
 6229|    540|        }
 6230|    852|        auto prefix_end_it = it;
 6231|       |
 6232|       |        // Read value
 6233|    852|        std::ptrdiff_t value_width = 0;
 6234|    852|        if (specs.precision != 0) {
  ------------------
  |  Branch (6234:13): [True: 312, False: 540]
  ------------------
 6235|    312|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6235:17): [True: 4, False: 308]
  ------------------
 6236|      4|                return detail::unexpected_scan_error(
 6237|      4|                    scan_error::invalid_fill,
 6238|      4|                    "Too many fill characters before value, "
 6239|      4|                    "precision exceeded before reading value");
 6240|      4|            }
 6241|       |
 6242|    308|            const auto initial_width = specs.precision - prefix_width;
 6243|    308|            auto max_width_view =
 6244|    308|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6245|    308|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|    308|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    308|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    308|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    308|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 286, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    286|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    286|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    286|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    286|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    286|    }                                                  \
  |  |  |  | 3957|    308|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|     22|            it = w_it.base();
 6247|     22|            value_width = initial_width - w_it.count();
 6248|     22|        }
 6249|    540|        else {
 6250|    540|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|    540|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|    540|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|    540|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 496, False: 44]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|    496|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|    496|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    496|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    496|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|    496|    }                                                  \
  |  | 3957|    540|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|    540|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6251|     44|                                             specs, value, loc));
 6252|       |
 6253|     44|            if (need_skipped_width) {
  ------------------
  |  Branch (6253:17): [True: 8, False: 36]
  ------------------
 6254|      8|                value_width = calculate_text_width(
 6255|      8|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6256|      8|                        .view());
 6257|      8|            }
 6258|     44|        }
 6259|       |
 6260|       |        // Read postfix
 6261|     66|        std::ptrdiff_t postfix_width = 0;
 6262|     66|        if (it != rng.end()) {
  ------------------
  |  Branch (6262:13): [True: 66, False: 0]
  ------------------
 6263|     66|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|     66|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|     66|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|     66|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|     66|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 66]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|     66|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     66|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|     66|                    impl_postfix(ranges::subrange{it, rng.end()},
 6265|     66|                                 rd.skip_ws_before_read(), prefix_width,
 6266|     66|                                 value_width));
 6267|     66|            std::tie(it, postfix_width) = postfix_result;
 6268|     66|        }
 6269|       |
 6270|     66|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|     66|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|     66|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 4, False: 62]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      4|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      4|    }
  ------------------
 6271|     66|            specs, prefix_width, value_width, postfix_width));
 6272|     62|        return it;
 6273|     66|    }
_ZNK3scn2v44impl20reader_impl_for_boolIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5602|    308|    {
 5603|    308|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5604|       |
 5605|    308|#if !SCN_DISABLE_LOCALE
 5606|    308|        if (specs.localized) {
  ------------------
  |  Branch (5606:13): [True: 28, False: 280]
  ------------------
 5607|     28|            return rd.read_localized(range, loc, value);
 5608|     28|        }
 5609|    280|#endif
 5610|       |
 5611|    280|        return rd.read_classic(range, value);
 5612|    308|    }
_ZN3scn2v44impl20reader_impl_for_boolIwE11get_optionsERKNS0_6detail12format_specsE:
 5615|    848|    {
 5616|    848|        SCN_GCC_COMPAT_PUSH
 5617|    848|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5618|       |
 5619|    848|        switch (specs.type) {
 5620|    110|            case detail::presentation_type::string:
  ------------------
  |  Branch (5620:13): [True: 110, False: 738]
  ------------------
 5621|    110|                return bool_reader_base::allow_text;
 5622|       |
 5623|     24|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5623:13): [True: 24, False: 824]
  ------------------
 5624|     48|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5624:13): [True: 24, False: 824]
  ------------------
 5625|     56|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5625:13): [True: 8, False: 840]
  ------------------
 5626|     72|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5626:13): [True: 16, False: 832]
  ------------------
 5627|     92|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5627:13): [True: 20, False: 828]
  ------------------
 5628|    110|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5628:13): [True: 18, False: 830]
  ------------------
 5629|    110|                return bool_reader_base::allow_numeric;
 5630|       |
 5631|    628|            default:
  ------------------
  |  Branch (5631:13): [True: 628, False: 220]
  ------------------
 5632|    628|                return bool_reader_base::allow_text |
 5633|    628|                       bool_reader_base::allow_numeric;
 5634|    848|        }
 5635|       |
 5636|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5637|    848|    }
_ZNK3scn2v44impl11bool_readerIwE14read_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refERb:
 5513|     28|    {
 5514|     28|        scan_error err{scan_error::invalid_scanned_value,
 5515|     28|                       "Failed to read boolean"};
 5516|       |
 5517|     28|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5517:13): [True: 26, False: 2]
  ------------------
 5518|     26|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5518:22): [True: 4, False: 22]
  ------------------
 5519|      4|                return *r;
 5520|      4|            }
 5521|     22|            else {
 5522|     22|                err = r.error();
 5523|     22|            }
 5524|     26|        }
 5525|       |
 5526|     24|        if (m_options & allow_text) {
  ------------------
  |  Branch (5526:13): [True: 14, False: 10]
  ------------------
 5527|     14|            auto stdloc = loc.get<std::locale>();
 5528|     14|            const auto& numpunct =
 5529|     14|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5530|     14|            const auto truename = numpunct.truename();
 5531|     14|            const auto falsename = numpunct.falsename();
 5532|       |
 5533|     14|            if (auto r =
  ------------------
  |  Branch (5533:22): [True: 0, False: 14]
  ------------------
 5534|     14|                    read_textual_custom(range, value, truename, falsename)) {
 5535|      0|                return *r;
 5536|      0|            }
 5537|     14|            else {
 5538|     14|                err = r.error();
 5539|     14|            }
 5540|     14|        }
 5541|       |
 5542|     24|        return unexpected(err);
 5543|     24|    }
_ZNK3scn2v44impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5469|    258|    {
 5470|    258|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5470:18): [True: 22, False: 236]
  ------------------
 5471|     22|            value = false;
 5472|     22|            return *r;
 5473|     22|        }
 5474|    236|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5474:18): [True: 0, False: 236]
  ------------------
 5475|      0|            value = true;
 5476|      0|            return *r;
 5477|      0|        }
 5478|       |
 5479|    236|        return detail::unexpected_scan_error(
 5480|    236|            scan_error::invalid_scanned_value,
 5481|    236|            "Failed to read numeric boolean value: No match");
 5482|    236|    }
_ZN3scn2v44impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2278|    494|{
 2279|    494|    auto it = read_code_unit(range);
 2280|    494|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|    494|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 494]
  |  |  ------------------
  ------------------
 2281|      0|        return unexpected(make_eof_parse_error(it.error()));
 2282|      0|    }
 2283|       |
 2284|    494|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  | 1039|    494|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 472, False: 22]
  |  |  ------------------
  ------------------
 2285|    494|                     static_cast<detail::char_t<Range>>(ch))) {
 2286|    472|        return unexpected(parse_error::error);
 2287|    472|    }
 2288|       |
 2289|     22|    return *it;
 2290|    494|}
_ZNK3scn2v44impl11bool_readerIwE19read_textual_customINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RbNSF_17basic_string_viewIwNSF_11char_traitsIwEEEESR_:
 5553|     14|    {
 5554|     14|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5555|     14|        const auto shorter = std::pair{
 5556|     14|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5556:13): [True: 14, False: 0]
  ------------------
 5557|     14|        const auto longer = std::pair{
 5558|     14|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5558:13): [True: 0, False: 14]
  ------------------
 5559|       |
 5560|     14|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5560:18): [True: 0, False: 14]
  ------------------
 5561|      0|            value = shorter.second;
 5562|      0|            return *r;
 5563|      0|        }
 5564|     14|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5564:18): [True: 0, False: 14]
  ------------------
 5565|      0|            value = longer.second;
 5566|      0|            return *r;
 5567|      0|        }
 5568|       |
 5569|     14|        return detail::unexpected_scan_error(
 5570|     14|            scan_error::invalid_scanned_value,
 5571|     14|            "Failed to read textual boolean: No match");
 5572|     14|    }
_ZN3scn2v44impl20read_matching_stringINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewINDTcl4implISF_EEE4typeENSD_11char_traitsISN_EEEE:
 2311|     28|{
 2312|     28|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3958|     28|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|     28|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|     28|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|     28|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 18, False: 10]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     18|    }                                                  \
  |  |  |  | 3957|     28|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2313|     10|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2314|     10|                    .transform_error(make_eof_parse_error));
 2315|       |
 2316|     10|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2317|     10|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  | 1039|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 10, False: 0]
  |  |  ------------------
  ------------------
 2318|     10|        return unexpected(parse_error::error);
 2319|     10|    }
 2320|      0|    return it;
 2321|     10|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1955|    504|{
 1956|    504|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1104|    504|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    504|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|    504|    else {
 1967|    504|        auto it = range.begin();
 1968|    504|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 0, False: 504]
  ------------------
 1969|      0|            return ranges::next(it, count);
 1970|      0|        }
 1971|       |
 1972|  2.47k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 2.08k, False: 386]
  ------------------
 1973|  2.08k|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 118, False: 1.97k]
  ------------------
 1974|    118|                return unexpected(eof_error::eof);
 1975|    118|            }
 1976|  2.08k|        }
 1977|       |
 1978|    386|        return it;
 1979|    504|    }
 1980|    504|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEmT_:
 1095|    504|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|       |                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|       |        else {
 1107|       |            if (r.begin().stores_parent()) {
 1108|       |                return static_cast<size_t>(
 1109|       |                    r.begin().parent()->chars_available() -
 1110|       |                    r.begin().position());
 1111|       |            }
 1112|       |            return r.begin().contiguous_segment().size();
 1113|       |        }
 1114|       |    }
 1115|    504|    else {
 1116|    504|        return 0;
 1117|    504|    }
 1118|    504|}
_ZNK3scn2v44impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5440|    280|    {
 5441|    280|        scan_error err{scan_error::invalid_scanned_value,
 5442|    280|                       "Failed to read boolean"};
 5443|       |
 5444|    280|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5444:13): [True: 232, False: 48]
  ------------------
 5445|    232|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5445:22): [True: 18, False: 214]
  ------------------
 5446|     18|                return *r;
 5447|     18|            }
 5448|    214|            else {
 5449|    214|                err = r.error();
 5450|    214|            }
 5451|    232|        }
 5452|       |
 5453|    262|        if (m_options & allow_text) {
  ------------------
  |  Branch (5453:13): [True: 238, False: 24]
  ------------------
 5454|    238|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5454:22): [True: 0, False: 238]
  ------------------
 5455|      0|                return *r;
 5456|      0|            }
 5457|    238|            else {
 5458|    238|                err = r.error();
 5459|    238|            }
 5460|    238|        }
 5461|       |
 5462|    262|        return unexpected(err);
 5463|    262|    }
_ZNK3scn2v44impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5487|    238|    {
 5488|    238|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5488:18): [True: 0, False: 238]
  ------------------
 5489|      0|            value = true;
 5490|      0|            return *r;
 5491|      0|        }
 5492|    238|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5492:18): [True: 0, False: 238]
  ------------------
 5493|      0|            value = false;
 5494|      0|            return *r;
 5495|      0|        }
 5496|       |
 5497|    238|        return detail::unexpected_scan_error(
 5498|    238|            scan_error::invalid_scanned_value,
 5499|    238|            "Failed to read textual boolean value: No match");
 5500|    238|    }
_ZN3scn2v44impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2326|    476|{
 2327|    476|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3958|    476|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    476|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    476|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    476|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 100, False: 376]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    100|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    100|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    100|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    100|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    100|    }                                                  \
  |  |  |  | 3957|    476|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    376|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2328|    376|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2329|    376|                    .transform_error(make_eof_parse_error));
 2330|       |
 2331|       |    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2332|       |        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2333|       |        if (SCN_UNLIKELY(sv.view() != str)) {
 2334|       |            return unexpected(parse_error::error);
 2335|       |        }
 2336|       |        return it;
 2337|       |    }
 2338|    376|    else {
 2339|    376|        auto range_it = range.begin();
 2340|    376|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2340:28): [True: 376, False: 0]
  ------------------
 2341|    376|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  | 1039|    376|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 376, False: 0]
  |  |  ------------------
  ------------------
 2342|    376|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2343|    376|                return unexpected(parse_error::error);
 2344|    376|            }
 2345|    376|        }
 2346|      0|        return it;
 2347|    376|    }
 2348|    376|}
_ZNK3scn2v44impl20reader_impl_for_boolIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5602|    540|    {
 5603|    540|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5604|       |
 5605|    540|#if !SCN_DISABLE_LOCALE
 5606|    540|        if (specs.localized) {
  ------------------
  |  Branch (5606:13): [True: 32, False: 508]
  ------------------
 5607|     32|            return rd.read_localized(range, loc, value);
 5608|     32|        }
 5609|    508|#endif
 5610|       |
 5611|    508|        return rd.read_classic(range, value);
 5612|    540|    }
_ZNK3scn2v44impl11bool_readerIwE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5513|     32|    {
 5514|     32|        scan_error err{scan_error::invalid_scanned_value,
 5515|     32|                       "Failed to read boolean"};
 5516|       |
 5517|     32|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5517:13): [True: 30, False: 2]
  ------------------
 5518|     30|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5518:22): [True: 6, False: 24]
  ------------------
 5519|      6|                return *r;
 5520|      6|            }
 5521|     24|            else {
 5522|     24|                err = r.error();
 5523|     24|            }
 5524|     30|        }
 5525|       |
 5526|     26|        if (m_options & allow_text) {
  ------------------
  |  Branch (5526:13): [True: 14, False: 12]
  ------------------
 5527|     14|            auto stdloc = loc.get<std::locale>();
 5528|     14|            const auto& numpunct =
 5529|     14|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5530|     14|            const auto truename = numpunct.truename();
 5531|     14|            const auto falsename = numpunct.falsename();
 5532|       |
 5533|     14|            if (auto r =
  ------------------
  |  Branch (5533:22): [True: 0, False: 14]
  ------------------
 5534|     14|                    read_textual_custom(range, value, truename, falsename)) {
 5535|      0|                return *r;
 5536|      0|            }
 5537|     14|            else {
 5538|     14|                err = r.error();
 5539|     14|            }
 5540|     14|        }
 5541|       |
 5542|     26|        return unexpected(err);
 5543|     26|    }
_ZNK3scn2v44impl11bool_readerIwE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIwNSD_11char_traitsIwEEEESP_:
 5553|     14|    {
 5554|     14|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5555|     14|        const auto shorter = std::pair{
 5556|     14|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5556:13): [True: 14, False: 0]
  ------------------
 5557|     14|        const auto longer = std::pair{
 5558|     14|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5558:13): [True: 0, False: 14]
  ------------------
 5559|       |
 5560|     14|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5560:18): [True: 0, False: 14]
  ------------------
 5561|      0|            value = shorter.second;
 5562|      0|            return *r;
 5563|      0|        }
 5564|     14|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5564:18): [True: 0, False: 14]
  ------------------
 5565|      0|            value = longer.second;
 5566|      0|            return *r;
 5567|      0|        }
 5568|       |
 5569|     14|        return detail::unexpected_scan_error(
 5570|     14|            scan_error::invalid_scanned_value,
 5571|     14|            "Failed to read textual boolean: No match");
 5572|     14|    }
_ZN3scn2v44impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2311|     28|{
 2312|     28|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3958|     28|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|     28|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|     28|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|     28|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 2, False: 26]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      2|    }                                                  \
  |  |  |  | 3957|     28|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     26|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2313|     26|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2314|     26|                    .transform_error(make_eof_parse_error));
 2315|       |
 2316|     26|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2317|     26|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  | 1039|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 26, False: 0]
  |  |  ------------------
  ------------------
 2318|     26|        return unexpected(parse_error::error);
 2319|     26|    }
 2320|      0|    return it;
 2321|     26|}
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIwEENS0_13scan_expectedIS9_EERT_:
 6277|  1.42k|    {
 6278|       |        if constexpr (!detail::is_type_disabled<T> &&
 6279|       |                      std::is_same_v<
 6280|       |                          context_type,
 6281|  1.42k|                          basic_contiguous_scan_context<char_type>>) {
 6282|  1.42k|            auto rd = make_reader<T, char_type>();
 6283|  1.42k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  1.42k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  1.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 724, False: 702]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|    724|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|    724|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    724|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    724|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|    724|    }
  ------------------
 6284|    702|            return impl(rd, range, value);
 6285|       |        }
 6286|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6287|       |            auto rd = make_reader<T, char_type>();
 6288|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6289|       |
 6290|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6291|       |                specs.width != 0) {
 6292|       |                return impl(rd, range, value);
 6293|       |            }
 6294|       |
 6295|       |            auto crange = get_as_contiguous(range);
 6296|       |            SCN_TRY(it, impl(rd, crange, value));
 6297|       |            return ranges::next(range.begin(),
 6298|       |                                ranges::distance(crange.begin(), it));
 6299|       |        }
 6300|       |        else {
 6301|       |            SCN_EXPECT(false);
 6302|       |            SCN_UNREACHABLE;
 6303|       |        }
 6304|  1.42k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_wcharIwEESA_wEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6212|    702|    {
 6213|    702|        const bool need_skipped_width =
 6214|    702|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6214:13): [True: 256, False: 446]
  |  Branch (6214:33): [True: 250, False: 196]
  ------------------
 6215|       |
 6216|       |        // Read prefix
 6217|    702|        auto it = rng.begin();
 6218|    702|        std::ptrdiff_t prefix_width = 0;
 6219|    702|        if (specs.precision != 0) {
  ------------------
  |  Branch (6219:13): [True: 252, False: 450]
  ------------------
 6220|    252|            auto max_width_view = take_width(rng, specs.precision);
 6221|    252|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|    252|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    252|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    252|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    252|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 252]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    252|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    252|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6222|    252|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6223|    252|            it = prefix_result.first.base();
 6224|    252|            prefix_width = prefix_result.second;
 6225|    252|        }
 6226|    450|        else {
 6227|    450|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|    450|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    450|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    450|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    450|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 450]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    450|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    450|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6228|    450|            std::tie(it, prefix_width) = prefix_result;
 6229|    450|        }
 6230|    702|        auto prefix_end_it = it;
 6231|       |
 6232|       |        // Read value
 6233|    702|        std::ptrdiff_t value_width = 0;
 6234|    702|        if (specs.precision != 0) {
  ------------------
  |  Branch (6234:13): [True: 252, False: 450]
  ------------------
 6235|    252|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6235:17): [True: 2, False: 250]
  ------------------
 6236|      2|                return detail::unexpected_scan_error(
 6237|      2|                    scan_error::invalid_fill,
 6238|      2|                    "Too many fill characters before value, "
 6239|      2|                    "precision exceeded before reading value");
 6240|      2|            }
 6241|       |
 6242|    250|            const auto initial_width = specs.precision - prefix_width;
 6243|    250|            auto max_width_view =
 6244|    250|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6245|    250|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|    250|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    250|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    250|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    250|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 34, False: 216]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     34|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     34|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     34|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     34|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     34|    }                                                  \
  |  |  |  | 3957|    250|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    216|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|    216|            it = w_it.base();
 6247|    216|            value_width = initial_width - w_it.count();
 6248|    216|        }
 6249|    450|        else {
 6250|    450|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|    450|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|    450|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|    450|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 40, False: 410]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|     40|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|     40|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|     40|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|     40|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|     40|    }                                                  \
  |  | 3957|    450|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|    450|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6251|    410|                                             specs, value, loc));
 6252|       |
 6253|    410|            if (need_skipped_width) {
  ------------------
  |  Branch (6253:17): [True: 248, False: 162]
  ------------------
 6254|    248|                value_width = calculate_text_width(
 6255|    248|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6256|    248|                        .view());
 6257|    248|            }
 6258|    410|        }
 6259|       |
 6260|       |        // Read postfix
 6261|    626|        std::ptrdiff_t postfix_width = 0;
 6262|    626|        if (it != rng.end()) {
  ------------------
  |  Branch (6262:13): [True: 626, False: 0]
  ------------------
 6263|    626|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|    626|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    626|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    626|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    626|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 626]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    626|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    626|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|    626|                    impl_postfix(ranges::subrange{it, rng.end()},
 6265|    626|                                 rd.skip_ws_before_read(), prefix_width,
 6266|    626|                                 value_width));
 6267|    626|            std::tie(it, postfix_width) = postfix_result;
 6268|    626|        }
 6269|       |
 6270|    626|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|    626|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    626|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 238, False: 388]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|    238|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|    238|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    238|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    238|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|    238|    }
  ------------------
 6271|    626|            specs, prefix_width, value_width, postfix_width));
 6272|    388|        return it;
 6273|    626|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIdEENS0_13scan_expectedIS9_EERT_:
 6277|  1.49k|    {
 6278|       |        if constexpr (!detail::is_type_disabled<T> &&
 6279|       |                      std::is_same_v<
 6280|       |                          context_type,
 6281|  1.49k|                          basic_contiguous_scan_context<char_type>>) {
 6282|  1.49k|            auto rd = make_reader<T, char_type>();
 6283|  1.49k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  1.49k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  1.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 714, False: 778]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|    714|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|    714|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    714|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    714|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|    714|    }
  ------------------
 6284|    778|            return impl(rd, range, value);
 6285|       |        }
 6286|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6287|       |            auto rd = make_reader<T, char_type>();
 6288|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6289|       |
 6290|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6291|       |                specs.width != 0) {
 6292|       |                return impl(rd, range, value);
 6293|       |            }
 6294|       |
 6295|       |            auto crange = get_as_contiguous(range);
 6296|       |            SCN_TRY(it, impl(rd, crange, value));
 6297|       |            return ranges::next(range.begin(),
 6298|       |                                ranges::distance(crange.begin(), it));
 6299|       |        }
 6300|       |        else {
 6301|       |            SCN_EXPECT(false);
 6302|       |            SCN_UNREACHABLE;
 6303|       |        }
 6304|  1.49k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6212|    778|    {
 6213|    778|        const bool need_skipped_width =
 6214|    778|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6214:13): [True: 264, False: 514]
  |  Branch (6214:33): [True: 262, False: 252]
  ------------------
 6215|       |
 6216|       |        // Read prefix
 6217|    778|        auto it = rng.begin();
 6218|    778|        std::ptrdiff_t prefix_width = 0;
 6219|    778|        if (specs.precision != 0) {
  ------------------
  |  Branch (6219:13): [True: 266, False: 512]
  ------------------
 6220|    266|            auto max_width_view = take_width(rng, specs.precision);
 6221|    266|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|    266|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    266|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    266|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    266|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 16, False: 250]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     16|    }                                                  \
  |  |  |  | 3957|    266|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    250|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6222|    250|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6223|    250|            it = prefix_result.first.base();
 6224|    250|            prefix_width = prefix_result.second;
 6225|    250|        }
 6226|    512|        else {
 6227|    512|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|    512|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    512|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    512|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    512|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 512]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    512|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    512|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6228|    512|            std::tie(it, prefix_width) = prefix_result;
 6229|    512|        }
 6230|    762|        auto prefix_end_it = it;
 6231|       |
 6232|       |        // Read value
 6233|    762|        std::ptrdiff_t value_width = 0;
 6234|    762|        if (specs.precision != 0) {
  ------------------
  |  Branch (6234:13): [True: 250, False: 512]
  ------------------
 6235|    250|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6235:17): [True: 4, False: 246]
  ------------------
 6236|      4|                return detail::unexpected_scan_error(
 6237|      4|                    scan_error::invalid_fill,
 6238|      4|                    "Too many fill characters before value, "
 6239|      4|                    "precision exceeded before reading value");
 6240|      4|            }
 6241|       |
 6242|    246|            const auto initial_width = specs.precision - prefix_width;
 6243|    246|            auto max_width_view =
 6244|    246|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6245|    246|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|    246|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    246|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    246|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    246|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 226, False: 20]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    226|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    226|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    226|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    226|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    226|    }                                                  \
  |  |  |  | 3957|    246|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     20|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|     20|            it = w_it.base();
 6247|     20|            value_width = initial_width - w_it.count();
 6248|     20|        }
 6249|    512|        else {
 6250|    512|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|    512|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|    512|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|    512|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 426, False: 86]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|    426|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|    426|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    426|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    426|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|    426|    }                                                  \
  |  | 3957|    512|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|    512|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6251|     86|                                             specs, value, loc));
 6252|       |
 6253|     86|            if (need_skipped_width) {
  ------------------
  |  Branch (6253:17): [True: 8, False: 78]
  ------------------
 6254|      8|                value_width = calculate_text_width(
 6255|      8|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6256|      8|                        .view());
 6257|      8|            }
 6258|     86|        }
 6259|       |
 6260|       |        // Read postfix
 6261|    106|        std::ptrdiff_t postfix_width = 0;
 6262|    106|        if (it != rng.end()) {
  ------------------
  |  Branch (6262:13): [True: 106, False: 0]
  ------------------
 6263|    106|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|    106|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    106|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    106|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    106|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 106]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    106|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    106|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|    106|                    impl_postfix(ranges::subrange{it, rng.end()},
 6265|    106|                                 rd.skip_ws_before_read(), prefix_width,
 6266|    106|                                 value_width));
 6267|    106|            std::tie(it, postfix_width) = postfix_result;
 6268|    106|        }
 6269|       |
 6270|    106|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|    106|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    106|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 4, False: 102]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      4|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      4|    }
  ------------------
 6271|    106|            specs, prefix_width, value_width, postfix_width));
 6272|    102|        return it;
 6273|    106|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6277|  1.42k|    {
 6278|       |        if constexpr (!detail::is_type_disabled<T> &&
 6279|       |                      std::is_same_v<
 6280|       |                          context_type,
 6281|  1.42k|                          basic_contiguous_scan_context<char_type>>) {
 6282|  1.42k|            auto rd = make_reader<T, char_type>();
 6283|  1.42k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  1.42k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  1.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 242, False: 1.18k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|    242|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|    242|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    242|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    242|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|    242|    }
  ------------------
 6284|  1.18k|            return impl(rd, range, value);
 6285|       |        }
 6286|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6287|       |            auto rd = make_reader<T, char_type>();
 6288|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6289|       |
 6290|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6291|       |                specs.width != 0) {
 6292|       |                return impl(rd, range, value);
 6293|       |            }
 6294|       |
 6295|       |            auto crange = get_as_contiguous(range);
 6296|       |            SCN_TRY(it, impl(rd, crange, value));
 6297|       |            return ranges::next(range.begin(),
 6298|       |                                ranges::distance(crange.begin(), it));
 6299|       |        }
 6300|       |        else {
 6301|       |            SCN_EXPECT(false);
 6302|       |            SCN_UNREACHABLE;
 6303|       |        }
 6304|  1.42k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6212|  1.18k|    {
 6213|  1.18k|        const bool need_skipped_width =
 6214|  1.18k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6214:13): [True: 364, False: 820]
  |  Branch (6214:33): [True: 474, False: 346]
  ------------------
 6215|       |
 6216|       |        // Read prefix
 6217|  1.18k|        auto it = rng.begin();
 6218|  1.18k|        std::ptrdiff_t prefix_width = 0;
 6219|  1.18k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6219:13): [True: 480, False: 704]
  ------------------
 6220|    480|            auto max_width_view = take_width(rng, specs.precision);
 6221|    480|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|    480|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    480|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    480|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    480|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 10, False: 470]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     10|    }                                                  \
  |  |  |  | 3957|    480|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    470|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6222|    470|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6223|    470|            it = prefix_result.first.base();
 6224|    470|            prefix_width = prefix_result.second;
 6225|    470|        }
 6226|    704|        else {
 6227|    704|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|    704|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    704|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    704|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    704|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 704]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    704|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    704|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6228|    704|            std::tie(it, prefix_width) = prefix_result;
 6229|    704|        }
 6230|  1.17k|        auto prefix_end_it = it;
 6231|       |
 6232|       |        // Read value
 6233|  1.17k|        std::ptrdiff_t value_width = 0;
 6234|  1.17k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6234:13): [True: 470, False: 704]
  ------------------
 6235|    470|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6235:17): [True: 6, False: 464]
  ------------------
 6236|      6|                return detail::unexpected_scan_error(
 6237|      6|                    scan_error::invalid_fill,
 6238|      6|                    "Too many fill characters before value, "
 6239|      6|                    "precision exceeded before reading value");
 6240|      6|            }
 6241|       |
 6242|    464|            const auto initial_width = specs.precision - prefix_width;
 6243|    464|            auto max_width_view =
 6244|    464|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6245|    464|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|    464|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    464|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    464|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    464|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 158, False: 306]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    158|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    158|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    158|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    158|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    158|    }                                                  \
  |  |  |  | 3957|    464|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    306|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|    306|            it = w_it.base();
 6247|    306|            value_width = initial_width - w_it.count();
 6248|    306|        }
 6249|    704|        else {
 6250|    704|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|    704|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|    704|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|    704|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 70, False: 634]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|     70|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|     70|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|     70|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|     70|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|     70|    }                                                  \
  |  | 3957|    704|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|    704|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6251|    634|                                             specs, value, loc));
 6252|       |
 6253|    634|            if (need_skipped_width) {
  ------------------
  |  Branch (6253:17): [True: 348, False: 286]
  ------------------
 6254|    348|                value_width = calculate_text_width(
 6255|    348|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6256|    348|                        .view());
 6257|    348|            }
 6258|    634|        }
 6259|       |
 6260|       |        // Read postfix
 6261|    940|        std::ptrdiff_t postfix_width = 0;
 6262|    940|        if (it != rng.end()) {
  ------------------
  |  Branch (6262:13): [True: 574, False: 366]
  ------------------
 6263|    574|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|    574|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    574|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    574|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    574|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 574]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    574|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    574|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|    574|                    impl_postfix(ranges::subrange{it, rng.end()},
 6265|    574|                                 rd.skip_ws_before_read(), prefix_width,
 6266|    574|                                 value_width));
 6267|    574|            std::tie(it, postfix_width) = postfix_result;
 6268|    574|        }
 6269|       |
 6270|    940|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|    940|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    940|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 80, False: 860]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|     80|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|     80|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|     80|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|     80|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|     80|    }
  ------------------
 6271|    940|            specs, prefix_width, value_width, postfix_width));
 6272|    860|        return it;
 6273|    940|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6277|  1.42k|    {
 6278|       |        if constexpr (!detail::is_type_disabled<T> &&
 6279|       |                      std::is_same_v<
 6280|       |                          context_type,
 6281|  1.42k|                          basic_contiguous_scan_context<char_type>>) {
 6282|  1.42k|            auto rd = make_reader<T, char_type>();
 6283|  1.42k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  1.42k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  1.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 242, False: 1.18k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|    242|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|    242|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    242|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    242|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|    242|    }
  ------------------
 6284|  1.18k|            return impl(rd, range, value);
 6285|       |        }
 6286|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6287|       |            auto rd = make_reader<T, char_type>();
 6288|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6289|       |
 6290|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6291|       |                specs.width != 0) {
 6292|       |                return impl(rd, range, value);
 6293|       |            }
 6294|       |
 6295|       |            auto crange = get_as_contiguous(range);
 6296|       |            SCN_TRY(it, impl(rd, crange, value));
 6297|       |            return ranges::next(range.begin(),
 6298|       |                                ranges::distance(crange.begin(), it));
 6299|       |        }
 6300|       |        else {
 6301|       |            SCN_EXPECT(false);
 6302|       |            SCN_UNREACHABLE;
 6303|       |        }
 6304|  1.42k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6212|  1.18k|    {
 6213|  1.18k|        const bool need_skipped_width =
 6214|  1.18k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6214:13): [True: 364, False: 820]
  |  Branch (6214:33): [True: 474, False: 346]
  ------------------
 6215|       |
 6216|       |        // Read prefix
 6217|  1.18k|        auto it = rng.begin();
 6218|  1.18k|        std::ptrdiff_t prefix_width = 0;
 6219|  1.18k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6219:13): [True: 480, False: 704]
  ------------------
 6220|    480|            auto max_width_view = take_width(rng, specs.precision);
 6221|    480|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|    480|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    480|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    480|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    480|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 10, False: 470]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     10|    }                                                  \
  |  |  |  | 3957|    480|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    470|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6222|    470|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6223|    470|            it = prefix_result.first.base();
 6224|    470|            prefix_width = prefix_result.second;
 6225|    470|        }
 6226|    704|        else {
 6227|    704|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|    704|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    704|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    704|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    704|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 704]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    704|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    704|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6228|    704|            std::tie(it, prefix_width) = prefix_result;
 6229|    704|        }
 6230|  1.17k|        auto prefix_end_it = it;
 6231|       |
 6232|       |        // Read value
 6233|  1.17k|        std::ptrdiff_t value_width = 0;
 6234|  1.17k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6234:13): [True: 470, False: 704]
  ------------------
 6235|    470|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6235:17): [True: 6, False: 464]
  ------------------
 6236|      6|                return detail::unexpected_scan_error(
 6237|      6|                    scan_error::invalid_fill,
 6238|      6|                    "Too many fill characters before value, "
 6239|      6|                    "precision exceeded before reading value");
 6240|      6|            }
 6241|       |
 6242|    464|            const auto initial_width = specs.precision - prefix_width;
 6243|    464|            auto max_width_view =
 6244|    464|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6245|    464|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|    464|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    464|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    464|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    464|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 158, False: 306]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    158|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    158|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    158|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    158|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    158|    }                                                  \
  |  |  |  | 3957|    464|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    306|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|    306|            it = w_it.base();
 6247|    306|            value_width = initial_width - w_it.count();
 6248|    306|        }
 6249|    704|        else {
 6250|    704|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|    704|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|    704|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|    704|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 70, False: 634]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|     70|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|     70|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|     70|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|     70|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|     70|    }                                                  \
  |  | 3957|    704|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|    704|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6251|    634|                                             specs, value, loc));
 6252|       |
 6253|    634|            if (need_skipped_width) {
  ------------------
  |  Branch (6253:17): [True: 348, False: 286]
  ------------------
 6254|    348|                value_width = calculate_text_width(
 6255|    348|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6256|    348|                        .view());
 6257|    348|            }
 6258|    634|        }
 6259|       |
 6260|       |        // Read postfix
 6261|    940|        std::ptrdiff_t postfix_width = 0;
 6262|    940|        if (it != rng.end()) {
  ------------------
  |  Branch (6262:13): [True: 574, False: 366]
  ------------------
 6263|    574|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|    574|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    574|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    574|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    574|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 574]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    574|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    574|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|    574|                    impl_postfix(ranges::subrange{it, rng.end()},
 6265|    574|                                 rd.skip_ws_before_read(), prefix_width,
 6266|    574|                                 value_width));
 6267|    574|            std::tie(it, postfix_width) = postfix_result;
 6268|    574|        }
 6269|       |
 6270|    940|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|    940|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    940|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 80, False: 860]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|     80|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|     80|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|     80|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|     80|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|     80|    }
  ------------------
 6271|    940|            specs, prefix_width, value_width, postfix_width));
 6272|    860|        return it;
 6273|    940|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6277|  1.42k|    {
 6278|       |        if constexpr (!detail::is_type_disabled<T> &&
 6279|       |                      std::is_same_v<
 6280|       |                          context_type,
 6281|  1.42k|                          basic_contiguous_scan_context<char_type>>) {
 6282|  1.42k|            auto rd = make_reader<T, char_type>();
 6283|  1.42k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  1.42k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  1.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 242, False: 1.18k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|    242|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|    242|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    242|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    242|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|    242|    }
  ------------------
 6284|  1.18k|            return impl(rd, range, value);
 6285|       |        }
 6286|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6287|       |            auto rd = make_reader<T, char_type>();
 6288|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6289|       |
 6290|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6291|       |                specs.width != 0) {
 6292|       |                return impl(rd, range, value);
 6293|       |            }
 6294|       |
 6295|       |            auto crange = get_as_contiguous(range);
 6296|       |            SCN_TRY(it, impl(rd, crange, value));
 6297|       |            return ranges::next(range.begin(),
 6298|       |                                ranges::distance(crange.begin(), it));
 6299|       |        }
 6300|       |        else {
 6301|       |            SCN_EXPECT(false);
 6302|       |            SCN_UNREACHABLE;
 6303|       |        }
 6304|  1.42k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6212|  1.18k|    {
 6213|  1.18k|        const bool need_skipped_width =
 6214|  1.18k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6214:13): [True: 364, False: 820]
  |  Branch (6214:33): [True: 474, False: 346]
  ------------------
 6215|       |
 6216|       |        // Read prefix
 6217|  1.18k|        auto it = rng.begin();
 6218|  1.18k|        std::ptrdiff_t prefix_width = 0;
 6219|  1.18k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6219:13): [True: 480, False: 704]
  ------------------
 6220|    480|            auto max_width_view = take_width(rng, specs.precision);
 6221|    480|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|    480|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    480|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    480|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    480|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 10, False: 470]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     10|    }                                                  \
  |  |  |  | 3957|    480|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    470|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6222|    470|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6223|    470|            it = prefix_result.first.base();
 6224|    470|            prefix_width = prefix_result.second;
 6225|    470|        }
 6226|    704|        else {
 6227|    704|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|    704|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    704|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    704|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    704|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 704]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    704|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    704|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6228|    704|            std::tie(it, prefix_width) = prefix_result;
 6229|    704|        }
 6230|  1.17k|        auto prefix_end_it = it;
 6231|       |
 6232|       |        // Read value
 6233|  1.17k|        std::ptrdiff_t value_width = 0;
 6234|  1.17k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6234:13): [True: 470, False: 704]
  ------------------
 6235|    470|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6235:17): [True: 6, False: 464]
  ------------------
 6236|      6|                return detail::unexpected_scan_error(
 6237|      6|                    scan_error::invalid_fill,
 6238|      6|                    "Too many fill characters before value, "
 6239|      6|                    "precision exceeded before reading value");
 6240|      6|            }
 6241|       |
 6242|    464|            const auto initial_width = specs.precision - prefix_width;
 6243|    464|            auto max_width_view =
 6244|    464|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6245|    464|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|    464|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    464|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    464|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    464|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 158, False: 306]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    158|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    158|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    158|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    158|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    158|    }                                                  \
  |  |  |  | 3957|    464|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    306|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|    306|            it = w_it.base();
 6247|    306|            value_width = initial_width - w_it.count();
 6248|    306|        }
 6249|    704|        else {
 6250|    704|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|    704|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|    704|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|    704|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 70, False: 634]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|     70|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|     70|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|     70|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|     70|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|     70|    }                                                  \
  |  | 3957|    704|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|    704|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6251|    634|                                             specs, value, loc));
 6252|       |
 6253|    634|            if (need_skipped_width) {
  ------------------
  |  Branch (6253:17): [True: 348, False: 286]
  ------------------
 6254|    348|                value_width = calculate_text_width(
 6255|    348|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6256|    348|                        .view());
 6257|    348|            }
 6258|    634|        }
 6259|       |
 6260|       |        // Read postfix
 6261|    940|        std::ptrdiff_t postfix_width = 0;
 6262|    940|        if (it != rng.end()) {
  ------------------
  |  Branch (6262:13): [True: 574, False: 366]
  ------------------
 6263|    574|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|    574|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    574|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    574|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    574|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 574]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    574|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    574|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|    574|                    impl_postfix(ranges::subrange{it, rng.end()},
 6265|    574|                                 rd.skip_ws_before_read(), prefix_width,
 6266|    574|                                 value_width));
 6267|    574|            std::tie(it, postfix_width) = postfix_result;
 6268|    574|        }
 6269|       |
 6270|    940|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|    940|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    940|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 80, False: 860]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|     80|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|     80|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|     80|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|     80|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|     80|    }
  ------------------
 6271|    940|            specs, prefix_width, value_width, postfix_width));
 6272|    860|        return it;
 6273|    940|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3574|    632|    {
 3575|    632|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3958|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 632]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    632|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3576|    632|                                   .transform_error(make_eof_scan_error));
 3577|       |
 3578|       |        if constexpr (!std::is_signed_v<T>) {
 3579|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3580|       |                return detail::unexpected_scan_error(
 3581|       |                    scan_error::invalid_scanned_value,
 3582|       |                    "Unexpected '-' sign when parsing an "
 3583|       |                    "unsigned value");
 3584|       |            }
 3585|       |        }
 3586|       |
 3587|    632|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3587:13): [True: 0, False: 632]
  ------------------
 3588|      0|            value = T{0};
 3589|      0|            return std::next(prefix_result.iterator);
 3590|      0|        }
 3591|       |
 3592|  1.26k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 632]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    632|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3593|  1.26k|                parse_integer_digits_without_thsep(
 3594|  1.26k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3595|  1.26k|                    prefix_result.parsed_base));
 3596|       |
 3597|  1.26k|        auto buf = make_contiguous_buffer(
 3598|  1.26k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3599|  1.26k|        SCN_TRY(result_it,
  ------------------
  |  | 3958|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 632, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    632|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    632|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    632|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    632|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    632|    }                                                  \
  |  |  |  | 3957|    632|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3600|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3601|      0|                                    prefix_result.parsed_base));
 3602|       |
 3603|      0|        return ranges::next(prefix_result.iterator,
 3604|      0|                            ranges::distance(buf.view().begin(), result_it));
 3605|  1.26k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3574|    632|    {
 3575|    632|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3958|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 632]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    632|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3576|    632|                                   .transform_error(make_eof_scan_error));
 3577|       |
 3578|    632|        if constexpr (!std::is_signed_v<T>) {
 3579|    632|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3579:17): [True: 0, False: 632]
  ------------------
 3580|      0|                return detail::unexpected_scan_error(
 3581|      0|                    scan_error::invalid_scanned_value,
 3582|      0|                    "Unexpected '-' sign when parsing an "
 3583|      0|                    "unsigned value");
 3584|      0|            }
 3585|    632|        }
 3586|       |
 3587|    632|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3587:13): [True: 0, False: 632]
  ------------------
 3588|      0|            value = T{0};
 3589|      0|            return std::next(prefix_result.iterator);
 3590|      0|        }
 3591|       |
 3592|  1.26k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 632]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    632|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3593|  1.26k|                parse_integer_digits_without_thsep(
 3594|  1.26k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3595|  1.26k|                    prefix_result.parsed_base));
 3596|       |
 3597|  1.26k|        auto buf = make_contiguous_buffer(
 3598|  1.26k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3599|  1.26k|        SCN_TRY(result_it,
  ------------------
  |  | 3958|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 632, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    632|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    632|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    632|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    632|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    632|    }                                                  \
  |  |  |  | 3957|    632|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3600|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3601|      0|                                    prefix_result.parsed_base));
 3602|       |
 3603|      0|        return ranges::next(prefix_result.iterator,
 3604|      0|                            ranges::distance(buf.view().begin(), result_it));
 3605|  1.26k|    }

LLVMFuzzerTestOneInput:
   68|  3.46k|{
   69|  3.46k|    scn::fuzz::run(data, size);
   70|  3.46k|    return 0;
   71|  3.46k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   51|  3.46k|{
   52|  3.46k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (52:9): [True: 0, False: 3.46k]
  |  Branch (52:35): [True: 0, False: 3.46k]
  ------------------
   53|      0|        return;
   54|      0|    }
   55|       |
   56|  3.46k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   57|       |
   58|  3.46k|    run_for_source(sv);
   59|  3.46k|    run_for_source(wsv_reinterpret);
   60|  3.46k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (60:9): [True: 3.46k, False: 0]
  ------------------
   61|  3.46k|        run_for_source(wsv_transcode);
   62|  3.46k|    }
   63|  3.46k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT_:
   36|  3.46k|{
   37|  3.46k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  3.46k|    run_for_type<char_type>(source);
   40|  3.46k|    run_for_type<int>(source);
   41|  3.46k|    run_for_type<unsigned>(source);
   42|  3.46k|    run_for_type<double>(source);
   43|  3.46k|    run_for_type<bool>(source);
   44|  3.46k|    run_for_type<void*>(source);
   45|  3.46k|    run_for_type<std::string>(source);
   46|  3.46k|    run_for_type<std::wstring>(source);
   47|  3.46k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  3.46k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIcNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  3.46k|{
   25|  3.46k|    {
   26|  3.46k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  3.46k|    }
   28|  3.46k|    {
   29|  3.46k|        auto _ =
   30|  3.46k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  3.46k|    }
   32|  3.46k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  3.46k|{
   25|  3.46k|    {
   26|  3.46k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  3.46k|    }
   28|  3.46k|    {
   29|  3.46k|        auto _ =
   30|  3.46k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  3.46k|    }
   32|  3.46k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  3.46k|{
   25|  3.46k|    {
   26|  3.46k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  3.46k|    }
   28|  3.46k|    {
   29|  3.46k|        auto _ =
   30|  3.46k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  3.46k|    }
   32|  3.46k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  3.46k|{
   25|  3.46k|    {
   26|  3.46k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  3.46k|    }
   28|  3.46k|    {
   29|  3.46k|        auto _ =
   30|  3.46k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  3.46k|    }
   32|  3.46k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  3.46k|{
   25|  3.46k|    {
   26|  3.46k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  3.46k|    }
   28|  3.46k|    {
   29|  3.46k|        auto _ =
   30|  3.46k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  3.46k|    }
   32|  3.46k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEvRT0_:
   24|  3.46k|{
   25|  3.46k|    {
   26|  3.46k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  3.46k|    }
   28|  3.46k|    {
   29|  3.46k|        auto _ =
   30|  3.46k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  3.46k|    }
   32|  3.46k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIcS6_EEEEvRT0_:
   24|  3.46k|{
   25|  3.46k|    {
   26|  3.46k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  3.46k|    }
   28|  3.46k|    {
   29|  3.46k|        auto _ =
   30|  3.46k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  3.46k|    }
   32|  3.46k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIcNS5_IcEEEEEEvRT0_:
   24|  3.46k|{
   25|  3.46k|    {
   26|  3.46k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  3.46k|    }
   28|  3.46k|    {
   29|  3.46k|        auto _ =
   30|  3.46k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  3.46k|    }
   32|  3.46k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEES7_EEvRT0_:
   24|  3.46k|{
   25|  3.46k|    {
   26|  3.46k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  3.46k|    }
   28|  3.46k|    {
   29|  3.46k|        auto _ =
   30|  3.46k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  3.46k|    }
   32|  3.46k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT_:
   36|  6.92k|{
   37|  6.92k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  6.92k|    run_for_type<char_type>(source);
   40|  6.92k|    run_for_type<int>(source);
   41|  6.92k|    run_for_type<unsigned>(source);
   42|  6.92k|    run_for_type<double>(source);
   43|  6.92k|    run_for_type<bool>(source);
   44|  6.92k|    run_for_type<void*>(source);
   45|  6.92k|    run_for_type<std::string>(source);
   46|  6.92k|    run_for_type<std::wstring>(source);
   47|  6.92k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  6.92k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIwNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  6.92k|{
   25|  6.92k|    {
   26|  6.92k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  6.92k|    }
   28|  6.92k|    {
   29|  6.92k|        auto _ =
   30|  6.92k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  6.92k|    }
   32|  6.92k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  6.92k|{
   25|  6.92k|    {
   26|  6.92k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  6.92k|    }
   28|  6.92k|    {
   29|  6.92k|        auto _ =
   30|  6.92k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  6.92k|    }
   32|  6.92k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  6.92k|{
   25|  6.92k|    {
   26|  6.92k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  6.92k|    }
   28|  6.92k|    {
   29|  6.92k|        auto _ =
   30|  6.92k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  6.92k|    }
   32|  6.92k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  6.92k|{
   25|  6.92k|    {
   26|  6.92k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  6.92k|    }
   28|  6.92k|    {
   29|  6.92k|        auto _ =
   30|  6.92k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  6.92k|    }
   32|  6.92k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  6.92k|{
   25|  6.92k|    {
   26|  6.92k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  6.92k|    }
   28|  6.92k|    {
   29|  6.92k|        auto _ =
   30|  6.92k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  6.92k|    }
   32|  6.92k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEvRT0_:
   24|  6.92k|{
   25|  6.92k|    {
   26|  6.92k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  6.92k|    }
   28|  6.92k|    {
   29|  6.92k|        auto _ =
   30|  6.92k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  6.92k|    }
   32|  6.92k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIwNS5_IwEEEEEEvRT0_:
   24|  6.92k|{
   25|  6.92k|    {
   26|  6.92k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  6.92k|    }
   28|  6.92k|    {
   29|  6.92k|        auto _ =
   30|  6.92k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  6.92k|    }
   32|  6.92k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIwS6_EEEEvRT0_:
   24|  6.92k|{
   25|  6.92k|    {
   26|  6.92k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  6.92k|    }
   28|  6.92k|    {
   29|  6.92k|        auto _ =
   30|  6.92k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  6.92k|    }
   32|  6.92k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEES7_EEvRT0_:
   24|  6.92k|{
   25|  6.92k|    {
   26|  6.92k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  6.92k|    }
   28|  6.92k|    {
   29|  6.92k|        auto _ =
   30|  6.92k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  6.92k|    }
   32|  6.92k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   52|  3.46k|{
   53|  3.46k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  | 1104|  3.46k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.46k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   54|       |
   55|       |    // narrow
   56|  3.46k|    string_buffer.resize(size);
   57|  3.46k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|  3.46k|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|  3.46k|    const auto wsv_reinterpret_size =
   62|  3.46k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 93, False: 3.36k]
  ------------------
   63|  3.46k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|  3.46k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   65|  3.46k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|  3.46k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   69|  3.46k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   70|       |
   71|  3.46k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   72|  3.46k|}

